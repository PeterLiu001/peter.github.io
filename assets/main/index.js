System.register("chunks:///_virtual/AccountListItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_AccountListItem.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_AccountListItem, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_AccountListItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "80b51MAcYZMMohyUfCnjJiz", "AccountListItem", undefined);
      var AccountListItem = exports('AccountListItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_AccountListItem) {
        _inheritsLoose(AccountListItem, _UI_AccountListItem);
        function AccountListItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_AccountListItem.call.apply(_UI_AccountListItem, [this].concat(args)) || this;
          _this.onItemDeleteClick = void 0;
          _this.itemIndex = void 0;
          return _this;
        }
        var _proto = AccountListItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_AccountListItem.prototype.onConstruct.call(this);
          this.name = 'AccountListItem';
          this.m_btnDelete.onClick(this.onBtnDeleteClick, this);
        };
        _proto.setItem = function setItem(index, account, onItemDeleteClick) {
          this.itemIndex = index;
          this.title = account;
          this.onItemDeleteClick = onItemDeleteClick;
        };
        _proto.onBtnDeleteClick = function onBtnDeleteClick(event) {
          event.bubbles = false; // 列表项如果包含其他的触摸的对象，如果不想在触发这个对象的的触摸事件的同时还触发列表项的触摸，需要取消这个事件的冒泡
          if (this.onItemDeleteClick) {
            this.onItemDeleteClick(this);
          }
        };
        return AccountListItem;
      }(UI_AccountListItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocalStorageTool.ts', './GameConfig.ts'], function (exports) {
  var _createClass, _inheritsLoose, cclegacy, Node, AudioSource, game, Game, Component, LocalStorageTool, GameConfig;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      AudioSource = module.AudioSource;
      game = module.game;
      Game = module.Game;
      Component = module.Component;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }, function (module) {
      GameConfig = module.GameConfig;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cdccfbAxkVPCYu2VLDbQPqM", "AudioManager", undefined);
      var AudioInfo = exports('AudioInfo', /*#__PURE__*/function () {
        function AudioInfo(url, parent, clip, vol, bloop) {
          if (vol === void 0) {
            vol = 1;
          }
          if (bloop === void 0) {
            bloop = false;
          }
          this.url = '';
          this.source = null;
          this.owner = null;
          this.isPause = false;
          this.url = url;
          this.owner = new Node();
          this.owner.parent = parent;
          this.source = this.owner.addComponent(AudioSource);
          this.source.clip = clip;
          this.source.volume = vol;
          this.source.loop = bloop;
        }
        var _proto = AudioInfo.prototype;
        _proto.play = function play() {
          this.isPause = false;
          if (this.source) {
            if (!this.source.playing) {
              this.source.play();
            }
          }
        };
        _proto.playOneShot = function playOneShot() {
          this.isPause = false;
          if (this.source) {
            this.source.playOneShot(this.source.clip);
          }
        };
        _proto.pause = function pause() {
          this.isPause = false;
          if (this.source) {
            if (this.source.playing) {
              this.isPause = true;
              this.source.pause();
            }
          }
        };
        _proto.stop = function stop() {
          this.isPause = false;
          if (this.source) {
            this.source.stop();
          }
        };
        _proto.resume = function resume() {
          if (this.source && this.isPause) {
            this.source.play();
          }
          this.isPause = false;
        };
        _createClass(AudioInfo, [{
          key: "volume",
          get: function get() {
            if (this.source) {
              return this.source.volume;
            }
            return 0;
          },
          set: function set(val) {
            if (this.source) {
              this.source.volume = val;
            }
          }
        }]);
        return AudioInfo;
      }());
      var AudioManager = exports('AudioManager', /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioManager, _Component);
        function AudioManager() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._commonAudioSource = null;
          _this._audioNode = null;
          _this._storeMusicKey = 'default_save_music';
          _this._storeMusicVolumeKey = 'default_save_music_volume_key';
          _this._storeEffectKey = 'default_save_effect';
          _this._storeEffectVolumeKey = 'default_save_effect_volume_key';
          /**@description 保存所有播放的音乐 */
          _this.effectInfos = new Map();
          /**@description 保存所有播放的音效 */
          _this.musicInfos = new Map();
          _this._musicVolume = 1;
          /**@description 音效音量 */
          _this._effectVolume = 1;
          /**@description 音效开关 */
          _this._isEffectOn = true;
          /**@description 背景音乐开关 */
          _this._isMusicOn = true;
          return _this;
        }
        var _proto2 = AudioManager.prototype;
        _proto2.init = function init(root) {
          this._audioNode = new Node();
          this._audioNode.name = 'pokerAudioCommonNode';
          this._audioNode.parent = root.node;
          //播放短音效
          this._commonAudioSource = this._audioNode.addComponent(AudioSource);
          this._isMusicOn = this.getItemFromStorage(this._storeMusicKey, true.toString()) == 'true' ? true : false;
          this._isEffectOn = this.getItemFromStorage(this._storeEffectKey, true.toString()) == 'true' ? true : false;
          this._effectVolume = Number(this.getItemFromStorage(this._storeEffectVolumeKey, '1'));
          this._musicVolume = Number(this.getItemFromStorage(this._storeMusicVolumeKey, '1'));
          game.on(Game.EVENT_HIDE, this.onEnterBackground.bind(this), this);
          game.on(Game.EVENT_SHOW, this.onEnterForgeground.bind(this), this);
        };
        _proto2.getItemFromStorage = function getItemFromStorage(key, defaultvalue) {
          var strvalue = LocalStorageTool.getString(key);
          if (!strvalue) {
            strvalue = defaultvalue;
            LocalStorageTool.setString(key, defaultvalue);
          }
          return strvalue;
        }

        //播放音效（无法停止和监听状态）
        ;

        _proto2.playSoundOnce = function playSoundOnce(path) {
          var _this2 = this;
          if (!this.isEffectOn) return;
          GameConfig.bundle.load(path, function (err, clip) {
            if (err) {
              console.error(err);
            } else {
              _this2._commonAudioSource.clip = clip;
              _this2._commonAudioSource.volume = _this2.effectVolume;
              _this2._commonAudioSource.play();
            }
          });
        }

        //播放音效(可以停止)
        ;

        _proto2.playSound = function playSound(path) {
          var _this3 = this;
          if (!this.isEffectOn) return;
          if (this.effectInfos.has(path)) {
            var paudio = this.effectInfos.get(path);
            paudio.play();
          } else {
            GameConfig.bundle.load(path, function (err, clip) {
              if (err) {
                console.error(err);
              } else {
                var clipsource = new AudioInfo(path, _this3._audioNode, clip, _this3.effectVolume);
                _this3.effectInfos.set(path, clipsource);
                _this3.playSound(path);
              }
            });
          }
        }

        //播放音乐
        ;

        _proto2.playMusic = function playMusic(path, loop) {
          var _this4 = this;
          if (loop === void 0) {
            loop = false;
          }
          if (!this.isMusicOn) return;
          this.stopMusic();
          if (this.musicInfos.has(path)) {
            var paudio = this.musicInfos.get(path);
            paudio.play();
          } else {
            GameConfig.bundle.load(path, function (err, clip) {
              if (err) {
                console.error(err);
              } else {
                var clipsource = new AudioInfo(path, _this4._audioNode, clip, _this4.musicVolume);
                _this4.musicInfos.set(path, clipsource);
                _this4.playMusic(path, loop);
              }
            });
          }
        };
        _proto2.pause = function pause() {
          this.pauseSound();
          this.pauseMusic();
        };
        _proto2.resume = function resume() {
          this.resumeSound();
          this.resumeMusic();
        };
        _proto2.stop = function stop() {
          this.stopSound();
          this.stopMusic();
        };
        _proto2.stopSoundByPath = function stopSoundByPath(url) {
          var info = this.effectInfos.get(url);
          info && info.stop();
        };
        _proto2.stopSound = function stopSound() {
          this.effectInfos.forEach(function (info, key, source) {
            info.stop();
          });
        };
        _proto2.stopMusic = function stopMusic() {
          this.musicInfos.forEach(function (info, key, source) {
            info.stop();
          });
        };
        _proto2.resumeSound = function resumeSound() {
          var _this5 = this;
          this.effectInfos.forEach(function (info, key, source) {
            _this5.isEffectOn && info.resume();
          });
        };
        _proto2.resumeMusic = function resumeMusic() {
          var _this6 = this;
          this.musicInfos.forEach(function (info, key, source) {
            _this6.isMusicOn && info.resume();
          });
        };
        _proto2.pauseSound = function pauseSound() {
          this.effectInfos.forEach(function (info, key, source) {
            info.pause();
          });
        };
        _proto2.pauseMusic = function pauseMusic() {
          this.musicInfos.forEach(function (info, key, source) {
            info.pause();
          });
        };
        _proto2.onEnterBackground = function onEnterBackground() {
          this.pause();
        };
        _proto2.onEnterForgeground = function onEnterForgeground() {
          this.resume();
        };
        _createClass(AudioManager, [{
          key: "musicVolume",
          get: /**@description 背景音乐音量 */
          function get() {
            return this._musicVolume;
          },
          set: function set(volume) {
            if (volume > 1) volume = 1;
            if (volume <= 0) volume = 0;

            //ios无法完全关闭声音这里用开关控制
            this.isMusicOn = volume <= 0;
            this._musicVolume = volume;
            this._commonAudioSource.volume = volume;
            this.musicInfos.forEach(function (v, k) {
              v.volume = volume;
            });
            LocalStorageTool.setString(this._storeMusicVolumeKey, volume.toString());
          }
        }, {
          key: "effectVolume",
          get: function get() {
            return this._effectVolume;
          },
          set: function set(volume) {
            if (volume > 1) volume = 1;
            if (volume <= 0) volume = 0;
            //ios无法完全关闭声音这里用开关控制
            this.isEffectOn = volume <= 0;
            this._effectVolume = volume;
            this.effectInfos.forEach(function (v, k) {
              v.volume = volume;
            });
            LocalStorageTool.setString(this._storeEffectVolumeKey, volume.toString());
          }
        }, {
          key: "isEffectOn",
          get: function get() {
            return this._isEffectOn;
          },
          set: function set(isOn) {
            this._isEffectOn = isOn;
            if (isOn) {
              this.resumeSound();
            } else {
              this.stopSound();
            }
            LocalStorageTool.setString(this._storeEffectKey, isOn.toString());
          }
        }, {
          key: "isMusicOn",
          get: function get() {
            return this._isMusicOn;
          }
          /**@description 设置背景音乐开关 */,
          set: function set(isOn) {
            this._isMusicOn = isOn;
            if (isOn) {
              this.resumeMusic();
            } else {
              this.stopMusic();
            }
            LocalStorageTool.setString(this._storeMusicKey, isOn.toString());
          }
        }], [{
          key: "inst",
          get: function get() {
            if (!this._inst) {
              this._inst = new AudioManager();
            }
            return this._inst;
          }
        }]);
        return AudioManager;
      }(Component));
      AudioManager._inst = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Avatar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './CocosDevKit.ts', './UI_Avatar.ts', './GameConfig.ts', './CryptoTool.ts', './OnError.ts', './GameDecorators.ts', './Utils.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, sys, path, native, assetManager, SpriteFrame, Texture2D, ImageAsset, UIPackage, UI_Avatar, GameConfig, CryptoTool, OnError, CustomFguiClass, Utils, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      path = module.path;
      native = module.native;
      assetManager = module.assetManager;
      SpriteFrame = module.SpriteFrame;
      Texture2D = module.Texture2D;
      ImageAsset = module.ImageAsset;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, null, function (module) {
      UI_Avatar = module.default;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      CryptoTool = module.CryptoTool;
    }, function (module) {
      OnError = module.OnError;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "f3fc4FlyeZImZSe0JilDkVg", "Avatar", undefined);
      var AvatarCache = [];
      function ReleaseAvatarResources() {
        if (AvatarCache.length >= 80) {
          for (var i = AvatarCache.length - 1; i > 40; i--) {
            var url = AvatarCache[i];
            var asset = assetManager.assets.get(url);
            if (asset) {
              assetManager.releaseAsset(asset);
            }
            AvatarCache.splice(i, 1);
          }
        }
      }
      function CacheAvatarResources(urlOrPath) {
        var idx = AvatarCache.indexOf(urlOrPath);
        if (idx == -1) {
          AvatarCache.unshift(urlOrPath);
        } else {
          AvatarCache.splice(idx, 1);
          AvatarCache.unshift(urlOrPath);
        }
      }

      /**
       * 头像组件，请务必将头像组件放到 GLoader 中使用，参考大厅和游戏牌桌上的头像使用方法
       */
      var Avatar = exports('Avatar', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Avatar) {
        _inheritsLoose(Avatar, _UI_Avatar);
        function Avatar() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Avatar.call.apply(_UI_Avatar, [this].concat(args)) || this;
          _this._avatar_url = void 0;
          return _this;
        }
        var _proto = Avatar.prototype;
        _proto.setContent = function setContent(url) {
          if (!url || url.length <= 0) return;
          if (url.startsWith('/')) {
            url = "" + GameConfig.curConfig.netImgPreAddr + url;
          } else if (!url.startsWith('http:') && !url.startsWith('https:')) {
            url = GameConfig.curConfig.netImgPreAddr + "/" + url;
          }
          if (sys.isNative) {
            this.setContentNative(url);
          } else {
            this.setContentWeb(url);
          }
        };
        _proto.setContentNative = function setContentNative(url) {
          var _this2 = this;
          var md5 = CryptoTool.hex_md5(url);
          var extname = path.extname(url);
          var DirRemoteHeadCache = path.join(native.fileUtils.getWritablePath(), 'RemoteHeadCache');
          if (!native.fileUtils.isDirectoryExist(DirRemoteHeadCache)) {
            native.fileUtils.createDirectory(DirRemoteHeadCache);
          }
          var fullCacheFilePath = path.join(DirRemoteHeadCache, "" + md5 + extname);
          if (native.fileUtils.isFileExist(fullCacheFilePath)) {
            CacheAvatarResources(fullCacheFilePath);
            this._avatar_url = fullCacheFilePath;
            this.m_contentItem.m_content.url = fullCacheFilePath;
          } else {
            this._avatar_url = url;
            assetManager.downloader.download(Utils.curLocalTimestamp.toString(), url, path.extname(url), {}, function (err, filePath) {
              if (err) {
                Log.debug.error('头像下载失败:', 'url:', url, err);
                OnError.cache(err);
                if (!_this2.node || !_this2.node.isValid) return;
                _this2.setDefaultIcon();
              } else if (native.fileUtils.isFileExist(filePath)) {
                if (native.fileUtils.renameFile(filePath, fullCacheFilePath)) {
                  if (_this2._avatar_url == url) {
                    if (!_this2.node || !_this2.node.isValid) return;
                    CacheAvatarResources(fullCacheFilePath);
                    _this2.m_contentItem.m_content.url = fullCacheFilePath;
                  }
                } else {
                  OnError.cache(new Error('Avatar 头像下载失败 renameFile fail'));
                }
              } else {
                OnError.cache(new Error("Avatar \u5934\u50CF\u4E0B\u8F7D\u5931\u8D25 \u6587\u4EF6\u4E0D\u5B58\u5728\uFF1A" + filePath));
              }
            });
          }
        };
        _proto.setContentWeb = function setContentWeb(url) {
          var _this3 = this;
          if (this._avatar_url != url) {
            this._avatar_url = url;
            assetManager.loadRemote(url, {}, function (err, asset) {
              if (!_this3.node || !_this3.node.isValid) return;
              if (err || !asset) {
                Log.debug.error('头像加载失败:', 'url:', url, err);
                OnError.cache(err);
                _this3.setDefaultIcon();
              } else {
                if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('/')) {
                  CacheAvatarResources(url);
                }
                if (_this3._avatar_url == url) {
                  if (asset instanceof SpriteFrame) _this3.m_contentItem.m_content.texture = asset;else if (asset instanceof Texture2D) {
                    var sf = new SpriteFrame();
                    sf.texture = asset;
                    _this3.m_contentItem.m_content.texture = sf;
                  } else if (asset instanceof ImageAsset) {
                    var texture = new Texture2D();
                    texture.image = asset;
                    var _sf = new SpriteFrame();
                    _sf.texture = texture;
                    _this3.m_contentItem.m_content.texture = _sf;
                  } else {
                    _this3.setDefaultIcon();
                  }
                }
              }
            });
          }
        };
        _proto.setDefaultIcon = function setDefaultIcon() {
          if (!this.node || !this.node.isValid || !this.node.active) return;
          var defaultItem = UIPackage.getItemByURL('ui://Public/loacl_avatar_default');
          this.m_contentItem.m_content.texture = defaultItem.asset;
        };
        _proto.onDestroy = function onDestroy() {
          _UI_Avatar.prototype.onDestroy.call(this);
          ReleaseAvatarResources();
        };
        return Avatar;
      }(UI_Avatar)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BlindLevelInfo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('BlindLevelInfo', void 0);
      cclegacy._RF.push({}, "4d664CJC0VDPLyniRGQLjCL", "BlindLevelInfo", undefined);
      var BlindLevelInfo;
      (function (_BlindLevelInfo) {
        var Config = _BlindLevelInfo.Config = [[{
          level: 1,
          bigBlinds: 30,
          ante: 0
        }, {
          level: 2,
          bigBlinds: 30,
          ante: 5
        }, {
          level: 3,
          bigBlinds: 120,
          ante: 10
        }, {
          level: 4,
          bigBlinds: 160,
          ante: 10
        }, {
          level: 5,
          bigBlinds: 200,
          ante: 10
        }, {
          level: 6,
          bigBlinds: 350,
          ante: 25
        }, {
          level: 7,
          bigBlinds: 500,
          ante: 25
        }, {
          level: 8,
          bigBlinds: 700,
          ante: 50
        }, {
          level: 9,
          bigBlinds: 900,
          ante: 50
        }, {
          level: 10,
          bigBlinds: 1200,
          ante: 50
        }, {
          level: 11,
          bigBlinds: 1800,
          ante: 100
        }, {
          level: 12,
          bigBlinds: 2400,
          ante: 200
        }, {
          level: 13,
          bigBlinds: 3200,
          ante: 200
        }, {
          level: 14,
          bigBlinds: 4500,
          ante: 300
        }, {
          level: 15,
          bigBlinds: 6400,
          ante: 400
        }, {
          level: 16,
          bigBlinds: 9000,
          ante: 500
        }, {
          level: 17,
          bigBlinds: 12000,
          ante: 600
        }, {
          level: 18,
          bigBlinds: 16000,
          ante: 800
        }, {
          level: 19,
          bigBlinds: 23000,
          ante: 800
        }, {
          level: 20,
          bigBlinds: 31000,
          ante: 1000
        }, {
          level: 21,
          bigBlinds: 40000,
          ante: 1200
        }, {
          level: 22,
          bigBlinds: 48000,
          ante: 1200
        }, {
          level: 23,
          bigBlinds: 60000,
          ante: 1500
        }, {
          level: 24,
          bigBlinds: 80000,
          ante: 2000
        }], [{
          level: 1,
          bigBlinds: 30,
          ante: 0
        }, {
          level: 2,
          bigBlinds: 30,
          ante: 10
        }, {
          level: 3,
          bigBlinds: 180,
          ante: 15
        }, {
          level: 4,
          bigBlinds: 280,
          ante: 20
        }, {
          level: 5,
          bigBlinds: 400,
          ante: 25
        }, {
          level: 6,
          bigBlinds: 650,
          ante: 50
        }, {
          level: 7,
          bigBlinds: 1000,
          ante: 100
        }, {
          level: 8,
          bigBlinds: 1800,
          ante: 100
        }, {
          level: 9,
          bigBlinds: 2800,
          ante: 200
        }, {
          level: 10,
          bigBlinds: 4500,
          ante: 400
        }, {
          level: 11,
          bigBlinds: 7000,
          ante: 600
        }, {
          level: 12,
          bigBlinds: 12000,
          ante: 1000
        }, {
          level: 13,
          bigBlinds: 19000,
          ante: 1500
        }, {
          level: 14,
          bigBlinds: 30000,
          ante: 3000
        }, {
          level: 15,
          bigBlinds: 40000,
          ante: 3000
        }, {
          level: 16,
          bigBlinds: 50000,
          ante: 3500
        }, {
          level: 17,
          bigBlinds: 60000,
          ante: 3500
        }, {
          level: 18,
          bigBlinds: 80000,
          ante: 4000
        }, {
          level: 19,
          bigBlinds: 100000,
          ante: 5000
        }, {
          level: 20,
          bigBlinds: 200000,
          ante: 10000
        }], [{
          level: 1,
          bigBlinds: 100,
          ante: 0
        }, {
          level: 2,
          bigBlinds: 200,
          ante: 0
        }, {
          level: 3,
          bigBlinds: 300,
          ante: 50
        }, {
          level: 4,
          bigBlinds: 400,
          ante: 50
        }, {
          level: 5,
          bigBlinds: 600,
          ante: 75
        }, {
          level: 6,
          bigBlinds: 800,
          ante: 100
        }, {
          level: 7,
          bigBlinds: 1000,
          ante: 150
        }, {
          level: 8,
          bigBlinds: 1200,
          ante: 200
        }, {
          level: 9,
          bigBlinds: 1600,
          ante: 200
        }, {
          level: 10,
          bigBlinds: 2000,
          ante: 300
        }, {
          level: 11,
          bigBlinds: 3000,
          ante: 400
        }, {
          level: 12,
          bigBlinds: 4000,
          ante: 500
        }, {
          level: 13,
          bigBlinds: 6000,
          ante: 800
        }, {
          level: 14,
          bigBlinds: 8000,
          ante: 1000
        }, {
          level: 15,
          bigBlinds: 10000,
          ante: 1500
        }, {
          level: 16,
          bigBlinds: 12000,
          ante: 1500
        }, {
          level: 17,
          bigBlinds: 16000,
          ante: 2000
        }, {
          level: 18,
          bigBlinds: 20000,
          ante: 3000
        }, {
          level: 19,
          bigBlinds: 30000,
          ante: 4000
        }, {
          level: 20,
          bigBlinds: 40000,
          ante: 5000
        }, {
          level: 21,
          bigBlinds: 60000,
          ante: 8000
        }, {
          level: 22,
          bigBlinds: 80000,
          ante: 10000
        }, {
          level: 23,
          bigBlinds: 100000,
          ante: 15000
        }, {
          level: 24,
          bigBlinds: 120000,
          ante: 15000
        }, {
          level: 25,
          bigBlinds: 160000,
          ante: 20000
        }, {
          level: 26,
          bigBlinds: 200000,
          ante: 30000
        }, {
          level: 27,
          bigBlinds: 300000,
          ante: 40000
        }, {
          level: 28,
          bigBlinds: 400000,
          ante: 50000
        }, {
          level: 29,
          bigBlinds: 600000,
          ante: 80000
        }, {
          level: 30,
          bigBlinds: 800000,
          ante: 100000
        }, {
          level: 31,
          bigBlinds: 1000000,
          ante: 150000
        }, {
          level: 32,
          bigBlinds: 1200000,
          ante: 175000
        }, {
          level: 33,
          bigBlinds: 1600000,
          ante: 200000
        }, {
          level: 34,
          bigBlinds: 2000000,
          ante: 300000
        }, {
          level: 35,
          bigBlinds: 3000000,
          ante: 400000
        }, {
          level: 36,
          bigBlinds: 4000000,
          ante: 500000
        }, {
          level: 37,
          bigBlinds: 6000000,
          ante: 700000
        }, {
          level: 38,
          bigBlinds: 8000000,
          ante: 1000000
        }, {
          level: 39,
          bigBlinds: 10000000,
          ante: 1500000
        }, {
          level: 40,
          bigBlinds: 12000000,
          ante: 1750000
        }, {
          level: 41,
          bigBlinds: 16000000,
          ante: 2000000
        }, {
          level: 42,
          bigBlinds: 20000000,
          ante: 3000000
        }, {
          level: 43,
          bigBlinds: 30000000,
          ante: 4000000
        }, {
          level: 44,
          bigBlinds: 40000000,
          ante: 5000000
        }, {
          level: 45,
          bigBlinds: 60000000,
          ante: 7000000
        }, {
          level: 46,
          bigBlinds: 80000000,
          ante: 10000000
        }, {
          level: 47,
          bigBlinds: 100000000,
          ante: 15000000
        }, {
          level: 48,
          bigBlinds: 120000000,
          ante: 17500000
        }, {
          level: 49,
          bigBlinds: 160000000,
          ante: 20000000
        }, {
          level: 50,
          bigBlinds: 200000000,
          ante: 30000000
        }, {
          level: 51,
          bigBlinds: 300000000,
          ante: 40000000
        }, {
          level: 52,
          bigBlinds: 400000000,
          ante: 50000000
        }, {
          level: 53,
          bigBlinds: 600000000,
          ante: 70000000
        }, {
          level: 54,
          bigBlinds: 800000000,
          ante: 100000000
        }, {
          level: 55,
          bigBlinds: 1000000000,
          ante: 150000000
        }, {
          level: 56,
          bigBlinds: 1200000000,
          ante: 175000000
        }, {
          level: 57,
          bigBlinds: 1600000000,
          ante: 200000000
        }, {
          level: 58,
          bigBlinds: 2000000000,
          ante: 300000000
        }, {
          level: 59,
          bigBlinds: 3000000000,
          ante: 400000000
        }, {
          level: 60,
          bigBlinds: 4000000000,
          ante: 500000000
        }]];
      })(BlindLevelInfo || (BlindLevelInfo = exports('BlindLevelInfo', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CalendarDayItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_CalendarDayItem.ts', './CalendarPage.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_CalendarDayItem, ECalendarSelectType, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_CalendarDayItem = module.default;
    }, function (module) {
      ECalendarSelectType = module.ECalendarSelectType;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "3d7a0iuLZdMqq5QI6VOdIBn", "CalendarDayItem", undefined);
      var CalendarDayItem = exports('CalendarDayItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_CalendarDayItem) {
        _inheritsLoose(CalendarDayItem, _UI_CalendarDayItem);
        function CalendarDayItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_CalendarDayItem.call.apply(_UI_CalendarDayItem, [this].concat(args)) || this;
          _this.isToday = void 0;
          _this.day = void 0;
          _this.itemDate = void 0;
          _this.timeStamp = void 0;
          _this.calendarMonthItem = void 0;
          return _this;
        }
        var _proto = CalendarDayItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_CalendarDayItem.prototype.onConstruct.call(this);
          this.name = 'CalendarDayItem';
        };
        _proto.setDayItem = function setDayItem(calendarMonthItem, date) {
          this.calendarMonthItem = calendarMonthItem;
          this.day = date;
          if (!this.itemDate) {
            this.itemDate = new Date();
          }
          this.itemDate.setFullYear(calendarMonthItem.year);
          this.itemDate.setMonth(calendarMonthItem.month, date);
          this.timeStamp = this.itemDate.getTime();
          this.isToday = this.calendarMonthItem.calendarPage.today.getFullYear() == this.itemDate.getFullYear() && this.calendarMonthItem.calendarPage.today.getMonth() == this.itemDate.getMonth() && this.calendarMonthItem.calendarPage.today.getDate() == this.itemDate.getDate();
          this.updateItemState();
          this.title = date.toString();
        };
        _proto.updateItemState = function updateItemState() {
          // Log.debug.log('CalendarDayItem', 'updateItemState');
          var enable = this.timeStamp >= this.calendarMonthItem.calendarPage.inputParams.minTime && this.timeStamp <= this.calendarMonthItem.calendarPage.inputParams.maxTime;
          if (enable) {
            this.touchable = true;
            if (this.calendarMonthItem.calendarPage.inputParams.selectType == ECalendarSelectType.DateRange) {
              var selectMin = this.calendarMonthItem.calendarPage.selectedRange.min;
              var selectMax = this.calendarMonthItem.calendarPage.selectedRange.max;
              if (selectMin && selectMax) {
                var minTimestamp = selectMin.getTime();
                var maxTimeStamp = selectMax.getTime();
                this.m_itemStatu.selectedPage = this.timeStamp >= minTimestamp && this.timeStamp <= maxTimeStamp ? 'selected' : this.isToday ? 'today' : 'unselect';
              } else if (selectMin) {
                this.m_itemStatu.selectedPage = selectMin.getTime() == this.timeStamp ? 'selected' : this.isToday ? 'today' : 'unselect';
              } else {
                this.m_itemStatu.selectedPage = this.isToday ? 'today' : 'unselect';
              }
            } else {
              if (this.calendarMonthItem.calendarPage.selectedDate) {
                this.m_itemStatu.selectedPage = this.calendarMonthItem.calendarPage.selectedDate.getTime() == this.timeStamp ? 'selected' : this.isToday ? 'today' : 'unselect';
              } else {
                this.m_itemStatu.selectedPage = this.isToday ? 'today' : 'unselect';
              }
            }
          } else {
            this.m_itemStatu.selectedPage = 'disable';
            this.touchable = false;
          }
        };
        return CalendarDayItem;
      }(UI_CalendarDayItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CalendarMonthItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_CalendarMonthItem.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_CalendarMonthItem, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_CalendarMonthItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "493e3Ikz+JMUINqWvXrB169", "CalendarMonthItem", undefined);
      var CalendarMonthItem = exports('CalendarMonthItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_CalendarMonthItem) {
        _inheritsLoose(CalendarMonthItem, _UI_CalendarMonthItem);
        function CalendarMonthItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_CalendarMonthItem.call.apply(_UI_CalendarMonthItem, [this].concat(args)) || this;
          _this.year = void 0;
          _this.month = void 0;
          _this.calendarPage = void 0;
          _this.itemArr = [];
          return _this;
        }
        var _proto = CalendarMonthItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_CalendarMonthItem.prototype.onConstruct.call(this);
          this.name = 'CalendarMonthItem';
          for (var i = 0; i < 35; i++) {
            var item = this["m_item" + i];
            this.itemArr.push(item);
            item.onClick(this.onDayItemClick.bind(this, item), this);
          }
        };
        _proto.setMonthItem = function setMonthItem(calendarPage, year, month) {
          // Log.debug.log('CalendarMonthItem', 'setMonthItem', year, month);
          this.calendarPage = calendarPage;
          this.year = year;
          this.month = month;
          var firstDayIndex = new Date(year, month, 1).getDay();
          var lastDayIndex = new Date(year, month % 12 + 1, 0).getDay();
          var firstIndex = firstDayIndex;
          var lastIndex = 35 - 1 - (6 - lastDayIndex);
          // Log.debug.log('CalendarMonthItem', 'setMonthItem', 'firstDayIndex:', firstDayIndex, 'lastDayIndex:', lastDayIndex, 'firstIndex:', firstIndex, 'lastIndex:', lastIndex);
          for (var i = 0; i < 35; i++) {
            var item = this.itemArr[i];
            var visible = i >= firstIndex && i <= lastIndex;
            item.visible = visible;
            if (visible) {
              item.setDayItem(this, i - firstIndex + 1);
            }
          }
        };
        _proto.onDayItemClick = function onDayItemClick(item) {
          // Log.debug.log('CalendarMonthItem', 'onDayItemClick', item.day);
          this.calendarPage.onDayItemClick(item);
        };
        _proto.updateItemState = function updateItemState() {
          for (var i = 0; i < 35; i++) {
            var item = this.itemArr[i];
            if (item.visible) {
              item.updateItemState();
            }
          }
        };
        return CalendarMonthItem;
      }(UI_CalendarMonthItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CalendarPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_CalendarPage.ts', './GameWindowBase.ts', './CocosDevKit.ts', './GameConst.ts', './Logger.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Event, UI_CalendarPage, GameWindowBase, EEnterType, GameConst, Log, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      UI_CalendarPage = module.default;
    }, function (module) {
      GameWindowBase = module.GameWindowBase;
      EEnterType = module.EEnterType;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5e7b04gtdRNUKtotPu6FOg2", "CalendarPage", undefined);

      /**
       * 日期选择类型
       */
      var ECalendarSelectType = exports('ECalendarSelectType', /*#__PURE__*/function (ECalendarSelectType) {
        ECalendarSelectType[ECalendarSelectType["Date"] = 0] = "Date";
        ECalendarSelectType[ECalendarSelectType["DateRange"] = 1] = "DateRange";
        return ECalendarSelectType;
      }({}));

      /**
       * 日期选择器初始化参数
       */
      var CalendarInputParams = exports('CalendarInputParams', function CalendarInputParams(
      /**
       * 显示的最小的时间
       */
      minTime,
      /**
       * 显示的最大的时间
       */
      maxTime,
      /**
       * 选择模式
       */
      selectType,
      /**
       * DateRange 选择模式下最小的选择天数
       */
      minCount,
      /**
       * DateRange 选择模式下最大的选择天数
       */
      maxCount,
      /**
       * 页面标题
       */
      title) {
        if (selectType === void 0) {
          selectType = ECalendarSelectType.DateRange;
        }
        if (minCount === void 0) {
          minCount = 1;
        }
        if (maxCount === void 0) {
          maxCount = Number.MAX_VALUE;
        }
        if (title === void 0) {
          title = 'Calendar';
        }
        this.minTime = minTime;
        this.maxTime = maxTime;
        this.selectType = selectType;
        this.minCount = minCount;
        this.maxCount = maxCount;
        this.title = title;
      });

      /**
       * 日期选择器回调
       */

      /**
       * 日历日期选择器
       * @example
       * // import { CalendarInputParams, CalendarPage, ECalendarSelectType } from "../ * Public/Calendar/CalendarPage";
       * let t = new Date();
       * let n = new Date(t.getTime() - (60 * 60 * 24) * 60 * 1000);
       * let f = new Date(t.getTime() + (60 * 60 * 24) * 60 * 1000);
       * let params = new CalendarInputParams();
       * params.minTime = n.getTime();
       * params.maxTime = f.getTime();
       * params.selectType = ECalendarSelectType.DateRange;
       * params.maxCount = 7;
       * let page = CalendarPage.create(this);
       * page.setInputParams(params);
       * page.addHook({
       *     onConfirm: (result) => {
       *         // on CalendarPage confirm button click
       *     }
       * });
       * page.showOn(this.grootInst);
       */
      var CalendarPage = exports('CalendarPage', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(CalendarPage, _GameWindowBase);
        function CalendarPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = [];
          _this.paneClass = UI_CalendarPage;
          _this.coverUnderlyingWindow = false;
          _this.showBlackMask = true;
          _this.clickOutsideHide = false;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.pageName = 'CalendarPage';
          _this.hookList = [];
          _this.inputParams = void 0;
          _this.today = void 0;
          _this.todayPageIndex = void 0;
          _this.curPageIndex = void 0;
          _this.monthListData = void 0;
          _this.selectedRange = {
            min: undefined,
            max: undefined
          };
          _this.selectedDate = void 0;
          return _this;
        }
        CalendarPage.create = function create(from) {
          return new CalendarPage(from);
        };
        var _proto = CalendarPage.prototype;
        _proto.addHook = function addHook(hook) {
          _GameWindowBase.prototype.addHook.call(this, hook);
        };
        _proto.setInputParams = function setInputParams(params) {
          _GameWindowBase.prototype.setInputParams.call(this, params);
          this.today = new Date();
          var minDate = new Date(this.inputParams.minTime);
          var minYear = minDate.getFullYear();
          var minMonth = minDate.getMonth();
          var maxDate = new Date(this.inputParams.maxTime);
          var maxYear = maxDate.getFullYear();
          var maxMonth = maxDate.getMonth();
          this.monthListData = [];
          for (var year = minYear; year <= maxYear; year++) {
            var monthL = year == minYear ? minMonth : 0;
            var monthR = year == maxYear ? maxMonth : 11;
            for (var month = monthL; month <= monthR; month++) {
              this.monthListData.push({
                year: year,
                month: month
              });
              if (this.today.getFullYear() == year && this.today.getMonth() == month) {
                this.todayPageIndex = this.monthListData.length - 1;
              }
            }
          }
        };
        _proto.onInit = function onInit() {
          // Log.debug.log('CalendarPage', 'onInit', 'this.monthListData.length = ', this.monthListData.length);
          this.pane.m_frame.title = this.inputParams.title;
          this.pane.m_monthList.setVirtual();
          this.pane.m_monthList.itemRenderer = this.monthItemRender.bind(this);
          this.pane.m_monthList.numItems = this.monthListData.length;
          if (this.todayPageIndex) {
            this.pane.m_monthList.scrollToView(this.todayPageIndex, false);
            this.curPageIndex = this.todayPageIndex;
          } else {
            this.curPageIndex = 0;
          }
          this.updateMonthYear();
          this.pane.m_monthList.on(Event.SCROLL_END, this.onMonthListScrollEnd, this);
          this.pane.m_frame.m_btnCancel.onClick(this.closeEventHandler, this);
          this.pane.m_frame.m_btnConfirm.onClick(this.onConfirmClick, this);
          this.pane.m_frame.m_btnConfirm.enabled = false;
          this.pane.m_textDateRange.text = '-';
        };
        _proto.monthItemRender = function monthItemRender(index, item) {
          var obj = this.monthListData[index];
          item.setMonthItem(this, obj.year, obj.month);
        };
        _proto.onDayItemClick = function onDayItemClick(item) {
          Log.debug.log('CalendarPage', 'onDayItemClick', item.day);
          var itemDate = new Date(item.itemDate);
          if (this.inputParams.selectType == ECalendarSelectType.Date) {
            if (this.selectedDate) {
              if (this.selectedDate.getTime() == item.itemDate.getTime()) {
                this.selectedDate = undefined;
                this.pane.m_textDateRange.text = '-';
                this.pane.m_frame.m_btnConfirm.enabled = false;
              } else {
                this.selectedDate = itemDate;
                this.pane.m_textDateRange.text = Utils.formatDate(this.selectedDate);
                this.pane.m_frame.m_btnConfirm.enabled = true;
              }
            } else {
              this.selectedDate = itemDate;
              this.pane.m_textDateRange.text = Utils.formatDate(this.selectedDate);
              this.pane.m_frame.m_btnConfirm.enabled = true;
            }
          } else {
            if (!this.selectedRange.min && !this.selectedRange.max) {
              this.selectedRange.min = itemDate;
            } else if (this.selectedRange.min && !this.selectedRange.max) {
              var min = this.selectedRange.min;
              var max = itemDate;
              if (min.getTime() > max.getTime()) {
                min = itemDate;
                max = this.selectedRange.min;
              }
              var dayDiff = Math.ceil((max.getTime() - min.getTime()) / (GameConst.SECONDS_OF_DAY * 1000));
              if (dayDiff > this.inputParams.maxCount) {
                // 提示选的天数太多了
                this.grootInst.showCenterTip('TXT_452', this.inputParams.maxCount);
                return;
              } else if (dayDiff < this.inputParams.minCount) {
                // 提示选的天数太少了
                return;
              } else {
                this.selectedRange.min = min;
                this.selectedRange.max = max;
              }
            } else if (this.selectedRange.max && !this.selectedRange.min) {
              var _min = itemDate;
              var _max = this.selectedRange.min;
              if (_min.getTime() > _max.getTime()) {
                _min = this.selectedRange.min;
                _max = itemDate;
              }
              var _dayDiff = Math.ceil((_max.getTime() - _min.getTime()) / (GameConst.SECONDS_OF_DAY * 1000));
              if (_dayDiff > this.inputParams.maxCount) {
                // 提示选的天数太多了
                this.grootInst.showCenterTip('TXT_452', this.inputParams.maxCount);
                return;
              } else if (_dayDiff < this.inputParams.minCount) {
                // 提示选的天数太少了
                return;
              } else {
                this.selectedRange.min = _min;
                this.selectedRange.max = _max;
              }
            } else {
              this.selectedRange.min = itemDate;
              this.selectedRange.max = undefined;
            }
            var str = '';
            if (this.selectedRange.min) {
              str = str + Utils.formatDate(this.selectedRange.min);
              if (this.selectedRange.max) {
                str = str + ' - ' + Utils.formatDate(this.selectedRange.max);
                this.pane.m_frame.m_btnConfirm.enabled = true;
              } else {
                this.pane.m_frame.m_btnConfirm.enabled = false;
              }
            } else {
              str = '-';
              this.pane.m_frame.m_btnConfirm.enabled = false;
            }
            this.pane.m_textDateRange.text = str;
          }
          for (var i = 0; i < this.pane.m_monthList._children.length; i++) {
            var _item = this.pane.m_monthList._children[i];
            _item.updateItemState();
          }
        };
        _proto.onMonthListScrollEnd = function onMonthListScrollEnd() {
          // Log.debug.log('CalendarPage', 'onMonthListScrollEnd', Math.max(this.pane.m_monthList.scrollPane.currentPageX, 0));
          this.curPageIndex = this.pane.m_monthList.scrollPane.currentPageX;
          this.updateMonthYear();
        };
        _proto.updateMonthYear = function updateMonthYear() {
          var index = Math.min(Math.max(this.curPageIndex, 0), this.monthListData.length - 1);
          var obj = this.monthListData[index];
          this.pane.m_textYearMonth.text = obj.month + 1 + " / " + obj.year;
        };
        _proto.onConfirmClick = function onConfirmClick() {
          var _this2 = this;
          if (this.inputParams.selectType == ECalendarSelectType.Date) {
            if (this.selectedDate) {
              this.hookList.forEach(function (hook) {
                hook.onConfirm && hook.onConfirm(_this2.selectedDate);
              });
              this.closeEventHandler();
            }
          } else {
            if (this.selectedRange && this.selectedRange.min && this.selectedRange.max) {
              this.hookList.forEach(function (hook) {
                hook.onConfirm && hook.onConfirm(_this2.selectedRange);
              });
              this.closeEventHandler();
            }
          }
        };
        return CalendarPage;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CardTypePowerDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_CardTypePowerDialog.ts', './LanguageManage.ts', './GameConst.ts', './CocosDevKit.ts', './GameDecorators.ts', './CDKDecorators.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, UI_CardTypePowerDialog, LanguageManager, GameConst, CustomFguiClass, SafeTimeInterval;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_CardTypePowerDialog = module.default;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "f1d02n777tODbLJ/c14KibU", "CardTypePowerDialog", undefined);
      var CardTypePowerDialog = exports('CardTypePowerDialog', (_dec = SafeTimeInterval(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_CardTypePowerDial) {
        _inheritsLoose(CardTypePowerDialog, _UI_CardTypePowerDial);
        function CardTypePowerDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_CardTypePowerDial.call.apply(_UI_CardTypePowerDial, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this._dataList = [];
          _this.m_type = 0;
          _this.m_gameType = 0;
          return _this;
        }
        var _proto = CardTypePowerDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_CardTypePowerDial.prototype.onConstruct.call(this);
          this.onClick(this.onSelfClick, this);
        };
        _proto.closeView = function closeView() {
          this.shareSpace.texasGamePage.popupLayer.m_cardTypePowerController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView() {
          this.shareSpace.texasGamePage.popupLayer.m_cardTypePowerController.selectedIndex = 1;
          this.refreshTypePower();
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.closeView();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'CardTypePowerDialog';
          this.m_gameType = this.shareSpace.texasGameData.gameType;
        };
        _proto.onSelfClick = function onSelfClick() {
          this.closeView();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onSelfClick();
          }
        };
        _proto.initCards = function initCards() {
          var titles = ['CCS_TXT_1', 'CCS_TXT_430', 'CCS_TXT_340', 'CCS_TXT_212', 'CCS_TXT_399', 'CCS_TXT_159', 'CCS_TXT_406', 'CCS_TXT_147', 'CCS_TXT_458', 'CCS_TXT_467'];
          var cards = [[[3, 13, 1], [4, 12, 1], [1, 11, 1], [4, 7, 1], [3, 6, 1]], [[4, 13, 1], [3, 13, 1], [3, 9, 0], [3, 8, 0], [4, 7, 0]], [[4, 7, 1], [3, 7, 1], [4, 6, 1], [3, 6, 1], [3, 8, 0]], [[3, 12, 1], [2, 12, 1], [1, 12, 1], [1, 11, 0], [1, 6, 0]], [[4, 13, 1], [4, 12, 1], [3, 11, 1], [1, 10, 1], [1, 9, 1]], [[4, 13, 1], [4, 12, 1], [4, 10, 1], [4, 9, 1], [4, 7, 1]], [[4, 12, 1], [2, 12, 1], [4, 8, 1], [3, 8, 1], [1, 8, 1]], [[4, 11, 1], [3, 11, 1], [2, 11, 1], [1, 11, 1], [3, 8, 0]], [[2, 10, 1], [2, 9, 1], [2, 8, 1], [2, 7, 1], [2, 6, 1]], [[1, 14, 1], [1, 13, 1], [1, 12, 1], [1, 11, 1], [1, 10, 1]]];
          this.m_list.itemProvider = this.getListItemResource.bind(this);
          this.m_list.setVirtual();
          this.m_list.itemRenderer = this.renderListItem.bind(this);
          this.m_list.enabled = false;
          var indexs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          if (this.m_gameType == GameConst.TexasPlay.EGameType.SixPlus) {
            // 6+
            indexs = [1, 2, 3, 4, 5, 7, 6, 8, 9, 10];
          }
          for (var i = 9; i >= 0; i--) {
            var index = indexs[i] - 1;
            var selected = index == this.m_type - 1;
            var title = LanguageManager.get(titles[index]);
            var card = {
              selected: selected,
              title: title,
              cards: cards[index]
            };
            this._dataList.push(card);
          }
          this.m_list.numItems = this._dataList.length;
        };
        _proto.getListItemResource = function getListItemResource(index) {
          return 'ui://GamePlay/CardTypePowerItem';
        };
        _proto.renderListItem = function renderListItem(index, item) {
          var msg = this._dataList[index];
          // Log.debug.log('renderCardTypePowerDialog');
          item.setData(msg.cards, msg.selected, msg.title);
        };
        _proto.refreshTypePower = function refreshTypePower() {
          var cardTypeParsed = this.shareSpace.texasGameData.texasClientState.curPlayerCardTypeParsed;
          var type = 0;
          if (cardTypeParsed) {
            type = cardTypeParsed.cardType;
          }
          if (this._dataList.length == 0) {
            this.initCards();
          }
          for (var i = 0; i < this._dataList.length; i++) {
            var info = this._dataList[i];
            var selected = i == 10 - type;
            info.selected = selected;
          }
          this.m_list.refreshVirtualList();
        };
        _createClass(CardTypePowerDialog, [{
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_cardTypePowerController.selectedIndex == 1;
          }
        }]);
        return CardTypePowerDialog;
      }(UI_CardTypePowerDialog), _applyDecoratedDescriptor(_class2.prototype, "onSelfClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onSelfClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CardTypePowerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_CardTypePowerItem.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, UI_CardTypePowerItem, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      UI_CardTypePowerItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "2db8ecomNNCtr13q1XL++cQ", "CardTypePowerItem", undefined);
      var ColorFFB406 = color(0xff, 0xb4, 0x06);
      var Color959595 = color(0x95, 0x95, 0x95);
      var CardTypePowerItem = exports('CardTypePowerItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_CardTypePowerItem) {
        _inheritsLoose(CardTypePowerItem, _UI_CardTypePowerItem);
        function CardTypePowerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_CardTypePowerItem.call.apply(_UI_CardTypePowerItem, [this].concat(args)) || this;
          _this._curPlayerHandPoker = [];
          return _this;
        }
        var _proto = CardTypePowerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_CardTypePowerItem.prototype.onConstruct.call(this);
          this.name = 'CardTypePowerItem';
          this._curPlayerHandPoker.push(this.m_card1);
          this._curPlayerHandPoker.push(this.m_card2);
          this._curPlayerHandPoker.push(this.m_card3);
          this._curPlayerHandPoker.push(this.m_card4);
          this._curPlayerHandPoker.push(this.m_card5);
        };
        _proto.setData = function setData(carCodes, selected, title) {
          this.m_layerSelected.visible = selected;
          this.m_lbType.text = title;
          this.m_lbType.color = selected ? ColorFFB406 : Color959595;
          for (var i = 0; i < 5; i++) {
            var pokerLoader = this._curPlayerHandPoker[i];
            pokerLoader.visible = true;
            if (pokerLoader.visible) {
              var poker = carCodes[i];
              var sign = poker[0];
              var code = poker[1];
              var gray = poker[2];
              var pokerCode = 16 * sign + code;
              var dark = gray == 0;
              var pokerCmpt = pokerLoader.component;
              pokerCmpt.gray = dark;
              pokerCmpt.front = true;
              pokerCmpt.hightLight = false;
              pokerCmpt.showEye = false;
              pokerCmpt.code = pokerCode;
            }
          }
        };
        return CardTypePowerItem;
      }(UI_CardTypePowerItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CDKDecorators.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Logger.ts', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, _wrapNativeSuper, cclegacy, Node, Component, assert, Log, GObject;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _wrapNativeSuper = module.wrapNativeSuper;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Component = module.Component;
      assert = module.assert;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      GObject = module.GObject;
    }],
    execute: function () {
      exports({
        AutoCheckNode: AutoCheckNode,
        AutoCheckNodeAsync: AutoCheckNodeAsync,
        SafeAsyncProcess: SafeAsyncProcess,
        SafeHandler: SafeHandler,
        SafePromiseExecutor: SafePromiseExecutor,
        SafeTimeInterval: SafeTimeInterval
      });
      cclegacy._RF.push({}, "faa1c7oGPJKEp6o84HP5vwn", "CDKDecorators", undefined);

      // 如果不想因为一下原因报出 unhandledRejection 错误，需要在 then 的 onrejected 回调中显式的忽略这些原因
      var ECDKRejectReason = exports('ECDKRejectReason', /*#__PURE__*/function (ECDKRejectReason) {
        ECDKRejectReason["LastProcessPending"] = "LastProcessPending";
        ECDKRejectReason["NodeInvalid1"] = "NodeInvalid1";
        ECDKRejectReason["NodeInvalid2"] = "NodeInvalid2";
        ECDKRejectReason["NodeDestroy"] = "NodeDestroy";
        ECDKRejectReason["ComponentRemove"] = "NodeDestroy";
        return ECDKRejectReason;
      }({}));
      var CDKSafeError = exports('CDKSafeError', /*#__PURE__*/function (_Error) {
        _inheritsLoose(CDKSafeError, _Error);
        CDKSafeError.create = function create(reason) {
          return new CDKSafeError(reason, "\u8FD9\u662F\u4E00\u4E2A\u53D7\u63A7\u7684\u9519\u8BEF: " + reason);
        };
        function CDKSafeError(reason, message) {
          var _this;
          _this = _Error.call(this, message) || this;
          _this.rejectReason = void 0;
          _this.name = 'CDKSafeError';
          _this.rejectReason = reason;
          return _this;
        }
        return CDKSafeError;
      }( /*#__PURE__*/_wrapNativeSuper(Error)));

      /**
       * @description 非装饰器，用于创建安全的 Promise 执行器，target 节点或组件生命周期结束时会返回，避免 Promise 实例一直处于 pending 状态
       * @description 缺陷是 any 类型的使用导致了原本的 Promise 中的执行器参数类型推断失效，没有代码提示了
       * @param target
       * @param executor
       * @returns
       */
      function SafePromiseExecutor(target, executor) {
        return function (resolve, reject) {
          var targetType;
          var targetNode;
          var finish = false;
          var newResolve = function newResolve(value) {
            if (finish) return;
            unregist();
            finish = true;
            resolve(value);
          };
          var newReject = function newReject(reason) {
            if (finish) return;
            unregist();
            finish = true;
            reject(reason);
          };
          var callback = function callback(comOrNode) {
            if (Node.isNode(comOrNode)) {
              Log.debug.warn('SafePromiseExecutor, 节点被销毁', comOrNode.name);
              // reject(CDKSafeError.create(ECDKRejectReason.NodeDestroy));
              newResolve(undefined);
              return;
            }
            if (comOrNode !== target) return;
            Log.debug.warn('SafePromiseExecutor, 组件被移除', comOrNode.name);
            // reject(CDKSafeError.create(ECDKRejectReason.ComponentRemove));
            newResolve(undefined);
          };
          if (Node.isNode(target)) {
            targetType = 1;
            targetNode = target;
          } else if (target instanceof Component) {
            targetType = 2;
            targetNode = target.node;
          } else {
            targetType = 3;
            targetNode = target.node;
          }
          var unregist = function unregist() {
            if (targetType == 1) {
              targetNode.off(Node.EventType.NODE_DESTROYED, callback);
            } else if (targetType == 2) {
              targetNode.off(Node.EventType.COMPONENT_REMOVED, callback);
              targetNode.off(Node.EventType.NODE_DESTROYED, callback);
            } else {
              targetNode.off(Node.EventType.NODE_DESTROYED, callback);
            }
          };
          if (targetType == 1) {
            targetNode.on(Node.EventType.NODE_DESTROYED, callback);
          } else if (targetType == 2) {
            targetNode.on(Node.EventType.COMPONENT_REMOVED, callback);
            targetNode.on(Node.EventType.NODE_DESTROYED, callback);
          } else {
            targetNode.on(Node.EventType.NODE_DESTROYED, callback);
          }
          executor(newResolve, newReject);
        };
      }

      /**
       * @description 传入的异步过程结束前再次调用会直接返回
       * @description 如果 returnLastResult 为 true，结束前再次调用会直接返回上次返回的结果
       * @description 仅用于装饰返回 promise 对象的异步函数
       * @param returnLastResult 结束之前调用是否返回上次返回的结果
       */
      function SafeAsyncProcess(returnLastResult) {
        if (returnLastResult === void 0) {
          returnLastResult = false;
        }
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", SafeAsyncProcess \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var stateKey = propertyKey + '__SafeAsyncProcess__state';
          var lastKey = propertyKey + '__SafeTimeInterval__lastreturn';
          var origin = descriptor.value;
          descriptor.value = function () {
            var _this2 = this;
            if (this[stateKey]) {
              if (returnLastResult) {
                Log.debug.warn(className, propertyKey, 'SafeAsyncProcess, 上次过程还未结束，返回 上次返回的结果', this[lastKey]);
                return Promise.resolve(this[lastKey]);
              } else {
                Log.debug.warn(className, propertyKey, 'SafeAsyncProcess, 上次过程还未结束', ECDKRejectReason.LastProcessPending);
                // return Promise.reject(CDKSafeError.create(ECDKRejectReason.LastProcessPending));
                return Promise.resolve(undefined);
              }
            }
            this[stateKey] = true;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            var result = origin.apply(this, args);
            if (result instanceof Promise) {
              return result.then(function (v) {
                _this2[stateKey] = undefined;
                _this2[lastKey] = v;
                return v;
              }, function (reason) {
                _this2[stateKey] = undefined;
                return Promise.reject(reason);
              });
            } else {
              Log.debug.warn(className, propertyKey, 'SafeAsyncProcess 仅用于装饰返回 promise 对象的异步函数');
              this[stateKey] = undefined;
              return result;
            }
          };
        };
      }

      /**
       * @description 传入的过程在指定的时间间隔结束之前再次调用不会执行
       * @description 不要用来装饰异步函数，可能会使原有的异步流程复杂化，导致难以预测执行流程和定位错误
       * @param time
       * @param returnLastResult 时间间隔结束之前调用是否返回上次返回的结果
       */
      function SafeTimeInterval(time, returnLastResult) {
        if (time === void 0) {
          time = 250;
        }
        if (returnLastResult === void 0) {
          returnLastResult = false;
        }
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", SafeTimeInterval \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var stateKey = propertyKey + '__SafeTimeInterval__state';
          var lastKey = propertyKey + '__SafeTimeInterval__lastreturn';
          var origin = descriptor.value;
          descriptor.value = function () {
            var _this3 = this;
            if (this[stateKey]) {
              if (returnLastResult) {
                Log.debug.warn(className, propertyKey, 'SafeTimeInterval, 上次过程还未结束，返回上次结果', this[lastKey]);
                return this[lastKey];
              } else {
                Log.debug.warn(className, propertyKey, 'SafeTimeInterval, 上次过程还未结束');
                return;
              }
            }
            this[stateKey] = true;
            setTimeout(function () {
              _this3[stateKey] = undefined;
            }, time);
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            var result = origin.apply(this, args);
            if (result instanceof Promise) {
              Log.debug.warn(className, propertyKey, 'SafeTimeInterval, 不要用来装饰异步函数');
            }
            this[lastKey] = result;
            return result;
          };
        };
      }

      /**
       * @description 自动检查节点的有效性，如果节点无效函数将不会执行
       * @description 仅在执行前检查节点有效性，异步函数如果用这个装饰器将不会在 resolve 后检查节点的有效性，如果需要请使用 AutoCheckNodeAsync 装饰器
       * @description 只能在 GObject, Node, Component 类或子类中使用
       * @description 推荐使用 SafePromiseExecutor 创建 Promise 执行器，这样节点在被销毁后就会立即改变 promise 的状态
       */
      function AutoCheckNode() {
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", AutoCheckNode \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var original = descriptor.value;
          descriptor.value = function () {
            assert(Node.isNode(this) || this instanceof Component || this instanceof GObject, className + " " + propertyKey + ", AutoCheckNode \u53EA\u80FD\u5728 GObject, Node, Component \u7C7B\u6216\u5B50\u7C7B\u4E2D\u4F7F\u7528");
            var valid = false;
            if (Node.isNode(this)) {
              valid = this.isValid;
            } else if (this.node && Node.isNode(this.node)) {
              valid = this.node.isValid;
            }
            if (valid) {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              return original.apply(this, args);
            } else {
              Log.debug.warn(className, propertyKey, 'AutoCheckNode, 节点无效，不会之际执行');
            }
          };
        };
      }

      /**
       * @description 自动检查节点异步函数的有效性
       * @description 执行时如果节点无效将直接返回 reject
       * @description 如果在 resolve 后节点无效了，将会返回 reject
       * @description 只能在 GObject, Node, Component 类或子类中使用
       */
      function AutoCheckNodeAsync() {
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", AutoCheckNodeAsync \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var functionTag = "[" + className + ":" + propertyKey + "]";
          var original = descriptor.value;
          descriptor.value = function () {
            var _this4 = this;
            assert(Node.isNode(this) || this instanceof Component || this instanceof GObject, className + " " + propertyKey + ", AutoCheckNodeAsync \u53EA\u80FD\u5728 GObject, Node, Component \u7C7B\u6216\u5B50\u7C7B\u4E2D\u4F7F\u7528");
            var valid = false;
            if (Node.isNode(this)) {
              valid = this.isValid;
            } else if (this.node && Node.isNode(this.node)) {
              valid = this.node.isValid;
            }
            if (valid) {
              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
              }
              var result = original.apply(this, args);
              if (result instanceof Promise) {
                return result.then(function (v) {
                  valid = false;
                  if (Node.isNode(_this4)) {
                    valid = _this4.isValid;
                  } else if (_this4.node && Node.isNode(_this4.node)) {
                    valid = _this4.node.isValid;
                  }
                  if (valid) {
                    return v;
                  } else {
                    Log.debug.warn(className, propertyKey, 'AutoCheckNodeAsync, 节点无效，返回 reject', ECDKRejectReason.NodeInvalid2);
                    return Promise.reject(CDKSafeError.create(ECDKRejectReason.NodeInvalid2));
                  }
                });
              } else {
                throw new Error("AutoCheckNodeAsync \u4EC5\u7528\u4E8E\u88C5\u9970\u8FD4\u56DE promise \u5BF9\u8C61\u7684\u5F02\u6B65\u51FD\u6570 " + functionTag);
              }
            } else {
              Log.debug.warn(className, propertyKey, 'AutoCheckNodeAsync, 节点无效，返回 reject', ECDKRejectReason.NodeInvalid1);
              return Promise.reject(CDKSafeError.create(ECDKRejectReason.NodeInvalid1));
            }
          };
        };
      }

      /**
       * 非装饰器，用于创建安全的回调函数
       * @description target 节点无效时将不会执行，且会将 callback 的 this 对象绑定为 target
       * @param callback
       * @param target
       * @returns
       */
      function SafeHandler(callback, target) {
        return function () {
          var valid = false;
          if (Node.isNode(target)) {
            valid = this.isValid;
          } else if (target.node && Node.isNode(target.node)) {
            valid = target.node.isValid;
          }
          if (valid) {
            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }
            callback.apply(target, args);
          }
        };
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChangeNickDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './gameproto.mjs_cjs=&original=.js', './UI_ChangeNickDialog.ts', './GameWindowBase.ts', './RoleData.ts', './LanguageManage.ts', './Utils.ts', './CDKDecorators.ts', './RoleProxy.ts', './GameDecorators.ts', './CocosDevKit.ts', './SelectDefaultAvatarDialog.ts', './gameproto.js', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, EditBox, sys, UIObjectFactory, UI_ChangeNickDialog, EEnterType, GameWindowBase, RoleData, LanguageManager, Utils, SafeTimeInterval, RoleProxy, MarkForNetEventListener, SelectDefaultAvatarDialog, _cjsExports, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      EditBox = module.EditBox;
      sys = module.sys;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }, null, function (module) {
      UI_ChangeNickDialog = module.default;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      RoleProxy = module.RoleProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, null, function (module) {
      SelectDefaultAvatarDialog = module.SelectDefaultAvatarDialog;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class;
      cclegacy._RF.push({}, "6708dSwx6pLqJD+30yMIaHQ", "ChangeNickDialog", undefined);
      var UI_ChangeNickDialogEx = /*#__PURE__*/function (_UI_ChangeNickDialog) {
        _inheritsLoose(UI_ChangeNickDialogEx, _UI_ChangeNickDialog);
        function UI_ChangeNickDialogEx() {
          return _UI_ChangeNickDialog.apply(this, arguments) || this;
        }
        var _proto = UI_ChangeNickDialogEx.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_ChangeNickDialog.prototype.onConstruct.call(this);
          if (sys.isBrowser && sys.os != sys.OS.IOS) {
            // @ts-ignore
            this.m_InputNick._editBox.useStyle = true;
          }
        };
        return UI_ChangeNickDialogEx;
      }(UI_ChangeNickDialog);
      var ChangeNickDialog = exports('ChangeNickDialog', (_dec = SafeTimeInterval(500), _dec2 = MarkForNetEventListener(_cjsExports.role.MsgChangeAvatarSwitchRsp.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.role.MsgSetRoleInfoRsp.ProtocolID), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(ChangeNickDialog, _GameWindowBase);
        function ChangeNickDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_ChangeNickDialog;
          _this.gestureCloseWindow = false;
          _this.coverUnderlyingWindow = false;
          _this.showBlackMask = true;
          _this.showEnterLoading = false;
          _this.clickOutsideHide = true;
          _this.enterType = EEnterType.vertical;
          _this.reportOpenPage = true;
          _this._avatar = null;
          _this._nick = null;
          return _this;
        }
        ChangeNickDialog.create = function create(from) {
          UIObjectFactory.setExtension(UI_ChangeNickDialogEx.URL, UI_ChangeNickDialogEx);
          return new ChangeNickDialog(from);
        };
        var _proto2 = ChangeNickDialog.prototype;
        _proto2.onInit = function onInit() {
          this.name = 'ChangeNickDialog';
          var avatar = this.pane.m_HeadNode.component;
          avatar.setContent(RoleData.inst.avatar);
          this._avatar = RoleData.inst.avatar;
          this.pane.m_InputNick.text = RoleData.inst.nick;
          this.pane.m_InputNick.on(EditBox.EventType.EDITING_DID_ENDED, this.onEditEndCallBack, this);
          var frame = this.pane.m_frame;
          frame.m_btnConfirm.onClick(this.onBtnConfirmClick, this);
          this.pane.m_HeadNode.onClick(this.onBtnHeadClick, this);
          if (RoleData.inst.isFirstChangeName()) {
            this.pane.m_TextModifyDesc.text = LanguageManager.get('TXT_515');
          } else {
            this.pane.m_TextModifyDesc.text = Utils.formatStr(LanguageManager.get('TXT_248'), RoleData.inst.changeNick);
          }

          //tg 没有钻石这里不需要
          this.pane.m_TextModifyDesc.visible = false;
        };
        _proto2.onBtnConfirmClick = function onBtnConfirmClick() {
          var newName = this.pane.m_InputNick.text;
          if (!newName || newName.length <= 0) {
            this.grootInst.showCenterTip(LanguageManager.get('TXT_76'));
            return;
          }
          if (newName.length < 4 || newName.length > 16) {
            this.grootInst.showCenterTip(LanguageManager.get('LAB_NICKNAME_TIP'));
            return;
          }
          if (newName != RoleData.inst.nick) {
            // tg 没有钻石这里不需要
            // if (!RoleData.inst.isFirstChangeName() && (RoleData.inst.diamonds < RoleData.inst.changeNick)) {
            //     this.grootInst.showCenterTip(LanguageManager.get('TXT_13'));
            //     this.hide();
            //     return;
            // }

            this.reqSyncInfo(newName, this._avatar);
            return;
          }
          if (this._avatar != RoleData.inst.avatar) {
            this.reqSyncInfo(null, this._avatar);
            return;
          }
          this.hide();
        };
        _proto2.onBtnHeadClick = function onBtnHeadClick() {
          RoleProxy.inst.getMsgChangeAvatarSwitch();
        };
        _proto2.onMsgChangeAvatarSwitchRsp = function onMsgChangeAvatarSwitchRsp(netdata) {
          var msg = netdata.getData(_cjsExports.role.MsgChangeAvatarSwitchRsp);
          Log.info.log('ChangeNickDialog', 'onMsgChangeAvatarSwitchRsp', msg);
          if (msg["switch"] == 1) {
            var view = SelectDefaultAvatarDialog.create(this);
            // view.addHook({
            //     onSelectAvatarComplete: this.onMsgSetRoleInfoRsp.bind(this)
            // });
            view.showOn(this.grootInst);
          } else {
            this.grootInst.showCenterTip('TXT_316');
          }
        };
        _proto2.onEditEndCallBack = function onEditEndCallBack() {
          this.pane.m_InputNick.text = this.pane.m_InputNick.text.trim();
          if (this.pane.m_InputNick.text.length < 4 || this.pane.m_InputNick.text.length > 16) {
            this.grootInst.showCenterTip(LanguageManager.get('LAB_NICKNAME_TIP'));
          }
        };
        _proto2.reqSyncInfo = function reqSyncInfo(name, headurl) {
          this._nick = name;
          this._avatar = headurl;
          RoleProxy.inst.onMsgSetRoleInfo(name, headurl);
        };
        _proto2.onMsgSetRoleInfoRsp = function onMsgSetRoleInfoRsp() {
          this.hide();
        };
        return ChangeNickDialog;
      }(GameWindowBase), (_applyDecoratedDescriptor(_class.prototype, "onBtnHeadClick", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onBtnHeadClick"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgChangeAvatarSwitchRsp", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgChangeAvatarSwitchRsp"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgSetRoleInfoRsp", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgSetRoleInfoRsp"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CircularProgress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_CircularProgress.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, math, FillOrigin, UI_CircularProgress, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      FillOrigin = module.FillOrigin;
    }, function (module) {
      UI_CircularProgress = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "1e5dexxoMxLnKlzH/LPA1HH", "CircularProgress", undefined);

      /**
       * 圆形进度条组件，最好方放到 GLoader 中使用
       */
      var CircularProgress = exports('CircularProgress', CustomFguiClass(_class = /*#__PURE__*/function (_UI_CircularProgress) {
        _inheritsLoose(CircularProgress, _UI_CircularProgress);
        function CircularProgress() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_CircularProgress.call.apply(_UI_CircularProgress, [this].concat(args)) || this;
          _this._progress = void 0;
          return _this;
        }
        var _proto = CircularProgress.prototype;
        /**
         * 跟新圆点位置
         */
        _proto.updatePointPosition = function updatePointPosition() {
          if (!this.m_point.visible) return;
          var centerGlobal = this.m_content.localToGlobal(0, 0);
          var center = this.globalToLocal(centerGlobal.x, centerGlobal.y);
          var radius = this.m_content.width / 2 - 3;
          var startPosition;
          switch (this.fillOrigin) {
            case FillOrigin.Top:
              startPosition = center.clone().subtract2f(0, radius);
              break;
            case FillOrigin.Bottom:
              startPosition = center.clone().add2f(0, radius);
              break;
            case FillOrigin.Left:
              startPosition = center.clone().subtract2f(radius, 0);
              break;
            case FillOrigin.Right:
              startPosition = center.clone().add2f(radius, 0);
              break;
          }
          var vec = startPosition.clone().subtract(center.clone());
          if (this.fillClockwise) {
            vec = vec.rotate(math.toRadian(360 * this._progress));
          } else {
            vec = vec.rotate(-math.toRadian(360 * this._progress));
          }
          var pos = vec.add(center.clone());
          this.m_point.x = pos.x;
          this.m_point.y = pos.y;
        };
        _createClass(CircularProgress, [{
          key: "fillOrigin",
          get:
          /**
           * 填充原点
           */
          function get() {
            return this.m_content.fillOrigin;
          },
          set: function set(value) {
            this.m_content.fillOrigin = value;
            this.updatePointPosition();
          }

          /**
           * 是否顺时针填充
           */
        }, {
          key: "fillClockwise",
          get: function get() {
            return this.m_content.fillClockwise;
          },
          set: function set(value) {
            this.m_content.fillClockwise = value;
            this.updatePointPosition();
          }

          /**
           * 是否显示圆点
           */
        }, {
          key: "pointVisible",
          get: function get() {
            return this.m_point.visible;
          },
          set: function set(v) {
            this.m_point.visible = v;
            this.updatePointPosition();
          }

          /**
           * 进度条颜色
           */
        }, {
          key: "contentColor",
          get: function get() {
            return this.m_content.color;
          },
          set: function set(v) {
            this.m_content.color = v;
          }
        }, {
          key: "progress",
          get:
          /**
           * 进度值
           */
          function get() {
            return this._progress;
          },
          set: function set(v) {
            this._progress = Math.max(Math.min(v, 1), 0);
            this.m_content.fillAmount = this._progress;
            this.updatePointPosition();
          }
        }]);
        return CircularProgress;
      }(UI_CircularProgress)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Clock.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts'], function (exports) {
  var _createClass, cclegacy, director, Node, Component, assert, EventTarget, Utils;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      Node = module.Node;
      Component = module.Component;
      assert = module.assert;
      EventTarget = module.EventTarget;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1943fRMnoRHSY0eead97zhQ", "Clock", undefined);
      var Clock = exports('Clock', /*#__PURE__*/function () {
        Clock.create = function create(target) {
          var timer = new Clock(target);
          return timer;
        };
        function Clock(target) {
          this._id = Utils.createUUID();
          this._startTimeStamp = null;
          this._allTime = null;
          this._passedTime = 0;
          this._over = false;
          this._eventTarget = null;
          this._target = void 0;
          if (Node.isNode(target)) {
            if (target.isValid) {
              this._target = target;
              this._eventTarget = new EventTarget();
              target.on(Node.EventType.NODE_DESTROYED, this.onTargetNodeDestroy, this);
              target.on(Node.EventType.PARENT_CHANGED, this.onTargetParentChaned, this);
            }
          } else if (target instanceof Component) {
            if (target.isValid) {
              this._target = target;
              this._eventTarget = new EventTarget();
              target.node.on(Node.EventType.COMPONENT_REMOVED, this.onTargetComponentRemoved, this);
              target.node.on(Node.EventType.NODE_DESTROYED, this.onTargetNodeDestroy, this);
              target.node.on(Node.EventType.PARENT_CHANGED, this.onTargetParentChaned, this);
            }
          } else {
            if (target.node && target.node.isValid) {
              this._target = target;
              this._eventTarget = new EventTarget();
              target.node.on(Node.EventType.NODE_DESTROYED, this.onTargetNodeDestroy, this);
              target.node.on(Node.EventType.PARENT_CHANGED, this.onTargetParentChaned, this);
            }
          }
        }
        var _proto = Clock.prototype;
        _proto.reset = function reset() {
          director.getScheduler().unscheduleAllForTarget(this);
          this._over = false;
          this._allTime = undefined;
          this._passedTime = 0;
        };
        _proto.update = function update() {
          if (Node.isNode(this._target)) {
            if (!this._target.isValid) {
              if (this._eventTarget) {
                this._eventTarget.removeAll(Clock.ClockUpdateEvent);
              }
              this.reset();
              return;
            }
          } else if (this._target instanceof Component) {
            if (!this._target.isValid) {
              if (this._eventTarget) {
                this._eventTarget.removeAll(Clock.ClockUpdateEvent);
              }
              this.reset();
              return;
            }
          } else {
            if (!(this._target.node && this._target.node.isValid)) {
              if (this._eventTarget) {
                this._eventTarget.removeAll(Clock.ClockUpdateEvent);
              }
              this.reset();
              return;
            }
          }
          if (this._allTime == undefined) return;
          this._passedTime = (Utils.curLocalTimestamp - this._startTimeStamp) / 1000;
          this._passedTime = Math.min(this._passedTime, this._allTime);
          this._over = this._passedTime == this._allTime;
          this._eventTarget.emit(Clock.ClockUpdateEvent, this);
          if (this._over) {
            director.getScheduler().unscheduleAllForTarget(this);
          }
        };
        _proto.on = function on(callBack, target) {
          this._eventTarget.on(Clock.ClockUpdateEvent, callBack, target);
        };
        _proto.once = function once(callBack, target) {
          this._eventTarget.once(Clock.ClockUpdateEvent, callBack, target);
        };
        _proto.off = function off(callBack, target) {
          this._eventTarget.off(Clock.ClockUpdateEvent, callBack, target);
        };
        _proto.targetOff = function targetOff(target) {
          this._eventTarget.targetOff(target);
        };
        _proto.stop = function stop() {
          director.getScheduler().unscheduleAllForTarget(this);
          this._over = false;
          this._passedTime = 0;
          this._allTime = undefined;
        };
        _proto.pause = function pause() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (!scheduler.isTargetPaused(this)) {
              scheduler.pauseTarget(this);
            }
          }
        };
        _proto.resume = function resume() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (scheduler.isTargetPaused(this)) {
              scheduler.resumeTarget(this);
            }
          }
        }

        /**
         * @param allTime 倒计时总时间，单位秒
         * @param passedTime 已经过去的时间，单位秒
         */;
        _proto.run = function run(allTime, passedTime) {
          if (passedTime === void 0) {
            passedTime = 0;
          }
          assert(allTime >= 0, 'Clock run 参数错误');
          if (!this._eventTarget) return;
          this.reset();
          this._allTime = allTime;
          this._startTimeStamp = Utils.curLocalTimestamp - passedTime * 1000;
          var scheduler = director.getScheduler();
          scheduler.scheduleUpdate(this, 0, false);
        };
        _proto.onTargetNodeDestroy = function onTargetNodeDestroy(node) {
          this._eventTarget.removeAll(Clock.ClockUpdateEvent);
          this.reset();
        };
        _proto.onTargetComponentRemoved = function onTargetComponentRemoved(component) {
          if (component == this._target) {
            this._eventTarget.removeAll(Clock.ClockUpdateEvent);
            this.reset();
          }
        };
        _proto.onTargetParentChaned = function onTargetParentChaned(removedParent) {
          if (removedParent) {
            this.reset();
          }
        };
        _createClass(Clock, [{
          key: "uuid",
          get: function get() {
            return this._id;
          }
        }, {
          key: "isPause",
          get: function get() {
            return director.getScheduler().isTargetPaused(this);
          }
        }, {
          key: "passedTime",
          get: function get() {
            return this._passedTime;
          }
        }, {
          key: "over",
          get: function get() {
            return this._over;
          }
        }, {
          key: "allTime",
          get: function get() {
            return this._allTime;
          }
        }, {
          key: "leftTime",
          get: function get() {
            return this._allTime - this._passedTime;
          }
        }]);
        return Clock;
      }());
      Clock.ClockUpdateEvent = 'OnClockUpdate';
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CocosDevKit.ts", ['cc', './HotUpdate.ts', './CryptoTool.ts', './DataConvert.ts', './Utils.ts', './HttpFormData.ts', './LocalStorageTool.ts', './Logger.ts', './PokerParser.ts', './Clock.ts', './UITools.ts', './NetData.ts', './NetData87.ts', './NetNode.ts', './NetProxyBase.ts', './NetNodeManager.ts', './NetTypes.ts', './HttpProtoBase.ts', './HttpRequest.ts', './HttpTools.ts', './NodePoolExtention.ts', './Task.ts', './Loading.ts', './DataBinder.ts', './CDKDecorators.ts', './mobx.ts'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      var _setter = {};
      _setter.HotUpdate = module.HotUpdate;
      _setter.HotUpdateConfig = module.HotUpdateConfig;
      exports(_setter);
    }, function (module) {
      exports('CryptoTool', module.CryptoTool);
    }, function (module) {
      exports('DataConvert', module.DataConvert);
    }, function (module) {
      exports('Utils', module.Utils);
    }, function (module) {
      exports('HttpFormData', module.HttpFormData);
    }, function (module) {
      exports('LocalStorageTool', module.LocalStorageTool);
    }, function (module) {
      var _setter = {};
      _setter.Log = module.Log;
      _setter.LogOption = module.LogOption;
      _setter.Logger = module.Logger;
      exports(_setter);
    }, function (module) {
      exports('PokerParser', module.PokerParser);
    }, function (module) {
      exports('Clock', module.Clock);
    }, function (module) {
      exports('UITools', module.UITools);
    }, function (module) {
      exports('NetData', module.NetData);
    }, function (module) {
      exports('NetData87', module.NetData87);
    }, function (module) {
      exports('NetNode', module.NetNode);
    }, function (module) {
      exports('NetProxyBase', module.NetProxyBase);
    }, function (module) {
      exports('NetNodeManager', module.NetNodeManager);
    }, function (module) {
      exports('NetTypes', module.NetTypes);
    }, function (module) {
      var _setter = {};
      _setter.EHttpErrorType = module.EHttpErrorType;
      _setter.HttpError = module.HttpError;
      _setter.HttpProtoBase = module.HttpProtoBase;
      exports(_setter);
    }, function (module) {
      exports('HttpRequest', module.HttpRequest);
    }, function (module) {
      exports('HttpTools', module.HttpTools);
    }, function (module) {
      var _setter = {};
      _setter.CCNodePoolEx = module.CCNodePoolEx;
      _setter.GObjectPoolEx = module.GObjectPoolEx;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.Task = module.Task;
      _setter.TaskManager = module.TaskManager;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.Loading = module.Loading;
      _setter.LoadingManager = module.LoadingManager;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.BINDFUNC = module.BINDFUNC;
      _setter.STOPBINDDATA = module.STOPBINDDATA;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.AutoCheckNode = module.AutoCheckNode;
      _setter.AutoCheckNodeAsync = module.AutoCheckNodeAsync;
      _setter.CDKSafeError = module.CDKSafeError;
      _setter.SafeAsyncProcess = module.SafeAsyncProcess;
      _setter.SafeHandler = module.SafeHandler;
      _setter.SafePromiseExecutor = module.SafePromiseExecutor;
      _setter.SafeTimeInterval = module.SafeTimeInterval;
      exports(_setter);
    }, function (module) {
      exports('makeAutoObservable', module.makeAutoObservable);
    }],
    execute: function () {
      cclegacy._RF.push({}, "89d1ac/2HtFqpF+2pw9/llL", "CocosDevKit", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoinGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_CoinGroup.ts', './GameDecorators.ts', './RoleData.ts', './CocosDevKit.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_CoinGroup, CustomFguiClass, MarkForDataBinder, RoleData, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_CoinGroup = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
      MarkForDataBinder = module.MarkForDataBinder;
    }, function (module) {
      RoleData = module.RoleData;
    }, null, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "82716YIzZFPnaN9tnbxD5kV", "CoinGroup", undefined);
      var CoinGroup = exports('CoinGroup', (_dec = MarkForDataBinder(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_CoinGroup) {
        _inheritsLoose(CoinGroup, _UI_CoinGroup);
        function CoinGroup() {
          return _UI_CoinGroup.apply(this, arguments) || this;
        }
        var _proto = CoinGroup.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_CoinGroup.prototype.onConstruct.call(this);
          this.name = 'CoinGroup';
        };
        _proto.setGold = function setGold() {
          this.m_CoinValue.text = Utils.toFormat(RoleData.inst.chip);
        };
        return CoinGroup;
      }(UI_CoinGroup), _applyDecoratedDescriptor(_class2.prototype, "setGold", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "setGold"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConfirmBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_ConfirmBoxStyle1.ts', './UI_ConfirmBoxStyle2.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Node, GameWindowBase, EEnterType, UI_ConfirmBoxStyle1, UI_ConfirmBoxStyle2;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
    }, function (module) {
      GameWindowBase = module.GameWindowBase;
      EEnterType = module.EEnterType;
    }, function (module) {
      UI_ConfirmBoxStyle1 = module.default;
    }, function (module) {
      UI_ConfirmBoxStyle2 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b909aojowJA7aZIi6F9EQpL", "ConfirmBox", undefined);
      var ConfirmBoxCache = [];

      /**
       * ConfirmBox 初始化参数
       */

      /**
       * ConfirmBox 回调接口
       */

      /**
       * 通用确认对话框
       * @example
       * // import { ConfirmBox } from "../Public/ConfirmBox";
       * let confirmBox = ConfirmBox.create(this);
       * confirmBox.setInputParams({
       *     buttonNum: 1,
       *     content: 'hello'
       * });
       * confirmBox.addHook({
       *     onCancel: () => {
       *         // on cancel click
       *     },
       *     onConfirm: () => {
       *         // on confirm click
       *     },
       * });
       * confirmBox.showOn(this.grootInst);
       */
      var ConfirmBox = exports('ConfirmBox', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(ConfirmBox, _GameWindowBase);
        /**
         * @param from
         * @param style 样式
         * @returns
         */
        ConfirmBox.create = function create(from, style) {
          if (style === void 0) {
            style = 2;
          }
          return new ConfirmBox(from, style);
        };
        ConfirmBox.cache = function cache(box) {
          if (!ConfirmBoxCache.includes(box)) {
            ConfirmBoxCache.push(box);
            box.node.on(Node.EventType.NODE_DESTROYED, function () {
              var idx = ConfirmBoxCache.indexOf(box);
              if (idx != -1) {
                ConfirmBoxCache.splice(idx, 1);
              }
            });
          }
        }
        /**
         * 销毁所有ConfirmBox,且不触发hook
         */;
        ConfirmBox.disposAll = function disposAll() {
          for (var i = 0; i < ConfirmBoxCache.length; i++) {
            var box = ConfirmBoxCache[i];
            if (box.node && box.node.isValid) {
              box.node.off(Node.EventType.NODE_DESTROYED);
              box.hookList.length = 0;
              box.dispose();
            }
          }
          ConfirmBoxCache.length = 0;
        };
        function ConfirmBox(from, style) {
          var _this;
          if (style === void 0) {
            style = 2;
          }
          _this = _GameWindowBase.call(this, from) || this;
          _this["package"] = [];
          _this.paneClass = void 0;
          _this.coverUnderlyingWindow = false;
          _this.showBlackMask = true;
          _this.clickOutsideHide = false;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.gestureCloseWindow = false;
          _this.pageOrder = 1001;
          _this.pageName = 'ConfirmBox';
          _this.hookList = [];
          _this.inputParams = void 0;
          switch (style) {
            case 1:
              _this.paneClass = UI_ConfirmBoxStyle1;
              break;
            case 2:
              _this.paneClass = UI_ConfirmBoxStyle2;
              break;
            default:
              _this.paneClass = UI_ConfirmBoxStyle2;
              break;
          }
          return _this;
        }
        var _proto = ConfirmBox.prototype;
        _proto.setDragEnable = function setDragEnable(enable) {
          if (this.pane instanceof UI_ConfirmBoxStyle2) {
            var frame = this.pane.m_frame;
            frame.m_showDrag.selectedIndex = enable ? 1 : 0;
          }
        };
        _proto.addHook = function addHook(hook) {
          _GameWindowBase.prototype.addHook.call(this, hook);
        };
        _proto.setInputParams = function setInputParams(params) {
          _GameWindowBase.prototype.setInputParams.call(this, params);
          // // @ts-ignore
          // if (this._inited) {
          //     this.setConfirmBox();
          // }
        };

        _proto.onInit = function onInit() {
          this.setConfirmBox();
          this.pane.m_frame.m_btnCancel.onClick(this.onCancelClick, this);
          this.pane.m_frame.m_btnConfirm.onClick(this.onConfirmClick, this);
          this.pane.m_content.onClick(this.onContentClick, this);
        };
        _proto.setConfirmBox = function setConfirmBox() {
          if (this.inputParams) {
            if (this.inputParams.title) {
              this.pane.m_frame.title = this.inputParams.title;
            }
            if (this.inputParams.buttonNum != undefined) {
              var num = Math.max(Math.min(this.inputParams.buttonNum, 2), 0);
              this.pane.m_frame.m_buttonNum.selectedIndex = num;
            }
            if (this.inputParams.content) {
              this.pane.m_content.text = this.inputParams.content;
            }
            if (this.inputParams.cancelText) {
              this.pane.m_frame.m_btnCancel.title = this.inputParams.cancelText;
            }
            if (this.inputParams.confirmText) {
              this.pane.m_frame.m_btnConfirm.title = this.inputParams.confirmText;
            }
            if (this.inputParams.align != undefined) {
              this.pane.m_content.align = this.inputParams.align;
            }
          }
          this.forceUpdateRecursion();
        };
        _proto.onConfirmClick = function onConfirmClick() {
          var _this2 = this;
          this.addHook({
            onPageDestroy: function onPageDestroy() {
              for (var i = 0; i < _this2.hookList.length; i++) {
                var hook = _this2.hookList[i];
                if (hook.onConfirm) {
                  hook.onConfirm();
                }
              }
            }
          });
          this.hide();
        };
        _proto.onCancelClick = function onCancelClick() {
          var _this3 = this;
          this.addHook({
            onPageDestroy: function onPageDestroy() {
              for (var i = 0; i < _this3.hookList.length; i++) {
                var hook = _this3.hookList[i];
                if (hook.onCancel) {
                  hook.onCancel();
                }
              }
            }
          });
          this.hide();
        };
        _proto.onContentClick = function onContentClick() {
          var _this4 = this;
          if (this.inputParams.enableContentClick != true) return;
          this.addHook({
            onPageDestroy: function onPageDestroy() {
              for (var i = 0; i < _this4.hookList.length; i++) {
                var hook = _this4.hookList[i];
                if (hook.onContent) {
                  hook.onContent();
                }
              }
            }
          });
          this.hide();
        };
        _proto.closeEventHandler = function closeEventHandler() {
          var _this5 = this;
          if (this.inputParams.clickOutsideClose == false) return;
          if (!this.inputParams.disableCloseCancel) {
            this.addHook({
              onPageDestroy: function onPageDestroy() {
                for (var i = 0; i < _this5.hookList.length; i++) {
                  var hook = _this5.hookList[i];
                  if (hook.onCancel) {
                    hook.onCancel();
                  }
                }
              }
            });
          }
          this.hide();
        };
        _proto.dispose = function dispose() {
          _GameWindowBase.prototype.dispose.call(this);
        };
        _proto.showOn = function showOn(root) {
          _GameWindowBase.prototype.showOn.call(this, root);
          ConfirmBox.cache(this);
        };
        return ConfirmBox;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CryptoTool.ts", ['cc', './index.js', './DataConvert.ts', './XXTEA2.ts'], function (exports) {
  var cclegacy, CryptoES, DataConvert, XXTEA2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoES = module.default;
    }, function (module) {
      DataConvert = module.DataConvert;
    }, function (module) {
      XXTEA2 = module.XXTEA2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "deee8rNEYBMFbf5UEsqrkww", "CryptoTool", undefined);
      function randomBuffer(len) {
        var arr = [];
        for (var i = 0; i < len; i++) {
          arr.push(Math.floor(Math.random() * 255 + 1));
        }
        return new Uint8Array(arr);
      }
      var CryptoTool = exports('CryptoTool', /*#__PURE__*/function () {
        function CryptoTool() {}
        // 速度大概提升了百分之30，目前用这个
        /**
         * 生成随机的AES秘钥
         */
        CryptoTool.randomAesKeyBuffer = function randomAesKeyBuffer() {
          return randomBuffer(16);
        }

        /**
         * 生成随机的AES向量
         */;
        CryptoTool.randomAesIvBuffer = function randomAesIvBuffer() {
          return randomBuffer(16);
        }

        /**
         * AES 加密字符串
         * @param strKey
         * @param strData
         */;
        CryptoTool.aesEncryptString = function aesEncryptString(strKey, strData, base64) {
          if (base64 === void 0) {
            base64 = false;
          }
          if (strData.length > 0) {
            var key = CryptoES.enc.Utf8.parse(strKey);
            var srcs = CryptoES.enc.Utf8.parse(strData);
            var encrypted = CryptoES.AES.encrypt(srcs, key, {
              mode: CryptoES.mode.ECB,
              padding: CryptoES.pad.Pkcs7
            });
            if (base64) {
              var result = encrypted.toString();
              return CryptoTool.CryptoES.enc.Utf8.parse(result).toString(CryptoTool.CryptoES.enc.Base64url);
            } else {
              var _result = encrypted.toString();
              // console.log('aesEncryptString', strKey, strData, result);
              return _result;
            }
          } else {
            return '';
          }
        }

        /**
         * AES 解密字符串密文
         * @param strKey
         * @param strData
         */;
        CryptoTool.aesDecryptString = function aesDecryptString(strKey, strData, base64) {
          if (base64 === void 0) {
            base64 = false;
          }
          var key = CryptoES.enc.Utf8.parse(strKey);
          if (base64) {
            var a = CryptoTool.CryptoES.enc.Base64url.parse(strData).toString(CryptoTool.CryptoES.enc.Utf8);
            var decrypt = CryptoES.AES.decrypt(a, key, {
              mode: CryptoES.mode.ECB,
              padding: CryptoES.pad.Pkcs7
            });
            return CryptoES.enc.Utf8.stringify(decrypt).toString();
          } else {
            var _decrypt = CryptoES.AES.decrypt(strData, key, {
              mode: CryptoES.mode.ECB,
              padding: CryptoES.pad.Pkcs7
            });
            return CryptoES.enc.Utf8.stringify(_decrypt).toString();
          }
        }

        /**
         * AES 加密 Uint8Array 类型数据
         * @param strKey
         * @param dataBuffer
         */;
        CryptoTool.aesEncryptBuffer = function aesEncryptBuffer(strKey, dataBuffer) {
          var key = CryptoES.enc.Utf8.parse(strKey);
          var wordArrayData = CryptoES.lib.WordArray.create(dataBuffer);
          var encrypted = CryptoES.AES.encrypt(wordArrayData, key, {
            mode: CryptoES.mode.CBC,
            padding: CryptoES.pad.ZeroPadding
          });
          return DataConvert.wordArrayToUint8Array(encrypted.ciphertext);
        }

        /**
         * AES 解密 Uint8Array 类型密文
         * @param strKey
         * @param dataBuffer
         */;
        CryptoTool.aesDecryptBuffer = function aesDecryptBuffer(strKey, dataBuffer) {
          var key = CryptoES.enc.Utf8.parse(strKey);
          var wordArrayData = CryptoES.lib.WordArray.create(dataBuffer);
          var base64Data = CryptoES.enc.Base64.stringify(wordArrayData);
          var decrypt = CryptoES.AES.decrypt(base64Data, key, {
            mode: CryptoES.mode.CBC,
            padding: CryptoES.pad.NoPadding
          });
          return DataConvert.wordArrayToUint8Array(decrypt);
        }

        /**
         * md5 加密字符串
         * @param str
         */;
        CryptoTool.hex_md5 = function hex_md5(str) {
          var s = CryptoES.MD5(str);
          return s.toString(CryptoES.enc.Hex);
        };
        return CryptoTool;
      }());
      CryptoTool.CryptoES = CryptoES;
      CryptoTool.XXTEA = XXTEA2;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataBinder.ts", ['cc', './mobx.ts'], function (exports) {
  var cclegacy, Node, Component, configure, autorun;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      configure = module.configure;
      autorun = module.autorun;
      exports('makeAutoObservable', module.makeAutoObservable);
    }],
    execute: function () {
      exports({
        BINDFUNC: BINDFUNC,
        STOPBINDDATA: STOPBINDDATA
      });
      cclegacy._RF.push({}, "cd49czDeahLw6z+o4ceVKpQ", "DataBinder", undefined);
      // 永远需要在action中才能修改状态
      configure({
        enforceActions: 'always',
        disableErrorBoundaries: true
      });
      var cache = new Map();
      function STOPBINDDATA(obj) {
        if (!cache.has(obj)) return;
        var item = cache.get(obj);
        if (!item || !item.disposers || !item.eventListenerCallback || item.disposers.length == 0) {
          return;
        }
        cache["delete"](obj);
        var callback = item.eventListenerCallback;
        if (Node.isNode(obj)) {
          if (obj.isValid) {
            obj.off(Node.EventType.NODE_DESTROYED, callback);
          }
        } else {
          if (obj instanceof Component) {
            obj.node.off(Node.EventType.COMPONENT_REMOVED, callback);
          }
          if (Node.isNode(obj.node) && obj.node.isValid) {
            obj.node.off(Node.EventType.NODE_DESTROYED, callback);
          }
        }
        for (var i = 0; i < item.disposers.length; i++) {
          var disposer = item.disposers[i];
          disposer();
        }
      }

      /**
       * func 会在访问的变量发生变化时自动被触发
       * obj 在被销毁时会自动解绑
       * @param obj
       * @param func
       */
      function BINDFUNC(obj, func) {
        if (!cache.has(obj)) {
          // @ts-ignore
          cache.set(obj, {});
        }
        var item = cache.get(obj);
        if (!item.eventListenerCallback) {
          item.eventListenerCallback = function (comOrNode) {
            if (Node.isNode(comOrNode)) {
              return STOPBINDDATA(obj);
            }
            if (comOrNode !== obj) return;
            STOPBINDDATA(obj);
          };
        }
        var disposer = autorun(func);
        if (!item.disposers) {
          item.disposers = [];
        }
        item.disposers.push(disposer);
        if (Node.isNode(obj)) {
          if (!obj.hasEventListener(Node.EventType.NODE_DESTROYED, item.eventListenerCallback)) {
            obj.once(Node.EventType.NODE_DESTROYED, item.eventListenerCallback);
          }
        } else {
          if (!obj.node.hasEventListener(Node.EventType.COMPONENT_REMOVED, item.eventListenerCallback)) {
            obj.node.on(Node.EventType.COMPONENT_REMOVED, item.eventListenerCallback);
          }
          if (!obj.node.hasEventListener(Node.EventType.NODE_DESTROYED, item.eventListenerCallback)) {
            obj.node.once(Node.EventType.NODE_DESTROYED, item.eventListenerCallback);
          }
        }
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataConvert.ts", ['cc', './index.js'], function (exports) {
  var cclegacy, CryptoES;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoES = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ff312ShI/RJPJffEBmTAx07", "DataConvert", undefined);
      var DataConvert = exports('DataConvert', /*#__PURE__*/function () {
        function DataConvert() {}
        DataConvert.wordArrayToUint8Array = function wordArrayToUint8Array(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var u8 = new Uint8Array(sigBytes);
          for (var i = 0; i < sigBytes; i++) {
            var _byte = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
            u8[i] = _byte;
          }
          return u8;
        };
        DataConvert.base64ToUint8Array = function base64ToUint8Array(base64String) {
          var padding = '='.repeat((4 - base64String.length % 4) % 4);
          var base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
          var wordArray = CryptoES.enc.Base64.parse(base64);
          return this.wordArrayToUint8Array(wordArray);
        };
        DataConvert.arrayToUtf8 = function arrayToUtf8(array) {
          var result = '';
          for (var i = 0, len = array.length; i < len; i++) {
            if (array[i] == 0) break;
            if (Number.isInteger(array[i])) {
              result += String.fromCharCode(array[i]);
            }
          }
          return result;
        };
        DataConvert.stringToUnicode = function stringToUnicode(dataStr) {
          var codes = [];
          var len = dataStr.length;
          for (var i = 0; i < len; i++) {
            codes[i] = dataStr.charCodeAt(i);
          }
          return codes;
        };
        DataConvert.unicodeToString = function unicodeToString(dataUnicode) {
          var dataStr = '';
          for (var i = 0, len = dataUnicode.length; i < len; i++) {
            dataStr += String.fromCharCode(dataUnicode[i]);
          }
          return dataStr;
        };
        DataConvert.stringToBuffer = function stringToBuffer(dataStr) {
          var codes = [];
          var len = dataStr.length;
          for (var i = 0; i < len; i++) {
            codes[i] = dataStr.charCodeAt(i);
          }
          return new Uint8Array(codes);
        };
        DataConvert.bufferToString = function bufferToString(dataBuffer) {
          var dataStr = '';
          var tempArr = Array.from(dataBuffer);
          for (var i = 0, len = tempArr.length; i < len; i++) {
            dataStr += String.fromCharCode(tempArr[i]);
          }
          return dataStr;
        };
        DataConvert.concatenateBuffer = function concatenateBuffer() {
          var totalLength = 0;
          for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
          }
          for (var _i = 0, _params = params; _i < _params.length; _i++) {
            var buffer = _params[_i];
            totalLength += buffer.length;
          }
          var result = new Uint8Array(totalLength);
          var offset = 0;
          for (var _i2 = 0, _params2 = params; _i2 < _params2.length; _i2++) {
            var _buffer = _params2[_i2];
            result.set(_buffer, offset);
            offset += _buffer.length;
          }
          return result;
        };
        return DataConvert;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/debug-view-runtime-control.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, Canvas, UITransform, instantiate, Label, RichText, Toggle, Button, director, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      Canvas = module.Canvas;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Label = module.Label;
      RichText = module.RichText;
      Toggle = module.Toggle;
      Button = module.Button;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "b2bd1+njXxJxaFY3ymm06WU", "debug-view-runtime-control", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DebugViewRuntimeControl = exports('DebugViewRuntimeControl', (_dec = ccclass('internal.DebugViewRuntimeControl'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugViewRuntimeControl, _Component);
        function DebugViewRuntimeControl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "compositeModeToggle", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "singleModeToggle", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "EnableAllCompositeModeButton", _descriptor3, _assertThisInitialized(_this));
          _this._single = 0;
          _this.strSingle = ['No Single Debug', 'Vertex Color', 'Vertex Normal', 'Vertex Tangent', 'World Position', 'Vertex Mirror', 'Face Side', 'UV0', 'UV1', 'UV Lightmap', 'Project Depth', 'Linear Depth', 'Fragment Normal', 'Fragment Tangent', 'Fragment Binormal', 'Base Color', 'Diffuse Color', 'Specular Color', 'Transparency', 'Metallic', 'Roughness', 'Specular Intensity', 'IOR', 'Direct Diffuse', 'Direct Specular', 'Direct All', 'Env Diffuse', 'Env Specular', 'Env All', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Fresnel', 'Direct Transmit Diffuse', 'Direct Transmit Specular', 'Env Transmit Diffuse', 'Env Transmit Specular', 'Transmit All', 'Direct Internal Specular', 'Env Internal Specular', 'Internal All', 'Fog'];
          _this.strComposite = ['Direct Diffuse', 'Direct Specular', 'Env Diffuse', 'Env Specular', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Normal Map', 'Fog', 'Tone Mapping', 'Gamma Correction', 'Fresnel', 'Transmit Diffuse', 'Transmit Specular', 'Internal Specular', 'TT'];
          _this.strMisc = ['CSM Layer Coloration', 'Lighting With Albedo'];
          _this.compositeModeToggleList = [];
          _this.singleModeToggleList = [];
          _this.miscModeToggleList = [];
          _this.textComponentList = [];
          _this.labelComponentList = [];
          _this.textContentList = [];
          _this.hideButtonLabel = void 0;
          _this._currentColorIndex = 0;
          _this.strColor = ['<color=#ffffff>', '<color=#000000>', '<color=#ff0000>', '<color=#00ff00>', '<color=#0000ff>'];
          _this.color = [Color.WHITE, Color.BLACK, Color.RED, Color.GREEN, Color.BLUE];
          return _this;
        }
        var _proto = DebugViewRuntimeControl.prototype;
        _proto.start = function start() {
          // get canvas resolution
          var canvas = this.node.parent.getComponent(Canvas);
          if (!canvas) {
            console.error('debug-view-runtime-control should be child of Canvas');
            return;
          }
          var uiTransform = this.node.parent.getComponent(UITransform);
          var halfScreenWidth = uiTransform.width * 0.5;
          var halfScreenHeight = uiTransform.height * 0.5;
          var x = -halfScreenWidth + halfScreenWidth * 0.1,
            y = halfScreenHeight - halfScreenHeight * 0.1;
          var width = 200,
            height = 20;

          // new nodes
          var miscNode = this.node.getChildByName('MiscMode');
          var buttonNode = instantiate(miscNode);
          buttonNode.parent = this.node;
          buttonNode.name = 'Buttons';
          var titleNode = instantiate(miscNode);
          titleNode.parent = this.node;
          titleNode.name = 'Titles';

          // title
          for (var i = 0; i < 2; i++) {
            var newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));
            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);
            newLabel.setScale(0.75, 0.75, 0.75);
            newLabel.parent = titleNode;
            var _labelComponent = newLabel.getComponent(Label);
            _labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';
            _labelComponent.color = Color.WHITE;
            _labelComponent.overflow = 0;
            this.labelComponentList[this.labelComponentList.length] = _labelComponent;
          }
          y -= height;
          // single
          var currentRow = 0;
          for (var _i = 0; _i < this.strSingle.length; _i++, currentRow++) {
            if (_i === this.strSingle.length >> 1) {
              x += width;
              currentRow = 0;
            }
            var newNode = _i ? instantiate(this.singleModeToggle) : this.singleModeToggle;
            newNode.setPosition(x, y - height * currentRow, 0.0);
            newNode.setScale(0.5, 0.5, 0.5);
            newNode.parent = this.singleModeToggle.parent;
            var textComponent = newNode.getComponentInChildren(RichText);
            textComponent.string = this.strSingle[_i];
            this.textComponentList[this.textComponentList.length] = textComponent;
            this.textContentList[this.textContentList.length] = textComponent.string;
            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);
            this.singleModeToggleList[_i] = newNode;
          }
          x += width;
          // buttons
          this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);
          this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);
          this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);
          this.EnableAllCompositeModeButton.parent = buttonNode;
          var labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var changeColorButton = instantiate(this.EnableAllCompositeModeButton);
          changeColorButton.setPosition(x + 90, y, 0.0);
          changeColorButton.setScale(0.5, 0.5, 0.5);
          changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);
          changeColorButton.parent = buttonNode;
          labelComponent = changeColorButton.getComponentInChildren(Label);
          labelComponent.string = 'TextColor';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var HideButton = instantiate(this.EnableAllCompositeModeButton);
          HideButton.setPosition(x + 200, y, 0.0);
          HideButton.setScale(0.5, 0.5, 0.5);
          HideButton.on(Button.EventType.CLICK, this.hideUI, this);
          HideButton.parent = this.node.parent;
          labelComponent = HideButton.getComponentInChildren(Label);
          labelComponent.string = 'Hide UI';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          this.hideButtonLabel = labelComponent;

          // misc
          y -= 40;
          for (var _i2 = 0; _i2 < this.strMisc.length; _i2++) {
            var _newNode = instantiate(this.compositeModeToggle);
            _newNode.setPosition(x, y - height * _i2, 0.0);
            _newNode.setScale(0.5, 0.5, 0.5);
            _newNode.parent = miscNode;
            var _textComponent = _newNode.getComponentInChildren(RichText);
            _textComponent.string = this.strMisc[_i2];
            this.textComponentList[this.textComponentList.length] = _textComponent;
            this.textContentList[this.textContentList.length] = _textComponent.string;
            var toggleComponent = _newNode.getComponent(Toggle);
            toggleComponent.isChecked = _i2 ? true : false;
            _newNode.on(Toggle.EventType.TOGGLE, _i2 ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);
            this.miscModeToggleList[_i2] = _newNode;
          }

          // composite
          y -= 150;
          for (var _i3 = 0; _i3 < this.strComposite.length; _i3++) {
            var _newNode2 = _i3 ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;
            _newNode2.setPosition(x, y - height * _i3, 0.0);
            _newNode2.setScale(0.5, 0.5, 0.5);
            _newNode2.parent = this.compositeModeToggle.parent;
            var _textComponent2 = _newNode2.getComponentInChildren(RichText);
            _textComponent2.string = this.strComposite[_i3];
            this.textComponentList[this.textComponentList.length] = _textComponent2;
            this.textContentList[this.textContentList.length] = _textComponent2.string;
            _newNode2.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);
            this.compositeModeToggleList[_i3] = _newNode2;
          }
        };
        _proto.isTextMatched = function isTextMatched(textUI, textDescription) {
          var tempText = new String(textUI);
          var findIndex = tempText.search('>');
          if (findIndex === -1) {
            return textUI === textDescription;
          } else {
            tempText = tempText.substr(findIndex + 1);
            tempText = tempText.substr(0, tempText.search('<'));
            return tempText === textDescription;
          }
        };
        _proto.toggleSingleMode = function toggleSingleMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);
          for (var i = 0; i < this.strSingle.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {
              debugView.singleMode = i;
            }
          }
        };
        _proto.toggleCompositeMode = function toggleCompositeMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);
          for (var i = 0; i < this.strComposite.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {
              debugView.enableCompositeMode(i, toggle.isChecked);
            }
          }
        };
        _proto.toggleLightingWithAlbedo = function toggleLightingWithAlbedo(toggle) {
          var debugView = director.root.debugView;
          debugView.lightingWithAlbedo = toggle.isChecked;
        };
        _proto.toggleCSMColoration = function toggleCSMColoration(toggle) {
          var debugView = director.root.debugView;
          debugView.csmLayerColoration = toggle.isChecked;
        };
        _proto.enableAllCompositeMode = function enableAllCompositeMode(button) {
          var debugView = director.root.debugView;
          debugView.enableAllCompositeMode(true);
          for (var i = 0; i < this.compositeModeToggleList.length; i++) {
            var _toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);
            _toggleComponent.isChecked = true;
          }
          var toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);
          toggleComponent.isChecked = false;
          debugView.csmLayerColoration = false;
          toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);
          toggleComponent.isChecked = true;
          debugView.lightingWithAlbedo = true;
        };
        _proto.hideUI = function hideUI(button) {
          var titleNode = this.node.getChildByName('Titles');
          var activeValue = !titleNode.active;
          this.singleModeToggleList[0].parent.active = activeValue;
          this.miscModeToggleList[0].parent.active = activeValue;
          this.compositeModeToggleList[0].parent.active = activeValue;
          this.EnableAllCompositeModeButton.parent.active = activeValue;
          titleNode.active = activeValue;
          this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';
        };
        _proto.changeTextColor = function changeTextColor(button) {
          this._currentColorIndex++;
          if (this._currentColorIndex >= this.strColor.length) {
            this._currentColorIndex = 0;
          }
          for (var i = 0; i < this.textComponentList.length; i++) {
            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';
          }
          for (var _i4 = 0; _i4 < this.labelComponentList.length; _i4++) {
            this.labelComponentList[_i4].color = this.color[this._currentColorIndex];
          }
        };
        _proto.onLoad = function onLoad() {};
        _proto.update = function update(deltaTime) {};
        return DebugViewRuntimeControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "compositeModeToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "singleModeToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "EnableAllCompositeModeButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugBinder.ts", ['cc', './UI_DebugPage1.ts', './UI_ComboBox1_popup.ts', './UI_DebugPage3.ts', './UI_ErrorListItem.ts', './UI_DebugPage2.ts', './UI_AccountListItem.ts', './UI_DebugView.ts', './fairygui.mjs'], function (exports) {
  var cclegacy, UI_DebugPage1, UI_ComboBox1_popup, UI_DebugPage3, UI_ErrorListItem, UI_DebugPage2, UI_AccountListItem, UI_DebugView, UIObjectFactory;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_DebugPage1 = module.default;
    }, function (module) {
      UI_ComboBox1_popup = module.default;
    }, function (module) {
      UI_DebugPage3 = module.default;
    }, function (module) {
      UI_ErrorListItem = module.default;
    }, function (module) {
      UI_DebugPage2 = module.default;
    }, function (module) {
      UI_AccountListItem = module.default;
    }, function (module) {
      UI_DebugView = module.default;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }],
    execute: function () {
      cclegacy._RF.push({}, "423938cx4tFjY/2FdvDT96y", "DebugBinder", undefined);
      var DebugBinder = exports('default', /*#__PURE__*/function () {
        function DebugBinder() {}
        DebugBinder.bindAll = function bindAll() {
          UIObjectFactory.setExtension(UI_DebugPage1.URL, UI_DebugPage1);
          UIObjectFactory.setExtension(UI_ComboBox1_popup.URL, UI_ComboBox1_popup);
          UIObjectFactory.setExtension(UI_DebugPage3.URL, UI_DebugPage3);
          UIObjectFactory.setExtension(UI_ErrorListItem.URL, UI_ErrorListItem);
          UIObjectFactory.setExtension(UI_DebugPage2.URL, UI_DebugPage2);
          UIObjectFactory.setExtension(UI_AccountListItem.URL, UI_AccountListItem);
          UIObjectFactory.setExtension(UI_DebugView.URL, UI_DebugView);
        };
        return DebugBinder;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GrootEx.ts', './GameDebugView.ts', './CDKDecorators.ts', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, _decorator, Node, v3, Component, GRootEx, GameDebugView, SafeAsyncProcess, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      v3 = module.v3;
      Component = module.Component;
    }, null, function (module) {
      GRootEx = module.GRootEx;
    }, function (module) {
      GameDebugView = module.GameDebugView;
    }, function (module) {
      SafeAsyncProcess = module.SafeAsyncProcess;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;
      cclegacy._RF.push({}, "d130c4ip89EEpDEJX1InEr3", "DebugButton", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DebugButton = exports('DebugButton', (_dec = ccclass('DebugButton'), _dec2 = SafeAsyncProcess(), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugButton, _Component);
        function DebugButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._move = false;
          _this.gameDebugView = void 0;
          return _this;
        }
        var _proto = DebugButton.prototype;
        _proto.start = function start() {
          this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          this._move = false;
        };
        _proto.onTouchMove = function onTouchMove(event) {
          var delta = event.getUIDelta();
          var location = event.getUILocation();
          var startLocation = event.getUIStartLocation();
          var pos = this.node.getPosition();
          this.node.setPosition(pos.add(v3(delta.x, delta.y, 0)));
          if (location.subtract(startLocation).length() > 20) {
            this._move = true;
          }
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          if (!this._move) {
            this.onDebugButtonClick();
          }
        };
        _proto.onTouchCancel = function onTouchCancel(event) {};
        _proto.showDebugView = function showDebugView() {
          var _this2 = this;
          return new Promise(function (resolve) {
            var groot = GRootEx.getInst(0);
            var gameDebugView = GameDebugView.create(groot);
            gameDebugView.addHook({
              onPageShown: function onPageShown() {
                _this2.gameDebugView = gameDebugView;
                resolve();
              },
              onPageDestroy: function onPageDestroy() {
                _this2.gameDebugView = undefined;
              }
            });
            gameDebugView.showOn(groot);
          });
        };
        _proto.onDebugButtonClick = function onDebugButtonClick() {
          Log.debug.log('onDebugButtonClick');
          if (this.gameDebugView) {
            this.gameDebugView.hide();
          } else {
            this.showDebugView();
          }
        };
        return DebugButton;
      }(Component), _applyDecoratedDescriptor(_class2.prototype, "showDebugView", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "showDebugView"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugPage1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './CocosDevKit.ts', './UI_DebugPage1.ts', './LanguageManage.ts', './GameStorage.ts', './GameDecorators.ts', './GameConfig.ts', './NativeDeviceBridge.ts', './TelegramDeviceBridge.ts', './CDKDecorators.ts', './Logger.ts', './NetNodeManager.ts', './HotUpdate.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, sys, profiler, game, native, path, Event, UI_DebugPage1, LanguageManager, GameStorage, CustomFguiClass, AutoLoadingProcess, ExceptionCapture, GameConfig, NativeDeviceBridge, TelegramDeviceBridge, SafeTimeInterval, SafeAsyncProcess, AutoCheckNodeAsync, SafePromiseExecutor, LogOption, Log, NetNodeManager, HotUpdateConfig;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      profiler = module.profiler;
      game = module.game;
      native = module.native;
      path = module.path;
    }, function (module) {
      Event = module.Event;
    }, null, function (module) {
      UI_DebugPage1 = module.default;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      GameStorage = module.GameStorage;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
      AutoLoadingProcess = module.AutoLoadingProcess;
      ExceptionCapture = module.ExceptionCapture;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
      SafeAsyncProcess = module.SafeAsyncProcess;
      AutoCheckNodeAsync = module.AutoCheckNodeAsync;
      SafePromiseExecutor = module.SafePromiseExecutor;
    }, function (module) {
      LogOption = module.LogOption;
      Log = module.Log;
    }, function (module) {
      NetNodeManager = module.NetNodeManager;
    }, function (module) {
      HotUpdateConfig = module.HotUpdateConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2;
      cclegacy._RF.push({}, "53c8eebxmdLPpKsN4/5G/PT", "DebugPage1", undefined);
      // const testkey = 'OHVp3NNlfsnNYFSh';
      // const testdata = `8a7645fg4dzdvdv4 5gS54V53DF4G9f09)(:".'>:<DK34343G4GVDSHLKM;Joi9f09)(:".'>:<DKfi)(LNJVKJOSJOSDLKCMZL-__Puerts_CSharpEOSDLKCMZL-__Puerts_CSharpEnum()G)SVXKLKASD8545564f FE09f0OJISIF*(&*UHDHSVUoju98hfNYU(F*NFN0N08n0N07ny%Kl8.,V35dOSDLKCMZL-__Puerts_CSharpE+_)+)+)4fM;Joi9f09)(:".'>:<DK34343G4GVDSHLKM;Joi9f09)(:".'>:<DKfi)(LNJ545564f FE09f0OJISIF*(&*UHDHSVUoju98hfNYU(F*NFN0NVKJOSJOSDLKCMZL-__Puerts_CSharpEOSDLKCMZL-__Puerts_CSharp4V53DF4G9f09)(:".'>:<DK34343G4GVDSHLKM;Joi9f09)(:".'>:<DKfi)(LNJVKJOSJOSDLKCMZL-__Puerts_CSharpEOSDLKCMZL-__Puerts_CSharpEnum()G)SVXKLKASD8545564f FE09f0OJISIF*(&*UHDHSVUoju98hfNYU(F*NFN0N08n0N07ny%Kl8.,V35dOSDLKCMZL-__Puerts_CSharpE+_)+)+)4fM;Joi9f09)(:".'>:<DK34343G4GVDSHLKM;Joi9f09)(:".'>:<DKfi)(LNJ545564f FE09f0OJISIF*(&*UHDHSVUoju98hfNYU(F*NFN0NVKJOSJOSDLKCMZL-__Puerts_CSharpEOSDLKCMZL-__Puerts_CSharpEnum()G)SVXKLKASD8545564f FE09f0OJISIF*(&*UHDHSVUoju98hfNYU(F*NFN0N08n0N07ny%Kl8.,))45564f FE09f0OJISIF*(&*UHDHS45564f FE09f0OJISIF*(&*UHDHSSVUoju98hfNYU(F*NFN0N08n0N07ny%Kl8.,))45564f FE09f0OJISIF*(&*UHDHS45SVUoju98hfNYU(F*NFN0N08n0N07ny%Kl8.,))45564f FE09f0OJISIF*(&*UHDHS45SVUoju98hfNYU(F*NFN0N08n0N07ny%Kl8.,))45564f FE09f0OJISIF*(&*UHDHS45`;
      // let testCount = 50000;
      var DebugPage1 = exports('DebugPage1', (_dec = SafeTimeInterval(), _dec2 = SafeTimeInterval(), _dec3 = SafeTimeInterval(), _dec4 = SafeTimeInterval(), _dec5 = SafeTimeInterval(), _dec6 = SafeTimeInterval(), _dec7 = SafeTimeInterval(), _dec8 = SafeTimeInterval(), _dec9 = SafeTimeInterval(), _dec10 = SafeTimeInterval(), _dec11 = AutoLoadingProcess(), _dec12 = ExceptionCapture(), _dec13 = AutoCheckNodeAsync(), _dec14 = SafeAsyncProcess(), _dec15 = SafeTimeInterval(), _dec16 = ExceptionCapture(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_DebugPage) {
        _inheritsLoose(DebugPage1, _UI_DebugPage);
        function DebugPage1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_DebugPage.call.apply(_UI_DebugPage, [this].concat(args)) || this;
          _this.loggerList = void 0;
          _this._vibrateLevel = 1;
          _this.testText = 'asfasfsafsfsafsfsaf';
          return _this;
        }
        var _proto = DebugPage1.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_DebugPage.prototype.onConstruct.call(this);
          this.name = 'DebugPage1';
          this.m_comboBoxLan.value = LanguageManager.language.toString();
          this.m_comboBoxLan.on(Event.STATUS_CHANGED, this.onComboBoxLanStatusChange, this);
          this.m_comboBoxNetConfig.value = GameConfig.curConfigKey;
          this.m_comboBoxAssets.value = GameConfig.curHotUpdateAssetsKey;
          this.m_btnBanAll.selected = !LogOption.getOpenState();
          this.m_btnBanAll.onClick(this.onBanAllLogClick, this);
          this.loggerList = [[this.m_btnHotUpdate, Log.hotupdate], [this.m_btTask, Log.task], [this.m_btnDebug, Log.debug], [this.m_btnGame, Log.game], [this.m_btnHttp, Log.http], [this.m_btnInfo, Log.info], [this.m_btnNet, Log.net]];
          for (var i = 0; i < this.loggerList.length; i++) {
            var item = this.loggerList[i];
            var btn = item[0];
            var logger = item[1];
            btn.selected = logger.getState();
            btn.onClick(this.onLoggerBtnClick.bind(this, btn, logger), this);
          }
          this.m_btnFPS.selected = GameStorage.showFPS;
          this.m_btnFPS.onClick(this.onBtnFPSClick, this);
          this.m_btnRestart.onClick(this.onBtnRestartClick, this);
          this.m_btTest.onClick(this.onBtnTestClick, this);
          this.m_btnBackLogin.onClick(this.onBtnBackLogin, this);
          this.m_btnClearDownload.onClick(this.onBtnClearDownLoadClick, this);
          this.m_btnClearHotUpdate.onClick(this.onBtnClearHotupdateClick, this);
          this.m_btnClearLocalStorage.onClick(this.onBtnClearLocalStorageClick, this);
          this.m_btnCopyInfo.onClick(this.onBtnCopyInfoClick, this);
          this.m_btnCloseWebSocket.onClick(this.onBtnCloseWebSocketClick, this);
          var infoStr = '设备信息：';
          infoStr += "\ntgmode: " + TelegramDeviceBridge.Instance.isTMA;
          infoStr += "\n\u5355GRoot\u5B9E\u4F8B\u6A21\u5F0F: " + GameConfig.singleInstanceGroot;
          infoStr += "\n\u4F7F\u7528wss: " + GameConfig.useWSS;
          infoStr += "\n\u662F\u5426\u672C\u5730\u5305: " + GameConfig.isLocalPackage();
          infoStr += "\nsys.platform: " + sys.platform;
          infoStr += "\nsys.isBrowser: " + sys.isBrowser;
          infoStr += "\nsys.isNative: " + sys.isNative;
          infoStr += "\nsys.isMobile: " + sys.isMobile;
          infoStr += "\nsys.language: " + sys.language;
          infoStr += "\nsys.languageCode: " + sys.languageCode;
          infoStr += "\nsys.browserType: " + sys.browserType;
          infoStr += "\nsys.browserVersion: " + sys.browserVersion;
          infoStr += "\nsys.osMainVersion: " + sys.osMainVersion;
          infoStr += "\nsys.osVersion: " + sys.osVersion;
          infoStr += "\nsys.os: " + sys.os;
          infoStr += "\nsys.isLittleEndian: " + sys.isLittleEndian;
          if (globalThis.navigator) {
            infoStr += "\nnavigator.userAgent: " + globalThis.navigator.userAgent;
          }
          this.m_textInfo.text = infoStr;
        };
        _proto.onBtnCopyInfoClick = function onBtnCopyInfoClick() {
          NativeDeviceBridge.Instance.copyTextToClipboard(this.m_textInfo.text);
        };
        _proto.onBtnCloseWebSocketClick = function onBtnCloseWebSocketClick() {
          this.gameDebugView.callOnDestroy(function () {
            NetNodeManager.Instance.getDefaultNetNode().testClose();
          });
        };
        _proto.updateLoggerState = function updateLoggerState() {
          for (var i = 0; i < this.loggerList.length; i++) {
            var item = this.loggerList[i];
            var btn = item[0];
            var logger = item[1];
            btn.selected = logger.getState();
          }
        };
        _proto.onLoggerBtnClick = function onLoggerBtnClick(btn, logger) {
          LogOption.setTagOption(logger.getTag(), btn.selected);
          LogOption.saveTagOption();
          btn.selected = logger.getState();
        };
        _proto.onBanAllLogClick = function onBanAllLogClick() {
          LogOption.setTagOption('open', !this.m_btnBanAll.selected);
          LogOption.saveTagOption();
          this.updateLoggerState();
        };
        _proto.onBtnFPSClick = function onBtnFPSClick() {
          GameStorage.showFPS = this.m_btnFPS.selected;
          if (this.m_btnFPS.selected) {
            profiler.showStats();
          } else {
            profiler.hideStats();
          }
        };
        _proto.onBtnRestartClick = function onBtnRestartClick() {
          GameConfig.curConfigKey = this.m_comboBoxNetConfig.value;
          GameConfig.curHotUpdateAssetsKey = this.m_comboBoxAssets.value;
          game.emit('do_restart_game');
        };
        _proto.onBtnBackLogin = function onBtnBackLogin() {
          game.emit('do_restart_game');
        };
        _proto.onBtnClearHotupdateClick = function onBtnClearHotupdateClick() {
          if (sys.isNative) {
            var config = new HotUpdateConfig();
            var dir = config.getCacheDirPath();
            if (native.fileUtils.isDirectoryExist(dir)) {
              native.fileUtils.removeDirectory(dir); // 删除热更新目录
            }

            this.grootInst.showCenterTip('热更新目录已删除, 建议重启游戏');
          }
        };
        _proto.onBtnClearDownLoadClick = function onBtnClearDownLoadClick() {
          if (sys.isNative) {
            var dir = path.join(native.fileUtils.getWritablePath(), 'RemoteImageCache');
            if (native.fileUtils.isDirectoryExist(dir)) {
              native.fileUtils.removeDirectory(dir); // 删除网络图缓存
            }

            dir = path.join(native.fileUtils.getWritablePath(), 'RemoteHeadCache');
            if (native.fileUtils.isDirectoryExist(dir)) {
              native.fileUtils.removeDirectory(dir); // 删除头像图缓存
            }

            dir = path.join(native.fileUtils.getWritablePath(), 'gamecaches');
            if (native.fileUtils.isDirectoryExist(dir)) {
              native.fileUtils.removeDirectory(dir); // 删除cocos下载目录
            }

            this.grootInst.showCenterTip('网络图缓存, 头像图缓存 已删除, 建议重启游戏');
          }
        };
        _proto.onBtnClearLocalStorageClick = function onBtnClearLocalStorageClick() {
          sys.localStorage.clear();
          this.grootInst.showCenterTip('本地持久化存储的数据已删除, 建议重启游戏');
        };
        _proto.testFunction = function testFunction() {
          return new Promise(function (resolve) {
            setTimeout(resolve, 1500);
          });
        };
        _proto.testFunction2 = function testFunction2() {
          return new Promise(function (resolve) {
            setTimeout(resolve, 5000);
          });
        };
        _proto.testFunction3 = function testFunction3() {
          return new Promise(function (resolve) {
            setTimeout(resolve, 5000);
          });
        };
        _proto.testFunction4 = function testFunction4() {
          return new Promise(SafePromiseExecutor(this, function (resolve, reject) {
            setTimeout(resolve, 5000);
          }));
        };
        _proto.onBtnTestClick = function onBtnTestClick() {
          // console.time('XXTEA');
          // for (let i = 0; i < testCount; i++) {
          //     CryptoTool.XXTEA.encryptToBase64(testdata, testkey);
          // }
          // console.timeEnd('XXTEA'); // XXTEA: 1401.451904296875 ms
          // console.time('XXTEA2');
          // for (let i = 0; i < testCount; i++) {
          //     CryptoTool.XXTEA2.encryptToBase64(testdata, testkey);
          // }
          // console.timeEnd('XXTEA2'); // XXTEA2: 1029.460205078125 ms
          // let result1 = CryptoTool.XXTEA.encrypt(testdata, testkey);
          // let result2 = CryptoTool.XXTEA2.encrypt(testdata, testkey);
          // console.log(result1, result1.length);
          // console.log('-------');
          // console.log(result2, result2.length);
          // console.log(result2 === result1);
          // console.log('CryptoTool.XXTEA', CryptoTool.XXTEA.decrypt(result1, testkey));
          // console.log('CryptoTool.XXTEA2', CryptoTool.XXTEA2.decrypt(result2, testkey));
          // NativeDeviceBridge.Instance.shortVibrate(this._vibrateLevel);
          // this._vibrateLevel++;
          // if (this._vibrateLevel > 3) {
          //     this._vibrateLevel = 1;
          // }
          // LocalStorageTool.storageEncryptKey = '5d4f9sg0';
          // LocalStorageTool.setJsonWithAES('test111', { test111: true });
          // console.log(LocalStorageTool.getJsonWithAES('test111'));
          // let str = 'iaijjjja====46432><?@@$#*@#&jsf32155sdfffserdf0-3509sdf00sfdg88d00((7d(&asfsf===';
          // let key = LocalStorageTool.storageEncryptKey;
          // let a = CryptoTool.CryptoES.enc.Utf8.parse(str).toString(CryptoTool.CryptoES.enc.Base64);
          // console.log('FFFFFFFFFFF', 'a:', a);
          // let b = CryptoTool.CryptoES.enc.Base64.parse(a).toString(CryptoTool.CryptoES.enc.Utf8);
          // console.log('FFFFFFFFFFF', 'b:', b);
          // let c = CryptoTool.CryptoES.enc.Utf8.parse(str).toString(CryptoTool.CryptoES.enc.Base64url);
          // console.log('FFFFFFFFFFF', 'c:', c);
          // let d = CryptoTool.CryptoES.enc.Base64url.parse(c).toString(CryptoTool.CryptoES.enc.Utf8);
          // console.log('FFFFFFFFFFF', 'd:', d);
          // let e = CryptoTool.aesEncryptString(key, str, true);
          // console.log('FFFFFFFFFFF', 'e:', e);
          // let f = CryptoTool.aesDecryptString(key, e, true);
          // console.log('FFFFFFFFFFF', 'f:', f);
          // this.testFunction().then(() => {
          //     Log.debug.log('rrrrrrrrrrrrr')
          // // });
          // let confirmBox = ConfirmBox.create(this, 2);
          // confirmBox.setInputParams({
          //     buttonNum: 1,
          //     clickOutsideClose: false,
          //     disableCloseCancel: true,
          //     content: this.testText
          // });
          // confirmBox.addHook({
          //     onCancel: () => {
          //         console.log('fffff', 'on cancel');
          //         // on cancel click
          //     },
          //     onConfirm: () => {
          //         console.log('fffff', 'on confirm');
          //         // on confirm click
          //     }
          // });
          // confirmBox.showOn(this.grootInst);
          // this.testText += this.testText;
          // HttpLogin.LoginRequest.create(HttpLogin.ELoginType.guest, {
          //     appinfo: await NativeDeviceBridge.Instance.getAppInfo(),
          //     account: 'tim_web_test',
          //     area: await NativeDeviceBridge.Instance.getCountryCode(),
          // }).post(true).then((resp) => {
          //     if (resp) {
          //         // do something
          //     }
          // }, (reason) => {
          //     throw reason;
          // });
          // LoginData.inst.addTestNum();
          // LoginProxy.inst.startLoginProcess(HttpLogin.ELoginType.guest, 'web_text_tim');
          // this.gameDebugView.hide();
          // console.log("qwrqwerrqwerwr");
          // this.testText = this.testText + "\nafsadfasdfasfasf"
          // this.grootInst.publicLayer.showCenterTip(this.testText);
          // this.emitPageEvent(EPageEventType.SIGN_UP_SUCCESS, 'asdfa', 1, 5);
          // this.gameDebugView.callOnDestroy(() => {
          //     // import { CalendarInputParams, CalendarPage, ECalendarSelectType } from "../Public/Calendar/CalendarPage";
          //     let t = new Date();
          //     let n = new Date(t.getTime() - (60 * 60 * 24) * 60 * 1000);
          //     let f = new Date(t.getTime() + (60 * 60 * 24) * 60 * 1000);
          //     let params = new CalendarInputParams();
          //     params.minTime = n.getTime();
          //     params.maxTime = f.getTime();
          //     params.selectType = ECalendarSelectType.DateRange;
          //     params.maxCount = 7;
          //     let page = CalendarPage.create(this);
          //     page.setInputParams(params);
          //     page.addHook({
          //         onConfirm: (result) => {
          //             // on CalendarPage confirm button click
          //         }
          //     })
          //     page.showOn(this.grootInst);
          // });
          // this.grootInst.publicLayer.showCenterTip(this.testText);
          // this.testText += this.testText;
        };
        _proto.onComboBoxLanStatusChange = function onComboBoxLanStatusChange() {
          LanguageManager.language = parseInt(this.m_comboBoxLan.value);
        };
        _createClass(DebugPage1, [{
          key: "gameDebugView",
          get: function get() {
            return this.data;
          }
        }]);
        return DebugPage1;
      }(UI_DebugPage1), (_applyDecoratedDescriptor(_class2.prototype, "onBtnCopyInfoClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCopyInfoClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnCloseWebSocketClick", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCloseWebSocketClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onLoggerBtnClick", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onLoggerBtnClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBanAllLogClick", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onBanAllLogClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnFPSClick", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnFPSClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnRestartClick", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnRestartClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnBackLogin", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnBackLogin"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnClearHotupdateClick", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnClearHotupdateClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnClearDownLoadClick", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnClearDownLoadClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnClearLocalStorageClick", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnClearLocalStorageClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testFunction", [_dec11, _dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "testFunction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testFunction2", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "testFunction2"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testFunction3", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "testFunction3"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnTestClick", [_dec15, _dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnTestClick"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugPage2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_DebugPage2.ts', './CocosDevKit.ts', './PageEvent.ts', './GameDecorators.ts', './CDKDecorators.ts', './Logger.ts', './LocalStorageTool.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, Event, UI_DebugPage2, EPageEvent, CustomFguiClass, SafeTimeInterval, Log, LocalStorageTool;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      UI_DebugPage2 = module.default;
    }, null, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "f5e77MOR+lMHqzuJjWJOSVy", "DebugPage2", undefined);
      var DebugPage2 = exports('DebugPage2', (_dec = SafeTimeInterval(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_DebugPage) {
        _inheritsLoose(DebugPage2, _UI_DebugPage);
        function DebugPage2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_DebugPage.call.apply(_UI_DebugPage, [this].concat(args)) || this;
          _this._localAccountList = void 0;
          _this.selectedIndex = 0;
          return _this;
        }
        var _proto = DebugPage2.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_DebugPage.prototype.onConstruct.call(this);
          this.name = 'DebugPage2';
          this.m_accountList.setVirtual();
          this.m_accountList.itemRenderer = this.accountItemRender.bind(this);
          this.m_accountList.on(Event.CLICK_ITEM, this.onAccountListItemClick, this);
          this.m_accountList.numItems = this.localAccountList.length;
          this.m_btnLogin.onClick(this.onBtnLoginClick, this);
          this.selectItem(0);
        };
        _proto.accountItemRender = function accountItemRender(index, item) {
          item.setItem(index, this.localAccountList[index], this.onAccountListItemDeleteClick.bind(this));
          item.m_itemSelected.selectedIndex = item.itemIndex == this.selectedIndex ? 1 : 0;
        };
        _proto.onAccountListItemClick = function onAccountListItemClick(item) {
          Log.debug.log('DebugPage2', 'onAccountListItemClick', item.itemIndex);
          this.m_inputAccount.text = this.localAccountList[item.itemIndex];
          this.selectItem(item.itemIndex);
        };
        _proto.onAccountListItemDeleteClick = function onAccountListItemDeleteClick(item) {
          Log.debug.log('DebugPage2', 'onAccountListItemDeleteClick', item.itemIndex);
          var arr = this.localAccountList;
          arr.splice(item.itemIndex, 1);
          this.localAccountList = arr;
          this.m_accountList.numItems = arr.length;
        };
        _proto.onBtnLoginClick = function onBtnLoginClick() {
          var _this2 = this;
          if (this.m_inputAccount.text.length == 0) {
            return;
          }
          var arr = this.localAccountList;
          var idx = arr.indexOf(this.m_inputAccount.text);
          if (idx == -1) {
            arr.unshift(this.m_inputAccount.text);
          } else {
            arr.splice(idx, 1);
            arr.unshift(this.m_inputAccount.text);
          }
          this.localAccountList = arr;
          this.m_accountList.numItems = this.localAccountList.length;
          var account = this.m_inputAccount.text;
          this.gameDebugView.callOnDestroy(function () {
            _this2.emitPageEvent(EPageEvent.DEBUG_LOGIN, account);
          });
        };
        _proto.selectItem = function selectItem(index) {
          if (index >= this.localAccountList.length) return;
          this.selectedIndex = index;
          for (var i = 0; i < this.m_accountList._children.length; i++) {
            var item = this.m_accountList._children[i];
            item.m_itemSelected.selectedIndex = item.itemIndex == index ? 1 : 0;
          }
          this.m_inputAccount.text = this.localAccountList[index];
        };
        _createClass(DebugPage2, [{
          key: "localAccountList",
          get: function get() {
            if (!this._localAccountList) {
              this._localAccountList = LocalStorageTool.getJson('DebugLocalAccountList');
              if (!this._localAccountList) {
                this._localAccountList = [];
              }
            }
            return this._localAccountList;
          },
          set: function set(v) {
            this._localAccountList = v;
            LocalStorageTool.setJson('DebugLocalAccountList', v);
          }
        }, {
          key: "gameDebugView",
          get: function get() {
            return this.data;
          }
        }]);
        return DebugPage2;
      }(UI_DebugPage2), _applyDecoratedDescriptor(_class2.prototype, "onBtnLoginClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnLoginClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugPage3.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_DebugPage3.ts', './CocosDevKit.ts', './OnError.ts', './GameDecorators.ts', './Utils.ts', './Logger.ts', './HttpProtoBase.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Event, UI_DebugPage3, OnError, CustomFguiClass, Utils, Log, HttpError, EHttpErrorType;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      UI_DebugPage3 = module.default;
    }, null, function (module) {
      OnError = module.OnError;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      HttpError = module.HttpError;
      EHttpErrorType = module.EHttpErrorType;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "87b70iNEWVF24n4izGZqSMn", "DebugPage3", undefined);
      var DebugPage3 = exports('DebugPage3', CustomFguiClass(_class = /*#__PURE__*/function (_UI_DebugPage) {
        _inheritsLoose(DebugPage3, _UI_DebugPage);
        function DebugPage3() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_DebugPage.call.apply(_UI_DebugPage, [this].concat(args)) || this;
          _this.selectedIndex = 0;
          return _this;
        }
        var _proto = DebugPage3.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_DebugPage.prototype.onConstruct.call(this);
          this.name = 'DebugPage3';
          this.m_errorList.setVirtual();
          this.m_errorList.itemRenderer = this.errorItemRender.bind(this);
          this.m_errorList.on(Event.CLICK_ITEM, this.onErrorListItemClick, this);
          this.m_errorList.numItems = OnError.cacheList.length;
          this.m_btnUpdate.onClick(this.onBtnUpdateClick, this);
          if (OnError.cacheList.length > 0) {
            this.selectItem(0);
          }
        };
        _proto.errorItemRender = function errorItemRender(index, item) {
          var data = OnError.cacheList[index];
          var str = '';
          if (data.error) {
            str = data.error instanceof Error ? data.error.message : data.error;
          }
          item.title = Utils.formatDateWithTime(data.time) + " " + str;
          item.data = index;
          // item.setItem(index, this.localAccountList[index], this.onAccountListItemDeleteClick.bind(this));
          item.m_itemSelected.selectedIndex = index == this.selectedIndex ? 1 : 0;
        };
        _proto.onErrorListItemClick = function onErrorListItemClick(item) {
          Log.debug.log('DebugPage3', 'onErrorListItemClick', item.data);
          this.selectItem(item.data);
        };
        _proto.onBtnUpdateClick = function onBtnUpdateClick() {
          this.m_errorList.numItems = OnError.cacheList.length;
          if (OnError.cacheList.length > 0) {
            this.selectItem(0);
          }
        };
        _proto.selectItem = function selectItem(index) {
          if (index >= OnError.cacheList.length) return;
          this.selectedIndex = index;
          for (var i = 0; i < this.m_errorList._children.length; i++) {
            var item = this.m_errorList._children[i];
            item.m_itemSelected.selectedIndex = item.data == index ? 1 : 0;
          }
          var data = OnError.cacheList[index];
          var str = "" + Utils.formatDateWithTime(data.time);
          if (data.error) {
            if (data.error instanceof HttpError) {
              if (data.error.errType == EHttpErrorType.RequestFail) {
                str = str + ("\n" + data.error.errType);
              } else {
                str = str + ("\n" + data.error.errType + " errorCode: " + data.error.errCode);
              }
              str = str + ("\n" + data.error.message);
              str = str + ("\n" + data.error.stack);
            } else if (data.error instanceof Error) {
              str = str + ("\n" + data.error.message);
              str = str + ("\n" + data.error.stack);
            } else {
              str = str + ("\n" + data.error);
            }
          }
          this.m_content.title = str;
        };
        _createClass(DebugPage3, [{
          key: "gameDebugView",
          get: function get() {
            return this.data;
          }
        }]);
        return DebugPage3;
      }(UI_DebugPage3)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DeviceBridgeBase.ts", ['cc', './CocosDevKit.ts', './Logger.ts'], function (exports) {
  var cclegacy, native, Log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
    }, null, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "eb0d9641TtB/YZWctVzIDHJ", "DeviceBridgeBase", undefined);
      var DeviceBridgeBase = exports('DeviceBridgeBase', /*#__PURE__*/function () {
        function DeviceBridgeBase() {
          this._num = 0;
          this.sdkPath = '';
        }
        var _proto = DeviceBridgeBase.prototype;
        _proto.formatEvemtName = function formatEvemtName(eventName) {
          return this.sdkPath + "_" + eventName;
        };
        _proto.addNativeEventListener = function addNativeEventListener(eventName, listener) {
          var formatedName = this.formatEvemtName(eventName);
          Log.debug.log('DeviceBridgeBase', 'addNativeEventListener', formatedName);
          native.jsbBridgeWrapper.addNativeEventListener(formatedName, listener);
        };
        _proto.removeAllListenersForEvent = function removeAllListenersForEvent(eventName) {
          var formatedName = this.formatEvemtName(eventName);
          Log.debug.log('DeviceBridgeBase', 'removeAllListenersForEvent', formatedName);
          native.jsbBridgeWrapper.removeAllListenersForEvent(formatedName);
        };
        _proto.dispatchEventToNative = function dispatchEventToNative(eventName, params) {
          var formatedName = this.formatEvemtName(eventName);
          Log.debug.log('DeviceBridgeBase', 'dispatchEventToNative', formatedName, params ? params : '');
          native.jsbBridgeWrapper.dispatchEventToNative(formatedName, params);
        };
        _proto.callNativeWithPromise = function callNativeWithPromise(eventName, params) {
          var _this = this;
          if (!params) params = {};
          if (typeof params == 'string') {
            var str = params;
            params = {
              str: str
            };
          }
          if (params.returnEvent) {
            Log.debug.error('DeviceBridgeBase', 'callNativeWithPromise', '参数名称不要使用 returnEvent');
            params.returnEvent = undefined;
          }
          var returnEventName = this.formatEvemtName(eventName) + "_R" + this._num;
          if (this._num < Number.MAX_VALUE) {
            this._num++;
          } else {
            this._num = 0;
          }
          return new Promise(function (resolve) {
            _this.addNativeEventListener(returnEventName, function (arg) {
              Log.debug.log('DeviceBridgeBase', 'callNativeWithPromise, on return event:', returnEventName, ', arg:', arg ? arg : '');
              _this.removeAllListenersForEvent(returnEventName);
              resolve(arg);
            });
            if (!params) {
              params = {};
            }
            // @ts-ignore
            params.returnEvent = returnEventName;
            _this.dispatchEventToNative(eventName, JSON.stringify(params));
          });
        };
        _proto.callNative = function callNative(eventName, params) {
          if (params) {
            if (typeof params == 'string') {
              this.dispatchEventToNative(eventName, params);
            } else {
              if (params.returnEvent) {
                Log.debug.error('DeviceBridgeBase', 'callNativeWithPromise', '参数名称不要使用 returnEvent');
                params.returnEvent = undefined;
              }
              this.dispatchEventToNative(eventName, JSON.stringify(params));
            }
          } else {
            this.dispatchEventToNative(eventName);
          }
        };
        return DeviceBridgeBase;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/errorcode_config.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "697824yIjFPU7zowLDOKnjo", "errorcode_config", undefined);
      var errorcode_config = exports('default', {
        "0": ["成功", "成功", "Success", "Выполнено"],
        "1": ["伺服器調用異常報錯", "服务器调用异常报错", "Server call exception error", "Ошибка вызова сервера"],
        "2": ["操作失敗", "操作失败", "Operation Failed", "Сбой"],
        "3": ["", "", "", ""],
        "1001": ["帳號不存在", "账号不存在", "Account does not exist", "Такой аккаунт не существует"],
        "1002": ["密碼錯誤", "密码错误", "Wrong password", "Неверный пароль"],
        "1003": ["驗證碼錯誤", "验证码错误", "Verification code error", "Ошибка кода подтверждения"],
        "1004": ["驗證碼類型錯誤", "验证码类型错误", "The type of verification code is incorrect", "Некорректный тип кода подтверждения"],
        "1005": ["驗證碼過期", "验证码过期", "Verification code expired", "Срок действия кода подтверждения истек"],
        "1006": ["帳號已經存在", "账号已经存在", "Account already exists", "Такой аккаунт уже существует"],
        "1007": ["獲取驗證碼失敗", "获取验证码失败", "Failed to get verification code", "Сбой получения кода подтверждения"],
        "1008": ["修改密碼失敗", "修改密码失败", "Failed to modify password", "Сбой изменения пароля"],
        "1009": ["不是有效的手機號", "不是有效的手机号", "Not a valid mobile phone number", "Недействительный номер телефона"],
        "1010": ["Token錯誤", "Token错误", "Token error", "Ошибка токена"],
        "1011": ["Token失效", "Token失效", "Token failure", "Сбой токена"],
        "1012": ["註冊中心服出錯", "注册中心服出错", "Registry server error", "Ошибка сервера регистрации"],
        "1013": ["伺服器維護", "服务器维护", "Server maintenance", "Выполняется обслуживание сервера"],
        "1014": ["用戶名已被佔用", "用户名已被占用", "Username is already taken", "Имя пользователя уже занято"],
        "1015": ["用戶名過長", "用户名过长", "Username is too long", "Имя пользователя слишком длинное"],
        "1016": ["帳號已被封禁，請聯繫客服處理", "账号已被封禁，请联系客服处理", "The account has been banned, please contact customer service", "Аккаунт заблокирован, свяжитесь со службой поддержки"],
        "1017": ["不是有效的郵箱地址", "不是有效的邮箱地址", "Not a valid email address", "Недействительный адрес эл. почты"],
        "2001": ["沒有許可權", "没有权限", "Permission denied", "Доступ запрещен"],
        "2002": ["已經是俱樂部成員", "已经是俱乐部成员", "Already a member of the club", "Участник клуба"],
        "2003": ["不是俱樂部成員", "不是俱乐部成员", "Not a member of the club", "Нет среди участников клуба"],
        "2004": ["不在申請列表裏", "不在申请列表里", "Not in the application list", "Нет в списке заявок"],
        "2005": ["已經在申請列表裏", "已经在申请列表里", "Already in the application list", "Уже есть в списке заявок"],
        "2006": ["參數不正確", "参数不正确", "The parameter is incorrect", "Некорректный параметр"],
        "2007": ["俱樂部人數已滿", "俱乐部人数已满", "The club is full", "Клуб переполнен"],
        "2008": ["您創建的俱樂部數量已滿", "您创建的俱乐部数量已满", "The number of clubs you have created is full", "Количество созданных Вами клубов достигло максимума"],
        "2009": ["俱樂部不存在", "俱乐部不存在", "The club does not exist", "Такой клуб не существует"],
        "2010": ["管理員職位已滿", "管理员职位已满", "Administrator position is full", "Достигнуто максимальное количество позиций администратора"],
        "2011": ["設置職位不能和當前職位相同", "设置职位不能和当前职位相同", "The set position cannot be the same as the current position", "Настроенная позиция не может совпадать с текущей позицией"],
        "2012": ["俱樂部申請列表已滿", "俱乐部申请列表已满", "The club application list is full", "Список заявок клуба заполнен"],
        "2013": ["創建者無法退出俱樂部", "创建者无法退出俱乐部", "The creator cannot leave the club", "Создатель не может покинуть клуб"],
        "2014": ["玩家個人申請請求已滿", "玩家个人申请请求已满", "The player's personal application request is full", "Достигнуто максимальное количество личных заявок от игрока"],
        "2015": ["比賽數量已滿", "比赛数量已满", "The number of matches is full", "Достигнуто максимальное количество матчей"],
        "2016": ["牌局數量已滿", "牌局数量已满", "The number of tables is full", "Достигнуто максимальное количество столов"],
        "2017": ["玩家正在參與牌局", "玩家正在参与牌局", "The player is participating in the game", "Игрок участвует в игре"],
        "2018": ["玩家正在參與比賽", "玩家正在参与比赛", "The player is participating in the game", "Игрок участвует в игре"],
        "2019": ["俱樂部名已被佔用", "俱乐部名已被占用", "Club name has been taken", "Имя клуба занято"],
        "2020": ["門票已失效", "门票已失效", "Ticket has expired", "Время действия билета истекло"],
        "2021": ["玩家不是代理", "玩家不是代理", "The player is not an agent", "Игрок не является агентом"],
        "2022": ["邀請id錯誤", "邀请id错误", "Wrong invitation id", "Неверный ID приглашения"],
        "2023": ["鑽石不足可以去商店購買更多。", "钻石不足可以去商店购买更多。", "Insufficient diamonds go to the store to purchase more.", "Недостаточно бриллиантов. Перейдите в магазин для покупки."],
        "2024": ["櫃檯籌碼不足", "柜台筹码不足", "Insufficient chips at the counter", "Недостаточно фишек на каунтере"],
        "2025": ["俱樂部籌碼不足", "俱乐部筹码不足", "Insufficient Chips", "Недостаточно фишек"],
        "2026": ["申請已失效", "申请已失效", "Application has expired", "Время действия заявки истекло"],
        "2027": ["小於當前星級", "小于当前星级", "Less than the current level", "Меньше текущего уровня"],
        "2028": ["已經有上線", "已经有上线", "Already online", "Уже онлайн"],
        "2029": ["俱樂部等級已過期，請重新購買", "俱乐部等级已过期，请重新购买", "Club expired，please purchase again", "Срок действия клуба истек, выполните повторную покупку"],
        "2030": ["範本數量已滿", "模板数量已满", "You can only save up to 500 templates", "Можно сохранить максимум 500 шаблонов"],
        "2031": ["密碼錯誤", "密码错误", "Incorrect Password", "Некорректный пароль"],
        "2032": ["籌碼申請已拒絕", "筹码申请已拒绝", "Chip/Credit application has been rejected", "Заявка на фишку/кредит отклонена"],
        "2037": ["您現在無法進入俱樂部，請聯繫官方郵箱瞭解更多資訊，郵箱地址：support@87poker.co", "您现在无法进入俱乐部，请联系官方邮箱了解更多信息，邮箱地址：support@87poker.co", "You can't enter the club now, please contact the official email for more info, email address: support@87poker.co", "Вы сейчас не можете войти в клуб. Подробную информацию можно узнать по официальной эл. почте support@87poker.co."],
        "2039": ["您只能在關閉所有Jackpot牌桌後才能編輯Jackpot。", "您只能在关闭所有Jackpot牌桌后才能编辑Jackpot。", "You can only edit jackpot after all the jackpot tables are turned off. ", "Изменить джекпот можно только после закрытия всех столов с джекпотом."],
        "2040": ["設置失敗，該用戶下線代理設置了服務費返還比例", "设置失败，该用户下线代理设置了服务费返还比例", "Setup failed, this Super Agent's downline Agent has set up Fee Return Percentage;", "Сбой настройки. Агент даунлайна этого Суперагента настроил процент возврата сбора."],
        "2041": ["設置失敗，該用戶上線超級代理設置了服務費返還比例", "设置失败，该用户上线超级代理设置了服务费返还比例", "Setup failed, this Agent's upline Super Agent has set up Fee Return Percentage.", "Сбой настройки. Суперагент аплайна этого Агента настроил процент возврата сбора."],
        "2044": ["參與戰隊賽期間，不能退出俱樂部", "参与战队赛期间，不能退出俱乐部", "During Team Match, cannot quit Club.", "Нельзя выходить из клуба во время участия в командных соревнованиях"],
        "3001": ["已經登錄，不用再登錄了", "已经登录，不用再登录了", "Already logged in, no need to log in again", "Выполнен вход, повторный вход не нужен"],
        "3002": ["鑽石不足", "钻石不足", "Not enough Diamonds, please purchase more in SHOP", "Недостаточно бриллиантов, купите в МАГАЗИНЕ."],
        "3003": ["參數錯誤", "参数错误", "Parameter error", "Ошибка параметра"],
        "3004": ["異地登錄", "异地登录", "Remote login", "Дистанционный вход"],
        "3005": ["被踢", "被踢", "The Club Manager did not permit you to enter this table.", "Менеджер клуба не разрешил вам присоединиться к столу."],
        "5002": ["牌局結束", "牌局结束", "End of hand", "Конец руки"],
        "5003": ["只能房主操作", "只能房主操作", "Can only be operated by the account owner", "Может управляться только владельцем аккаунта"],
        "5004": ["位置上已經有玩家", "位置上已经有玩家", "There is already a player in the position", "На позиции уже есть игрок"],
        "5005": ["遊戲中，無法站起", "游戏中，无法站起", "Can't stand up during the game", "Во время игра нельзя вставать"],
        "5006": ["沒有在位置上", "没有在位置上", "Not in position", "Не в позиции"],
        "5007": ["牌局不存在", "牌局不存在", "Hand does not exist", "Такая рука не существует"],
        "5008": ["桌子不存在", "桌子不存在", "Table does not exist", "Такой стол не существует"],
        "5009": ["等待其他玩家動作", "等待其他玩家动作", "", ""],
        "5010": ["籌碼不足", "筹码不足", "Insufficient balance to buy in", "Недостаточно средств для бай-ина"],
        "5011": ["房間不能進入", "房间不能进入", "Cannot enter the room", "Невозможно войти в комнату"],
        "5012": ["請求不存在", "请求不存在", "Request does not exist", "Такой запрос не существует"],
        "5013": ["請勿重複申請", "请勿重复申请", "Please do not apply again", "Не отправляйте заявку повторно"],
        "5014": ["帶入籌碼超過最大帶入上限", "带入筹码超过最大带入上限", "Chips brought in exceed the maximum limit", "Количество внесенных фишек превышает максимум"],
        "5015": ["沒有這個牌局 收藏失敗", "没有这个牌局 收藏失败", "Without this card game, collection failed", "Без этой карточной игры произошел сбой коллекции"],
        "5016": ["非俱樂部成員，不能進入", "非俱乐部成员，不能进入", "Non-members of the club cannot enter", "Неучастники клуба не могут войти"],
        "5017": ["暫時不能旁觀，該玩家未上桌", "暂时不能旁观，该玩家未上桌", "Temporarily unable to watch, the player is not at the table", "Просмотр временно недоступен, игрок не за столом"],
        "5018": ["收藏數已滿", "收藏数已满", "Collections are full", "Коллекции переполнены"],
        "5019": ["系統檢測到您與牌桌另一位玩家IP和GPS相近，請另找牌桌遊戲", "系统检测到您与牌桌另一位玩家IP和GPS相近，请另找牌桌游戏", "The system detects that you and another player at the table have similar IP and GPS, please find another table game", "Система обнаружена, что Ваши IP-адрес и GPS и другого игрока за столом совпадают, выберите другой игровой стол"],
        "5020": ["系統檢測到您與牌桌另一位玩家IP相同，請另找牌桌遊戲", "系统检测到您与牌桌另一位玩家IP相同，请另找牌桌游戏", "The system detects that you have the same IP as another player at the table, please find another table", "Система обнаружила, что Ваш IP-адрес совпадает с IP-адресом другого игрока за столом, выберите другой стол"],
        "5021": ["系統檢測到您與牌桌另一位玩家GPS相近，請另找牌桌遊戲", "系统检测到您与牌桌另一位玩家GPS相近，请另找牌桌游戏", "The system detects that you are close to the GPS of another player at the table, please find another table", "Система обнаружила, что Вы находитесь близко к GPS другого игрока за столом, выберите другой стол"],
        "5022": ["為了維護遊戲公平，請另選牌桌遊戲", "为了维护游戏公平，请另选牌桌游戏", "In order to maintain the fairness of the game, please choose another table", "Чтобы игра была честной, выберите другой стол"],
        "5023": ["您的帳號有衝突，請稍後重試", "您的账号有冲突，请稍后重试", "Account conflict, please try again later", "Конфликт аккаунтов, повторите попытку позже"],
        "5024": ["本手牌局延時次數已用完", "本手牌局延时次数已用完", "The number of delays in this hand has run out", "Доступное количество задержек для руки израсходовано"],
        "5025": ["每個牌桌只能舉報一次，您可以通過客服回饋", "每个牌桌只能举报一次，您可以通过客服反馈", "Each table can only be reported once, you can give feedback through customer service", "Для каждого стола можно отправить только один комментарий, отзыв можно оставить через службу поддержки"],
        "5026": ["不能操作", "不能操作", "Cannot operate", "Действие недоступно"],
        "5027": ["", "", "", ""],
        "5028": ["", "", "", ""],
        "5029": ["", "", "", ""],
        "5030": ["已經設置過了", "已经设置过了", "Already set", "Уже настроено"],
        "5031": ["密碼錯誤", "密码错误", "Wrong password", "Неверный пароль"],
        "5035": ["禁止進入房間", "禁止进入房间", "{text=[[You have been suspended from joining tables by your host]],type=\"center\"}", "{text=[[Распорядитель запретил Вам присоединяться к столам]],type=\"center\"}"],
        "5036": ["玩牌許可權被禁止", "玩牌权限被禁止", "{text=[[You are not available to play at the table,please contact the club administrator]],type=\"center\"}", "{text=[[Вы не можете играть за столом, свяжитесь с администратором клуба]],type=\"center\"}"],
        "5040": ["已達到限額，無法參與遊戲，請聯繫管理員", "已达到限额，无法参与游戏，请联系管理员", "The limit has been reached and cannot participate in the game, please contact the Manager", "Достигнут лимит, невозможно принять участие в игре, свяжитесь с менеджером"],
        "5041": ["您的帳號已經在另一個俱樂部加入遊戲", "您的账号已经在另一个俱乐部加入游戏", "You already have an account in another club to join the game", "У Вас уже есть аккаунт в другом клубе для участия в игре"],
        "5042": ["房間人數已滿", "房间人数已满", "The room is full.", "Комната заполнена"],
        "5043": ["牌局已結束", "牌局已结束", "This game has ended", "Игра закончилась"],
        "5044": ["當前牌桌等待人數已滿", "当前牌桌等待人数已满", "Max waiting member reached", "В очереди на текущий стол нет мест"],
        "5045": ["剩餘 2 名以上玩家時無法解散", "剩余 2 名以上玩家时无法解散", "Cannot disband with 2+ remaining players", "Нельзя распустить, если осталось больше 2 игроков"],
        "5046": ["更多玩家加入後將啟動“切換牌桌”", "更多玩家加入后将激活“切换牌桌”", "'Switch Table' will be activated after more players join", "\"Переключение столов\" будет активировано, когда к нему присоединится большее количество игроков"],
        "5048": ["每個牌桌只能舉報五次，您可以通過客服回饋", "每个牌桌只能举报五次，您可以通过客服反馈", "Each table can only be reported five times, you can give feedback through customer service", "Каждый стол может отчитаться только пять раз, обратную связь можно получить через службу поддержки."],
        "5051": ["本手牌結束後將站起", "本手牌结束后将站起", "You'll stand up when this hand ends", "Вы встанете из-за стола после текущей раздачи"],
        "5053": ["請在當前手牌結束後離開", "请在当前手牌结束后离开", "Please remain seated till this hand ends", "Дождитесь конца раздачи"],
        "5054": ["房間人數已滿", "房间人数已满", "The room is full.", "Комната заполнена"],
        "5055": ["您一次最多只能投注 3 種顏色", "您一次最多只能投注 3 种颜色", "You may only bet on 3 colors max. each round", "В каждом раунде можно поставить не более чем на 3 цвета"],
        "5056": ["您的帶入金額小於投注選項，無法投注", "您的带入金额小于投注选项，无法投注", "Insufficient Club Chips to bet", "Ваша сумма, которую Вы внесли, меньше, чем варианты ставок, и Вы не можете сделать ставку!"],
        "6001": ["比賽不存在", "比赛不存在", "The match does not exist", "Такой матч не существует"],
        "6002": ["報名入口已關閉", "报名入口已关闭", "Enrollment entry is closed", "Прием закрыт"],
        "6003": ["重複申請", "重复申请", "Repeat application", "Повторно отправить заявку"],
        "6004": ["已經報名成功", "已经报名成功", "Registered successfully", "Регистрация выполнена"],
        "6005": ["已達到人數上限", "已达到人数上限", "Exceeds the maximum number of players", "Превышен макс. игроков"],
        "6006": ["參數錯誤", "参数错误", "Parameter error", "Ошибка параметра"],
        "6007": ["沒有許可權", "没有权限", "Permission denied", "Доступ запрещен"],
        "6008": ["非法操作，玩家未申請", "非法操作，玩家未申请", "Illegal operation, the player did not apply", "Незаконное действие, игрок не подавал заявку"],
        "6009": ["籌碼不足", "筹码不足", "Insufficient balance to buy in", "Недостаточный баланс для покупки"],
        "6010": ["無法重購", "无法重购", "Cannot repurchase", "Невозможно повторить покупку"],
        "6011": ["重購過期失效", "重购过期失效", "Repurchase expired", "Срок повторной покупки истек"],
        "6012": ["獎勵圈不能報名不能重購", "奖励圈不能报名不能重购", "Money circle cannot register and cannot repurchase", "Невозможно зарегистрировать денежный круг и выполнить повторную покупку"],
        "6013": ["比賽開始不能退賽", "比赛开始不能退赛", "Cannot retire at the start of the game", "Невозможно выйти в начале игры"],
        "6014": ["已超過重購時間", "已超过重购时间", "Repurchase time has passed", "Время повторной покупки прошло"],
        "6015": ["比賽已結束", "比赛已结束", "The match is over", "Матч завершен"],
        "6016": ["您的籌碼大於初始籌碼，無法進行重購", "您的筹码大于初始筹码，无法进行重购", "Cannot be added when the chips is larger than the Starting Chips", "Невозможно добавить, когда фишки больше, чем Стартовые фишки"],
        "6017": ["您的重購次數已用完，無法進行重購", "您的重购次数已用完，无法进行重购", "Your number of repurchases has been used up and you cannot make a repurchase", "Доступное количество повторных покупок использовано, повторная покупка невозможна"],
        "6018": ["不能修改時間", "不能修改时间", "Time cannot be changed now", "Сейчас невозможно изменить время"],
        "6019": ["時間設置錯誤", "时间设置错误", "Time cannot be changed now", "Сейчас невозможно изменить время"],
        "6020": ["還未選擇門票", "还未选择门票", "No tickets selected", "Билеты не выбраны"],
        "6021": ["不能重複addon", "不能重复addon", "Can't repeat addon", "Нельзя повторить адд-он"],
        "6022": ["比賽已開始，不能解散", "比赛已开始，不能解散", "Tournament has started and cannot be disbanded", "Турнир начался, его нельзя распустить"],
        "6023": ["只有指定俱樂部用戶才能報名", "只有指定俱乐部用户才能报名", "Only designated club members can register", "Зарегистрироваться могут только пользователи указанного клуба"],
        "6024": ["錯誤。請重新加入牌桌。", "错误。请重新加入牌桌。", "Error. Please rejoin the table.", "Ошибка. Присоединитесь к столу снова."],
        "6025": ["無法參賽，該場比賽存在相同ip的用戶", "无法参赛，该场比赛存在相同ip的用户", "Unable to participate in the competition due to same IP address users", "Я не могу принять участие в соревновании из-за наличия пользователей с одинаковым IP-адресом."],
        "7001": ["已申請", "已申请", "Already applied", "Заявка уже отправлена"],
        "7002": ["參數不正確", "参数不正确", "The parameter is incorrect", "Некорректный параметр"],
        "7003": ["消息不存在", "消息不存在", "Message does not exist", "Такое сообщение не существует"],
        "7004": ["已經是已讀狀態", "已经是已读状态", "Already read", "Прочитано"],
        "8003": ["", "操作过于频繁，请稍后再试", "Operating too frequently", ""],
        "9001": ["網路異常", "网络异常", "Network anomaly", "Ошибка сети"],
        "9002": ["商品不存在", "商品不存在", "Product does not exist", "Такой продукт не существует"],
        "9003": ["籌碼不足", "筹码不足", "Please contact the administrator to send the chips to yourself", "Свяжитесь с администратором, чтобы отправить себе фишки"],
        "9004": ["此啟動碼不能在該俱樂部使用，請聯繫客服", "此激活码不能在该俱乐部使用，请联系客服", "This activation code cannot be used in the club, please contact customer service", "Этот код активации нельзя использовать в клубе, свяжитесь со службой поддержки"],
        "9006": ["當前獎品發生變化，請刷新介面再購買", "当前奖品发生变化，请刷新界面再购买", "The current prize has changed, please refresh the interface to purchase", "Текущий приз изменился, обновите интерфейс, чтобы совершить покупку"],
        "9007": ["提款金額需要大於或等於10", "提款金额需要大于或等于10", "The withdrawal amount needs to be greater than or equal to 10", "Сумма снятия должна быть больше или равна 10"],
        "9008": ["您所輸入的金額有誤，請重新輸入", "您所输入的金额有误，请重新输入", "The amount you entered is incorrect, please re-enter", "Введена некорректная сумма, повторите"],
        "9009": ["當前商城配置發生變化，請刷新介面", "当前商城配置发生变化，请刷新界面", "The current mall configuration has changed, please refresh the interface", "Конфигурация текущего магазина изменилась, обновите интерфейс"],
        "9010": ["無效商品", "无效商品", "Invalid product", "Недействительный продукт"],
        "9011": ["您暫時沒有加入該俱樂部", "您暂时没有加入该俱乐部", "You have not joined the club temporarily", "Вы не вступили в клуб временно"],
        "9012": ["購買等級低於VIP等級", "购买等级低于VIP等级", "The purchased level is less than the VIP level", "Купленный уровень ниже уровня VIP"],
        "10001": ["俱樂部等級不夠", "俱乐部等级不够", "Not enough club level", "Недостаточный уровень клуба"],
        "10002": ["當前俱樂部有未結束的牌桌，不能解散", "当前俱乐部有未结束的牌桌，不能解散", "Operation failed as tables are running in the club", "Текущий клуб имеет незаконченные столы и не может быть распущен"],
        "10003": ["已經加入過聯盟", "已经加入过联盟", "Already joined the union", "Уже присоединились к союзу"],
        "10004": ["創建俱樂部重名", "创建俱乐部重名", "Duplicate Union name", "Повторяющееся имя союза"],
        "10005": ["已經是聯盟成員", "已经是联盟成员", "Already a member of the union", "Уже являетесь участником союза"],
        "10006": ["沒有許可權", "没有权限", "Permission denied", "Доступ запрещен"],
        "10007": ["參數錯誤", "参数错误", "Parameter error", "Ошибка параметра"],
        "10008": ["已經在申請列表中", "已经在申请列表中", "Already on the application list", "Уже есть в списке заявок"],
        "10009": ["創建者不能退出聯盟", "创建者不能退出联盟", "The creator cannot quit the union", "Создатель не может покинуть союз"],
        "10010": ["不是聯盟成員", "不是联盟成员", "Not a member of the alliance", "Нет среди участников альянса"],
        "10011": ["獲取鑽石配置失敗", "获取钻石配置失败", "Failed to get diamond configuration", "Сбой получения конфигурации бриллиантов"],
        "10012": ["鑽石不足", "钻石不足", "Not enough diamonds", "Недостаточно бриллиантов"],
        "10013": ["聯盟不存在", "联盟不存在", "The Union does not exist", "Такой союз не существует"],
        "10015": ["俱樂部有牌桌運行，需要等待用戶參與的當前手牌結束，無法退出", "俱乐部有牌桌运行，需要等待用户参与的当前手牌结束，无法退出", "Club has tables running，you need to wait for the end of the current hand of the ring game in which the user participates，unable to exit", "В клубе работают столы, необходимо дождаться окончания текущей руки на столе, в которой принимает участие пользователь, невозможно выйти"],
        "10016": ["聯盟俱樂部已超出限制", "联盟俱乐部已超出限制", "Union club has exceeded the limit", "Количество клубов в союзе превысило максимум"],
        "10017": ["俱樂部有牌桌運行，需要等待之前已經開始的MTT結束，無法退出", "俱乐部有牌桌运行，需要等待之前已经开始的MTT结束，无法退出", "Club has tables running，you need to wait for the end of the MTT that has started before ，unable to exit", "В клубе работают столы, необходимо дождаться окончания начатой ранее многостоловой игры, невозможно выйти"],
        "10018": ["活動範本到達上限", "活动模板到达上限", "Template overrun", "Наложение шаблона"],
        "10019": ["俱樂部籌碼不足，無法創建活動", "俱乐部筹码不足，无法创建活动", "Insufficient Club Chips to create event", "Недостаточно клубных фишек для создания события"],
        "10020": ["如果有活動，聯盟不能被解散", "如果有活动，联盟不能被解散", "The Union cannot be disbanded if there is an event", "Невозможно распустить союз при наличии события"],
        "10021": ["\n俱樂部暫時無法加入聯盟，請聯繫官方郵箱瞭解更多資訊，郵箱地址：support@87poker.co", "\n俱乐部暂时无法加入联盟，请联系官方邮箱了解更多信息，邮箱地址：support@87poker.co", "The club can't join a union for now, please contact the official email for more info, email address: support@87poker.co", "Клуб пока не может вступить в союз. Подробную информацию можно узнать по официальной эл. почте support@87poker.co."],
        "10022": ["抱歉，您的俱樂部不能加入這個聯盟。 請聯繫 87 Poker 瞭解更多資訊。", "抱歉，您的俱乐部不能加入这个联盟。 请联系 87 Poker 了解更多信息。", "Sorry, your club can not join this Union. Please contact 87 Poker for more information.", "К сожалению, Ваш клуб не может вступить в этот союз. Для получения подробной информации свяжитесь с 87 Poker."],
        "10026": ["有成員還在戰隊賽中，不能退出聯盟", "有成员还在战队赛中，不能退出联盟", "Some members are still in the Team Match, cannot quit Union.", "Участник не может выйти из альянса, оставаясь в командном соревновании"],
        "10027": ["您的俱樂部已被暫停，請聯繫聯盟瞭解更多資訊。", "您的俱乐部已被暂停，请联系联盟了解更多信息。", "Your club has been suspended, please contact the union for more information.", "Ваш клуб был приостановлен, пожалуйста, свяжитесь с Союзом для получения дополнительной информации."],
        "10029": ["請您選擇遊戲類型和盲注級別", "请您选择游戏类型和盲注级别", "Please select your game type and blinds.", "Пожалуйста, выберите тип игры и уровень слепого"],
        "11001": ["已經領取過該獎勵", "已经领取过该奖励", "Reward has been collected", "Данная награда уже получена"],
        "13002": ["請勿重複申請", "请勿重复申请", "Please do not apply again", "Не отправляйте заявку повторно"],
        "13004": ["參與的俱樂部已滿", "参与的俱乐部已满", "Participating in Clubs are at the max.", "Клубы-участники заполнены"]
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventReporter.ts", ['cc', './MixPanelBridge.ts', './GameConfig.ts', './GameConst.ts'], function (exports) {
  var cclegacy, EventTarget, MixPanelBridge, GameConfig, GameConst;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      EventTarget = module.EventTarget;
    }, function (module) {
      MixPanelBridge = module.MixPanelBridge;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      exports('EventReporter', void 0);
      cclegacy._RF.push({}, "a540cn86cNL84g0Rj8sfqz0", "EventReporter", undefined);
      var EventReporter;
      (function (_EventReporter) {
        var Event;
        (function (_Event) {
          var mixpanel = /*#__PURE__*/function (mixpanel) {
            mixpanel["LOGIN"] = "LOGIN";
            mixpanel["NORMAL_BUY_IN"] = "NORMAL_BUY_IN";
            mixpanel["DAILY_LOGIN_REWARDS_STATE_CHANGE"] = "DAILY_LOGIN_REWARDS_STATE_CHANGE";
            mixpanel["TASK_REWARDS_STATE_CHANGE"] = "TASK_REWARDS_STATE_CHANGE";
            mixpanel["BANNER_CLICK"] = "BANNER_CLICK";
            mixpanel["ENTER_ROOM"] = "ENTER_ROOM";
            mixpanel["OPEN_PAGE"] = "OPEN_PAGE";
            mixpanel["TGP_CLICK"] = "TGP_CLICK";
            mixpanel["TASK_ENTER_BTN_CLICK"] = "TASK_ENTER_BTN_CLICK";
            mixpanel["PASSIVE_AWARD_SEND"] = "PASSIVE_AWARD_SEND";
            return mixpanel;
          }({});
          _Event.mixpanel = mixpanel;
        })(Event || (Event = _EventReporter.Event || (_EventReporter.Event = {})));
        var ReportEventTarget = _EventReporter.ReportEventTarget = new EventTarget();
        function init() {
          if (GameConfig.bundleName != GameConst.EBundleName.TGPoker) return;
          MixPanelBridge.Instance.init();
        }
        _EventReporter.init = init;
        function setPlayer(playerID, nick) {
          if (GameConfig.bundleName != GameConst.EBundleName.TGPoker) return;
          MixPanelBridge.Instance.setPlayer(playerID, nick);
        }
        _EventReporter.setPlayer = setPlayer;
        function emit(event_name, data) {
          if (GameConfig.bundleName != GameConst.EBundleName.TGPoker) return;
          ReportEventTarget.emit(event_name, data);
        }
        _EventReporter.emit = emit;
      })(EventReporter || (EventReporter = exports('EventReporter', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fairygui.mjs", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, _assertThisInitialized, cclegacy, gfx, Event$1, Vec2, Color, Layers, resources, Font, Size, screen, view, Tween, Rect, Vec3, misc, Sprite, assetManager, Texture2D, SpriteFrame, BitmapFont, sp, dragonBones, ImageAsset, AudioClip, Label, RichText, Node, UITransform, Mask, math, director, game, isValid, sys, View, v2, AudioSourceComponent, EditBox, Overflow, Asset, EventMouse, UIOpacity, Component, Graphics, path, BufferAsset, AssetManager, SpriteAtlas, EventTarget, UIRenderer;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      gfx = module.gfx;
      Event$1 = module.Event;
      Vec2 = module.Vec2;
      Color = module.Color;
      Layers = module.Layers;
      resources = module.resources;
      Font = module.Font;
      Size = module.Size;
      screen = module.screen;
      view = module.view;
      Tween = module.Tween;
      Rect = module.Rect;
      Vec3 = module.Vec3;
      misc = module.misc;
      Sprite = module.Sprite;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      BitmapFont = module.BitmapFont;
      sp = module.sp;
      dragonBones = module.dragonBones;
      ImageAsset = module.ImageAsset;
      AudioClip = module.AudioClip;
      Label = module.Label;
      RichText = module.RichText;
      Node = module.Node;
      UITransform = module.UITransform;
      Mask = module.Mask;
      math = module.math;
      director = module.director;
      game = module.game;
      isValid = module.isValid;
      sys = module.sys;
      View = module.View;
      v2 = module.v2;
      AudioSourceComponent = module.AudioSourceComponent;
      EditBox = module.EditBox;
      Overflow = module.Overflow;
      Asset = module.Asset;
      EventMouse = module.EventMouse;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
      Graphics = module.Graphics;
      path = module.path;
      BufferAsset = module.BufferAsset;
      AssetManager = module.AssetManager;
      SpriteAtlas = module.SpriteAtlas;
      EventTarget = module.EventTarget;
      UIRenderer = module.UIRenderer;
    }],
    execute: function () {
      exports({
        AlignType: void 0,
        AutoSizeType: void 0,
        BlendMode: void 0,
        ButtonMode: void 0,
        ChildrenRenderOrder: void 0,
        EaseType: void 0,
        FillMethod: void 0,
        FillOrigin: void 0,
        FlipType: void 0,
        GroupLayoutType: void 0,
        ListLayoutType: void 0,
        ListSelectionMode: void 0,
        LoaderFillType: void 0,
        ObjectPropID: void 0,
        ObjectType: void 0,
        OverflowType: void 0,
        PackageItemType: void 0,
        PopupDirection: void 0,
        ProgressTitleType: void 0,
        RelationType: void 0,
        ScrollBarDisplayType: void 0,
        ScrollType: void 0,
        VertAlignType: void 0,
        getFontByName: getFontByName,
        registerFont: registerFont,
        updateScaler: updateScaler
      });
      var _ItemTypeToAssetType;
      cclegacy._RF.push({}, "1d82enbixFHhKyvR7gNG9JB", "fairygui", undefined);
      var ButtonMode;
      (function (ButtonMode) {
        ButtonMode[ButtonMode["Common"] = 0] = "Common";
        ButtonMode[ButtonMode["Check"] = 1] = "Check";
        ButtonMode[ButtonMode["Radio"] = 2] = "Radio";
      })(ButtonMode || (ButtonMode = exports('ButtonMode', {})));
      var AutoSizeType;
      (function (AutoSizeType) {
        AutoSizeType[AutoSizeType["None"] = 0] = "None";
        AutoSizeType[AutoSizeType["Both"] = 1] = "Both";
        AutoSizeType[AutoSizeType["Height"] = 2] = "Height";
        AutoSizeType[AutoSizeType["Shrink"] = 3] = "Shrink";
      })(AutoSizeType || (AutoSizeType = exports('AutoSizeType', {})));
      var AlignType;
      (function (AlignType) {
        AlignType[AlignType["Left"] = 0] = "Left";
        AlignType[AlignType["Center"] = 1] = "Center";
        AlignType[AlignType["Right"] = 2] = "Right";
      })(AlignType || (AlignType = exports('AlignType', {})));
      var VertAlignType;
      (function (VertAlignType) {
        VertAlignType[VertAlignType["Top"] = 0] = "Top";
        VertAlignType[VertAlignType["Middle"] = 1] = "Middle";
        VertAlignType[VertAlignType["Bottom"] = 2] = "Bottom";
      })(VertAlignType || (VertAlignType = exports('VertAlignType', {})));
      var LoaderFillType;
      (function (LoaderFillType) {
        LoaderFillType[LoaderFillType["None"] = 0] = "None";
        LoaderFillType[LoaderFillType["Scale"] = 1] = "Scale";
        LoaderFillType[LoaderFillType["ScaleMatchHeight"] = 2] = "ScaleMatchHeight";
        LoaderFillType[LoaderFillType["ScaleMatchWidth"] = 3] = "ScaleMatchWidth";
        LoaderFillType[LoaderFillType["ScaleFree"] = 4] = "ScaleFree";
        LoaderFillType[LoaderFillType["ScaleNoBorder"] = 5] = "ScaleNoBorder";
      })(LoaderFillType || (LoaderFillType = exports('LoaderFillType', {})));
      var ListLayoutType;
      (function (ListLayoutType) {
        ListLayoutType[ListLayoutType["SingleColumn"] = 0] = "SingleColumn";
        ListLayoutType[ListLayoutType["SingleRow"] = 1] = "SingleRow";
        ListLayoutType[ListLayoutType["FlowHorizontal"] = 2] = "FlowHorizontal";
        ListLayoutType[ListLayoutType["FlowVertical"] = 3] = "FlowVertical";
        ListLayoutType[ListLayoutType["Pagination"] = 4] = "Pagination";
      })(ListLayoutType || (ListLayoutType = exports('ListLayoutType', {})));
      var ListSelectionMode;
      (function (ListSelectionMode) {
        ListSelectionMode[ListSelectionMode["Single"] = 0] = "Single";
        ListSelectionMode[ListSelectionMode["Multiple"] = 1] = "Multiple";
        ListSelectionMode[ListSelectionMode["Multiple_SingleClick"] = 2] = "Multiple_SingleClick";
        ListSelectionMode[ListSelectionMode["None"] = 3] = "None";
      })(ListSelectionMode || (ListSelectionMode = exports('ListSelectionMode', {})));
      var OverflowType;
      (function (OverflowType) {
        OverflowType[OverflowType["Visible"] = 0] = "Visible";
        OverflowType[OverflowType["Hidden"] = 1] = "Hidden";
        OverflowType[OverflowType["Scroll"] = 2] = "Scroll";
      })(OverflowType || (OverflowType = exports('OverflowType', {})));
      var PackageItemType;
      (function (PackageItemType) {
        PackageItemType[PackageItemType["Image"] = 0] = "Image";
        PackageItemType[PackageItemType["MovieClip"] = 1] = "MovieClip";
        PackageItemType[PackageItemType["Sound"] = 2] = "Sound";
        PackageItemType[PackageItemType["Component"] = 3] = "Component";
        PackageItemType[PackageItemType["Atlas"] = 4] = "Atlas";
        PackageItemType[PackageItemType["Font"] = 5] = "Font";
        PackageItemType[PackageItemType["Swf"] = 6] = "Swf";
        PackageItemType[PackageItemType["Misc"] = 7] = "Misc";
        PackageItemType[PackageItemType["Unknown"] = 8] = "Unknown";
        PackageItemType[PackageItemType["Spine"] = 9] = "Spine";
        PackageItemType[PackageItemType["DragonBones"] = 10] = "DragonBones";
      })(PackageItemType || (PackageItemType = exports('PackageItemType', {})));
      var ObjectType;
      (function (ObjectType) {
        ObjectType[ObjectType["Image"] = 0] = "Image";
        ObjectType[ObjectType["MovieClip"] = 1] = "MovieClip";
        ObjectType[ObjectType["Swf"] = 2] = "Swf";
        ObjectType[ObjectType["Graph"] = 3] = "Graph";
        ObjectType[ObjectType["Loader"] = 4] = "Loader";
        ObjectType[ObjectType["Group"] = 5] = "Group";
        ObjectType[ObjectType["Text"] = 6] = "Text";
        ObjectType[ObjectType["RichText"] = 7] = "RichText";
        ObjectType[ObjectType["InputText"] = 8] = "InputText";
        ObjectType[ObjectType["Component"] = 9] = "Component";
        ObjectType[ObjectType["List"] = 10] = "List";
        ObjectType[ObjectType["Label"] = 11] = "Label";
        ObjectType[ObjectType["Button"] = 12] = "Button";
        ObjectType[ObjectType["ComboBox"] = 13] = "ComboBox";
        ObjectType[ObjectType["ProgressBar"] = 14] = "ProgressBar";
        ObjectType[ObjectType["Slider"] = 15] = "Slider";
        ObjectType[ObjectType["ScrollBar"] = 16] = "ScrollBar";
        ObjectType[ObjectType["Tree"] = 17] = "Tree";
        ObjectType[ObjectType["Loader3D"] = 18] = "Loader3D";
      })(ObjectType || (ObjectType = exports('ObjectType', {})));
      var ProgressTitleType;
      (function (ProgressTitleType) {
        ProgressTitleType[ProgressTitleType["Percent"] = 0] = "Percent";
        ProgressTitleType[ProgressTitleType["ValueAndMax"] = 1] = "ValueAndMax";
        ProgressTitleType[ProgressTitleType["Value"] = 2] = "Value";
        ProgressTitleType[ProgressTitleType["Max"] = 3] = "Max";
      })(ProgressTitleType || (ProgressTitleType = exports('ProgressTitleType', {})));
      var ScrollBarDisplayType;
      (function (ScrollBarDisplayType) {
        ScrollBarDisplayType[ScrollBarDisplayType["Default"] = 0] = "Default";
        ScrollBarDisplayType[ScrollBarDisplayType["Visible"] = 1] = "Visible";
        ScrollBarDisplayType[ScrollBarDisplayType["Auto"] = 2] = "Auto";
        ScrollBarDisplayType[ScrollBarDisplayType["Hidden"] = 3] = "Hidden";
      })(ScrollBarDisplayType || (ScrollBarDisplayType = exports('ScrollBarDisplayType', {})));
      var ScrollType;
      (function (ScrollType) {
        ScrollType[ScrollType["Horizontal"] = 0] = "Horizontal";
        ScrollType[ScrollType["Vertical"] = 1] = "Vertical";
        ScrollType[ScrollType["Both"] = 2] = "Both";
      })(ScrollType || (ScrollType = exports('ScrollType', {})));
      var FlipType;
      (function (FlipType) {
        FlipType[FlipType["None"] = 0] = "None";
        FlipType[FlipType["Horizontal"] = 1] = "Horizontal";
        FlipType[FlipType["Vertical"] = 2] = "Vertical";
        FlipType[FlipType["Both"] = 3] = "Both";
      })(FlipType || (FlipType = exports('FlipType', {})));
      var ChildrenRenderOrder;
      (function (ChildrenRenderOrder) {
        ChildrenRenderOrder[ChildrenRenderOrder["Ascent"] = 0] = "Ascent";
        ChildrenRenderOrder[ChildrenRenderOrder["Descent"] = 1] = "Descent";
        ChildrenRenderOrder[ChildrenRenderOrder["Arch"] = 2] = "Arch";
      })(ChildrenRenderOrder || (ChildrenRenderOrder = exports('ChildrenRenderOrder', {})));
      var GroupLayoutType;
      (function (GroupLayoutType) {
        GroupLayoutType[GroupLayoutType["None"] = 0] = "None";
        GroupLayoutType[GroupLayoutType["Horizontal"] = 1] = "Horizontal";
        GroupLayoutType[GroupLayoutType["Vertical"] = 2] = "Vertical";
      })(GroupLayoutType || (GroupLayoutType = exports('GroupLayoutType', {})));
      var PopupDirection;
      (function (PopupDirection) {
        PopupDirection[PopupDirection["Auto"] = 0] = "Auto";
        PopupDirection[PopupDirection["Up"] = 1] = "Up";
        PopupDirection[PopupDirection["Down"] = 2] = "Down";
      })(PopupDirection || (PopupDirection = exports('PopupDirection', {})));
      var RelationType;
      (function (RelationType) {
        RelationType[RelationType["Left_Left"] = 0] = "Left_Left";
        RelationType[RelationType["Left_Center"] = 1] = "Left_Center";
        RelationType[RelationType["Left_Right"] = 2] = "Left_Right";
        RelationType[RelationType["Center_Center"] = 3] = "Center_Center";
        RelationType[RelationType["Right_Left"] = 4] = "Right_Left";
        RelationType[RelationType["Right_Center"] = 5] = "Right_Center";
        RelationType[RelationType["Right_Right"] = 6] = "Right_Right";
        RelationType[RelationType["Top_Top"] = 7] = "Top_Top";
        RelationType[RelationType["Top_Middle"] = 8] = "Top_Middle";
        RelationType[RelationType["Top_Bottom"] = 9] = "Top_Bottom";
        RelationType[RelationType["Middle_Middle"] = 10] = "Middle_Middle";
        RelationType[RelationType["Bottom_Top"] = 11] = "Bottom_Top";
        RelationType[RelationType["Bottom_Middle"] = 12] = "Bottom_Middle";
        RelationType[RelationType["Bottom_Bottom"] = 13] = "Bottom_Bottom";
        RelationType[RelationType["Width"] = 14] = "Width";
        RelationType[RelationType["Height"] = 15] = "Height";
        RelationType[RelationType["LeftExt_Left"] = 16] = "LeftExt_Left";
        RelationType[RelationType["LeftExt_Right"] = 17] = "LeftExt_Right";
        RelationType[RelationType["RightExt_Left"] = 18] = "RightExt_Left";
        RelationType[RelationType["RightExt_Right"] = 19] = "RightExt_Right";
        RelationType[RelationType["TopExt_Top"] = 20] = "TopExt_Top";
        RelationType[RelationType["TopExt_Bottom"] = 21] = "TopExt_Bottom";
        RelationType[RelationType["BottomExt_Top"] = 22] = "BottomExt_Top";
        RelationType[RelationType["BottomExt_Bottom"] = 23] = "BottomExt_Bottom";
        RelationType[RelationType["Size"] = 24] = "Size";
      })(RelationType || (RelationType = exports('RelationType', {})));
      var FillMethod;
      (function (FillMethod) {
        FillMethod[FillMethod["None"] = 0] = "None";
        FillMethod[FillMethod["Horizontal"] = 1] = "Horizontal";
        FillMethod[FillMethod["Vertical"] = 2] = "Vertical";
        FillMethod[FillMethod["Radial90"] = 3] = "Radial90";
        FillMethod[FillMethod["Radial180"] = 4] = "Radial180";
        FillMethod[FillMethod["Radial360"] = 5] = "Radial360";
      })(FillMethod || (FillMethod = exports('FillMethod', {})));
      var FillOrigin;
      (function (FillOrigin) {
        FillOrigin[FillOrigin["Top"] = 0] = "Top";
        FillOrigin[FillOrigin["Bottom"] = 1] = "Bottom";
        FillOrigin[FillOrigin["Left"] = 2] = "Left";
        FillOrigin[FillOrigin["Right"] = 3] = "Right";
      })(FillOrigin || (FillOrigin = exports('FillOrigin', {})));
      var ObjectPropID;
      (function (ObjectPropID) {
        ObjectPropID[ObjectPropID["Text"] = 0] = "Text";
        ObjectPropID[ObjectPropID["Icon"] = 1] = "Icon";
        ObjectPropID[ObjectPropID["Color"] = 2] = "Color";
        ObjectPropID[ObjectPropID["OutlineColor"] = 3] = "OutlineColor";
        ObjectPropID[ObjectPropID["Playing"] = 4] = "Playing";
        ObjectPropID[ObjectPropID["Frame"] = 5] = "Frame";
        ObjectPropID[ObjectPropID["DeltaTime"] = 6] = "DeltaTime";
        ObjectPropID[ObjectPropID["TimeScale"] = 7] = "TimeScale";
        ObjectPropID[ObjectPropID["FontSize"] = 8] = "FontSize";
        ObjectPropID[ObjectPropID["Selected"] = 9] = "Selected";
      })(ObjectPropID || (ObjectPropID = exports('ObjectPropID', {})));
      var BlendMode;
      (function (BlendMode) {
        BlendMode[BlendMode["Normal"] = 0] = "Normal";
        BlendMode[BlendMode["None"] = 1] = "None";
        BlendMode[BlendMode["Add"] = 2] = "Add";
        BlendMode[BlendMode["Multiply"] = 3] = "Multiply";
        BlendMode[BlendMode["Screen"] = 4] = "Screen";
        BlendMode[BlendMode["Erase"] = 5] = "Erase";
        BlendMode[BlendMode["Mask"] = 6] = "Mask";
        BlendMode[BlendMode["Below"] = 7] = "Below";
        BlendMode[BlendMode["Off"] = 8] = "Off";
        BlendMode[BlendMode["Custom1"] = 9] = "Custom1";
        BlendMode[BlendMode["Custom2"] = 10] = "Custom2";
        BlendMode[BlendMode["Custom3"] = 11] = "Custom3";
      })(BlendMode || (BlendMode = exports('BlendMode', {})));
      var BlendModeUtils = /*#__PURE__*/function () {
        function BlendModeUtils() {}
        BlendModeUtils.apply = function apply(node, blendMode) {
          var f = factors[blendMode];
          var renderers = node.getComponentsInChildren(UIRenderer);
          renderers.forEach(function (element) {
            element.srcBlendFactor = f[0];
            element.dstBlendFactor = f[1];
          });
        };
        BlendModeUtils.override = function override(blendMode, srcFactor, dstFactor) {
          factors[blendMode][0] = srcFactor;
          factors[blendMode][1] = dstFactor;
        };
        return BlendModeUtils;
      }();
      var factors = [[gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA],
      //normal
      [gfx.BlendFactor.ONE, gfx.BlendFactor.ONE],
      //none
      [gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE],
      //add
      [gfx.BlendFactor.DST_COLOR, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA],
      //mul
      [gfx.BlendFactor.ONE, gfx.BlendFactor.ONE_MINUS_SRC_COLOR],
      //screen
      [gfx.BlendFactor.ZERO, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA],
      //erase
      [gfx.BlendFactor.ZERO, gfx.BlendFactor.SRC_ALPHA],
      //mask
      [gfx.BlendFactor.ONE_MINUS_DST_ALPHA, gfx.BlendFactor.DST_ALPHA],
      //below
      [gfx.BlendFactor.ONE, gfx.BlendFactor.ZERO],
      //off
      [gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA],
      //custom1
      [gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA],
      //custom2
      [gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA] //custom2
      ];
      var Event = exports('Event', /*#__PURE__*/function (_Event$) {
        _inheritsLoose(Event, _Event$);
        function Event(type, bubbles) {
          var _this;
          _this = _Event$.call(this, type, bubbles) || this;
          _this.pos = new Vec2();
          _this.touchId = 0;
          _this.clickCount = 0;
          _this.button = 0;
          _this.keyModifiers = 0;
          _this.mouseWheelDelta = 0;
          return _this;
        }
        var _proto = Event.prototype;
        _proto.captureTouch = function captureTouch() {
          var obj = GObject.cast(this.currentTarget);
          if (obj) this._processor.addTouchMonitor(this.touchId, obj);
        };
        _proto.unuse = function unuse() {
          _Event$.prototype.unuse.call(this);
          this.buttonObj = undefined;
        };
        _createClass(Event, [{
          key: "sender",
          get: function get() {
            return GObject.cast(this.currentTarget);
          }
        }, {
          key: "isShiftDown",
          get: function get() {
            return false;
          }
        }, {
          key: "isCtrlDown",
          get: function get() {
            return false;
          }
        }]);
        return Event;
      }(Event$1));
      Event.TOUCH_BEGIN = "fui_touch_begin";
      Event.TOUCH_MOVE = "fui_touch_move";
      Event.TOUCH_END = "fui_touch_end";
      Event.CLICK = "fui_click";
      Event.ROLL_OVER = "fui_roll_over";
      Event.ROLL_OUT = "fui_roll_out";
      Event.MOUSE_WHEEL = "fui_mouse_wheel";
      Event.DISPLAY = "fui_display";
      Event.UNDISPLAY = "fui_undisplay";
      Event.GEAR_STOP = "fui_gear_stop";
      Event.LINK = "fui_text_link";
      Event.Submit = "editing-return";
      Event.TEXT_CHANGE = "text-changed";
      Event.STATUS_CHANGED = "fui_status_changed";
      Event.XY_CHANGED = "fui_xy_changed";
      Event.SIZE_CHANGED = "fui_size_changed";
      Event.SIZE_DELAY_CHANGE = "fui_size_delay_change";
      Event.DRAG_START = "fui_drag_start";
      Event.DRAG_MOVE = "fui_drag_move";
      Event.DRAG_END = "fui_drag_end";
      Event.DROP = "fui_drop";
      Event.SCROLL = "fui_scroll";
      Event.SCROLL_END = "fui_scroll_end";
      Event.PULL_DOWN_RELEASE = "fui_pull_down_release";
      Event.PULL_UP_RELEASE = "fui_pull_up_release";
      Event.CLICK_ITEM = "fui_click_item";
      var eventPool = new Array();
      function borrowEvent(type, bubbles) {
        var evt;
        if (eventPool.length) {
          evt = eventPool.pop();
          evt.type = type;
          evt.bubbles = bubbles;
        } else {
          evt = new Event(type, bubbles);
        }
        return evt;
      }
      function returnEvent(evt) {
        evt.initiator = null;
        evt.unuse();
        eventPool.push(evt);
      }
      var EaseType;
      (function (EaseType) {
        EaseType[EaseType["Linear"] = 0] = "Linear";
        EaseType[EaseType["SineIn"] = 1] = "SineIn";
        EaseType[EaseType["SineOut"] = 2] = "SineOut";
        EaseType[EaseType["SineInOut"] = 3] = "SineInOut";
        EaseType[EaseType["QuadIn"] = 4] = "QuadIn";
        EaseType[EaseType["QuadOut"] = 5] = "QuadOut";
        EaseType[EaseType["QuadInOut"] = 6] = "QuadInOut";
        EaseType[EaseType["CubicIn"] = 7] = "CubicIn";
        EaseType[EaseType["CubicOut"] = 8] = "CubicOut";
        EaseType[EaseType["CubicInOut"] = 9] = "CubicInOut";
        EaseType[EaseType["QuartIn"] = 10] = "QuartIn";
        EaseType[EaseType["QuartOut"] = 11] = "QuartOut";
        EaseType[EaseType["QuartInOut"] = 12] = "QuartInOut";
        EaseType[EaseType["QuintIn"] = 13] = "QuintIn";
        EaseType[EaseType["QuintOut"] = 14] = "QuintOut";
        EaseType[EaseType["QuintInOut"] = 15] = "QuintInOut";
        EaseType[EaseType["ExpoIn"] = 16] = "ExpoIn";
        EaseType[EaseType["ExpoOut"] = 17] = "ExpoOut";
        EaseType[EaseType["ExpoInOut"] = 18] = "ExpoInOut";
        EaseType[EaseType["CircIn"] = 19] = "CircIn";
        EaseType[EaseType["CircOut"] = 20] = "CircOut";
        EaseType[EaseType["CircInOut"] = 21] = "CircInOut";
        EaseType[EaseType["ElasticIn"] = 22] = "ElasticIn";
        EaseType[EaseType["ElasticOut"] = 23] = "ElasticOut";
        EaseType[EaseType["ElasticInOut"] = 24] = "ElasticInOut";
        EaseType[EaseType["BackIn"] = 25] = "BackIn";
        EaseType[EaseType["BackOut"] = 26] = "BackOut";
        EaseType[EaseType["BackInOut"] = 27] = "BackInOut";
        EaseType[EaseType["BounceIn"] = 28] = "BounceIn";
        EaseType[EaseType["BounceOut"] = 29] = "BounceOut";
        EaseType[EaseType["BounceInOut"] = 30] = "BounceInOut";
        EaseType[EaseType["Custom"] = 31] = "Custom";
      })(EaseType || (EaseType = exports('EaseType', {})));
      var GearBase = exports('GearBase', /*#__PURE__*/function () {
        function GearBase() {}
        var _proto2 = GearBase.prototype;
        _proto2.dispose = function dispose() {
          if (this._tweenConfig && this._tweenConfig._tweener) {
            this._tweenConfig._tweener.kill();
            this._tweenConfig._tweener = null;
          }
        };
        _proto2.setup = function setup(buffer) {
          this._controller = this._owner.parent.getControllerAt(buffer.readShort());
          this.init();
          var i;
          var page;
          var cnt = buffer.readShort();
          if ("pages" in this) {
            this.pages = buffer.readSArray(cnt);
          } else {
            for (i = 0; i < cnt; i++) {
              page = buffer.readS();
              if (page == null) continue;
              this.addStatus(page, buffer);
            }
            if (buffer.readBool()) this.addStatus(null, buffer);
          }
          if (buffer.readBool()) {
            this._tweenConfig = new GearTweenConfig();
            this._tweenConfig.easeType = buffer.readByte();
            this._tweenConfig.duration = buffer.readFloat();
            this._tweenConfig.delay = buffer.readFloat();
          }
          if (buffer.version >= 2) {
            if ("positionsInPercent" in this) {
              if (buffer.readBool()) {
                this.positionsInPercent = true;
                for (i = 0; i < cnt; i++) {
                  page = buffer.readS();
                  if (page == null) continue;
                  this.addExtStatus(page, buffer);
                }
                if (buffer.readBool()) this.addExtStatus(null, buffer);
              }
            } else if ("condition" in this) this.condition = buffer.readByte();
          }
        };
        _proto2.updateFromRelations = function updateFromRelations(dx, dy) {};
        _proto2.addStatus = function addStatus(pageId, buffer) {};
        _proto2.init = function init() {};
        _proto2.apply = function apply() {};
        _proto2.updateState = function updateState() {};
        _createClass(GearBase, [{
          key: "controller",
          get: function get() {
            return this._controller;
          },
          set: function set(val) {
            if (val != this._controller) {
              this._controller = val;
              if (this._controller) this.init();
            }
          }
        }, {
          key: "tweenConfig",
          get: function get() {
            if (!this._tweenConfig) this._tweenConfig = new GearTweenConfig();
            return this._tweenConfig;
          }
        }, {
          key: "allowTween",
          get: function get() {
            return this._tweenConfig && this._tweenConfig.tween && constructingDepth.n == 0 && !GearBase.disableAllTweenEffect;
          }
        }]);
        return GearBase;
      }());
      var GearTweenConfig = function GearTweenConfig() {
        this.tween = true;
        this.easeType = EaseType.QuadOut;
        this.duration = 0.3;
        this.delay = 0;
      };
      var GearAnimation = exports('GearAnimation', /*#__PURE__*/function (_GearBase) {
        _inheritsLoose(GearAnimation, _GearBase);
        function GearAnimation() {
          return _GearBase.apply(this, arguments) || this;
        }
        var _proto3 = GearAnimation.prototype;
        _proto3.init = function init() {
          this._default = {
            playing: this._owner.getProp(ObjectPropID.Playing),
            frame: this._owner.getProp(ObjectPropID.Frame)
          };
          this._storage = {};
        };
        _proto3.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.playing = buffer.readBool();
          gv.frame = buffer.readInt();
        };
        _proto3.apply = function apply() {
          this._owner._gearLocked = true;
          var gv = this._storage[this._controller.selectedPageId] || this._default;
          this._owner.setProp(ObjectPropID.Playing, gv.playing);
          this._owner.setProp(ObjectPropID.Frame, gv.frame);
          this._owner._gearLocked = false;
        };
        _proto3.updateState = function updateState() {
          var gv = this._storage[this._controller.selectedPageId];
          if (!gv) {
            gv = {};
            this._storage[this._controller.selectedPageId] = gv;
          }
          gv.playing = this._owner.getProp(ObjectPropID.Playing);
          gv.frame = this._owner.getProp(ObjectPropID.Frame);
        };
        return GearAnimation;
      }(GearBase));
      var GearColor = exports('GearColor', /*#__PURE__*/function (_GearBase2) {
        _inheritsLoose(GearColor, _GearBase2);
        function GearColor() {
          return _GearBase2.apply(this, arguments) || this;
        }
        var _proto4 = GearColor.prototype;
        _proto4.init = function init() {
          this._default = {
            color: this._owner.getProp(ObjectPropID.Color),
            strokeColor: this._owner.getProp(ObjectPropID.OutlineColor)
          };
          this._storage = {};
        };
        _proto4.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.color = buffer.readColor();
          gv.strokeColor = buffer.readColor();
        };
        _proto4.apply = function apply() {
          this._owner._gearLocked = true;
          var gv = this._storage[this._controller.selectedPageId] || this._default;
          this._owner.setProp(ObjectPropID.Color, gv.color);
          this._owner.setProp(ObjectPropID.OutlineColor, gv.strokeColor);
          this._owner._gearLocked = false;
        };
        _proto4.updateState = function updateState() {
          var gv = this._storage[this._controller.selectedPageId];
          if (!gv) {
            gv = {};
            this._storage[this._controller.selectedPageId] = gv;
          }
          gv.color = this._owner.getProp(ObjectPropID.Color);
          gv.strokeColor = this._owner.getProp(ObjectPropID.OutlineColor);
        };
        return GearColor;
      }(GearBase));
      var GearDisplay = exports('GearDisplay', /*#__PURE__*/function (_GearBase3) {
        _inheritsLoose(GearDisplay, _GearBase3);
        function GearDisplay() {
          var _this2;
          _this2 = _GearBase3.apply(this, arguments) || this;
          _this2.pages = null;
          _this2._visible = 0;
          _this2._displayLockToken = 1;
          return _this2;
        }
        var _proto5 = GearDisplay.prototype;
        _proto5.init = function init() {
          this.pages = null;
        };
        _proto5.addLock = function addLock() {
          this._visible++;
          return this._displayLockToken;
        };
        _proto5.releaseLock = function releaseLock(token) {
          if (token == this._displayLockToken) this._visible--;
        };
        _proto5.apply = function apply() {
          this._displayLockToken++;
          if (this._displayLockToken <= 0) this._displayLockToken = 1;
          if (this.pages == null || this.pages.length == 0 || this.pages.indexOf(this._controller.selectedPageId) != -1) this._visible = 1;else this._visible = 0;
        };
        _createClass(GearDisplay, [{
          key: "connected",
          get: function get() {
            return this._controller == null || this._visible > 0;
          }
        }]);
        return GearDisplay;
      }(GearBase));
      var GearDisplay2 = exports('GearDisplay2', /*#__PURE__*/function (_GearBase4) {
        _inheritsLoose(GearDisplay2, _GearBase4);
        function GearDisplay2() {
          var _this3;
          _this3 = _GearBase4.apply(this, arguments) || this;
          _this3.pages = null;
          _this3.condition = 0;
          _this3._visible = 0;
          return _this3;
        }
        var _proto6 = GearDisplay2.prototype;
        _proto6.init = function init() {
          this.pages = null;
        };
        _proto6.apply = function apply() {
          if (this.pages == null || this.pages.length == 0 || this.pages.indexOf(this._controller.selectedPageId) != -1) this._visible = 1;else this._visible = 0;
        };
        _proto6.evaluate = function evaluate(connected) {
          var v = this._controller == null || this._visible > 0;
          if (this.condition == 0) v = v && connected;else v = v || connected;
          return v;
        };
        return GearDisplay2;
      }(GearBase));
      var GearFontSize = exports('GearFontSize', /*#__PURE__*/function (_GearBase5) {
        _inheritsLoose(GearFontSize, _GearBase5);
        function GearFontSize() {
          var _this4;
          _this4 = _GearBase5.apply(this, arguments) || this;
          _this4._default = 0;
          return _this4;
        }
        var _proto7 = GearFontSize.prototype;
        _proto7.init = function init() {
          this._default = this._owner.getProp(ObjectPropID.FontSize);
          this._storage = {};
        };
        _proto7.addStatus = function addStatus(pageId, buffer) {
          if (!pageId) this._default = buffer.readInt();else this._storage[pageId] = buffer.readInt();
        };
        _proto7.apply = function apply() {
          this._owner._gearLocked = true;
          var data = this._storage[this._controller.selectedPageId];
          if (data !== undefined) this._owner.setProp(ObjectPropID.FontSize, data);else this._owner.setProp(ObjectPropID.FontSize, this._default);
          this._owner._gearLocked = false;
        };
        _proto7.updateState = function updateState() {
          this._storage[this._controller.selectedPageId] = this._owner.getProp(ObjectPropID.FontSize);
        };
        return GearFontSize;
      }(GearBase));
      var GearIcon = exports('GearIcon', /*#__PURE__*/function (_GearBase6) {
        _inheritsLoose(GearIcon, _GearBase6);
        function GearIcon() {
          return _GearBase6.apply(this, arguments) || this;
        }
        var _proto8 = GearIcon.prototype;
        _proto8.init = function init() {
          this._default = this._owner.icon;
          this._storage = {};
        };
        _proto8.addStatus = function addStatus(pageId, buffer) {
          if (!pageId) this._default = buffer.readS();else this._storage[pageId] = buffer.readS();
        };
        _proto8.apply = function apply() {
          this._owner._gearLocked = true;
          var data = this._storage[this._controller.selectedPageId];
          if (data !== undefined) this._owner.icon = data;else this._owner.icon = this._default;
          this._owner._gearLocked = false;
        };
        _proto8.updateState = function updateState() {
          this._storage[this._controller.selectedPageId] = this._owner.icon;
        };
        return GearIcon;
      }(GearBase));
      var Pool = /*#__PURE__*/function () {
        function Pool(type, init, reset) {
          this.pool = [];
          this._init = init;
          this._reset = reset;
          this._ct = type;
        }
        var _proto9 = Pool.prototype;
        _proto9.borrow = function borrow() {
          var ret;
          if (this.pool.length > 0) ret = this.pool.pop();else ret = new this._ct();
          for (var _len = arguments.length, argArray = new Array(_len), _key = 0; _key < _len; _key++) {
            argArray[_key] = arguments[_key];
          }
          if (this._init) this._init.apply(this, [ret].concat(argArray));
          return ret;
        };
        _proto9.returns = function returns(element) {
          if (Array.isArray(element)) {
            var count = element.length;
            for (var i = 0; i < count; i++) {
              var element2 = element[i];
              if (this._reset) this._reset(element2);
              this.pool.push(element2);
            }
            element.length = 0;
          } else {
            if (this._reset) this._reset(element);
            this.pool.push(element);
          }
        };
        return Pool;
      }(); // Author: Daniele Giardini - http://www.demigiant.com
      // Created: 2014/07/19 14:11
      // 
      // License Copyright (c) Daniele Giardini.
      // This work is subject to the terms at http://dotween.demigiant.com/license.php
      // 
      // =============================================================
      // Contains Daniele Giardini's C# port of the easing equations created by Robert Penner
      // (all easing equations except for Flash, InFlash, OutFlash, InOutFlash,
      // which use some parts of Robert Penner's equations but were created by Daniele Giardini)
      // http://robertpenner.com/easing, see license below:
      // =============================================================
      //
      // TERMS OF USE - EASING EQUATIONS
      //
      // Open source under the BSD License.
      //
      // Copyright ? 2001 Robert Penner
      // All rights reserved.
      //
      // Redistribution and use in source and binary forms, with or without modification,
      // are permitted provided that the following conditions are met:
      //
      // - Redistributions of source code must retain the above copyright notice,
      // this list of conditions and the following disclaimer.
      // - Redistributions in binary form must reproduce the above copyright notice,
      // this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      // - Neither the name of the author nor the names of contributors may be used to endorse
      // or promote products derived} from this software without specific prior written permission.
      // - THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
      // THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
      // IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
      // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      // LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
      // STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      // EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      var _PiOver2 = Math.PI * 0.5;
      var _TwoPi = Math.PI * 2;
      function evaluateEase(easeType, time, duration, overshootOrAmplitude, period) {
        switch (easeType) {
          case EaseType.Linear:
            return time / duration;
          case EaseType.SineIn:
            return -Math.cos(time / duration * _PiOver2) + 1;
          case EaseType.SineOut:
            return Math.sin(time / duration * _PiOver2);
          case EaseType.SineInOut:
            return -0.5 * (Math.cos(Math.PI * time / duration) - 1);
          case EaseType.QuadIn:
            return (time /= duration) * time;
          case EaseType.QuadOut:
            return -(time /= duration) * (time - 2);
          case EaseType.QuadInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * time * time;
            return -0.5 * (--time * (time - 2) - 1);
          case EaseType.CubicIn:
            return (time /= duration) * time * time;
          case EaseType.CubicOut:
            return (time = time / duration - 1) * time * time + 1;
          case EaseType.CubicInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time;
            return 0.5 * ((time -= 2) * time * time + 2);
          case EaseType.QuartIn:
            return (time /= duration) * time * time * time;
          case EaseType.QuartOut:
            return -((time = time / duration - 1) * time * time * time - 1);
          case EaseType.QuartInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time * time;
            return -0.5 * ((time -= 2) * time * time * time - 2);
          case EaseType.QuintIn:
            return (time /= duration) * time * time * time * time;
          case EaseType.QuintOut:
            return (time = time / duration - 1) * time * time * time * time + 1;
          case EaseType.QuintInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time * time * time;
            return 0.5 * ((time -= 2) * time * time * time * time + 2);
          case EaseType.ExpoIn:
            return time == 0 ? 0 : Math.pow(2, 10 * (time / duration - 1));
          case EaseType.ExpoOut:
            if (time == duration) return 1;
            return -Math.pow(2, -10 * time / duration) + 1;
          case EaseType.ExpoInOut:
            if (time == 0) return 0;
            if (time == duration) return 1;
            if ((time /= duration * 0.5) < 1) return 0.5 * Math.pow(2, 10 * (time - 1));
            return 0.5 * (-Math.pow(2, -10 * --time) + 2);
          case EaseType.CircIn:
            return -(Math.sqrt(1 - (time /= duration) * time) - 1);
          case EaseType.CircOut:
            return Math.sqrt(1 - (time = time / duration - 1) * time);
          case EaseType.CircInOut:
            if ((time /= duration * 0.5) < 1) return -0.5 * (Math.sqrt(1 - time * time) - 1);
            return 0.5 * (Math.sqrt(1 - (time -= 2) * time) + 1);
          case EaseType.ElasticIn:
            var s0;
            if (time == 0) return 0;
            if ((time /= duration) == 1) return 1;
            if (period == 0) period = duration * 0.3;
            if (overshootOrAmplitude < 1) {
              overshootOrAmplitude = 1;
              s0 = period / 4;
            } else s0 = period / _TwoPi * Math.asin(1 / overshootOrAmplitude);
            return -(overshootOrAmplitude * Math.pow(2, 10 * (time -= 1)) * Math.sin((time * duration - s0) * _TwoPi / period));
          case EaseType.ElasticOut:
            var s1;
            if (time == 0) return 0;
            if ((time /= duration) == 1) return 1;
            if (period == 0) period = duration * 0.3;
            if (overshootOrAmplitude < 1) {
              overshootOrAmplitude = 1;
              s1 = period / 4;
            } else s1 = period / _TwoPi * Math.asin(1 / overshootOrAmplitude);
            return overshootOrAmplitude * Math.pow(2, -10 * time) * Math.sin((time * duration - s1) * _TwoPi / period) + 1;
          case EaseType.ElasticInOut:
            var s;
            if (time == 0) return 0;
            if ((time /= duration * 0.5) == 2) return 1;
            if (period == 0) period = duration * (0.3 * 1.5);
            if (overshootOrAmplitude < 1) {
              overshootOrAmplitude = 1;
              s = period / 4;
            } else s = period / _TwoPi * Math.asin(1 / overshootOrAmplitude);
            if (time < 1) return -0.5 * (overshootOrAmplitude * Math.pow(2, 10 * (time -= 1)) * Math.sin((time * duration - s) * _TwoPi / period));
            return overshootOrAmplitude * Math.pow(2, -10 * (time -= 1)) * Math.sin((time * duration - s) * _TwoPi / period) * 0.5 + 1;
          case EaseType.BackIn:
            return (time /= duration) * time * ((overshootOrAmplitude + 1) * time - overshootOrAmplitude);
          case EaseType.BackOut:
            return (time = time / duration - 1) * time * ((overshootOrAmplitude + 1) * time + overshootOrAmplitude) + 1;
          case EaseType.BackInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * (time * time * (((overshootOrAmplitude *= 1.525) + 1) * time - overshootOrAmplitude));
            return 0.5 * ((time -= 2) * time * (((overshootOrAmplitude *= 1.525) + 1) * time + overshootOrAmplitude) + 2);
          case EaseType.BounceIn:
            return bounce_easeIn(time, duration);
          case EaseType.BounceOut:
            return bounce_easeOut(time, duration);
          case EaseType.BounceInOut:
            return bounce_easeInOut(time, duration);
          default:
            return -(time /= duration) * (time - 2);
        }
      }
      function bounce_easeIn(time, duration) {
        return 1 - bounce_easeOut(duration - time, duration);
      }
      function bounce_easeOut(time, duration) {
        if ((time /= duration) < 1 / 2.75) {
          return 7.5625 * time * time;
        }
        if (time < 2 / 2.75) {
          return 7.5625 * (time -= 1.5 / 2.75) * time + 0.75;
        }
        if (time < 2.5 / 2.75) {
          return 7.5625 * (time -= 2.25 / 2.75) * time + 0.9375;
        }
        return 7.5625 * (time -= 2.625 / 2.75) * time + 0.984375;
      }
      function bounce_easeInOut(time, duration) {
        if (time < duration * 0.5) {
          return bounce_easeIn(time * 2, duration) * 0.5;
        }
        return bounce_easeOut(time * 2 - duration, duration) * 0.5 + 0.5;
      }
      var TweenValue = /*#__PURE__*/function () {
        function TweenValue() {
          this.x = this.y = this.z = this.w = 0;
        }
        var _proto10 = TweenValue.prototype;
        _proto10.getField = function getField(index) {
          switch (index) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            case 3:
              return this.w;
            default:
              throw new Error("Index out of bounds: " + index);
          }
        };
        _proto10.setField = function setField(index, value) {
          switch (index) {
            case 0:
              this.x = value;
              break;
            case 1:
              this.y = value;
              break;
            case 2:
              this.z = value;
              break;
            case 3:
              this.w = value;
              break;
            default:
              throw new Error("Index out of bounds: " + index);
          }
        };
        _proto10.setZero = function setZero() {
          this.x = this.y = this.z = this.w = 0;
        };
        _createClass(TweenValue, [{
          key: "color",
          get: function get() {
            return (this.w << 24) + (this.x << 16) + (this.y << 8) + this.z;
          },
          set: function set(value) {
            this.x = (value & 0xFF0000) >> 16;
            this.y = (value & 0x00FF00) >> 8;
            this.z = value & 0x0000FF;
            this.w = (value & 0xFF000000) >> 24;
          }
        }]);
        return TweenValue;
      }();
      var s_vec2$5 = new Vec2();
      var GTweener = exports('GTweener', /*#__PURE__*/function () {
        function GTweener() {
          this._delay = 0;
          this._duration = 0;
          this._breakpoint = 0;
          this._easeType = 0;
          this._easeOvershootOrAmplitude = 0;
          this._easePeriod = 0;
          this._repeat = 0;
          this._yoyo = false;
          this._timeScale = 1;
          this._snapping = false;
          this._startValue = new TweenValue();
          this._endValue = new TweenValue();
          this._value = new TweenValue();
          this._deltaValue = new TweenValue();
          this._reset();
        }
        var _proto11 = GTweener.prototype;
        _proto11.setDelay = function setDelay(value) {
          this._delay = value;
          return this;
        };
        _proto11.setDuration = function setDuration(value) {
          this._duration = value;
          return this;
        };
        _proto11.setBreakpoint = function setBreakpoint(value) {
          this._breakpoint = value;
          return this;
        };
        _proto11.setEase = function setEase(value) {
          this._easeType = value;
          return this;
        };
        _proto11.setEasePeriod = function setEasePeriod(value) {
          this._easePeriod = value;
          return this;
        };
        _proto11.setEaseOvershootOrAmplitude = function setEaseOvershootOrAmplitude(value) {
          this._easeOvershootOrAmplitude = value;
          return this;
        };
        _proto11.setRepeat = function setRepeat(repeat, yoyo) {
          this._repeat = repeat;
          this._yoyo = yoyo;
          return this;
        };
        _proto11.setTimeScale = function setTimeScale(value) {
          this._timeScale = value;
          return this;
        };
        _proto11.setSnapping = function setSnapping(value) {
          this._snapping = value;
          return this;
        };
        _proto11.setTarget = function setTarget(value, propType) {
          this._target = value;
          this._propType = propType;
          return this;
        };
        _proto11.setPath = function setPath(value) {
          this._path = value;
          return this;
        };
        _proto11.setUserData = function setUserData(value) {
          this._userData = value;
          return this;
        };
        _proto11.onUpdate = function onUpdate(callback, target) {
          this._onUpdate = callback;
          this._onUpdateCaller = target;
          return this;
        };
        _proto11.onStart = function onStart(callback, target) {
          this._onStart = callback;
          this._onStartCaller = target;
          return this;
        };
        _proto11.onComplete = function onComplete(callback, target) {
          this._onComplete = callback;
          this._onCompleteCaller = target;
          return this;
        };
        _proto11.setPaused = function setPaused(paused) {
          this._paused = paused;
          return this;
        } /**
          * seek position of the tween, in seconds.
          */;
        _proto11.seek = function seek(time) {
          if (this._killed) return;
          this._elapsedTime = time;
          if (this._elapsedTime < this._delay) {
            if (this._started) this._elapsedTime = this._delay;else return;
          }
          this.update();
        };
        _proto11.kill = function kill(complete) {
          if (this._killed) return;
          if (complete) {
            if (this._ended == 0) {
              if (this._breakpoint >= 0) this._elapsedTime = this._delay + this._breakpoint;else if (this._repeat >= 0) this._elapsedTime = this._delay + this._duration * (this._repeat + 1);else this._elapsedTime = this._delay + this._duration * 2;
              this.update();
            }
            this.callCompleteCallback();
          }
          this._killed = true;
        };
        _proto11._to = function _to(start, end, duration) {
          this._valueSize = 1;
          this._startValue.x = start;
          this._endValue.x = end;
          this._value.x = start;
          this._duration = duration;
          return this;
        };
        _proto11._to2 = function _to2(start, start2, end, end2, duration) {
          this._valueSize = 2;
          this._startValue.x = start;
          this._endValue.x = end;
          this._startValue.y = start2;
          this._endValue.y = end2;
          this._value.x = start;
          this._value.y = start2;
          this._duration = duration;
          return this;
        };
        _proto11._to3 = function _to3(start, start2, start3, end, end2, end3, duration) {
          this._valueSize = 3;
          this._startValue.x = start;
          this._endValue.x = end;
          this._startValue.y = start2;
          this._endValue.y = end2;
          this._startValue.z = start3;
          this._endValue.z = end3;
          this._value.x = start;
          this._value.y = start2;
          this._value.z = start3;
          this._duration = duration;
          return this;
        };
        _proto11._to4 = function _to4(start, start2, start3, start4, end, end2, end3, end4, duration) {
          this._valueSize = 4;
          this._startValue.x = start;
          this._endValue.x = end;
          this._startValue.y = start2;
          this._endValue.y = end2;
          this._startValue.z = start3;
          this._endValue.z = end3;
          this._startValue.w = start4;
          this._endValue.w = end4;
          this._value.x = start;
          this._value.y = start2;
          this._value.z = start3;
          this._value.w = start4;
          this._duration = duration;
          return this;
        };
        _proto11._toColor = function _toColor(start, end, duration) {
          this._valueSize = 5;
          this._startValue.color = start;
          this._endValue.color = end;
          this._value.color = start;
          this._duration = duration;
          return this;
        };
        _proto11._shake = function _shake(startX, startY, amplitude, duration) {
          this._valueSize = 6;
          this._startValue.x = startX;
          this._startValue.y = startY;
          this._startValue.w = amplitude;
          this._duration = duration;
          return this;
        };
        _proto11._init = function _init() {
          this._delay = 0;
          this._duration = 0;
          this._breakpoint = -1;
          this._easeType = EaseType.QuadOut;
          this._timeScale = 1;
          this._easePeriod = 0;
          this._easeOvershootOrAmplitude = 1.70158;
          this._snapping = false;
          this._repeat = 0;
          this._yoyo = false;
          this._valueSize = 0;
          this._started = false;
          this._paused = false;
          this._killed = false;
          this._elapsedTime = 0;
          this._normalizedTime = 0;
          this._ended = 0;
        };
        _proto11._reset = function _reset() {
          this._target = null;
          this._propType = null;
          this._userData = null;
          this._path = null;
          this._onStart = this._onUpdate = this._onComplete = null;
          this._onStartCaller = this._onUpdateCaller = this._onCompleteCaller = null;
        };
        _proto11._update = function _update(dt) {
          if (this._timeScale != 1) dt *= this._timeScale;
          if (dt == 0) return;
          if (this._ended != 0)
            //Maybe completed by seek
            {
              this.callCompleteCallback();
              this._killed = true;
              return;
            }
          this._elapsedTime += dt;
          this.update();
          if (this._ended != 0) {
            if (!this._killed) {
              this.callCompleteCallback();
              this._killed = true;
            }
          }
        };
        _proto11.update = function update() {
          this._ended = 0;
          if (this._valueSize == 0)
            //DelayedCall
            {
              if (this._elapsedTime >= this._delay + this._duration) this._ended = 1;
              return;
            }
          if (!this._started) {
            if (this._elapsedTime < this._delay) return;
            this._started = true;
            this.callStartCallback();
            if (this._killed) return;
          }
          var reversed = false;
          var tt = this._elapsedTime - this._delay;
          if (this._breakpoint >= 0 && tt >= this._breakpoint) {
            tt = this._breakpoint;
            this._ended = 2;
          }
          if (this._repeat != 0) {
            var round = Math.floor(tt / this._duration);
            tt -= this._duration * round;
            if (this._yoyo) reversed = round % 2 == 1;
            if (this._repeat > 0 && this._repeat - round < 0) {
              if (this._yoyo) reversed = this._repeat % 2 == 1;
              tt = this._duration;
              this._ended = 1;
            }
          } else if (tt >= this._duration) {
            tt = this._duration;
            this._ended = 1;
          }
          this._normalizedTime = evaluateEase(this._easeType, reversed ? this._duration - tt : tt, this._duration, this._easeOvershootOrAmplitude, this._easePeriod);
          this._value.setZero();
          this._deltaValue.setZero();
          if (this._valueSize == 6) {
            if (this._ended == 0) {
              var r = this._startValue.w * (1 - this._normalizedTime);
              var rx = r * (Math.random() > 0.5 ? 1 : -1);
              var ry = r * (Math.random() > 0.5 ? 1 : -1);
              this._deltaValue.x = rx;
              this._deltaValue.y = ry;
              this._value.x = this._startValue.x + rx;
              this._value.y = this._startValue.y + ry;
            } else {
              this._value.x = this._startValue.x;
              this._value.y = this._startValue.y;
            }
          } else if (this._path) {
            var pt = this._path.getPointAt(this._normalizedTime, s_vec2$5);
            if (this._snapping) {
              pt.x = Math.round(pt.x);
              pt.y = Math.round(pt.y);
            }
            this._deltaValue.x = pt.x - this._value.x;
            this._deltaValue.y = pt.y - this._value.y;
            this._value.x = pt.x;
            this._value.y = pt.y;
          } else {
            var cnt = Math.min(this._valueSize, 4);
            for (var i = 0; i < cnt; i++) {
              var n1 = this._startValue.getField(i);
              var n2 = this._endValue.getField(i);
              var f = n1 + (n2 - n1) * this._normalizedTime;
              if (this._snapping) f = Math.round(f);
              this._deltaValue.setField(i, f - this._value.getField(i));
              this._value.setField(i, f);
            }
          }
          if (this._target && this._propType) {
            if (this._propType instanceof Function) {
              switch (this._valueSize) {
                case 1:
                  this._propType.call(this._target, this._value.x);
                  break;
                case 2:
                  this._propType.call(this._target, this._value.x, this._value.y);
                  break;
                case 3:
                  this._propType.call(this._target, this._value.x, this._value.y, this._value.z);
                  break;
                case 4:
                  this._propType.call(this._target, this._value.x, this._value.y, this._value.z, this._value.w);
                  break;
                case 5:
                  this._propType.call(this._target, this._value.color);
                  break;
                case 6:
                  this._propType.call(this._target, this._value.x, this._value.y);
                  break;
              }
            } else {
              if (this._valueSize == 5) this._target[this._propType] = this._value.color;else this._target[this._propType] = this._value.x;
            }
          }
          this.callUpdateCallback();
        };
        _proto11.callStartCallback = function callStartCallback() {
          if (this._onStart) {
            try {
              this._onStart.call(this._onStartCaller, this);
            } catch (err) {
              console.log("error in start callback > " + err);
            }
          }
        };
        _proto11.callUpdateCallback = function callUpdateCallback() {
          if (this._onUpdate) {
            try {
              this._onUpdate.call(this._onUpdateCaller, this);
            } catch (err) {
              console.log("error in update callback > " + err);
            }
          }
        };
        _proto11.callCompleteCallback = function callCompleteCallback() {
          if (this._onComplete) {
            try {
              this._onComplete.call(this._onCompleteCaller, this);
            } catch (err) {
              console.log("error in complete callback > " + err);
            }
          }
        };
        _createClass(GTweener, [{
          key: "delay",
          get: function get() {
            return this._delay;
          }
        }, {
          key: "duration",
          get: function get() {
            return this._duration;
          }
        }, {
          key: "repeat",
          get: function get() {
            return this._repeat;
          }
        }, {
          key: "target",
          get: function get() {
            return this._target;
          }
        }, {
          key: "userData",
          get: function get() {
            return this._userData;
          }
        }, {
          key: "startValue",
          get: function get() {
            return this._startValue;
          }
        }, {
          key: "endValue",
          get: function get() {
            return this._endValue;
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
        }, {
          key: "deltaValue",
          get: function get() {
            return this._deltaValue;
          }
        }, {
          key: "normalizedTime",
          get: function get() {
            return this._normalizedTime;
          }
        }, {
          key: "completed",
          get: function get() {
            return this._ended != 0;
          }
        }, {
          key: "allCompleted",
          get: function get() {
            return this._ended == 1;
          }
        }]);
        return GTweener;
      }());
      var GTweenManagerPartner = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GTweenManagerPartner, _Component);
        function GTweenManagerPartner() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto12 = GTweenManagerPartner.prototype;
        _proto12.lateUpdate = function lateUpdate(dt) {
          TweenManager.update(dt);
        };
        return GTweenManagerPartner;
      }(Component);
      var TweenManager = /*#__PURE__*/function () {
        function TweenManager() {}
        TweenManager.createTween = function createTween() {
          if (!_root) {
            _root = new Node("[TweenManager]");
            director.addPersistRootNode(_root); // director.getScheduler().schedule(TweenManager.update, _root, 0, macro.REPEAT_FOREVER, 0, false);
            _root.addComponent(GTweenManagerPartner);
          }
          var tweener = _tweenerPool.borrow();
          _activeTweens[_totalActiveTweens++] = tweener;
          return tweener;
        };
        TweenManager.isTweening = function isTweening(target, propType) {
          if (target == null) return false;
          var anyType = !propType;
          for (var i = 0; i < _totalActiveTweens; i++) {
            var tweener = _activeTweens[i];
            if (tweener && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) return true;
          }
          return false;
        };
        TweenManager.killTweens = function killTweens(target, completed, propType) {
          if (target == null) return false;
          var flag = false;
          var cnt = _totalActiveTweens;
          var anyType = !propType;
          for (var i = 0; i < cnt; i++) {
            var tweener = _activeTweens[i];
            if (tweener && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) {
              tweener.kill(completed);
              flag = true;
            }
          }
          return flag;
        };
        TweenManager.getTween = function getTween(target, propType) {
          if (target == null) return null;
          var cnt = _totalActiveTweens;
          var anyType = !propType;
          for (var i = 0; i < cnt; i++) {
            var tweener = _activeTweens[i];
            if (tweener && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) {
              return tweener;
            }
          }
          return null;
        };
        TweenManager.update = function update(dt) {
          var tweens = _activeTweens;
          var cnt = _totalActiveTweens;
          var freePosStart = -1;
          for (var i = 0; i < cnt; i++) {
            var tweener = tweens[i];
            if (tweener == null) {
              if (freePosStart == -1) freePosStart = i;
            } else if (tweener._killed) {
              tweener._reset();
              _tweenerPool.returns(tweener);
              tweens[i] = null;
              if (freePosStart == -1) freePosStart = i;
            } else {
              if (tweener._target && 'isDisposed' in tweener._target && tweener._target.isDisposed) tweener._killed = true;else if (!tweener._paused) tweener._update(dt);
              if (freePosStart != -1) {
                tweens[freePosStart] = tweener;
                tweens[i] = null;
                freePosStart++;
              }
            }
          }
          if (freePosStart >= 0) {
            if (_totalActiveTweens != cnt)
              //new tweens added
              {
                var j = cnt;
                cnt = _totalActiveTweens - cnt;
                for (i = 0; i < cnt; i++) tweens[freePosStart++] = tweens[j++];
              }
            _totalActiveTweens = freePosStart;
          }
          return false;
        };
        return TweenManager;
      }();
      var _activeTweens = new Array();
      var _tweenerPool = new Pool(GTweener, function (e) {
        return e._init();
      }, function (e) {
        return e._reset();
      });
      var _totalActiveTweens = 0;
      var _root;
      var GTween = exports('GTween', /*#__PURE__*/function () {
        function GTween() {}
        GTween.to = function to(start, end, duration) {
          return TweenManager.createTween()._to(start, end, duration);
        };
        GTween.to2 = function to2(start, start2, end, end2, duration) {
          return TweenManager.createTween()._to2(start, start2, end, end2, duration);
        };
        GTween.to3 = function to3(start, start2, start3, end, end2, end3, duration) {
          return TweenManager.createTween()._to3(start, start2, start3, end, end2, end3, duration);
        };
        GTween.to4 = function to4(start, start2, start3, start4, end, end2, end3, end4, duration) {
          return TweenManager.createTween()._to4(start, start2, start3, start4, end, end2, end3, end4, duration);
        };
        GTween.toColor = function toColor(start, end, duration) {
          return TweenManager.createTween()._toColor(start, end, duration);
        };
        GTween.delayedCall = function delayedCall(delay) {
          return TweenManager.createTween().setDelay(delay);
        };
        GTween.shake = function shake(startX, startY, amplitude, duration) {
          return TweenManager.createTween()._shake(startX, startY, amplitude, duration);
        };
        GTween.isTweening = function isTweening(target, propType) {
          return TweenManager.isTweening(target, propType);
        };
        GTween.kill = function kill(target, complete, propType) {
          TweenManager.killTweens(target, complete, propType);
        };
        GTween.getTween = function getTween(target, propType) {
          return TweenManager.getTween(target, propType);
        };
        return GTween;
      }());
      GTween.catchCallbackExceptions = true;
      var GearLook = exports('GearLook', /*#__PURE__*/function (_GearBase7) {
        _inheritsLoose(GearLook, _GearBase7);
        function GearLook() {
          return _GearBase7.apply(this, arguments) || this;
        }
        var _proto13 = GearLook.prototype;
        _proto13.init = function init() {
          this._default = {
            alpha: this._owner.alpha,
            rotation: this._owner.rotation,
            grayed: this._owner.grayed,
            touchable: this._owner.touchable
          };
          this._storage = {};
        };
        _proto13.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.alpha = buffer.readFloat();
          gv.rotation = buffer.readFloat();
          gv.grayed = buffer.readBool();
          gv.touchable = buffer.readBool();
        };
        _proto13.apply = function apply() {
          var gv = this._storage[this._controller.selectedPageId] || this._default;
          if (this.allowTween) {
            this._owner._gearLocked = true;
            this._owner.grayed = gv.grayed;
            this._owner.touchable = gv.touchable;
            this._owner._gearLocked = false;
            if (this._tweenConfig._tweener) {
              if (this._tweenConfig._tweener.endValue.x != gv.alpha || this._tweenConfig._tweener.endValue.y != gv.rotation) {
                this._tweenConfig._tweener.kill(true);
                this._tweenConfig._tweener = null;
              } else return;
            }
            var a = gv.alpha != this._owner.alpha;
            var b = gv.rotation != this._owner.rotation;
            if (a || b) {
              if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
              this._tweenConfig._tweener = GTween.to2(this._owner.alpha, this._owner.rotation, gv.alpha, gv.rotation, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setUserData((a ? 1 : 0) + (b ? 2 : 0)).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
            }
          } else {
            this._owner._gearLocked = true;
            this._owner.grayed = gv.grayed;
            this._owner.alpha = gv.alpha;
            this._owner.rotation = gv.rotation;
            this._owner.touchable = gv.touchable;
            this._owner._gearLocked = false;
          }
        };
        _proto13.__tweenUpdate = function __tweenUpdate(tweener) {
          var flag = tweener.userData;
          this._owner._gearLocked = true;
          if ((flag & 1) != 0) this._owner.alpha = tweener.value.x;
          if ((flag & 2) != 0) this._owner.rotation = tweener.value.y;
          this._owner._gearLocked = false;
        };
        _proto13.__tweenComplete = function __tweenComplete() {
          if (this._tweenConfig._displayLockToken != 0) {
            this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);
            this._tweenConfig._displayLockToken = 0;
          }
          this._tweenConfig._tweener = null;
          if (this._controller) {
            this._controller.emit(Event.GEAR_STOP, this._owner, this._controller, this);
          }
        };
        _proto13.updateState = function updateState() {
          var gv = this._storage[this._controller.selectedPageId];
          if (!gv) {
            gv = {};
            this._storage[this._controller.selectedPageId] = gv;
          }
          gv.alpha = this._owner.alpha;
          gv.rotation = this._owner.rotation;
          gv.grayed = this._owner.grayed;
          gv.touchable = this._owner.touchable;
        };
        return GearLook;
      }(GearBase));
      var GearSize = exports('GearSize', /*#__PURE__*/function (_GearBase8) {
        _inheritsLoose(GearSize, _GearBase8);
        function GearSize() {
          return _GearBase8.apply(this, arguments) || this;
        }
        var _proto14 = GearSize.prototype;
        _proto14.init = function init() {
          this._default = {
            width: this._owner.width,
            height: this._owner.height,
            scaleX: this._owner.scaleX,
            scaleY: this._owner.scaleY
          };
          this._storage = {};
        };
        _proto14.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.width = buffer.readInt();
          gv.height = buffer.readInt();
          gv.scaleX = buffer.readFloat();
          gv.scaleY = buffer.readFloat();
        };
        _proto14.apply = function apply() {
          var gv = this._storage[this._controller.selectedPageId] || this._default;
          if (this.allowTween) {
            if (this._tweenConfig._tweener) {
              if (this._tweenConfig._tweener.endValue.x != gv.width || this._tweenConfig._tweener.endValue.y != gv.height || this._tweenConfig._tweener.endValue.z != gv.scaleX || this._tweenConfig._tweener.endValue.w != gv.scaleY) {
                this._tweenConfig._tweener.kill(true);
                this._tweenConfig._tweener = null;
              } else return;
            }
            var a = gv.width != this._owner.width || gv.height != this._owner.height;
            var b = gv.scaleX != this._owner.scaleX || gv.scaleY != this._owner.scaleY;
            if (a || b) {
              if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
              this._tweenConfig._tweener = GTween.to4(this._owner.width, this._owner.height, this._owner.scaleX, this._owner.scaleY, gv.width, gv.height, gv.scaleX, gv.scaleY, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setUserData((a ? 1 : 0) + (b ? 2 : 0)).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
            }
          } else {
            this._owner._gearLocked = true;
            this._owner.setSize(gv.width, gv.height, this._owner.checkGearController(1, this._controller));
            this._owner.setScale(gv.scaleX, gv.scaleY);
            this._owner._gearLocked = false;
          }
        };
        _proto14.__tweenUpdate = function __tweenUpdate(tweener) {
          var flag = tweener.userData;
          this._owner._gearLocked = true;
          if ((flag & 1) != 0) this._owner.setSize(tweener.value.x, tweener.value.y, this._owner.checkGearController(1, this._controller));
          if ((flag & 2) != 0) this._owner.setScale(tweener.value.z, tweener.value.w);
          this._owner._gearLocked = false;
        };
        _proto14.__tweenComplete = function __tweenComplete() {
          if (this._tweenConfig._displayLockToken != 0) {
            this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);
            this._tweenConfig._displayLockToken = 0;
          }
          this._tweenConfig._tweener = null;
          if (this._controller) {
            this._controller.emit(Event.GEAR_STOP, this._owner, this._controller, this);
          }
        };
        _proto14.updateState = function updateState() {
          var gv = this._storage[this._controller.selectedPageId];
          if (!gv) {
            gv = {};
            this._storage[this._controller.selectedPageId] = gv;
          }
          gv.width = this._owner.width;
          gv.height = this._owner.height;
          gv.scaleX = this._owner.scaleX;
          gv.scaleY = this._owner.scaleY;
        };
        _proto14.updateFromRelations = function updateFromRelations(dx, dy) {
          if (this._controller == null || this._storage == null) return;
          for (var key in this._storage) {
            var gv = this._storage[key];
            gv.width += dx;
            gv.height += dy;
          }
          this._default.width += dx;
          this._default.height += dy;
          this.updateState();
        };
        return GearSize;
      }(GearBase));
      var GearText = exports('GearText', /*#__PURE__*/function (_GearBase9) {
        _inheritsLoose(GearText, _GearBase9);
        function GearText() {
          return _GearBase9.apply(this, arguments) || this;
        }
        var _proto15 = GearText.prototype;
        _proto15.init = function init() {
          this._default = this._owner.text;
          this._storage = {};
        };
        _proto15.addStatus = function addStatus(pageId, buffer) {
          if (pageId == null) this._default = buffer.readS();else this._storage[pageId] = buffer.readS();
        };
        _proto15.apply = function apply() {
          this._owner._gearLocked = true;
          var data = this._storage[this._controller.selectedPageId];
          if (data !== undefined) this._owner.text = data;else this._owner.text = this._default;
          this._owner._gearLocked = false;
        };
        _proto15.updateState = function updateState() {
          this._storage[this._controller.selectedPageId] = this._owner.text;
        };
        return GearText;
      }(GearBase));
      var GearXY = exports('GearXY', /*#__PURE__*/function (_GearBase10) {
        _inheritsLoose(GearXY, _GearBase10);
        function GearXY() {
          return _GearBase10.apply(this, arguments) || this;
        }
        var _proto16 = GearXY.prototype;
        _proto16.init = function init() {
          this._default = {
            x: this._owner.x,
            y: this._owner.y,
            px: this._owner.x / this._owner.parent.width,
            py: this._owner.y / this._owner.parent.height
          };
          this._storage = {};
        };
        _proto16.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.x = buffer.readInt();
          gv.y = buffer.readInt();
        };
        _proto16.addExtStatus = function addExtStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else gv = this._storage[pageId];
          gv.px = buffer.readFloat();
          gv.py = buffer.readFloat();
        };
        _proto16.apply = function apply() {
          var pt = this._storage[this._controller.selectedPageId] || this._default;
          var ex;
          var ey;
          if (this.positionsInPercent && this._owner.parent) {
            ex = pt.px * this._owner.parent.width;
            ey = pt.py * this._owner.parent.height;
          } else {
            ex = pt.x;
            ey = pt.y;
          }
          if (this.allowTween) {
            if (this._tweenConfig._tweener) {
              if (this._tweenConfig._tweener.endValue.x != ex || this._tweenConfig._tweener.endValue.y != ey) {
                this._tweenConfig._tweener.kill(true);
                this._tweenConfig._tweener = null;
              } else return;
            }
            var ox = this._owner.x;
            var oy = this._owner.y;
            if (ox != ex || oy != ey) {
              if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
              this._tweenConfig._tweener = GTween.to2(ox, oy, ex, ey, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
            }
          } else {
            this._owner._gearLocked = true;
            this._owner.setPosition(ex, ey);
            this._owner._gearLocked = false;
          }
        };
        _proto16.__tweenUpdate = function __tweenUpdate(tweener) {
          this._owner._gearLocked = true;
          this._owner.setPosition(tweener.value.x, tweener.value.y);
          this._owner._gearLocked = false;
        };
        _proto16.__tweenComplete = function __tweenComplete() {
          if (this._tweenConfig._displayLockToken != 0) {
            this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);
            this._tweenConfig._displayLockToken = 0;
          }
          this._tweenConfig._tweener = null;
          if (this._controller) {
            this._controller.emit(Event.GEAR_STOP, this._owner, this._controller, this);
          }
        };
        _proto16.updateState = function updateState() {
          var pt = this._storage[this._controller.selectedPageId];
          if (!pt) {
            pt = {};
            this._storage[this._controller.selectedPageId] = pt;
          }
          pt.x = this._owner.x;
          pt.y = this._owner.y;
          pt.px = this._owner.x / this._owner.parent.width;
          pt.py = this._owner.y / this._owner.parent.height;
        };
        _proto16.updateFromRelations = function updateFromRelations(dx, dy) {
          if (this._controller == null || this._storage == null || this.positionsInPercent) return;
          for (var key in this._storage) {
            var pt = this._storage[key];
            pt.x += dx;
            pt.y += dy;
          }
          this._default.x += dx;
          this._default.y += dy;
          this.updateState();
        };
        return GearXY;
      }(GearBase));
      var RelationItem = /*#__PURE__*/function () {
        function RelationItem(owner) {
          this._owner = owner;
          this._defs = new Array();
        }
        var _proto17 = RelationItem.prototype;
        _proto17.add = function add(relationType, usePercent) {
          if (relationType == RelationType.Size) {
            this.add(RelationType.Width, usePercent);
            this.add(RelationType.Height, usePercent);
            return;
          }
          var length = this._defs.length;
          for (var i = 0; i < length; i++) {
            var def = this._defs[i];
            if (def.type == relationType) return;
          }
          this.internalAdd(relationType, usePercent);
        };
        _proto17.internalAdd = function internalAdd(relationType, usePercent) {
          if (relationType == RelationType.Size) {
            this.internalAdd(RelationType.Width, usePercent);
            this.internalAdd(RelationType.Height, usePercent);
            return;
          }
          var info = new RelationDef();
          info.percent = usePercent;
          info.type = relationType;
          info.axis = relationType <= RelationType.Right_Right || relationType == RelationType.Width || relationType >= RelationType.LeftExt_Left && relationType <= RelationType.RightExt_Right ? 0 : 1;
          this._defs.push(info);
        };
        _proto17.remove = function remove(relationType) {
          if (relationType == RelationType.Size) {
            this.remove(RelationType.Width);
            this.remove(RelationType.Height);
            return;
          }
          var dc = this._defs.length;
          for (var k = 0; k < dc; k++) {
            if (this._defs[k].type == relationType) {
              this._defs.splice(k, 1);
              break;
            }
          }
        };
        _proto17.copyFrom = function copyFrom(source) {
          this.target = source.target;
          this._defs.length = 0;
          var length = source._defs.length;
          for (var i = 0; i < length; i++) {
            var info = source._defs[i];
            var info2 = new RelationDef();
            info2.copyFrom(info);
            this._defs.push(info2);
          }
        };
        _proto17.dispose = function dispose() {
          if (this._target) {
            this.releaseRefTarget(this._target);
            this._target = null;
          }
        };
        _proto17.applyOnSelfResized = function applyOnSelfResized(dWidth, dHeight, applyPivot) {
          var ox = this._owner.x;
          var oy = this._owner.y;
          var length = this._defs.length;
          for (var i = 0; i < length; i++) {
            var info = this._defs[i];
            switch (info.type) {
              case RelationType.Center_Center:
                this._owner.x -= (0.5 - (applyPivot ? this._owner.pivotX : 0)) * dWidth;
                break;
              case RelationType.Right_Center:
              case RelationType.Right_Left:
              case RelationType.Right_Right:
                this._owner.x -= (1 - (applyPivot ? this._owner.pivotX : 0)) * dWidth;
                break;
              case RelationType.Middle_Middle:
                this._owner.y -= (0.5 - (applyPivot ? this._owner.pivotY : 0)) * dHeight;
                break;
              case RelationType.Bottom_Middle:
              case RelationType.Bottom_Top:
              case RelationType.Bottom_Bottom:
                this._owner.y -= (1 - (applyPivot ? this._owner.pivotY : 0)) * dHeight;
                break;
            }
          }
          if (ox != this._owner.x || oy != this._owner.y) {
            ox = this._owner.x - ox;
            oy = this._owner.y - oy;
            this._owner.updateGearFromRelations(1, ox, oy);
            if (this._owner.parent) {
              var len = this._owner.parent._transitions.length;
              if (len > 0) {
                for (var i = 0; i < len; ++i) {
                  this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                }
              }
            }
          }
        };
        _proto17.applyOnXYChanged = function applyOnXYChanged(info, dx, dy) {
          var tmp;
          switch (info.type) {
            case RelationType.Left_Left:
            case RelationType.Left_Center:
            case RelationType.Left_Right:
            case RelationType.Center_Center:
            case RelationType.Right_Left:
            case RelationType.Right_Center:
            case RelationType.Right_Right:
              this._owner.x += dx;
              break;
            case RelationType.Top_Top:
            case RelationType.Top_Middle:
            case RelationType.Top_Bottom:
            case RelationType.Middle_Middle:
            case RelationType.Bottom_Top:
            case RelationType.Bottom_Middle:
            case RelationType.Bottom_Bottom:
              this._owner.y += dy;
              break;
            case RelationType.Width:
            case RelationType.Height:
              break;
            case RelationType.LeftExt_Left:
            case RelationType.LeftExt_Right:
              if (this._owner != this._target.parent) {
                tmp = this._owner.xMin;
                this._owner.width = this._owner._rawWidth - dx;
                this._owner.xMin = tmp + dx;
              } else this._owner.width = this._owner._rawWidth - dx;
              break;
            case RelationType.RightExt_Left:
            case RelationType.RightExt_Right:
              if (this._owner != this._target.parent) {
                tmp = this._owner.xMin;
                this._owner.width = this._owner._rawWidth + dx;
                this._owner.xMin = tmp;
              } else this._owner.width = this._owner._rawWidth + dx;
              break;
            case RelationType.TopExt_Top:
            case RelationType.TopExt_Bottom:
              if (this._owner != this._target.parent) {
                tmp = this._owner.yMin;
                this._owner.height = this._owner._rawHeight - dy;
                this._owner.yMin = tmp + dy;
              } else this._owner.height = this._owner._rawHeight - dy;
              break;
            case RelationType.BottomExt_Top:
            case RelationType.BottomExt_Bottom:
              if (this._owner != this._target.parent) {
                tmp = this._owner.yMin;
                this._owner.height = this._owner._rawHeight + dy;
                this._owner.yMin = tmp;
              } else this._owner.height = this._owner._rawHeight + dy;
              break;
          }
        };
        _proto17.applyOnSizeChanged = function applyOnSizeChanged(info) {
          var pos = 0,
            pivot = 0,
            delta = 0;
          var v, tmp;
          if (info.axis == 0) {
            if (this._target != this._owner.parent) {
              pos = this._target.x;
              if (this._target.pivotAsAnchor) pivot = this._target.pivotX;
            }
            if (info.percent) {
              if (this._targetWidth != 0) delta = this._target._width / this._targetWidth;
            } else delta = this._target._width - this._targetWidth;
          } else {
            if (this._target != this._owner.parent) {
              pos = this._target.y;
              if (this._target.pivotAsAnchor) pivot = this._target.pivotY;
            }
            if (info.percent) {
              if (this._targetHeight != 0) delta = this._target._height / this._targetHeight;
            } else delta = this._target._height - this._targetHeight;
          }
          switch (info.type) {
            case RelationType.Left_Left:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else if (pivot != 0) this._owner.x += delta * -pivot;
              break;
            case RelationType.Left_Center:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else this._owner.x += delta * (0.5 - pivot);
              break;
            case RelationType.Left_Right:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else this._owner.x += delta * (1 - pivot);
              break;
            case RelationType.Center_Center:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth * 0.5 - pos) * delta - this._owner._rawWidth * 0.5;else this._owner.x += delta * (0.5 - pivot);
              break;
            case RelationType.Right_Left:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else if (pivot != 0) this._owner.x += delta * -pivot;
              break;
            case RelationType.Right_Center:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else this._owner.x += delta * (0.5 - pivot);
              break;
            case RelationType.Right_Right:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else this._owner.x += delta * (1 - pivot);
              break;
            case RelationType.Top_Top:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else if (pivot != 0) this._owner.y += delta * -pivot;
              break;
            case RelationType.Top_Middle:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else this._owner.y += delta * (0.5 - pivot);
              break;
            case RelationType.Top_Bottom:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else this._owner.y += delta * (1 - pivot);
              break;
            case RelationType.Middle_Middle:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight * 0.5 - pos) * delta - this._owner._rawHeight * 0.5;else this._owner.y += delta * (0.5 - pivot);
              break;
            case RelationType.Bottom_Top:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else if (pivot != 0) this._owner.y += delta * -pivot;
              break;
            case RelationType.Bottom_Middle:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else this._owner.y += delta * (0.5 - pivot);
              break;
            case RelationType.Bottom_Bottom:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else this._owner.y += delta * (1 - pivot);
              break;
            case RelationType.Width:
              if (this._owner._underConstruct && this._owner == this._target.parent) v = this._owner.sourceWidth - this._target.initWidth;else v = this._owner._rawWidth - this._targetWidth;
              if (info.percent) v = v * delta;
              if (this._target == this._owner.parent) {
                if (this._owner.pivotAsAnchor) {
                  tmp = this._owner.xMin;
                  this._owner.setSize(this._target._width + v, this._owner._rawHeight, true);
                  this._owner.xMin = tmp;
                } else this._owner.setSize(this._target._width + v, this._owner._rawHeight, true);
              } else this._owner.width = this._target._width + v;
              break;
            case RelationType.Height:
              if (this._owner._underConstruct && this._owner == this._target.parent) v = this._owner.sourceHeight - this._target.initHeight;else v = this._owner._rawHeight - this._targetHeight;
              if (info.percent) v = v * delta;
              if (this._target == this._owner.parent) {
                if (this._owner.pivotAsAnchor) {
                  tmp = this._owner.yMin;
                  this._owner.setSize(this._owner._rawWidth, this._target._height + v, true);
                  this._owner.yMin = tmp;
                } else this._owner.setSize(this._owner._rawWidth, this._target._height + v, true);
              } else this._owner.height = this._target._height + v;
              break;
            case RelationType.LeftExt_Left:
              tmp = this._owner.xMin;
              if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * -pivot;
              this._owner.width = this._owner._rawWidth - v;
              this._owner.xMin = tmp + v;
              break;
            case RelationType.LeftExt_Right:
              tmp = this._owner.xMin;
              if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * (1 - pivot);
              this._owner.width = this._owner._rawWidth - v;
              this._owner.xMin = tmp + v;
              break;
            case RelationType.RightExt_Left:
              tmp = this._owner.xMin;
              if (info.percent) v = pos + (tmp + this._owner._rawWidth - pos) * delta - (tmp + this._owner._rawWidth);else v = delta * -pivot;
              this._owner.width = this._owner._rawWidth + v;
              this._owner.xMin = tmp;
              break;
            case RelationType.RightExt_Right:
              tmp = this._owner.xMin;
              if (info.percent) {
                if (this._owner == this._target.parent) {
                  if (this._owner._underConstruct) this._owner.width = pos + this._target._width - this._target._width * pivot + (this._owner.sourceWidth - pos - this._target.initWidth + this._target.initWidth * pivot) * delta;else this._owner.width = pos + (this._owner._rawWidth - pos) * delta;
                } else {
                  v = pos + (tmp + this._owner._rawWidth - pos) * delta - (tmp + this._owner._rawWidth);
                  this._owner.width = this._owner._rawWidth + v;
                  this._owner.xMin = tmp;
                }
              } else {
                if (this._owner == this._target.parent) {
                  if (this._owner._underConstruct) this._owner.width = this._owner.sourceWidth + (this._target._width - this._target.initWidth) * (1 - pivot);else this._owner.width = this._owner._rawWidth + delta * (1 - pivot);
                } else {
                  v = delta * (1 - pivot);
                  this._owner.width = this._owner._rawWidth + v;
                  this._owner.xMin = tmp;
                }
              }
              break;
            case RelationType.TopExt_Top:
              tmp = this._owner.yMin;
              if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * -pivot;
              this._owner.height = this._owner._rawHeight - v;
              this._owner.yMin = tmp + v;
              break;
            case RelationType.TopExt_Bottom:
              tmp = this._owner.yMin;
              if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * (1 - pivot);
              this._owner.height = this._owner._rawHeight - v;
              this._owner.yMin = tmp + v;
              break;
            case RelationType.BottomExt_Top:
              tmp = this._owner.yMin;
              if (info.percent) v = pos + (tmp + this._owner._rawHeight - pos) * delta - (tmp + this._owner._rawHeight);else v = delta * -pivot;
              this._owner.height = this._owner._rawHeight + v;
              this._owner.yMin = tmp;
              break;
            case RelationType.BottomExt_Bottom:
              tmp = this._owner.yMin;
              if (info.percent) {
                if (this._owner == this._target.parent) {
                  if (this._owner._underConstruct) this._owner.height = pos + this._target._height - this._target._height * pivot + (this._owner.sourceHeight - pos - this._target.initHeight + this._target.initHeight * pivot) * delta;else this._owner.height = pos + (this._owner._rawHeight - pos) * delta;
                } else {
                  v = pos + (tmp + this._owner._rawHeight - pos) * delta - (tmp + this._owner._rawHeight);
                  this._owner.height = this._owner._rawHeight + v;
                  this._owner.yMin = tmp;
                }
              } else {
                if (this._owner == this._target.parent) {
                  if (this._owner._underConstruct) this._owner.height = this._owner.sourceHeight + (this._target._height - this._target.initHeight) * (1 - pivot);else this._owner.height = this._owner._rawHeight + delta * (1 - pivot);
                } else {
                  v = delta * (1 - pivot);
                  this._owner.height = this._owner._rawHeight + v;
                  this._owner.yMin = tmp;
                }
              }
              break;
          }
        };
        _proto17.addRefTarget = function addRefTarget(target) {
          if (target != this._owner.parent) target.on(Event.XY_CHANGED, this.__targetXYChanged, this);
          target.on(Event.SIZE_CHANGED, this.__targetSizeChanged, this);
          target.on(Event.SIZE_DELAY_CHANGE, this.__targetSizeWillChange, this);
          this._targetX = this._target.x;
          this._targetY = this._target.y;
          this._targetWidth = this._target._width;
          this._targetHeight = this._target._height;
        };
        _proto17.releaseRefTarget = function releaseRefTarget(target) {
          if (!target.node) return;
          target.off(Event.XY_CHANGED, this.__targetXYChanged, this);
          target.off(Event.SIZE_CHANGED, this.__targetSizeChanged, this);
          target.off(Event.SIZE_DELAY_CHANGE, this.__targetSizeWillChange, this);
        };
        _proto17.__targetXYChanged = function __targetXYChanged(evt) {
          if (this._owner.relations.handling != null || this._owner.group != null && this._owner.group._updating) {
            this._targetX = this._target.x;
            this._targetY = this._target.y;
            return;
          }
          this._owner.relations.handling = this._target;
          var ox = this._owner.x;
          var oy = this._owner.y;
          var dx = this._target.x - this._targetX;
          var dy = this._target.y - this._targetY;
          var length = this._defs.length;
          for (var i = 0; i < length; i++) {
            var info = this._defs[i];
            this.applyOnXYChanged(info, dx, dy);
          }
          this._targetX = this._target.x;
          this._targetY = this._target.y;
          if (ox != this._owner.x || oy != this._owner.y) {
            ox = this._owner.x - ox;
            oy = this._owner.y - oy;
            this._owner.updateGearFromRelations(1, ox, oy);
            if (this._owner.parent) {
              var len = this._owner.parent._transitions.length;
              if (len > 0) {
                for (var i = 0; i < len; ++i) {
                  this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                }
              }
            }
          }
          this._owner.relations.handling = null;
        };
        _proto17.__targetSizeChanged = function __targetSizeChanged(evt) {
          if (this._owner.relations.handling != null) return;
          this._owner.relations.handling = this._target;
          var ox = this._owner.x;
          var oy = this._owner.y;
          var ow = this._owner._rawWidth;
          var oh = this._owner._rawHeight;
          var length = this._defs.length;
          for (var i = 0; i < length; i++) {
            var info = this._defs[i];
            this.applyOnSizeChanged(info);
          }
          this._targetWidth = this._target._width;
          this._targetHeight = this._target._height;
          if (ox != this._owner.x || oy != this._owner.y) {
            ox = this._owner.x - ox;
            oy = this._owner.y - oy;
            this._owner.updateGearFromRelations(1, ox, oy);
            if (this._owner.parent) {
              var len = this._owner.parent._transitions.length;
              if (len > 0) {
                for (var i = 0; i < len; ++i) {
                  this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                }
              }
            }
          }
          if (ow != this._owner._rawWidth || oh != this._owner._rawHeight) {
            ow = this._owner._rawWidth - ow;
            oh = this._owner._rawHeight - oh;
            this._owner.updateGearFromRelations(2, ow, oh);
          }
          this._owner.relations.handling = null;
        };
        _proto17.__targetSizeWillChange = function __targetSizeWillChange(evt) {
          this._owner.relations.sizeDirty = true;
        };
        _createClass(RelationItem, [{
          key: "owner",
          get: function get() {
            return this._owner;
          }
        }, {
          key: "target",
          get: function get() {
            return this._target;
          },
          set: function set(value) {
            if (this._target != value) {
              if (this._target) this.releaseRefTarget(this._target);
              this._target = value;
              if (this._target) this.addRefTarget(this._target);
            }
          }
        }, {
          key: "isEmpty",
          get: function get() {
            return this._defs.length == 0;
          }
        }]);
        return RelationItem;
      }();
      var RelationDef = /*#__PURE__*/function () {
        function RelationDef() {
          this.percent = false;
          this.type = 0;
          this.axis = 0;
        }
        var _proto18 = RelationDef.prototype;
        _proto18.copyFrom = function copyFrom(source) {
          this.percent = source.percent;
          this.type = source.type;
          this.axis = source.axis;
        };
        return RelationDef;
      }();
      var Relations = /*#__PURE__*/function () {
        function Relations(owner) {
          this.sizeDirty = false;
          this._owner = owner;
          this._items = new Array();
        }
        var _proto19 = Relations.prototype;
        _proto19.add = function add(target, relationType, usePercent) {
          var length = this._items.length;
          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            if (item.target == target) {
              item.add(relationType, usePercent);
              return;
            }
          }
          var newItem = new RelationItem(this._owner);
          newItem.target = target;
          newItem.add(relationType, usePercent);
          this._items.push(newItem);
        };
        _proto19.remove = function remove(target, relationType) {
          relationType = relationType || 0;
          var cnt = this._items.length;
          var i = 0;
          while (i < cnt) {
            var item = this._items[i];
            if (item.target == target) {
              item.remove(relationType);
              if (item.isEmpty) {
                item.dispose();
                this._items.splice(i, 1);
                cnt--;
              } else i++;
            } else i++;
          }
        };
        _proto19.contains = function contains(target) {
          var length = this._items.length;
          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            if (item.target == target) return true;
          }
          return false;
        };
        _proto19.clearFor = function clearFor(target) {
          var cnt = this._items.length;
          var i = 0;
          while (i < cnt) {
            var item = this._items[i];
            if (item.target == target) {
              item.dispose();
              this._items.splice(i, 1);
              cnt--;
            } else i++;
          }
        };
        _proto19.clearAll = function clearAll() {
          var length = this._items.length;
          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            item.dispose();
          }
          this._items.length = 0;
        };
        _proto19.copyFrom = function copyFrom(source) {
          this.clearAll();
          var arr = source._items;
          var length = arr.length;
          for (var i = 0; i < length; i++) {
            var ri = arr[i];
            var item = new RelationItem(this._owner);
            item.copyFrom(ri);
            this._items.push(item);
          }
        };
        _proto19.dispose = function dispose() {
          this.clearAll();
        };
        _proto19.onOwnerSizeChanged = function onOwnerSizeChanged(dWidth, dHeight, applyPivot) {
          if (this._items.length == 0) return;
          var length = this._items.length;
          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            item.applyOnSelfResized(dWidth, dHeight, applyPivot);
          }
        };
        _proto19.ensureRelationsSizeCorrect = function ensureRelationsSizeCorrect() {
          if (this._items.length == 0) return;
          this.sizeDirty = false;
          var length = this._items.length;
          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            item.target.ensureSizeCorrect();
          }
        };
        _proto19.setup = function setup(buffer, parentToChild) {
          var cnt = buffer.readByte();
          var target;
          for (var i = 0; i < cnt; i++) {
            var targetIndex = buffer.readShort();
            if (targetIndex == -1) target = this._owner.parent;else if (parentToChild) target = this._owner.getChildAt(targetIndex);else target = this._owner.parent.getChildAt(targetIndex);
            var newItem = new RelationItem(this._owner);
            newItem.target = target;
            this._items.push(newItem);
            var cnt2 = buffer.readByte();
            for (var j = 0; j < cnt2; j++) {
              var rt = buffer.readByte();
              var usePercent = buffer.readBool();
              newItem.internalAdd(rt, usePercent);
            }
          }
        };
        _createClass(Relations, [{
          key: "empty",
          get: function get() {
            return this._items.length == 0;
          }
        }]);
        return Relations;
      }();
      var UIConfig = exports('UIConfig', function UIConfig() {}); //Default font name
      UIConfig.defaultFont = "Arial"; //When a modal window is in front, the background becomes dark.
      UIConfig.modalLayerColor = new Color(0x33, 0x33, 0x33, 0x33);
      UIConfig.buttonSoundVolumeScale = 1; //Scrolling step in pixels
      UIConfig.defaultScrollStep = 25; //Deceleration ratio of scrollpane when its in touch dragging.
      UIConfig.defaultScrollDecelerationRate = 0.967; //Default scrollbar display mode. Recommened visible for Desktop and Auto for mobile.
      UIConfig.defaultScrollBarDisplay = ScrollBarDisplayType.Visible; //Allow dragging the content to scroll. Recommeded true for mobile.
      UIConfig.defaultScrollTouchEffect = true; //The "rebound" effect in the scolling container. Recommeded true for mobile.
      UIConfig.defaultScrollBounceEffect = true; //Max items displayed in combobox without scrolling.
      UIConfig.defaultComboBoxVisibleItemCount = 10; // Pixel offsets of finger to trigger scrolling.
      UIConfig.touchScrollSensitivity = 10; // Pixel offsets of finger to trigger dragging.
      UIConfig.touchDragSensitivity = 10; // Pixel offsets of mouse pointer to trigger dragging.
      UIConfig.clickDragSensitivity = 2; // When click the window, brings to front automatically.
      UIConfig.bringWindowToFrontOnClick = true;
      UIConfig.frameTimeForAsyncUIConstruction = 0.002;
      UIConfig.linkUnderline = true; //Default group name of UI node.<br/>
      UIConfig.defaultUILayer = Layers.Enum.UI_2D;
      UIConfig.defaultBundle = resources;
      var _fontRegistry = {};
      function registerFont(name, font, bundle) {
        if (font instanceof Font) _fontRegistry[name] = font;else {
          (bundle || resources).load(font || name, Font, function (err, asset) {
            _fontRegistry[name] = asset;
          });
        }
      }
      function getFontByName(name) {
        return _fontRegistry[name];
      }
      var UIContentScaler = exports('UIContentScaler', function UIContentScaler() {});
      UIContentScaler.scaleFactor = 1;
      UIContentScaler.scaleLevel = 0;
      UIContentScaler.rootSize = new Size();
      function updateScaler() {
        var size = screen.windowSize;
        size.width /= view.getScaleX();
        size.height /= view.getScaleY();
        UIContentScaler.rootSize.set(size);
        var ss = Math.max(view.getScaleX(), view.getScaleY());
        UIContentScaler.scaleFactor = ss;
        if (ss >= 3.5) UIContentScaler.scaleLevel = 3; //x4
        else if (ss >= 2.5) UIContentScaler.scaleLevel = 2; //x3
        else if (ss >= 1.5) UIContentScaler.scaleLevel = 1; //x2
        else UIContentScaler.scaleLevel = 0;
      }
      var GObject = exports('GObject', /*#__PURE__*/function () {
        function GObject() {
          this._x = 0;
          this._y = 0;
          this._alpha = 1;
          this._visible = true;
          this._touchable = true;
          this._skewX = 0;
          this._skewY = 0;
          this._sortingOrder = 0;
          this._internalVisible = true;
          this.sourceWidth = 0;
          this.sourceHeight = 0;
          this.initWidth = 0;
          this.initHeight = 0;
          this.minWidth = 0;
          this.minHeight = 0;
          this.maxWidth = 0;
          this.maxHeight = 0;
          this._width = 0;
          this._height = 0;
          this._rawWidth = 0;
          this._rawHeight = 0;
          this._underConstruct = false;
          this._sizePercentInGroup = 0;
          this._node = new Node();
          this._uiTrans = this._node.addComponent(UITransform);
          this._uiOpacity = this.node.addComponent(UIOpacity);
          this._node["$gobj"] = this;
          this._node.layer = UIConfig.defaultUILayer;
          this._uiTrans.setAnchorPoint(0, 1);
          this._node.on(Node.EventType.ANCHOR_CHANGED, this.handleAnchorChanged, this);
          this._id = this._node.uuid;
          this._name = "";
          this._relations = new Relations(this);
          this._gears = new Array(10);
          this._blendMode = BlendMode.Normal;
          this._partner = this._node.addComponent(GObjectPartner);
        }
        var _proto20 = GObject.prototype;
        _proto20.setPosition = function setPosition(xv, yv) {
          if (this._x != xv || this._y != yv) {
            var dx = xv - this._x;
            var dy = yv - this._y;
            this._x = xv;
            this._y = yv;
            this.handlePositionChanged();
            if (this instanceof GGroup) this.moveChildren(dx, dy);
            this.updateGear(1);
            if (this._parent && !("setVirtual" in this._parent) /*not list*/) {
              this._parent.setBoundsChangedFlag();
              if (this._group) this._group.setBoundsChangedFlag(true);
              this._node.emit(Event.XY_CHANGED, this);
            }
            if (GObject.draggingObject == this && !s_dragging) this.localToGlobalRect(0, 0, this._width, this._height, sGlobalRect);
          }
        };
        _proto20.center = function center(restraint) {
          var r;
          if (this._parent) r = this.parent;else r = Decls$1.GRoot.getInstance(this);
          this.setPosition((r.width - this._width) / 2, (r.height - this._height) / 2);
          if (restraint) {
            this.addRelation(r, RelationType.Center_Center);
            this.addRelation(r, RelationType.Middle_Middle);
          }
        };
        _proto20.setSize = function setSize(wv, hv, ignorePivot) {
          if (this._rawWidth != wv || this._rawHeight != hv) {
            this._rawWidth = wv;
            this._rawHeight = hv;
            if (wv < this.minWidth) wv = this.minWidth;
            if (hv < this.minHeight) hv = this.minHeight;
            if (this.maxWidth > 0 && wv > this.maxWidth) wv = this.maxWidth;
            if (this.maxHeight > 0 && hv > this.maxHeight) hv = this.maxHeight;
            var dWidth = wv - this._width;
            var dHeight = hv - this._height;
            this._width = wv;
            this._height = hv;
            this.handleSizeChanged();
            if ((this._uiTrans.anchorX != 0 || this._uiTrans.anchorY != 1) && !this._pivotAsAnchor && !ignorePivot) this.setPosition(this.x - this._uiTrans.anchorX * dWidth, this.y - (1 - this._uiTrans.anchorY) * dHeight);else this.handlePositionChanged();
            if (this instanceof GGroup) this.resizeChildren(dWidth, dHeight);
            this.updateGear(2);
            if (this._parent) {
              this._relations.onOwnerSizeChanged(dWidth, dHeight, this._pivotAsAnchor || !ignorePivot);
              this._parent.setBoundsChangedFlag();
              if (this._group) this._group.setBoundsChangedFlag();
            }
            this._node.emit(Event.SIZE_CHANGED, this);
          }
        };
        _proto20.makeFullScreen = function makeFullScreen() {
          var groot = Decls$1.GRoot.getInstance(this);
          this.setSize(groot.width, groot.height);
        };
        _proto20.ensureSizeCorrect = function ensureSizeCorrect() {};
        _proto20.setScale = function setScale(sx, sy) {
          if (this._node.scale.x != sx || this._node.scale.y != sy) {
            this._node.setScale(sx, sy);
            this.updateGear(2);
          }
        };
        _proto20.setPivot = function setPivot(xv, yv, asAnchor) {
          if (this._uiTrans.anchorX != xv || this._uiTrans.anchorY != 1 - yv) {
            this._pivotAsAnchor = asAnchor;
            this._uiTrans.setAnchorPoint(xv, 1 - yv);
          } else if (this._pivotAsAnchor != asAnchor) {
            this._pivotAsAnchor = asAnchor;
            this.handlePositionChanged();
          }
        };
        _proto20.requestFocus = function requestFocus() {};
        _proto20.getGear = function getGear(index) {
          var gear = this._gears[index];
          if (!gear) this._gears[index] = gear = createGear(this, index);
          return gear;
        };
        _proto20.updateGear = function updateGear(index) {
          if (this._underConstruct || this._gearLocked) return;
          var gear = this._gears[index];
          if (gear && gear.controller) gear.updateState();
        };
        _proto20.checkGearController = function checkGearController(index, c) {
          return this._gears[index] && this._gears[index].controller == c;
        };
        _proto20.updateGearFromRelations = function updateGearFromRelations(index, dx, dy) {
          if (this._gears[index]) this._gears[index].updateFromRelations(dx, dy);
        };
        _proto20.addDisplayLock = function addDisplayLock() {
          var gearDisplay = this._gears[0];
          if (gearDisplay && gearDisplay.controller) {
            var ret = gearDisplay.addLock();
            this.checkGearDisplay();
            return ret;
          } else return 0;
        };
        _proto20.releaseDisplayLock = function releaseDisplayLock(token) {
          var gearDisplay = this._gears[0];
          if (gearDisplay && gearDisplay.controller) {
            gearDisplay.releaseLock(token);
            this.checkGearDisplay();
          }
        };
        _proto20.checkGearDisplay = function checkGearDisplay() {
          if (this._handlingController) return;
          var connected = this._gears[0] == null || this._gears[0].connected;
          if (this._gears[8]) connected = this._gears[8].evaluate(connected);
          if (connected != this._internalVisible) {
            this._internalVisible = connected;
            this.handleVisibleChanged();
            if (this._group && this._group.excludeInvisibles) this._group.setBoundsChangedFlag();
          }
        };
        _proto20.addRelation = function addRelation(target, relationType, usePercent) {
          this._relations.add(target, relationType, usePercent);
        };
        _proto20.removeRelation = function removeRelation(target, relationType) {
          this._relations.remove(target, relationType);
        };
        _proto20.removeFromParent = function removeFromParent() {
          if (this._parent) this._parent.removeChild(this);
        };
        _proto20.findParent = function findParent() {
          if (this._parent) return this._parent; //可能有些不直接在children里，但node挂着的
          var pn = this._node.parent;
          while (pn) {
            var gobj = pn["$gobj"];
            if (gobj) return gobj;
            pn = pn.parent;
          }
          return null;
        };
        GObject.cast = function cast(obj) {
          return obj["$gobj"];
        };
        _proto20.dispose = function dispose() {
          Tween.stopAllByTarget(this);
          var n = this._node;
          if (!n) return;
          this.removeFromParent();
          this._relations.dispose();
          this._node = null;
          n.destroy();
          for (var i = 0; i < 10; i++) {
            var gear = this._gears[i];
            if (gear) gear.dispose();
          }
        };
        _proto20.onEnable = function onEnable() {};
        _proto20.onDisable = function onDisable() {};
        _proto20.onUpdate = function onUpdate() {};
        _proto20.onDestroy = function onDestroy() {};
        _proto20.onClick = function onClick(listener, target) {
          this._node.on(Event.CLICK, listener, target);
        };
        _proto20.onceClick = function onceClick(listener, target) {
          this._node.once(Event.CLICK, listener, target);
        };
        _proto20.offClick = function offClick(listener, target) {
          this._node.off(Event.CLICK, listener, target);
        };
        _proto20.clearClick = function clearClick() {
          this._node.off(Event.CLICK);
        };
        _proto20.hasClickListener = function hasClickListener() {
          return this._node.hasEventListener(Event.CLICK);
        };
        _proto20.on = function on(type, listener, target) {
          if (type == Event.DISPLAY || type == Event.UNDISPLAY) this._partner._emitDisplayEvents = true;
          this._node.on(type, listener, target);
        };
        _proto20.once = function once(type, listener, target) {
          if (type == Event.DISPLAY || type == Event.UNDISPLAY) this._partner._emitDisplayEvents = true;
          this._node.once(type, listener, target);
        };
        _proto20.off = function off(type, listener, target) {
          this._node.off(type, listener, target);
        };
        _proto20.startDrag = function startDrag(touchId) {
          if (!this._node.activeInHierarchy) return;
          this.dragBegin(touchId);
        };
        _proto20.stopDrag = function stopDrag() {
          this.dragEnd();
        };
        _proto20.localToGlobal = function localToGlobal(ax, ay, result) {
          ax = ax || 0;
          ay = ay || 0;
          s_vec3$1.x = ax;
          s_vec3$1.y = -ay;
          if (!this._pivotAsAnchor) {
            s_vec3$1.x -= this._uiTrans.anchorX * this._width;
            s_vec3$1.y += (1 - this._uiTrans.anchorY) * this._height;
          }
          this._uiTrans.convertToWorldSpaceAR(s_vec3$1, s_vec3$1);
          s_vec3$1.y = UIContentScaler.rootSize.height - s_vec3$1.y;
          result = result || new Vec2();
          result.x = s_vec3$1.x;
          result.y = s_vec3$1.y;
          return result;
        };
        _proto20.globalToLocal = function globalToLocal(ax, ay, result) {
          ax = ax || 0;
          ay = ay || 0;
          s_vec3$1.x = ax;
          s_vec3$1.y = UIContentScaler.rootSize.height - ay;
          this._uiTrans.convertToNodeSpaceAR(s_vec3$1, s_vec3$1);
          if (!this._pivotAsAnchor) {
            s_vec3$1.x += this._uiTrans.anchorX * this._width;
            s_vec3$1.y -= (1 - this._uiTrans.anchorY) * this._height;
          }
          result = result || new Vec2();
          result.x = s_vec3$1.x;
          result.y = -s_vec3$1.y;
          return result;
        };
        _proto20.localToGlobalRect = function localToGlobalRect(ax, ay, aw, ah, result) {
          ax = ax || 0;
          ay = ay || 0;
          aw = aw || 0;
          ah = ah || 0;
          result = result || new Rect();
          var pt = this.localToGlobal(ax, ay);
          result.x = pt.x;
          result.y = pt.y;
          pt = this.localToGlobal(ax + aw, ay + ah, pt);
          result.xMax = pt.x;
          result.yMax = pt.y;
          return result;
        };
        _proto20.globalToLocalRect = function globalToLocalRect(ax, ay, aw, ah, result) {
          ax = ax || 0;
          ay = ay || 0;
          aw = aw || 0;
          ah = ah || 0;
          result = result || new Rect();
          var pt = this.globalToLocal(ax, ay);
          result.x = pt.x;
          result.y = pt.y;
          pt = this.globalToLocal(ax + aw, ay + ah, pt);
          result.xMax = pt.x;
          result.yMax = pt.y;
          return result;
        };
        _proto20.handleControllerChanged = function handleControllerChanged(c) {
          this._handlingController = true;
          for (var i = 0; i < 10; i++) {
            var gear = this._gears[i];
            if (gear && gear.controller == c) gear.apply();
          }
          this._handlingController = false;
          this.checkGearDisplay();
        };
        _proto20.handleAnchorChanged = function handleAnchorChanged() {
          this.handlePositionChanged();
        };
        _proto20.handlePositionChanged = function handlePositionChanged() {
          if (!this._node || !this._node.isValid) return;
          var xv = this._x;
          var yv = -this._y;
          if (!this._pivotAsAnchor) {
            xv += this._uiTrans.anchorX * this._width;
            yv -= (1 - this._uiTrans.anchorY) * this._height;
          }
          if (this._pixelSnapping) {
            xv = Math.round(xv);
            yv = Math.round(yv);
          }
          this._node.setPosition(xv, yv);
        };
        _proto20.handleSizeChanged = function handleSizeChanged() {
          this._uiTrans.setContentSize(this._width, this._height);
        };
        _proto20.handleGrayedChanged = function handleGrayedChanged() {//nothing is base
        };
        _proto20.handleVisibleChanged = function handleVisibleChanged() {
          this._node.active = this._finalVisible;
          if (this instanceof GGroup) this.handleVisibleChanged();
          if (this._parent) this._parent.setBoundsChangedFlag();
        };
        _proto20.hitTest = function hitTest(globalPt, forTouch) {
          if (forTouch == null) forTouch = true;
          if (forTouch && (this._touchDisabled || !this._touchable || !this._node.activeInHierarchy)) return null;
          if (!this._hitTestPt) this._hitTestPt = new Vec2();
          this.globalToLocal(globalPt.x, globalPt.y, this._hitTestPt);
          if (this._pivotAsAnchor) {
            this._hitTestPt.x += this._uiTrans.anchorX * this._width;
            this._hitTestPt.y += (1 - this._uiTrans.anchorY) * this._height;
          }
          return this._hitTest(this._hitTestPt, globalPt);
        };
        _proto20._hitTest = function _hitTest(pt, globalPt) {
          if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) return this;else return null;
        };
        _proto20.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Text:
              return this.text;
            case ObjectPropID.Icon:
              return this.icon;
            case ObjectPropID.Color:
              return null;
            case ObjectPropID.OutlineColor:
              return null;
            case ObjectPropID.Playing:
              return false;
            case ObjectPropID.Frame:
              return 0;
            case ObjectPropID.DeltaTime:
              return 0;
            case ObjectPropID.TimeScale:
              return 1;
            case ObjectPropID.FontSize:
              return 0;
            case ObjectPropID.Selected:
              return false;
            default:
              return undefined;
          }
        };
        _proto20.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Text:
              this.text = value;
              break;
            case ObjectPropID.Icon:
              this.icon = value;
              break;
          }
        };
        _proto20.constructFromResource = function constructFromResource() {};
        _proto20.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          buffer.seek(beginPos, 0);
          buffer.skip(5);
          var f1;
          var f2;
          this._id = buffer.readS();
          this.name = buffer.readS();
          f1 = buffer.readInt();
          f2 = buffer.readInt();
          this.setPosition(f1, f2);
          if (buffer.readBool()) {
            this.initWidth = buffer.readInt();
            this.initHeight = buffer.readInt();
            this.setSize(this.initWidth, this.initHeight, true);
          }
          if (buffer.readBool()) {
            this.minWidth = buffer.readInt();
            this.maxWidth = buffer.readInt();
            this.minHeight = buffer.readInt();
            this.maxHeight = buffer.readInt();
          }
          if (buffer.readBool()) {
            f1 = buffer.readFloat();
            f2 = buffer.readFloat();
            this.setScale(f1, f2);
          }
          if (buffer.readBool()) {
            f1 = buffer.readFloat();
            f2 = buffer.readFloat(); //this.setSkew(f1, f2);
          }
          if (buffer.readBool()) {
            f1 = buffer.readFloat();
            f2 = buffer.readFloat();
            this.setPivot(f1, f2, buffer.readBool());
          }
          f1 = buffer.readFloat();
          if (f1 != 1) this.alpha = f1;
          f1 = buffer.readFloat();
          if (f1 != 0) this.rotation = f1;
          if (!buffer.readBool()) this.visible = false;
          if (!buffer.readBool()) this.touchable = false;
          if (buffer.readBool()) this.grayed = true;
          this.blendMode = buffer.readByte();
          buffer.readByte();
          var str = buffer.readS();
          if (str != null) {
            this.data = str;
            if (UIConfig.onUserData) {
              UIConfig.onUserData(this);
            }
          }
        };
        _proto20.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          buffer.seek(beginPos, 1);
          var str = buffer.readS();
          if (str != null) this.tooltips = str;
          var groupId = buffer.readShort();
          if (groupId >= 0) this.group = this.parent.getChildAt(groupId);
          buffer.seek(beginPos, 2);
          var cnt = buffer.readShort();
          for (var i = 0; i < cnt; i++) {
            var nextPos = buffer.readShort();
            nextPos += buffer.position;
            var gear = this.getGear(buffer.readByte());
            gear.setup(buffer);
            buffer.position = nextPos;
          }
        } //toolTips support
        ;
        _proto20.onRollOver = function onRollOver() {
          var groot = Decls$1.GRoot.getInstance(this);
          groot.showTooltips(this.tooltips);
        };
        _proto20.onRollOut = function onRollOut() {
          var groot = Decls$1.GRoot.getInstance(this);
          groot.hideTooltips();
        }; //drag support
        //-------------------------------------------------------------------
        _proto20.initDrag = function initDrag() {
          if (this._draggable) {
            this.on(Event.TOUCH_BEGIN, this.onTouchBegin_0, this);
            this.on(Event.TOUCH_MOVE, this.onTouchMove_0, this);
            this.on(Event.TOUCH_END, this.onTouchEnd_0, this);
          } else {
            this.off(Event.TOUCH_BEGIN, this.onTouchBegin_0, this);
            this.off(Event.TOUCH_MOVE, this.onTouchMove_0, this);
            this.off(Event.TOUCH_END, this.onTouchEnd_0, this);
          }
        };
        _proto20.dragBegin = function dragBegin(touchId) {
          if (GObject.draggingObject) {
            var tmp = GObject.draggingObject;
            tmp.stopDrag();
            GObject.draggingObject = null;
            tmp._node.emit(Event.DRAG_END);
          }
          var groot = Decls$1.GRoot.getInstance(this);
          if (touchId == undefined) touchId = groot.inputProcessor.getAllTouches()[0];
          sGlobalDragStart.set(groot.getTouchPosition(touchId));
          this.localToGlobalRect(0, 0, this._width, this._height, sGlobalRect);
          GObject.draggingObject = this;
          this._dragTesting = false;
          groot.inputProcessor.addTouchMonitor(touchId, this);
          this.on(Event.TOUCH_MOVE, this.onTouchMove_0, this);
          this.on(Event.TOUCH_END, this.onTouchEnd_0, this);
        };
        _proto20.dragEnd = function dragEnd() {
          if (GObject.draggingObject == this) {
            this._dragTesting = false;
            GObject.draggingObject = null;
          }
          s_dragQuery = false;
        };
        _proto20.onTouchBegin_0 = function onTouchBegin_0(evt) {
          if (this._dragStartPos == null) this._dragStartPos = new Vec2();
          this._dragStartPos.set(evt.pos);
          this._dragTesting = true;
          evt.captureTouch();
        };
        _proto20.onTouchMove_0 = function onTouchMove_0(evt) {
          if (GObject.draggingObject != this && this._draggable && this._dragTesting) {
            var sensitivity = UIConfig.touchDragSensitivity;
            if (this._dragStartPos && Math.abs(this._dragStartPos.x - evt.pos.x) < sensitivity && Math.abs(this._dragStartPos.y - evt.pos.y) < sensitivity) return;
            this._dragTesting = false;
            s_dragQuery = true;
            this._node.emit(Event.DRAG_START, evt);
            if (s_dragQuery) this.dragBegin(evt.touchId);
          }
          if (GObject.draggingObject == this) {
            var xx = evt.pos.x - sGlobalDragStart.x + sGlobalRect.x;
            var yy = evt.pos.y - sGlobalDragStart.y + sGlobalRect.y;
            if (this._dragBounds) {
              var groot = Decls$1.GRoot.getInstance(this);
              var rect = groot.localToGlobalRect(this._dragBounds.x, this._dragBounds.y, this._dragBounds.width, this._dragBounds.height, s_rect$1);
              if (xx < rect.x) xx = rect.x;else if (xx + sGlobalRect.width > rect.xMax) {
                xx = rect.xMax - sGlobalRect.width;
                if (xx < rect.x) xx = rect.x;
              }
              if (yy < rect.y) yy = rect.y;else if (yy + sGlobalRect.height > rect.yMax) {
                yy = rect.yMax - sGlobalRect.height;
                if (yy < rect.y) yy = rect.y;
              }
            }
            s_dragging = true;
            var pt = this.parent.globalToLocal(xx, yy, s_vec2$4);
            this.setPosition(Math.round(pt.x), Math.round(pt.y));
            s_dragging = false;
            this._node.emit(Event.DRAG_MOVE, evt);
          }
        };
        _proto20.onTouchEnd_0 = function onTouchEnd_0(evt) {
          if (GObject.draggingObject == this) {
            GObject.draggingObject = null;
            this._node.emit(Event.DRAG_END, evt);
          }
        };
        _createClass(GObject, [{
          key: "id",
          get: function get() {
            return this._id;
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(value) {
            this._name = value || ""; // this._node.name = value || "";
            if (this._node) {
              this._node.name = this._name;
            }
          }
        }, {
          key: "x",
          get: function get() {
            return this._x;
          },
          set: function set(value) {
            this.setPosition(value, this._y);
          }
        }, {
          key: "y",
          get: function get() {
            return this._y;
          },
          set: function set(value) {
            this.setPosition(this._x, value);
          }
        }, {
          key: "xMin",
          get: function get() {
            return this._pivotAsAnchor ? this._x - this._width * this._uiTrans.anchorX : this._x;
          },
          set: function set(value) {
            if (this._pivotAsAnchor) this.setPosition(value + this._width * this._uiTrans.anchorX, this._y);else this.setPosition(value, this._y);
          }
        }, {
          key: "yMin",
          get: function get() {
            return this._pivotAsAnchor ? this._y - this._height * (1 - this._uiTrans.anchorY) : this._y;
          },
          set: function set(value) {
            if (this._pivotAsAnchor) this.setPosition(this._x, value + this._height * (1 - this._uiTrans.anchorY));else this.setPosition(this._x, value);
          }
        }, {
          key: "pixelSnapping",
          get: function get() {
            return this._pixelSnapping;
          },
          set: function set(value) {
            if (this._pixelSnapping != value) {
              this._pixelSnapping = value;
              this.handlePositionChanged();
            }
          }
        }, {
          key: "width",
          get: function get() {
            this.ensureSizeCorrect();
            if (this._relations.sizeDirty) this._relations.ensureRelationsSizeCorrect();
            return this._width;
          },
          set: function set(value) {
            this.setSize(value, this._rawHeight);
          }
        }, {
          key: "height",
          get: function get() {
            this.ensureSizeCorrect();
            if (this._relations.sizeDirty) this._relations.ensureRelationsSizeCorrect();
            return this._height;
          },
          set: function set(value) {
            this.setSize(this._rawWidth, value);
          }
        }, {
          key: "actualWidth",
          get: function get() {
            return this.width * Math.abs(this._node.scale.x);
          }
        }, {
          key: "actualHeight",
          get: function get() {
            return this.height * Math.abs(this._node.scale.y);
          }
        }, {
          key: "scaleX",
          get: function get() {
            return this._node.scale.x;
          },
          set: function set(value) {
            this.setScale(value, this._node.scale.y);
          }
        }, {
          key: "scaleY",
          get: function get() {
            return this._node.scale.y;
          },
          set: function set(value) {
            this.setScale(this._node.scale.x, value);
          }
        }, {
          key: "skewX",
          get: function get() {
            return this._skewX;
          }
        }, {
          key: "pivotX",
          get: function get() {
            return this._uiTrans.anchorX;
          },
          set: function set(value) {
            this._uiTrans.anchorX = value;
          }
        }, {
          key: "pivotY",
          get: function get() {
            return 1 - this._uiTrans.anchorY;
          },
          set: function set(value) {
            this._uiTrans.anchorY = 1 - value;
          }
        }, {
          key: "pivotAsAnchor",
          get: function get() {
            return this._pivotAsAnchor;
          }
        }, {
          key: "touchable",
          get: function get() {
            return this._touchable;
          },
          set: function set(value) {
            if (this._touchable != value) {
              this._touchable = value;
              this.updateGear(3);
            }
          }
        }, {
          key: "grayed",
          get: function get() {
            return this._grayed;
          },
          set: function set(value) {
            if (this._grayed != value) {
              this._grayed = value;
              this.handleGrayedChanged();
              this.updateGear(3);
            }
          }
        }, {
          key: "enabled",
          get: function get() {
            return !this._grayed && this._touchable;
          },
          set: function set(value) {
            this.grayed = !value;
            this.touchable = value;
          }
        }, {
          key: "rotation",
          get: function get() {
            return -this._node.angle;
          },
          set: function set(value) {
            value = -value;
            if (this._node.angle != value) {
              this._node.angle = value;
              this.updateGear(3);
            }
          }
        }, {
          key: "alpha",
          get: function get() {
            return this._alpha;
          },
          set: function set(value) {
            if (this._alpha != value) {
              this._alpha = value;
              this._uiOpacity.opacity = this._alpha * 255;
              if (this instanceof GGroup) this.handleAlphaChanged();
              this.updateGear(3);
            }
          }
        }, {
          key: "visible",
          get: function get() {
            return this._visible;
          },
          set: function set(value) {
            if (this._visible != value) {
              this._visible = value;
              this.handleVisibleChanged();
              if (this._group && this._group.excludeInvisibles) this._group.setBoundsChangedFlag();
            }
          }
        }, {
          key: "_finalVisible",
          get: function get() {
            return this._visible && this._internalVisible && (!this._group || this._group._finalVisible);
          }
        }, {
          key: "internalVisible3",
          get: function get() {
            return this._visible && this._internalVisible;
          }
        }, {
          key: "sortingOrder",
          get: function get() {
            return this._sortingOrder;
          },
          set: function set(value) {
            if (value < 0) value = 0;
            if (this._sortingOrder != value) {
              var old = this._sortingOrder;
              this._sortingOrder = value;
              if (this._parent) this._parent.childSortingOrderChanged(this, old, this._sortingOrder);
            }
          }
        }, {
          key: "tooltips",
          get: function get() {
            return this._tooltips;
          },
          set: function set(value) {
            if (this._tooltips) {
              this._node.off(Event.ROLL_OVER, this.onRollOver, this);
              this._node.off(Event.ROLL_OUT, this.onRollOut, this);
            }
            this._tooltips = value;
            if (this._tooltips) {
              this._node.on(Event.ROLL_OVER, this.onRollOver, this);
              this._node.on(Event.ROLL_OUT, this.onRollOut, this);
            }
          }
        }, {
          key: "blendMode",
          get: function get() {
            return this._blendMode;
          },
          set: function set(value) {
            if (this._blendMode != value) {
              this._blendMode = value;
              BlendModeUtils.apply(this._node, value);
            }
          }
        }, {
          key: "onStage",
          get: function get() {
            return this._node && this._node.activeInHierarchy;
          }
        }, {
          key: "resourceURL",
          get: function get() {
            if (this.packageItem) return "ui://" + this.packageItem.owner.id + this.packageItem.id;else return null;
          }
        }, {
          key: "group",
          get: function get() {
            return this._group;
          },
          set: function set(value) {
            if (this._group != value) {
              if (this._group) this._group.setBoundsChangedFlag();
              this._group = value;
              if (this._group) this._group.setBoundsChangedFlag();
            }
          }
        }, {
          key: "gearXY",
          get: function get() {
            return this.getGear(1);
          }
        }, {
          key: "gearSize",
          get: function get() {
            return this.getGear(2);
          }
        }, {
          key: "gearLook",
          get: function get() {
            return this.getGear(3);
          }
        }, {
          key: "relations",
          get: function get() {
            return this._relations;
          }
        }, {
          key: "node",
          get: function get() {
            return this._node;
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          }
        }, {
          key: "asCom",
          get: function get() {
            return this;
          }
        }, {
          key: "text",
          get: function get() {
            return null;
          },
          set: function set(value) {}
        }, {
          key: "icon",
          get: function get() {
            return null;
          },
          set: function set(value) {}
        }, {
          key: "treeNode",
          get: function get() {
            return this._treeNode;
          }
        }, {
          key: "isDisposed",
          get: function get() {
            return this._node == null;
          }
        }, {
          key: "draggable",
          get: function get() {
            return this._draggable;
          },
          set: function set(value) {
            if (this._draggable != value) {
              this._draggable = value;
              this.initDrag();
            }
          }
        }, {
          key: "dragBounds",
          get: function get() {
            return this._dragBounds;
          },
          set: function set(value) {
            this._dragBounds = value;
          }
        }, {
          key: "dragging",
          get: function get() {
            return GObject.draggingObject == this;
          }
        }]);
        return GObject;
      }()); //-------------------------------------------------------------------
      var GObjectPartner = /*#__PURE__*/function (_Component2) {
        _inheritsLoose(GObjectPartner, _Component2);
        function GObjectPartner() {
          return _Component2.apply(this, arguments) || this;
        }
        var _proto21 = GObjectPartner.prototype;
        _proto21.callLater = function callLater(callback, delay) {
          if (!director.getScheduler().isScheduled(callback, this)) this.scheduleOnce(callback, delay);
        };
        _proto21.onClickLink = function onClickLink(evt, text) {
          this.node.emit(Event.LINK, text, evt);
        };
        _proto21.onEnable = function onEnable() {
          this.node["$gobj"].onEnable();
          if (this._emitDisplayEvents) this.node.emit(Event.DISPLAY);
        };
        _proto21.onDisable = function onDisable() {
          this.node["$gobj"].onDisable();
          if (this._emitDisplayEvents) this.node.emit(Event.UNDISPLAY);
        };
        _proto21.update = function update(dt) {
          this.node["$gobj"].onUpdate(dt);
        };
        _proto21.onDestroy = function onDestroy() {
          var gobj = this.node["$gobj"];
          Tween.stopAllByTarget(gobj);
          gobj.onDestroy();
        };
        return GObjectPartner;
      }(Component); //-------------------------------------------------------------------
      var GearClasses = [GearDisplay, GearXY, GearSize, GearLook, GearColor, GearAnimation, GearText, GearIcon, GearDisplay2, GearFontSize];
      function createGear(owner, index) {
        var ret = new GearClasses[index]();
        ret._owner = owner;
        return ret;
      }
      var s_vec2$4 = new Vec2();
      var s_vec3$1 = new Vec3();
      var s_rect$1 = new Rect();
      var sGlobalDragStart = new Vec2();
      var sGlobalRect = new Rect();
      var s_dragging;
      var s_dragQuery;
      var Decls$1 = {};
      var constructingDepth = {
        n: 0
      };
      var GGroup = exports('GGroup', /*#__PURE__*/function (_GObject) {
        _inheritsLoose(GGroup, _GObject);
        function GGroup() {
          var _this5;
          _this5 = _GObject.call(this) || this;
          _this5._layout = 0;
          _this5._lineGap = 0;
          _this5._columnGap = 0;
          _this5._mainGridIndex = -1;
          _this5._mainGridMinSize = 50;
          _this5._mainChildIndex = -1;
          _this5._totalSize = 0;
          _this5._numChildren = 0;
          _this5._updating = 0;
          _this5._node.name = "GGroup";
          _this5._touchDisabled = true;
          return _this5;
        }
        var _proto22 = GGroup.prototype;
        _proto22.dispose = function dispose() {
          this._boundsChanged = false;
          _GObject.prototype.dispose.call(this);
        };
        _proto22.setBoundsChangedFlag = function setBoundsChangedFlag(positionChangedOnly) {
          if (positionChangedOnly === void 0) {
            positionChangedOnly = false;
          }
          if (this._updating == 0 && this._parent) {
            if (!positionChangedOnly) this._percentReady = false;
            if (!this._boundsChanged) {
              this._boundsChanged = true;
              if (this._layout != GroupLayoutType.None) this._partner.callLater(this._ensureBoundsCorrect);
            }
          }
        };
        _proto22._ensureBoundsCorrect = function _ensureBoundsCorrect() {
          var _t = GObject.cast(this.node);
          _t.ensureBoundsCorrect();
        };
        _proto22.ensureSizeCorrect = function ensureSizeCorrect() {
          if (this._parent == null || !this._boundsChanged || this._layout == 0) return;
          this._boundsChanged = false;
          if (this._autoSizeDisabled) this.resizeChildren(0, 0);else {
            this.handleLayout();
            this.updateBounds();
          }
        };
        _proto22.ensureBoundsCorrect = function ensureBoundsCorrect() {
          if (this._parent == null || !this._boundsChanged) return;
          this._boundsChanged = false;
          if (this._layout == 0) this.updateBounds();else {
            if (this._autoSizeDisabled) this.resizeChildren(0, 0);else {
              this.handleLayout();
              this.updateBounds();
            }
          }
        };
        _proto22.updateBounds = function updateBounds() {
          this._partner.unschedule(this._ensureBoundsCorrect);
          var cnt = this._parent.numChildren;
          var i;
          var child;
          var ax = Number.POSITIVE_INFINITY,
            ay = Number.POSITIVE_INFINITY;
          var ar = Number.NEGATIVE_INFINITY,
            ab = Number.NEGATIVE_INFINITY;
          var tmp;
          var empty = true;
          for (i = 0; i < cnt; i++) {
            child = this._parent.getChildAt(i);
            if (child.group != this || this._excludeInvisibles && !child.internalVisible3) continue;
            tmp = child.xMin;
            if (tmp < ax) ax = tmp;
            tmp = child.yMin;
            if (tmp < ay) ay = tmp;
            tmp = child.xMin + child.width;
            if (tmp > ar) ar = tmp;
            tmp = child.yMin + child.height;
            if (tmp > ab) ab = tmp;
            empty = false;
          }
          var w = 0,
            h = 0;
          if (!empty) {
            this._updating |= 1;
            this.setPosition(ax, ay);
            this._updating &= 2;
            w = ar - ax;
            h = ab - ay;
          }
          if ((this._updating & 2) == 0) {
            this._updating |= 2;
            this.setSize(w, h);
            this._updating &= 1;
          } else {
            this._updating &= 1;
            this.resizeChildren(this._width - w, this._height - h);
          }
        };
        _proto22.handleLayout = function handleLayout() {
          this._updating |= 1;
          var child;
          var i;
          var cnt;
          if (this._layout == GroupLayoutType.Horizontal) {
            var curX = this.x;
            cnt = this._parent.numChildren;
            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (this._excludeInvisibles && !child.internalVisible3) continue;
              child.xMin = curX;
              if (child.width != 0) curX += child.width + this._columnGap;
            }
          } else if (this._layout == GroupLayoutType.Vertical) {
            var curY = this.y;
            cnt = this._parent.numChildren;
            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (this._excludeInvisibles && !child.internalVisible3) continue;
              child.yMin = curY;
              if (child.height != 0) curY += child.height + this._lineGap;
            }
          }
          this._updating &= 2;
        };
        _proto22.moveChildren = function moveChildren(dx, dy) {
          if ((this._updating & 1) != 0 || this._parent == null) return;
          this._updating |= 1;
          var cnt = this._parent.numChildren;
          var i;
          var child;
          for (i = 0; i < cnt; i++) {
            child = this._parent.getChildAt(i);
            if (child.group == this) {
              child.setPosition(child.x + dx, child.y + dy);
            }
          }
          this._updating &= 2;
        };
        _proto22.resizeChildren = function resizeChildren(dw, dh) {
          if (this._layout == GroupLayoutType.None || (this._updating & 2) != 0 || this._parent == null) return;
          this._updating |= 2;
          if (this._boundsChanged) {
            this._boundsChanged = false;
            if (!this._autoSizeDisabled) {
              this.updateBounds();
              return;
            }
          }
          var cnt = this._parent.numChildren;
          var i;
          var child;
          if (!this._percentReady) {
            this._percentReady = true;
            this._numChildren = 0;
            this._totalSize = 0;
            this._mainChildIndex = -1;
            var j = 0;
            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (!this._excludeInvisibles || child.internalVisible3) {
                if (j == this._mainGridIndex) this._mainChildIndex = i;
                this._numChildren++;
                if (this._layout == 1) this._totalSize += child.width;else this._totalSize += child.height;
              }
              j++;
            }
            if (this._mainChildIndex != -1) {
              if (this._layout == 1) {
                child = this._parent.getChildAt(this._mainChildIndex);
                this._totalSize += this._mainGridMinSize - child.width;
                child._sizePercentInGroup = this._mainGridMinSize / this._totalSize;
              } else {
                child = this._parent.getChildAt(this._mainChildIndex);
                this._totalSize += this._mainGridMinSize - child.height;
                child._sizePercentInGroup = this._mainGridMinSize / this._totalSize;
              }
            }
            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (i == this._mainChildIndex) continue;
              if (this._totalSize > 0) child._sizePercentInGroup = (this._layout == 1 ? child.width : child.height) / this._totalSize;else child._sizePercentInGroup = 0;
            }
          }
          var remainSize = 0;
          var remainPercent = 1;
          var priorHandled = false;
          if (this._layout == 1) {
            remainSize = this.width - (this._numChildren - 1) * this._columnGap;
            if (this._mainChildIndex != -1 && remainSize >= this._totalSize) {
              child = this._parent.getChildAt(this._mainChildIndex);
              child.setSize(remainSize - (this._totalSize - this._mainGridMinSize), child._rawHeight + dh, true);
              remainSize -= child.width;
              remainPercent -= child._sizePercentInGroup;
              priorHandled = true;
            }
            var curX = this.x;
            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (this._excludeInvisibles && !child.internalVisible3) {
                child.setSize(child._rawWidth, child._rawHeight + dh, true);
                continue;
              }
              if (!priorHandled || i != this._mainChildIndex) {
                child.setSize(Math.round(child._sizePercentInGroup / remainPercent * remainSize), child._rawHeight + dh, true);
                remainPercent -= child._sizePercentInGroup;
                remainSize -= child.width;
              }
              child.xMin = curX;
              if (child.width != 0) curX += child.width + this._columnGap;
            }
          } else {
            remainSize = this.height - (this._numChildren - 1) * this._lineGap;
            if (this._mainChildIndex != -1 && remainSize >= this._totalSize) {
              child = this._parent.getChildAt(this._mainChildIndex);
              child.setSize(child._rawWidth + dw, remainSize - (this._totalSize - this._mainGridMinSize), true);
              remainSize -= child.height;
              remainPercent -= child._sizePercentInGroup;
              priorHandled = true;
            }
            var curY = this.y;
            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (this._excludeInvisibles && !child.internalVisible3) {
                child.setSize(child._rawWidth + dw, child._rawHeight, true);
                continue;
              }
              if (!priorHandled || i != this._mainChildIndex) {
                child.setSize(child._rawWidth + dw, Math.round(child._sizePercentInGroup / remainPercent * remainSize), true);
                remainPercent -= child._sizePercentInGroup;
                remainSize -= child.height;
              }
              child.yMin = curY;
              if (child.height != 0) curY += child.height + this._lineGap;
            }
          }
          this._updating &= 1;
        };
        _proto22.handleAlphaChanged = function handleAlphaChanged() {
          if (this._underConstruct) return;
          var cnt = this._parent.numChildren;
          for (var i = 0; i < cnt; i++) {
            var child = this._parent.getChildAt(i);
            if (child.group == this) child.alpha *= this.alpha;
          }
        };
        _proto22.handleVisibleChanged = function handleVisibleChanged() {
          if (!this._parent) return;
          var cnt = this._parent.numChildren;
          for (var i = 0; i < cnt; i++) {
            var child = this._parent.getChildAt(i);
            if (child.group == this) child.handleVisibleChanged();
          }
        };
        _proto22.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 5);
          this._layout = buffer.readByte();
          this._lineGap = buffer.readInt();
          this._columnGap = buffer.readInt();
          if (buffer.version >= 2) {
            this._excludeInvisibles = buffer.readBool();
            this._autoSizeDisabled = buffer.readBool();
            this._mainGridIndex = buffer.readShort();
          }
        };
        _proto22.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GObject.prototype.setup_afterAdd.call(this, buffer, beginPos);
          if (!this.visible) this.handleVisibleChanged();
        };
        _createClass(GGroup, [{
          key: "layout",
          get: function get() {
            return this._layout;
          },
          set: function set(value) {
            if (this._layout != value) {
              this._layout = value;
              this.setBoundsChangedFlag();
            }
          }
        }, {
          key: "lineGap",
          get: function get() {
            return this._lineGap;
          },
          set: function set(value) {
            if (this._lineGap != value) {
              this._lineGap = value;
              this.setBoundsChangedFlag(true);
            }
          }
        }, {
          key: "columnGap",
          get: function get() {
            return this._columnGap;
          },
          set: function set(value) {
            if (this._columnGap != value) {
              this._columnGap = value;
              this.setBoundsChangedFlag(true);
            }
          }
        }, {
          key: "excludeInvisibles",
          get: function get() {
            return this._excludeInvisibles;
          },
          set: function set(value) {
            if (this._excludeInvisibles != value) {
              this._excludeInvisibles = value;
              this.setBoundsChangedFlag();
            }
          }
        }, {
          key: "autoSizeDisabled",
          get: function get() {
            return this._autoSizeDisabled;
          },
          set: function set(value) {
            this._autoSizeDisabled = value;
          }
        }, {
          key: "mainGridMinSize",
          get: function get() {
            return this._mainGridMinSize;
          },
          set: function set(value) {
            if (this._mainGridMinSize != value) {
              this._mainGridMinSize = value;
              this.setBoundsChangedFlag();
            }
          }
        }, {
          key: "mainGridIndex",
          get: function get() {
            return this._mainGridIndex;
          },
          set: function set(value) {
            if (this._mainGridIndex != value) {
              this._mainGridIndex = value;
              this.setBoundsChangedFlag();
            }
          }
        }]);
        return GGroup;
      }(GObject));
      var GGraph = exports('GGraph', /*#__PURE__*/function (_GObject2) {
        _inheritsLoose(GGraph, _GObject2);
        function GGraph() {
          var _this6;
          _this6 = _GObject2.call(this) || this;
          _this6._type = 0;
          _this6._lineSize = 0;
          _this6._node.name = "GGraph";
          _this6._lineSize = 1;
          _this6._lineColor = new Color();
          _this6._fillColor = new Color(255, 255, 255, 255);
          _this6._content = _this6._node.addComponent(Graphics);
          return _this6;
        }
        var _proto23 = GGraph.prototype;
        _proto23.drawRect = function drawRect(lineSize, lineColor, fillColor, corner) {
          this._type = 1;
          this._lineSize = lineSize;
          this._lineColor.set(lineColor);
          this._fillColor.set(fillColor);
          this._cornerRadius = corner;
          this.updateGraph();
        };
        _proto23.drawEllipse = function drawEllipse(lineSize, lineColor, fillColor) {
          this._type = 2;
          this._lineSize = lineSize;
          this._lineColor.set(lineColor);
          this._fillColor.set(fillColor);
          this.updateGraph();
        };
        _proto23.drawRegularPolygon = function drawRegularPolygon(lineSize, lineColor, fillColor, sides, startAngle, distances) {
          this._type = 4;
          this._lineSize = lineSize;
          this._lineColor.set(lineColor);
          this._fillColor.set(fillColor);
          this._sides = sides;
          this._startAngle = startAngle || 0;
          this._distances = distances;
          this.updateGraph();
        };
        _proto23.drawPolygon = function drawPolygon(lineSize, lineColor, fillColor, points) {
          this._type = 3;
          this._lineSize = lineSize;
          this._lineColor.set(lineColor);
          this._fillColor.set(fillColor);
          this._polygonPoints = points;
          this.updateGraph();
        };
        _proto23.clearGraphics = function clearGraphics() {
          this._type = 0;
          if (this._hasContent) {
            this._content.clear();
            this._hasContent = false;
          }
        };
        _proto23.updateGraph = function updateGraph() {
          var ctx = this._content;
          if (this._hasContent) {
            this._hasContent = false;
            ctx.clear();
          }
          var w = this._width;
          var h = this._height;
          if (w == 0 || h == 0) return;
          var px = -this.pivotX * this._width;
          var py = this.pivotY * this._height;
          var ls = this._lineSize / 2;
          ctx.lineWidth = this._lineSize;
          ctx.strokeColor = this._lineColor;
          ctx.fillColor = this._fillColor;
          if (this._type == 1) {
            if (this._cornerRadius) {
              ctx.roundRect(px + ls, -h + py + ls, w - this._lineSize, h - this._lineSize, this._cornerRadius[0]);
            } else ctx.rect(px + ls, -h + py + ls, w - this._lineSize, h - this._lineSize);
          } else if (this._type == 2) {
            ctx.ellipse(w / 2 + px, -h / 2 + py, w / 2 - ls, h / 2 - ls);
          } else if (this._type == 3) {
            this.drawPath(ctx, this._polygonPoints, px, py);
          } else if (this._type == 4) {
            if (!this._polygonPoints) this._polygonPoints = [];
            var radius = Math.min(w, h) / 2 - ls;
            this._polygonPoints.length = 0;
            var angle = misc.degreesToRadians(this._startAngle);
            var deltaAngle = 2 * Math.PI / this._sides;
            var dist;
            for (var i = 0; i < this._sides; i++) {
              if (this._distances) {
                dist = this._distances[i];
                if (isNaN(dist)) dist = 1;
              } else dist = 1;
              var xv = radius + radius * dist * Math.cos(angle);
              var yv = radius + radius * dist * Math.sin(angle);
              this._polygonPoints.push(xv, yv);
              angle += deltaAngle;
            }
            this.drawPath(ctx, this._polygonPoints, px, py);
          }
          if (ls != 0) ctx.stroke();
          if (this._fillColor.a != 0) ctx.fill();
          this._hasContent = true;
        };
        _proto23.drawPath = function drawPath(ctx, points, px, py) {
          var cnt = points.length;
          ctx.moveTo(points[0] + px, -points[1] + py);
          for (var i = 2; i < cnt; i += 2) ctx.lineTo(points[i] + px, -points[i + 1] + py);
          ctx.lineTo(points[0] + px, -points[1] + py);
        };
        _proto23.handleSizeChanged = function handleSizeChanged() {
          _GObject2.prototype.handleSizeChanged.call(this);
          if (this._type != 0) this.updateGraph();
        };
        _proto23.handleAnchorChanged = function handleAnchorChanged() {
          _GObject2.prototype.handleAnchorChanged.call(this);
          if (this._type != 0) this.updateGraph();
        };
        _proto23.getProp = function getProp(index) {
          if (index == ObjectPropID.Color) return this.color;else return _GObject2.prototype.getProp.call(this, index);
        };
        _proto23.setProp = function setProp(index, value) {
          if (index == ObjectPropID.Color) this.color = value;else _GObject2.prototype.setProp.call(this, index, value);
        };
        _proto23._hitTest = function _hitTest(pt) {
          if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) {
            if (this._type == 3) {
              var points = this._polygonPoints;
              var len = points.length / 2;
              var i;
              var j = len - 1;
              var oddNodes = false;
              this._width;
              this._height;
              for (i = 0; i < len; ++i) {
                var ix = points[i * 2];
                var iy = points[i * 2 + 1];
                var jx = points[j * 2];
                var jy = points[j * 2 + 1];
                if ((iy < pt.y && jy >= pt.y || jy < pt.y && iy >= pt.y) && (ix <= pt.x || jx <= pt.x)) {
                  if (ix + (pt.y - iy) / (jy - iy) * (jx - ix) < pt.x) oddNodes = !oddNodes;
                }
                j = i;
              }
              return oddNodes ? this : null;
            } else return this;
          } else return null;
        };
        _proto23.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject2.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 5);
          this._type = buffer.readByte();
          if (this._type != 0) {
            var i;
            var cnt;
            this._lineSize = buffer.readInt();
            this._lineColor.set(buffer.readColor(true));
            this._fillColor.set(buffer.readColor(true));
            if (buffer.readBool()) {
              this._cornerRadius = new Array(4);
              for (i = 0; i < 4; i++) this._cornerRadius[i] = buffer.readFloat();
            }
            if (this._type == 3) {
              cnt = buffer.readShort();
              this._polygonPoints = [];
              this._polygonPoints.length = cnt;
              for (i = 0; i < cnt; i++) this._polygonPoints[i] = buffer.readFloat();
            } else if (this._type == 4) {
              this._sides = buffer.readShort();
              this._startAngle = buffer.readFloat();
              cnt = buffer.readShort();
              if (cnt > 0) {
                this._distances = [];
                for (i = 0; i < cnt; i++) this._distances[i] = buffer.readFloat();
              }
            }
            this.updateGraph();
          }
        };
        _createClass(GGraph, [{
          key: "distances",
          get: function get() {
            return this._distances;
          },
          set: function set(value) {
            this._distances = value;
            if (this._type == 3) this.updateGraph();
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          }
        }, {
          key: "color",
          get: function get() {
            return this._fillColor;
          },
          set: function set(value) {
            this._fillColor.set(value);
            if (this._type != 0) this.updateGraph();
          }
        }]);
        return GGraph;
      }(GObject));
      var Image$1 = exports('Image', /*#__PURE__*/function (_Sprite) {
        _inheritsLoose(Image, _Sprite);
        function Image() {
          var _this7;
          _this7 = _Sprite.call(this) || this;
          _this7._flip = FlipType.None;
          _this7._fillMethod = FillMethod.None;
          _this7._fillOrigin = FillOrigin.Left;
          _this7._fillAmount = 0;
          return _this7;
        }
        var _proto24 = Image.prototype;
        _proto24.setupFill = function setupFill() {
          if (this._fillMethod == FillMethod.Horizontal) {
            this._fillClockwise = this._fillOrigin == FillOrigin.Right || this._fillOrigin == FillOrigin.Bottom;
            this.fillStart = this._fillClockwise ? 1 : 0;
          } else if (this._fillMethod == FillMethod.Vertical) {
            this._fillClockwise = this._fillOrigin == FillOrigin.Left || this._fillOrigin == FillOrigin.Top;
            this.fillStart = this._fillClockwise ? 1 : 0;
          } else {
            switch (this._fillOrigin) {
              case FillOrigin.Right:
                this.fillOrigin = 0;
                break;
              case FillOrigin.Top:
                this.fillStart = 0.25;
                break;
              case FillOrigin.Left:
                this.fillStart = 0.5;
                break;
              case FillOrigin.Bottom:
                this.fillStart = 0.75;
                break;
            }
          }
        };
        _createClass(Image, [{
          key: "flip",
          get: function get() {
            return this._flip;
          },
          set: function set(value) {
            if (this._flip != value) {
              this._flip = value;
              var sx = 1,
                sy = 1;
              if (this._flip == FlipType.Horizontal || this._flip == FlipType.Both) sx = -1;
              if (this._flip == FlipType.Vertical || this._flip == FlipType.Both) sy = -1;
              if (sx != 1 || sy != 1) {
                var uiTrans = this.node.getComponent(UITransform);
                uiTrans.setAnchorPoint(0.5, 0.5);
              }
              this.node.setScale(sx, sy);
            }
          }
        }, {
          key: "fillMethod",
          get: function get() {
            return this._fillMethod;
          },
          set: function set(value) {
            if (this._fillMethod != value) {
              this._fillMethod = value;
              if (this._fillMethod != 0) {
                this.type = Sprite.Type.FILLED;
                if (this._fillMethod <= 3) this.fillType = this._fillMethod - 1;else this.fillType = Sprite.FillType.RADIAL;
                this.fillCenter = new Vec2(0.5, 0.5);
                this.setupFill();
              } else {
                this.type = Sprite.Type.SIMPLE;
              }
            }
          }
        }, {
          key: "fillOrigin",
          get: function get() {
            return this._fillOrigin;
          },
          set: function set(value) {
            if (this._fillOrigin != value) {
              this._fillOrigin = value;
              if (this._fillMethod != 0) this.setupFill();
            }
          }
        }, {
          key: "fillClockwise",
          get: function get() {
            return this._fillClockwise;
          },
          set: function set(value) {
            if (this._fillClockwise != value) {
              this._fillClockwise = value;
              if (this._fillMethod != 0) this.setupFill();
            }
          }
        }, {
          key: "fillAmount",
          get: function get() {
            return this._fillAmount;
          },
          set: function set(value) {
            if (this._fillAmount != value) {
              this._fillAmount = value;
              if (this._fillMethod != 0) {
                if (this._fillClockwise) this.fillRange = -this._fillAmount;else this.fillRange = this._fillAmount;
              }
            }
          }
        }]);
        return Image;
      }(Sprite));
      var GImage = exports('GImage', /*#__PURE__*/function (_GObject3) {
        _inheritsLoose(GImage, _GObject3);
        function GImage() {
          var _this8;
          _this8 = _GObject3.call(this) || this;
          _this8._node.name = "GImage";
          _this8._touchDisabled = true;
          _this8._content = _this8._node.addComponent(Image$1);
          _this8._content.sizeMode = Sprite.SizeMode.CUSTOM;
          _this8._content.trim = false;
          return _this8;
        }
        var _proto25 = GImage.prototype;
        _proto25.constructFromResource = function constructFromResource() {
          var contentItem = this.packageItem.getBranch();
          this.sourceWidth = contentItem.width;
          this.sourceHeight = contentItem.height;
          this.initWidth = this.sourceWidth;
          this.initHeight = this.sourceHeight;
          this.setSize(this.sourceWidth, this.sourceHeight);
          contentItem = contentItem.getHighResolution();
          contentItem.load();
          if (contentItem.scale9Grid) this._content.type = Sprite.Type.SLICED;else if (contentItem.scaleByTile) this._content.type = Sprite.Type.TILED;
          this._content.spriteFrame = contentItem.asset;
        };
        _proto25.handleGrayedChanged = function handleGrayedChanged() {
          this._content.grayscale = this._grayed;
        };
        _proto25.getProp = function getProp(index) {
          if (index == ObjectPropID.Color) return this.color;else return _GObject3.prototype.getProp.call(this, index);
        };
        _proto25.setProp = function setProp(index, value) {
          if (index == ObjectPropID.Color) this.color = value;else _GObject3.prototype.setProp.call(this, index, value);
        };
        _proto25.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject3.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 5);
          if (buffer.readBool()) this.color = buffer.readColor();
          this._content.flip = buffer.readByte();
          this._content.fillMethod = buffer.readByte();
          if (this._content.fillMethod != 0) {
            this._content.fillOrigin = buffer.readByte();
            this._content.fillClockwise = buffer.readBool();
            this._content.fillAmount = buffer.readFloat();
          }
        };
        _createClass(GImage, [{
          key: "color",
          get: function get() {
            return this._content.color;
          },
          set: function set(value) {
            this._content.color = value;
            this.updateGear(4);
          }
        }, {
          key: "flip",
          get: function get() {
            return this._content.flip;
          },
          set: function set(value) {
            this._content.flip = value;
          }
        }, {
          key: "fillMethod",
          get: function get() {
            return this._content.fillMethod;
          },
          set: function set(value) {
            this._content.fillMethod = value;
          }
        }, {
          key: "fillOrigin",
          get: function get() {
            return this._content.fillOrigin;
          },
          set: function set(value) {
            this._content.fillOrigin = value;
          }
        }, {
          key: "fillClockwise",
          get: function get() {
            return this._content.fillClockwise;
          },
          set: function set(value) {
            this._content.fillClockwise = value;
          }
        }, {
          key: "fillAmount",
          get: function get() {
            return this._content.fillAmount;
          },
          set: function set(value) {
            this._content.fillAmount = value;
          }
        }]);
        return GImage;
      }(GObject));
      var MovieClip = exports('MovieClip', /*#__PURE__*/function (_Image$) {
        _inheritsLoose(MovieClip, _Image$);
        function MovieClip() {
          var _this9;
          _this9 = _Image$.call(this) || this;
          _this9.interval = 0;
          _this9.swing = false;
          _this9.repeatDelay = 0;
          _this9.timeScale = 1;
          _this9._playing = true;
          _this9._frameCount = 0;
          _this9._frame = 0;
          _this9._start = 0;
          _this9._end = 0;
          _this9._times = 0;
          _this9._endAt = 0;
          _this9._status = 0; //0-none, 1-next loop, 2-ending, 3-ended
          _this9._smoothing = true;
          _this9._frameElapsed = 0; //当前帧延迟
          _this9._reversed = false;
          _this9._repeatedCount = 0;
          return _this9;
        }
        var _proto26 = MovieClip.prototype;
        _proto26.rewind = function rewind() {
          this._frame = 0;
          this._frameElapsed = 0;
          this._reversed = false;
          this._repeatedCount = 0;
          this.drawFrame();
        };
        _proto26.syncStatus = function syncStatus(anotherMc) {
          this._frame = anotherMc._frame;
          this._frameElapsed = anotherMc._frameElapsed;
          this._reversed = anotherMc._reversed;
          this._repeatedCount = anotherMc._repeatedCount;
          this.drawFrame();
        };
        _proto26.advance = function advance(timeInSeconds) {
          var beginFrame = this._frame;
          var beginReversed = this._reversed;
          var backupTime = timeInSeconds;
          while (true) {
            var tt = this.interval + this._frames[this._frame].addDelay;
            if (this._frame == 0 && this._repeatedCount > 0) tt += this.repeatDelay;
            if (timeInSeconds < tt) {
              this._frameElapsed = 0;
              break;
            }
            timeInSeconds -= tt;
            if (this.swing) {
              if (this._reversed) {
                this._frame--;
                if (this._frame <= 0) {
                  this._frame = 0;
                  this._repeatedCount++;
                  this._reversed = !this._reversed;
                }
              } else {
                this._frame++;
                if (this._frame > this._frameCount - 1) {
                  this._frame = Math.max(0, this._frameCount - 2);
                  this._repeatedCount++;
                  this._reversed = !this._reversed;
                }
              }
            } else {
              this._frame++;
              if (this._frame > this._frameCount - 1) {
                this._frame = 0;
                this._repeatedCount++;
              }
            }
            if (this._frame == beginFrame && this._reversed == beginReversed)
              //走了一轮了
              {
                var roundTime = backupTime - timeInSeconds; //这就是一轮需要的时间
                timeInSeconds -= Math.floor(timeInSeconds / roundTime) * roundTime; //跳过
              }
          }
          this.drawFrame();
        } //从start帧开始，播放到end帧（-1表示结尾），重复times次（0表示无限循环），循环结束后，停止在endAt帧（-1表示参数end）
        ;
        _proto26.setPlaySettings = function setPlaySettings(start, end, times, endAt, endCallback) {
          if (start == undefined) start = 0;
          if (end == undefined) end = -1;
          if (times == undefined) times = 0;
          if (endAt == undefined) endAt = -1;
          this._start = start;
          this._end = end;
          if (this._end == -1 || this._end > this._frameCount - 1) this._end = this._frameCount - 1;
          this._times = times;
          this._endAt = endAt;
          if (this._endAt == -1) this._endAt = this._end;
          this._status = 0;
          this._callback = endCallback;
          this.frame = start;
        };
        _proto26.update = function update(dt) {
          if (!this._playing || this._frameCount == 0 || this._status == 3) return;
          if (this.timeScale != 1) dt *= this.timeScale;
          this._frameElapsed += dt;
          var tt = this.interval + this._frames[this._frame].addDelay;
          if (this._frame == 0 && this._repeatedCount > 0) tt += this.repeatDelay;
          if (this._frameElapsed < tt) return;
          this._frameElapsed -= tt;
          if (this._frameElapsed > this.interval) this._frameElapsed = this.interval;
          if (this.swing) {
            if (this._reversed) {
              this._frame--;
              if (this._frame <= 0) {
                this._frame = 0;
                this._repeatedCount++;
                this._reversed = !this._reversed;
              }
            } else {
              this._frame++;
              if (this._frame > this._frameCount - 1) {
                this._frame = Math.max(0, this._frameCount - 2);
                this._repeatedCount++;
                this._reversed = !this._reversed;
              }
            }
          } else {
            this._frame++;
            if (this._frame > this._frameCount - 1) {
              this._frame = 0;
              this._repeatedCount++;
            }
          }
          if (this._status == 1)
            //new loop
            {
              this._frame = this._start;
              this._frameElapsed = 0;
              this._status = 0;
            } else if (this._status == 2)
            //ending
            {
              this._frame = this._endAt;
              this._frameElapsed = 0;
              this._status = 3; //ended
              //play end
              if (this._callback != null) {
                var callback = this._callback;
                this._callback = null;
                callback();
              }
            } else {
            if (this._frame == this._end) {
              if (this._times > 0) {
                this._times--;
                if (this._times == 0) this._status = 2; //ending
                else this._status = 1; //new loop
              } else if (this._start != 0) this._status = 1; //new loop
            }
          }
          this.drawFrame();
        };
        _proto26.drawFrame = function drawFrame() {
          if (this._frameCount > 0 && this._frame < this._frames.length) {
            var frame = this._frames[this._frame];
            this.spriteFrame = frame.texture;
          }
        };
        _createClass(MovieClip, [{
          key: "frames",
          get: function get() {
            return this._frames;
          },
          set: function set(value) {
            this._frames = value;
            if (this._frames) {
              this._frameCount = this._frames.length;
              if (this._end == -1 || this._end > this._frameCount - 1) this._end = this._frameCount - 1;
              if (this._endAt == -1 || this._endAt > this._frameCount - 1) this._endAt = this._frameCount - 1;
              if (this._frame < 0 || this._frame > this._frameCount - 1) this._frame = this._frameCount - 1;
              this.type = Sprite.Type.SIMPLE;
              this.drawFrame();
              this._frameElapsed = 0;
              this._repeatedCount = 0;
              this._reversed = false;
            } else {
              this._frameCount = 0;
            }
          }
        }, {
          key: "frameCount",
          get: function get() {
            return this._frameCount;
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          },
          set: function set(value) {
            if (this._frame != value) {
              if (this._frames && value >= this._frameCount) value = this._frameCount - 1;
              this._frame = value;
              this._frameElapsed = 0;
              this.drawFrame();
            }
          }
        }, {
          key: "playing",
          get: function get() {
            return this._playing;
          },
          set: function set(value) {
            if (this._playing != value) {
              this._playing = value;
            }
          }
        }, {
          key: "smoothing",
          get: function get() {
            return this._smoothing;
          },
          set: function set(value) {
            this._smoothing = value;
          }
        }]);
        return MovieClip;
      }(Image$1));
      var GMovieClip = exports('GMovieClip', /*#__PURE__*/function (_GObject4) {
        _inheritsLoose(GMovieClip, _GObject4);
        function GMovieClip() {
          var _this10;
          _this10 = _GObject4.call(this) || this;
          _this10._node.name = "GMovieClip";
          _this10._touchDisabled = true;
          _this10._content = _this10._node.addComponent(MovieClip);
          _this10._content.sizeMode = Sprite.SizeMode.CUSTOM;
          _this10._content.trim = false;
          _this10._content.setPlaySettings();
          return _this10;
        }
        var _proto27 = GMovieClip.prototype;
        _proto27.rewind = function rewind() {
          this._content.rewind();
        };
        _proto27.syncStatus = function syncStatus(anotherMc) {
          this._content.syncStatus(anotherMc._content);
        };
        _proto27.advance = function advance(timeInSeconds) {
          this._content.advance(timeInSeconds);
        } //从start帧开始，播放到end帧（-1表示结尾），重复times次（0表示无限循环），循环结束后，停止在endAt帧（-1表示参数end）
        ;
        _proto27.setPlaySettings = function setPlaySettings(start, end, times, endAt, endCallback) {
          this._content.setPlaySettings(start, end, times, endAt, endCallback);
        };
        _proto27.handleGrayedChanged = function handleGrayedChanged() {
          this._content.grayscale = this._grayed;
        };
        _proto27.handleSizeChanged = function handleSizeChanged() {
          _GObject4.prototype.handleSizeChanged.call(this); //不知道原因，尺寸改变必须调用一次这个，否则大小不对
          this._content.sizeMode = Sprite.SizeMode.CUSTOM;
        };
        _proto27.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.color;
            case ObjectPropID.Playing:
              return this.playing;
            case ObjectPropID.Frame:
              return this.frame;
            case ObjectPropID.TimeScale:
              return this.timeScale;
            default:
              return _GObject4.prototype.getProp.call(this, index);
          }
        };
        _proto27.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.color = value;
              break;
            case ObjectPropID.Playing:
              this.playing = value;
              break;
            case ObjectPropID.Frame:
              this.frame = value;
              break;
            case ObjectPropID.TimeScale:
              this.timeScale = value;
              break;
            case ObjectPropID.DeltaTime:
              this.advance(value);
              break;
            default:
              _GObject4.prototype.setProp.call(this, index, value);
              break;
          }
        };
        _proto27.constructFromResource = function constructFromResource() {
          var contentItem = this.packageItem.getBranch();
          this.sourceWidth = contentItem.width;
          this.sourceHeight = contentItem.height;
          this.initWidth = this.sourceWidth;
          this.initHeight = this.sourceHeight;
          this.setSize(this.sourceWidth, this.sourceHeight);
          contentItem = contentItem.getHighResolution();
          contentItem.load();
          this._content.interval = contentItem.interval;
          this._content.swing = contentItem.swing;
          this._content.repeatDelay = contentItem.repeatDelay;
          this._content.frames = contentItem.frames;
          this._content.smoothing = contentItem.smoothing;
        };
        _proto27.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject4.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 5);
          if (buffer.readBool()) this.color = buffer.readColor();
          buffer.readByte(); //flip
          this._content.frame = buffer.readInt();
          this._content.playing = buffer.readBool();
        };
        _createClass(GMovieClip, [{
          key: "color",
          get: function get() {
            return this._content.color;
          },
          set: function set(value) {
            this._content.color = value;
            this.updateGear(4);
          }
        }, {
          key: "playing",
          get: function get() {
            return this._content.playing;
          },
          set: function set(value) {
            if (this._content.playing != value) {
              this._content.playing = value;
              this.updateGear(5);
            }
          }
        }, {
          key: "frame",
          get: function get() {
            return this._content.frame;
          },
          set: function set(value) {
            if (this._content.frame != value) {
              this._content.frame = value;
              this.updateGear(5);
            }
          }
        }, {
          key: "timeScale",
          get: function get() {
            return this._content.timeScale;
          },
          set: function set(value) {
            this._content.timeScale = value;
          }
        }]);
        return GMovieClip;
      }(GObject));
      var PackageItem = exports('PackageItem', /*#__PURE__*/function () {
        function PackageItem() {
          this.width = 0;
          this.height = 0;
        }
        var _proto28 = PackageItem.prototype;
        _proto28.load = function load() {
          return this.owner.getItemAsset(this);
        };
        _proto28.getBranch = function getBranch() {
          if (this.branches && this.owner._branchIndex != -1) {
            var itemId = this.branches[this.owner._branchIndex];
            if (itemId) return this.owner.getItemById(itemId);
          }
          return this;
        };
        _proto28.getHighResolution = function getHighResolution() {
          if (this.highResolution && UIContentScaler.scaleLevel > 0) {
            var itemId = this.highResolution[UIContentScaler.scaleLevel - 1];
            if (itemId) return this.owner.getItemById(itemId);
          }
          return this;
        };
        _proto28.toString = function toString() {
          return this.name;
        };
        return PackageItem;
      }());
      var TranslationHelper = exports('TranslationHelper', /*#__PURE__*/function () {
        function TranslationHelper() {}
        TranslationHelper.loadFromXML = function loadFromXML(source) {
          TranslationHelper.strings = {};
          var strings = TranslationHelper.strings;
          var xml = new DOMParser().parseFromString(source, "text/xml").documentElement;
          var nodes = xml.childNodes;
          var length1 = nodes.length;
          for (var i1 = 0; i1 < length1; i1++) {
            var cxml = nodes[i1];
            if (cxml.tagName == "string") {
              var key = cxml.getAttribute("name");
              var text = cxml.childNodes.length > 0 ? cxml.firstChild.nodeValue : "";
              var i = key.indexOf("-");
              if (i == -1) continue;
              var key2 = key.substring(0, i);
              var key3 = key.substring(i + 1);
              var col = strings[key2];
              if (!col) {
                col = {};
                strings[key2] = col;
              }
              col[key3] = text;
            }
          }
        };
        TranslationHelper.translateComponent = function translateComponent(item) {
          if (TranslationHelper.strings == null) return;
          var compStrings = TranslationHelper.strings[item.owner.id + item.id];
          if (compStrings == null) return;
          var elementId, value;
          var buffer = item.rawData;
          var nextPos;
          var itemCount;
          var i, j, k;
          var dataLen;
          var curPos;
          var valueCnt;
          var page;
          buffer.seek(0, 2);
          var childCount = buffer.readShort();
          for (i = 0; i < childCount; i++) {
            dataLen = buffer.readShort();
            curPos = buffer.position;
            buffer.seek(curPos, 0);
            var baseType = buffer.readByte();
            var type = baseType;
            buffer.skip(4);
            elementId = buffer.readS();
            if (type == ObjectType.Component) {
              if (buffer.seek(curPos, 6)) type = buffer.readByte();
            }
            buffer.seek(curPos, 1);
            if ((value = compStrings[elementId + "-tips"]) != null) buffer.writeS(value);
            buffer.seek(curPos, 2);
            var gearCnt = buffer.readShort();
            for (j = 0; j < gearCnt; j++) {
              nextPos = buffer.readShort();
              nextPos += buffer.position;
              if (buffer.readByte() == 6)
                //gearText
                {
                  buffer.skip(2); //controller
                  valueCnt = buffer.readShort();
                  for (k = 0; k < valueCnt; k++) {
                    page = buffer.readS();
                    if (page != null) {
                      if ((value = compStrings[elementId + "-texts_" + k]) != null) buffer.writeS(value);else buffer.skip(2);
                    }
                  }
                  if (buffer.readBool() && (value = compStrings[elementId + "-texts_def"]) != null) buffer.writeS(value);
                }
              buffer.position = nextPos;
            }
            if (baseType == ObjectType.Component && buffer.version >= 2) {
              buffer.seek(curPos, 4);
              buffer.skip(2); //pageController
              buffer.skip(4 * buffer.readShort());
              var cpCount = buffer.readShort();
              for (var k = 0; k < cpCount; k++) {
                var target = buffer.readS();
                var propertyId = buffer.readShort();
                if (propertyId == 0 && (value = compStrings[elementId + "-cp-" + target]) != null) buffer.writeS(value);else buffer.skip(2);
              }
            }
            switch (type) {
              case ObjectType.Text:
              case ObjectType.RichText:
              case ObjectType.InputText:
                {
                  if ((value = compStrings[elementId]) != null) {
                    buffer.seek(curPos, 6);
                    buffer.writeS(value);
                  }
                  if ((value = compStrings[elementId + "-prompt"]) != null) {
                    buffer.seek(curPos, 4);
                    buffer.writeS(value);
                  }
                  break;
                }
              case ObjectType.List:
              case ObjectType.Tree:
                {
                  buffer.seek(curPos, 8);
                  buffer.skip(2);
                  itemCount = buffer.readShort();
                  for (j = 0; j < itemCount; j++) {
                    nextPos = buffer.readShort();
                    nextPos += buffer.position;
                    buffer.skip(2); //url
                    if (type == ObjectType.Tree) buffer.skip(2); //title
                    if ((value = compStrings[elementId + "-" + j]) != null) buffer.writeS(value);else buffer.skip(2); //selected title
                    if ((value = compStrings[elementId + "-" + j + "-0"]) != null) buffer.writeS(value);else buffer.skip(2);
                    if (buffer.version >= 2) {
                      buffer.skip(6);
                      buffer.skip(buffer.readUshort() * 4); //controllers
                      var cpCount = buffer.readUshort();
                      for (var k = 0; k < cpCount; k++) {
                        var target = buffer.readS();
                        var propertyId = buffer.readUshort();
                        if (propertyId == 0 && (value = compStrings[elementId + "-" + j + "-" + target]) != null) buffer.writeS(value);else buffer.skip(2);
                      }
                    }
                    buffer.position = nextPos;
                  }
                  break;
                }
              case ObjectType.Label:
                {
                  if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                    if ((value = compStrings[elementId]) != null) buffer.writeS(value);else buffer.skip(2);
                    buffer.skip(2);
                    if (buffer.readBool()) buffer.skip(4);
                    buffer.skip(4);
                    if (buffer.readBool() && (value = compStrings[elementId + "-prompt"]) != null) buffer.writeS(value);
                  }
                  break;
                }
              case ObjectType.Button:
                {
                  if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                    if ((value = compStrings[elementId]) != null) buffer.writeS(value);else buffer.skip(2);
                    if ((value = compStrings[elementId + "-0"]) != null) buffer.writeS(value);
                  }
                  break;
                }
              case ObjectType.ComboBox:
                {
                  if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                    itemCount = buffer.readShort();
                    for (j = 0; j < itemCount; j++) {
                      nextPos = buffer.readShort();
                      nextPos += buffer.position;
                      if ((value = compStrings[elementId + "-" + j]) != null) buffer.writeS(value);
                      buffer.position = nextPos;
                    }
                    if ((value = compStrings[elementId]) != null) buffer.writeS(value);
                  }
                  break;
                }
            }
            buffer.position = curPos + dataLen;
          }
        };
        return TranslationHelper;
      }());
      var ByteBuffer = exports('ByteBuffer', /*#__PURE__*/function () {
        function ByteBuffer(buffer, offset, length) {
          this.version = 0;
          offset = offset || 0;
          if (length == null || length == -1) length = buffer.byteLength - offset;
          this._bytes = new Uint8Array(buffer, offset, length);
          this._view = new DataView(this._bytes.buffer, offset, length);
          this._pos = 0;
          this._length = length;
        }
        var _proto29 = ByteBuffer.prototype;
        _proto29.skip = function skip(count) {
          this._pos += count;
        };
        _proto29.validate = function validate(forward) {
          if (this._pos + forward > this._length) throw new Error("Out of bounds");
        };
        _proto29.readByte = function readByte() {
          this.validate(1);
          return this._view.getUint8(this._pos++);
        };
        _proto29.readBool = function readBool() {
          return this.readByte() == 1;
        };
        _proto29.readShort = function readShort() {
          this.validate(2);
          var ret = this._view.getInt16(this._pos, this.littleEndian);
          this._pos += 2;
          return ret;
        };
        _proto29.readUshort = function readUshort() {
          this.validate(2);
          var ret = this._view.getUint16(this._pos, this.littleEndian);
          this._pos += 2;
          return ret;
        };
        _proto29.readInt = function readInt() {
          this.validate(4);
          var ret = this._view.getInt32(this._pos, this.littleEndian);
          this._pos += 4;
          return ret;
        };
        _proto29.readUint = function readUint() {
          this.validate(4);
          var ret = this._view.getUint32(this._pos, this.littleEndian);
          this._pos += 4;
          return ret;
        };
        _proto29.readFloat = function readFloat() {
          this.validate(4);
          var ret = this._view.getFloat32(this._pos, this.littleEndian);
          this._pos += 4;
          return ret;
        };
        _proto29.readString = function readString(len) {
          if (len == undefined) len = this.readUshort();
          this.validate(len);
          var v = "",
            max = this._pos + len,
            c = 0,
            c2 = 0,
            c3 = 0,
            f = String.fromCharCode;
          var u = this._bytes;
          var pos = this._pos;
          while (pos < max) {
            c = u[pos++];
            if (c < 0x80) {
              if (c != 0) {
                v += f(c);
              }
            } else if (c < 0xE0) {
              v += f((c & 0x3F) << 6 | u[pos++] & 0x7F);
            } else if (c < 0xF0) {
              c2 = u[pos++];
              v += f((c & 0x1F) << 12 | (c2 & 0x7F) << 6 | u[pos++] & 0x7F);
            } else {
              c2 = u[pos++];
              c3 = u[pos++];
              v += f((c & 0x0F) << 18 | (c2 & 0x7F) << 12 | c3 << 6 & 0x7F | u[pos++] & 0x7F);
            }
          }
          this._pos += len;
          return v;
        };
        _proto29.readS = function readS() {
          var index = this.readUshort();
          if (index == 65534)
            //null
            return null;else if (index == 65533) return "";else return this.stringTable[index];
        };
        _proto29.readSArray = function readSArray(cnt) {
          var ret = new Array(cnt);
          for (var i = 0; i < cnt; i++) ret[i] = this.readS();
          return ret;
        };
        _proto29.writeS = function writeS(value) {
          var index = this.readUshort();
          if (index != 65534 && index != 65533) this.stringTable[index] = value;
        };
        _proto29.readColor = function readColor(hasAlpha) {
          var r = this.readByte();
          var g = this.readByte();
          var b = this.readByte();
          var a = this.readByte();
          return new Color(r, g, b, hasAlpha ? a : 255);
        };
        _proto29.readChar = function readChar() {
          var i = this.readUshort();
          return String.fromCharCode(i);
        };
        _proto29.readBuffer = function readBuffer() {
          var count = this.readUint();
          this.validate(count);
          var ba = new ByteBuffer(this._bytes.buffer, this._bytes.byteOffset + this._pos, count);
          ba.stringTable = this.stringTable;
          ba.version = this.version;
          this._pos += count;
          return ba;
        };
        _proto29.seek = function seek(indexTablePos, blockIndex) {
          var tmp = this._pos;
          this._pos = indexTablePos;
          var segCount = this.readByte();
          if (blockIndex < segCount) {
            var useShort = this.readByte() == 1;
            var newPos;
            if (useShort) {
              this._pos += 2 * blockIndex;
              newPos = this.readUshort();
            } else {
              this._pos += 4 * blockIndex;
              newPos = this.readUint();
            }
            if (newPos > 0) {
              this._pos = indexTablePos + newPos;
              return true;
            } else {
              this._pos = tmp;
              return false;
            }
          } else {
            this._pos = tmp;
            return false;
          }
        };
        _createClass(ByteBuffer, [{
          key: "data",
          get: function get() {
            return this._bytes;
          }
        }, {
          key: "position",
          get: function get() {
            return this._pos;
          },
          set: function set(value) {
            if (value > this._length) throw new Error("Out of bounds");
            this._pos = value;
          }
        }]);
        return ByteBuffer;
      }());
      var PixelHitTest = /*#__PURE__*/function () {
        function PixelHitTest(data, offsetX, offsetY) {
          this._data = data;
          this.offsetX = offsetX == undefined ? 0 : offsetX;
          this.offsetY = offsetY == undefined ? 0 : offsetY;
          this.scaleX = 1;
          this.scaleY = 1;
        }
        var _proto30 = PixelHitTest.prototype;
        _proto30.hitTest = function hitTest(pt) {
          var x = Math.floor((pt.x / this.scaleX - this.offsetX) * this._data.scale);
          var y = Math.floor((pt.y / this.scaleY - this.offsetY) * this._data.scale);
          if (x < 0 || y < 0 || x >= this._data.pixelWidth) return false;
          var pos = y * this._data.pixelWidth + x;
          var pos2 = Math.floor(pos / 8);
          var pos3 = pos % 8;
          if (pos2 >= 0 && pos2 < this._data.pixels.length) return (this._data.pixels[pos2] >> pos3 & 0x1) == 1;else return false;
        };
        return PixelHitTest;
      }();
      var PixelHitTestData = function PixelHitTestData(ba) {
        ba.readInt();
        this.pixelWidth = ba.readInt();
        this.scale = 1 / ba.readByte();
        this.pixels = ba.readBuffer().data;
      };
      var ChildHitArea = /*#__PURE__*/function () {
        function ChildHitArea(child) {
          this._child = child;
        }
        var _proto31 = ChildHitArea.prototype;
        _proto31.hitTest = function hitTest(pt, globalPt) {
          return this._child.hitTest(globalPt, false) != null;
        };
        return ChildHitArea;
      }();
      var PathUtils = path;
      var UIPackage = exports('UIPackage', /*#__PURE__*/function () {
        function UIPackage() {
          this._items = [];
          this._itemsById = {};
          this._itemsByName = {};
          this._sprites = {};
          this._dependencies = [];
          this._branches = [];
          this._branchIndex = -1;
        }
        UIPackage.getVar = function getVar(key) {
          return _vars[key];
        };
        UIPackage.setVar = function setVar(key, value) {
          _vars[key] = value;
        };
        UIPackage.getById = function getById(id) {
          return _instById[id];
        };
        UIPackage.getByName = function getByName(name) {
          return _instByName[name];
        } /**
          * 注册一个包。包的所有资源必须放在resources下，且已经预加载。
          * @param path 相对 resources 的路径。
          */;
        UIPackage.addPackage = function addPackage(path) {
          var pkg = _instById[path];
          if (pkg) return pkg;
          var bundle = UIConfig.defaultBundle;
          var asset = bundle.get(path, BufferAsset);
          if (!asset) throw new Error("Resource '" + path + "' not ready");
          var buffer = asset.buffer();
          if (!buffer) throw new Error("Missing asset data.");
          pkg = new UIPackage();
          pkg._bundle = bundle;
          pkg.loadPackage(new ByteBuffer(buffer), path);
          _instById[pkg.id] = pkg;
          _instByName[pkg.name] = pkg;
          _instById[pkg._path] = pkg;
          return pkg;
        };
        UIPackage.loadPackage = function loadPackage() {
          var path;
          var onProgress;
          var onComplete;
          var bundle;
          if ((arguments.length <= 0 ? undefined : arguments[0]) instanceof AssetManager.Bundle) {
            bundle = arguments.length <= 0 ? undefined : arguments[0];
            path = arguments.length <= 1 ? undefined : arguments[1];
            if (arguments.length > 3) {
              onProgress = arguments.length <= 2 ? undefined : arguments[2];
              onComplete = arguments.length <= 3 ? undefined : arguments[3];
            } else onComplete = arguments.length <= 2 ? undefined : arguments[2];
          } else {
            path = arguments.length <= 0 ? undefined : arguments[0];
            if (arguments.length > 2) {
              onProgress = arguments.length <= 1 ? undefined : arguments[1];
              onComplete = arguments.length <= 2 ? undefined : arguments[2];
            } else onComplete = arguments.length <= 1 ? undefined : arguments[1];
          }
          bundle = bundle || UIConfig.defaultBundle;
          bundle.load(path, Asset, onProgress, function (err, asset) {
            if (err) {
              if (onComplete != null) onComplete(err, null);
              return;
            }
            var pkg = new UIPackage();
            pkg._bundle = bundle;
            var buffer = asset.buffer ? asset.buffer() : asset._nativeAsset;
            pkg.loadPackage(new ByteBuffer(buffer), path);
            var cnt = pkg._items.length;
            var urls = [];
            for (var i = 0; i < cnt; i++) {
              var pi = pkg._items[i];
              if (pi.type == PackageItemType.Atlas || pi.type == PackageItemType.Sound) {
                ItemTypeToAssetType[pi.type];
                urls.push(pi.file);
              }
            }
            var total = urls.length;
            var lastErr;
            var taskComplete = function taskComplete(err, asset) {
              total--;
              if (err) lastErr = err;
              if (total <= 0) {
                _instById[pkg.id] = pkg;
                _instByName[pkg.name] = pkg;
                if (pkg._path) _instById[pkg._path] = pkg;
                if (onComplete != null) onComplete(lastErr, pkg);
              }
            };
            if (total > 0) {
              urls.forEach(function (url, index) {
                bundle.load(url, Asset, onProgress, taskComplete);
              });
            } else taskComplete(null);
          });
        };
        UIPackage.removePackage = function removePackage(packageIdOrName) {
          var pkg = _instById[packageIdOrName];
          if (!pkg) pkg = _instByName[packageIdOrName];
          if (!pkg) throw new Error("No package found: " + packageIdOrName);
          pkg.dispose();
          delete _instById[pkg.id];
          delete _instByName[pkg.name];
          if (pkg._path) delete _instById[pkg._path];
        };
        UIPackage.createObject = function createObject(pkgName, resName, userClass) {
          var pkg = UIPackage.getByName(pkgName);
          if (pkg) return pkg.createObject(resName, userClass);else return null;
        };
        UIPackage.createObjectFromURL = function createObjectFromURL(url, userClass) {
          var pi = UIPackage.getItemByURL(url);
          if (pi) return pi.owner.internalCreateObject(pi, userClass);else return null;
        };
        UIPackage.getItemURL = function getItemURL(pkgName, resName) {
          var pkg = UIPackage.getByName(pkgName);
          if (!pkg) return null;
          var pi = pkg._itemsByName[resName];
          if (!pi) return null;
          return "ui://" + pkg.id + pi.id;
        };
        UIPackage.getItemByURL = function getItemByURL(url) {
          var pos1 = url.indexOf("//");
          if (pos1 == -1) return null;
          var pos2 = url.indexOf("/", pos1 + 2);
          if (pos2 == -1) {
            if (url.length > 13) {
              var pkgId = url.substring(5, 13);
              var pkg = UIPackage.getById(pkgId);
              if (pkg != null) {
                var srcId = url.substring(13);
                return pkg.getItemById(srcId);
              }
            }
          } else {
            var pkgName = url.substring(pos1 + 2, pos2);
            pkg = UIPackage.getByName(pkgName);
            if (pkg != null) {
              var srcName = url.substring(pos2 + 1);
              return pkg.getItemByName(srcName);
            }
          }
          return null;
        };
        UIPackage.normalizeURL = function normalizeURL(url) {
          if (url == null) return null;
          var pos1 = url.indexOf("//");
          if (pos1 == -1) return null;
          var pos2 = url.indexOf("/", pos1 + 2);
          if (pos2 == -1) return url;
          var pkgName = url.substring(pos1 + 2, pos2);
          var srcName = url.substring(pos2 + 1);
          return UIPackage.getItemURL(pkgName, srcName);
        };
        UIPackage.setStringsSource = function setStringsSource(source) {
          TranslationHelper.loadFromXML(source);
        };
        var _proto32 = UIPackage.prototype;
        _proto32.loadPackage = function loadPackage(buffer, path) {
          if (buffer.readUint() != 0x46475549) throw new Error("FairyGUI: old package format found in '" + path + "'");
          this._path = path;
          buffer.version = buffer.readInt();
          var ver2 = buffer.version >= 2;
          buffer.readBool();
          this._id = buffer.readString();
          this._name = buffer.readString();
          buffer.skip(20);
          var indexTablePos = buffer.position;
          var cnt;
          var i;
          var nextPos;
          var str;
          var branchIncluded;
          buffer.seek(indexTablePos, 4);
          cnt = buffer.readInt();
          var stringTable = new Array(cnt);
          buffer.stringTable = stringTable;
          for (i = 0; i < cnt; i++) stringTable[i] = buffer.readString();
          if (buffer.seek(indexTablePos, 5)) {
            cnt = buffer.readInt();
            for (i = 0; i < cnt; i++) {
              var index = buffer.readUshort();
              var len = buffer.readInt();
              stringTable[index] = buffer.readString(len);
            }
          }
          buffer.seek(indexTablePos, 0);
          cnt = buffer.readShort();
          for (i = 0; i < cnt; i++) this._dependencies.push({
            id: buffer.readS(),
            name: buffer.readS()
          });
          if (ver2) {
            cnt = buffer.readShort();
            if (cnt > 0) {
              this._branches = buffer.readSArray(cnt);
              if (_branch) this._branchIndex = this._branches.indexOf(_branch);
            }
            branchIncluded = cnt > 0;
          }
          buffer.seek(indexTablePos, 1);
          var pi;
          var pos = path.lastIndexOf('/');
          var shortPath = pos == -1 ? "" : path.substring(0, pos + 1);
          path = path + "_";
          cnt = buffer.readShort();
          for (i = 0; i < cnt; i++) {
            nextPos = buffer.readInt();
            nextPos += buffer.position;
            pi = new PackageItem();
            pi.owner = this;
            pi.type = buffer.readByte();
            pi.id = buffer.readS();
            pi.name = buffer.readS();
            buffer.readS(); //path
            pi.file = buffer.readS();
            buffer.readBool(); //exported
            pi.width = buffer.readInt();
            pi.height = buffer.readInt();
            switch (pi.type) {
              case PackageItemType.Image:
                {
                  pi.objectType = ObjectType.Image;
                  var scaleOption = buffer.readByte();
                  if (scaleOption == 1) {
                    pi.scale9Grid = new Rect();
                    pi.scale9Grid.x = buffer.readInt();
                    pi.scale9Grid.y = buffer.readInt();
                    pi.scale9Grid.width = buffer.readInt();
                    pi.scale9Grid.height = buffer.readInt();
                    pi.tileGridIndice = buffer.readInt();
                  } else if (scaleOption == 2) pi.scaleByTile = true;
                  pi.smoothing = buffer.readBool();
                  break;
                }
              case PackageItemType.MovieClip:
                {
                  pi.smoothing = buffer.readBool();
                  pi.objectType = ObjectType.MovieClip;
                  pi.rawData = buffer.readBuffer();
                  break;
                }
              case PackageItemType.Font:
                {
                  pi.rawData = buffer.readBuffer();
                  break;
                }
              case PackageItemType.Component:
                {
                  var extension = buffer.readByte();
                  if (extension > 0) pi.objectType = extension;else pi.objectType = ObjectType.Component;
                  pi.rawData = buffer.readBuffer();
                  Decls.UIObjectFactory.resolveExtension(pi);
                  break;
                }
              case PackageItemType.Atlas:
              case PackageItemType.Sound:
              case PackageItemType.Misc:
                {
                  pi.file = path + PathUtils.mainFileName(pi.file);
                  break;
                }
              case PackageItemType.Spine:
              case PackageItemType.DragonBones:
                {
                  pi.file = shortPath + PathUtils.mainFileName(pi.file);
                  pi.skeletonAnchor = new Vec2();
                  pi.skeletonAnchor.x = buffer.readFloat();
                  pi.skeletonAnchor.y = buffer.readFloat();
                  break;
                }
            }
            if (ver2) {
              str = buffer.readS(); //branch
              if (str) pi.name = str + "/" + pi.name;
              var branchCnt = buffer.readByte();
              if (branchCnt > 0) {
                if (branchIncluded) pi.branches = buffer.readSArray(branchCnt);else this._itemsById[buffer.readS()] = pi;
              }
              var highResCnt = buffer.readByte();
              if (highResCnt > 0) pi.highResolution = buffer.readSArray(highResCnt);
            }
            this._items.push(pi);
            this._itemsById[pi.id] = pi;
            if (pi.name != null) this._itemsByName[pi.name] = pi;
            buffer.position = nextPos;
          }
          buffer.seek(indexTablePos, 2);
          cnt = buffer.readShort();
          for (i = 0; i < cnt; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            var itemId = buffer.readS();
            pi = this._itemsById[buffer.readS()];
            var rect = new Rect();
            rect.x = buffer.readInt();
            rect.y = buffer.readInt();
            rect.width = buffer.readInt();
            rect.height = buffer.readInt();
            var sprite = {
              atlas: pi,
              rect: rect,
              offset: new Vec2(),
              originalSize: new Size(0, 0)
            };
            sprite.rotated = buffer.readBool();
            if (ver2 && buffer.readBool()) {
              sprite.offset.x = buffer.readInt();
              sprite.offset.y = buffer.readInt();
              sprite.originalSize.width = buffer.readInt();
              sprite.originalSize.height = buffer.readInt();
            } else {
              sprite.originalSize.width = sprite.rect.width;
              sprite.originalSize.height = sprite.rect.height;
            }
            this._sprites[itemId] = sprite;
            buffer.position = nextPos;
          }
          if (buffer.seek(indexTablePos, 3)) {
            cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
              nextPos = buffer.readInt();
              nextPos += buffer.position;
              pi = this._itemsById[buffer.readS()];
              if (pi && pi.type == PackageItemType.Image) pi.hitTestData = new PixelHitTestData(buffer);
              buffer.position = nextPos;
            }
          }
        };
        _proto32.dispose = function dispose() {
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var pi = this._items[i];
            if (pi.asset) assetManager.releaseAsset(pi.asset);
          }
        };
        _proto32.createObject = function createObject(resName, userClass) {
          var pi = this._itemsByName[resName];
          if (pi) return this.internalCreateObject(pi, userClass);else return null;
        };
        _proto32.internalCreateObject = function internalCreateObject(item, userClass) {
          var g = Decls.UIObjectFactory.newObject(item, userClass);
          if (g == null) return null;
          constructingDepth.n++;
          g.constructFromResource();
          constructingDepth.n--;
          return g;
        };
        _proto32.getItemById = function getItemById(itemId) {
          return this._itemsById[itemId];
        };
        _proto32.getItemByName = function getItemByName(resName) {
          return this._itemsByName[resName];
        };
        _proto32.getItemAssetByName = function getItemAssetByName(resName) {
          var pi = this._itemsByName[resName];
          if (pi == null) {
            throw new Error("Resource not found -" + resName);
          }
          return this.getItemAsset(pi);
        };
        _proto32.getItemAsset = function getItemAsset(item) {
          switch (item.type) {
            case PackageItemType.Image:
              if (!item.decoded) {
                item.decoded = true;
                var sprite = this._sprites[item.id];
                if (sprite) {
                  var atlasTexture = this.getItemAsset(sprite.atlas);
                  if (atlasTexture) {
                    var sf = new SpriteFrame();
                    sf.texture = atlasTexture;
                    sf.rect = sprite.rect;
                    sf.rotated = sprite.rotated;
                    sf.offset = new Vec2(sprite.offset.x - (sprite.originalSize.width - sprite.rect.width) / 2, -(sprite.offset.y - (sprite.originalSize.height - sprite.rect.height) / 2));
                    sf.originalSize = sprite.originalSize;
                    if (item.scale9Grid) {
                      sf.insetLeft = item.scale9Grid.x;
                      sf.insetTop = item.scale9Grid.y;
                      sf.insetRight = item.width - item.scale9Grid.xMax;
                      sf.insetBottom = item.height - item.scale9Grid.yMax;
                    }
                    item.asset = sf;
                  }
                }
              }
              break;
            case PackageItemType.Atlas:
            case PackageItemType.Sound:
              if (!item.decoded) {
                item.decoded = true;
                item.asset = this._bundle.get(item.file, ItemTypeToAssetType[item.type]);
                if (!item.asset) console.log("Resource '" + item.file + "' not found");else if (item.type == PackageItemType.Atlas) {
                  var asset = item.asset;
                  var tex = asset['_texture'];
                  if (!tex) {
                    tex = new Texture2D();
                    tex.name = asset.nativeUrl;
                    tex.image = asset;
                  }
                  item.asset = tex;
                } else {
                  item.asset = item.asset;
                }
              }
              break;
            case PackageItemType.Font:
              if (!item.decoded) {
                item.decoded = true;
                this.loadFont(item);
              }
              break;
            case PackageItemType.MovieClip:
              if (!item.decoded) {
                item.decoded = true;
                this.loadMovieClip(item);
              }
              break;
          }
          return item.asset;
        };
        _proto32.getItemAssetAsync = function getItemAssetAsync(item, onComplete) {
          if (item.decoded) {
            onComplete(null, item);
            return;
          }
          if (item.loading) {
            item.loading.push(onComplete);
            return;
          }
          switch (item.type) {
            case PackageItemType.Spine:
              item.loading = [onComplete];
              this.loadSpine(item);
              break;
            case PackageItemType.DragonBones:
              item.loading = [onComplete];
              this.loadDragonBones(item);
              break;
            default:
              this.getItemAsset(item);
              onComplete(null, item);
              break;
          }
        };
        _proto32.loadAllAssets = function loadAllAssets() {
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var pi = this._items[i];
            this.getItemAsset(pi);
          }
        };
        _proto32.loadMovieClip = function loadMovieClip(item) {
          var buffer = item.rawData;
          buffer.seek(0, 0);
          item.interval = buffer.readInt() / 1000;
          item.swing = buffer.readBool();
          item.repeatDelay = buffer.readInt() / 1000;
          buffer.seek(0, 1);
          var frameCount = buffer.readShort();
          item.frames = Array(frameCount);
          var spriteId;
          var sprite;
          for (var i = 0; i < frameCount; i++) {
            var nextPos = buffer.readShort();
            nextPos += buffer.position;
            var rect = new Rect();
            rect.x = buffer.readInt();
            rect.y = buffer.readInt();
            rect.width = buffer.readInt();
            rect.height = buffer.readInt();
            var addDelay = buffer.readInt() / 1000;
            var frame = {
              rect: rect,
              addDelay: addDelay,
              texture: null
            };
            spriteId = buffer.readS();
            if (spriteId != null && (sprite = this._sprites[spriteId]) != null) {
              var atlasTexture = this.getItemAsset(sprite.atlas);
              if (atlasTexture) {
                item.width / frame.rect.width;
                var sf = new SpriteFrame();
                sf.texture = atlasTexture;
                sf.rect = sprite.rect;
                sf.rotated = sprite.rotated;
                sf.offset = new Vec2(frame.rect.x - (item.width - frame.rect.width) / 2, -(frame.rect.y - (item.height - frame.rect.height) / 2));
                sf.originalSize = new Size(item.width, item.height);
                frame.texture = sf;
              }
            }
            item.frames[i] = frame;
            buffer.position = nextPos;
          }
        };
        _proto32.loadFont = function loadFont(item) {
          var font = new BitmapFont();
          item.asset = font;
          font.fntConfig = {
            commonHeight: 0,
            fontSize: 0,
            kerningDict: {},
            fontDefDictionary: {}
          };
          var dict = font.fntConfig.fontDefDictionary;
          var buffer = item.rawData;
          buffer.seek(0, 0);
          var ttf = buffer.readBool();
          var canTint = buffer.readBool();
          var resizable = buffer.readBool();
          buffer.readBool(); //has channel
          var fontSize = buffer.readInt();
          var xadvance = buffer.readInt();
          var lineHeight = buffer.readInt();
          var mainTexture;
          var mainSprite = this._sprites[item.id];
          if (mainSprite) mainTexture = this.getItemAsset(mainSprite.atlas);
          buffer.seek(0, 1);
          var bg;
          var cnt = buffer.readInt();
          for (var i = 0; i < cnt; i++) {
            var nextPos = buffer.readShort();
            nextPos += buffer.position;
            bg = {};
            var ch = buffer.readUshort();
            dict[ch] = bg;
            var rect = new Rect();
            bg.rect = rect;
            var img = buffer.readS();
            rect.x = buffer.readInt();
            rect.y = buffer.readInt();
            bg.xOffset = buffer.readInt();
            bg.yOffset = buffer.readInt();
            rect.width = buffer.readInt();
            rect.height = buffer.readInt();
            bg.xAdvance = buffer.readInt();
            bg.channel = buffer.readByte();
            if (bg.channel == 1) bg.channel = 3;else if (bg.channel == 2) bg.channel = 2;else if (bg.channel == 3) bg.channel = 1;
            if (ttf) {
              rect.x += mainSprite.rect.x;
              rect.y += mainSprite.rect.y;
            } else {
              var sprite = this._sprites[img];
              if (sprite) {
                rect.set(sprite.rect);
                bg.xOffset += sprite.offset.x;
                bg.yOffset += sprite.offset.y;
                if (fontSize == 0) fontSize = sprite.originalSize.height;
                if (!mainTexture) {
                  sprite.atlas.load();
                  mainTexture = sprite.atlas.asset;
                }
              }
              if (bg.xAdvance == 0) {
                if (xadvance == 0) bg.xAdvance = bg.xOffset + bg.rect.width;else bg.xAdvance = xadvance;
              }
            }
            buffer.position = nextPos;
          }
          font.fontSize = fontSize;
          font.fntConfig.fontSize = fontSize;
          font.fntConfig.commonHeight = lineHeight == 0 ? fontSize : lineHeight;
          font.fntConfig.resizable = resizable;
          font.fntConfig.canTint = canTint;
          var spriteFrame = new SpriteFrame();
          spriteFrame.texture = mainTexture;
          font.spriteFrame = spriteFrame;
          font.onLoaded();
        };
        _proto32.loadSpine = function loadSpine(item) {
          this._bundle.load(item.file, sp.SkeletonData, function (err, asset) {
            item.decoded = true;
            item.asset = asset;
            var arr = item.loading;
            delete item.loading;
            arr.forEach(function (e) {
              return e(err, item);
            });
          });
        };
        _proto32.loadDragonBones = function loadDragonBones(item) {
          var _this11 = this;
          this._bundle.load(item.file, dragonBones.DragonBonesAsset, function (err, asset) {
            if (err) {
              item.decoded = true;
              var arr = item.loading;
              delete item.loading;
              arr.forEach(function (e) {
                return e(err, item);
              });
              return;
            }
            item.asset = asset;
            var atlasFile = item.file.replace("_ske", "_tex");
            var pos = atlasFile.lastIndexOf('.');
            if (pos != -1) atlasFile = atlasFile.substring(0, pos + 1) + "json";
            _this11._bundle.load(atlasFile, dragonBones.DragonBonesAtlasAsset, function (err, asset) {
              item.decoded = true;
              item.atlasAsset = asset;
              var arr = item.loading;
              delete item.loading;
              arr.forEach(function (e) {
                return e(err, item);
              });
            });
          });
        };
        _createClass(UIPackage, [{
          key: "id",
          get: function get() {
            return this._id;
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "path",
          get: function get() {
            return this._path;
          }
        }, {
          key: "dependencies",
          get: function get() {
            return this._dependencies;
          }
        }], [{
          key: "branch",
          get: function get() {
            return _branch;
          },
          set: function set(value) {
            _branch = value;
            for (var pkgId in _instById) {
              var pkg = _instById[pkgId];
              if (pkg._branches) {
                pkg._branchIndex = pkg._branches.indexOf(value);
              }
            }
          }
        }]);
        return UIPackage;
      }());
      var ItemTypeToAssetType = (_ItemTypeToAssetType = {}, _ItemTypeToAssetType[PackageItemType.Atlas] = ImageAsset, _ItemTypeToAssetType[PackageItemType.Sound] = AudioClip, _ItemTypeToAssetType);
      var _instById = {};
      var _instByName = {};
      var _branch = "";
      var _vars = {};
      var Decls = {};
      function toGrayedColor(c) {
        var v = c.r * 0.299 + c.g * 0.587 + c.b * 0.114;
        return new Color(v, v, v, c.a);
      }
      var UBBParser = exports('UBBParser', /*#__PURE__*/function () {
        function UBBParser() {
          this._readPos = 0;
          this._handlers = {};
          this._handlers["url"] = this.onTag_URL;
          this._handlers["img"] = this.onTag_IMG;
          this._handlers["b"] = this.onTag_Simple;
          this._handlers["i"] = this.onTag_Simple;
          this._handlers["u"] = this.onTag_Simple; //this._handlers["sup"] = this.onTag_Simple;
          //this._handlers["sub"] = this.onTag_Simple;
          this._handlers["color"] = this.onTag_COLOR; //this._handlers["font"] = this.onTag_FONT;
          this._handlers["size"] = this.onTag_SIZE;
        }
        var _proto33 = UBBParser.prototype;
        _proto33.onTag_URL = function onTag_URL(tagName, end, attr) {
          if (!end) {
            var ret;
            if (attr != null) ret = "<on click=\"onClickLink\" param=\"" + attr + "\">";else {
              var href = this.getTagText();
              ret = "<on click=\"onClickLink\" param=\"" + href + "\">";
            }
            if (this.linkUnderline) ret += "<u>";
            if (this.linkColor) ret += "<color=" + this.linkColor + ">";
            return ret;
          } else {
            var _ret = "";
            if (this.linkColor) _ret += "</color>";
            if (this.linkUnderline) _ret += "</u>";
            _ret += "</on>";
            return _ret;
          }
        };
        _proto33.onTag_IMG = function onTag_IMG(tagName, end, attr) {
          if (!end) {
            var src = this.getTagText(true);
            if (!src) return null;
            return "<img src=\"" + src + "\"/>";
          } else return null;
        };
        _proto33.onTag_Simple = function onTag_Simple(tagName, end, attr) {
          return end ? "</" + tagName + ">" : "<" + tagName + ">";
        };
        _proto33.onTag_COLOR = function onTag_COLOR(tagName, end, attr) {
          if (!end) {
            this.lastColor = attr;
            return "<color=" + attr + ">";
          } else return "</color>";
        };
        _proto33.onTag_FONT = function onTag_FONT(tagName, end, attr) {
          if (!end) return "<font face=\"" + attr + "\">";else return "</font>";
        };
        _proto33.onTag_SIZE = function onTag_SIZE(tagName, end, attr) {
          if (!end) {
            this.lastSize = attr;
            return "<size=" + attr + ">";
          } else return "</size>";
        };
        _proto33.getTagText = function getTagText(remove) {
          var pos1 = this._readPos;
          var pos2;
          var result = "";
          while ((pos2 = this._text.indexOf("[", pos1)) != -1) {
            if (this._text.charCodeAt(pos2 - 1) == 92)
              //\
              {
                result += this._text.substring(pos1, pos2 - 1);
                result += "[";
                pos1 = pos2 + 1;
              } else {
              result += this._text.substring(pos1, pos2);
              break;
            }
          }
          if (pos2 == -1) return null;
          if (remove) this._readPos = pos2;
          return result;
        };
        _proto33.parse = function parse(text, remove) {
          this._text = text;
          this.lastColor = null;
          this.lastSize = null;
          var pos1 = 0,
            pos2,
            pos3;
          var end;
          var tag, attr;
          var repl;
          var func;
          var result = "";
          while ((pos2 = this._text.indexOf("[", pos1)) != -1) {
            if (pos2 > 0 && this._text.charCodeAt(pos2 - 1) == 92)
              //\
              {
                result += this._text.substring(pos1, pos2 - 1);
                result += "[";
                pos1 = pos2 + 1;
                continue;
              }
            result += this._text.substring(pos1, pos2);
            pos1 = pos2;
            pos2 = this._text.indexOf("]", pos1);
            if (pos2 == -1) break;
            end = this._text.charAt(pos1 + 1) == '/';
            tag = this._text.substring(end ? pos1 + 2 : pos1 + 1, pos2);
            this._readPos = pos2 + 1;
            attr = null;
            repl = null;
            pos3 = tag.indexOf("=");
            if (pos3 != -1) {
              attr = tag.substring(pos3 + 1);
              tag = tag.substring(0, pos3);
            }
            tag = tag.toLowerCase();
            func = this._handlers[tag];
            if (func != null) {
              repl = func.call(this, tag, end, attr);
              if (repl != null && !remove) result += repl;
            } else result += this._text.substring(pos1, this._readPos);
            pos1 = this._readPos;
          }
          if (pos1 < this._text.length) result += this._text.substring(pos1);
          this._text = null;
          return result;
        };
        return UBBParser;
      }());
      var defaultParser = new UBBParser();
      var GTextField = exports('GTextField', /*#__PURE__*/function (_GObject5) {
        _inheritsLoose(GTextField, _GObject5);
        function GTextField() {
          var _this12;
          _this12 = _GObject5.call(this) || this;
          _this12._fontSize = 0;
          _this12._leading = 0;
          _this12._node.name = "GTextField";
          _this12._touchDisabled = true;
          _this12._text = "";
          _this12._color = new Color(255, 255, 255, 255);
          _this12.createRenderer();
          _this12.fontSize = 12;
          _this12.leading = 3;
          _this12.singleLine = false;
          _this12._sizeDirty = false;
          _this12._node.on(Node.EventType.SIZE_CHANGED, _this12.onLabelSizeChanged, _assertThisInitialized(_this12));
          return _this12;
        }
        var _proto34 = GTextField.prototype;
        _proto34.createRenderer = function createRenderer() {
          this._label = this._node.addComponent(Label);
          this._label.string = "";
          this.autoSize = AutoSizeType.Both;
        };
        _proto34.parseTemplate = function parseTemplate(template) {
          var pos1 = 0,
            pos2,
            pos3;
          var tag;
          var value;
          var result = "";
          while ((pos2 = template.indexOf("{", pos1)) != -1) {
            if (pos2 > 0 && template.charCodeAt(pos2 - 1) == 92)
              //\
              {
                result += template.substring(pos1, pos2 - 1);
                result += "{";
                pos1 = pos2 + 1;
                continue;
              }
            result += template.substring(pos1, pos2);
            pos1 = pos2;
            pos2 = template.indexOf("}", pos1);
            if (pos2 == -1) break;
            if (pos2 == pos1 + 1) {
              result += template.substring(pos1, pos1 + 2);
              pos1 = pos2 + 1;
              continue;
            }
            tag = template.substring(pos1 + 1, pos2);
            pos3 = tag.indexOf("=");
            if (pos3 != -1) {
              value = this._templateVars[tag.substring(0, pos3)];
              if (value == null) result += tag.substring(pos3 + 1);else result += value;
            } else {
              value = this._templateVars[tag];
              if (value != null) result += value;
            }
            pos1 = pos2 + 1;
          }
          if (pos1 < template.length) result += template.substring(pos1);
          return result;
        };
        _proto34.setVar = function setVar(name, value) {
          if (!this._templateVars) this._templateVars = {};
          this._templateVars[name] = value;
          return this;
        };
        _proto34.flushVars = function flushVars() {
          this.markSizeChanged();
          this.updateText();
        };
        _proto34.ensureSizeCorrect = function ensureSizeCorrect() {
          if (this._sizeDirty) {
            this._label.updateRenderData(true);
            this._sizeDirty = false;
          }
        };
        _proto34.getParsedText = function getParsedText() {
          var text2 = this._text;
          if (this._templateVars) text2 = this.parseTemplate(text2);
          if (this._ubbEnabled)
            //不支持同一个文本不同样式
            text2 = defaultParser.parse(text2, true);
          return text2;
        };
        _proto34.updateText = function updateText() {
          var text2 = this._text;
          if (this._templateVars) text2 = this.parseTemplate(text2);
          if (this._ubbEnabled)
            //不支持同一个文本不同样式
            text2 = defaultParser.parse(text2, true);
          if (this.maxWidth > 0 && this._autoSize == AutoSizeType.Both) {
            this._label.string = text2;
            this._label.updateRenderData(true);
            if (this._uiTrans.width > this.maxWidth) {
              this._label.overflow = Label.Overflow.RESIZE_HEIGHT;
              this._uiTrans.width = this.maxWidth;
              this._label.updateRenderData(true);
              this._sizeDirty = true;
              this.ensureSizeCorrect();
              this._autoSize = AutoSizeType.Both;
            }
          } else {
            this._label.string = text2;
          }
        };
        _proto34.assignFont = function assignFont(label, value) {
          if (value instanceof Font) label.font = value;else {
            var font = getFontByName(value);
            if (!font) {
              label.fontFamily = value;
              label.useSystemFont = true;
            } else label.font = font;
          }
        };
        _proto34.assignFontColor = function assignFontColor(label, value) {
          var font = label.font;
          if (font instanceof BitmapFont && !font.fntConfig.canTint) value = Color.WHITE;
          if (this._grayed) value = toGrayedColor(value);
          label.color = value;
        };
        _proto34.updateFont = function updateFont() {
          this.assignFont(this._label, this._realFont);
        };
        _proto34.updateFontColor = function updateFontColor() {
          this.assignFontColor(this._label, this._color);
        };
        _proto34.updateStrokeColor = function updateStrokeColor() {
          if (!this._label || !this._label.enableOutline) return;
          if (!this._strokeColor) this._strokeColor = new Color();
          if (this._grayed) this._label.outlineColor = toGrayedColor(this._strokeColor);else this._label.outlineColor = this._strokeColor;
        };
        _proto34.updateShadowColor = function updateShadowColor() {
          if (!this._label || !this._label.enableShadow) return;
          if (!this._shadowColor) this._shadowColor = new Color();
          if (this._grayed) this._label.shadowColor = toGrayedColor(this._shadowColor);else this._label.shadowColor = this._shadowColor;
        };
        _proto34.updateFontSize = function updateFontSize() {
          var font = this._label.font;
          if (font instanceof BitmapFont) {
            var fntConfig = font.fntConfig;
            if (fntConfig.resizable) this._label.fontSize = this._fontSize;else this._label.fontSize = fntConfig.fontSize;
            this._label.lineHeight = fntConfig.fontSize + (this._leading + 4) * fntConfig.fontSize / this._label.fontSize;
          } else {
            this._label.fontSize = this._fontSize;
            this._label.lineHeight = this._fontSize + this._leading;
          }
        };
        _proto34.updateOverflow = function updateOverflow() {
          if (this._autoSize == AutoSizeType.Both) this._label.overflow = Label.Overflow.NONE;else if (this._autoSize == AutoSizeType.Height) {
            this._label.overflow = Label.Overflow.RESIZE_HEIGHT;
            this._uiTrans.width = this._width;
          } else if (this._autoSize == AutoSizeType.Shrink) {
            this._label.overflow = Label.Overflow.SHRINK;
            this._uiTrans.setContentSize(this._width, this._height);
          } else {
            this._label.overflow = Label.Overflow.CLAMP;
            this._uiTrans.setContentSize(this._width, this._height);
          }
        };
        _proto34.markSizeChanged = function markSizeChanged() {
          if (this._underConstruct) return;
          if (this._autoSize == AutoSizeType.Both || this._autoSize == AutoSizeType.Height) {
            if (!this._sizeDirty) {
              this._node.emit(Event.SIZE_DELAY_CHANGE);
              this._sizeDirty = true;
            }
          }
        };
        _proto34.onLabelSizeChanged = function onLabelSizeChanged() {
          this._sizeDirty = false;
          if (this._underConstruct) return;
          if (this._autoSize == AutoSizeType.Both || this._autoSize == AutoSizeType.Height) {
            this._updatingSize = true;
            this.setSize(this._uiTrans.width, this._uiTrans.height);
            this._updatingSize = false;
          }
        };
        _proto34.handleSizeChanged = function handleSizeChanged() {
          if (this._updatingSize) return;
          if (this._autoSize == AutoSizeType.None || this._autoSize == AutoSizeType.Shrink) {
            this._uiTrans.setContentSize(this._width, this._height);
          } else if (this._autoSize == AutoSizeType.Height) this._uiTrans.width = this._width;
        };
        _proto34.handleGrayedChanged = function handleGrayedChanged() {
          this.updateFontColor();
          this.updateStrokeColor();
        };
        _proto34.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.color;
            case ObjectPropID.OutlineColor:
              return this.strokeColor;
            case ObjectPropID.FontSize:
              return this.fontSize;
            default:
              return _GObject5.prototype.getProp.call(this, index);
          }
        };
        _proto34.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.color = value;
              break;
            case ObjectPropID.OutlineColor:
              this.strokeColor = value;
              break;
            case ObjectPropID.FontSize:
              this.fontSize = value;
              break;
            default:
              _GObject5.prototype.setProp.call(this, index, value);
              break;
          }
        };
        _proto34.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject5.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 5);
          this.font = buffer.readS();
          this.fontSize = buffer.readShort();
          this.color = buffer.readColor();
          this.align = buffer.readByte();
          this.verticalAlign = buffer.readByte();
          this.leading = buffer.readShort();
          this.letterSpacing = buffer.readShort();
          this._ubbEnabled = buffer.readBool();
          this.autoSize = buffer.readByte();
          this.underline = buffer.readBool();
          this.italic = buffer.readBool();
          this.bold = buffer.readBool();
          this.singleLine = buffer.readBool();
          if (buffer.readBool()) {
            this.strokeColor = buffer.readColor();
            this.stroke = buffer.readFloat();
          }
          if (buffer.readBool()) {
            this.shadowColor = buffer.readColor();
            var f1 = buffer.readFloat();
            var f2 = buffer.readFloat();
            this.shadowOffset = new Vec2(f1, f2);
          }
          if (buffer.readBool()) this._templateVars = {};
        };
        _proto34.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GObject5.prototype.setup_afterAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 6);
          var str = buffer.readS();
          if (str != null) {
            this.text = str;
          } else {
            this.text = "";
          }
        };
        _createClass(GTextField, [{
          key: "text",
          get: function get() {
            return this._text;
          },
          set: function set(value) {
            this._text = value;
            if (this._text == null) this._text = "";
            this.updateGear(6);
            this.markSizeChanged();
            this.updateText();
          }
        }, {
          key: "font",
          get: function get() {
            return this._font;
          },
          set: function set(value) {
            if (this._font != value || !value) {
              this._font = value;
              this.markSizeChanged();
              var newFont = value ? value : UIConfig.defaultFont;
              if (newFont.startsWith("ui://")) {
                var pi = UIPackage.getItemByURL(newFont);
                if (pi) newFont = pi.owner.getItemAsset(pi);else newFont = UIConfig.defaultFont;
              }
              this._realFont = newFont;
              this.updateFont();
            }
          }
        }, {
          key: "fontSize",
          get: function get() {
            return this._fontSize;
          },
          set: function set(value) {
            if (value < 0) return;
            if (this._fontSize != value) {
              this._fontSize = value;
              this.markSizeChanged();
              this.updateFontSize();
            }
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            this._color.set(value);
            this.updateGear(4);
            this.updateFontColor();
          }
        }, {
          key: "align",
          get: function get() {
            return this._label ? this._label.horizontalAlign : 0;
          },
          set: function set(value) {
            if (this._label) this._label.horizontalAlign = value;
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._label ? this._label.verticalAlign : 0;
          },
          set: function set(value) {
            if (this._label) this._label.verticalAlign = value;
          }
        }, {
          key: "leading",
          get: function get() {
            return this._leading;
          },
          set: function set(value) {
            if (this._leading != value) {
              this._leading = value;
              this.markSizeChanged();
              this.updateFontSize();
            }
          }
        }, {
          key: "letterSpacing",
          get: function get() {
            return this._label ? this._label.spacingX : 0;
          },
          set: function set(value) {
            if (this._label && this._label.spacingX != value) {
              this.markSizeChanged();
              this._label.spacingX = value;
            }
          }
        }, {
          key: "underline",
          get: function get() {
            return this._label ? this._label.isUnderline : false;
          },
          set: function set(value) {
            if (this._label) this._label.isUnderline = value;
          }
        }, {
          key: "bold",
          get: function get() {
            return this._label ? this._label.isBold : false;
          },
          set: function set(value) {
            if (this._label) this._label.isBold = value;
          }
        }, {
          key: "italic",
          get: function get() {
            return this._label ? this._label.isItalic : false;
          },
          set: function set(value) {
            if (this._label) this._label.isItalic = value;
          }
        }, {
          key: "singleLine",
          get: function get() {
            return this._label ? !this._label.enableWrapText : false;
          },
          set: function set(value) {
            if (this._label) this._label.enableWrapText = !value;
          }
        }, {
          key: "stroke",
          get: function get() {
            return this._label ? this._label.outlineWidth : 0;
          },
          set: function set(value) {
            if (!this._label) return;
            this._label.outlineWidth = value;
            this._label.enableOutline = value > 0;
            if (value > 0) this.updateStrokeColor();
          }
        }, {
          key: "strokeColor",
          get: function get() {
            return this._strokeColor;
          },
          set: function set(value) {
            if (!this._strokeColor) this._strokeColor = new Color();
            this._strokeColor.set(value);
            this.updateGear(4);
            this.updateStrokeColor();
          }
        }, {
          key: "shadowOffset",
          get: function get() {
            return this._shadowOffset;
          },
          set: function set(value) {
            if (!this._shadowOffset) this._shadowOffset = new Vec2();
            this._shadowOffset.set(value);
            if (!this._label) return;
            this._label.shadowOffset = new Vec2(this._shadowOffset.x, -this._shadowOffset.y);
            this._label.enableShadow = value.x != 0 || value.y != 0;
            if (this._label.enableShadow) this.updateShadowColor();
          }
        }, {
          key: "shadowColor",
          get: function get() {
            return this._shadowColor;
          },
          set: function set(value) {
            if (!this._shadowColor) this._shadowColor = new Color();
            this._shadowColor.set(value);
            this.updateShadowColor();
          }
        }, {
          key: "ubbEnabled",
          get: function get() {
            return this._ubbEnabled;
          },
          set: function set(value) {
            if (this._ubbEnabled != value) {
              this._ubbEnabled = value;
              this.markSizeChanged();
              this.updateText();
            }
          }
        }, {
          key: "autoSize",
          get: function get() {
            return this._autoSize;
          },
          set: function set(value) {
            if (this._autoSize != value) {
              this._autoSize = value;
              this.markSizeChanged();
              this.updateOverflow();
            }
          }
        }, {
          key: "templateVars",
          get: function get() {
            return this._templateVars;
          },
          set: function set(value) {
            if (this._templateVars == null && value == null) return;
            this._templateVars = value;
            this.flushVars();
          }
        }, {
          key: "textWidth",
          get: function get() {
            this.ensureSizeCorrect();
            return this._uiTrans.width;
          }
        }]);
        return GTextField;
      }(GObject));
      var RichTextImageAtlas = /*#__PURE__*/function (_SpriteAtlas) {
        _inheritsLoose(RichTextImageAtlas, _SpriteAtlas);
        function RichTextImageAtlas() {
          return _SpriteAtlas.apply(this, arguments) || this;
        }
        var _proto35 = RichTextImageAtlas.prototype;
        _proto35.getSpriteFrame = function getSpriteFrame(key) {
          var pi = UIPackage.getItemByURL(key);
          if (pi) {
            pi.load();
            if (pi.type == PackageItemType.Image) return pi.asset;else if (pi.type == PackageItemType.MovieClip) return pi.frames[0].texture;
          }
          return _SpriteAtlas.prototype.getSpriteFrame.call(this, key);
        };
        return RichTextImageAtlas;
      }(SpriteAtlas);
      var imageAtlas = new RichTextImageAtlas();
      var GRichTextField = exports('GRichTextField', /*#__PURE__*/function (_GTextField) {
        _inheritsLoose(GRichTextField, _GTextField);
        function GRichTextField() {
          var _this13;
          _this13 = _GTextField.call(this) || this;
          _this13._node.name = "GRichTextField";
          _this13._touchDisabled = false;
          _this13.linkUnderline = UIConfig.linkUnderline;
          return _this13;
        }
        var _proto36 = GRichTextField.prototype;
        _proto36.createRenderer = function createRenderer() {
          this._richText = this._node.addComponent(RichText);
          this._richText.handleTouchEvent = false;
          this.autoSize = AutoSizeType.None;
          this._richText.imageAtlas = imageAtlas;
        };
        _proto36.markSizeChanged = function markSizeChanged() {//RichText貌似没有延迟重建文本，所以这里不需要
        };
        _proto36.updateText = function updateText() {
          var text2 = this._text;
          if (this._templateVars) text2 = this.parseTemplate(text2);
          if (this._ubbEnabled) {
            defaultParser.linkUnderline = this.linkUnderline;
            defaultParser.linkColor = this.linkColor;
            text2 = defaultParser.parse(text2);
          }
          if (this._bold) text2 = "<b>" + text2 + "</b>";
          if (this._italics) text2 = "<i>" + text2 + "</i>";
          if (this._underline) text2 = "<u>" + text2 + "</u>";
          var c = this._color;
          if (this._grayed) c = toGrayedColor(c);
          text2 = "<color=" + c.toHEX("#rrggbb") + ">" + text2 + "</color>";
          if (this._autoSize == AutoSizeType.Both) {
            if (this._richText.maxWidth != 0) this._richText["_maxWidth"] = 0;
            this._richText.string = text2;
            if (this.maxWidth != 0 && this._uiTrans.contentSize.width > this.maxWidth) this._richText.maxWidth = this.maxWidth;
          } else this._richText.string = text2;
        };
        _proto36.updateFont = function updateFont() {
          this.assignFont(this._richText, this._realFont);
        };
        _proto36.updateFontColor = function updateFontColor() {
          this.assignFontColor(this._richText, this._color);
        };
        _proto36.updateFontSize = function updateFontSize() {
          var fontSize = this._fontSize;
          var font = this._richText.font;
          if (font instanceof BitmapFont) {
            if (!font.fntConfig.resizable) fontSize = font.fntConfig.fontSize;
          }
          this._richText.fontSize = fontSize;
          this._richText.lineHeight = fontSize + this._leading * 2;
        };
        _proto36.updateOverflow = function updateOverflow() {
          if (this._autoSize == AutoSizeType.Both) this._richText.maxWidth = 0;else this._richText.maxWidth = this._width;
        };
        _proto36.handleSizeChanged = function handleSizeChanged() {
          if (this._updatingSize) return;
          if (this._autoSize != AutoSizeType.Both) this._richText.maxWidth = this._width;
        };
        _createClass(GRichTextField, [{
          key: "align",
          get: function get() {
            return this._richText.horizontalAlign;
          },
          set: function set(value) {
            this._richText.horizontalAlign = value;
          }
        }, {
          key: "underline",
          get: function get() {
            return this._underline;
          },
          set: function set(value) {
            if (this._underline != value) {
              this._underline = value;
              this.updateText();
            }
          }
        }, {
          key: "bold",
          get: function get() {
            return this._bold;
          },
          set: function set(value) {
            if (this._bold != value) {
              this._bold = value;
              this.updateText();
            }
          }
        }, {
          key: "italic",
          get: function get() {
            return this._italics;
          },
          set: function set(value) {
            if (this._italics != value) {
              this._italics = value;
              this.updateText();
            }
          }
        }]);
        return GRichTextField;
      }(GTextField));
      var InputProcessor = /*#__PURE__*/function (_Component3) {
        _inheritsLoose(InputProcessor, _Component3);
        function InputProcessor() {
          var _this14;
          _this14 = _Component3.call(this) || this;
          _this14.block = false;
          _this14._touches = new Array();
          _this14._rollOutChain = new Array();
          _this14._rollOverChain = new Array();
          _this14._touchPos = new Vec2();
          return _this14;
        }
        var _proto37 = InputProcessor.prototype;
        _proto37.onLoad = function onLoad() {
          this._owner = GObject.cast(this.node);
        };
        _proto37.onEnable = function onEnable() {
          var node = this.node;
          node.on(Node.EventType.TOUCH_START, this.touchBeginHandler, this);
          node.on(Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);
          node.on(Node.EventType.TOUCH_END, this.touchEndHandler, this);
          node.on(Node.EventType.TOUCH_CANCEL, this.touchCancelHandler, this);
          node.on(Node.EventType.MOUSE_DOWN, this.mouseDownHandler, this);
          node.on(Node.EventType.MOUSE_MOVE, this.mouseMoveHandler, this);
          node.on(Node.EventType.MOUSE_UP, this.mouseUpHandler, this);
          node.on(Node.EventType.MOUSE_WHEEL, this.mouseWheelHandler, this);
          this._touchListener = this.node.eventProcessor.touchListener;
        };
        _proto37.onDisable = function onDisable() {
          var node = this.node;
          node.off(Node.EventType.TOUCH_START, this.touchBeginHandler, this);
          node.off(Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);
          node.off(Node.EventType.TOUCH_END, this.touchEndHandler, this);
          node.off(Node.EventType.TOUCH_CANCEL, this.touchCancelHandler, this);
          node.off(Node.EventType.MOUSE_DOWN, this.mouseDownHandler, this);
          node.off(Node.EventType.MOUSE_MOVE, this.mouseMoveHandler, this);
          node.off(Node.EventType.MOUSE_UP, this.mouseUpHandler, this);
          node.off(Node.EventType.MOUSE_WHEEL, this.mouseWheelHandler, this);
          this._touchListener = null;
        };
        _proto37.getAllTouches = function getAllTouches(touchIds) {
          touchIds = touchIds || new Array();
          var cnt = this._touches.length;
          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            if (ti.touchId != -1) touchIds.push(ti.touchId);
          }
          return touchIds;
        };
        _proto37.getTouchPosition = function getTouchPosition(touchId) {
          if (touchId === undefined) touchId = -1;
          var cnt = this._touches.length;
          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            if (ti.touchId != -1 && (touchId == -1 || ti.touchId == touchId)) return ti.pos;
          }
          return Vec2.ZERO;
        };
        _proto37.getTouchTarget = function getTouchTarget() {
          var cnt = this._touches.length;
          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            if (ti.touchId != -1) return ti.target;
          }
          return null;
        };
        _proto37.addTouchMonitor = function addTouchMonitor(touchId, target) {
          var ti = this.getInfo(touchId, false);
          if (!ti) return;
          var index = ti.touchMonitors.indexOf(target);
          if (index == -1) ti.touchMonitors.push(target);
        };
        _proto37.removeTouchMonitor = function removeTouchMonitor(target) {
          var cnt = this._touches.length;
          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            var index = ti.touchMonitors.indexOf(target);
            if (index != -1) ti.touchMonitors.splice(index, 1);
          }
        };
        _proto37.cancelClick = function cancelClick(touchId) {
          var ti = this.getInfo(touchId, false);
          if (ti) ti.clickCancelled = true;
        };
        _proto37.simulateClick = function simulateClick(target) {
          var evt;
          evt = borrowEvent(Event.TOUCH_BEGIN, true);
          evt.initiator = target;
          evt.pos.set(target.localToGlobal());
          evt.touchId = 0;
          evt.clickCount = 1;
          evt.button = 0;
          evt._processor = this;
          if (this._captureCallback) this._captureCallback.call(this._owner, evt);
          target.node.dispatchEvent(evt);
          evt.unuse();
          evt.type = Event.TOUCH_END;
          evt.bubbles = true;
          target.node.dispatchEvent(evt);
          evt.unuse();
          evt.type = Event.CLICK;
          evt.bubbles = true;
          target.node.dispatchEvent(evt);
          returnEvent(evt);
        };
        _proto37.touchBeginHandler = function touchBeginHandler(evt) {
          if (this.block) return;
          var ti = this.updateInfo(evt.getID(), evt.getLocation());
          this.setBegin(ti);
          if (this._touchListener) {
            this._touchListener.setSwallowTouches(ti.target != this._owner);
          } else {
            // since cc3.4.0, setSwallowTouches removed
            var e = evt;
            e.preventSwallow = ti.target == this._owner;
          }
          var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_BEGIN, true);
          if (this._captureCallback) this._captureCallback.call(this._owner, evt2);
          ti.target.node.dispatchEvent(evt2);
          this.handleRollOver(ti, ti.target);
          return true;
        };
        _proto37.touchMoveHandler = function touchMoveHandler(evt) {
          if (this.block) return;
          var ti = this.updateInfo(evt.getID(), evt.getLocation());
          if (!this._touchListener) {
            var e = evt;
            e.preventSwallow = ti.target == this._owner;
          }
          this.handleRollOver(ti, ti.target);
          if (ti.began) {
            var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_MOVE, false);
            var done = false;
            var cnt = ti.touchMonitors.length;
            for (var i = 0; i < cnt; i++) {
              var mm = ti.touchMonitors[i];
              if (mm.node == null || !mm.node.activeInHierarchy) continue;
              evt2.unuse();
              evt2.type = Event.TOUCH_MOVE;
              mm.node.dispatchEvent(evt2);
              if (mm == this._owner) done = true;
            }
            if (!done && this.node) {
              evt2.unuse();
              evt2.type = Event.TOUCH_MOVE;
              this.node.dispatchEvent(evt2);
            }
            returnEvent(evt2);
          }
        };
        _proto37.touchEndHandler = function touchEndHandler(evt) {
          if (this.block) return;
          var ti = this.updateInfo(evt.getID(), evt.getLocation());
          if (!this._touchListener) {
            var e = evt;
            e.preventSwallow = ti.target == this._owner;
          }
          this.setEnd(ti);
          var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_END, false);
          var cnt = ti.touchMonitors.length;
          for (var i = 0; i < cnt; i++) {
            var mm = ti.touchMonitors[i];
            if (mm == ti.target || mm.node == null || !mm.node.activeInHierarchy || 'isAncestorOf' in mm && mm.isAncestorOf(ti.target)) continue;
            evt2.unuse();
            evt2.type = Event.TOUCH_END;
            mm.node.dispatchEvent(evt2);
          }
          ti.touchMonitors.length = 0;
          if (ti.target && ti.target.node) {
            if (ti.target instanceof GRichTextField) ti.target.node.getComponent(RichText)["_onTouchEnded"](evt);
            evt2.unuse();
            evt2.type = Event.TOUCH_END;
            evt2.bubbles = true;
            ti.target.node.dispatchEvent(evt2);
          }
          returnEvent(evt2);
          ti.target = this.clickTest(ti);
          if (ti.target) {
            evt2 = this.getEvent(ti, ti.target, Event.CLICK, true);
            ti.target.node.dispatchEvent(evt2);
            returnEvent(evt2);
          }
          if (sys.isMobile)
            //on mobile platform, trigger RollOut on up event, but not on PC
            this.handleRollOver(ti, null);else this.handleRollOver(ti, ti.target);
          ti.target = null;
          ti.touchId = -1;
          ti.button = -1;
        };
        _proto37.touchCancelHandler = function touchCancelHandler(evt) {
          if (this.block) return;
          var ti = this.updateInfo(evt.getID(), evt.getLocation());
          if (!this._touchListener) {
            var e = evt;
            e.preventSwallow = ti.target == this._owner;
          }
          var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_END, false);
          var cnt = ti.touchMonitors.length;
          for (var i = 0; i < cnt; i++) {
            var mm = ti.touchMonitors[i];
            if (mm == ti.target || mm.node == null || !mm.node.activeInHierarchy || 'isAncestorOf' in mm && mm.isAncestorOf(ti.target)) continue;
            evt2.initiator = mm;
            mm.node.dispatchEvent(evt2);
          }
          ti.touchMonitors.length = 0;
          if (ti.target && ti.target.node) {
            evt2.bubbles = true;
            ti.target.node.dispatchEvent(evt2);
          }
          returnEvent(evt2);
          this.handleRollOver(ti, null);
          ti.target = null;
          ti.touchId = -1;
          ti.button = -1;
        };
        _proto37.mouseDownHandler = function mouseDownHandler(evt) {
          var ti = this.getInfo(0, true);
          ti.button = evt.getButton();
        };
        _proto37.mouseUpHandler = function mouseUpHandler(evt) {
          var ti = this.getInfo(0, true);
          ti.button = evt.getButton();
        };
        _proto37.mouseMoveHandler = function mouseMoveHandler(evt) {
          var ti = this.getInfo(0, false);
          if (ti && Math.abs(ti.pos.x - evt.getLocationX()) < 1 && Math.abs(ti.pos.y - (UIContentScaler.rootSize.height - evt.getLocationY())) < 1) return;
          ti = this.updateInfo(0, evt.getLocation());
          this.handleRollOver(ti, ti.target);
          if (ti.began) {
            var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_MOVE, false);
            var done = false;
            var cnt = ti.touchMonitors.length;
            for (var i = 0; i < cnt; i++) {
              var mm = ti.touchMonitors[i];
              if (mm.node == null || !mm.node.activeInHierarchy) continue;
              evt2.initiator = mm;
              mm.node.dispatchEvent(evt2);
              if (mm == this._owner) done = true;
            }
            if (!done && this.node) {
              evt2.initiator = this._owner;
              this.node.dispatchEvent(evt2);
              returnEvent(evt2);
            }
            returnEvent(evt2);
          }
        };
        _proto37.mouseWheelHandler = function mouseWheelHandler(evt) {
          var ti = this.updateInfo(0, evt.getLocation());
          ti.mouseWheelDelta = Math.max(evt.getScrollX(), evt.getScrollY());
          var evt2 = this.getEvent(ti, ti.target, Event.MOUSE_WHEEL, true);
          ti.target.node.dispatchEvent(evt2);
          returnEvent(evt2);
        };
        _proto37.updateInfo = function updateInfo(touchId, pos) {
          var camera = director.root.batcher2D.getFirstRenderCamera(this.node);
          if (camera) {
            s_vec3.set(pos.x, pos.y);
            camera.screenToWorld(s_vec3_2, s_vec3);
            this._touchPos.set(s_vec3_2.x, s_vec3_2.y);
          } else this._touchPos.set(pos);
          this._touchPos.y = UIContentScaler.rootSize.height - this._touchPos.y;
          var target = this._owner.hitTest(this._touchPos);
          if (!target) target = this._owner;
          var ti = this.getInfo(touchId);
          ti.target = target;
          ti.pos.set(this._touchPos);
          ti.button = EventMouse.BUTTON_LEFT;
          ti.touchId = touchId;
          return ti;
        };
        _proto37.getInfo = function getInfo(touchId, createIfNotExisits) {
          if (createIfNotExisits === undefined) createIfNotExisits = true;
          var ret = null;
          var cnt = this._touches.length;
          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            if (ti.touchId == touchId) return ti;else if (ti.touchId == -1) ret = ti;
          }
          if (!ret) {
            if (!createIfNotExisits) return null;
            ret = new TouchInfo();
            this._touches.push(ret);
          }
          ret.touchId = touchId;
          return ret;
        };
        _proto37.setBegin = function setBegin(ti) {
          ti.began = true;
          ti.clickCancelled = false;
          ti.downPos.set(ti.pos);
          ti.downTargets.length = 0;
          var obj = ti.target;
          while (obj) {
            ti.downTargets.push(obj);
            obj = obj.findParent();
          }
        };
        _proto37.setEnd = function setEnd(ti) {
          ti.began = false;
          var now = game.totalTime / 1000;
          var elapsed = now - ti.lastClickTime;
          if (elapsed < 0.45) {
            if (ti.clickCount == 2) ti.clickCount = 1;else ti.clickCount++;
          } else ti.clickCount = 1;
          ti.lastClickTime = now;
        };
        _proto37.clickTest = function clickTest(ti) {
          if (ti.downTargets.length == 0 || ti.clickCancelled || Math.abs(ti.pos.x - ti.downPos.x) > 50 || Math.abs(ti.pos.y - ti.downPos.y) > 50) return null;
          var obj = ti.downTargets[0];
          if (obj && obj.node && obj.node.activeInHierarchy) return obj;
          obj = ti.target;
          while (obj) {
            var index = ti.downTargets.indexOf(obj);
            if (index != -1 && obj.node && obj.node.activeInHierarchy) break;
            obj = obj.findParent();
          }
          return obj;
        };
        _proto37.handleRollOver = function handleRollOver(ti, target) {
          if (ti.lastRollOver == target) return;
          var element = ti.lastRollOver;
          while (element && element.node) {
            this._rollOutChain.push(element);
            element = element.findParent();
          }
          element = target;
          while (element && element.node) {
            var i = this._rollOutChain.indexOf(element);
            if (i != -1) {
              this._rollOutChain.length = i;
              break;
            }
            this._rollOverChain.push(element);
            element = element.findParent();
          }
          ti.lastRollOver = target;
          var cnt = this._rollOutChain.length;
          for (var _i = 0; _i < cnt; _i++) {
            element = this._rollOutChain[_i];
            if (element.node && element.node.activeInHierarchy) {
              var evt = this.getEvent(ti, element, Event.ROLL_OUT, false);
              element.node.dispatchEvent(evt);
              returnEvent(evt);
            }
          }
          cnt = this._rollOverChain.length;
          for (var _i2 = 0; _i2 < cnt; _i2++) {
            element = this._rollOverChain[_i2];
            if (element.node && element.node.activeInHierarchy) {
              var _evt = this.getEvent(ti, element, Event.ROLL_OVER, false);
              element.node.dispatchEvent(_evt);
              returnEvent(_evt);
            }
          }
          this._rollOutChain.length = 0;
          this._rollOverChain.length = 0;
        };
        _proto37.getEvent = function getEvent(ti, target, type, bubbles) {
          var evt = borrowEvent(type, bubbles);
          evt.initiator = target;
          evt.pos.set(ti.pos);
          evt.touchId = ti.touchId;
          evt.clickCount = ti.clickCount;
          evt.button = ti.button;
          evt.mouseWheelDelta = ti.mouseWheelDelta;
          evt._processor = this;
          return evt;
        };
        return InputProcessor;
      }(Component);
      var TouchInfo = function TouchInfo() {
        this.pos = new Vec2();
        this.touchId = 0;
        this.clickCount = 0;
        this.mouseWheelDelta = 0;
        this.button = -1;
        this.downPos = new Vec2();
        this.began = false;
        this.clickCancelled = false;
        this.lastClickTime = 0;
        this.downTargets = new Array();
        this.touchMonitors = new Array();
      };
      var s_vec3 = new Vec3();
      var s_vec3_2 = new Vec3();
      var ControllerAction = /*#__PURE__*/function () {
        function ControllerAction() {}
        var _proto38 = ControllerAction.prototype;
        _proto38.run = function run(controller, prevPage, curPage) {
          if ((!this.fromPage || this.fromPage.length == 0 || this.fromPage.indexOf(prevPage) != -1) && (!this.toPage || this.toPage.length == 0 || this.toPage.indexOf(curPage) != -1)) this.enter(controller);else this.leave(controller);
        };
        _proto38.enter = function enter(controller) {};
        _proto38.leave = function leave(controller) {};
        _proto38.setup = function setup(buffer) {
          var cnt;
          var i;
          cnt = buffer.readShort();
          this.fromPage = [];
          for (i = 0; i < cnt; i++) this.fromPage[i] = buffer.readS();
          cnt = buffer.readShort();
          this.toPage = [];
          for (i = 0; i < cnt; i++) this.toPage[i] = buffer.readS();
        };
        return ControllerAction;
      }();
      var PlayTransitionAction = /*#__PURE__*/function (_ControllerAction) {
        _inheritsLoose(PlayTransitionAction, _ControllerAction);
        function PlayTransitionAction() {
          var _this15;
          _this15 = _ControllerAction.call(this) || this;
          _this15.playTimes = 1;
          _this15.delay = 0;
          return _this15;
        }
        var _proto39 = PlayTransitionAction.prototype;
        _proto39.enter = function enter(controller) {
          var trans = controller.parent.getTransition(this.transitionName);
          if (trans) {
            if (this._currentTransition && this._currentTransition.playing) trans.changePlayTimes(this.playTimes);else trans.play(null, this.playTimes, this.delay);
            this._currentTransition = trans;
          }
        };
        _proto39.leave = function leave(controller) {
          if (this.stopOnExit && this._currentTransition) {
            this._currentTransition.stop();
            this._currentTransition = null;
          }
        };
        _proto39.setup = function setup(buffer) {
          _ControllerAction.prototype.setup.call(this, buffer);
          this.transitionName = buffer.readS();
          this.playTimes = buffer.readInt();
          this.delay = buffer.readFloat();
          this.stopOnExit = buffer.readBool();
        };
        return PlayTransitionAction;
      }(ControllerAction);
      var ChangePageAction = /*#__PURE__*/function (_ControllerAction2) {
        _inheritsLoose(ChangePageAction, _ControllerAction2);
        function ChangePageAction() {
          return _ControllerAction2.call(this) || this;
        }
        var _proto40 = ChangePageAction.prototype;
        _proto40.enter = function enter(controller) {
          if (!this.controllerName) return;
          var gcom;
          if (this.objectId) gcom = controller.parent.getChildById(this.objectId);else gcom = controller.parent;
          if (gcom) {
            var cc = gcom.getController(this.controllerName);
            if (cc && cc != controller && !cc.changing) {
              if (this.targetPage == "~1") {
                if (controller.selectedIndex < cc.pageCount) cc.selectedIndex = controller.selectedIndex;
              } else if (this.targetPage == "~2") cc.selectedPage = controller.selectedPage;else cc.selectedPageId = this.targetPage;
            }
          }
        };
        _proto40.setup = function setup(buffer) {
          _ControllerAction2.prototype.setup.call(this, buffer);
          this.objectId = buffer.readS();
          this.controllerName = buffer.readS();
          this.targetPage = buffer.readS();
        };
        return ChangePageAction;
      }(ControllerAction);
      var _nextPageId = 0;
      var Controller = exports('Controller', /*#__PURE__*/function (_EventTarget) {
        _inheritsLoose(Controller, _EventTarget);
        function Controller() {
          var _this16;
          _this16 = _EventTarget.call(this) || this;
          _this16._pageIds = [];
          _this16._pageNames = [];
          _this16._selectedIndex = -1;
          _this16._previousIndex = -1;
          return _this16;
        }
        var _proto41 = Controller.prototype;
        _proto41.dispose = function dispose() {};
        _proto41.onChanged = function onChanged(callback, thisArg) {
          this.on(Event.STATUS_CHANGED, callback, thisArg);
        };
        _proto41.offChanged = function offChanged(callback, thisArg) {
          this.off(Event.STATUS_CHANGED, callback, thisArg);
        } //功能和设置selectedIndex一样，但不会触发事件
        ;
        _proto41.setSelectedIndex = function setSelectedIndex(value) {
          if (this._selectedIndex != value) {
            if (value > this._pageIds.length - 1) throw new Error("index out of bounds: " + value);
            this.changing = true;
            this._previousIndex = this._selectedIndex;
            this._selectedIndex = value;
            this.parent.applyController(this);
            this.changing = false;
          }
        }; //功能和设置selectedPage一样，但不会触发事件
        _proto41.setSelectedPage = function setSelectedPage(value) {
          var i = this._pageNames.indexOf(value);
          if (i == -1) i = 0;
          this.setSelectedIndex(i);
        };
        _proto41.getPageName = function getPageName(index) {
          return this._pageNames[index];
        };
        _proto41.addPage = function addPage(name) {
          name = name || "";
          this.addPageAt(name, this._pageIds.length);
        };
        _proto41.addPageAt = function addPageAt(name, index) {
          name = name || "";
          var nid = "" + _nextPageId++;
          if (index == null || index == this._pageIds.length) {
            this._pageIds.push(nid);
            this._pageNames.push(name);
          } else {
            this._pageIds.splice(index, 0, nid);
            this._pageNames.splice(index, 0, name);
          }
        };
        _proto41.removePage = function removePage(name) {
          var i = this._pageNames.indexOf(name);
          if (i != -1) {
            this._pageIds.splice(i, 1);
            this._pageNames.splice(i, 1);
            if (this._selectedIndex >= this._pageIds.length) this.selectedIndex = this._selectedIndex - 1;else this.parent.applyController(this);
          }
        };
        _proto41.removePageAt = function removePageAt(index) {
          this._pageIds.splice(index, 1);
          this._pageNames.splice(index, 1);
          if (this._selectedIndex >= this._pageIds.length) this.selectedIndex = this._selectedIndex - 1;else this.parent.applyController(this);
        };
        _proto41.clearPages = function clearPages() {
          this._pageIds.length = 0;
          this._pageNames.length = 0;
          if (this._selectedIndex != -1) this.selectedIndex = -1;else this.parent.applyController(this);
        };
        _proto41.hasPage = function hasPage(aName) {
          return this._pageNames.indexOf(aName) != -1;
        };
        _proto41.getPageIndexById = function getPageIndexById(aId) {
          return this._pageIds.indexOf(aId);
        };
        _proto41.getPageIdByName = function getPageIdByName(aName) {
          var i = this._pageNames.indexOf(aName);
          if (i != -1) return this._pageIds[i];else return null;
        };
        _proto41.getPageNameById = function getPageNameById(aId) {
          var i = this._pageIds.indexOf(aId);
          if (i != -1) return this._pageNames[i];else return null;
        };
        _proto41.getPageId = function getPageId(index) {
          return this._pageIds[index];
        };
        _proto41.runActions = function runActions() {
          if (this._actions) {
            var cnt = this._actions.length;
            for (var i = 0; i < cnt; i++) {
              this._actions[i].run(this, this.previousPageId, this.selectedPageId);
            }
          }
        };
        _proto41.setup = function setup(buffer) {
          var beginPos = buffer.position;
          buffer.seek(beginPos, 0);
          this.name = buffer.readS();
          if (buffer.readBool()) this.autoRadioGroupDepth = true;
          buffer.seek(beginPos, 1);
          var i;
          var nextPos;
          var cnt = buffer.readShort();
          for (i = 0; i < cnt; i++) {
            this._pageIds.push(buffer.readS());
            this._pageNames.push(buffer.readS());
          }
          var homePageIndex = 0;
          if (buffer.version >= 2) {
            var homePageType = buffer.readByte();
            switch (homePageType) {
              case 1:
                homePageIndex = buffer.readShort();
                break;
              case 2:
                homePageIndex = this._pageNames.indexOf(UIPackage.branch);
                if (homePageIndex == -1) homePageIndex = 0;
                break;
              case 3:
                homePageIndex = this._pageNames.indexOf(UIPackage.getVar(buffer.readS()));
                if (homePageIndex == -1) homePageIndex = 0;
                break;
            }
          }
          buffer.seek(beginPos, 2);
          cnt = buffer.readShort();
          if (cnt > 0) {
            if (!this._actions) this._actions = new Array();
            for (i = 0; i < cnt; i++) {
              nextPos = buffer.readShort();
              nextPos += buffer.position;
              var action = createAction(buffer.readByte());
              action.setup(buffer);
              this._actions.push(action);
              buffer.position = nextPos;
            }
          }
          if (this.parent && this._pageIds.length > 0) this._selectedIndex = homePageIndex;else this._selectedIndex = -1;
        };
        _createClass(Controller, [{
          key: "selectedIndex",
          get: function get() {
            return this._selectedIndex;
          },
          set: function set(value) {
            if (this._selectedIndex != value) {
              if (value > this._pageIds.length - 1) throw new Error("index out of bounds: " + value);
              this.changing = true;
              this._previousIndex = this._selectedIndex;
              this._selectedIndex = value;
              this.parent.applyController(this);
              this.emit(Event.STATUS_CHANGED, this);
              this.changing = false;
            }
          }
        }, {
          key: "previsousIndex",
          get: function get() {
            return this._previousIndex;
          }
        }, {
          key: "selectedPage",
          get: function get() {
            if (this._selectedIndex == -1) return null;else return this._pageNames[this._selectedIndex];
          },
          set: function set(val) {
            var i = this._pageNames.indexOf(val);
            if (i == -1) i = 0;
            this.selectedIndex = i;
          }
        }, {
          key: "previousPage",
          get: function get() {
            if (this._previousIndex == -1) return null;else return this._pageNames[this._previousIndex];
          }
        }, {
          key: "pageCount",
          get: function get() {
            return this._pageIds.length;
          }
        }, {
          key: "selectedPageId",
          get: function get() {
            if (this._selectedIndex == -1) return null;else return this._pageIds[this._selectedIndex];
          },
          set: function set(val) {
            var i = this._pageIds.indexOf(val);
            this.selectedIndex = i;
          }
        }, {
          key: "oppositePageId",
          set: function set(val) {
            var i = this._pageIds.indexOf(val);
            if (i > 0) this.selectedIndex = 0;else if (this._pageIds.length > 1) this.selectedIndex = 1;
          }
        }, {
          key: "previousPageId",
          get: function get() {
            if (this._previousIndex == -1) return null;else return this._pageIds[this._previousIndex];
          }
        }]);
        return Controller;
      }(EventTarget));
      function createAction(type) {
        switch (type) {
          case 0:
            return new PlayTransitionAction();
          case 1:
            return new ChangePageAction();
        }
        return null;
      }
      var Margin = /*#__PURE__*/function () {
        function Margin() {
          this.left = 0;
          this.right = 0;
          this.top = 0;
          this.bottom = 0;
        }
        var _proto42 = Margin.prototype;
        _proto42.copy = function copy(source) {
          this.top = source.top;
          this.bottom = source.bottom;
          this.left = source.left;
          this.right = source.right;
        };
        _proto42.isNone = function isNone() {
          return this.left == 0 && this.right == 0 && this.top == 0 && this.bottom == 0;
        };
        return Margin;
      }();
      var ScrollPane = exports('ScrollPane', /*#__PURE__*/function (_Component4) {
        _inheritsLoose(ScrollPane, _Component4);
        function ScrollPane() {
          var _this17;
          _this17 = _Component4.apply(this, arguments) || this;
          _this17._aniFlag = 0;
          return _this17;
        }
        var _proto43 = ScrollPane.prototype;
        _proto43.setup = function setup(buffer) {
          var o = this._owner = GObject.cast(this.node);
          this._maskContainer = new Node("ScrollPane");
          this._maskContainer.layer = UIConfig.defaultUILayer;
          this._maskContainerUITrans = this._maskContainer.addComponent(UITransform);
          this._maskContainerUITrans.setAnchorPoint(0, 1);
          this._maskContainer.parent = o.node;
          this._container = o._container;
          this._container.parent = this._maskContainer;
          this._scrollBarMargin = new Margin();
          this._mouseWheelEnabled = true;
          this._xPos = 0;
          this._yPos = 0;
          this._aniFlag = 0;
          this._tweening = 0;
          this._footerLockedSize = 0;
          this._headerLockedSize = 0;
          this._viewSize = new Vec2();
          this._contentSize = new Vec2();
          this._pageSize = new Vec2(1, 1);
          this._overlapSize = new Vec2();
          this._tweenTime = new Vec2();
          this._tweenStart = new Vec2();
          this._tweenDuration = new Vec2();
          this._tweenChange = new Vec2();
          this._velocity = new Vec2();
          this._containerPos = new Vec2();
          this._beginTouchPos = new Vec2();
          this._lastTouchPos = new Vec2();
          this._lastTouchGlobalPos = new Vec2();
          this._scrollStep = UIConfig.defaultScrollStep;
          this._mouseWheelStep = this._scrollStep * 2;
          this._decelerationRate = UIConfig.defaultScrollDecelerationRate;
          this._snappingPolicy = 0;
          o.on(Event.TOUCH_BEGIN, this.onTouchBegin, this);
          o.on(Event.TOUCH_MOVE, this.onTouchMove, this);
          o.on(Event.TOUCH_END, this.onTouchEnd, this);
          o.on(Event.MOUSE_WHEEL, this.onMouseWheel, this);
          this._scrollType = buffer.readByte();
          var scrollBarDisplay = buffer.readByte();
          var flags = buffer.readInt();
          if (buffer.readBool()) {
            this._scrollBarMargin.top = buffer.readInt();
            this._scrollBarMargin.bottom = buffer.readInt();
            this._scrollBarMargin.left = buffer.readInt();
            this._scrollBarMargin.right = buffer.readInt();
          }
          var vtScrollBarRes = buffer.readS();
          var hzScrollBarRes = buffer.readS();
          var headerRes = buffer.readS();
          var footerRes = buffer.readS();
          if ((flags & 1) != 0) this._displayOnLeft = true;
          if ((flags & 2) != 0) this._snapToItem = true;
          if ((flags & 4) != 0) this._displayInDemand = true;
          if ((flags & 8) != 0) this._pageMode = true;
          if (flags & 16) this._touchEffect = true;else if (flags & 32) this._touchEffect = false;else this._touchEffect = UIConfig.defaultScrollTouchEffect;
          if (flags & 64) this._bouncebackEffect = true;else if (flags & 128) this._bouncebackEffect = false;else this._bouncebackEffect = UIConfig.defaultScrollBounceEffect;
          if ((flags & 256) != 0) this._inertiaDisabled = true;
          if ((flags & 512) != 0) this._dontClip = true;
          if ((flags & 1024) != 0) this._floating = true;
          if ((flags & 2048) != 0) this._dontClipMargin = true;
          if (!this._dontClip) this._maskContainer.addComponent(Mask);
          if (scrollBarDisplay == ScrollBarDisplayType.Default) scrollBarDisplay = UIConfig.defaultScrollBarDisplay;
          if (scrollBarDisplay != ScrollBarDisplayType.Hidden) {
            if (this._scrollType == ScrollType.Both || this._scrollType == ScrollType.Vertical) {
              var res = vtScrollBarRes ? vtScrollBarRes : UIConfig.verticalScrollBar;
              if (res) {
                this._vtScrollBar = UIPackage.createObjectFromURL(res);
                if (!this._vtScrollBar) throw new Error("cannot create scrollbar from " + res);
                this._vtScrollBar.setScrollPane(this, true);
                this._vtScrollBar.node.parent = o.node;
              }
            }
            if (this._scrollType == ScrollType.Both || this._scrollType == ScrollType.Horizontal) {
              var res = hzScrollBarRes ? hzScrollBarRes : UIConfig.horizontalScrollBar;
              if (res) {
                this._hzScrollBar = UIPackage.createObjectFromURL(res);
                if (!this._hzScrollBar) throw new Error("cannot create scrollbar from " + res);
                this._hzScrollBar.setScrollPane(this, false);
                this._hzScrollBar.node.parent = o.node;
              }
            }
            if (scrollBarDisplay == ScrollBarDisplayType.Auto) this._scrollBarDisplayAuto = true;
            if (this._scrollBarDisplayAuto) {
              if (this._vtScrollBar) this._vtScrollBar.node.active = false;
              if (this._hzScrollBar) this._hzScrollBar.node.active = false;
              o.on(Event.ROLL_OVER, this.onRollOver, this);
              o.on(Event.ROLL_OUT, this.onRollOut, this);
            }
          }
          if (headerRes) {
            this._header = UIPackage.createObjectFromURL(headerRes);
            if (this._header == null) throw new Error("cannot create scrollPane header from " + headerRes);else this._maskContainer.insertChild(this._header.node, 0);
          }
          if (footerRes) {
            this._footer = UIPackage.createObjectFromURL(footerRes);
            if (this._footer == null) throw new Error("cannot create scrollPane footer from " + footerRes);else this._maskContainer.insertChild(this._footer.node, 0);
          }
          this._refreshBarAxis = this._scrollType == ScrollType.Both || this._scrollType == ScrollType.Vertical ? "y" : "x";
          this.setSize(o.width, o.height);
        };
        _proto43.onDestroy = function onDestroy() {
          delete this._pageController;
          if (this._hzScrollBar) this._hzScrollBar.dispose();
          if (this._vtScrollBar) this._vtScrollBar.dispose();
          if (this._header) this._header.dispose();
          if (this._footer) this._footer.dispose();
        };
        _proto43.hitTest = function hitTest(pt, globalPt) {
          var target;
          if (this._vtScrollBar) {
            target = this._vtScrollBar.hitTest(globalPt);
            if (target) return target;
          }
          if (this._hzScrollBar) {
            target = this._hzScrollBar.hitTest(globalPt);
            if (target) return target;
          }
          if (this._header && this._header.node.activeInHierarchy) {
            target = this._header.hitTest(globalPt);
            if (target) return target;
          }
          if (this._footer && this._footer.node.activeInHierarchy) {
            target = this._footer.hitTest(globalPt);
            if (target) return target;
          }
          if (this._dontClip) return this._owner;else if (this._dontClipMargin) {
            if (pt.x >= 0 && pt.y >= 0 && pt.x < this._owner.width && pt.y < this._owner.height) return this._owner;
          } else {
            if (pt.x >= this._owner.margin.left && pt.y >= this._owner.margin.top && pt.x < this._owner.margin.left + this._viewSize.x && pt.y < this._owner.margin.top + this._viewSize.y) return this._owner;
          }
          return null;
        };
        _proto43.setPercX = function setPercX(value, ani) {
          this._owner.ensureBoundsCorrect();
          this.setPosX(this._overlapSize.x * math.clamp01(value), ani);
        };
        _proto43.setPercY = function setPercY(value, ani) {
          this._owner.ensureBoundsCorrect();
          this.setPosY(this._overlapSize.y * math.clamp01(value), ani);
        };
        _proto43.setPosX = function setPosX(value, ani) {
          this._owner.ensureBoundsCorrect();
          if (this._loop == 1) value = this.loopCheckingNewPos(value, "x");
          value = math.clamp(value, 0, this._overlapSize.x);
          if (value != this._xPos) {
            this._xPos = value;
            this.posChanged(ani);
          }
        };
        _proto43.setPosY = function setPosY(value, ani) {
          this._owner.ensureBoundsCorrect();
          if (this._loop == 1) value = this.loopCheckingNewPos(value, "y");
          value = math.clamp(value, 0, this._overlapSize.y);
          if (value != this._yPos) {
            this._yPos = value;
            this.posChanged(ani);
          }
        };
        _proto43.setCurrentPageX = function setCurrentPageX(value, ani) {
          if (!this._pageMode) return;
          this._owner.ensureBoundsCorrect();
          if (this._overlapSize.x > 0) this.setPosX(value * this._pageSize.x, ani);
        };
        _proto43.setCurrentPageY = function setCurrentPageY(value, ani) {
          if (!this._pageMode) return;
          this._owner.ensureBoundsCorrect();
          if (this._overlapSize.y > 0) this.setPosY(value * this._pageSize.y, ani);
        };
        _proto43.scrollTop = function scrollTop(ani) {
          this.setPercY(0, ani);
        };
        _proto43.scrollBottom = function scrollBottom(ani) {
          this.setPercY(1, ani);
        };
        _proto43.scrollUp = function scrollUp(ratio, ani) {
          if (ratio == undefined) ratio = 1;
          if (this._pageMode) this.setPosY(this._yPos - this._pageSize.y * ratio, ani);else this.setPosY(this._yPos - this._scrollStep * ratio, ani);
        };
        _proto43.scrollDown = function scrollDown(ratio, ani) {
          if (ratio == undefined) ratio = 1;
          if (this._pageMode) this.setPosY(this._yPos + this._pageSize.y * ratio, ani);else this.setPosY(this._yPos + this._scrollStep * ratio, ani);
        };
        _proto43.scrollLeft = function scrollLeft(ratio, ani) {
          if (ratio == undefined) ratio = 1;
          if (this._pageMode) this.setPosX(this._xPos - this._pageSize.x * ratio, ani);else this.setPosX(this._xPos - this._scrollStep * ratio, ani);
        };
        _proto43.scrollRight = function scrollRight(ratio, ani) {
          if (ratio == undefined) ratio = 1;
          if (this._pageMode) this.setPosX(this._xPos + this._pageSize.x * ratio, ani);else this.setPosX(this._xPos + this._scrollStep * ratio, ani);
        };
        _proto43.scrollToView = function scrollToView(target, ani, setFirst) {
          this._owner.ensureBoundsCorrect();
          if (this._needRefresh) this.refresh();
          var rect;
          if (target instanceof GObject) {
            if (target.parent != this._owner) {
              target.parent.localToGlobalRect(target.x, target.y, target.width, target.height, s_rect);
              rect = this._owner.globalToLocalRect(s_rect.x, s_rect.y, s_rect.width, s_rect.height, s_rect);
            } else {
              rect = s_rect;
              rect.x = target.x;
              rect.y = target.y;
              rect.width = target.width;
              rect.height = target.height;
            }
          } else rect = target;
          if (this._overlapSize.y > 0) {
            var bottom = this._yPos + this._viewSize.y;
            if (setFirst || rect.y <= this._yPos || rect.height >= this._viewSize.y) {
              if (this._pageMode) this.setPosY(Math.floor(rect.y / this._pageSize.y) * this._pageSize.y, ani);else this.setPosY(rect.y, ani);
            } else if (rect.y + rect.height > bottom) {
              if (this._pageMode) this.setPosY(Math.floor(rect.y / this._pageSize.y) * this._pageSize.y, ani);else if (rect.height <= this._viewSize.y / 2) this.setPosY(rect.y + rect.height * 2 - this._viewSize.y, ani);else this.setPosY(rect.y + rect.height - this._viewSize.y, ani);
            }
          }
          if (this._overlapSize.x > 0) {
            var right = this._xPos + this._viewSize.x;
            if (setFirst || rect.x <= this._xPos || rect.width >= this._viewSize.x) {
              if (this._pageMode) this.setPosX(Math.floor(rect.x / this._pageSize.x) * this._pageSize.x, ani);else this.setPosX(rect.x, ani);
            } else if (rect.x + rect.width > right) {
              if (this._pageMode) this.setPosX(Math.floor(rect.x / this._pageSize.x) * this._pageSize.x, ani);else if (rect.width <= this._viewSize.x / 2) this.setPosX(rect.x + rect.width * 2 - this._viewSize.x, ani);else this.setPosX(rect.x + rect.width - this._viewSize.x, ani);
            }
          }
          if (!ani && this._needRefresh) this.refresh();
        };
        _proto43.isChildInView = function isChildInView(obj) {
          if (this._overlapSize.y > 0) {
            var dist = obj.y + -this._container.position.y;
            if (dist < -obj.height || dist > this._viewSize.y) return false;
          }
          if (this._overlapSize.x > 0) {
            dist = obj.x + this._container.position.x;
            if (dist < -obj.width || dist > this._viewSize.x) return false;
          }
          return true;
        };
        _proto43.cancelDragging = function cancelDragging() {
          if (ScrollPane.draggingPane == this) ScrollPane.draggingPane = null;
          _gestureFlag = 0;
          this._dragged = false;
        };
        _proto43.lockHeader = function lockHeader(size) {
          if (this._headerLockedSize == size) return;
          var cx = this._container.position.x;
          var cy = -this._container.position.y;
          var cr = this._refreshBarAxis == "x" ? cx : cy;
          this._headerLockedSize = size;
          if (!this._refreshEventDispatching && cr >= 0) {
            this._tweenStart.x = cx;
            this._tweenStart.y = cy;
            this._tweenChange.set(Vec2.ZERO);
            this._tweenChange[this._refreshBarAxis] = this._headerLockedSize - this._tweenStart[this._refreshBarAxis];
            this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_DEFAULT;
            this.startTween(2);
          }
        };
        _proto43.lockFooter = function lockFooter(size) {
          if (this._footerLockedSize == size) return;
          var cx = this._container.position.x;
          var cy = -this._container.position.y;
          var cr = this._refreshBarAxis == "x" ? cx : cy;
          this._footerLockedSize = size;
          if (!this._refreshEventDispatching && cr <= -this._overlapSize[this._refreshBarAxis]) {
            this._tweenStart.x = cx;
            this._tweenStart.y = cy;
            this._tweenChange.set(Vec2.ZERO);
            var max = this._overlapSize[this._refreshBarAxis];
            if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
            this._tweenChange[this._refreshBarAxis] = -max - this._tweenStart[this._refreshBarAxis];
            this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_DEFAULT;
            this.startTween(2);
          }
        };
        _proto43.onOwnerSizeChanged = function onOwnerSizeChanged() {
          this.setSize(this._owner.width, this._owner.height);
          this.posChanged(false);
        };
        _proto43.handleControllerChanged = function handleControllerChanged(c) {
          if (this._pageController == c) {
            if (this._scrollType == ScrollType.Horizontal) this.setCurrentPageX(c.selectedIndex, true);else this.setCurrentPageY(c.selectedIndex, true);
          }
        };
        _proto43.updatePageController = function updatePageController() {
          if (this._pageController && !this._pageController.changing) {
            var index;
            if (this._scrollType == ScrollType.Horizontal) index = this.currentPageX;else index = this.currentPageY;
            if (index < this._pageController.pageCount) {
              var c = this._pageController;
              this._pageController = null; //防止HandleControllerChanged的调用
              c.selectedIndex = index;
              this._pageController = c;
            }
          }
        };
        _proto43.adjustMaskContainer = function adjustMaskContainer() {
          var mx = 0;
          if (this._displayOnLeft && this._vtScrollBar && !this._floating) mx = this._vtScrollBar.width;
          var o = this._owner;
          if (this._dontClipMargin) this._maskContainerUITrans.setAnchorPoint((o.margin.left + o._alignOffset.x) / o.width, 1 - (o.margin.top + o._alignOffset.y) / o.height);else this._maskContainerUITrans.setAnchorPoint(o._alignOffset.x / this._viewSize.x, 1 - o._alignOffset.y / this._viewSize.y);
          if (o._customMask) this._maskContainer.setPosition(mx + o._alignOffset.x, -o._alignOffset.y);else this._maskContainer.setPosition(o._pivotCorrectX + mx + o._alignOffset.x, o._pivotCorrectY - o._alignOffset.y);
        };
        _proto43.setSize = function setSize(aWidth, aHeight) {
          if (this._hzScrollBar) {
            this._hzScrollBar.y = aHeight - this._hzScrollBar.height;
            if (this._vtScrollBar) {
              this._hzScrollBar.width = aWidth - this._vtScrollBar.width - this._scrollBarMargin.left - this._scrollBarMargin.right;
              if (this._displayOnLeft) this._hzScrollBar.x = this._scrollBarMargin.left + this._vtScrollBar.width;else this._hzScrollBar.x = this._scrollBarMargin.left;
            } else {
              this._hzScrollBar.width = aWidth - this._scrollBarMargin.left - this._scrollBarMargin.right;
              this._hzScrollBar.x = this._scrollBarMargin.left;
            }
          }
          if (this._vtScrollBar) {
            if (!this._displayOnLeft) this._vtScrollBar.x = aWidth - this._vtScrollBar.width;
            if (this._hzScrollBar) this._vtScrollBar.height = aHeight - this._hzScrollBar.height - this._scrollBarMargin.top - this._scrollBarMargin.bottom;else this._vtScrollBar.height = aHeight - this._scrollBarMargin.top - this._scrollBarMargin.bottom;
            this._vtScrollBar.y = this._scrollBarMargin.top;
          }
          this._viewSize.x = aWidth;
          this._viewSize.y = aHeight;
          if (this._hzScrollBar && !this._floating) this._viewSize.y -= this._hzScrollBar.height;
          if (this._vtScrollBar && !this._floating) this._viewSize.x -= this._vtScrollBar.width;
          this._viewSize.x -= this._owner.margin.left + this._owner.margin.right;
          this._viewSize.y -= this._owner.margin.top + this._owner.margin.bottom;
          this._viewSize.x = Math.max(1, this._viewSize.x);
          this._viewSize.y = Math.max(1, this._viewSize.y);
          this._pageSize.x = this._viewSize.x;
          this._pageSize.y = this._viewSize.y;
          this.adjustMaskContainer();
          this.handleSizeChanged();
        };
        _proto43.setContentSize = function setContentSize(aWidth, aHeight) {
          if (this._contentSize.x == aWidth && this._contentSize.y == aHeight) return;
          this._contentSize.x = aWidth;
          this._contentSize.y = aHeight;
          this.handleSizeChanged();
          if (this._snapToItem && this._snappingPolicy != 0 && this._xPos == 0 && this._yPos == 0) this.posChanged(false);
        };
        _proto43.changeContentSizeOnScrolling = function changeContentSizeOnScrolling(deltaWidth, deltaHeight, deltaPosX, deltaPosY) {
          var isRightmost = this._xPos == this._overlapSize.x;
          var isBottom = this._yPos == this._overlapSize.y;
          this._contentSize.x += deltaWidth;
          this._contentSize.y += deltaHeight;
          this.handleSizeChanged();
          if (this._tweening == 1) {
            //如果原来滚动位置是贴边，加入处理继续贴边。
            if (deltaWidth != 0 && isRightmost && this._tweenChange.x < 0) {
              this._xPos = this._overlapSize.x;
              this._tweenChange.x = -this._xPos - this._tweenStart.x;
            }
            if (deltaHeight != 0 && isBottom && this._tweenChange.y < 0) {
              this._yPos = this._overlapSize.y;
              this._tweenChange.y = -this._yPos - this._tweenStart.y;
            }
          } else if (this._tweening == 2) {
            //重新调整起始位置，确保能够顺滑滚下去
            if (deltaPosX != 0) {
              this._container.setPosition(this._container.position.x - deltaPosX, this._container.position.y);
              this._tweenStart.x -= deltaPosX;
              this._xPos = -this._container.position.x;
            }
            if (deltaPosY != 0) {
              this._container.setPosition(this._container.position.x, this._container.position.y + deltaPosY);
              this._tweenStart.y -= deltaPosY;
              this._yPos = - -this._container.position.y;
            }
          } else if (this._dragged) {
            if (deltaPosX != 0) {
              this._container.setPosition(this._container.position.x - deltaPosX, this._container.position.y);
              this._containerPos.x -= deltaPosX;
              this._xPos = -this._container.position.x;
            }
            if (deltaPosY != 0) {
              this._container.setPosition(this._container.position.x, this._container.position.y + deltaPosY);
              this._containerPos.y -= deltaPosY;
              this._yPos = - -this._container.position.y;
            }
          } else {
            //如果原来滚动位置是贴边，加入处理继续贴边。
            if (deltaWidth != 0 && isRightmost) {
              this._xPos = this._overlapSize.x;
              this._container.setPosition(-this._xPos, this._container.position.y);
            }
            if (deltaHeight != 0 && isBottom) {
              this._yPos = this._overlapSize.y;
              this._container.setPosition(this._container.position.x, this._yPos);
            }
          }
          if (this._pageMode) this.updatePageController();
        };
        _proto43.handleSizeChanged = function handleSizeChanged() {
          if (this._displayInDemand) {
            this._vScrollNone = this._contentSize.y <= this._viewSize.y;
            this._hScrollNone = this._contentSize.x <= this._viewSize.x;
          }
          if (this._vtScrollBar) {
            if (this._contentSize.y == 0) this._vtScrollBar.setDisplayPerc(0);else this._vtScrollBar.setDisplayPerc(Math.min(1, this._viewSize.y / this._contentSize.y));
          }
          if (this._hzScrollBar) {
            if (this._contentSize.x == 0) this._hzScrollBar.setDisplayPerc(0);else this._hzScrollBar.setDisplayPerc(Math.min(1, this._viewSize.x / this._contentSize.x));
          }
          this.updateScrollBarVisible();
          var maskWidth = this._viewSize.x;
          var maskHeight = this._viewSize.y;
          if (this._vScrollNone && this._vtScrollBar) maskWidth += this._vtScrollBar.width;
          if (this._hScrollNone && this._hzScrollBar) maskHeight += this._hzScrollBar.height;
          if (this._dontClipMargin) {
            maskWidth += this._owner.margin.left + this._owner.margin.right;
            maskHeight += this._owner.margin.top + this._owner.margin.bottom;
          }
          this._maskContainerUITrans.setContentSize(maskWidth, maskHeight);
          if (this._vtScrollBar) this._vtScrollBar.handlePositionChanged();
          if (this._hzScrollBar) this._hzScrollBar.handlePositionChanged();
          if (this._header) this._header.handlePositionChanged();
          if (this._footer) this._footer.handlePositionChanged();
          if (this._scrollType == ScrollType.Horizontal || this._scrollType == ScrollType.Both) this._overlapSize.x = Math.ceil(Math.max(0, this._contentSize.x - this._viewSize.x));else this._overlapSize.x = 0;
          if (this._scrollType == ScrollType.Vertical || this._scrollType == ScrollType.Both) this._overlapSize.y = Math.ceil(Math.max(0, this._contentSize.y - this._viewSize.y));else this._overlapSize.y = 0; //边界检查
          this._xPos = math.clamp(this._xPos, 0, this._overlapSize.x);
          this._yPos = math.clamp(this._yPos, 0, this._overlapSize.y);
          var max = this._overlapSize[this._refreshBarAxis];
          if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
          if (this._refreshBarAxis == "x") this._container.setPosition(math.clamp(this._container.position.x, -max, this._headerLockedSize), -math.clamp(-this._container.position.y, -this._overlapSize.y, 0));else this._container.setPosition(math.clamp(this._container.position.x, -this._overlapSize.x, 0), -math.clamp(-this._container.position.y, -max, this._headerLockedSize));
          if (this._header) {
            if (this._refreshBarAxis == "x") this._header.height = this._viewSize.y;else this._header.width = this._viewSize.x;
          }
          if (this._footer) {
            if (this._refreshBarAxis == "y") this._footer.height = this._viewSize.y;else this._footer.width = this._viewSize.x;
          }
          this.updateScrollBarPos();
          if (this._pageMode) this.updatePageController();
        };
        _proto43.posChanged = function posChanged(ani) {
          if (this._aniFlag == 0) this._aniFlag = ani ? 1 : -1;else if (this._aniFlag == 1 && !ani) this._aniFlag = -1;
          this._needRefresh = true;
          if (!director.getScheduler().isScheduled(this.refresh, this)) this.scheduleOnce(this.refresh);
        };
        _proto43.refresh = function refresh(dt) {
          this._needRefresh = false;
          this.unschedule(this.refresh);
          if (this._pageMode || this._snapToItem) {
            sEndPos.x = -this._xPos;
            sEndPos.y = -this._yPos;
            this.alignPosition(sEndPos, false);
            this._xPos = -sEndPos.x;
            this._yPos = -sEndPos.y;
          }
          this.refresh2();
          this._owner.node.emit(Event.SCROLL, this._owner);
          if (this._needRefresh)
            //在onScroll事件里开发者可能修改位置，这里再刷新一次，避免闪烁
            {
              this._needRefresh = false;
              this.unschedule(this.refresh);
              this.refresh2();
            }
          this.updateScrollBarPos();
          this._aniFlag = 0;
        };
        _proto43.refresh2 = function refresh2() {
          if (this._aniFlag == 1 && !this._dragged) {
            var posX;
            var posY;
            if (this._overlapSize.x > 0) posX = -Math.floor(this._xPos);else {
              if (this._container.position.x != 0) this._container.setPosition(0, this._container.position.y);
              posX = 0;
            }
            if (this._overlapSize.y > 0) posY = -Math.floor(this._yPos);else {
              if (this._container.position.y != 0) this._container.setPosition(this._container.position.x, 0);
              posY = 0;
            }
            if (posX != this._container.position.x || posY != -this._container.position.y) {
              this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_GO;
              this._tweenStart.x = this._container.position.x;
              this._tweenStart.y = -this._container.position.y;
              this._tweenChange.x = posX - this._tweenStart.x;
              this._tweenChange.y = posY - this._tweenStart.y;
              this.startTween(1);
            } else if (this._tweening != 0) this.killTween();
          } else {
            if (this._tweening != 0) this.killTween();
            this._container.setPosition(Math.floor(-this._xPos), -Math.floor(-this._yPos));
            this.loopCheckingCurrent();
          }
          if (this._pageMode) this.updatePageController();
        };
        _proto43.onTouchBegin = function onTouchBegin(evt) {
          if (!this._touchEffect) return;
          evt.captureTouch();
          if (this._tweening != 0) {
            this.killTween();
            var groot = Decls$1.GRoot.getInstance(this._owner);
            groot.inputProcessor.cancelClick(evt.touchId);
            this._dragged = true;
          } else this._dragged = false;
          var pt = this._owner.globalToLocal(evt.pos.x, evt.pos.y, s_vec2$3);
          this._containerPos.x = this._container.position.x;
          this._containerPos.y = -this._container.position.y;
          this._beginTouchPos.set(pt);
          this._lastTouchPos.set(pt);
          this._lastTouchGlobalPos.set(evt.pos);
          this._isHoldAreaDone = false;
          this._velocity.set(Vec2.ZERO);
          this._velocityScale = 1;
          this._lastMoveTime = game.totalTime / 1000;
        };
        _proto43.onTouchMove = function onTouchMove(evt) {
          if (!isValid(this._owner.node)) return;
          if (!this._touchEffect) return;
          if (GObject.draggingObject && GObject.draggingObject.onStage) return;
          if (ScrollPane.draggingPane && ScrollPane.draggingPane != this && ScrollPane.draggingPane._owner && ScrollPane.draggingPane._owner.onStage) return;
          var pt = this._owner.globalToLocal(evt.pos.x, evt.pos.y, s_vec2$3);
          var sensitivity = UIConfig.touchScrollSensitivity;
          var diff, diff2;
          var sv, sh;
          if (this._scrollType == ScrollType.Vertical) {
            if (!this._isHoldAreaDone) {
              //表示正在监测垂直方向的手势
              _gestureFlag |= 1;
              diff = Math.abs(this._beginTouchPos.y - pt.y);
              if (diff < sensitivity) return;
              if ((_gestureFlag & 2) != 0)
                //已经有水平方向的手势在监测，那么我们用严格的方式检查是不是按垂直方向移动，避免冲突
                {
                  diff2 = Math.abs(this._beginTouchPos.x - pt.x);
                  if (diff < diff2)
                    //不通过则不允许滚动了
                    return;
                }
            }
            sv = true;
          } else if (this._scrollType == ScrollType.Horizontal) {
            if (!this._isHoldAreaDone) {
              _gestureFlag |= 2;
              diff = Math.abs(this._beginTouchPos.x - pt.x);
              if (diff < sensitivity) return;
              if ((_gestureFlag & 1) != 0) {
                diff2 = Math.abs(this._beginTouchPos.y - pt.y);
                if (diff < diff2) return;
              }
            }
            sh = true;
          } else {
            _gestureFlag = 3;
            if (!this._isHoldAreaDone) {
              diff = Math.abs(this._beginTouchPos.y - pt.y);
              if (diff < sensitivity) {
                diff = Math.abs(this._beginTouchPos.x - pt.x);
                if (diff < sensitivity) return;
              }
            }
            sv = sh = true;
          }
          var newPosX = Math.floor(this._containerPos.x + pt.x - this._beginTouchPos.x);
          var newPosY = Math.floor(this._containerPos.y + pt.y - this._beginTouchPos.y);
          if (sv) {
            if (newPosY > 0) {
              if (!this._bouncebackEffect) this._container.setPosition(this._container.position.x, 0);else if (this._header && this._header.maxHeight != 0) this._container.setPosition(this._container.position.x, -Math.floor(Math.min(newPosY * 0.5, this._header.maxHeight)));else this._container.setPosition(this._container.position.x, -Math.floor(Math.min(newPosY * 0.5, this._viewSize.y * PULL_RATIO)));
            } else if (newPosY < -this._overlapSize.y) {
              if (!this._bouncebackEffect) this._container.setPosition(this._container.position.x, this._overlapSize.y);else if (this._footer && this._footer.maxHeight > 0) this._container.setPosition(this._container.position.x, -Math.floor(Math.max((newPosY + this._overlapSize.y) * 0.5, -this._footer.maxHeight) - this._overlapSize.y));else this._container.setPosition(this._container.position.x, -Math.floor(Math.max((newPosY + this._overlapSize.y) * 0.5, -this._viewSize.y * PULL_RATIO) - this._overlapSize.y));
            } else this._container.setPosition(this._container.position.x, -newPosY);
          }
          if (sh) {
            if (newPosX > 0) {
              if (!this._bouncebackEffect) this._container.setPosition(0, this._container.position.y);else if (this._header && this._header.maxWidth != 0) this._container.setPosition(Math.floor(Math.min(newPosX * 0.5, this._header.maxWidth)), this._container.position.y);else this._container.setPosition(Math.floor(Math.min(newPosX * 0.5, this._viewSize.x * PULL_RATIO)), this._container.position.y);
            } else if (newPosX < 0 - this._overlapSize.x) {
              if (!this._bouncebackEffect) this._container.setPosition(-this._overlapSize.x, this._container.position.y);else if (this._footer && this._footer.maxWidth > 0) this._container.setPosition(Math.floor(Math.max((newPosX + this._overlapSize.x) * 0.5, -this._footer.maxWidth) - this._overlapSize.x), this._container.position.y);else this._container.setPosition(Math.floor(Math.max((newPosX + this._overlapSize.x) * 0.5, -this._viewSize.x * PULL_RATIO) - this._overlapSize.x), this._container.position.y);
            } else this._container.setPosition(newPosX, this._container.position.y);
          } //更新速度
          var now = game.totalTime / 1000;
          var deltaTime = Math.max(now - this._lastMoveTime, 1 / 60);
          var deltaPositionX = pt.x - this._lastTouchPos.x;
          var deltaPositionY = pt.y - this._lastTouchPos.y;
          if (!sh) deltaPositionX = 0;
          if (!sv) deltaPositionY = 0;
          if (deltaTime != 0) {
            var frameRate = 60;
            var elapsed = deltaTime * frameRate - 1;
            if (elapsed > 1)
              //速度衰减
              {
                var factor = Math.pow(0.833, elapsed);
                this._velocity.x = this._velocity.x * factor;
                this._velocity.y = this._velocity.y * factor;
              }
            this._velocity.x = math.lerp(this._velocity.x, deltaPositionX * 60 / frameRate / deltaTime, deltaTime * 10);
            this._velocity.y = math.lerp(this._velocity.y, deltaPositionY * 60 / frameRate / deltaTime, deltaTime * 10);
          } /*速度计算使用的是本地位移，但在后续的惯性滚动判断中需要用到屏幕位移，所以这里要记录一个位移的比例。
            */
          var deltaGlobalPositionX = this._lastTouchGlobalPos.x - evt.pos.x;
          var deltaGlobalPositionY = this._lastTouchGlobalPos.y - evt.pos.y;
          if (deltaPositionX != 0) this._velocityScale = Math.abs(deltaGlobalPositionX / deltaPositionX);else if (deltaPositionY != 0) this._velocityScale = Math.abs(deltaGlobalPositionY / deltaPositionY);
          this._lastTouchPos.set(pt);
          this._lastTouchGlobalPos.set(evt.pos);
          this._lastMoveTime = now; //同步更新pos值
          if (this._overlapSize.x > 0) this._xPos = math.clamp(-this._container.position.x, 0, this._overlapSize.x);
          if (this._overlapSize.y > 0) this._yPos = math.clamp(- -this._container.position.y, 0, this._overlapSize.y); //循环滚动特别检查
          if (this._loop != 0) {
            newPosX = this._container.position.x;
            newPosY = -this._container.position.y;
            if (this.loopCheckingCurrent()) {
              this._containerPos.x += this._container.position.x - newPosX;
              this._containerPos.y += -this._container.position.y - newPosY;
            }
          }
          ScrollPane.draggingPane = this;
          this._isHoldAreaDone = true;
          this._dragged = true;
          this.updateScrollBarPos();
          this.updateScrollBarVisible();
          if (this._pageMode) this.updatePageController();
          this._owner.node.emit(Event.SCROLL);
        };
        _proto43.onTouchEnd = function onTouchEnd(evt) {
          if (ScrollPane.draggingPane == this) ScrollPane.draggingPane = null;
          _gestureFlag = 0;
          if (!this._dragged || !this._touchEffect || !this._owner.node.activeInHierarchy) {
            this._dragged = false;
            return;
          }
          this._dragged = false;
          this._tweenStart.x = this._container.position.x;
          this._tweenStart.y = -this._container.position.y;
          sEndPos.set(this._tweenStart);
          var flag = false;
          if (this._container.position.x > 0) {
            sEndPos.x = 0;
            flag = true;
          } else if (this._container.position.x < -this._overlapSize.x) {
            sEndPos.x = -this._overlapSize.x;
            flag = true;
          }
          if (-this._container.position.y > 0) {
            sEndPos.y = 0;
            flag = true;
          } else if (-this._container.position.y < -this._overlapSize.y) {
            sEndPos.y = -this._overlapSize.y;
            flag = true;
          }
          if (flag) {
            this._tweenChange.x = sEndPos.x - this._tweenStart.x;
            this._tweenChange.y = sEndPos.y - this._tweenStart.y;
            if (this._tweenChange.x < -UIConfig.touchDragSensitivity || this._tweenChange.y < -UIConfig.touchDragSensitivity) {
              this._refreshEventDispatching = true;
              this._owner.node.emit(Event.PULL_DOWN_RELEASE), this._owner;
              this._refreshEventDispatching = false;
            } else if (this._tweenChange.x > UIConfig.touchDragSensitivity || this._tweenChange.y > UIConfig.touchDragSensitivity) {
              this._refreshEventDispatching = true;
              this._owner.node.emit(Event.PULL_UP_RELEASE, this._owner);
              this._refreshEventDispatching = false;
            }
            if (this._headerLockedSize > 0 && sEndPos[this._refreshBarAxis] == 0) {
              sEndPos[this._refreshBarAxis] = this._headerLockedSize;
              this._tweenChange.x = sEndPos.x - this._tweenStart.x;
              this._tweenChange.y = sEndPos.y - this._tweenStart.y;
            } else if (this._footerLockedSize > 0 && sEndPos[this._refreshBarAxis] == -this._overlapSize[this._refreshBarAxis]) {
              var max = this._overlapSize[this._refreshBarAxis];
              if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
              sEndPos[this._refreshBarAxis] = -max;
              this._tweenChange.x = sEndPos.x - this._tweenStart.x;
              this._tweenChange.y = sEndPos.y - this._tweenStart.y;
            }
            this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_DEFAULT;
          } else {
            //更新速度
            if (!this._inertiaDisabled) {
              var frameRate = 60;
              var elapsed = (game.totalTime / 1000 - this._lastMoveTime) * frameRate - 1;
              if (elapsed > 1) {
                var factor = Math.pow(0.833, elapsed);
                this._velocity.x = this._velocity.x * factor;
                this._velocity.y = this._velocity.y * factor;
              } //根据速度计算目标位置和需要时间
              this.updateTargetAndDuration(this._tweenStart, sEndPos);
            } else this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_DEFAULT;
            sOldChange.x = sEndPos.x - this._tweenStart.x;
            sOldChange.y = sEndPos.y - this._tweenStart.y; //调整目标位置
            this.loopCheckingTarget(sEndPos);
            if (this._pageMode || this._snapToItem) this.alignPosition(sEndPos, true);
            this._tweenChange.x = sEndPos.x - this._tweenStart.x;
            this._tweenChange.y = sEndPos.y - this._tweenStart.y;
            if (this._tweenChange.x == 0 && this._tweenChange.y == 0) {
              this.updateScrollBarVisible();
              return;
            } //如果目标位置已调整，随之调整需要时间
            if (this._pageMode || this._snapToItem) {
              this.fixDuration("x", sOldChange.x);
              this.fixDuration("y", sOldChange.y);
            }
          }
          this.startTween(2);
        };
        _proto43.onRollOver = function onRollOver() {
          this._hover = true;
          this.updateScrollBarVisible();
        };
        _proto43.onRollOut = function onRollOut() {
          this._hover = false;
          this.updateScrollBarVisible();
        };
        _proto43.onMouseWheel = function onMouseWheel(evt) {
          if (!this._mouseWheelEnabled) return;
          var delta = evt.mouseWheelDelta > 0 ? -1 : 1;
          if (this._overlapSize.x > 0 && this._overlapSize.y == 0) {
            if (this._pageMode) this.setPosX(this._xPos + this._pageSize.x * delta, false);else this.setPosX(this._xPos + this._mouseWheelStep * delta, false);
          } else {
            if (this._pageMode) this.setPosY(this._yPos + this._pageSize.y * delta, false);else this.setPosY(this._yPos + this._mouseWheelStep * delta, false);
          }
        };
        _proto43.updateScrollBarPos = function updateScrollBarPos() {
          if (this._vtScrollBar) this._vtScrollBar.setScrollPerc(this._overlapSize.y == 0 ? 0 : math.clamp(this._container.position.y, 0, this._overlapSize.y) / this._overlapSize.y);
          if (this._hzScrollBar) this._hzScrollBar.setScrollPerc(this._overlapSize.x == 0 ? 0 : math.clamp(-this._container.position.x, 0, this._overlapSize.x) / this._overlapSize.x);
          this.checkRefreshBar();
        };
        _proto43.updateScrollBarVisible = function updateScrollBarVisible() {
          if (this._vtScrollBar) {
            if (this._viewSize.y <= this._vtScrollBar.minSize || this._vScrollNone) this._vtScrollBar.node.active = false;else this.updateScrollBarVisible2(this._vtScrollBar);
          }
          if (this._hzScrollBar) {
            if (this._viewSize.x <= this._hzScrollBar.minSize || this._hScrollNone) this._hzScrollBar.node.active = false;else this.updateScrollBarVisible2(this._hzScrollBar);
          }
        };
        _proto43.updateScrollBarVisible2 = function updateScrollBarVisible2(bar) {
          if (this._scrollBarDisplayAuto) GTween.kill(bar, false, "alpha");
          if (this._scrollBarDisplayAuto && !this._hover && this._tweening == 0 && !this._dragged && !bar.gripDragging) {
            if (bar.node.active) GTween.to(1, 0, 0.5).setDelay(0.5).onComplete(this.__barTweenComplete, this).setTarget(bar, "alpha");
          } else {
            bar.alpha = 1;
            bar.node.active = true;
          }
        };
        _proto43.__barTweenComplete = function __barTweenComplete(tweener) {
          var bar = tweener.target;
          bar.alpha = 1;
          bar.node.active = false;
        };
        _proto43.getLoopPartSize = function getLoopPartSize(division, axis) {
          return (this._contentSize[axis] + (axis == "x" ? this._owner.columnGap : this._owner.lineGap)) / division;
        };
        _proto43.loopCheckingCurrent = function loopCheckingCurrent() {
          var changed = false;
          if (this._loop == 1 && this._overlapSize.x > 0) {
            if (this._xPos < 0.001) {
              this._xPos += this.getLoopPartSize(2, "x");
              changed = true;
            } else if (this._xPos >= this._overlapSize.x) {
              this._xPos -= this.getLoopPartSize(2, "x");
              changed = true;
            }
          } else if (this._loop == 2 && this._overlapSize.y > 0) {
            if (this._yPos < 0.001) {
              this._yPos += this.getLoopPartSize(2, "y");
              changed = true;
            } else if (this._yPos >= this._overlapSize.y) {
              this._yPos -= this.getLoopPartSize(2, "y");
              changed = true;
            }
          }
          if (changed) {
            this._container.setPosition(Math.floor(-this._xPos), -Math.floor(-this._yPos));
          }
          return changed;
        };
        _proto43.loopCheckingTarget = function loopCheckingTarget(endPos) {
          if (this._loop == 1) this.loopCheckingTarget2(endPos, "x");
          if (this._loop == 2) this.loopCheckingTarget2(endPos, "y");
        };
        _proto43.loopCheckingTarget2 = function loopCheckingTarget2(endPos, axis) {
          var halfSize;
          var tmp;
          if (endPos[axis] > 0) {
            halfSize = this.getLoopPartSize(2, axis);
            tmp = this._tweenStart[axis] - halfSize;
            if (tmp <= 0 && tmp >= -this._overlapSize[axis]) {
              endPos[axis] -= halfSize;
              this._tweenStart[axis] = tmp;
            }
          } else if (endPos[axis] < -this._overlapSize[axis]) {
            halfSize = this.getLoopPartSize(2, axis);
            tmp = this._tweenStart[axis] + halfSize;
            if (tmp <= 0 && tmp >= -this._overlapSize[axis]) {
              endPos[axis] += halfSize;
              this._tweenStart[axis] = tmp;
            }
          }
        };
        _proto43.loopCheckingNewPos = function loopCheckingNewPos(value, axis) {
          if (this._overlapSize[axis] == 0) return value;
          var pos = axis == "x" ? this._xPos : this._yPos;
          var changed = false;
          var v;
          if (value < 0.001) {
            value += this.getLoopPartSize(2, axis);
            if (value > pos) {
              v = this.getLoopPartSize(6, axis);
              v = Math.ceil((value - pos) / v) * v;
              pos = math.clamp(pos + v, 0, this._overlapSize[axis]);
              changed = true;
            }
          } else if (value >= this._overlapSize[axis]) {
            value -= this.getLoopPartSize(2, axis);
            if (value < pos) {
              v = this.getLoopPartSize(6, axis);
              v = Math.ceil((pos - value) / v) * v;
              pos = math.clamp(pos - v, 0, this._overlapSize[axis]);
              changed = true;
            }
          }
          if (changed) {
            if (axis == "x") this._container.setPosition(-Math.floor(pos), this._container.position.y);else this._container.setPosition(this._container.position.x, Math.floor(pos));
          }
          return value;
        };
        _proto43.alignPosition = function alignPosition(pos, inertialScrolling) {
          var ax = 0,
            ay = 0;
          if (this._snappingPolicy == 1) {
            if (this._owner.numChildren > 0) {
              //assume all children are same size
              var obj = this._owner.getChildAt(0);
              ax = Math.floor(this._viewSize.x * 0.5 - obj.width * 0.5);
              ay = Math.floor(this._viewSize.y * 0.5 - obj.height * 0.5);
            }
          } else if (this._snappingPolicy == 2) {
            if (this._owner.numChildren > 0) {
              //assume all children are same size
              var _obj = this._owner.getChildAt(0);
              ax = Math.floor(this._viewSize.x - _obj.width);
              ay = Math.floor(this._viewSize.y - _obj.height);
            }
          }
          pos.x -= ax;
          pos.y -= ay;
          if (this._pageMode) {
            pos.x = this.alignByPage(pos.x, "x", inertialScrolling);
            pos.y = this.alignByPage(pos.y, "y", inertialScrolling);
          } else if (this._snapToItem) {
            var pt = this._owner.getSnappingPosition(-pos.x, -pos.y, s_vec2$3);
            if (pos.x < 0 && pos.x > -this._overlapSize.x) pos.x = -pt.x;
            if (pos.y < 0 && pos.y > -this._overlapSize.y) pos.y = -pt.y;
          }
          pos.x += ax;
          pos.y += ay;
        };
        _proto43.alignByPage = function alignByPage(pos, axis, inertialScrolling) {
          var page;
          if (pos > 0) page = 0;else if (pos < -this._overlapSize[axis]) page = Math.ceil(this._contentSize[axis] / this._pageSize[axis]) - 1;else {
            page = Math.floor(-pos / this._pageSize[axis]);
            var change = inertialScrolling ? pos - this._containerPos[axis] : pos - (axis == "x" ? this._container.position.x : -this._container.position.y);
            var testPageSize = Math.min(this._pageSize[axis], this._contentSize[axis] - (page + 1) * this._pageSize[axis]);
            var delta = -pos - page * this._pageSize[axis]; //页面吸附策略
            if (Math.abs(change) > this._pageSize[axis])
              //如果滚动距离超过1页,则需要超过页面的一半，才能到更下一页
              {
                if (delta > testPageSize * 0.5) page++;
              } else
              //否则只需要页面的1/3，当然，需要考虑到左移和右移的情况
              {
                if (delta > testPageSize * (change < 0 ? 0.1 : 0.9)) page++;
              } //重新计算终点
            pos = -page * this._pageSize[axis];
            if (pos < -this._overlapSize[axis])
              //最后一页未必有pageSize那么大
              pos = -this._overlapSize[axis];
          } //惯性滚动模式下，会增加判断尽量不要滚动超过一页
          if (inertialScrolling) {
            var oldPos = this._tweenStart[axis];
            var oldPage;
            if (oldPos > 0) oldPage = 0;else if (oldPos < -this._overlapSize[axis]) oldPage = Math.ceil(this._contentSize[axis] / this._pageSize[axis]) - 1;else oldPage = Math.floor(-oldPos / this._pageSize[axis]);
            var startPage = Math.floor(-this._containerPos[axis] / this._pageSize[axis]);
            if (Math.abs(page - startPage) > 1 && Math.abs(oldPage - startPage) <= 1) {
              if (page > startPage) page = startPage + 1;else page = startPage - 1;
              pos = -page * this._pageSize[axis];
            }
          }
          return pos;
        };
        _proto43.updateTargetAndDuration = function updateTargetAndDuration(orignPos, resultPos) {
          resultPos.x = this.updateTargetAndDuration2(orignPos.x, "x");
          resultPos.y = this.updateTargetAndDuration2(orignPos.y, "y");
        };
        _proto43.updateTargetAndDuration2 = function updateTargetAndDuration2(pos, axis) {
          var v = this._velocity[axis];
          var duration = 0;
          if (pos > 0) pos = 0;else if (pos < -this._overlapSize[axis]) pos = -this._overlapSize[axis];else {
            //以屏幕像素为基准
            var isMobile = sys.isMobile;
            var v2 = Math.abs(v) * this._velocityScale;
            var winSize = screen.windowSize; //在移动设备上，需要对不同分辨率做一个适配，我们的速度判断以1136分辨率为基准
            if (isMobile) v2 *= 1136 / Math.max(winSize.width, winSize.height); //这里有一些阈值的处理，因为在低速内，不希望产生较大的滚动（甚至不滚动）
            var ratio = 0;
            if (this._pageMode || !isMobile) {
              if (v2 > 100) ratio = Math.pow((v2 - 100) / 100, 2);
            } else {
              if (v2 > 100) ratio = Math.pow((v2 - 100) / 100, 2);
            }
            if (ratio != 0) {
              if (ratio > 1) ratio = 1;
              v2 *= ratio;
              v *= ratio;
              this._velocity[axis] = v; //算法：v*（this._decelerationRate的n次幂）= 60，即在n帧后速度降为60（假设每秒60帧）。
              duration = Math.log(60 / v2) / Math.log(this._decelerationRate) / 60; //计算距离要使用本地速度
              //理论公式貌似滚动的距离不够，改为经验公式
              //var change:number = (v/ 60 - 1) / (1 - this._decelerationRate);
              var change = Math.floor(v * duration * 0.4);
              pos += change;
            }
          }
          if (duration < TWEEN_TIME_DEFAULT) duration = TWEEN_TIME_DEFAULT;
          this._tweenDuration[axis] = duration;
          return pos;
        };
        _proto43.fixDuration = function fixDuration(axis, oldChange) {
          if (this._tweenChange[axis] == 0 || Math.abs(this._tweenChange[axis]) >= Math.abs(oldChange)) return;
          var newDuration = Math.abs(this._tweenChange[axis] / oldChange) * this._tweenDuration[axis];
          if (newDuration < TWEEN_TIME_DEFAULT) newDuration = TWEEN_TIME_DEFAULT;
          this._tweenDuration[axis] = newDuration;
        };
        _proto43.startTween = function startTween(type) {
          this._tweenTime.set(Vec2.ZERO);
          this._tweening = type;
          this.updateScrollBarVisible();
        };
        _proto43.killTween = function killTween() {
          if (this._tweening == 1)
            //取消类型为1的tween需立刻设置到终点
            {
              this._container.setPosition(this._tweenStart.x + this._tweenChange.x, -(this._tweenStart.y + this._tweenChange.y));
              this._owner.node.emit(Event.SCROLL, this._owner);
            }
          this._tweening = 0;
          this.updateScrollBarVisible();
          this._owner.node.emit(Event.SCROLL_END, this._owner);
        };
        _proto43.checkRefreshBar = function checkRefreshBar() {
          if (this._header == null && this._footer == null) return;
          var pos = this._refreshBarAxis == "x" ? this._container.position.x : -this._container.position.y;
          if (this._header) {
            if (pos > 0) {
              this._header.node.active = true;
              var pt = s_vec2$3;
              pt.x = this._header.width;
              pt.y = this._header.height;
              pt[this._refreshBarAxis] = pos;
              this._header.setSize(pt.x, pt.y);
            } else {
              this._header.node.active = false;
            }
          }
          if (this._footer) {
            var max = this._overlapSize[this._refreshBarAxis];
            if (pos < -max || max == 0 && this._footerLockedSize > 0) {
              this._footer.node.active = true;
              pt = s_vec2$3;
              pt.x = this._footer.x;
              pt.y = this._footer.y;
              if (max > 0) pt[this._refreshBarAxis] = pos + this._contentSize[this._refreshBarAxis];else pt[this._refreshBarAxis] = Math.max(Math.min(pos + this._viewSize[this._refreshBarAxis], this._viewSize[this._refreshBarAxis] - this._footerLockedSize), this._viewSize[this._refreshBarAxis] - this._contentSize[this._refreshBarAxis]);
              this._footer.setPosition(pt.x, pt.y);
              pt.x = this._footer.width;
              pt.y = this._footer.height;
              if (max > 0) pt[this._refreshBarAxis] = -max - pos;else pt[this._refreshBarAxis] = this._viewSize[this._refreshBarAxis] - this._footer[this._refreshBarAxis];
              this._footer.setSize(pt.x, pt.y);
            } else {
              this._footer.node.active = false;
            }
          }
        };
        _proto43.lateUpdate = function lateUpdate(dt) {
          if (this._tweening == 0) return;
          var nx = this.runTween("x", dt);
          var ny = this.runTween("y", dt);
          this._container.setPosition(nx, -ny);
          if (this._tweening == 2) {
            if (this._overlapSize.x > 0) this._xPos = math.clamp(-nx, 0, this._overlapSize.x);
            if (this._overlapSize.y > 0) this._yPos = math.clamp(-ny, 0, this._overlapSize.y);
            if (this._pageMode) this.updatePageController();
          }
          if (this._tweenChange.x == 0 && this._tweenChange.y == 0) {
            this._tweening = 0;
            this.loopCheckingCurrent();
            this.updateScrollBarPos();
            this.updateScrollBarVisible();
            this._owner.node.emit(Event.SCROLL, this._owner);
            this._owner.node.emit(Event.SCROLL_END, this._owner);
          } else {
            this.updateScrollBarPos();
            this._owner.node.emit(Event.SCROLL, this._owner);
          }
          return true;
        };
        _proto43.runTween = function runTween(axis, dt) {
          var newValue;
          if (this._tweenChange[axis] != 0) {
            this._tweenTime[axis] += dt;
            if (this._tweenTime[axis] >= this._tweenDuration[axis]) {
              newValue = this._tweenStart[axis] + this._tweenChange[axis];
              this._tweenChange[axis] = 0;
            } else {
              var ratio = easeFunc(this._tweenTime[axis], this._tweenDuration[axis]); // newValue = this._tweenStart[axis] + Math.floor(this._tweenChange[axis] * ratio);
              newValue = this._tweenStart[axis] + this._tweenChange[axis] * ratio;
            }
            var threshold1 = 0;
            var threshold2 = -this._overlapSize[axis];
            if (this._headerLockedSize > 0 && this._refreshBarAxis == axis) threshold1 = this._headerLockedSize;
            if (this._footerLockedSize > 0 && this._refreshBarAxis == axis) {
              var max = this._overlapSize[this._refreshBarAxis];
              if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
              threshold2 = -max;
            }
            if (this._tweening == 2 && this._bouncebackEffect) {
              if (newValue > 20 + threshold1 && this._tweenChange[axis] > 0 || newValue > threshold1 && this._tweenChange[axis] == 0)
                //开始回弹
                {
                  this._tweenTime[axis] = 0;
                  this._tweenDuration[axis] = TWEEN_TIME_DEFAULT;
                  this._tweenChange[axis] = -newValue + threshold1;
                  this._tweenStart[axis] = newValue;
                } else if (newValue < threshold2 - 20 && this._tweenChange[axis] < 0 || newValue < threshold2 && this._tweenChange[axis] == 0)
                //开始回弹
                {
                  this._tweenTime[axis] = 0;
                  this._tweenDuration[axis] = TWEEN_TIME_DEFAULT;
                  this._tweenChange[axis] = threshold2 - newValue;
                  this._tweenStart[axis] = newValue;
                }
            } else {
              if (newValue > threshold1) {
                newValue = threshold1;
                this._tweenChange[axis] = 0;
              } else if (newValue < threshold2) {
                newValue = threshold2;
                this._tweenChange[axis] = 0;
              }
            }
          } else newValue = axis == "x" ? this._container.position.x : -this._container.position.y;
          return newValue;
        };
        _createClass(ScrollPane, [{
          key: "owner",
          get: function get() {
            return this._owner;
          }
        }, {
          key: "hzScrollBar",
          get: function get() {
            return this._hzScrollBar;
          }
        }, {
          key: "vtScrollBar",
          get: function get() {
            return this._vtScrollBar;
          }
        }, {
          key: "header",
          get: function get() {
            return this._header;
          }
        }, {
          key: "footer",
          get: function get() {
            return this._footer;
          }
        }, {
          key: "bouncebackEffect",
          get: function get() {
            return this._bouncebackEffect;
          },
          set: function set(sc) {
            this._bouncebackEffect = sc;
          }
        }, {
          key: "touchEffect",
          get: function get() {
            return this._touchEffect;
          },
          set: function set(sc) {
            this._touchEffect = sc;
          }
        }, {
          key: "scrollStep",
          get: function get() {
            return this._scrollStep;
          },
          set: function set(val) {
            this._scrollStep = val;
            if (this._scrollStep == 0) this._scrollStep = UIConfig.defaultScrollStep;
            this._mouseWheelStep = this._scrollStep * 2;
          }
        }, {
          key: "decelerationRate",
          get: function get() {
            return this._decelerationRate;
          },
          set: function set(val) {
            this._decelerationRate = val;
          }
        }, {
          key: "snapToItem",
          get: function get() {
            return this._snapToItem;
          },
          set: function set(value) {
            this._snapToItem = value;
          }
        }, {
          key: "snappingPolicy",
          get: function get() {
            return this._snappingPolicy;
          },
          set: function set(value) {
            this._snappingPolicy = value;
          }
        }, {
          key: "mouseWheelEnabled",
          get: function get() {
            return this._mouseWheelEnabled;
          },
          set: function set(value) {
            this._mouseWheelEnabled = value;
          }
        }, {
          key: "isDragged",
          get: function get() {
            return this._dragged;
          }
        }, {
          key: "percX",
          get: function get() {
            return this._overlapSize.x == 0 ? 0 : this._xPos / this._overlapSize.x;
          },
          set: function set(value) {
            this.setPercX(value, false);
          }
        }, {
          key: "percY",
          get: function get() {
            return this._overlapSize.y == 0 ? 0 : this._yPos / this._overlapSize.y;
          },
          set: function set(value) {
            this.setPercY(value, false);
          }
        }, {
          key: "posX",
          get: function get() {
            return this._xPos;
          },
          set: function set(value) {
            this.setPosX(value, false);
          }
        }, {
          key: "posY",
          get: function get() {
            return this._yPos;
          },
          set: function set(value) {
            this.setPosY(value, false);
          }
        }, {
          key: "contentWidth",
          get: function get() {
            return this._contentSize.x;
          }
        }, {
          key: "contentHeight",
          get: function get() {
            return this._contentSize.y;
          }
        }, {
          key: "viewWidth",
          get: function get() {
            return this._viewSize.x;
          },
          set: function set(value) {
            value = value + this._owner.margin.left + this._owner.margin.right;
            if (this._vtScrollBar && !this._floating) value += this._vtScrollBar.width;
            this._owner.width = value;
          }
        }, {
          key: "viewHeight",
          get: function get() {
            return this._viewSize.y;
          },
          set: function set(value) {
            value = value + this._owner.margin.top + this._owner.margin.bottom;
            if (this._hzScrollBar && !this._floating) value += this._hzScrollBar.height;
            this._owner.height = value;
          }
        }, {
          key: "currentPageX",
          get: function get() {
            if (!this._pageMode) return 0;
            var page = Math.floor(this._xPos / this._pageSize.x);
            if (this._xPos - page * this._pageSize.x > this._pageSize.x * 0.5) page++;
            return page;
          },
          set: function set(value) {
            this.setCurrentPageX(value, false);
          }
        }, {
          key: "currentPageY",
          get: function get() {
            if (!this._pageMode) return 0;
            var page = Math.floor(this._yPos / this._pageSize.y);
            if (this._yPos - page * this._pageSize.y > this._pageSize.y * 0.5) page++;
            return page;
          },
          set: function set(value) {
            this.setCurrentPageY(value, false);
          }
        }, {
          key: "isBottomMost",
          get: function get() {
            return this._yPos == this._overlapSize.y || this._overlapSize.y == 0;
          }
        }, {
          key: "isRightMost",
          get: function get() {
            return this._xPos == this._overlapSize.x || this._overlapSize.x == 0;
          }
        }, {
          key: "pageController",
          get: function get() {
            return this._pageController;
          },
          set: function set(value) {
            this._pageController = value;
          }
        }, {
          key: "scrollingPosX",
          get: function get() {
            return math.clamp(-this._container.position.x, 0, this._overlapSize.x);
          }
        }, {
          key: "scrollingPosY",
          get: function get() {
            return math.clamp(- -this._container.position.y, 0, this._overlapSize.y);
          }
        }]);
        return ScrollPane;
      }(Component));
      var _gestureFlag = 0;
      var TWEEN_TIME_GO = 0.5; //调用SetPos(ani)时使用的缓动时间
      var TWEEN_TIME_DEFAULT = 0.3; //惯性滚动的最小缓动时间
      var PULL_RATIO = 0.5; //下拉过顶或者上拉过底时允许超过的距离占显示区域的比例
      var s_vec2$3 = new Vec2();
      var s_rect = new Rect();
      var sEndPos = new Vec2();
      var sOldChange = new Vec2();
      function easeFunc(t, d) {
        // return (t = t / d - 1) * t * t + 1; //cubicOut
        // return (t = t / d - 1) * t * t * t * t + 1; //quintOut
        // return Math.sin((t = t / d) * Math.PI / 2);
        t = t = t / d;
        return t === 1 ? 1 : 1 - Math.pow(2, -10 * t); // expoOut
      }
      var CurveType;
      (function (CurveType) {
        CurveType[CurveType["CRSpline"] = 0] = "CRSpline";
        CurveType[CurveType["Bezier"] = 1] = "Bezier";
        CurveType[CurveType["CubicBezier"] = 2] = "CubicBezier";
        CurveType[CurveType["Straight"] = 3] = "Straight";
      })(CurveType || (CurveType = {}));
      var GPathPoint = /*#__PURE__*/function () {
        function GPathPoint() {
          this.x = 0;
          this.y = 0;
          this.control1_x = 0;
          this.control1_y = 0;
          this.control2_x = 0;
          this.control2_y = 0;
          this.curveType = 0;
        }
        GPathPoint.newPoint = function newPoint(x, y, curveType) {
          var pt = new GPathPoint();
          pt.x = x || 0;
          pt.y = y || 0;
          pt.control1_x = 0;
          pt.control1_y = 0;
          pt.control2_x = 0;
          pt.control2_y = 0;
          pt.curveType = curveType || CurveType.CRSpline;
          return pt;
        };
        GPathPoint.newBezierPoint = function newBezierPoint(x, y, control1_x, control1_y) {
          var pt = new GPathPoint();
          pt.x = x || 0;
          pt.y = y || 0;
          pt.control1_x = control1_x || 0;
          pt.control1_y = control1_y || 0;
          pt.control2_x = 0;
          pt.control2_y = 0;
          pt.curveType = CurveType.Bezier;
          return pt;
        };
        GPathPoint.newCubicBezierPoint = function newCubicBezierPoint(x, y, control1_x, control1_y, control2_x, control2_y) {
          var pt = new GPathPoint();
          pt.x = x || 0;
          pt.y = y || 0;
          pt.control1_x = control1_x || 0;
          pt.control1_y = control1_y || 0;
          pt.control2_x = control2_x || 0;
          pt.control2_y = control2_y || 0;
          pt.curveType = CurveType.CubicBezier;
          return pt;
        };
        var _proto44 = GPathPoint.prototype;
        _proto44.clone = function clone() {
          var ret = new GPathPoint();
          ret.x = this.x;
          ret.y = this.y;
          ret.control1_x = this.control1_x;
          ret.control1_y = this.control1_y;
          ret.control2_x = this.control2_x;
          ret.control2_y = this.control2_y;
          ret.curveType = this.curveType;
          return ret;
        };
        return GPathPoint;
      }();
      var GPath = /*#__PURE__*/function () {
        function GPath() {
          this._segments = new Array();
          this._points = new Array();
        }
        var _proto45 = GPath.prototype;
        _proto45.create2 = function create2(pt1, pt2, pt3, pt4) {
          var points = new Array();
          points.push(pt1);
          points.push(pt2);
          if (pt3) points.push(pt3);
          if (pt4) points.push(pt4);
          this.create(points);
        };
        _proto45.create = function create(points) {
          this._segments.length = 0;
          this._points.length = 0;
          this._fullLength = 0;
          var cnt = points.length;
          if (cnt == 0) return;
          var splinePoints = [];
          var prev = points[0];
          if (prev.curveType == CurveType.CRSpline) splinePoints.push(new Vec2(prev.x, prev.y));
          for (var i = 1; i < cnt; i++) {
            var current = points[i];
            if (prev.curveType != CurveType.CRSpline) {
              var seg = {};
              seg.type = prev.curveType;
              seg.ptStart = this._points.length;
              if (prev.curveType == CurveType.Straight) {
                seg.ptCount = 2;
                this._points.push(new Vec2(prev.x, prev.y));
                this._points.push(new Vec2(current.x, current.y));
              } else if (prev.curveType == CurveType.Bezier) {
                seg.ptCount = 3;
                this._points.push(new Vec2(prev.x, prev.y));
                this._points.push(new Vec2(current.x, current.y));
                this._points.push(new Vec2(prev.control1_x, prev.control1_y));
              } else if (prev.curveType == CurveType.CubicBezier) {
                seg.ptCount = 4;
                this._points.push(new Vec2(prev.x, prev.y));
                this._points.push(new Vec2(current.x, current.y));
                this._points.push(new Vec2(prev.control1_x, prev.control1_y));
                this._points.push(new Vec2(prev.control2_x, prev.control2_y));
              }
              seg.length = distance(prev.x, prev.y, current.x, current.y);
              this._fullLength += seg.length;
              this._segments.push(seg);
            }
            if (current.curveType != CurveType.CRSpline) {
              if (splinePoints.length > 0) {
                splinePoints.push(new Vec2(current.x, current.y));
                this.createSplineSegment(splinePoints);
              }
            } else splinePoints.push(new Vec2(current.x, current.y));
            prev = current;
          }
          if (splinePoints.length > 1) this.createSplineSegment(splinePoints);
        };
        _proto45.createSplineSegment = function createSplineSegment(splinePoints) {
          var cnt = splinePoints.length;
          splinePoints.splice(0, 0, splinePoints[0]);
          splinePoints.push(splinePoints[cnt]);
          splinePoints.push(splinePoints[cnt]);
          cnt += 3;
          var seg = {};
          seg.type = CurveType.CRSpline;
          seg.ptStart = this._points.length;
          seg.ptCount = cnt;
          this._points = this._points.concat(splinePoints);
          seg.length = 0;
          for (var i = 1; i < cnt; i++) {
            seg.length += distance(splinePoints[i - 1].x, splinePoints[i - 1].y, splinePoints[i].x, splinePoints[i].y);
          }
          this._fullLength += seg.length;
          this._segments.push(seg);
          splinePoints.length = 0;
        };
        _proto45.clear = function clear() {
          this._segments.length = 0;
          this._points.length = 0;
        };
        _proto45.getPointAt = function getPointAt(t, result) {
          if (!result) result = new Vec2();else result.set(0, 0);
          t = math.clamp01(t);
          var cnt = this._segments.length;
          if (cnt == 0) {
            return result;
          }
          var seg;
          if (t == 1) {
            seg = this._segments[cnt - 1];
            if (seg.type == CurveType.Straight) {
              result.x = math.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t);
              result.y = math.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t);
              return result;
            } else if (seg.type == CurveType.Bezier || seg.type == CurveType.CubicBezier) return this.onBezierCurve(seg.ptStart, seg.ptCount, t, result);else return this.onCRSplineCurve(seg.ptStart, seg.ptCount, t, result);
          }
          var len = t * this._fullLength;
          for (var i = 0; i < cnt; i++) {
            seg = this._segments[i];
            len -= seg.length;
            if (len < 0) {
              t = 1 + len / seg.length;
              if (seg.type == CurveType.Straight) {
                result.x = math.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t);
                result.y = math.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t);
              } else if (seg.type == CurveType.Bezier || seg.type == CurveType.CubicBezier) result = this.onBezierCurve(seg.ptStart, seg.ptCount, t, result);else result = this.onCRSplineCurve(seg.ptStart, seg.ptCount, t, result);
              break;
            }
          }
          return result;
        };
        _proto45.getAnchorsInSegment = function getAnchorsInSegment(segmentIndex, points) {
          if (points == null) points = new Array();
          var seg = this._segments[segmentIndex];
          for (var i = 0; i < seg.ptCount; i++) points.push(new Vec2(this._points[seg.ptStart + i].x, this._points[seg.ptStart + i].y));
          return points;
        };
        _proto45.getPointsInSegment = function getPointsInSegment(segmentIndex, t0, t1, points, ts, pointDensity) {
          if (points == null) points = new Array();
          if (!pointDensity || isNaN(pointDensity)) pointDensity = 0.1;
          if (ts) ts.push(t0);
          var seg = this._segments[segmentIndex];
          if (seg.type == CurveType.Straight) {
            points.push(new Vec2(math.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t0), math.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t0)));
            points.push(new Vec2(math.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t1), math.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t1)));
          } else {
            var func;
            if (seg.type == CurveType.Bezier || seg.type == CurveType.CubicBezier) func = this.onBezierCurve;else func = this.onCRSplineCurve;
            points.push(func.call(this, seg.ptStart, seg.ptCount, t0, new Vec2()));
            var SmoothAmount = Math.min(seg.length * pointDensity, 50);
            for (var j = 0; j <= SmoothAmount; j++) {
              var t = j / SmoothAmount;
              if (t > t0 && t < t1) {
                points.push(func.call(this, seg.ptStart, seg.ptCount, t, new Vec2()));
                if (ts) ts.push(t);
              }
            }
            points.push(func.call(this, seg.ptStart, seg.ptCount, t1, new Vec2()));
          }
          if (ts) ts.push(t1);
          return points;
        };
        _proto45.getAllPoints = function getAllPoints(points, ts, pointDensity) {
          if (points == null) points = new Array();
          if (!pointDensity || isNaN(pointDensity)) pointDensity = 0.1;
          var cnt = this._segments.length;
          for (var i = 0; i < cnt; i++) this.getPointsInSegment(i, 0, 1, points, ts, pointDensity);
          return points;
        };
        _proto45.onCRSplineCurve = function onCRSplineCurve(ptStart, ptCount, t, result) {
          var adjustedIndex = Math.floor(t * (ptCount - 4)) + ptStart; //Since the equation works with 4 points, we adjust the starting point depending on t to return a point on the specific segment
          var p0x = this._points[adjustedIndex].x;
          var p0y = this._points[adjustedIndex].y;
          var p1x = this._points[adjustedIndex + 1].x;
          var p1y = this._points[adjustedIndex + 1].y;
          var p2x = this._points[adjustedIndex + 2].x;
          var p2y = this._points[adjustedIndex + 2].y;
          var p3x = this._points[adjustedIndex + 3].x;
          var p3y = this._points[adjustedIndex + 3].y;
          var adjustedT = t == 1 ? 1 : math.repeat(t * (ptCount - 4), 1); // Then we adjust t to be that value on that new piece of segment... for t == 1f don't use repeat (that would return 0f);
          var t0 = ((-adjustedT + 2) * adjustedT - 1) * adjustedT * 0.5;
          var t1 = ((3 * adjustedT - 5) * adjustedT * adjustedT + 2) * 0.5;
          var t2 = ((-3 * adjustedT + 4) * adjustedT + 1) * adjustedT * 0.5;
          var t3 = (adjustedT - 1) * adjustedT * adjustedT * 0.5;
          result.x = p0x * t0 + p1x * t1 + p2x * t2 + p3x * t3;
          result.y = p0y * t0 + p1y * t1 + p2y * t2 + p3y * t3;
          return result;
        };
        _proto45.onBezierCurve = function onBezierCurve(ptStart, ptCount, t, result) {
          var t2 = 1 - t;
          var p0x = this._points[ptStart].x;
          var p0y = this._points[ptStart].y;
          var p1x = this._points[ptStart + 1].x;
          var p1y = this._points[ptStart + 1].y;
          var cp0x = this._points[ptStart + 2].x;
          var cp0y = this._points[ptStart + 2].y;
          if (ptCount == 4) {
            var cp1x = this._points[ptStart + 3].x;
            var cp1y = this._points[ptStart + 3].y;
            result.x = t2 * t2 * t2 * p0x + 3 * t2 * t2 * t * cp0x + 3 * t2 * t * t * cp1x + t * t * t * p1x;
            result.y = t2 * t2 * t2 * p0y + 3 * t2 * t2 * t * cp0y + 3 * t2 * t * t * cp1y + t * t * t * p1y;
          } else {
            result.x = t2 * t2 * p0x + 2 * t2 * t * cp0x + t * t * p1x;
            result.y = t2 * t2 * p0y + 2 * t2 * t * cp0y + t * t * p1y;
          }
          return result;
        };
        _createClass(GPath, [{
          key: "length",
          get: function get() {
            return this._fullLength;
          }
        }, {
          key: "segmentCount",
          get: function get() {
            return this._segments.length;
          }
        }]);
        return GPath;
      }();
      function distance(x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
      }
      var Transition = exports('Transition', /*#__PURE__*/function () {
        function Transition(owner) {
          this._ownerBaseX = 0;
          this._ownerBaseY = 0;
          this._totalTimes = 0;
          this._totalTasks = 0;
          this._options = 0;
          this._totalDuration = 0;
          this._autoPlayTimes = 1;
          this._autoPlayDelay = 0;
          this._timeScale = 1;
          this._startTime = 0;
          this._endTime = 0;
          this._owner = owner;
          this._items = new Array();
        }
        var _proto46 = Transition.prototype;
        _proto46.play = function play(onComplete, times, delay, startTime, endTime) {
          this._play(onComplete, times, delay, startTime, endTime, false);
        };
        _proto46.playReverse = function playReverse(onComplete, times, delay) {
          this._play(onComplete, times, delay, 0, -1, true);
        };
        _proto46.changePlayTimes = function changePlayTimes(value) {
          this._totalTimes = value;
        };
        _proto46.setAutoPlay = function setAutoPlay(value, times, delay) {
          if (times == undefined) times = -1;
          if (delay == undefined) delay = 0;
          if (this._autoPlay != value) {
            this._autoPlay = value;
            this._autoPlayTimes = times;
            this._autoPlayDelay = delay;
            if (this._autoPlay) {
              if (this._owner.onStage) this.play(null, this._autoPlayTimes, this._autoPlayDelay);
            } else {
              if (!this._owner.onStage) this.stop(false, true);
            }
          }
        };
        _proto46._play = function _play(onComplete, times, delay, startTime, endTime, reversed) {
          if (times == undefined) times = 1;
          if (delay == undefined) delay = 0;
          if (startTime == undefined) startTime = 0;
          if (endTime == undefined) endTime = -1;
          this.stop(true, true);
          this._totalTimes = times;
          this._reversed = reversed;
          this._startTime = startTime;
          this._endTime = endTime;
          this._playing = true;
          this._paused = false;
          this._onComplete = onComplete;
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.target == null) {
              if (item.targetId) item.target = this._owner.getChildById(item.targetId);else item.target = this._owner;
            } else if (item.target != this._owner && item.target.parent != this._owner) item.target = null;
            if (item.target && item.type == ActionType.Transition) {
              var trans = item.target.getTransition(item.value.transName);
              if (trans == this) trans = null;
              if (trans) {
                if (item.value.playTimes == 0)
                  //stop
                  {
                    var j;
                    for (j = i - 1; j >= 0; j--) {
                      var item2 = this._items[j];
                      if (item2.type == ActionType.Transition) {
                        if (item2.value.trans == trans) {
                          item2.value.stopTime = item.time - item2.time;
                          break;
                        }
                      }
                    }
                    if (j < 0) item.value.stopTime = 0;else trans = null; //no need to handle stop anymore
                  } else item.value.stopTime = -1;
              }
              item.value.trans = trans;
            }
          }
          if (delay == 0) this.onDelayedPlay();else GTween.delayedCall(delay).setTarget(this).onComplete(this.onDelayedPlay, this);
        };
        _proto46.stop = function stop(setToComplete, processCallback) {
          if (setToComplete == undefined) setToComplete = true;
          if (!this._playing) return;
          this._playing = false;
          this._totalTasks = 0;
          this._totalTimes = 0;
          var func = this._onComplete;
          this._onComplete = null;
          GTween.kill(this); //delay start
          var cnt = this._items.length;
          if (this._reversed) {
            for (var i = cnt - 1; i >= 0; i--) {
              var item = this._items[i];
              if (item.target == null) continue;
              this.stopItem(item, setToComplete);
            }
          } else {
            for (i = 0; i < cnt; i++) {
              item = this._items[i];
              if (item.target == null) continue;
              this.stopItem(item, setToComplete);
            }
          }
          if (processCallback && func != null) {
            func();
          }
        };
        _proto46.stopItem = function stopItem(item, setToComplete) {
          if (item.displayLockToken != 0) {
            item.target.releaseDisplayLock(item.displayLockToken);
            item.displayLockToken = 0;
          }
          if (item.tweener) {
            item.tweener.kill(setToComplete);
            item.tweener = null;
            if (item.type == ActionType.Shake && !setToComplete)
              //震动必须归位，否则下次就越震越远了。
              {
                item.target._gearLocked = true;
                item.target.setPosition(item.target.x - item.value.lastOffsetX, item.target.y - item.value.lastOffsetY);
                item.target._gearLocked = false;
              }
          }
          if (item.type == ActionType.Transition) {
            var trans = item.value.trans;
            if (trans) trans.stop(setToComplete, false);
          }
        };
        _proto46.setPaused = function setPaused(paused) {
          if (!this._playing || this._paused == paused) return;
          this._paused = paused;
          var tweener = GTween.getTween(this);
          if (tweener) tweener.setPaused(paused);
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.target == null) continue;
            if (item.type == ActionType.Transition) {
              if (item.value.trans) item.value.trans.setPaused(paused);
            } else if (item.type == ActionType.Animation) {
              if (paused) {
                item.value.flag = item.target.getProp(ObjectPropID.Playing);
                item.target.setProp(ObjectPropID.Playing, false);
              } else item.target.setProp(ObjectPropID.Playing, item.value.flag);
            }
            if (item.tweener) item.tweener.setPaused(paused);
          }
        };
        _proto46.dispose = function dispose() {
          if (this._playing) GTween.kill(this); //delay start
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.tweener) {
              item.tweener.kill();
              item.tweener = null;
            }
            item.target = null;
            item.hook = null;
            if (item.tweenConfig) item.tweenConfig.endHook = null;
          }
          this._items.length = 0;
          this._playing = false;
          this._onComplete = null;
        };
        _proto46.setValue = function setValue(label) {
          var cnt = this._items.length;
          var value;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.label == label) {
              if (item.tweenConfig) value = item.tweenConfig.startValue;else value = item.value;
            } else if (item.tweenConfig && item.tweenConfig.endLabel == label) {
              value = item.tweenConfig.endValue;
            } else continue;
            switch (item.type) {
              case ActionType.XY:
              case ActionType.Size:
              case ActionType.Pivot:
              case ActionType.Scale:
              case ActionType.Skew:
                value.b1 = true;
                value.b2 = true;
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                value.f2 = parseFloat(arguments.length <= 2 ? undefined : arguments[2]);
                break;
              case ActionType.Alpha:
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                break;
              case ActionType.Rotation:
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                break;
              case ActionType.Color:
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                break;
              case ActionType.Animation:
                value.frame = parseInt(arguments.length <= 1 ? undefined : arguments[1]);
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) value.playing = arguments.length <= 2 ? undefined : arguments[2];
                break;
              case ActionType.Visible:
                value.visible = arguments.length <= 1 ? undefined : arguments[1];
                break;
              case ActionType.Sound:
                value.sound = arguments.length <= 1 ? undefined : arguments[1];
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) value.volume = parseFloat(arguments.length <= 2 ? undefined : arguments[2]);
                break;
              case ActionType.Transition:
                value.transName = arguments.length <= 1 ? undefined : arguments[1];
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) value.playTimes = parseInt(arguments.length <= 2 ? undefined : arguments[2]);
                break;
              case ActionType.Shake:
                value.amplitude = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) value.duration = parseFloat(arguments.length <= 2 ? undefined : arguments[2]);
                break;
              case ActionType.ColorFilter:
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                value.f2 = parseFloat(arguments.length <= 2 ? undefined : arguments[2]);
                value.f3 = parseFloat(arguments.length <= 3 ? undefined : arguments[3]);
                value.f4 = parseFloat(arguments.length <= 4 ? undefined : arguments[4]);
                break;
              case ActionType.Text:
              case ActionType.Icon:
                value.text = arguments.length <= 1 ? undefined : arguments[1];
                break;
            }
          }
        };
        _proto46.setHook = function setHook(label, callback) {
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.label == label) {
              item.hook = callback;
              break;
            } else if (item.tweenConfig && item.tweenConfig.endLabel == label) {
              item.tweenConfig.endHook = callback;
              break;
            }
          }
        };
        _proto46.clearHooks = function clearHooks() {
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            item.hook = null;
            if (item.tweenConfig) item.tweenConfig.endHook = null;
          }
        };
        _proto46.setTarget = function setTarget(label, newTarget) {
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.label == label) {
              item.targetId = newTarget.id;
              item.target = null;
            }
          }
        };
        _proto46.setDuration = function setDuration(label, value) {
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.tweenConfig && item.label == label) item.tweenConfig.duration = value;
          }
        };
        _proto46.getLabelTime = function getLabelTime(label) {
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.label == label) return item.time;else if (item.tweenConfig && item.tweenConfig.endLabel == label) return item.time + item.tweenConfig.duration;
          }
          return Number.NaN;
        };
        _proto46.updateFromRelations = function updateFromRelations(targetId, dx, dy) {
          var cnt = this._items.length;
          if (cnt == 0) return;
          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.type == ActionType.XY && item.targetId == targetId) {
              if (item.tweenConfig) {
                item.tweenConfig.startValue.f1 += dx;
                item.tweenConfig.startValue.f2 += dy;
                item.tweenConfig.endValue.f1 += dx;
                item.tweenConfig.endValue.f2 += dy;
              } else {
                item.value.f1 += dx;
                item.value.f2 += dy;
              }
            }
          }
        };
        _proto46.onEnable = function onEnable() {
          if (this._autoPlay && !this._playing) this.play(null, this._autoPlayTimes, this._autoPlayDelay);
        };
        _proto46.onDisable = function onDisable() {
          if ((this._options & OPTION_AUTO_STOP_DISABLED) == 0) this.stop((this._options & OPTION_AUTO_STOP_AT_END) != 0 ? true : false, false);
        };
        _proto46.onDelayedPlay = function onDelayedPlay() {
          this.internalPlay();
          this._playing = this._totalTasks > 0;
          if (this._playing) {
            if ((this._options & OPTION_IGNORE_DISPLAY_CONTROLLER) != 0) {
              var cnt = this._items.length;
              for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.target && item.target != this._owner) item.displayLockToken = item.target.addDisplayLock();
              }
            }
          } else if (this._onComplete != null) {
            var func = this._onComplete;
            this._onComplete = null;
            func();
          }
        };
        _proto46.internalPlay = function internalPlay() {
          this._ownerBaseX = this._owner.x;
          this._ownerBaseY = this._owner.y;
          this._totalTasks = 1;
          var cnt = this._items.length;
          var item;
          var needSkipAnimations = false;
          var i;
          if (!this._reversed) {
            for (i = 0; i < cnt; i++) {
              item = this._items[i];
              if (item.target == null) continue;
              if (item.type == ActionType.Animation && this._startTime != 0 && item.time <= this._startTime) {
                needSkipAnimations = true;
                item.value.flag = false;
              } else this.playItem(item);
            }
          } else {
            for (i = cnt - 1; i >= 0; i--) {
              item = this._items[i];
              if (item.target == null) continue;
              this.playItem(item);
            }
          }
          if (needSkipAnimations) this.skipAnimations();
          this._totalTasks--;
        };
        _proto46.playItem = function playItem(item) {
          var time;
          if (item.tweenConfig) {
            if (this._reversed) time = this._totalDuration - item.time - item.tweenConfig.duration;else time = item.time;
            if (this._endTime == -1 || time <= this._endTime) {
              var startValue;
              var endValue;
              if (this._reversed) {
                startValue = item.tweenConfig.endValue;
                endValue = item.tweenConfig.startValue;
              } else {
                startValue = item.tweenConfig.startValue;
                endValue = item.tweenConfig.endValue;
              }
              item.value.b1 = startValue.b1 || endValue.b1;
              item.value.b2 = startValue.b2 || endValue.b2;
              switch (item.type) {
                case ActionType.XY:
                case ActionType.Size:
                case ActionType.Scale:
                case ActionType.Skew:
                  item.tweener = GTween.to2(startValue.f1, startValue.f2, endValue.f1, endValue.f2, item.tweenConfig.duration);
                  break;
                case ActionType.Alpha:
                case ActionType.Rotation:
                  item.tweener = GTween.to(startValue.f1, endValue.f1, item.tweenConfig.duration);
                  break;
                case ActionType.Color:
                  item.tweener = GTween.toColor(startValue.f1, endValue.f1, item.tweenConfig.duration);
                  break;
                case ActionType.ColorFilter:
                  item.tweener = GTween.to4(startValue.f1, startValue.f2, startValue.f3, startValue.f4, endValue.f1, endValue.f2, endValue.f3, endValue.f4, item.tweenConfig.duration);
                  break;
              }
              item.tweener.setDelay(time).setEase(item.tweenConfig.easeType).setRepeat(item.tweenConfig.repeat, item.tweenConfig.yoyo).setTimeScale(this._timeScale).setTarget(item).onStart(this.onTweenStart, this).onUpdate(this.onTweenUpdate, this).onComplete(this.onTweenComplete, this);
              if (this._endTime >= 0) item.tweener.setBreakpoint(this._endTime - time);
              this._totalTasks++;
            }
          } else if (item.type == ActionType.Shake) {
            if (this._reversed) time = this._totalDuration - item.time - item.value.duration;else time = item.time;
            item.value.offsetX = item.value.offsetY = 0;
            item.value.lastOffsetX = item.value.lastOffsetY = 0;
            item.tweener = GTween.shake(0, 0, item.value.amplitude, item.value.duration).setDelay(time).setTimeScale(this._timeScale).setTarget(item).onUpdate(this.onTweenUpdate, this).onComplete(this.onTweenComplete, this);
            if (this._endTime >= 0) item.tweener.setBreakpoint(this._endTime - item.time);
            this._totalTasks++;
          } else {
            if (this._reversed) time = this._totalDuration - item.time;else time = item.time;
            if (time <= this._startTime) {
              this.applyValue(item);
              this.callHook(item, false);
            } else if (this._endTime == -1 || time <= this._endTime) {
              this._totalTasks++;
              item.tweener = GTween.delayedCall(time).setTimeScale(this._timeScale).setTarget(item).onComplete(this.onDelayedPlayItem, this);
            }
          }
          if (item.tweener) item.tweener.seek(this._startTime);
        };
        _proto46.skipAnimations = function skipAnimations() {
          var frame;
          var playStartTime;
          var playTotalTime;
          var value;
          var target;
          var item;
          var cnt = this._items.length;
          for (var i = 0; i < cnt; i++) {
            item = this._items[i];
            if (item.type != ActionType.Animation || item.time > this._startTime) continue;
            value = item.value;
            if (value.flag) continue;
            target = item.target;
            frame = target.getProp(ObjectPropID.Frame);
            playStartTime = target.getProp(ObjectPropID.Playing) ? 0 : -1;
            playTotalTime = 0;
            for (var j = i; j < cnt; j++) {
              item = this._items[j];
              if (item.type != ActionType.Animation || item.target != target || item.time > this._startTime) continue;
              value = item.value;
              value.flag = true;
              if (value.frame != -1) {
                frame = value.frame;
                if (value.playing) playStartTime = item.time;else playStartTime = -1;
                playTotalTime = 0;
              } else {
                if (value.playing) {
                  if (playStartTime < 0) playStartTime = item.time;
                } else {
                  if (playStartTime >= 0) playTotalTime += item.time - playStartTime;
                  playStartTime = -1;
                }
              }
              this.callHook(item, false);
            }
            if (playStartTime >= 0) playTotalTime += this._startTime - playStartTime;
            target.setProp(ObjectPropID.Playing, playStartTime >= 0);
            target.setProp(ObjectPropID.Frame, frame);
            if (playTotalTime > 0) target.setProp(ObjectPropID.DeltaTime, playTotalTime);
          }
        };
        _proto46.onDelayedPlayItem = function onDelayedPlayItem(tweener) {
          var item = tweener.target;
          item.tweener = null;
          this._totalTasks--;
          this.applyValue(item);
          this.callHook(item, false);
          this.checkAllComplete();
        };
        _proto46.onTweenStart = function onTweenStart(tweener) {
          var item = tweener.target;
          if (item.type == ActionType.XY || item.type == ActionType.Size)
            //位置和大小要到start才最终确认起始值
            {
              var startValue;
              var endValue;
              if (this._reversed) {
                startValue = item.tweenConfig.endValue;
                endValue = item.tweenConfig.startValue;
              } else {
                startValue = item.tweenConfig.startValue;
                endValue = item.tweenConfig.endValue;
              }
              if (item.type == ActionType.XY) {
                if (item.target != this._owner) {
                  if (!startValue.b1) tweener.startValue.x = item.target.x;else if (startValue.b3)
                    //percent
                    tweener.startValue.x = startValue.f1 * this._owner.width;
                  if (!startValue.b2) tweener.startValue.y = item.target.y;else if (startValue.b3)
                    //percent
                    tweener.startValue.y = startValue.f2 * this._owner.height;
                  if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;else if (endValue.b3) tweener.endValue.x = endValue.f1 * this._owner.width;
                  if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;else if (endValue.b3) tweener.endValue.y = endValue.f2 * this._owner.height;
                } else {
                  if (!startValue.b1) tweener.startValue.x = item.target.x - this._ownerBaseX;
                  if (!startValue.b2) tweener.startValue.y = item.target.y - this._ownerBaseY;
                  if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;
                  if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;
                }
              } else {
                if (!startValue.b1) tweener.startValue.x = item.target.width;
                if (!startValue.b2) tweener.startValue.y = item.target.height;
                if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;
                if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;
              }
              if (item.tweenConfig.path) {
                item.value.b1 = item.value.b2 = true;
                tweener.setPath(item.tweenConfig.path);
              }
            }
          this.callHook(item, false);
        };
        _proto46.onTweenUpdate = function onTweenUpdate(tweener) {
          var item = tweener.target;
          switch (item.type) {
            case ActionType.XY:
            case ActionType.Size:
            case ActionType.Scale:
            case ActionType.Skew:
              item.value.f1 = tweener.value.x;
              item.value.f2 = tweener.value.y;
              if (item.tweenConfig.path) {
                item.value.f1 += tweener.startValue.x;
                item.value.f2 += tweener.startValue.y;
              }
              break;
            case ActionType.Alpha:
            case ActionType.Rotation:
              item.value.f1 = tweener.value.x;
              break;
            case ActionType.Color:
              item.value.f1 = tweener.value.color;
              break;
            case ActionType.ColorFilter:
              item.value.f1 = tweener.value.x;
              item.value.f2 = tweener.value.y;
              item.value.f3 = tweener.value.z;
              item.value.f4 = tweener.value.w;
              break;
            case ActionType.Shake:
              item.value.offsetX = tweener.deltaValue.x;
              item.value.offsetY = tweener.deltaValue.y;
              break;
          }
          this.applyValue(item);
        };
        _proto46.onTweenComplete = function onTweenComplete(tweener) {
          var item = tweener.target;
          item.tweener = null;
          this._totalTasks--;
          if (tweener.allCompleted)
            //当整体播放结束时间在这个tween的中间时不应该调用结尾钩子
            this.callHook(item, true);
          this.checkAllComplete();
        };
        _proto46.onPlayTransCompleted = function onPlayTransCompleted(item) {
          this._totalTasks--;
          this.checkAllComplete();
        };
        _proto46.callHook = function callHook(item, tweenEnd) {
          if (tweenEnd) {
            if (item.tweenConfig && item.tweenConfig.endHook != null) item.tweenConfig.endHook(item.label);
          } else {
            if (item.time >= this._startTime && item.hook != null) item.hook(item.label);
          }
        };
        _proto46.checkAllComplete = function checkAllComplete() {
          if (this._playing && this._totalTasks == 0) {
            if (this._totalTimes < 0) {
              this.internalPlay();
              if (this._totalTasks == 0) GTween.delayedCall(0).setTarget(this).onComplete(this.checkAllComplete, this);
            } else {
              this._totalTimes--;
              if (this._totalTimes > 0) {
                this.internalPlay();
                if (this._totalTasks == 0) GTween.delayedCall(0).setTarget(this).onComplete(this.checkAllComplete, this);
              } else {
                this._playing = false;
                var cnt = this._items.length;
                for (var i = 0; i < cnt; i++) {
                  var item = this._items[i];
                  if (item.target && item.displayLockToken != 0) {
                    item.target.releaseDisplayLock(item.displayLockToken);
                    item.displayLockToken = 0;
                  }
                }
                if (this._onComplete != null) {
                  var func = this._onComplete;
                  this._onComplete = null;
                  func();
                }
              }
            }
          }
        };
        _proto46.applyValue = function applyValue(item) {
          item.target._gearLocked = true;
          var value = item.value;
          switch (item.type) {
            case ActionType.XY:
              if (item.target == this._owner) {
                if (value.b1 && value.b2) item.target.setPosition(value.f1 + this._ownerBaseX, value.f2 + this._ownerBaseY);else if (value.b1) item.target.x = value.f1 + this._ownerBaseX;else item.target.y = value.f2 + this._ownerBaseY;
              } else {
                if (value.b3)
                  //position in percent
                  {
                    if (value.b1 && value.b2) item.target.setPosition(value.f1 * this._owner.width, value.f2 * this._owner.height);else if (value.b1) item.target.x = value.f1 * this._owner.width;else if (value.b2) item.target.y = value.f2 * this._owner.height;
                  } else {
                  if (value.b1 && value.b2) item.target.setPosition(value.f1, value.f2);else if (value.b1) item.target.x = value.f1;else if (value.b2) item.target.y = value.f2;
                }
              }
              break;
            case ActionType.Size:
              if (!value.b1) value.f1 = item.target.width;
              if (!value.b2) value.f2 = item.target.height;
              item.target.setSize(value.f1, value.f2);
              break;
            case ActionType.Pivot:
              item.target.setPivot(value.f1, value.f2, item.target.pivotAsAnchor);
              break;
            case ActionType.Alpha:
              item.target.alpha = value.f1;
              break;
            case ActionType.Rotation:
              item.target.rotation = value.f1;
              break;
            case ActionType.Scale:
              item.target.setScale(value.f1, value.f2);
              break;
            case ActionType.Skew:
              //item.target.setSkew(value.f1, value.f2);
              break;
            case ActionType.Color:
              var color = item.target.getProp(ObjectPropID.Color);
              if (color instanceof Color) {
                var i = Math.floor(value.f1);
                color.r = i >> 16 & 0xFF;
                color.g = i >> 8 & 0xFF;
                color.b = i & 0xFF;
                item.target.setProp(ObjectPropID.Color, color);
              }
              break;
            case ActionType.Animation:
              if (value.frame >= 0) item.target.setProp(ObjectPropID.Frame, value.frame);
              item.target.setProp(ObjectPropID.Playing, value.playing);
              item.target.setProp(ObjectPropID.TimeScale, this._timeScale);
              break;
            case ActionType.Visible:
              item.target.visible = value.visible;
              break;
            case ActionType.Transition:
              if (this._playing) {
                var trans = value.trans;
                if (trans) {
                  this._totalTasks++;
                  var startTime = this._startTime > item.time ? this._startTime - item.time : 0;
                  var endTime = this._endTime >= 0 ? this._endTime - item.time : -1;
                  if (value.stopTime >= 0 && (endTime < 0 || endTime > value.stopTime)) endTime = value.stopTime;
                  trans.timeScale = this._timeScale;
                  var localThis = this;
                  trans._play(function () {
                    localThis.onPlayTransCompleted(item);
                  }, value.playTimes, 0, startTime, endTime, this._reversed);
                }
              }
              break;
            case ActionType.Sound:
              if (this._playing && item.time >= this._startTime) {
                if (value.audioClip == null) {
                  var pi = UIPackage.getItemByURL(value.sound);
                  if (pi) value.audioClip = pi.owner.getItemAsset(pi);
                }
                if (value.audioClip) {
                  var groot = Decls$1.GRoot.getInstance(this._owner);
                  groot.playOneShotSound(value.audioClip, value.volume);
                }
              }
              break;
            case ActionType.Shake:
              item.target.setPosition(item.target.x - value.lastOffsetX + value.offsetX, item.target.y - value.lastOffsetY + value.offsetY);
              value.lastOffsetX = value.offsetX;
              value.lastOffsetY = value.offsetY;
              break;
            case ActionType.ColorFilter:
              {
                //TODO: filter support
                break;
              }
            case ActionType.Text:
              item.target.text = value.text;
              break;
            case ActionType.Icon:
              item.target.icon = value.text;
              break;
          }
          item.target._gearLocked = false;
        };
        _proto46.setup = function setup(buffer) {
          this.name = buffer.readS();
          this._options = buffer.readInt();
          this._autoPlay = buffer.readBool();
          this._autoPlayTimes = buffer.readInt();
          this._autoPlayDelay = buffer.readFloat();
          var cnt = buffer.readShort();
          for (var i = 0; i < cnt; i++) {
            var dataLen = buffer.readShort();
            var curPos = buffer.position;
            buffer.seek(curPos, 0);
            var item = new Item(buffer.readByte());
            this._items[i] = item;
            item.time = buffer.readFloat();
            var targetId = buffer.readShort();
            if (targetId < 0) item.targetId = "";else item.targetId = this._owner.getChildAt(targetId).id;
            item.label = buffer.readS();
            if (buffer.readBool()) {
              buffer.seek(curPos, 1);
              item.tweenConfig = new TweenConfig();
              item.tweenConfig.duration = buffer.readFloat();
              if (item.time + item.tweenConfig.duration > this._totalDuration) this._totalDuration = item.time + item.tweenConfig.duration;
              item.tweenConfig.easeType = buffer.readByte();
              item.tweenConfig.repeat = buffer.readInt();
              item.tweenConfig.yoyo = buffer.readBool();
              item.tweenConfig.endLabel = buffer.readS();
              buffer.seek(curPos, 2);
              this.decodeValue(item, buffer, item.tweenConfig.startValue);
              buffer.seek(curPos, 3);
              this.decodeValue(item, buffer, item.tweenConfig.endValue);
              if (buffer.version >= 2) {
                var pathLen = buffer.readInt();
                if (pathLen > 0) {
                  item.tweenConfig.path = new GPath();
                  var pts = new Array();
                  for (var j = 0; j < pathLen; j++) {
                    var curveType = buffer.readByte();
                    switch (curveType) {
                      case CurveType.Bezier:
                        pts.push(GPathPoint.newBezierPoint(buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat()));
                        break;
                      case CurveType.CubicBezier:
                        pts.push(GPathPoint.newCubicBezierPoint(buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat()));
                        break;
                      default:
                        pts.push(GPathPoint.newPoint(buffer.readFloat(), buffer.readFloat(), curveType));
                        break;
                    }
                  }
                  item.tweenConfig.path.create(pts);
                }
              }
            } else {
              if (item.time > this._totalDuration) this._totalDuration = item.time;
              buffer.seek(curPos, 2);
              this.decodeValue(item, buffer, item.value);
            }
            buffer.position = curPos + dataLen;
          }
        };
        _proto46.decodeValue = function decodeValue(item, buffer, value) {
          switch (item.type) {
            case ActionType.XY:
            case ActionType.Size:
            case ActionType.Pivot:
            case ActionType.Skew:
              value.b1 = buffer.readBool();
              value.b2 = buffer.readBool();
              value.f1 = buffer.readFloat();
              value.f2 = buffer.readFloat();
              if (buffer.version >= 2 && item.type == ActionType.XY) value.b3 = buffer.readBool(); //percent
              break;
            case ActionType.Alpha:
            case ActionType.Rotation:
              value.f1 = buffer.readFloat();
              break;
            case ActionType.Scale:
              value.f1 = buffer.readFloat();
              value.f2 = buffer.readFloat();
              break;
            case ActionType.Color:
              var color = buffer.readColor();
              value.f1 = (color.r << 16) + (color.g << 8) + color.b;
              break;
            case ActionType.Animation:
              value.playing = buffer.readBool();
              value.frame = buffer.readInt();
              break;
            case ActionType.Visible:
              value.visible = buffer.readBool();
              break;
            case ActionType.Sound:
              value.sound = buffer.readS();
              value.volume = buffer.readFloat();
              break;
            case ActionType.Transition:
              value.transName = buffer.readS();
              value.playTimes = buffer.readInt();
              break;
            case ActionType.Shake:
              value.amplitude = buffer.readFloat();
              value.duration = buffer.readFloat();
              break;
            case ActionType.ColorFilter:
              value.f1 = buffer.readFloat();
              value.f2 = buffer.readFloat();
              value.f3 = buffer.readFloat();
              value.f4 = buffer.readFloat();
              break;
            case ActionType.Text:
            case ActionType.Icon:
              value.text = buffer.readS();
              break;
          }
        };
        _createClass(Transition, [{
          key: "playing",
          get: function get() {
            return this._playing;
          }
        }, {
          key: "timeScale",
          get: function get() {
            return this._timeScale;
          },
          set: function set(value) {
            if (this._timeScale != value) {
              this._timeScale = value;
              if (this._playing) {
                var cnt = this._items.length;
                for (var i = 0; i < cnt; i++) {
                  var item = this._items[i];
                  if (item.tweener) item.tweener.setTimeScale(value);else if (item.type == ActionType.Transition) {
                    if (item.value.trans) item.value.trans.timeScale = value;
                  } else if (item.type == ActionType.Animation) {
                    if (item.target) item.target.setProp(ObjectPropID.TimeScale, value);
                  }
                }
              }
            }
          }
        }]);
        return Transition;
      }());
      var OPTION_IGNORE_DISPLAY_CONTROLLER = 1;
      var OPTION_AUTO_STOP_DISABLED = 2;
      var OPTION_AUTO_STOP_AT_END = 4;
      var ActionType;
      (function (ActionType) {
        ActionType[ActionType["XY"] = 0] = "XY";
        ActionType[ActionType["Size"] = 1] = "Size";
        ActionType[ActionType["Scale"] = 2] = "Scale";
        ActionType[ActionType["Pivot"] = 3] = "Pivot";
        ActionType[ActionType["Alpha"] = 4] = "Alpha";
        ActionType[ActionType["Rotation"] = 5] = "Rotation";
        ActionType[ActionType["Color"] = 6] = "Color";
        ActionType[ActionType["Animation"] = 7] = "Animation";
        ActionType[ActionType["Visible"] = 8] = "Visible";
        ActionType[ActionType["Sound"] = 9] = "Sound";
        ActionType[ActionType["Transition"] = 10] = "Transition";
        ActionType[ActionType["Shake"] = 11] = "Shake";
        ActionType[ActionType["ColorFilter"] = 12] = "ColorFilter";
        ActionType[ActionType["Skew"] = 13] = "Skew";
        ActionType[ActionType["Text"] = 14] = "Text";
        ActionType[ActionType["Icon"] = 15] = "Icon";
        ActionType[ActionType["Unknown"] = 16] = "Unknown";
      })(ActionType || (ActionType = {}));
      var Item = function Item(type) {
        this.type = type;
        this.value = {};
        this.displayLockToken = 0;
      };
      var TweenConfig = function TweenConfig() {
        this.easeType = EaseType.QuadOut;
        this.startValue = {
          b1: true,
          b2: true
        };
        this.endValue = {
          b1: true,
          b2: true
        };
      };
      var GComponent = exports('GComponent', /*#__PURE__*/function (_GObject6) {
        _inheritsLoose(GComponent, _GObject6);
        function GComponent() {
          var _this18;
          _this18 = _GObject6.call(this) || this;
          _this18._sortingChildCount = 0;
          _this18._invertedMask = false;
          _this18._childrenRenderOrder = ChildrenRenderOrder.Ascent;
          _this18._apexIndex = 0;
          _this18._node.name = "GComponent";
          _this18._children = new Array();
          _this18._controllers = new Array();
          _this18._transitions = new Array();
          _this18._margin = new Margin();
          _this18._alignOffset = new Vec2();
          _this18._container = new Node("Container");
          _this18._container.layer = UIConfig.defaultUILayer;
          _this18._containerUITrans = _this18._container.addComponent(UITransform);
          _this18._containerUITrans.setAnchorPoint(0, 1);
          _this18._node.addChild(_this18._container);
          return _this18;
        }
        var _proto47 = GComponent.prototype;
        _proto47.dispose = function dispose() {
          var i;
          var cnt;
          cnt = this._transitions.length;
          for (i = 0; i < cnt; ++i) {
            var trans = this._transitions[i];
            trans.dispose();
          }
          cnt = this._controllers.length;
          for (i = 0; i < cnt; ++i) {
            var cc = this._controllers[i];
            cc.dispose();
          }
          if (this._scrollPane) this._scrollPane.destroy();
          cnt = this._children.length;
          for (i = cnt - 1; i >= 0; --i) {
            var obj = this._children[i];
            obj._parent = null; //avoid removeFromParent call
            obj.dispose();
          }
          this._boundsChanged = false;
          _GObject6.prototype.dispose.call(this);
        };
        _proto47.addChild = function addChild(child) {
          this.addChildAt(child, this._children.length);
          return child;
        };
        _proto47.addChildAt = function addChildAt(child, index) {
          if (!child) throw new Error("child is null");
          var numChildren = this._children.length;
          if (index >= 0 && index <= numChildren) {
            if (child.parent == this) {
              this.setChildIndex(child, index);
            } else {
              child.removeFromParent();
              child._parent = this;
              var cnt = this._children.length;
              if (child.sortingOrder != 0) {
                this._sortingChildCount++;
                index = this.getInsertPosForSortingChild(child);
              } else if (this._sortingChildCount > 0) {
                if (index > cnt - this._sortingChildCount) index = cnt - this._sortingChildCount;
              }
              if (index == cnt) this._children.push(child);else this._children.splice(index, 0, child);
              this.onChildAdd(child, index);
              this.setBoundsChangedFlag();
            }
            return child;
          } else {
            throw new Error("Invalid child index");
          }
        };
        _proto47.getInsertPosForSortingChild = function getInsertPosForSortingChild(target) {
          var cnt = this._children.length;
          var i = 0;
          for (i = 0; i < cnt; i++) {
            var child = this._children[i];
            if (child == target) continue;
            if (target.sortingOrder < child.sortingOrder) break;
          }
          return i;
        };
        _proto47.removeChild = function removeChild(child, dispose) {
          var childIndex = this._children.indexOf(child);
          if (childIndex != -1) {
            this.removeChildAt(childIndex, dispose);
          }
          return child;
        };
        _proto47.removeChildAt = function removeChildAt(index, dispose) {
          if (index >= 0 && index < this.numChildren) {
            var child = this._children[index];
            child._parent = null;
            if (child.sortingOrder != 0) this._sortingChildCount--;
            this._children.splice(index, 1);
            child.group = null;
            this._container.removeChild(child.node);
            if (this._childrenRenderOrder == ChildrenRenderOrder.Arch) this._partner.callLater(this.buildNativeDisplayList);
            if (dispose) child.dispose();else child.node.parent = null;
            this.setBoundsChangedFlag();
            return child;
          } else {
            throw new Error("Invalid child index");
          }
        };
        _proto47.removeChildren = function removeChildren(beginIndex, endIndex, dispose) {
          if (beginIndex == undefined) beginIndex = 0;
          if (endIndex == undefined) endIndex = -1;
          if (endIndex < 0 || endIndex >= this.numChildren) endIndex = this.numChildren - 1;
          for (var i = beginIndex; i <= endIndex; ++i) this.removeChildAt(beginIndex, dispose);
        };
        _proto47.getChildAt = function getChildAt(index, classType) {
          if (index >= 0 && index < this.numChildren) return this._children[index];else throw new Error("Invalid child index");
        };
        _proto47.getChild = function getChild(name, classType) {
          var cnt = this._children.length;
          for (var i = 0; i < cnt; ++i) {
            if (this._children[i].name == name) return this._children[i];
          }
          return null;
        };
        _proto47.getChildByPath = function getChildByPath(path, classType) {
          var arr = path.split(".");
          var cnt = arr.length;
          var gcom = this;
          var obj;
          for (var i = 0; i < cnt; ++i) {
            obj = gcom.getChild(arr[i]);
            if (!obj) break;
            if (i != cnt - 1) {
              if (!(obj instanceof GComponent)) {
                obj = null;
                break;
              } else gcom = obj;
            }
          }
          return obj;
        };
        _proto47.getVisibleChild = function getVisibleChild(name) {
          var cnt = this._children.length;
          for (var i = 0; i < cnt; ++i) {
            var child = this._children[i];
            if (child._finalVisible && child.name == name) return child;
          }
          return null;
        };
        _proto47.getChildInGroup = function getChildInGroup(name, group) {
          var cnt = this._children.length;
          for (var i = 0; i < cnt; ++i) {
            var child = this._children[i];
            if (child.group == group && child.name == name) return child;
          }
          return null;
        };
        _proto47.getChildById = function getChildById(id) {
          var cnt = this._children.length;
          for (var i = 0; i < cnt; ++i) {
            if (this._children[i]._id == id) return this._children[i];
          }
          return null;
        };
        _proto47.getChildIndex = function getChildIndex(child) {
          return this._children.indexOf(child);
        };
        _proto47.setChildIndex = function setChildIndex(child, index) {
          var oldIndex = this._children.indexOf(child);
          if (oldIndex == -1) throw new Error("Not a child of this container");
          if (child.sortingOrder != 0)
            //no effect
            return;
          var cnt = this._children.length;
          if (this._sortingChildCount > 0) {
            if (index > cnt - this._sortingChildCount - 1) index = cnt - this._sortingChildCount - 1;
          }
          this._setChildIndex(child, oldIndex, index);
        };
        _proto47.setChildIndexBefore = function setChildIndexBefore(child, index) {
          var oldIndex = this._children.indexOf(child);
          if (oldIndex == -1) throw new Error("Not a child of this container");
          if (child.sortingOrder != 0)
            //no effect
            return oldIndex;
          var cnt = this._children.length;
          if (this._sortingChildCount > 0) {
            if (index > cnt - this._sortingChildCount - 1) index = cnt - this._sortingChildCount - 1;
          }
          if (oldIndex < index) return this._setChildIndex(child, oldIndex, index - 1);else return this._setChildIndex(child, oldIndex, index);
        };
        _proto47._setChildIndex = function _setChildIndex(child, oldIndex, index) {
          var cnt = this._children.length;
          if (index > cnt) index = cnt;
          if (oldIndex == index) return oldIndex;
          this._children.splice(oldIndex, 1);
          this._children.splice(index, 0, child);
          if (this._childrenRenderOrder == ChildrenRenderOrder.Ascent) child.node.setSiblingIndex(index);else if (this._childrenRenderOrder == ChildrenRenderOrder.Descent) child.node.setSiblingIndex(cnt - index);else this._partner.callLater(this.buildNativeDisplayList);
          this.setBoundsChangedFlag();
          return index;
        };
        _proto47.swapChildren = function swapChildren(child1, child2) {
          var index1 = this._children.indexOf(child1);
          var index2 = this._children.indexOf(child2);
          if (index1 == -1 || index2 == -1) throw new Error("Not a child of this container");
          this.swapChildrenAt(index1, index2);
        };
        _proto47.swapChildrenAt = function swapChildrenAt(index1, index2) {
          var child1 = this._children[index1];
          var child2 = this._children[index2];
          this.setChildIndex(child1, index2);
          this.setChildIndex(child2, index1);
        };
        _proto47.isAncestorOf = function isAncestorOf(child) {
          if (child == null) return false;
          var p = child.parent;
          while (p) {
            if (p == this) return true;
            p = p.parent;
          }
          return false;
        };
        _proto47.addController = function addController(controller) {
          this._controllers.push(controller);
          controller.parent = this;
          this.applyController(controller);
        };
        _proto47.getControllerAt = function getControllerAt(index) {
          return this._controllers[index];
        };
        _proto47.getController = function getController(name) {
          var cnt = this._controllers.length;
          for (var i = 0; i < cnt; ++i) {
            var c = this._controllers[i];
            if (c.name == name) return c;
          }
          return null;
        };
        _proto47.removeController = function removeController(c) {
          var index = this._controllers.indexOf(c);
          if (index == -1) throw new Error("controller not exists");
          c.parent = null;
          this._controllers.splice(index, 1);
          var length = this._children.length;
          for (var i = 0; i < length; i++) {
            var child = this._children[i];
            child.handleControllerChanged(c);
          }
        };
        _proto47.onChildAdd = function onChildAdd(child, index) {
          child.node.parent = this._container;
          child.node.active = child._finalVisible;
          if (this._buildingDisplayList) return;
          var cnt = this._children.length;
          if (this._childrenRenderOrder == ChildrenRenderOrder.Ascent) child.node.setSiblingIndex(index);else if (this._childrenRenderOrder == ChildrenRenderOrder.Descent) child.node.setSiblingIndex(cnt - index);else this._partner.callLater(this.buildNativeDisplayList);
        };
        _proto47.buildNativeDisplayList = function buildNativeDisplayList(dt) {
          if (!isNaN(dt)) {
            var _t = GObject.cast(this.node);
            _t.buildNativeDisplayList();
            return;
          }
          var cnt = this._children.length;
          if (cnt == 0) return;
          var child;
          switch (this._childrenRenderOrder) {
            case ChildrenRenderOrder.Ascent:
              {
                var j = 0;
                for (var i = 0; i < cnt; i++) {
                  child = this._children[i];
                  child.node.setSiblingIndex(j++);
                }
              }
              break;
            case ChildrenRenderOrder.Descent:
              {
                var _j = 0;
                for (var _i3 = cnt - 1; _i3 >= 0; _i3--) {
                  child = this._children[_i3];
                  child.node.setSiblingIndex(_j++);
                }
              }
              break;
            case ChildrenRenderOrder.Arch:
              {
                var _j2 = 0;
                for (var _i4 = 0; _i4 < this._apexIndex; _i4++) {
                  child = this._children[_i4];
                  child.node.setSiblingIndex(_j2++);
                }
                for (var _i5 = cnt - 1; _i5 >= this._apexIndex; _i5--) {
                  child = this._children[_i5];
                  child.node.setSiblingIndex(_j2++);
                }
              }
              break;
          }
        };
        _proto47.applyController = function applyController(c) {
          this._applyingController = c;
          var child;
          var length = this._children.length;
          for (var i = 0; i < length; i++) {
            child = this._children[i];
            child.handleControllerChanged(c);
          }
          this._applyingController = null;
          c.runActions();
        };
        _proto47.applyAllControllers = function applyAllControllers() {
          var cnt = this._controllers.length;
          for (var i = 0; i < cnt; ++i) {
            this.applyController(this._controllers[i]);
          }
        };
        _proto47.adjustRadioGroupDepth = function adjustRadioGroupDepth(obj, c) {
          var cnt = this._children.length;
          var i;
          var child;
          var myIndex = -1,
            maxIndex = -1;
          for (i = 0; i < cnt; i++) {
            child = this._children[i];
            if (child == obj) {
              myIndex = i;
            } else if ("relatedController" in child /*is button*/ && child.relatedController == c) {
              if (i > maxIndex) maxIndex = i;
            }
          }
          if (myIndex < maxIndex) {
            if (this._applyingController) this._children[maxIndex].handleControllerChanged(this._applyingController);
            this.swapChildrenAt(myIndex, maxIndex);
          }
        };
        _proto47.getTransitionAt = function getTransitionAt(index) {
          return this._transitions[index];
        };
        _proto47.getTransition = function getTransition(transName) {
          var cnt = this._transitions.length;
          for (var i = 0; i < cnt; ++i) {
            var trans = this._transitions[i];
            if (trans.name == transName) return trans;
          }
          return null;
        };
        _proto47.isChildInView = function isChildInView(child) {
          if (this._rectMask) {
            return child.x + child.width >= 0 && child.x <= this.width && child.y + child.height >= 0 && child.y <= this.height;
          } else if (this._scrollPane) {
            return this._scrollPane.isChildInView(child);
          } else return true;
        };
        _proto47.getFirstChildInView = function getFirstChildInView() {
          var cnt = this._children.length;
          for (var i = 0; i < cnt; ++i) {
            var child = this._children[i];
            if (this.isChildInView(child)) return i;
          }
          return -1;
        };
        _proto47.setMask = function setMask(value, inverted) {
          if (this._maskContent) {
            this._maskContent.node.off(Node.EventType.TRANSFORM_CHANGED, this.onMaskContentChanged, this);
            this._maskContent.node.off(Node.EventType.SIZE_CHANGED, this.onMaskContentChanged, this);
            this._maskContent.node.off(Node.EventType.ANCHOR_CHANGED, this.onMaskContentChanged, this);
            this._maskContent.visible = true;
          }
          this._maskContent = value;
          if (this._maskContent) {
            if (!(value instanceof GImage) && !(value instanceof GGraph)) return;
            if (!this._customMask) {
              var maskNode = new Node("Mask");
              maskNode.layer = UIConfig.defaultUILayer;
              maskNode.addComponent(UITransform);
              maskNode.parent = this._node;
              if (this._scrollPane) this._container.parent.parent = maskNode;else this._container.parent = maskNode;
              this._customMask = maskNode.addComponent(Mask);
            }
            value.visible = false;
            value.node.on(Node.EventType.TRANSFORM_CHANGED, this.onMaskContentChanged, this);
            value.node.on(Node.EventType.SIZE_CHANGED, this.onMaskContentChanged, this);
            value.node.on(Node.EventType.ANCHOR_CHANGED, this.onMaskContentChanged, this);
            this._invertedMask = inverted;
            if (this._node.activeInHierarchy) this.onMaskReady();else this.on(Event.DISPLAY, this.onMaskReady, this);
            this.onMaskContentChanged();
            if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(0, 0);
          } else if (this._customMask) {
            if (this._scrollPane) this._container.parent.parent = this._node;else this._container.parent = this._node;
            this._customMask.node.destroy();
            this._customMask = null;
            if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX, this._pivotCorrectY);
          }
        };
        _proto47.onMaskReady = function onMaskReady() {
          this.off(Event.DISPLAY, this.onMaskReady, this);
          if (this._maskContent instanceof GImage) {
            this._customMask.type = Mask.Type.SPRITE_STENCIL;
            this._customMask.alphaThreshold = 0.0001;
            this._customMask.spriteFrame = this._maskContent._content.spriteFrame;
          } else if (this._maskContent instanceof GGraph) {
            if (this._maskContent.type == 2) this._customMask.type = Mask.Type.GRAPHICS_ELLIPSE;else this._customMask.type = Mask.Type.GRAPHICS_RECT;
          }
          this._customMask.inverted = this._invertedMask;
        };
        _proto47.onMaskContentChanged = function onMaskContentChanged() {
          var maskNode = this._customMask.node;
          var maskUITrans = maskNode.getComponent(UITransform);
          var contentNode = this._maskContent.node;
          var contentUITrans = this._maskContent._uiTrans;
          var w = this._maskContent.width * this._maskContent.scaleX;
          var h = this._maskContent.height * this._maskContent.scaleY;
          maskUITrans.setContentSize(w, h);
          var left = contentNode.position.x - contentUITrans.anchorX * w;
          var top = contentNode.position.y - contentUITrans.anchorY * h;
          maskUITrans.setAnchorPoint(-left / maskUITrans.width, -top / maskUITrans.height);
          maskNode.setPosition(this._pivotCorrectX, this._pivotCorrectY);
        };
        _proto47.setupScroll = function setupScroll(buffer) {
          this._scrollPane = this._node.addComponent(ScrollPane);
          this._scrollPane.setup(buffer);
        };
        _proto47.setupOverflow = function setupOverflow(overflow) {
          if (overflow == OverflowType.Hidden) this._rectMask = this._container.addComponent(Mask);
          if (!this._margin.isNone) this.handleSizeChanged();
        };
        _proto47.handleAnchorChanged = function handleAnchorChanged() {
          _GObject6.prototype.handleAnchorChanged.call(this);
          if (this._customMask) this._customMask.node.setPosition(this._pivotCorrectX, this._pivotCorrectY);else if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX + this._alignOffset.x, this._pivotCorrectY - this._alignOffset.y);
        };
        _proto47.handleSizeChanged = function handleSizeChanged() {
          _GObject6.prototype.handleSizeChanged.call(this);
          if (this._customMask) this._customMask.node.setPosition(this._pivotCorrectX, this._pivotCorrectY);else if (!this._scrollPane) this._container.setPosition(this._pivotCorrectX, this._pivotCorrectY);
          if (this._scrollPane) this._scrollPane.onOwnerSizeChanged();else this._containerUITrans.setContentSize(this.viewWidth, this.viewHeight);
        };
        _proto47.handleGrayedChanged = function handleGrayedChanged() {
          var c = this.getController("grayed");
          if (c) {
            c.selectedIndex = this.grayed ? 1 : 0;
            return;
          }
          var v = this.grayed;
          var cnt = this._children.length;
          for (var i = 0; i < cnt; ++i) {
            this._children[i].grayed = v;
          }
        };
        _proto47.handleControllerChanged = function handleControllerChanged(c) {
          _GObject6.prototype.handleControllerChanged.call(this, c);
          if (this._scrollPane) this._scrollPane.handleControllerChanged(c);
        };
        _proto47._hitTest = function _hitTest(pt, globalPt) {
          if (this._customMask) {
            s_vec2$2.set(globalPt);
            s_vec2$2.y = UIContentScaler.rootSize.height - globalPt.y;
            var b = this._customMask.isHit(s_vec2$2) || false;
            if (!b) return null;
          }
          if (this.hitArea) {
            if (!this.hitArea.hitTest(pt, globalPt)) return null;
          } else if (this._rectMask) {
            s_vec2$2.set(pt);
            s_vec2$2.x += this._container.position.x;
            s_vec2$2.y += this._container.position.y;
            var clippingSize = this._containerUITrans.contentSize;
            if (s_vec2$2.x < 0 || s_vec2$2.y < 0 || s_vec2$2.x >= clippingSize.width || s_vec2$2.y >= clippingSize.height) return null;
          }
          if (this._scrollPane) {
            var _target = this._scrollPane.hitTest(pt, globalPt);
            if (!_target) return null;
            if (_target != this) return _target;
          }
          var target = null;
          var cnt = this._children.length;
          for (var i = cnt - 1; i >= 0; i--) {
            var child = this._children[i];
            if (this._maskContent == child || child._touchDisabled) continue;
            target = child.hitTest(globalPt);
            if (target) break;
          }
          if (!target && this._opaque && (this.hitArea || pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height)) target = this;
          return target;
        };
        _proto47.setBoundsChangedFlag = function setBoundsChangedFlag() {
          if (!this._scrollPane && !this._trackBounds) return;
          if (!this._boundsChanged) {
            this._boundsChanged = true;
            this._partner.callLater(this.refresh);
          }
        };
        _proto47.refresh = function refresh(dt) {
          if (!isNaN(dt)) {
            var _t = GObject.cast(this.node);
            _t.refresh();
            return;
          }
          if (this._boundsChanged) {
            var len = this._children.length;
            if (len > 0) {
              for (var i = 0; i < len; i++) {
                var child = this._children[i];
                child.ensureSizeCorrect();
              }
            }
            this.updateBounds();
          }
        };
        _proto47.ensureBoundsCorrect = function ensureBoundsCorrect() {
          var len = this._children.length;
          if (len > 0) {
            for (var i = 0; i < len; i++) {
              var child = this._children[i];
              child.ensureSizeCorrect();
            }
          }
          if (this._boundsChanged) this.updateBounds();
        };
        _proto47.updateBounds = function updateBounds() {
          var ax = 0,
            ay = 0,
            aw = 0,
            ah = 0;
          var len = this._children.length;
          if (len > 0) {
            ax = Number.POSITIVE_INFINITY, ay = Number.POSITIVE_INFINITY;
            var ar = Number.NEGATIVE_INFINITY,
              ab = Number.NEGATIVE_INFINITY;
            var tmp = 0;
            var i = 0;
            for (var i = 0; i < len; i++) {
              var child = this._children[i];
              tmp = child.x;
              if (tmp < ax) ax = tmp;
              tmp = child.y;
              if (tmp < ay) ay = tmp;
              tmp = child.x + child.actualWidth;
              if (tmp > ar) ar = tmp;
              tmp = child.y + child.actualHeight;
              if (tmp > ab) ab = tmp;
            }
            aw = ar - ax;
            ah = ab - ay;
          }
          this.setBounds(ax, ay, aw, ah);
        };
        _proto47.setBounds = function setBounds(ax, ay, aw, ah) {
          if (ah === void 0) {
            ah = 0;
          }
          this._boundsChanged = false;
          if (this._scrollPane) this._scrollPane.setContentSize(Math.round(ax + aw), Math.round(ay + ah));
        };
        _proto47.getSnappingPosition = function getSnappingPosition(xValue, yValue, resultPoint) {
          if (!resultPoint) resultPoint = new Vec2();
          var cnt = this._children.length;
          if (cnt == 0) {
            resultPoint.x = 0;
            resultPoint.y = 0;
            return resultPoint;
          }
          this.ensureBoundsCorrect();
          var obj = null;
          var prev = null;
          var i = 0;
          if (yValue != 0) {
            for (; i < cnt; i++) {
              obj = this._children[i];
              if (yValue < obj.y) {
                if (i == 0) {
                  yValue = 0;
                  break;
                } else {
                  prev = this._children[i - 1];
                  if (yValue < prev.y + prev.actualHeight / 2)
                    //top half part
                    yValue = prev.y;else
                    //bottom half part
                    yValue = obj.y;
                  break;
                }
              }
            }
            if (i == cnt) yValue = obj.y;
          }
          if (xValue != 0) {
            if (i > 0) i--;
            for (; i < cnt; i++) {
              obj = this._children[i];
              if (xValue < obj.x) {
                if (i == 0) {
                  xValue = 0;
                  break;
                } else {
                  prev = this._children[i - 1];
                  if (xValue < prev.x + prev.actualWidth / 2)
                    //top half part
                    xValue = prev.x;else
                    //bottom half part
                    xValue = obj.x;
                  break;
                }
              }
            }
            if (i == cnt) xValue = obj.x;
          }
          resultPoint.x = xValue;
          resultPoint.y = yValue;
          return resultPoint;
        };
        _proto47.childSortingOrderChanged = function childSortingOrderChanged(child, oldValue, newValue) {
          if (newValue === void 0) {
            newValue = 0;
          }
          if (newValue == 0) {
            this._sortingChildCount--;
            this.setChildIndex(child, this._children.length);
          } else {
            if (oldValue == 0) this._sortingChildCount++;
            var oldIndex = this._children.indexOf(child);
            var index = this.getInsertPosForSortingChild(child);
            if (oldIndex < index) this._setChildIndex(child, oldIndex, index - 1);else this._setChildIndex(child, oldIndex, index);
          }
        };
        _proto47.constructFromResource = function constructFromResource() {
          this.constructFromResource2(null, 0);
        };
        _proto47.constructFromResource2 = function constructFromResource2(objectPool, poolIndex) {
          var contentItem = this.packageItem.getBranch();
          if (!contentItem.decoded) {
            contentItem.decoded = true;
            TranslationHelper.translateComponent(contentItem);
          }
          var i;
          var dataLen;
          var curPos;
          var nextPos;
          var f1;
          var f2;
          var i1;
          var i2;
          var buffer = contentItem.rawData;
          buffer.seek(0, 0);
          this._underConstruct = true;
          this.sourceWidth = buffer.readInt();
          this.sourceHeight = buffer.readInt();
          this.initWidth = this.sourceWidth;
          this.initHeight = this.sourceHeight;
          this.setSize(this.sourceWidth, this.sourceHeight);
          if (buffer.readBool()) {
            this.minWidth = buffer.readInt();
            this.maxWidth = buffer.readInt();
            this.minHeight = buffer.readInt();
            this.maxHeight = buffer.readInt();
          }
          if (buffer.readBool()) {
            f1 = buffer.readFloat();
            f2 = buffer.readFloat();
            this.setPivot(f1, f2, buffer.readBool());
          }
          if (buffer.readBool()) {
            this._margin.top = buffer.readInt();
            this._margin.bottom = buffer.readInt();
            this._margin.left = buffer.readInt();
            this._margin.right = buffer.readInt();
          }
          var overflow = buffer.readByte();
          if (overflow == OverflowType.Scroll) {
            var savedPos = buffer.position;
            buffer.seek(0, 7);
            this.setupScroll(buffer);
            buffer.position = savedPos;
          } else this.setupOverflow(overflow);
          if (buffer.readBool()) buffer.skip(8);
          this._buildingDisplayList = true;
          buffer.seek(0, 1);
          var controllerCount = buffer.readShort();
          for (i = 0; i < controllerCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            var controller = new Controller();
            this._controllers.push(controller);
            controller.parent = this;
            controller.setup(buffer);
            buffer.position = nextPos;
          }
          buffer.seek(0, 2);
          var child;
          var childCount = buffer.readShort();
          for (i = 0; i < childCount; i++) {
            dataLen = buffer.readShort();
            curPos = buffer.position;
            if (objectPool) child = objectPool[poolIndex + i];else {
              buffer.seek(curPos, 0);
              var type = buffer.readByte();
              var src = buffer.readS();
              var pkgId = buffer.readS();
              var pi = null;
              if (src != null) {
                var pkg;
                if (pkgId != null) pkg = UIPackage.getById(pkgId);else pkg = contentItem.owner;
                pi = pkg ? pkg.getItemById(src) : null;
              }
              if (pi) {
                child = Decls.UIObjectFactory.newObject(pi);
                child.constructFromResource();
              } else child = Decls.UIObjectFactory.newObject(type);
            }
            child._underConstruct = true;
            child.setup_beforeAdd(buffer, curPos);
            child._parent = this;
            child.node.parent = this._container;
            this._children.push(child);
            buffer.position = curPos + dataLen;
          }
          buffer.seek(0, 3);
          this.relations.setup(buffer, true);
          buffer.seek(0, 2);
          buffer.skip(2);
          for (i = 0; i < childCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            buffer.seek(buffer.position, 3);
            this._children[i].relations.setup(buffer, false);
            buffer.position = nextPos;
          }
          buffer.seek(0, 2);
          buffer.skip(2);
          for (i = 0; i < childCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            child = this._children[i];
            child.setup_afterAdd(buffer, buffer.position);
            child._underConstruct = false;
            buffer.position = nextPos;
          }
          buffer.seek(0, 4);
          buffer.skip(2); //customData
          this.opaque = buffer.readBool();
          var maskId = buffer.readShort();
          if (maskId != -1) {
            this.setMask(this.getChildAt(maskId), buffer.readBool());
          }
          var hitTestId = buffer.readS();
          i1 = buffer.readInt();
          i2 = buffer.readInt();
          if (hitTestId != null) {
            pi = contentItem.owner.getItemById(hitTestId);
            if (pi && pi.hitTestData) this.hitArea = new PixelHitTest(pi.hitTestData, i1, i2);
          } else if (i1 != 0 && i2 != -1) {
            this.hitArea = new ChildHitArea(this.getChildAt(i2));
          }
          buffer.seek(0, 5);
          var transitionCount = buffer.readShort();
          for (i = 0; i < transitionCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            var trans = new Transition(this);
            trans.setup(buffer);
            this._transitions.push(trans);
            buffer.position = nextPos;
          }
          this.applyAllControllers();
          this._buildingDisplayList = false;
          this._underConstruct = false;
          this.buildNativeDisplayList();
          this.setBoundsChangedFlag();
          if (contentItem.objectType != ObjectType.Component) this.constructExtension(buffer);
          this.onConstruct();
        };
        _proto47.constructExtension = function constructExtension(buffer) {};
        _proto47.onConstruct = function onConstruct() {};
        _proto47.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GObject6.prototype.setup_afterAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 4);
          var pageController = buffer.readShort();
          if (pageController != -1 && this._scrollPane) this._scrollPane.pageController = this._parent.getControllerAt(pageController);
          var cnt = buffer.readShort();
          for (var i = 0; i < cnt; i++) {
            var cc = this.getController(buffer.readS());
            var pageId = buffer.readS();
            if (cc) cc.selectedPageId = pageId;
          }
          if (buffer.version >= 2) {
            cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
              var target = buffer.readS();
              var propertyId = buffer.readShort();
              var value = buffer.readS();
              var obj = this.getChildByPath(target);
              if (obj) obj.setProp(propertyId, value);
            }
          }
        };
        _proto47.onEnable = function onEnable() {
          var cnt = this._transitions.length;
          for (var i = 0; i < cnt; ++i) this._transitions[i].onEnable();
        };
        _proto47.onDisable = function onDisable() {
          var cnt = this._transitions.length;
          for (var i = 0; i < cnt; ++i) this._transitions[i].onDisable();
        };
        _createClass(GComponent, [{
          key: "displayListContainer",
          get: function get() {
            return this._container;
          }
        }, {
          key: "numChildren",
          get: function get() {
            return this._children.length;
          }
        }, {
          key: "controllers",
          get: function get() {
            return this._controllers;
          }
        }, {
          key: "scrollPane",
          get: function get() {
            return this._scrollPane;
          }
        }, {
          key: "opaque",
          get: function get() {
            return this._opaque;
          },
          set: function set(value) {
            this._opaque = value;
          }
        }, {
          key: "margin",
          get: function get() {
            return this._margin;
          },
          set: function set(value) {
            this._margin.copy(value);
            this.handleSizeChanged();
          }
        }, {
          key: "childrenRenderOrder",
          get: function get() {
            return this._childrenRenderOrder;
          },
          set: function set(value) {
            if (this._childrenRenderOrder != value) {
              this._childrenRenderOrder = value;
              this.buildNativeDisplayList();
            }
          }
        }, {
          key: "apexIndex",
          get: function get() {
            return this._apexIndex;
          },
          set: function set(value) {
            if (this._apexIndex != value) {
              this._apexIndex = value;
              if (this._childrenRenderOrder == ChildrenRenderOrder.Arch) this.buildNativeDisplayList();
            }
          }
        }, {
          key: "mask",
          get: function get() {
            return this._maskContent;
          },
          set: function set(value) {
            this.setMask(value, false);
          }
        }, {
          key: "_pivotCorrectX",
          get: function get() {
            return -this.pivotX * this._width + this._margin.left;
          }
        }, {
          key: "_pivotCorrectY",
          get: function get() {
            return this.pivotY * this._height - this._margin.top;
          }
        }, {
          key: "baseUserData",
          get: function get() {
            var buffer = this.packageItem.rawData;
            buffer.seek(0, 4);
            return buffer.readS();
          }
        }, {
          key: "viewWidth",
          get: function get() {
            if (this._scrollPane) return this._scrollPane.viewWidth;else return this.width - this._margin.left - this._margin.right;
          },
          set: function set(value) {
            if (this._scrollPane) this._scrollPane.viewWidth = value;else this.width = value + this._margin.left + this._margin.right;
          }
        }, {
          key: "viewHeight",
          get: function get() {
            if (this._scrollPane) return this._scrollPane.viewHeight;else return this.height - this._margin.top - this._margin.bottom;
          },
          set: function set(value) {
            if (this._scrollPane) this._scrollPane.viewHeight = value;else this.height = value + this._margin.top + this._margin.bottom;
          }
        }]);
        return GComponent;
      }(GObject));
      var s_vec2$2 = new Vec2();
      var Window = exports('Window', /*#__PURE__*/function (_GComponent) {
        _inheritsLoose(Window, _GComponent);
        function Window() {
          var _this19;
          _this19 = _GComponent.call(this) || this;
          _this19._requestingCmd = 0;
          _this19._node.name = "Window";
          _this19._uiSources = new Array();
          _this19.bringToFontOnClick = UIConfig.bringWindowToFrontOnClick;
          _this19._node.on(Event.TOUCH_BEGIN, _this19.onTouchBegin_1, _assertThisInitialized(_this19), true);
          return _this19;
        }
        var _proto48 = Window.prototype;
        _proto48.addUISource = function addUISource(source) {
          this._uiSources.push(source);
        };
        _proto48.show = function show(root) {
          root.showWindow(this);
        };
        _proto48.showOn = function showOn(root) {
          root.showWindow(this);
        };
        _proto48.hide = function hide() {
          if (this.isShowing) this.doHideAnimation();
        };
        _proto48.hideImmediately = function hideImmediately() {
          var groot = GRoot.getInstance(this.parent);
          if (!groot) return;
          groot.hideWindowImmediately(this);
        };
        _proto48.centerOn = function centerOn(r, restraint) {
          this.setPosition(Math.round((r.width - this.width) / 2), Math.round((r.height - this.height) / 2));
          if (restraint) {
            this.addRelation(r, RelationType.Center_Center);
            this.addRelation(r, RelationType.Middle_Middle);
          }
        };
        _proto48.toggleStatus = function toggleStatus() {
          var groot = GRoot.getInstance(this.parent);
          if (!groot) return;
          if (this.isTop) this.hide();else this.show(groot);
        };
        _proto48.bringToFront = function bringToFront() {
          var groot = GRoot.getInstance(this.parent);
          if (!groot) return;
          groot.bringToFront(this);
        };
        _proto48.showModalWait = function showModalWait(requestingCmd) {
          if (requestingCmd != null) this._requestingCmd = requestingCmd;
          if (UIConfig.windowModalWaiting) {
            if (!this._modalWaitPane) this._modalWaitPane = UIPackage.createObjectFromURL(UIConfig.windowModalWaiting);
            this.layoutModalWaitPane();
            this.addChild(this._modalWaitPane);
          }
        };
        _proto48.layoutModalWaitPane = function layoutModalWaitPane() {
          if (this._contentArea) {
            var pt = this._frame.localToGlobal();
            pt = this.globalToLocal(pt.x, pt.y, pt);
            this._modalWaitPane.setPosition(pt.x + this._contentArea.x, pt.y + this._contentArea.y);
            this._modalWaitPane.setSize(this._contentArea.width, this._contentArea.height);
          } else this._modalWaitPane.setSize(this.width, this.height);
        };
        _proto48.closeModalWait = function closeModalWait(requestingCmd) {
          if (requestingCmd != null) {
            if (this._requestingCmd != requestingCmd) return false;
          }
          this._requestingCmd = 0;
          if (this._modalWaitPane && this._modalWaitPane.parent) this.removeChild(this._modalWaitPane);
          return true;
        };
        _proto48.init = function init() {
          if (this._inited || this._loading) return;
          if (this._uiSources.length > 0) {
            this._loading = false;
            var cnt = this._uiSources.length;
            for (var i = 0; i < cnt; i++) {
              var lib = this._uiSources[i];
              if (!lib.loaded) {
                lib.load(this.__uiLoadComplete, this);
                this._loading = true;
              }
            }
            if (!this._loading) this._init();
          } else this._init();
        };
        _proto48.onInit = function onInit() {};
        _proto48.onShown = function onShown() {};
        _proto48.onHide = function onHide() {};
        _proto48.doShowAnimation = function doShowAnimation() {
          this.onShown();
        };
        _proto48.doHideAnimation = function doHideAnimation() {
          this.hideImmediately();
        };
        _proto48.__uiLoadComplete = function __uiLoadComplete() {
          var cnt = this._uiSources.length;
          for (var i = 0; i < cnt; i++) {
            var lib = this._uiSources[i];
            if (!lib.loaded) return;
          }
          this._loading = false;
          this._init();
        };
        _proto48._init = function _init() {
          this._inited = true;
          this.onInit();
          if (this.isShowing) this.doShowAnimation();
        };
        _proto48.dispose = function dispose() {
          if (this.parent) this.hideImmediately();
          _GComponent.prototype.dispose.call(this);
        };
        _proto48.closeEventHandler = function closeEventHandler() {
          this.hide();
        };
        _proto48.onEnable = function onEnable() {
          _GComponent.prototype.onEnable.call(this);
          if (!this._inited) this.init();else this.doShowAnimation();
        };
        _proto48.onDisable = function onDisable() {
          _GComponent.prototype.onDisable.call(this);
          this.closeModalWait();
          this.onHide();
        };
        _proto48.onTouchBegin_1 = function onTouchBegin_1(evt) {
          if (this.isShowing && this.bringToFontOnClick) this.bringToFront();
        };
        _proto48.onDragStart_1 = function onDragStart_1(evt) {
          var original = GObject.cast(evt.currentTarget);
          original.stopDrag();
          this.startDrag(evt.touchId);
        };
        _createClass(Window, [{
          key: "contentPane",
          get: function get() {
            return this._contentPane;
          },
          set: function set(val) {
            if (this._contentPane != val) {
              if (this._contentPane) this.removeChild(this._contentPane);
              this._contentPane = val;
              if (this._contentPane) {
                this.addChild(this._contentPane);
                this.setSize(this._contentPane.width, this._contentPane.height);
                this._contentPane.addRelation(this, RelationType.Size);
                this._frame = this._contentPane.getChild("frame");
                if (this._frame) {
                  this.closeButton = this._frame.getChild("closeButton");
                  this.dragArea = this._frame.getChild("dragArea");
                  this.contentArea = this._frame.getChild("contentArea");
                }
              }
            }
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          }
        }, {
          key: "closeButton",
          get: function get() {
            return this._closeButton;
          },
          set: function set(value) {
            if (this._closeButton) this._closeButton.offClick(this.closeEventHandler, this);
            this._closeButton = value;
            if (this._closeButton) this._closeButton.onClick(this.closeEventHandler, this);
          }
        }, {
          key: "dragArea",
          get: function get() {
            return this._dragArea;
          },
          set: function set(value) {
            if (this._dragArea != value) {
              if (this._dragArea) {
                this._dragArea.draggable = false;
                this._dragArea.off(Event.DRAG_START, this.onDragStart_1, this);
              }
              this._dragArea = value;
              if (this._dragArea) {
                this._dragArea.draggable = true;
                this._dragArea.on(Event.DRAG_START, this.onDragStart_1, this);
              }
            }
          }
        }, {
          key: "contentArea",
          get: function get() {
            return this._contentArea;
          },
          set: function set(value) {
            this._contentArea = value;
          }
        }, {
          key: "isShowing",
          get: function get() {
            return this.parent != null;
          }
        }, {
          key: "isTop",
          get: function get() {
            return this.parent && this.parent.getChildIndex(this) == this.parent.numChildren - 1;
          }
        }, {
          key: "modal",
          get: function get() {
            return this._modal;
          },
          set: function set(val) {
            this._modal = val;
          }
        }, {
          key: "modalWaiting",
          get: function get() {
            return this._modalWaitPane && this._modalWaitPane.parent != null;
          }
        }]);
        return Window;
      }(GComponent));
      var GRoot = exports('GRoot', /*#__PURE__*/function (_GComponent2) {
        _inheritsLoose(GRoot, _GComponent2);
        GRoot.getInstance = function getInstance(target) {
          if (!target) return;
          if (target instanceof GObject) {
            var r = target;
            while (!(r instanceof GRoot)) {
              r = r.findParent();
              if (!r) break;
            }
            if (!r) return;
            return r;
          } else {
            var pn;
            if (Node.isNode(target)) {
              pn = target;
            } else {
              pn = target.node;
            }
            while (pn) {
              var gobj = pn["$gobj"];
              if (gobj) return GRoot.getInstance(gobj);
              pn = pn.parent;
            }
            return;
          }
        } // private static _inst: GRoot;
        // public static get inst(): GRoot {
        //     if (!GRoot._inst)
        //         throw 'Call GRoot.create first!';
        //     return GRoot._inst;
        // }
        // public static create(): GRoot {
        //     GRoot._inst = new GRoot();
        //     director.getScene().getChildByName('Canvas').addChild(GRoot._inst.node);
        //     GRoot._inst.onWinResize();
        //     return GRoot._inst;
        // }
        ;
        function GRoot() {
          var _this20;
          _this20 = _GComponent2.call(this) || this;
          _this20._node.name = "GRoot";
          _this20.opaque = false;
          _this20._volumeScale = 1;
          _this20._popupStack = new Array();
          _this20._justClosedPopups = new Array();
          _this20._modalLayer = new GGraph();
          _this20._modalLayer.setSize(_this20.width, _this20.height);
          _this20._modalLayer.drawRect(0, Color.TRANSPARENT, UIConfig.modalLayerColor);
          _this20._modalLayer.addRelation(_assertThisInitialized(_this20), RelationType.Size);
          _this20._thisOnResized = _this20.onWinResize.bind(_assertThisInitialized(_this20));
          _this20._inputProcessor = _this20.node.addComponent(InputProcessor);
          _this20._inputProcessor._captureCallback = _this20.onTouchBegin_1;
          View.instance.on('design-resolution-changed', _this20.onWinResize, _assertThisInitialized(_this20));
          screen.on('window-resize', _this20.onWinResize, _assertThisInitialized(_this20));
          screen.on('orientation-change', _this20.onWinResize, _assertThisInitialized(_this20));
          screen.on('fullscreen-change', _this20.onWinResize, _assertThisInitialized(_this20));
          {
            View.instance.on('canvas-resize', _this20._thisOnResized);
            window.addEventListener('orientationchange', _this20._thisOnResized);
          }
          return _this20;
        }
        var _proto49 = GRoot.prototype;
        _proto49.onDestroy = function onDestroy() {
          View.instance.off('design-resolution-changed', this.onWinResize, this);
          screen.off('window-resize', this.onWinResize, this);
          screen.off('orientation-change', this.onWinResize, this);
          screen.off('fullscreen-change', this.onWinResize, this);
          {
            View.instance.off('canvas-resize', this._thisOnResized);
            window.removeEventListener('orientationchange', this._thisOnResized);
          } // if (this == GRoot._inst)
          //     GRoot._inst = null;
        };
        _proto49.getTouchPosition = function getTouchPosition(touchId) {
          return this._inputProcessor.getTouchPosition(touchId);
        };
        _proto49.showWindow = function showWindow(win) {
          this.addChild(win);
          win.requestFocus();
          if (win.x > this.width) win.x = this.width - win.width;else if (win.x + win.width < 0) win.x = 0;
          if (win.y > this.height) win.y = this.height - win.height;else if (win.y + win.height < 0) win.y = 0;
          this.adjustModalLayer();
        };
        _proto49.hideWindow = function hideWindow(win) {
          win.hide();
        };
        _proto49.hideWindowImmediately = function hideWindowImmediately(win) {
          if (win.parent == this) this.removeChild(win);
          this.adjustModalLayer();
        };
        _proto49.bringToFront = function bringToFront(win) {
          var cnt = this.numChildren;
          var i;
          if (this._modalLayer.parent && !win.modal) i = this.getChildIndex(this._modalLayer) - 1;else i = cnt - 1;
          for (; i >= 0; i--) {
            var g = this.getChildAt(i);
            if (g == win) return;
            if (g instanceof Window) break;
          }
          if (i >= 0) this.setChildIndex(win, i);
        };
        _proto49.showModalWait = function showModalWait(msg) {
          if (UIConfig.globalModalWaiting != null) {
            if (this._modalWaitPane == null) this._modalWaitPane = UIPackage.createObjectFromURL(UIConfig.globalModalWaiting);
            this._modalWaitPane.setSize(this.width, this.height);
            this._modalWaitPane.addRelation(this, RelationType.Size);
            this.addChild(this._modalWaitPane);
            this._modalWaitPane.text = msg;
          }
        };
        _proto49.closeModalWait = function closeModalWait() {
          if (this._modalWaitPane && this._modalWaitPane.parent) this.removeChild(this._modalWaitPane);
        };
        _proto49.closeAllExceptModals = function closeAllExceptModals() {
          var arr = this._children.slice();
          var cnt = arr.length;
          for (var i = 0; i < cnt; i++) {
            var g = arr[i];
            if (g instanceof Window && !g.modal) g.hide();
          }
        };
        _proto49.closeAllWindows = function closeAllWindows() {
          var arr = this._children.slice();
          var cnt = arr.length;
          for (var i = 0; i < cnt; i++) {
            var g = arr[i];
            if (g instanceof Window) g.hide();
          }
        };
        _proto49.getTopWindow = function getTopWindow() {
          var cnt = this.numChildren;
          for (var i = cnt - 1; i >= 0; i--) {
            var g = this.getChildAt(i);
            if (g instanceof Window) {
              return g;
            }
          }
          return null;
        };
        _proto49.getPopupPosition = function getPopupPosition(popup, target, dir, result) {
          var pos = result || new Vec2();
          var sizeW = 0,
            sizeH = 0;
          if (target) {
            pos = target.localToGlobal();
            this.globalToLocal(pos.x, pos.y, pos);
            var pos2 = target.localToGlobal(target.width, target.height);
            this.globalToLocal(pos2.x, pos2.y, pos2);
            sizeW = pos2.x - pos.x;
            sizeH = pos2.y - pos.y;
          } else {
            pos = this.getTouchPosition();
            if (pos.x == 0 && pos.y == 0) {
              pos = v2(0, 0);
            } else {
              pos = this.globalToLocal(pos.x, pos.y);
            }
          }
          if (pos.x + popup.width > this.width) pos.x = pos.x + sizeW - popup.width;
          pos.y += sizeH;
          if ((dir === undefined || dir === PopupDirection.Auto) && pos.y + popup.height > this.height || dir === false || dir === PopupDirection.Up) {
            pos.y = pos.y - sizeH - popup.height - 1;
            if (pos.y < 0) {
              pos.y = 0;
              pos.x += sizeW / 2;
            }
          }
          return pos;
        };
        _proto49.showPopup = function showPopup(popup, target, dir) {
          if (this._popupStack.length > 0) {
            var k = this._popupStack.indexOf(popup);
            if (k != -1) {
              for (var i = this._popupStack.length - 1; i >= k; i--) this.removeChild(this._popupStack.pop());
            }
          }
          this._popupStack.push(popup);
          if (target) {
            var p = target;
            while (p) {
              if (p.parent == this) {
                if (popup.sortingOrder < p.sortingOrder) {
                  popup.sortingOrder = p.sortingOrder;
                }
                break;
              }
              p = p.parent;
            }
          }
          this.addChild(popup);
          this.adjustModalLayer();
          var pt = this.getPopupPosition(popup, target, dir);
          popup.setPosition(pt.x, pt.y);
        };
        _proto49.togglePopup = function togglePopup(popup, target, dir) {
          if (this._justClosedPopups.indexOf(popup) != -1) return;
          this.showPopup(popup, target, dir);
        };
        _proto49.hidePopup = function hidePopup(popup) {
          if (popup) {
            var k = this._popupStack.indexOf(popup);
            if (k != -1) {
              for (var i = this._popupStack.length - 1; i >= k; i--) this.closePopup(this._popupStack.pop());
            }
          } else {
            var cnt = this._popupStack.length;
            for (i = cnt - 1; i >= 0; i--) this.closePopup(this._popupStack[i]);
            this._popupStack.length = 0;
          }
        };
        _proto49.closePopup = function closePopup(target) {
          if (target.parent) {
            if (target instanceof Window) target.hide();else this.removeChild(target);
          }
        };
        _proto49.showTooltips = function showTooltips(msg) {
          if (this._defaultTooltipWin == null) {
            var resourceURL = UIConfig.tooltipsWin;
            if (!resourceURL) {
              console.error("UIConfig.tooltipsWin not defined");
              return;
            }
            this._defaultTooltipWin = UIPackage.createObjectFromURL(resourceURL);
          }
          this._defaultTooltipWin.text = msg;
          this.showTooltipsWin(this._defaultTooltipWin);
        };
        _proto49.showTooltipsWin = function showTooltipsWin(tooltipWin) {
          this.hideTooltips();
          this._tooltipWin = tooltipWin;
          var pt = this.getTouchPosition();
          pt.x += 10;
          pt.y += 20;
          this.globalToLocal(pt.x, pt.y, pt);
          if (pt.x + this._tooltipWin.width > this.width) {
            pt.x = pt.x - this._tooltipWin.width - 1;
            if (pt.x < 0) pt.x = 10;
          }
          if (pt.y + this._tooltipWin.height > this.height) {
            pt.y = pt.y - this._tooltipWin.height - 1;
            if (pt.y < 0) pt.y = 10;
          }
          this._tooltipWin.setPosition(pt.x, pt.y);
          this.addChild(this._tooltipWin);
        };
        _proto49.hideTooltips = function hideTooltips() {
          if (this._tooltipWin) {
            if (this._tooltipWin.parent) this.removeChild(this._tooltipWin);
            this._tooltipWin = null;
          }
        };
        _proto49.playOneShotSound = function playOneShotSound(clip, volumeScale) {
          if (!this.audioEngine) {
            this.audioEngine = this.node.addComponent(AudioSourceComponent);
          }
          if (volumeScale === undefined) volumeScale = 1;
          if (this.audioEngine.isValid) {
            this.audioEngine.clip = clip;
            this.audioEngine.volume = this._volumeScale * volumeScale;
            this.audioEngine.loop = false;
            this.audioEngine.play();
          }
        };
        _proto49.adjustModalLayer = function adjustModalLayer() {
          var cnt = this.numChildren;
          if (this._modalWaitPane && this._modalWaitPane.parent) this.setChildIndex(this._modalWaitPane, cnt - 1);
          for (var i = cnt - 1; i >= 0; i--) {
            var g = this.getChildAt(i);
            if (g instanceof Window && g.modal) {
              if (this._modalLayer.parent == null) this.addChildAt(this._modalLayer, i);else this.setChildIndexBefore(this._modalLayer, i);
              return;
            }
          }
          if (this._modalLayer.parent) this.removeChild(this._modalLayer);
        };
        _proto49.onTouchBegin_1 = function onTouchBegin_1(evt) {
          if (this._tooltipWin) this.hideTooltips();
          this._justClosedPopups.length = 0;
          if (this._popupStack.length > 0) {
            var mc = evt.initiator;
            while (mc && mc != this) {
              var pindex = this._popupStack.indexOf(mc);
              if (pindex != -1) {
                for (var i = this._popupStack.length - 1; i > pindex; i--) {
                  var popup = this._popupStack.pop();
                  this.closePopup(popup);
                  this._justClosedPopups.push(popup);
                }
                return;
              }
              mc = mc.findParent();
            }
            var cnt = this._popupStack.length;
            for (var _i6 = cnt - 1; _i6 >= 0; _i6--) {
              popup = this._popupStack[_i6];
              this.closePopup(popup);
              this._justClosedPopups.push(popup);
            }
            this._popupStack.length = 0;
          }
        };
        _proto49.onWinResize = function onWinResize() {
          updateScaler();
          this.setSize(UIContentScaler.rootSize.width, UIContentScaler.rootSize.height);
          var anchorPoint = this.node.getParent().getComponent(UITransform).anchorPoint;
          this.node.setPosition(-this._width * anchorPoint.x, this._height * (1 - anchorPoint.y));
        };
        _proto49.handlePositionChanged = function handlePositionChanged() {//nothing here
        };
        _createClass(GRoot, [{
          key: "touchTarget",
          get: function get() {
            return this._inputProcessor.getTouchTarget();
          }
        }, {
          key: "inputProcessor",
          get: function get() {
            return this._inputProcessor;
          }
        }, {
          key: "modalLayer",
          get: function get() {
            return this._modalLayer;
          }
        }, {
          key: "hasModalWindow",
          get: function get() {
            return this._modalLayer.parent != null;
          }
        }, {
          key: "modalWaiting",
          get: function get() {
            return this._modalWaitPane && this._modalWaitPane.node.activeInHierarchy;
          }
        }, {
          key: "hasAnyPopup",
          get: function get() {
            return this._popupStack.length != 0;
          }
        }, {
          key: "volumeScale",
          get: function get() {
            return this._volumeScale;
          },
          set: function set(value) {
            this._volumeScale = value;
          }
        }]);
        return GRoot;
      }(GComponent));
      Decls$1.GRoot = GRoot;
      var GTextInput = exports('GTextInput', /*#__PURE__*/function (_GTextField2) {
        _inheritsLoose(GTextInput, _GTextField2);
        function GTextInput() {
          var _this21;
          _this21 = _GTextField2.call(this) || this;
          _this21.touchBeginFlag = false;
          _this21._node.name = "GTextInput";
          _this21._touchDisabled = false;
          return _this21;
        }
        var _proto50 = GTextInput.prototype;
        _proto50.createRenderer = function createRenderer() {
          this._editBox = this._node.addComponent(MyEditBox);
          this._editBox.maxLength = -1;
          this._editBox["_updateTextLabel"]();
          this._node.on(EditBox.EventType.TEXT_CHANGED, this.onTextChanged, this);
          this.on(Event.TOUCH_BEGIN, this.onTouchBegin1, this);
          this.on(Event.TOUCH_END, this.onTouchEnd1, this);
          this.autoSize = AutoSizeType.None;
        };
        _proto50.updatePromptText = function updatePromptText() {
          var newCreate = !this._editBox.placeholderLabel;
          this._editBox["_updatePlaceholderLabel"]();
          if (newCreate) this.assignFont(this._editBox.placeholderLabel, this._realFont);
          this._editBox.placeholderLabel.string = defaultParser.parse(this._promptText, true);
          if (defaultParser.lastColor) {
            var c = this._editBox.placeholderLabel.color;
            if (!c) c = new Color();
            c.fromHEX(defaultParser.lastColor);
            this.assignFontColor(this._editBox.placeholderLabel, c);
          } else this.assignFontColor(this._editBox.placeholderLabel, this._color);
          if (defaultParser.lastSize) this._editBox.placeholderLabel.fontSize = parseInt(defaultParser.lastSize);else this._editBox.placeholderLabel.fontSize = this._fontSize;
        };
        _proto50.requestFocus = function requestFocus() {
          this._editBox.focus();
        };
        _proto50.markSizeChanged = function markSizeChanged() {//不支持自动大小，所以这里空
        };
        _proto50.updateText = function updateText() {
          var text2 = this._text;
          if (this._templateVars) text2 = this.parseTemplate(text2);
          if (this._ubbEnabled)
            //不支持同一个文本不同样式
            text2 = defaultParser.parse(text2, true);
          this._editBox.string = text2;
        };
        _proto50.updateFont = function updateFont() {
          this.assignFont(this._editBox.textLabel, this._realFont);
          if (this._editBox.placeholderLabel) this.assignFont(this._editBox.placeholderLabel, this._realFont);
        };
        _proto50.updateFontColor = function updateFontColor() {
          this.assignFontColor(this._editBox.textLabel, this._color);
        };
        _proto50.updateFontSize = function updateFontSize() {
          this._editBox.textLabel.fontSize = this._fontSize;
          this._editBox.textLabel.lineHeight = this._fontSize + this._leading;
          if (this._editBox.placeholderLabel) this._editBox.placeholderLabel.fontSize = this._editBox.textLabel.fontSize;
        };
        _proto50.updateOverflow = function updateOverflow() {//not supported
        };
        _proto50.onTextChanged = function onTextChanged() {
          this._text = this._editBox.string;
        };
        _proto50.onTouchBegin1 = function onTouchBegin1(evt) {
          this.touchBeginFlag = true;
        };
        _proto50.onTouchEnd1 = function onTouchEnd1(evt) {
          if (this.touchBeginFlag) {
            this._editBox.openKeyboard();
            evt.propagationStopped = true;
            this.touchBeginFlag = false;
          }
        };
        _proto50.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GTextField2.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 4);
          var str = buffer.readS();
          if (str != null) this.promptText = str;else if (this._editBox.placeholderLabel) this._editBox.placeholderLabel.string = "";
          str = buffer.readS();
          if (str != null) this.restrict = str;
          var iv = buffer.readInt();
          if (iv != 0) this.maxLength = iv;
          iv = buffer.readInt(); // 0 默认
          // 1 字母
          // 2 数字和标点
          // 3 URL
          // 4 数字
          // 5 电话
          // 6 邮件
          if (iv != 0) {
            //keyboardType
            switch (iv) {
              case 1:
                this._editBox.inputMode = EditBox.InputMode.ANY;
                break;
              case 2:
                this._editBox.inputMode = EditBox.InputMode.DECIMAL;
                break;
              case 3:
                this._editBox.inputMode = EditBox.InputMode.URL;
                break;
              case 4:
                this._editBox.inputMode = EditBox.InputMode.NUMERIC;
                break;
              case 5:
                this._editBox.inputMode = EditBox.InputMode.PHONE_NUMBER;
                break;
              case 6:
                this._editBox.inputMode = EditBox.InputMode.EMAIL_ADDR;
                break;
            }
          }
          if (buffer.readBool()) this.password = true; //同步一下对齐方式
          if (this._editBox.placeholderLabel) {
            var hAlign = this._editBox.textLabel.horizontalAlign;
            this._editBox.placeholderLabel.horizontalAlign = hAlign;
            var vAlign = this._editBox.textLabel.verticalAlign;
            this._editBox.placeholderLabel.verticalAlign = vAlign;
          }
        };
        _createClass(GTextInput, [{
          key: "editable",
          get: function get() {
            return this._editBox.enabled;
          },
          set: function set(val) {
            this._editBox.enabled = val;
          }
        }, {
          key: "maxLength",
          get: function get() {
            return this._editBox.maxLength;
          },
          set: function set(val) {
            if (val == 0) val = -1;
            this._editBox.maxLength = val;
          }
        }, {
          key: "promptText",
          get: function get() {
            return this._promptText;
          },
          set: function set(val) {
            this._promptText = val;
            this.updatePromptText();
          }
        }, {
          key: "restrict",
          get: function get() {
            return "";
          },
          set: function set(value) {//not supported
          }
        }, {
          key: "password",
          get: function get() {
            return this._editBox.inputFlag == EditBox.InputFlag.PASSWORD;
          },
          set: function set(val) {
            this._editBox.inputFlag = val ? EditBox.InputFlag.PASSWORD : EditBox.InputFlag.DEFAULT;
          }
        }, {
          key: "align",
          get: function get() {
            return this._editBox.textLabel.horizontalAlign;
          },
          set: function set(value) {
            this._editBox.textLabel.horizontalAlign = value;
            if (this._editBox.placeholderLabel) {
              this._editBox.placeholderLabel.horizontalAlign = value;
            }
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._editBox.textLabel.verticalAlign;
          },
          set: function set(value) {
            this._editBox.textLabel.verticalAlign = value;
            if (this._editBox.placeholderLabel) {
              this._editBox.placeholderLabel.verticalAlign = value;
            }
          }
        }, {
          key: "singleLine",
          get: function get() {
            return this._editBox.inputMode != EditBox.InputMode.ANY;
          },
          set: function set(value) {
            this._editBox.inputMode = value ? EditBox.InputMode.SINGLE_LINE : EditBox.InputMode.ANY;
          }
        }]);
        return GTextInput;
      }(GTextField));
      var MyEditBox = /*#__PURE__*/function (_EditBox) {
        _inheritsLoose(MyEditBox, _EditBox);
        function MyEditBox() {
          return _EditBox.apply(this, arguments) || this;
        }
        var _proto51 = MyEditBox.prototype;
        _proto51._init = function _init() {
          _EditBox.prototype._init.call(this);
          this.placeholderLabel.getComponent(UITransform).setAnchorPoint(0, 1);
          this.textLabel.getComponent(UITransform).setAnchorPoint(0, 1);
          this.placeholderLabel.overflow = Overflow.CLAMP;
          this.textLabel.overflow = Overflow.CLAMP;
        };
        _proto51._registerEvent = function _registerEvent() {//取消掉原来的事件处理
        };
        _proto51.openKeyboard = function openKeyboard() {
          var impl = this["_impl"];
          if (impl) {
            impl.beginEditing();
          }
        };
        return MyEditBox;
      }(EditBox);
      var GObjectPool = exports('GObjectPool', /*#__PURE__*/function () {
        function GObjectPool() {
          this._count = 0;
          this._pool = {};
        }
        var _proto52 = GObjectPool.prototype;
        _proto52.clear = function clear() {
          for (var i1 in this._pool) {
            var arr = this._pool[i1];
            var cnt = arr.length;
            for (var i = 0; i < cnt; i++) arr[i].dispose();
          }
          this._pool = {};
          this._count = 0;
        };
        _proto52.getObject = function getObject(url) {
          url = UIPackage.normalizeURL(url);
          if (url == null) return null;
          var arr = this._pool[url];
          if (arr && arr.length) {
            this._count--;
            return arr.shift();
          }
          var child = UIPackage.createObjectFromURL(url);
          return child;
        };
        _proto52.returnObject = function returnObject(obj) {
          var url = obj.resourceURL;
          if (!url) return;
          var arr = this._pool[url];
          if (arr == null) {
            arr = new Array();
            this._pool[url] = arr;
          }
          this._count++;
          arr.push(obj);
        };
        _createClass(GObjectPool, [{
          key: "count",
          get: function get() {
            return this._count;
          }
        }]);
        return GObjectPool;
      }());
      var GLoader = exports('GLoader', /*#__PURE__*/function (_GObject7) {
        _inheritsLoose(GLoader, _GObject7);
        function GLoader() {
          var _this22;
          _this22 = _GObject7.call(this) || this;
          _this22._frame = 0;
          _this22._node.name = "GLoader";
          _this22._playing = true;
          _this22._url = "";
          _this22._fill = LoaderFillType.None;
          _this22._align = AlignType.Left;
          _this22._verticalAlign = VertAlignType.Top;
          _this22._showErrorSign = true;
          _this22._color = new Color(255, 255, 255, 255);
          _this22._container = new Node("Image");
          _this22._container.layer = UIConfig.defaultUILayer;
          _this22._containerUITrans = _this22._container.addComponent(UITransform);
          _this22._containerUITrans.setAnchorPoint(0, 1);
          _this22._node.addChild(_this22._container);
          _this22._content = _this22._container.addComponent(MovieClip);
          _this22._content.sizeMode = Sprite.SizeMode.CUSTOM;
          _this22._content.trim = false;
          _this22._content.setPlaySettings();
          return _this22;
        }
        var _proto53 = GLoader.prototype;
        _proto53.dispose = function dispose() {
          if (this._contentItem == null) {
            if (this._content.spriteFrame) this.freeExternal(this._content.spriteFrame);
          }
          if (this._content2) this._content2.dispose();
          _GObject7.prototype.dispose.call(this);
        }; /**
           * 设置图片
           * @param url
           * @param bundleStr 远程包名称
           */
        _proto53.setUrlWithBundle = function setUrlWithBundle(url, bundleStr) {
          if (bundleStr === void 0) {
            bundleStr = '';
          }
          this.bundle = bundleStr;
          this.url = url;
        };
        _proto53.loadContent = function loadContent() {
          this.clearContent();
          if (!this._url) return;
          if (this._url.startsWith("ui://")) this.loadFromPackage(this._url);else this.loadExternal();
        };
        _proto53.loadFromPackage = function loadFromPackage(itemURL) {
          var contentItem = UIPackage.getItemByURL(itemURL);
          this._contentItem = contentItem;
          if (!contentItem) {
            this.setErrorState();
            return;
          }
          contentItem = contentItem.getBranch();
          this.sourceWidth = contentItem.width;
          this.sourceHeight = contentItem.height;
          contentItem = contentItem.getHighResolution();
          contentItem.load();
          if (this._autoSize) this.setSize(this.sourceWidth, this.sourceHeight);
          if (contentItem.type == PackageItemType.Image) {
            if (!contentItem.asset) {
              this.setErrorState();
            } else {
              this._content.spriteFrame = contentItem.asset;
              if (this._content.fillMethod == 0) {
                if (contentItem.scale9Grid) this._content.type = Sprite.Type.SLICED;else if (contentItem.scaleByTile) this._content.type = Sprite.Type.TILED;else this._content.type = Sprite.Type.SIMPLE;
              } else {
                this._content.type = Sprite.Type.FILLED;
              }
              this.updateLayout();
            }
          } else if (contentItem.type == PackageItemType.MovieClip) {
            this._content.interval = contentItem.interval;
            this._content.swing = contentItem.swing;
            this._content.repeatDelay = contentItem.repeatDelay;
            this._content.frames = contentItem.frames;
            this.updateLayout();
          } else if (contentItem.type == PackageItemType.Component) {
            var obj = UIPackage.createObjectFromURL(itemURL);
            if (!obj) this.setErrorState();else if (!(obj instanceof GComponent)) {
              obj.dispose();
              this.setErrorState();
            } else {
              this._content2 = obj;
              this._container.addChild(this._content2.node);
              this.updateLayout();
            }
          } else this.setErrorState();
        };
        _proto53.loadExternal = function loadExternal() {
          var _this23 = this;
          var url = this.url;
          var callback = function callback(err, asset) {
            //因为是异步返回的，而这时可能url已经被改变，所以不能直接用返回的结果
            if (_this23._url != url || !isValid(_this23._node)) return;
            if (err) console.warn(err);
            if (asset instanceof SpriteFrame) _this23.onExternalLoadSuccess(asset);else if (asset instanceof Texture2D) {
              var sf = new SpriteFrame();
              sf.texture = asset;
              _this23.onExternalLoadSuccess(sf);
            } else if (asset instanceof ImageAsset) {
              var texture = new Texture2D();
              texture.image = asset;
              var _sf = new SpriteFrame();
              _sf.texture = texture;
              _this23.onExternalLoadSuccess(_sf);
            } else {
              console.warn("GLoader:cant load", _this23.url);
            }
          };
          if (this._url.startsWith("http://") || this._url.startsWith("https://") || this._url.startsWith('/')) assetManager.loadRemote(this._url, callback);else if (this._url.startsWith('data:image/')) {
            var img = new Image();
            img.src = this._url;
            img.onload = function () {
              var tex = new Texture2D();
              tex.reset({
                width: img.width,
                height: img.height
              });
              tex.uploadData(img, 0, 0);
              callback(null, tex);
            };
          } else {
            var bundle = UIConfig.defaultBundle; //如果有设置远程包 从远程包加载
            if (this.bundle && assetManager.bundles.has(this.bundle)) {
              bundle = assetManager.getBundle(this.bundle);
            }
            bundle.load(this._url + "/spriteFrame", Asset, callback);
          }
        };
        _proto53.freeExternal = function freeExternal(texture) {};
        _proto53.onExternalLoadSuccess = function onExternalLoadSuccess(texture) {
          this._content.spriteFrame = texture;
          this._content.type = Sprite.Type.SIMPLE;
          this.sourceWidth = texture.originalSize.width;
          this.sourceHeight = texture.originalSize.height;
          if (this._autoSize) this.setSize(this.sourceWidth, this.sourceHeight);
          this.updateLayout();
        };
        _proto53.onExternalLoadFailed = function onExternalLoadFailed() {
          this.setErrorState();
        };
        _proto53.setErrorState = function setErrorState() {
          if (!this._showErrorSign) return;
          if (this._errorSign == null) {
            if (UIConfig.loaderErrorSign != null) {
              this._errorSign = GLoader._errorSignPool.getObject(UIConfig.loaderErrorSign);
            }
          }
          if (this._errorSign) {
            this._errorSign.setSize(this.width, this.height);
            this._container.addChild(this._errorSign.node);
          }
        };
        _proto53.clearErrorState = function clearErrorState() {
          if (this._errorSign) {
            this._container.removeChild(this._errorSign.node);
            GLoader._errorSignPool.returnObject(this._errorSign);
            this._errorSign = null;
          }
        };
        _proto53.updateLayout = function updateLayout() {
          if (this._content2 == null && this._content == null) {
            if (this._autoSize) {
              this._updatingLayout = true;
              this.setSize(50, 30);
              this._updatingLayout = false;
            }
            return;
          }
          var cw = this.sourceWidth;
          var ch = this.sourceHeight;
          var pivotCorrectX = -this.pivotX * this._width;
          var pivotCorrectY = this.pivotY * this._height;
          if (this._autoSize) {
            this._updatingLayout = true;
            if (cw == 0) cw = 50;
            if (ch == 0) ch = 30;
            this.setSize(cw, ch);
            this._updatingLayout = false;
            this._containerUITrans.setContentSize(this._width, this._height);
            this._container.setPosition(pivotCorrectX, pivotCorrectY);
            if (this._content2) {
              this._content2.setPosition(pivotCorrectX + this._width * this.pivotX, pivotCorrectY - this._height * this.pivotY);
              this._content2.setScale(1, 1);
            }
            if (cw == this._width && ch == this._height) return;
          }
          var sx = 1,
            sy = 1;
          if (this._fill != LoaderFillType.None) {
            sx = this.width / this.sourceWidth;
            sy = this.height / this.sourceHeight;
            if (sx != 1 || sy != 1) {
              if (this._fill == LoaderFillType.ScaleMatchHeight) sx = sy;else if (this._fill == LoaderFillType.ScaleMatchWidth) sy = sx;else if (this._fill == LoaderFillType.Scale) {
                if (sx > sy) sx = sy;else sy = sx;
              } else if (this._fill == LoaderFillType.ScaleNoBorder) {
                if (sx > sy) sy = sx;else sx = sy;
              }
              if (this._shrinkOnly) {
                if (sx > 1) sx = 1;
                if (sy > 1) sy = 1;
              }
              cw = this.sourceWidth * sx;
              ch = this.sourceHeight * sy;
            }
          }
          this._containerUITrans.setContentSize(cw, ch);
          if (this._content2) {
            this._content2.setPosition(pivotCorrectX + this._width * this.pivotX, pivotCorrectY - this._height * this.pivotY);
            this._content2.setScale(sx, sy);
          }
          var nx, ny;
          if (this._align == AlignType.Left) nx = 0;else if (this._align == AlignType.Center) nx = Math.floor((this._width - cw) / 2);else nx = this._width - cw;
          if (this._verticalAlign == VertAlignType.Top) ny = 0;else if (this._verticalAlign == VertAlignType.Middle) ny = Math.floor((this._height - ch) / 2);else ny = this._height - ch;
          ny = -ny;
          this._container.setPosition(pivotCorrectX + nx, pivotCorrectY + ny);
        };
        _proto53.clearContent = function clearContent() {
          this.clearErrorState();
          if (!this._contentItem) {
            var texture = this._content.spriteFrame;
            if (texture) this.freeExternal(texture);
          }
          if (this._content2) {
            this._container.removeChild(this._content2.node);
            this._content2.dispose();
            this._content2 = null;
          }
          this._content.frames = null;
          this._content.spriteFrame = null;
          this._contentItem = null;
        };
        _proto53.handleSizeChanged = function handleSizeChanged() {
          _GObject7.prototype.handleSizeChanged.call(this);
          if (!this._updatingLayout) this.updateLayout();
        };
        _proto53.handleAnchorChanged = function handleAnchorChanged() {
          _GObject7.prototype.handleAnchorChanged.call(this);
          if (!this._updatingLayout) this.updateLayout();
        };
        _proto53.handleGrayedChanged = function handleGrayedChanged() {
          this._content.grayscale = this._grayed;
        };
        _proto53._hitTest = function _hitTest(pt, globalPt) {
          if (this._content2) {
            var obj = this._content2.hitTest(globalPt);
            if (obj) return obj;
          }
          if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) return this;else return null;
        };
        _proto53.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.color;
            case ObjectPropID.Playing:
              return this.playing;
            case ObjectPropID.Frame:
              return this.frame;
            case ObjectPropID.TimeScale:
              return this._content.timeScale;
            default:
              return _GObject7.prototype.getProp.call(this, index);
          }
        };
        _proto53.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.color = value;
              break;
            case ObjectPropID.Playing:
              this.playing = value;
              break;
            case ObjectPropID.Frame:
              this.frame = value;
              break;
            case ObjectPropID.TimeScale:
              this._content.timeScale = value;
              break;
            case ObjectPropID.DeltaTime:
              this._content.advance(value);
              break;
            default:
              _GObject7.prototype.setProp.call(this, index, value);
              break;
          }
        };
        _proto53.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject7.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 5);
          this._url = buffer.readS();
          this._align = buffer.readByte();
          this._verticalAlign = buffer.readByte();
          this._fill = buffer.readByte();
          this._shrinkOnly = buffer.readBool();
          this._autoSize = buffer.readBool();
          this._showErrorSign = buffer.readBool();
          this._playing = buffer.readBool();
          this._frame = buffer.readInt();
          if (buffer.readBool()) this.color = buffer.readColor();
          this._content.fillMethod = buffer.readByte();
          if (this._content.fillMethod != 0) {
            this._content.fillOrigin = buffer.readByte();
            this._content.fillClockwise = buffer.readBool();
            this._content.fillAmount = buffer.readFloat();
          }
          if (this._url) this.loadContent();
        };
        _createClass(GLoader, [{
          key: "url",
          get: function get() {
            return this._url;
          },
          set: function set(value) {
            if (this._url == value) return;
            this._url = value;
            this.loadContent();
            this.updateGear(7);
          }
        }, {
          key: "bundle",
          get: function get() {
            if (this._assetBundle) {
              return this._assetBundle;
            }
            return UIConfig.loaderAssetsBundleName;
          },
          set: function set(val) {
            this._assetBundle = val;
          }
        }, {
          key: "icon",
          get: function get() {
            return this._url;
          },
          set: function set(value) {
            this.url = value;
          }
        }, {
          key: "align",
          get: function get() {
            return this._align;
          },
          set: function set(value) {
            if (this._align != value) {
              this._align = value;
              this.updateLayout();
            }
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._verticalAlign;
          },
          set: function set(value) {
            if (this._verticalAlign != value) {
              this._verticalAlign = value;
              this.updateLayout();
            }
          }
        }, {
          key: "fill",
          get: function get() {
            return this._fill;
          },
          set: function set(value) {
            if (this._fill != value) {
              this._fill = value;
              this.updateLayout();
            }
          }
        }, {
          key: "shrinkOnly",
          get: function get() {
            return this._shrinkOnly;
          },
          set: function set(value) {
            if (this._shrinkOnly != value) {
              this._shrinkOnly = value;
              this.updateLayout();
            }
          }
        }, {
          key: "autoSize",
          get: function get() {
            return this._autoSize;
          },
          set: function set(value) {
            if (this._autoSize != value) {
              this._autoSize = value;
              this.updateLayout();
            }
          }
        }, {
          key: "playing",
          get: function get() {
            return this._playing;
          },
          set: function set(value) {
            if (this._playing != value) {
              this._playing = value;
              if (this._content instanceof MovieClip) this._content.playing = value;
              this.updateGear(5);
            }
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          },
          set: function set(value) {
            if (this._frame != value) {
              this._frame = value;
              if (this._content instanceof MovieClip) this._content.frame = value;
              this.updateGear(5);
            }
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            this._color.set(value);
            this.updateGear(4);
            this._content.color = value;
          }
        }, {
          key: "fillMethod",
          get: function get() {
            return this._content.fillMethod;
          },
          set: function set(value) {
            this._content.fillMethod = value;
          }
        }, {
          key: "fillOrigin",
          get: function get() {
            return this._content.fillOrigin;
          },
          set: function set(value) {
            this._content.fillOrigin = value;
          }
        }, {
          key: "fillClockwise",
          get: function get() {
            return this._content.fillClockwise;
          },
          set: function set(value) {
            this._content.fillClockwise = value;
          }
        }, {
          key: "fillAmount",
          get: function get() {
            return this._content.fillAmount;
          },
          set: function set(value) {
            this._content.fillAmount = value;
          }
        }, {
          key: "showErrorSign",
          get: function get() {
            return this._showErrorSign;
          },
          set: function set(value) {
            this._showErrorSign = value;
          }
        }, {
          key: "component",
          get: function get() {
            return this._content2;
          }
        }, {
          key: "texture",
          get: function get() {
            return this._content.spriteFrame;
          },
          set: function set(value) {
            this.url = null;
            this._content.spriteFrame = value;
            this._content.type = Sprite.Type.SIMPLE;
            if (value != null) {
              this.sourceWidth = value.rect.width;
              this.sourceHeight = value.rect.height;
            } else {
              this.sourceWidth = this.sourceHeight = 0;
            }
            this.updateLayout();
          }
        }]);
        return GLoader;
      }(GObject));
      GLoader._errorSignPool = new GObjectPool();
      var GLoader3D = exports('GLoader3D', /*#__PURE__*/function (_GObject8) {
        _inheritsLoose(GLoader3D, _GObject8);
        function GLoader3D() {
          var _this24;
          _this24 = _GObject8.call(this) || this;
          _this24._frame = 0;
          _this24._node.name = "GLoader3D";
          _this24._playing = true;
          _this24._url = "";
          _this24._fill = LoaderFillType.None;
          _this24._align = AlignType.Left;
          _this24._verticalAlign = VertAlignType.Top;
          _this24._color = new Color(255, 255, 255, 255);
          _this24._container = new Node("Wrapper");
          _this24._container.layer = UIConfig.defaultUILayer;
          _this24._container.addComponent(UITransform).setAnchorPoint(0, 1);
          _this24._node.addChild(_this24._container);
          return _this24;
        }
        var _proto54 = GLoader3D.prototype;
        _proto54.dispose = function dispose() {
          _GObject8.prototype.dispose.call(this);
        };
        _proto54.loadContent = function loadContent() {
          this.clearContent();
          if (!this._url) return;
          if (this._url.startsWith("ui://")) this.loadFromPackage(this._url);else this.loadExternal();
        };
        _proto54.loadFromPackage = function loadFromPackage(itemURL) {
          this._contentItem = UIPackage.getItemByURL(itemURL);
          if (this._contentItem) {
            this._contentItem = this._contentItem.getBranch();
            this.sourceWidth = this._contentItem.width;
            this.sourceHeight = this._contentItem.height;
            this._contentItem = this._contentItem.getHighResolution();
            if (this._autoSize) this.setSize(this.sourceWidth, this.sourceHeight);
            if (this._contentItem.type == PackageItemType.Spine || this._contentItem.type == PackageItemType.DragonBones) this._contentItem.owner.getItemAssetAsync(this._contentItem, this.onLoaded.bind(this));
          }
        };
        _proto54.onLoaded = function onLoaded(err, item) {
          if (this._contentItem != item) return;
          if (err) console.warn(err);
          if (!this._contentItem.asset) return;
          if (this._contentItem.type == PackageItemType.Spine) this.setSpine(this._contentItem.asset, this._contentItem.skeletonAnchor);else if (this._contentItem.type == PackageItemType.DragonBones) this.setDragonBones(this._contentItem.asset, this._contentItem.atlasAsset, this._contentItem.skeletonAnchor);
        };
        _proto54.setSpine = function setSpine(asset, anchor, pma) {
          this.freeSpine();
          var node = new Node();
          this._container.addChild(node);
          node.layer = UIConfig.defaultUILayer;
          node.setPosition(anchor.x, -anchor.y);
          this._content = node.addComponent(sp.Skeleton);
          this._content.premultipliedAlpha = pma;
          this._content.skeletonData = asset;
          this._content.color = this._color;
          this.onChangeSpine();
          this.updateLayout();
        };
        _proto54.freeSpine = function freeSpine() {
          if (this._content) {
            this._content.destroy();
          }
        };
        _proto54.setDragonBones = function setDragonBones(asset, atlasAsset, anchor, pma) {
          this.freeDragonBones();
          var node = new Node();
          node.layer = UIConfig.defaultUILayer;
          this._container.addChild(node);
          node.setPosition(anchor.x, -anchor.y);
          this._content = node.addComponent(dragonBones.ArmatureDisplay);
          this._content.premultipliedAlpha = pma;
          this._content.dragonAsset = asset;
          this._content.dragonAtlasAsset = atlasAsset;
          this._content.color = this._color;
          var armatureKey = asset["init"](dragonBones.CCFactory.getInstance(), atlasAsset["_uuid"]);
          var dragonBonesData = this._content["_factory"].getDragonBonesData(armatureKey);
          this._content.armatureName = dragonBonesData.armatureNames[0];
          this.onChangeDragonBones();
          this.updateLayout();
        };
        _proto54.freeDragonBones = function freeDragonBones() {
          if (this._content) {
            this._content.destroy();
          }
        };
        _proto54.onChange = function onChange() {
          if (this._contentItem == null) return;
          if (this._contentItem.type == PackageItemType.Spine) {
            this.onChangeSpine();
          }
          if (this._contentItem.type == PackageItemType.DragonBones) {
            this.onChangeDragonBones();
          }
        };
        _proto54.onChangeSpine = function onChangeSpine() {
          var _a;
          if (!(this._content instanceof sp.Skeleton)) return;
          if (this._animationName) {
            var trackEntry = this._content.getCurrent(0);
            if (!trackEntry || trackEntry.animation.name != this._animationName || trackEntry.isComplete() && !trackEntry.loop) {
              this._content.animation = this._animationName;
              trackEntry = this._content.setAnimation(0, this._animationName, this._loop);
            }
            if (this._playing) this._content.paused = false;else {
              this._content.paused = true;
              trackEntry.trackTime = math.lerp(0, trackEntry.animationEnd - trackEntry.animationStart, this._frame / 100);
            }
          } else this._content.clearTrack(0);
          var skin = this._skinName || this._content.skeletonData.getRuntimeData().skins[0].name;
          if (((_a = this._content["_skeleton"].skin) === null || _a === void 0 ? void 0 : _a.name) != skin) this._content.setSkin(skin);
        };
        _proto54.onChangeDragonBones = function onChangeDragonBones() {
          if (!(this._content instanceof dragonBones.ArmatureDisplay)) return;
          if (this._animationName) {
            if (this._playing) this._content.playAnimation(this._animationName, this._loop ? 0 : 1);else this._content.armature().animation.gotoAndStopByFrame(this._animationName, this._frame);
          } else this._content.armature().animation.reset();
        };
        _proto54.loadExternal = function loadExternal() {
          if (this._url.startsWith("http://") || this._url.startsWith("https://") || this._url.startsWith('/')) assetManager.loadRemote(this._url, sp.SkeletonData, this.onLoaded2.bind(this));else UIConfig.defaultBundle.load(this._url, sp.SkeletonData, this.onLoaded2.bind(this));
        };
        _proto54.onLoaded2 = function onLoaded2(err, asset) {
          //因为是异步返回的，而这时可能url已经被改变，所以不能直接用返回的结果
          if (!this._url || !isValid(this._node)) return;
          if (err) console.warn(err);
        };
        _proto54.updateLayout = function updateLayout() {
          var cw = this.sourceWidth;
          var ch = this.sourceHeight;
          var pivotCorrectX = -this.pivotX * this._width;
          var pivotCorrectY = this.pivotY * this._height;
          if (this._autoSize) {
            this._updatingLayout = true;
            if (cw == 0) cw = 50;
            if (ch == 0) ch = 30;
            this.setSize(cw, ch);
            this._updatingLayout = false;
            if (cw == this._width && ch == this._height) {
              this._container.setScale(1, 1);
              this._container.setPosition(pivotCorrectX, pivotCorrectY);
              return;
            }
          }
          var sx = 1,
            sy = 1;
          if (this._fill != LoaderFillType.None) {
            sx = this.width / this.sourceWidth;
            sy = this.height / this.sourceHeight;
            if (sx != 1 || sy != 1) {
              if (this._fill == LoaderFillType.ScaleMatchHeight) sx = sy;else if (this._fill == LoaderFillType.ScaleMatchWidth) sy = sx;else if (this._fill == LoaderFillType.Scale) {
                if (sx > sy) sx = sy;else sy = sx;
              } else if (this._fill == LoaderFillType.ScaleNoBorder) {
                if (sx > sy) sy = sx;else sx = sy;
              }
              if (this._shrinkOnly) {
                if (sx > 1) sx = 1;
                if (sy > 1) sy = 1;
              }
              cw = this.sourceWidth * sx;
              ch = this.sourceHeight * sy;
            }
          }
          this._container.setScale(sx, sy);
          var nx, ny;
          if (this._align == AlignType.Left) nx = 0;else if (this._align == AlignType.Center) nx = Math.floor((this._width - cw) / 2);else nx = this._width - cw;
          if (this._verticalAlign == VertAlignType.Top) ny = 0;else if (this._verticalAlign == VertAlignType.Middle) ny = Math.floor((this._height - ch) / 2);else ny = this._height - ch;
          ny = -ny;
          this._container.setPosition(pivotCorrectX + nx, pivotCorrectY + ny);
        };
        _proto54.clearContent = function clearContent() {
          this._contentItem = null;
          if (this._content) {
            this._content.node.destroy();
            this._content = null;
          }
        };
        _proto54.handleSizeChanged = function handleSizeChanged() {
          _GObject8.prototype.handleSizeChanged.call(this);
          if (!this._updatingLayout) this.updateLayout();
        };
        _proto54.handleAnchorChanged = function handleAnchorChanged() {
          _GObject8.prototype.handleAnchorChanged.call(this);
          if (!this._updatingLayout) this.updateLayout();
        };
        _proto54.handleGrayedChanged = function handleGrayedChanged() {};
        _proto54.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.color;
            case ObjectPropID.Playing:
              return this.playing;
            case ObjectPropID.Frame:
              return this.frame;
            case ObjectPropID.TimeScale:
              return 1;
            default:
              return _GObject8.prototype.getProp.call(this, index);
          }
        };
        _proto54.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.color = value;
              break;
            case ObjectPropID.Playing:
              this.playing = value;
              break;
            case ObjectPropID.Frame:
              this.frame = value;
              break;
            case ObjectPropID.TimeScale:
              break;
            case ObjectPropID.DeltaTime:
              break;
            default:
              _GObject8.prototype.setProp.call(this, index, value);
              break;
          }
        };
        _proto54.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject8.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 5);
          this._url = buffer.readS();
          this._align = buffer.readByte();
          this._verticalAlign = buffer.readByte();
          this._fill = buffer.readByte();
          this._shrinkOnly = buffer.readBool();
          this._autoSize = buffer.readBool();
          this._animationName = buffer.readS();
          this._skinName = buffer.readS();
          this._playing = buffer.readBool();
          this._frame = buffer.readInt();
          this._loop = buffer.readBool();
          if (buffer.readBool()) this.color = buffer.readColor();
          if (this._url) this.loadContent();
        };
        _createClass(GLoader3D, [{
          key: "url",
          get: function get() {
            return this._url;
          },
          set: function set(value) {
            if (this._url == value) return;
            this._url = value;
            this.loadContent();
            this.updateGear(7);
          }
        }, {
          key: "icon",
          get: function get() {
            return this._url;
          },
          set: function set(value) {
            this.url = value;
          }
        }, {
          key: "align",
          get: function get() {
            return this._align;
          },
          set: function set(value) {
            if (this._align != value) {
              this._align = value;
              this.updateLayout();
            }
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._verticalAlign;
          },
          set: function set(value) {
            if (this._verticalAlign != value) {
              this._verticalAlign = value;
              this.updateLayout();
            }
          }
        }, {
          key: "fill",
          get: function get() {
            return this._fill;
          },
          set: function set(value) {
            if (this._fill != value) {
              this._fill = value;
              this.updateLayout();
            }
          }
        }, {
          key: "shrinkOnly",
          get: function get() {
            return this._shrinkOnly;
          },
          set: function set(value) {
            if (this._shrinkOnly != value) {
              this._shrinkOnly = value;
              this.updateLayout();
            }
          }
        }, {
          key: "autoSize",
          get: function get() {
            return this._autoSize;
          },
          set: function set(value) {
            if (this._autoSize != value) {
              this._autoSize = value;
              this.updateLayout();
            }
          }
        }, {
          key: "playing",
          get: function get() {
            return this._playing;
          },
          set: function set(value) {
            if (this._playing != value) {
              this._playing = value;
              this.updateGear(5);
              this.onChange();
            }
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          },
          set: function set(value) {
            if (this._frame != value) {
              this._frame = value;
              this.updateGear(5);
              this.onChange();
            }
          }
        }, {
          key: "animationName",
          get: function get() {
            return this._animationName;
          },
          set: function set(value) {
            if (this._animationName != value) {
              this._animationName = value;
              this.onChange();
            }
          }
        }, {
          key: "skinName",
          get: function get() {
            return this._skinName;
          },
          set: function set(value) {
            if (this._skinName != value) {
              this._skinName = value;
              this.onChange();
            }
          }
        }, {
          key: "loop",
          get: function get() {
            return this._loop;
          },
          set: function set(value) {
            if (this._loop != value) {
              this._loop = value;
              this.onChange();
            }
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            this._color.set(value);
            this.updateGear(4);
            if (this._content) this._content.color = value;
          }
        }, {
          key: "content",
          get: function get() {
            return this._content;
          }
        }]);
        return GLoader3D;
      }(GObject));
      var GLabel = exports('GLabel', /*#__PURE__*/function (_GComponent3) {
        _inheritsLoose(GLabel, _GComponent3);
        function GLabel() {
          var _this25;
          _this25 = _GComponent3.call(this) || this;
          _this25._node.name = "GLabel";
          return _this25;
        }
        var _proto55 = GLabel.prototype;
        _proto55.getTextField = function getTextField() {
          if (this._titleObject instanceof GTextField) return this._titleObject;else if ('getTextField' in this._titleObject) return this._titleObject.getTextField();else return null;
        };
        _proto55.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.titleColor;
            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) return tf.strokeColor;else return 0;
              }
            case ObjectPropID.FontSize:
              return this.titleFontSize;
            default:
              return _GComponent3.prototype.getProp.call(this, index);
          }
        };
        _proto55.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.titleColor = value;
              break;
            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) tf.strokeColor = value;
              }
              break;
            case ObjectPropID.FontSize:
              this.titleFontSize = value;
              break;
            default:
              _GComponent3.prototype.setProp.call(this, index, value);
              break;
          }
        };
        _proto55.constructExtension = function constructExtension(buffer) {
          this._titleObject = this.getChild("title");
          this._iconObject = this.getChild("icon");
        };
        _proto55.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent3.prototype.setup_afterAdd.call(this, buffer, beginPos);
          if (!buffer.seek(beginPos, 6)) return;
          if (buffer.readByte() != this.packageItem.objectType) return;
          var str;
          str = buffer.readS();
          if (str != null) this.title = str;
          str = buffer.readS();
          if (str != null) this.icon = str;
          if (buffer.readBool()) this.titleColor = buffer.readColor();
          var iv = buffer.readInt();
          if (iv != 0) this.titleFontSize = iv;
          if (buffer.readBool()) {
            var input = this.getTextField();
            if (input instanceof GTextInput) {
              str = buffer.readS();
              if (str != null) input.promptText = str;
              str = buffer.readS();
              if (str != null) input.restrict = str;
              iv = buffer.readInt();
              if (iv != 0) input.maxLength = iv;
              iv = buffer.readInt();
              if (buffer.readBool()) input.password = true;
            } else buffer.skip(13);
          }
          str = buffer.readS();
          if (str != null) {
            this._sound = str;
            if (buffer.readBool()) {
              this._soundVolumeScale = buffer.readFloat();
            }
            this._node.on(Event.CLICK, this.onClick_1, this);
          }
        };
        _proto55.onClick_1 = function onClick_1() {
          if (this._sound) {
            var pi = UIPackage.getItemByURL(this._sound);
            if (pi) {
              var sound = pi.owner.getItemAsset(pi);
              if (sound) {
                var groot = GRoot.getInstance(this);
                if (!groot) return;
                groot.playOneShotSound(sound, this._soundVolumeScale);
              }
            }
          }
        };
        _createClass(GLabel, [{
          key: "icon",
          get: function get() {
            if (this._iconObject) return this._iconObject.icon;
          },
          set: function set(value) {
            if (this._iconObject) this._iconObject.icon = value;
            this.updateGear(7);
          }
        }, {
          key: "title",
          get: function get() {
            if (this._titleObject) return this._titleObject.text;else return null;
          },
          set: function set(value) {
            if (this._titleObject) this._titleObject.text = value;
            this.updateGear(6);
          }
        }, {
          key: "text",
          get: function get() {
            return this.title;
          },
          set: function set(value) {
            this.title = value;
          }
        }, {
          key: "titleColor",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.color;else return Color.WHITE;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.color = value;
            this.updateGear(4);
          }
        }, {
          key: "titleFontSize",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.fontSize;else return 0;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.fontSize = value;
          }
        }, {
          key: "editable",
          get: function get() {
            if (this._titleObject && this._titleObject instanceof GTextInput) return this._titleObject.editable;else return false;
          },
          set: function set(val) {
            if (this._titleObject && this._titleObject instanceof GTextInput) this._titleObject.editable = val;
          }
        }]);
        return GLabel;
      }(GComponent));
      var GButton = exports('GButton', /*#__PURE__*/function (_GComponent4) {
        _inheritsLoose(GButton, _GComponent4);
        function GButton() {
          var _this26;
          _this26 = _GComponent4.call(this) || this;
          _this26._node.name = "GButton";
          _this26._mode = ButtonMode.Common;
          _this26._title = "";
          _this26._icon = "";
          _this26._sound = UIConfig.buttonSound;
          _this26._soundVolumeScale = UIConfig.buttonSoundVolumeScale;
          _this26._changeStateOnClick = true;
          _this26._downEffect = 0;
          _this26._downEffectValue = 0.8;
          return _this26;
        }
        var _proto56 = GButton.prototype;
        _proto56.getTextField = function getTextField() {
          if (this._titleObject instanceof GTextField) return this._titleObject;else if ('getTextField' in this._titleObject) return this._titleObject.getTextField();else return null;
        };
        _proto56.fireClick = function fireClick() {
          var groot = GRoot.getInstance(this);
          if (!groot) return;
          groot.inputProcessor.simulateClick(this);
        };
        _proto56.setState = function setState(val) {
          if (this._buttonController) this._buttonController.selectedPage = val;
          if (this._downEffect == 1) {
            var cnt = this.numChildren;
            if (val == GButton.DOWN || val == GButton.SELECTED_OVER || val == GButton.SELECTED_DISABLED) {
              if (!this._downColor) this._downColor = new Color();
              var r = this._downEffectValue * 255;
              this._downColor.r = this._downColor.g = this._downColor.b = r;
              for (var i = 0; i < cnt; i++) {
                var obj = this.getChildAt(i);
                if (!(obj instanceof GTextField)) obj.setProp(ObjectPropID.Color, this._downColor);
              }
            } else {
              for (var i = 0; i < cnt; i++) {
                var obj = this.getChildAt(i);
                if (!(obj instanceof GTextField)) obj.setProp(ObjectPropID.Color, Color.WHITE);
              }
            }
          } else if (this._downEffect == 2) {
            if (val == GButton.DOWN || val == GButton.SELECTED_OVER || val == GButton.SELECTED_DISABLED) {
              if (!this._downScaled) {
                this._downScaled = true;
                this.setScale(this.scaleX * this._downEffectValue, this.scaleY * this._downEffectValue);
              }
            } else {
              if (this._downScaled) {
                this._downScaled = false;
                this.setScale(this.scaleX / this._downEffectValue, this.scaleY / this._downEffectValue);
              }
            }
          }
        };
        _proto56.setCurrentState = function setCurrentState() {
          if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) {
            if (this._selected) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DISABLED);
          } else {
            if (this._selected) this.setState(this._over ? GButton.SELECTED_OVER : GButton.DOWN);else this.setState(this._over ? GButton.OVER : GButton.UP);
          }
        };
        _proto56.handleControllerChanged = function handleControllerChanged(c) {
          _GComponent4.prototype.handleControllerChanged.call(this, c);
          if (this._relatedController == c) this.selected = this._relatedPageId == c.selectedPageId;
        };
        _proto56.handleGrayedChanged = function handleGrayedChanged() {
          if (this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) {
            if (this.grayed) {
              if (this._selected && this._buttonController.hasPage(GButton.SELECTED_DISABLED)) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DISABLED);
            } else if (this._selected) this.setState(GButton.DOWN);else this.setState(GButton.UP);
          } else _GComponent4.prototype.handleGrayedChanged.call(this);
        };
        _proto56.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.titleColor;
            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) return tf.strokeColor;else return 0;
              }
            case ObjectPropID.FontSize:
              return this.titleFontSize;
            case ObjectPropID.Selected:
              return this.selected;
            default:
              return _GComponent4.prototype.getProp.call(this, index);
          }
        };
        _proto56.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.titleColor = value;
              break;
            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) tf.strokeColor = value;
              }
              break;
            case ObjectPropID.FontSize:
              this.titleFontSize = value;
              break;
            case ObjectPropID.Selected:
              this.selected = value;
              break;
            default:
              _GComponent4.prototype.setProp.call(this, index, value);
              break;
          }
        };
        _proto56.constructExtension = function constructExtension(buffer) {
          buffer.seek(0, 6);
          this._mode = buffer.readByte();
          var str = buffer.readS();
          if (str) this._sound = str;
          this._soundVolumeScale = buffer.readFloat();
          this._downEffect = buffer.readByte();
          this._downEffectValue = buffer.readFloat();
          if (this._downEffect == 2) this.setPivot(0.5, 0.5, this.pivotAsAnchor);
          this._buttonController = this.getController("button");
          this._titleObject = this.getChild("title");
          this._iconObject = this.getChild("icon");
          if (this._titleObject) this._title = this._titleObject.text;
          if (this._iconObject) this._icon = this._iconObject.icon;
          if (this._mode == ButtonMode.Common) this.setState(GButton.UP);
          this._node.on(Event.TOUCH_BEGIN, this.onTouchBegin_1, this);
          this._node.on(Event.TOUCH_END, this.onTouchEnd_1, this);
          this._node.on(Event.ROLL_OVER, this.onRollOver_1, this);
          this._node.on(Event.ROLL_OUT, this.onRollOut_1, this);
          this._node.on(Event.CLICK, this.onClick_1, this);
        };
        _proto56.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent4.prototype.setup_afterAdd.call(this, buffer, beginPos);
          if (!buffer.seek(beginPos, 6)) return;
          if (buffer.readByte() != this.packageItem.objectType) return;
          var str;
          var iv;
          str = buffer.readS();
          if (str != null) this.title = str;
          str = buffer.readS();
          if (str != null) this.selectedTitle = str;
          str = buffer.readS();
          if (str != null) this.icon = str;
          str = buffer.readS();
          if (str != null) this.selectedIcon = str;
          if (buffer.readBool()) this.titleColor = buffer.readColor();
          iv = buffer.readInt();
          if (iv != 0) this.titleFontSize = iv;
          iv = buffer.readShort();
          if (iv >= 0) this._relatedController = this.parent.getControllerAt(iv);
          this._relatedPageId = buffer.readS();
          str = buffer.readS();
          if (str != null) this._sound = str;
          if (buffer.readBool()) this._soundVolumeScale = buffer.readFloat();
          this.selected = buffer.readBool();
        };
        _proto56.onRollOver_1 = function onRollOver_1() {
          if (!this._buttonController || !this._buttonController.hasPage(GButton.OVER)) return;
          this._over = true;
          if (this._down) return;
          if (this.grayed && this._buttonController.hasPage(GButton.DISABLED)) return;
          this.setState(this._selected ? GButton.SELECTED_OVER : GButton.OVER);
        };
        _proto56.onRollOut_1 = function onRollOut_1() {
          if (!this._buttonController || !this._buttonController.hasPage(GButton.OVER)) return;
          this._over = false;
          if (this._down) return;
          if (this.grayed && this._buttonController.hasPage(GButton.DISABLED)) return;
          this.setState(this._selected ? GButton.DOWN : GButton.UP);
        };
        _proto56.onTouchBegin_1 = function onTouchBegin_1(evt) {
          if (evt.button != EventMouse.BUTTON_LEFT) return;
          this._down = true;
          evt.captureTouch();
          if (this._mode == ButtonMode.Common) {
            if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DOWN);
          }
          if (this._linkedPopup) {
            if (this._linkedPopup instanceof Window) {
              this._linkedPopup.toggleStatus();
            } else {
              var groot = GRoot.getInstance(this);
              if (!groot) return;
              groot.togglePopup(this._linkedPopup, this);
            }
          }
        };
        _proto56.onTouchEnd_1 = function onTouchEnd_1(evt) {
          if (evt.button != EventMouse.BUTTON_LEFT) return;
          if (this._down) {
            this._down = false;
            if (this._node == null) return;
            if (this._mode == ButtonMode.Common) {
              if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) this.setState(GButton.DISABLED);else if (this._over) this.setState(GButton.OVER);else this.setState(GButton.UP);
            } else {
              if (!this._over && this._buttonController != null && (this._buttonController.selectedPage == GButton.OVER || this._buttonController.selectedPage == GButton.SELECTED_OVER)) {
                this.setCurrentState();
              }
            }
          }
        };
        _proto56.onClick_1 = function onClick_1(evt) {
          if (evt.buttonObj == undefined) {
            evt.buttonObj = this;
          }
          if (this._sound) {
            var pi = UIPackage.getItemByURL(this._sound);
            if (pi) {
              var sound = pi.owner.getItemAsset(pi);
              if (sound) {
                var groot = GRoot.getInstance(this);
                if (!groot) return;
                groot.playOneShotSound(sound, this._soundVolumeScale);
              }
            }
          }
          if (this._mode == ButtonMode.Check) {
            if (this._changeStateOnClick) {
              this.selected = !this._selected;
              this._node.emit(Event.STATUS_CHANGED, this);
            }
          } else if (this._mode == ButtonMode.Radio) {
            if (this._changeStateOnClick && !this._selected) {
              this.selected = true;
              this._node.emit(Event.STATUS_CHANGED, this);
            }
          } else {
            if (this._relatedController) this._relatedController.selectedPageId = this._relatedPageId;
          }
        };
        _createClass(GButton, [{
          key: "icon",
          get: function get() {
            return this._icon;
          },
          set: function set(value) {
            this._icon = value;
            value = this._selected && this._selectedIcon ? this._selectedIcon : this._icon;
            if (this._iconObject) this._iconObject.icon = value;
            this.updateGear(7);
          }
        }, {
          key: "selectedIcon",
          get: function get() {
            return this._selectedIcon;
          },
          set: function set(value) {
            this._selectedIcon = value;
            value = this._selected && this._selectedIcon ? this._selectedIcon : this._icon;
            if (this._iconObject) this._iconObject.icon = value;
          }
        }, {
          key: "title",
          get: function get() {
            return this._title;
          },
          set: function set(value) {
            this._title = value;
            if (this._titleObject) this._titleObject.text = this._selected && this._selectedTitle ? this._selectedTitle : this._title;
            this.updateGear(6);
          }
        }, {
          key: "text",
          get: function get() {
            return this.title;
          },
          set: function set(value) {
            this.title = value;
          }
        }, {
          key: "selectedTitle",
          get: function get() {
            return this._selectedTitle;
          },
          set: function set(value) {
            this._selectedTitle = value;
            if (this._titleObject) this._titleObject.text = this._selected && this._selectedTitle ? this._selectedTitle : this._title;
          }
        }, {
          key: "titleColor",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.color;else return Color.BLACK;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.color = value;
          }
        }, {
          key: "titleFontSize",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.fontSize;else return 0;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.fontSize = value;
          }
        }, {
          key: "sound",
          get: function get() {
            return this._sound;
          },
          set: function set(val) {
            this._sound = val;
          }
        }, {
          key: "soundVolumeScale",
          get: function get() {
            return this._soundVolumeScale;
          },
          set: function set(value) {
            this._soundVolumeScale = value;
          }
        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          },
          set: function set(val) {
            if (this._mode == ButtonMode.Common) return;
            if (this._selected != val) {
              this._selected = val;
              this.setCurrentState();
              if (this._selectedTitle && this._titleObject) this._titleObject.text = this._selected ? this._selectedTitle : this._title;
              if (this._selectedIcon) {
                var str = this._selected ? this._selectedIcon : this._icon;
                if (this._iconObject) this._iconObject.icon = str;
              }
              if (this._relatedController && this._parent && !this._parent._buildingDisplayList) {
                if (this._selected) {
                  this._relatedController.selectedPageId = this._relatedPageId;
                  if (this._relatedController.autoRadioGroupDepth) this._parent.adjustRadioGroupDepth(this, this._relatedController);
                } else if (this._mode == ButtonMode.Check && this._relatedController.selectedPageId == this._relatedPageId) this._relatedController.oppositePageId = this._relatedPageId;
              }
            }
          }
        }, {
          key: "mode",
          get: function get() {
            return this._mode;
          },
          set: function set(value) {
            if (this._mode != value) {
              if (value == ButtonMode.Common) this.selected = false;
              this._mode = value;
            }
          }
        }, {
          key: "relatedController",
          get: function get() {
            return this._relatedController;
          },
          set: function set(val) {
            this._relatedController = val;
          }
        }, {
          key: "relatedPageId",
          get: function get() {
            return this._relatedPageId;
          },
          set: function set(val) {
            this._relatedPageId = val;
          }
        }, {
          key: "changeStateOnClick",
          get: function get() {
            return this._changeStateOnClick;
          },
          set: function set(value) {
            this._changeStateOnClick = value;
          }
        }, {
          key: "linkedPopup",
          get: function get() {
            return this._linkedPopup;
          },
          set: function set(value) {
            this._linkedPopup = value;
          }
        }]);
        return GButton;
      }(GComponent));
      GButton.UP = "up";
      GButton.DOWN = "down";
      GButton.OVER = "over";
      GButton.SELECTED_OVER = "selectedOver";
      GButton.DISABLED = "disabled";
      GButton.SELECTED_DISABLED = "selectedDisabled";
      var GList = exports('GList', /*#__PURE__*/function (_GComponent5) {
        _inheritsLoose(GList, _GComponent5);
        function GList() {
          var _this27;
          _this27 = _GComponent5.call(this) || this;
          _this27.scrollItemToViewOnClick = true;
          _this27.foldInvisibleItems = false;
          _this27._lineCount = 0;
          _this27._columnCount = 0;
          _this27._lineGap = 0;
          _this27._columnGap = 0;
          _this27._lastSelectedIndex = 0;
          _this27._numItems = 0;
          _this27._realNumItems = 0;
          _this27._firstIndex = 0; //the top left index
          _this27._curLineItemCount = 0; //item count in one line
          _this27._curLineItemCount2 = 0; //只用在页面模式，表示垂直方向的项目数
          _this27._virtualListChanged = 0; //1-content changed, 2-size changed
          _this27.itemInfoVer = 0; //用来标志item是否在本次处理中已经被重用了
          _this27._node.name = "GList";
          _this27._trackBounds = true;
          _this27._pool = new GObjectPool();
          _this27._layout = ListLayoutType.SingleColumn;
          _this27._autoResizeItem = true;
          _this27._lastSelectedIndex = -1;
          _this27._selectionMode = ListSelectionMode.Single;
          _this27.opaque = true;
          _this27._align = AlignType.Left;
          _this27._verticalAlign = VertAlignType.Top;
          return _this27;
        }
        var _proto57 = GList.prototype;
        _proto57.dispose = function dispose() {
          this._partner.unschedule(this._refreshVirtualList);
          this._pool.clear();
          _GComponent5.prototype.dispose.call(this);
        };
        _proto57.getFromPool = function getFromPool(url) {
          if (!url) url = this._defaultItem;
          var obj = this._pool.getObject(url);
          if (obj) obj.visible = true;
          return obj;
        };
        _proto57.returnToPool = function returnToPool(obj) {
          this._pool.returnObject(obj);
        };
        _proto57.addChildAt = function addChildAt(child, index) {
          _GComponent5.prototype.addChildAt.call(this, child, index);
          if (child instanceof GButton) {
            child.selected = false;
            child.changeStateOnClick = false;
          }
          child.on(Event.CLICK, this.onClickItem, this);
          return child;
        };
        _proto57.addItem = function addItem(url) {
          if (!url) url = this._defaultItem;
          return this.addChild(UIPackage.createObjectFromURL(url));
        };
        _proto57.addItemFromPool = function addItemFromPool(url) {
          return this.addChild(this.getFromPool(url));
        };
        _proto57.removeChildAt = function removeChildAt(index, dispose) {
          var child = _GComponent5.prototype.removeChildAt.call(this, index, dispose);
          if (!dispose) child.off(Event.CLICK, this.onClickItem, this);
          return child;
        };
        _proto57.removeChildToPoolAt = function removeChildToPoolAt(index) {
          var child = _GComponent5.prototype.removeChildAt.call(this, index);
          this.returnToPool(child);
        };
        _proto57.removeChildToPool = function removeChildToPool(child) {
          _GComponent5.prototype.removeChild.call(this, child);
          this.returnToPool(child);
        };
        _proto57.removeChildrenToPool = function removeChildrenToPool(beginIndex, endIndex) {
          if (beginIndex == undefined) beginIndex = 0;
          if (endIndex == undefined) endIndex = -1;
          if (endIndex < 0 || endIndex >= this._children.length) endIndex = this._children.length - 1;
          for (var i = beginIndex; i <= endIndex; ++i) this.removeChildToPoolAt(beginIndex);
        };
        _proto57.getSelection = function getSelection(result) {
          if (!result) result = new Array();
          var i;
          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];
              if (ii.obj instanceof GButton && ii.obj.selected || !ii.obj && ii.selected) {
                var j = i;
                if (this._loop) {
                  j = i % this._numItems;
                  if (result.indexOf(j) != -1) continue;
                }
                result.push(j);
              }
            }
          } else {
            var cnt = this._children.length;
            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];
              if (obj instanceof GButton && obj.selected) result.push(i);
            }
          }
          return result;
        };
        _proto57.addSelection = function addSelection(index, scrollItToView) {
          if (this._selectionMode == ListSelectionMode.None) return;
          this.checkVirtualList();
          if (this._selectionMode == ListSelectionMode.Single) this.clearSelection();
          if (scrollItToView) this.scrollToView(index);
          this._lastSelectedIndex = index;
          var obj;
          if (this._virtual) {
            var ii = this._virtualItems[index];
            if (ii.obj) obj = ii.obj;
            ii.selected = true;
          } else obj = this.getChildAt(index);
          if (obj instanceof GButton && !obj.selected) {
            obj.selected = true;
            this.updateSelectionController(index);
          }
        };
        _proto57.removeSelection = function removeSelection(index) {
          if (this._selectionMode == ListSelectionMode.None) return;
          var obj;
          if (this._virtual) {
            var ii = this._virtualItems[index];
            if (ii.obj) obj = ii.obj;
            ii.selected = false;
          } else obj = this.getChildAt(index);
          if (obj instanceof GButton) obj.selected = false;
        };
        _proto57.clearSelection = function clearSelection() {
          var i;
          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];
              if (ii.obj instanceof GButton) ii.obj.selected = false;
              ii.selected = false;
            }
          } else {
            var cnt = this._children.length;
            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];
              if (obj instanceof GButton) obj.selected = false;
            }
          }
        };
        _proto57.clearSelectionExcept = function clearSelectionExcept(g) {
          var i;
          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];
              if (ii.obj != g) {
                if (ii.obj instanceof GButton) ii.obj.selected = false;
                ii.selected = false;
              }
            }
          } else {
            var cnt = this._children.length;
            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];
              if (obj instanceof GButton && obj != g) obj.selected = false;
            }
          }
        };
        _proto57.selectAll = function selectAll() {
          this.checkVirtualList();
          var last = -1;
          var i;
          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];
              if (ii.obj instanceof GButton && !ii.obj.selected) {
                ii.obj.selected = true;
                last = i;
              }
              ii.selected = true;
            }
          } else {
            var cnt = this._children.length;
            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];
              if (obj instanceof GButton && !obj.selected) {
                obj.selected = true;
                last = i;
              }
            }
          }
          if (last != -1) this.updateSelectionController(last);
        };
        _proto57.selectNone = function selectNone() {
          this.clearSelection();
        };
        _proto57.selectReverse = function selectReverse() {
          this.checkVirtualList();
          var last = -1;
          var i;
          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];
              if (ii.obj instanceof GButton) {
                ii.obj.selected = !ii.obj.selected;
                if (ii.obj.selected) last = i;
              }
              ii.selected = !ii.selected;
            }
          } else {
            var cnt = this._children.length;
            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];
              if (obj instanceof GButton) {
                obj.selected = !obj.selected;
                if (obj.selected) last = i;
              }
            }
          }
          if (last != -1) this.updateSelectionController(last);
        };
        _proto57.handleArrowKey = function handleArrowKey(dir) {
          var index = this.selectedIndex;
          if (index == -1) return;
          switch (dir) {
            case 1:
              //up
              if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowVertical) {
                index--;
                if (index >= 0) {
                  this.clearSelection();
                  this.addSelection(index, true);
                }
              } else if (this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.Pagination) {
                var current = this._children[index];
                var k = 0;
                for (var i = index - 1; i >= 0; i--) {
                  var obj = this._children[i];
                  if (obj.y != current.y) {
                    current = obj;
                    break;
                  }
                  k++;
                }
                for (; i >= 0; i--) {
                  obj = this._children[i];
                  if (obj.y != current.y) {
                    this.clearSelection();
                    this.addSelection(i + k + 1, true);
                    break;
                  }
                }
              }
              break;
            case 3:
              //right
              if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.Pagination) {
                index++;
                if (index < this._children.length) {
                  this.clearSelection();
                  this.addSelection(index, true);
                }
              } else if (this._layout == ListLayoutType.FlowVertical) {
                current = this._children[index];
                k = 0;
                var cnt = this._children.length;
                for (i = index + 1; i < cnt; i++) {
                  obj = this._children[i];
                  if (obj.x != current.x) {
                    current = obj;
                    break;
                  }
                  k++;
                }
                for (; i < cnt; i++) {
                  obj = this._children[i];
                  if (obj.x != current.x) {
                    this.clearSelection();
                    this.addSelection(i - k - 1, true);
                    break;
                  }
                }
              }
              break;
            case 5:
              //down
              if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowVertical) {
                index++;
                if (index < this._children.length) {
                  this.clearSelection();
                  this.addSelection(index, true);
                }
              } else if (this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.Pagination) {
                current = this._children[index];
                k = 0;
                cnt = this._children.length;
                for (i = index + 1; i < cnt; i++) {
                  obj = this._children[i];
                  if (obj.y != current.y) {
                    current = obj;
                    break;
                  }
                  k++;
                }
                for (; i < cnt; i++) {
                  obj = this._children[i];
                  if (obj.y != current.y) {
                    this.clearSelection();
                    this.addSelection(i - k - 1, true);
                    break;
                  }
                }
              }
              break;
            case 7:
              //left
              if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.Pagination) {
                index--;
                if (index >= 0) {
                  this.clearSelection();
                  this.addSelection(index, true);
                }
              } else if (this._layout == ListLayoutType.FlowVertical) {
                current = this._children[index];
                k = 0;
                for (i = index - 1; i >= 0; i--) {
                  obj = this._children[i];
                  if (obj.x != current.x) {
                    current = obj;
                    break;
                  }
                  k++;
                }
                for (; i >= 0; i--) {
                  obj = this._children[i];
                  if (obj.x != current.x) {
                    this.clearSelection();
                    this.addSelection(i + k + 1, true);
                    break;
                  }
                }
              }
              break;
          }
        };
        _proto57.onClickItem = function onClickItem(evt) {
          if (this._scrollPane && this._scrollPane.isDragged) return;
          var item = GObject.cast(evt.currentTarget);
          this.setSelectionOnEvent(item, evt);
          if (this._scrollPane && this.scrollItemToViewOnClick) this._scrollPane.scrollToView(item, true);
          this.dispatchItemEvent(item, evt);
        };
        _proto57.dispatchItemEvent = function dispatchItemEvent(item, evt) {
          this._node.emit(Event.CLICK_ITEM, item, evt);
        };
        _proto57.setSelectionOnEvent = function setSelectionOnEvent(item, evt) {
          if (!(item instanceof GButton) || this._selectionMode == ListSelectionMode.None) return;
          var dontChangeLastIndex = false;
          var index = this.childIndexToItemIndex(this.getChildIndex(item));
          if (this._selectionMode == ListSelectionMode.Single) {
            if (!item.selected) {
              this.clearSelectionExcept(item);
              item.selected = true;
            }
          } else {
            if (evt.isShiftDown) {
              if (!item.selected) {
                if (this._lastSelectedIndex != -1) {
                  var min = Math.min(this._lastSelectedIndex, index);
                  var max = Math.max(this._lastSelectedIndex, index);
                  max = Math.min(max, this.numItems - 1);
                  var i;
                  if (this._virtual) {
                    for (i = min; i <= max; i++) {
                      var ii = this._virtualItems[i];
                      if (ii.obj instanceof GButton) ii.obj.selected = true;
                      ii.selected = true;
                    }
                  } else {
                    for (i = min; i <= max; i++) {
                      var obj = this.getChildAt(i);
                      if (obj instanceof GButton) obj.selected = true;
                    }
                  }
                  dontChangeLastIndex = true;
                } else {
                  item.selected = true;
                }
              }
            } else if (evt.isCtrlDown || this._selectionMode == ListSelectionMode.Multiple_SingleClick) {
              item.selected = !item.selected;
            } else {
              if (!item.selected) {
                this.clearSelectionExcept(item);
                item.selected = true;
              } else this.clearSelectionExcept(item);
            }
          }
          if (!dontChangeLastIndex) this._lastSelectedIndex = index;
          if (item.selected) this.updateSelectionController(index);
        };
        _proto57.resizeToFit = function resizeToFit(itemCount, minSize) {
          if (itemCount === void 0) {
            itemCount = Number.POSITIVE_INFINITY;
          }
          if (minSize === void 0) {
            minSize = 0;
          }
          this.ensureBoundsCorrect();
          var curCount = this.numItems;
          if (itemCount > curCount) itemCount = curCount;
          if (this._virtual) {
            var lineCount = Math.ceil(itemCount / this._curLineItemCount);
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) this.viewHeight = lineCount * this._itemSize.height + Math.max(0, lineCount - 1) * this._lineGap;else this.viewWidth = lineCount * this._itemSize.width + Math.max(0, lineCount - 1) * this._columnGap;
          } else if (itemCount == 0) {
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) this.viewHeight = minSize;else this.viewWidth = minSize;
          } else {
            var i = itemCount - 1;
            var obj = null;
            while (i >= 0) {
              obj = this.getChildAt(i);
              if (!this.foldInvisibleItems || obj.visible) break;
              i--;
            }
            if (i < 0) {
              if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) this.viewHeight = minSize;else this.viewWidth = minSize;
            } else {
              var size = 0;
              if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
                size = obj.y + obj.height;
                if (size < minSize) size = minSize;
                this.viewHeight = size;
              } else {
                size = obj.x + obj.width;
                if (size < minSize) size = minSize;
                this.viewWidth = size;
              }
            }
          }
        };
        _proto57.getMaxItemWidth = function getMaxItemWidth() {
          var cnt = this._children.length;
          var max = 0;
          for (var i = 0; i < cnt; i++) {
            var child = this.getChildAt(i);
            if (child.width > max) max = child.width;
          }
          return max;
        };
        _proto57.handleSizeChanged = function handleSizeChanged() {
          _GComponent5.prototype.handleSizeChanged.call(this);
          this.setBoundsChangedFlag();
          if (this._virtual) this.setVirtualListChangedFlag(true);
        };
        _proto57.handleControllerChanged = function handleControllerChanged(c) {
          _GComponent5.prototype.handleControllerChanged.call(this, c);
          if (this._selectionController == c) this.selectedIndex = c.selectedIndex;
        };
        _proto57.updateSelectionController = function updateSelectionController(index) {
          if (this._selectionController && !this._selectionController.changing && index < this._selectionController.pageCount) {
            var c = this._selectionController;
            this._selectionController = null;
            c.selectedIndex = index;
            this._selectionController = c;
          }
        };
        _proto57.getSnappingPosition = function getSnappingPosition(xValue, yValue, resultPoint) {
          if (this._virtual) {
            resultPoint = resultPoint || new Vec2();
            var saved;
            var index;
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
              saved = yValue;
              s_n = yValue;
              index = this.getIndexOnPos1(false);
              yValue = s_n;
              if (index < this._virtualItems.length && saved - yValue > this._virtualItems[index].height / 2 && index < this._realNumItems) yValue += this._virtualItems[index].height + this._lineGap;
            } else if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowVertical) {
              saved = xValue;
              s_n = xValue;
              index = this.getIndexOnPos2(false);
              xValue = s_n;
              if (index < this._virtualItems.length && saved - xValue > this._virtualItems[index].width / 2 && index < this._realNumItems) xValue += this._virtualItems[index].width + this._columnGap;
            } else {
              saved = xValue;
              s_n = xValue;
              index = this.getIndexOnPos3(false);
              xValue = s_n;
              if (index < this._virtualItems.length && saved - xValue > this._virtualItems[index].width / 2 && index < this._realNumItems) xValue += this._virtualItems[index].width + this._columnGap;
            }
            resultPoint.x = xValue;
            resultPoint.y = yValue;
            return resultPoint;
          } else {
            return _GComponent5.prototype.getSnappingPosition.call(this, xValue, yValue, resultPoint);
          }
        };
        _proto57.scrollToView = function scrollToView(index, ani, setFirst) {
          if (this._virtual) {
            if (this._numItems == 0) return;
            this.checkVirtualList();
            if (index >= this._virtualItems.length) throw new Error("Invalid child index: " + index + ">" + this._virtualItems.length);
            if (this._loop) index = Math.floor(this._firstIndex / this._numItems) * this._numItems + index;
            var rect;
            var ii = this._virtualItems[index];
            var pos = 0;
            var i;
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
              for (i = this._curLineItemCount - 1; i < index; i += this._curLineItemCount) pos += this._virtualItems[i].height + this._lineGap;
              rect = new Rect(0, pos, this._itemSize.width, ii.height);
            } else if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowVertical) {
              for (i = this._curLineItemCount - 1; i < index; i += this._curLineItemCount) pos += this._virtualItems[i].width + this._columnGap;
              rect = new Rect(pos, 0, ii.width, this._itemSize.height);
            } else {
              var page = index / (this._curLineItemCount * this._curLineItemCount2);
              rect = new Rect(page * this.viewWidth + index % this._curLineItemCount * (ii.width + this._columnGap), index / this._curLineItemCount % this._curLineItemCount2 * (ii.height + this._lineGap), ii.width, ii.height);
            }
            if (this._scrollPane) this._scrollPane.scrollToView(rect, ani, setFirst);
          } else {
            var obj = this.getChildAt(index);
            if (obj) {
              if (this._scrollPane) this._scrollPane.scrollToView(obj, ani, setFirst);else if (this.parent && this.parent.scrollPane) this.parent.scrollPane.scrollToView(obj, ani, setFirst);
            }
          }
        };
        _proto57.getFirstChildInView = function getFirstChildInView() {
          return this.childIndexToItemIndex(_GComponent5.prototype.getFirstChildInView.call(this));
        };
        _proto57.childIndexToItemIndex = function childIndexToItemIndex(index) {
          if (!this._virtual) return index;
          if (this._layout == ListLayoutType.Pagination) {
            for (var i = this._firstIndex; i < this._realNumItems; i++) {
              if (this._virtualItems[i].obj) {
                index--;
                if (index < 0) return i;
              }
            }
            return index;
          } else {
            index += this._firstIndex;
            if (this._loop && this._numItems > 0) index = index % this._numItems;
            return index;
          }
        };
        _proto57.itemIndexToChildIndex = function itemIndexToChildIndex(index) {
          if (!this._virtual) return index;
          if (this._layout == ListLayoutType.Pagination) {
            return this.getChildIndex(this._virtualItems[index].obj);
          } else {
            if (this._loop && this._numItems > 0) {
              var j = this._firstIndex % this._numItems;
              if (index >= j) index = index - j;else index = this._numItems - j + index;
            } else index -= this._firstIndex;
            return index;
          }
        };
        _proto57.setVirtual = function setVirtual() {
          this._setVirtual(false);
        } /// <summary>
        /// Set the list to be virtual list, and has loop behavior.
        /// </summary>
        ;
        _proto57.setVirtualAndLoop = function setVirtualAndLoop() {
          this._setVirtual(true);
        } /// <summary>
        /// Set the list to be virtual list.
        /// </summary>
        ;
        _proto57._setVirtual = function _setVirtual(loop) {
          if (!this._virtual) {
            if (!this._scrollPane) throw new Error("Virtual list must be scrollable!");
            if (loop) {
              if (this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.FlowVertical) throw new Error("Loop list is not supported for FlowHorizontal or FlowVertical layout!");
              this._scrollPane.bouncebackEffect = false;
            }
            this._virtual = true;
            this._loop = loop;
            this._virtualItems = new Array();
            this.removeChildrenToPool();
            if (this._itemSize == null) {
              this._itemSize = new Size(0, 0);
              var obj = this.getFromPool(null);
              if (!obj) {
                throw new Error("Virtual List must have a default list item resource.");
              } else {
                this._itemSize.width = obj.width;
                this._itemSize.height = obj.height;
              }
              this.returnToPool(obj);
            }
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
              this._scrollPane.scrollStep = this._itemSize.height;
              if (this._loop) this._scrollPane._loop = 2;
            } else {
              this._scrollPane.scrollStep = this._itemSize.width;
              if (this._loop) this._scrollPane._loop = 1;
            }
            this._node.on(Event.SCROLL, this.__scrolled, this);
            this.setVirtualListChangedFlag(true);
          }
        } /// <summary>
        /// Set the list item count. 
        /// If the list is not virtual, specified number of items will be created. 
        /// If the list is virtual, only items in view will be created.
        /// </summary>
        ;
        _proto57.refreshVirtualList = function refreshVirtualList() {
          this.setVirtualListChangedFlag(false);
        };
        _proto57.checkVirtualList = function checkVirtualList() {
          if (this._virtualListChanged != 0) {
            this._refreshVirtualList();
            this._partner.unschedule(this._refreshVirtualList);
          }
        };
        _proto57.setVirtualListChangedFlag = function setVirtualListChangedFlag(layoutChanged) {
          if (layoutChanged) this._virtualListChanged = 2;else if (this._virtualListChanged == 0) this._virtualListChanged = 1;
          this._partner.callLater(this._refreshVirtualList);
        };
        _proto57._refreshVirtualList = function _refreshVirtualList(dt) {
          if (!isNaN(dt)) {
            var _t = GObject.cast(this.node);
            _t._refreshVirtualList();
            return;
          }
          var layoutChanged = this._virtualListChanged == 2;
          this._virtualListChanged = 0;
          this._eventLocked = true;
          if (layoutChanged) {
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.SingleRow) this._curLineItemCount = 1;else if (this._layout == ListLayoutType.FlowHorizontal) {
              if (this._columnCount > 0) this._curLineItemCount = this._columnCount;else {
                this._curLineItemCount = Math.floor((this._scrollPane.viewWidth + this._columnGap) / (this._itemSize.width + this._columnGap));
                if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
              }
            } else if (this._layout == ListLayoutType.FlowVertical) {
              if (this._lineCount > 0) this._curLineItemCount = this._lineCount;else {
                this._curLineItemCount = Math.floor((this._scrollPane.viewHeight + this._lineGap) / (this._itemSize.height + this._lineGap));
                if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
              }
            } else
              //pagination
              {
                if (this._columnCount > 0) this._curLineItemCount = this._columnCount;else {
                  this._curLineItemCount = Math.floor((this._scrollPane.viewWidth + this._columnGap) / (this._itemSize.width + this._columnGap));
                  if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
                }
                if (this._lineCount > 0) this._curLineItemCount2 = this._lineCount;else {
                  this._curLineItemCount2 = Math.floor((this._scrollPane.viewHeight + this._lineGap) / (this._itemSize.height + this._lineGap));
                  if (this._curLineItemCount2 <= 0) this._curLineItemCount2 = 1;
                }
              }
          }
          var ch = 0,
            cw = 0;
          if (this._realNumItems > 0) {
            var i;
            var len = Math.ceil(this._realNumItems / this._curLineItemCount) * this._curLineItemCount;
            var len2 = Math.min(this._curLineItemCount, this._realNumItems);
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
              for (i = 0; i < len; i += this._curLineItemCount) ch += this._virtualItems[i].height + this._lineGap;
              if (ch > 0) ch -= this._lineGap;
              if (this._autoResizeItem) cw = this._scrollPane.viewWidth;else {
                for (i = 0; i < len2; i++) cw += this._virtualItems[i].width + this._columnGap;
                if (cw > 0) cw -= this._columnGap;
              }
            } else if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowVertical) {
              for (i = 0; i < len; i += this._curLineItemCount) cw += this._virtualItems[i].width + this._columnGap;
              if (cw > 0) cw -= this._columnGap;
              if (this._autoResizeItem) ch = this._scrollPane.viewHeight;else {
                for (i = 0; i < len2; i++) ch += this._virtualItems[i].height + this._lineGap;
                if (ch > 0) ch -= this._lineGap;
              }
            } else {
              var pageCount = Math.ceil(len / (this._curLineItemCount * this._curLineItemCount2));
              cw = pageCount * this.viewWidth;
              ch = this.viewHeight;
            }
          }
          this.handleAlign(cw, ch);
          this._scrollPane.setContentSize(cw, ch);
          this._eventLocked = false;
          this.handleScroll(true);
        };
        _proto57.__scrolled = function __scrolled(evt) {
          this.handleScroll(false);
        };
        _proto57.getIndexOnPos1 = function getIndexOnPos1(forceUpdate) {
          if (this._realNumItems < this._curLineItemCount) {
            s_n = 0;
            return 0;
          }
          var i;
          var pos2;
          var pos3;
          if (this.numChildren > 0 && !forceUpdate) {
            pos2 = this.getChildAt(0).y;
            if (pos2 > s_n) {
              for (i = this._firstIndex - this._curLineItemCount; i >= 0; i -= this._curLineItemCount) {
                pos2 -= this._virtualItems[i].height + this._lineGap;
                if (pos2 <= s_n) {
                  s_n = pos2;
                  return i;
                }
              }
              s_n = 0;
              return 0;
            } else {
              for (i = this._firstIndex; i < this._realNumItems; i += this._curLineItemCount) {
                pos3 = pos2 + this._virtualItems[i].height + this._lineGap;
                if (pos3 > s_n) {
                  s_n = pos2;
                  return i;
                }
                pos2 = pos3;
              }
              s_n = pos2;
              return this._realNumItems - this._curLineItemCount;
            }
          } else {
            pos2 = 0;
            for (i = 0; i < this._realNumItems; i += this._curLineItemCount) {
              pos3 = pos2 + this._virtualItems[i].height + this._lineGap;
              if (pos3 > s_n) {
                s_n = pos2;
                return i;
              }
              pos2 = pos3;
            }
            s_n = pos2;
            return this._realNumItems - this._curLineItemCount;
          }
        };
        _proto57.getIndexOnPos2 = function getIndexOnPos2(forceUpdate) {
          if (this._realNumItems < this._curLineItemCount) {
            s_n = 0;
            return 0;
          }
          var i;
          var pos2;
          var pos3;
          if (this.numChildren > 0 && !forceUpdate) {
            pos2 = this.getChildAt(0).x;
            if (pos2 > s_n) {
              for (i = this._firstIndex - this._curLineItemCount; i >= 0; i -= this._curLineItemCount) {
                pos2 -= this._virtualItems[i].width + this._columnGap;
                if (pos2 <= s_n) {
                  s_n = pos2;
                  return i;
                }
              }
              s_n = 0;
              return 0;
            } else {
              for (i = this._firstIndex; i < this._realNumItems; i += this._curLineItemCount) {
                pos3 = pos2 + this._virtualItems[i].width + this._columnGap;
                if (pos3 > s_n) {
                  s_n = pos2;
                  return i;
                }
                pos2 = pos3;
              }
              s_n = pos2;
              return this._realNumItems - this._curLineItemCount;
            }
          } else {
            pos2 = 0;
            for (i = 0; i < this._realNumItems; i += this._curLineItemCount) {
              pos3 = pos2 + this._virtualItems[i].width + this._columnGap;
              if (pos3 > s_n) {
                s_n = pos2;
                return i;
              }
              pos2 = pos3;
            }
            s_n = pos2;
            return this._realNumItems - this._curLineItemCount;
          }
        };
        _proto57.getIndexOnPos3 = function getIndexOnPos3(forceUpdate) {
          if (this._realNumItems < this._curLineItemCount) {
            s_n = 0;
            return 0;
          }
          var viewWidth = this.viewWidth;
          var page = Math.floor(s_n / viewWidth);
          var startIndex = page * (this._curLineItemCount * this._curLineItemCount2);
          var pos2 = page * viewWidth;
          var i;
          var pos3;
          for (i = 0; i < this._curLineItemCount; i++) {
            pos3 = pos2 + this._virtualItems[startIndex + i].width + this._columnGap;
            if (pos3 > s_n) {
              s_n = pos2;
              return startIndex + i;
            }
            pos2 = pos3;
          }
          s_n = pos2;
          return startIndex + this._curLineItemCount - 1;
        };
        _proto57.handleScroll = function handleScroll(forceUpdate) {
          if (this._eventLocked) return;
          if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
            var enterCounter = 0;
            while (this.handleScroll1(forceUpdate)) {
              enterCounter++;
              forceUpdate = false;
              if (enterCounter > 20) {
                console.log("FairyGUI: list will never be filled as the item renderer function always returns a different size.");
                break;
              }
            }
            this.handleArchOrder1();
          } else if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowVertical) {
            enterCounter = 0;
            while (this.handleScroll2(forceUpdate)) {
              enterCounter++;
              forceUpdate = false;
              if (enterCounter > 20) {
                console.log("FairyGUI: list will never be filled as the item renderer function always returns a different size.");
                break;
              }
            }
            this.handleArchOrder2();
          } else {
            this.handleScroll3(forceUpdate);
          }
          this._boundsChanged = false;
        };
        _proto57.handleScroll1 = function handleScroll1(forceUpdate) {
          var pos = this._scrollPane.scrollingPosY;
          var max = pos + this._scrollPane.viewHeight;
          var end = max == this._scrollPane.contentHeight; //这个标志表示当前需要滚动到最末，无论内容变化大小
          //寻找当前位置的第一条项目
          s_n = pos;
          var newFirstIndex = this.getIndexOnPos1(forceUpdate);
          pos = s_n;
          if (newFirstIndex == this._firstIndex && !forceUpdate) {
            return false;
          }
          var oldFirstIndex = this._firstIndex;
          this._firstIndex = newFirstIndex;
          var curIndex = newFirstIndex;
          var forward = oldFirstIndex > newFirstIndex;
          var childCount = this.numChildren;
          var lastIndex = oldFirstIndex + childCount - 1;
          var reuseIndex = forward ? lastIndex : oldFirstIndex;
          var curX = 0,
            curY = pos;
          var needRender;
          var deltaSize = 0;
          var firstItemDeltaSize = 0;
          var url = this._defaultItem;
          var ii, ii2;
          var i, j;
          var partSize = (this._scrollPane.viewWidth - this._columnGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
          this.itemInfoVer++;
          while (curIndex < this._realNumItems && (end || curY < max)) {
            ii = this._virtualItems[curIndex];
            if (!ii.obj || forceUpdate) {
              if (this.itemProvider != null) {
                url = this.itemProvider(curIndex % this._numItems);
                if (url == null) url = this._defaultItem;
                url = UIPackage.normalizeURL(url);
              }
              if (ii.obj && ii.obj.resourceURL != url) {
                if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
                this.removeChildToPool(ii.obj);
                ii.obj = null;
              }
            }
            if (!ii.obj) {
              //搜索最适合的重用item，保证每次刷新需要新建或者重新render的item最少
              if (forward) {
                for (j = reuseIndex; j >= oldFirstIndex; j--) {
                  ii2 = this._virtualItems[j];
                  if (ii2.obj && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                    if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                    ii.obj = ii2.obj;
                    ii2.obj = null;
                    if (j == reuseIndex) reuseIndex--;
                    break;
                  }
                }
              } else {
                for (j = reuseIndex; j <= lastIndex; j++) {
                  ii2 = this._virtualItems[j];
                  if (ii2.obj && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                    if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                    ii.obj = ii2.obj;
                    ii2.obj = null;
                    if (j == reuseIndex) reuseIndex++;
                    break;
                  }
                }
              }
              if (ii.obj) {
                this.setChildIndex(ii.obj, forward ? curIndex - newFirstIndex : this.numChildren);
              } else {
                ii.obj = this._pool.getObject(url);
                if (forward) this.addChildAt(ii.obj, curIndex - newFirstIndex);else this.addChild(ii.obj);
              }
              if (ii.obj instanceof GButton) ii.obj.selected = ii.selected;
              needRender = true;
            } else needRender = forceUpdate;
            if (needRender) {
              if (this._autoResizeItem && (this._layout == ListLayoutType.SingleColumn || this._columnCount > 0)) ii.obj.setSize(partSize, ii.obj.height, true);
              this.itemRenderer(curIndex % this._numItems, ii.obj);
              if (curIndex % this._curLineItemCount == 0) {
                deltaSize += Math.ceil(ii.obj.height) - ii.height;
                if (curIndex == newFirstIndex && oldFirstIndex > newFirstIndex) {
                  //当内容向下滚动时，如果新出现的项目大小发生变化，需要做一个位置补偿，才不会导致滚动跳动
                  firstItemDeltaSize = Math.ceil(ii.obj.height) - ii.height;
                }
              }
              ii.width = Math.ceil(ii.obj.width);
              ii.height = Math.ceil(ii.obj.height);
            }
            ii.updateFlag = this.itemInfoVer;
            ii.obj.setPosition(curX, curY);
            if (curIndex == newFirstIndex)
              //要显示多一条才不会穿帮
              max += ii.height;
            curX += ii.width + this._columnGap;
            if (curIndex % this._curLineItemCount == this._curLineItemCount - 1) {
              curX = 0;
              curY += ii.height + this._lineGap;
            }
            curIndex++;
          }
          for (i = 0; i < childCount; i++) {
            ii = this._virtualItems[oldFirstIndex + i];
            if (ii.updateFlag != this.itemInfoVer && ii.obj) {
              if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
              this.removeChildToPool(ii.obj);
              ii.obj = null;
            }
          }
          childCount = this._children.length;
          for (i = 0; i < childCount; i++) {
            var obj = this._virtualItems[newFirstIndex + i].obj;
            if (this._children[i] != obj) this.setChildIndex(obj, i);
          }
          if (deltaSize != 0 || firstItemDeltaSize != 0) this._scrollPane.changeContentSizeOnScrolling(0, deltaSize, 0, firstItemDeltaSize);
          if (curIndex > 0 && this.numChildren > 0 && this._container.position.y <= 0 && this.getChildAt(0).y > -this._container.position.y)
            //最后一页没填满！
            return true;else return false;
        };
        _proto57.handleScroll2 = function handleScroll2(forceUpdate) {
          var pos = this._scrollPane.scrollingPosX;
          var max = pos + this._scrollPane.viewWidth;
          var end = pos == this._scrollPane.contentWidth; //这个标志表示当前需要滚动到最末，无论内容变化大小
          //寻找当前位置的第一条项目
          s_n = pos;
          var newFirstIndex = this.getIndexOnPos2(forceUpdate);
          pos = s_n;
          if (newFirstIndex == this._firstIndex && !forceUpdate) {
            return false;
          }
          var oldFirstIndex = this._firstIndex;
          this._firstIndex = newFirstIndex;
          var curIndex = newFirstIndex;
          var forward = oldFirstIndex > newFirstIndex;
          var childCount = this.numChildren;
          var lastIndex = oldFirstIndex + childCount - 1;
          var reuseIndex = forward ? lastIndex : oldFirstIndex;
          var curX = pos,
            curY = 0;
          var needRender;
          var deltaSize = 0;
          var firstItemDeltaSize = 0;
          var url = this._defaultItem;
          var ii, ii2;
          var i, j;
          var partSize = (this._scrollPane.viewHeight - this._lineGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
          this.itemInfoVer++;
          while (curIndex < this._realNumItems && (end || curX < max)) {
            ii = this._virtualItems[curIndex];
            if (!ii.obj || forceUpdate) {
              if (this.itemProvider != null) {
                url = this.itemProvider(curIndex % this._numItems);
                if (url == null) url = this._defaultItem;
                url = UIPackage.normalizeURL(url);
              }
              if (ii.obj && ii.obj.resourceURL != url) {
                if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
                this.removeChildToPool(ii.obj);
                ii.obj = null;
              }
            }
            if (!ii.obj) {
              if (forward) {
                for (j = reuseIndex; j >= oldFirstIndex; j--) {
                  ii2 = this._virtualItems[j];
                  if (ii2.obj && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                    if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                    ii.obj = ii2.obj;
                    ii2.obj = null;
                    if (j == reuseIndex) reuseIndex--;
                    break;
                  }
                }
              } else {
                for (j = reuseIndex; j <= lastIndex; j++) {
                  ii2 = this._virtualItems[j];
                  if (ii2.obj && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                    if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                    ii.obj = ii2.obj;
                    ii2.obj = null;
                    if (j == reuseIndex) reuseIndex++;
                    break;
                  }
                }
              }
              if (ii.obj) {
                this.setChildIndex(ii.obj, forward ? curIndex - newFirstIndex : this.numChildren);
              } else {
                ii.obj = this._pool.getObject(url);
                if (forward) this.addChildAt(ii.obj, curIndex - newFirstIndex);else this.addChild(ii.obj);
              }
              if (ii.obj instanceof GButton) ii.obj.selected = ii.selected;
              needRender = true;
            } else needRender = forceUpdate;
            if (needRender) {
              if (this._autoResizeItem && (this._layout == ListLayoutType.SingleRow || this._lineCount > 0)) ii.obj.setSize(ii.obj.width, partSize, true);
              this.itemRenderer(curIndex % this._numItems, ii.obj);
              if (curIndex % this._curLineItemCount == 0) {
                deltaSize += Math.ceil(ii.obj.width) - ii.width;
                if (curIndex == newFirstIndex && oldFirstIndex > newFirstIndex) {
                  //当内容向下滚动时，如果新出现的一个项目大小发生变化，需要做一个位置补偿，才不会导致滚动跳动
                  firstItemDeltaSize = Math.ceil(ii.obj.width) - ii.width;
                }
              }
              ii.width = Math.ceil(ii.obj.width);
              ii.height = Math.ceil(ii.obj.height);
            }
            ii.updateFlag = this.itemInfoVer;
            ii.obj.setPosition(curX, curY);
            if (curIndex == newFirstIndex)
              //要显示多一条才不会穿帮
              max += ii.width;
            curY += ii.height + this._lineGap;
            if (curIndex % this._curLineItemCount == this._curLineItemCount - 1) {
              curY = 0;
              curX += ii.width + this._columnGap;
            }
            curIndex++;
          }
          for (i = 0; i < childCount; i++) {
            ii = this._virtualItems[oldFirstIndex + i];
            if (ii.updateFlag != this.itemInfoVer && ii.obj) {
              if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
              this.removeChildToPool(ii.obj);
              ii.obj = null;
            }
          }
          childCount = this._children.length;
          for (i = 0; i < childCount; i++) {
            var obj = this._virtualItems[newFirstIndex + i].obj;
            if (this._children[i] != obj) this.setChildIndex(obj, i);
          }
          if (deltaSize != 0 || firstItemDeltaSize != 0) this._scrollPane.changeContentSizeOnScrolling(deltaSize, 0, firstItemDeltaSize, 0);
          if (curIndex > 0 && this.numChildren > 0 && this._container.position.x <= 0 && this.getChildAt(0).x > -this._container.position.x)
            //最后一页没填满！
            return true;else return false;
        };
        _proto57.handleScroll3 = function handleScroll3(forceUpdate) {
          var pos = this._scrollPane.scrollingPosX; //寻找当前位置的第一条项目
          s_n = pos;
          var newFirstIndex = this.getIndexOnPos3(forceUpdate);
          pos = s_n;
          if (newFirstIndex == this._firstIndex && !forceUpdate) return;
          var oldFirstIndex = this._firstIndex;
          this._firstIndex = newFirstIndex; //分页模式不支持不等高，所以渲染满一页就好了
          var reuseIndex = oldFirstIndex;
          var virtualItemCount = this._virtualItems.length;
          var pageSize = this._curLineItemCount * this._curLineItemCount2;
          var startCol = newFirstIndex % this._curLineItemCount;
          var viewWidth = this.viewWidth;
          var page = Math.floor(newFirstIndex / pageSize);
          var startIndex = page * pageSize;
          var lastIndex = startIndex + pageSize * 2; //测试两页
          var needRender;
          var i;
          var ii, ii2;
          var col;
          var url = this._defaultItem;
          var partWidth = (this._scrollPane.viewWidth - this._columnGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
          var partHeight = (this._scrollPane.viewHeight - this._lineGap * (this._curLineItemCount2 - 1)) / this._curLineItemCount2;
          this.itemInfoVer++; //先标记这次要用到的项目
          for (i = startIndex; i < lastIndex; i++) {
            if (i >= this._realNumItems) continue;
            col = i % this._curLineItemCount;
            if (i - startIndex < pageSize) {
              if (col < startCol) continue;
            } else {
              if (col > startCol) continue;
            }
            ii = this._virtualItems[i];
            ii.updateFlag = this.itemInfoVer;
          }
          var lastObj = null;
          var insertIndex = 0;
          for (i = startIndex; i < lastIndex; i++) {
            if (i >= this._realNumItems) continue;
            ii = this._virtualItems[i];
            if (ii.updateFlag != this.itemInfoVer) continue;
            if (!ii.obj) {
              //寻找看有没有可重用的
              while (reuseIndex < virtualItemCount) {
                ii2 = this._virtualItems[reuseIndex];
                if (ii2.obj && ii2.updateFlag != this.itemInfoVer) {
                  if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                  ii.obj = ii2.obj;
                  ii2.obj = null;
                  break;
                }
                reuseIndex++;
              }
              if (insertIndex == -1) insertIndex = this.getChildIndex(lastObj) + 1;
              if (!ii.obj) {
                if (this.itemProvider != null) {
                  url = this.itemProvider(i % this._numItems);
                  if (url == null) url = this._defaultItem;
                  url = UIPackage.normalizeURL(url);
                }
                ii.obj = this._pool.getObject(url);
                this.addChildAt(ii.obj, insertIndex);
              } else {
                insertIndex = this.setChildIndexBefore(ii.obj, insertIndex);
              }
              insertIndex++;
              if (ii.obj instanceof GButton) ii.obj.selected = ii.selected;
              needRender = true;
            } else {
              needRender = forceUpdate;
              insertIndex = -1;
              lastObj = ii.obj;
            }
            if (needRender) {
              if (this._autoResizeItem) {
                if (this._curLineItemCount == this._columnCount && this._curLineItemCount2 == this._lineCount) ii.obj.setSize(partWidth, partHeight, true);else if (this._curLineItemCount == this._columnCount) ii.obj.setSize(partWidth, ii.obj.height, true);else if (this._curLineItemCount2 == this._lineCount) ii.obj.setSize(ii.obj.width, partHeight, true);
              }
              this.itemRenderer(i % this._numItems, ii.obj);
              ii.width = Math.ceil(ii.obj.width);
              ii.height = Math.ceil(ii.obj.height);
            }
          } //排列item
          var borderX = startIndex / pageSize * viewWidth;
          var xx = borderX;
          var yy = 0;
          var lineHeight = 0;
          for (i = startIndex; i < lastIndex; i++) {
            if (i >= this._realNumItems) continue;
            ii = this._virtualItems[i];
            if (ii.updateFlag == this.itemInfoVer) ii.obj.setPosition(xx, yy);
            if (ii.height > lineHeight) lineHeight = ii.height;
            if (i % this._curLineItemCount == this._curLineItemCount - 1) {
              xx = borderX;
              yy += lineHeight + this._lineGap;
              lineHeight = 0;
              if (i == startIndex + pageSize - 1) {
                borderX += viewWidth;
                xx = borderX;
                yy = 0;
              }
            } else xx += ii.width + this._columnGap;
          } //释放未使用的
          for (i = reuseIndex; i < virtualItemCount; i++) {
            ii = this._virtualItems[i];
            if (ii.updateFlag != this.itemInfoVer && ii.obj) {
              if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
              this.removeChildToPool(ii.obj);
              ii.obj = null;
            }
          }
        };
        _proto57.handleArchOrder1 = function handleArchOrder1() {
          if (this._childrenRenderOrder == ChildrenRenderOrder.Arch) {
            var mid = this._scrollPane.posY + this.viewHeight / 2;
            var minDist = Number.POSITIVE_INFINITY;
            var dist = 0;
            var apexIndex = 0;
            var cnt = this.numChildren;
            for (var i = 0; i < cnt; i++) {
              var obj = this.getChildAt(i);
              if (!this.foldInvisibleItems || obj.visible) {
                dist = Math.abs(mid - obj.y - obj.height / 2);
                if (dist < minDist) {
                  minDist = dist;
                  apexIndex = i;
                }
              }
            }
            this.apexIndex = apexIndex;
          }
        };
        _proto57.handleArchOrder2 = function handleArchOrder2() {
          if (this._childrenRenderOrder == ChildrenRenderOrder.Arch) {
            var mid = this._scrollPane.posX + this.viewWidth / 2;
            var minDist = Number.POSITIVE_INFINITY;
            var dist = 0;
            var apexIndex = 0;
            var cnt = this.numChildren;
            for (var i = 0; i < cnt; i++) {
              var obj = this.getChildAt(i);
              if (!this.foldInvisibleItems || obj.visible) {
                dist = Math.abs(mid - obj.x - obj.width / 2);
                if (dist < minDist) {
                  minDist = dist;
                  apexIndex = i;
                }
              }
            }
            this.apexIndex = apexIndex;
          }
        };
        _proto57.handleAlign = function handleAlign(contentWidth, contentHeight) {
          var newOffsetX = 0;
          var newOffsetY = 0;
          if (contentHeight < this.viewHeight) {
            if (this._verticalAlign == VertAlignType.Middle) newOffsetY = Math.floor((this.viewHeight - contentHeight) / 2);else if (this._verticalAlign == VertAlignType.Bottom) newOffsetY = this.viewHeight - contentHeight;
          }
          if (contentWidth < this.viewWidth) {
            if (this._align == AlignType.Center) newOffsetX = Math.floor((this.viewWidth - contentWidth) / 2);else if (this._align == AlignType.Right) newOffsetX = this.viewWidth - contentWidth;
          }
          if (newOffsetX != this._alignOffset.x || newOffsetY != this._alignOffset.y) {
            this._alignOffset.x = newOffsetX;
            this._alignOffset.y = newOffsetY;
            if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX + this._alignOffset.x, this._pivotCorrectY - this._alignOffset.y);
          }
        };
        _proto57.updateBounds = function updateBounds() {
          if (this._virtual) return;
          var i;
          var child;
          var curX = 0;
          var curY = 0;
          var maxWidth = 0;
          var maxHeight = 0;
          var cw = 0,
            ch = 0;
          var j = 0;
          var page = 0;
          var k = 0;
          var cnt = this._children.length;
          var viewWidth = this.viewWidth;
          var viewHeight = this.viewHeight;
          var lineSize = 0;
          var lineStart = 0;
          var ratio = 0;
          if (this._layout == ListLayoutType.SingleColumn) {
            for (i = 0; i < cnt; i++) {
              child = this.getChildAt(i);
              if (this.foldInvisibleItems && !child.visible) continue;
              if (curY != 0) curY += this._lineGap;
              child.y = curY;
              if (this._autoResizeItem) child.setSize(viewWidth, child.height, true);
              curY += Math.ceil(child.height);
              if (child.width > maxWidth) maxWidth = child.width;
            }
            ch = curY;
            if (ch <= viewHeight && this._autoResizeItem && this._scrollPane && this._scrollPane._displayInDemand && this._scrollPane.vtScrollBar) {
              viewWidth += this._scrollPane.vtScrollBar.width;
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                child.setSize(viewWidth, child.height, true);
                if (child.width > maxWidth) maxWidth = child.width;
              }
            }
            cw = Math.ceil(maxWidth);
          } else if (this._layout == ListLayoutType.SingleRow) {
            for (i = 0; i < cnt; i++) {
              child = this.getChildAt(i);
              if (this.foldInvisibleItems && !child.visible) continue;
              if (curX != 0) curX += this._columnGap;
              child.x = curX;
              if (this._autoResizeItem) child.setSize(child.width, viewHeight, true);
              curX += Math.ceil(child.width);
              if (child.height > maxHeight) maxHeight = child.height;
            }
            cw = curX;
            if (cw <= viewWidth && this._autoResizeItem && this._scrollPane && this._scrollPane._displayInDemand && this._scrollPane.hzScrollBar) {
              viewHeight += this._scrollPane.hzScrollBar.height;
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                child.setSize(child.width, viewHeight, true);
                if (child.height > maxHeight) maxHeight = child.height;
              }
            }
            ch = Math.ceil(maxHeight);
          } else if (this._layout == ListLayoutType.FlowHorizontal) {
            if (this._autoResizeItem && this._columnCount > 0) {
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                lineSize += child.sourceWidth;
                j++;
                if (j == this._columnCount || i == cnt - 1) {
                  ratio = (viewWidth - lineSize - (j - 1) * this._columnGap) / lineSize;
                  curX = 0;
                  for (j = lineStart; j <= i; j++) {
                    child = this.getChildAt(j);
                    if (this.foldInvisibleItems && !child.visible) continue;
                    child.setPosition(curX, curY);
                    if (j < i) {
                      child.setSize(child.sourceWidth + Math.round(child.sourceWidth * ratio), child.height, true);
                      curX += Math.ceil(child.width) + this._columnGap;
                    } else {
                      child.setSize(viewWidth - curX, child.height, true);
                    }
                    if (child.height > maxHeight) maxHeight = child.height;
                  } //new line
                  curY += Math.ceil(maxHeight) + this._lineGap;
                  maxHeight = 0;
                  j = 0;
                  lineStart = i + 1;
                  lineSize = 0;
                }
              }
              ch = curY + Math.ceil(maxHeight);
              cw = viewWidth;
            } else {
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                if (curX != 0) curX += this._columnGap;
                if (this._columnCount != 0 && j >= this._columnCount || this._columnCount == 0 && curX + child.width > viewWidth && maxHeight != 0) {
                  //new line
                  curX = 0;
                  curY += Math.ceil(maxHeight) + this._lineGap;
                  maxHeight = 0;
                  j = 0;
                }
                child.setPosition(curX, curY);
                curX += Math.ceil(child.width);
                if (curX > maxWidth) maxWidth = curX;
                if (child.height > maxHeight) maxHeight = child.height;
                j++;
              }
              ch = curY + Math.ceil(maxHeight);
              cw = Math.ceil(maxWidth);
            }
          } else if (this._layout == ListLayoutType.FlowVertical) {
            if (this._autoResizeItem && this._lineCount > 0) {
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                lineSize += child.sourceHeight;
                j++;
                if (j == this._lineCount || i == cnt - 1) {
                  ratio = (viewHeight - lineSize - (j - 1) * this._lineGap) / lineSize;
                  curY = 0;
                  for (j = lineStart; j <= i; j++) {
                    child = this.getChildAt(j);
                    if (this.foldInvisibleItems && !child.visible) continue;
                    child.setPosition(curX, curY);
                    if (j < i) {
                      child.setSize(child.width, child.sourceHeight + Math.round(child.sourceHeight * ratio), true);
                      curY += Math.ceil(child.height) + this._lineGap;
                    } else {
                      child.setSize(child.width, viewHeight - curY, true);
                    }
                    if (child.width > maxWidth) maxWidth = child.width;
                  } //new line
                  curX += Math.ceil(maxWidth) + this._columnGap;
                  maxWidth = 0;
                  j = 0;
                  lineStart = i + 1;
                  lineSize = 0;
                }
              }
              cw = curX + Math.ceil(maxWidth);
              ch = viewHeight;
            } else {
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                if (curY != 0) curY += this._lineGap;
                if (this._lineCount != 0 && j >= this._lineCount || this._lineCount == 0 && curY + child.height > viewHeight && maxWidth != 0) {
                  curY = 0;
                  curX += Math.ceil(maxWidth) + this._columnGap;
                  maxWidth = 0;
                  j = 0;
                }
                child.setPosition(curX, curY);
                curY += Math.ceil(child.height);
                if (curY > maxHeight) maxHeight = curY;
                if (child.width > maxWidth) maxWidth = child.width;
                j++;
              }
              cw = curX + Math.ceil(maxWidth);
              ch = Math.ceil(maxHeight);
            }
          } else
            //pagination
            {
              var eachHeight;
              if (this._autoResizeItem && this._lineCount > 0) eachHeight = Math.floor((viewHeight - (this._lineCount - 1) * this._lineGap) / this._lineCount);
              if (this._autoResizeItem && this._columnCount > 0) {
                for (i = 0; i < cnt; i++) {
                  child = this.getChildAt(i);
                  if (this.foldInvisibleItems && !child.visible) continue;
                  if (j == 0 && (this._lineCount != 0 && k >= this._lineCount || this._lineCount == 0 && curY + (this._lineCount > 0 ? eachHeight : child.height) > viewHeight)) {
                    //new page
                    page++;
                    curY = 0;
                    k = 0;
                  }
                  lineSize += child.sourceWidth;
                  j++;
                  if (j == this._columnCount || i == cnt - 1) {
                    ratio = (viewWidth - lineSize - (j - 1) * this._columnGap) / lineSize;
                    curX = 0;
                    for (j = lineStart; j <= i; j++) {
                      child = this.getChildAt(j);
                      if (this.foldInvisibleItems && !child.visible) continue;
                      child.setPosition(page * viewWidth + curX, curY);
                      if (j < i) {
                        child.setSize(child.sourceWidth + Math.round(child.sourceWidth * ratio), this._lineCount > 0 ? eachHeight : child.height, true);
                        curX += Math.ceil(child.width) + this._columnGap;
                      } else {
                        child.setSize(viewWidth - curX, this._lineCount > 0 ? eachHeight : child.height, true);
                      }
                      if (child.height > maxHeight) maxHeight = child.height;
                    } //new line
                    curY += Math.ceil(maxHeight) + this._lineGap;
                    maxHeight = 0;
                    j = 0;
                    lineStart = i + 1;
                    lineSize = 0;
                    k++;
                  }
                }
              } else {
                for (i = 0; i < cnt; i++) {
                  child = this.getChildAt(i);
                  if (this.foldInvisibleItems && !child.visible) continue;
                  if (curX != 0) curX += this._columnGap;
                  if (this._autoResizeItem && this._lineCount > 0) child.setSize(child.width, eachHeight, true);
                  if (this._columnCount != 0 && j >= this._columnCount || this._columnCount == 0 && curX + child.width > viewWidth && maxHeight != 0) {
                    //new line
                    curX = 0;
                    curY += Math.ceil(maxHeight) + this._lineGap;
                    maxHeight = 0;
                    j = 0;
                    k++;
                    if (this._lineCount != 0 && k >= this._lineCount || this._lineCount == 0 && curY + child.height > viewHeight && maxWidth != 0)
                      //new page
                      {
                        page++;
                        curY = 0;
                        k = 0;
                      }
                  }
                  child.setPosition(page * viewWidth + curX, curY);
                  curX += Math.ceil(child.width);
                  if (curX > maxWidth) maxWidth = curX;
                  if (child.height > maxHeight) maxHeight = child.height;
                  j++;
                }
              }
              ch = page > 0 ? viewHeight : curY + Math.ceil(maxHeight);
              cw = (page + 1) * viewWidth;
            }
          this.handleAlign(cw, ch);
          this.setBounds(0, 0, cw, ch);
        };
        _proto57.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GComponent5.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 5);
          this._layout = buffer.readByte();
          this._selectionMode = buffer.readByte();
          this._align = buffer.readByte();
          this._verticalAlign = buffer.readByte();
          this._lineGap = buffer.readShort();
          this._columnGap = buffer.readShort();
          this._lineCount = buffer.readShort();
          this._columnCount = buffer.readShort();
          this._autoResizeItem = buffer.readBool();
          this._childrenRenderOrder = buffer.readByte();
          this._apexIndex = buffer.readShort();
          if (buffer.readBool()) {
            this._margin.top = buffer.readInt();
            this._margin.bottom = buffer.readInt();
            this._margin.left = buffer.readInt();
            this._margin.right = buffer.readInt();
          }
          var overflow = buffer.readByte();
          if (overflow == OverflowType.Scroll) {
            var savedPos = buffer.position;
            buffer.seek(beginPos, 7);
            this.setupScroll(buffer);
            buffer.position = savedPos;
          } else this.setupOverflow(overflow);
          if (buffer.readBool())
            //clipSoftness
            buffer.skip(8);
          if (buffer.version >= 2) {
            this.scrollItemToViewOnClick = buffer.readBool();
            this.foldInvisibleItems = buffer.readBool();
          }
          buffer.seek(beginPos, 8);
          this._defaultItem = buffer.readS();
          this.readItems(buffer);
        };
        _proto57.readItems = function readItems(buffer) {
          var cnt;
          var i;
          var nextPos;
          var str;
          cnt = buffer.readShort();
          for (i = 0; i < cnt; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            str = buffer.readS();
            if (str == null) {
              str = this._defaultItem;
              if (!str) {
                buffer.position = nextPos;
                continue;
              }
            }
            var obj = this.getFromPool(str);
            if (obj) {
              this.addChild(obj);
              this.setupItem(buffer, obj);
            }
            buffer.position = nextPos;
          }
        };
        _proto57.setupItem = function setupItem(buffer, obj) {
          var str;
          str = buffer.readS();
          if (str != null) obj.text = str;
          str = buffer.readS();
          if (str != null && obj instanceof GButton) obj.selectedTitle = str;
          str = buffer.readS();
          if (str != null) obj.icon = str;
          str = buffer.readS();
          if (str != null && obj instanceof GButton) obj.selectedIcon = str;
          str = buffer.readS();
          if (str != null) obj.name = str;
          var cnt;
          var i;
          if (obj instanceof GComponent) {
            cnt = buffer.readShort();
            for (i = 0; i < cnt; i++) {
              var cc = obj.getController(buffer.readS());
              str = buffer.readS();
              if (cc) cc.selectedPageId = str;
            }
            if (buffer.version >= 2) {
              cnt = buffer.readShort();
              for (i = 0; i < cnt; i++) {
                var target = buffer.readS();
                var propertyId = buffer.readShort();
                var value = buffer.readS();
                var obj2 = obj.getChildByPath(target);
                if (obj2) obj2.setProp(propertyId, value);
              }
            }
          }
        };
        _proto57.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent5.prototype.setup_afterAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 6);
          var i = buffer.readShort();
          if (i != -1) this._selectionController = this.parent.getControllerAt(i);
        };
        _createClass(GList, [{
          key: "layout",
          get: function get() {
            return this._layout;
          },
          set: function set(value) {
            if (this._layout != value) {
              this._layout = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "lineCount",
          get: function get() {
            return this._lineCount;
          },
          set: function set(value) {
            if (this._lineCount != value) {
              this._lineCount = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "columnCount",
          get: function get() {
            return this._columnCount;
          },
          set: function set(value) {
            if (this._columnCount != value) {
              this._columnCount = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "lineGap",
          get: function get() {
            return this._lineGap;
          },
          set: function set(value) {
            if (this._lineGap != value) {
              this._lineGap = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "columnGap",
          get: function get() {
            return this._columnGap;
          },
          set: function set(value) {
            if (this._columnGap != value) {
              this._columnGap = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "align",
          get: function get() {
            return this._align;
          },
          set: function set(value) {
            if (this._align != value) {
              this._align = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._verticalAlign;
          },
          set: function set(value) {
            if (this._verticalAlign != value) {
              this._verticalAlign = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "virtualItemSize",
          get: function get() {
            return this._itemSize;
          },
          set: function set(value) {
            if (this._virtual) {
              if (this._itemSize == null) this._itemSize = new Size(0, 0);
              this._itemSize.width = value.width;
              this._itemSize.height = value.height;
              this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "defaultItem",
          get: function get() {
            return this._defaultItem;
          },
          set: function set(val) {
            this._defaultItem = UIPackage.normalizeURL(val);
          }
        }, {
          key: "autoResizeItem",
          get: function get() {
            return this._autoResizeItem;
          },
          set: function set(value) {
            if (this._autoResizeItem != value) {
              this._autoResizeItem = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "selectionMode",
          get: function get() {
            return this._selectionMode;
          },
          set: function set(value) {
            this._selectionMode = value;
          }
        }, {
          key: "selectionController",
          get: function get() {
            return this._selectionController;
          },
          set: function set(value) {
            this._selectionController = value;
          }
        }, {
          key: "itemPool",
          get: function get() {
            return this._pool;
          }
        }, {
          key: "selectedIndex",
          get: function get() {
            var i;
            if (this._virtual) {
              for (i = 0; i < this._realNumItems; i++) {
                var ii = this._virtualItems[i];
                if (ii.obj instanceof GButton && ii.obj.selected || !ii.obj && ii.selected) {
                  if (this._loop) return i % this._numItems;else return i;
                }
              }
            } else {
              var cnt = this._children.length;
              for (i = 0; i < cnt; i++) {
                var obj = this._children[i];
                if (obj instanceof GButton && obj.selected) return i;
              }
            }
            return -1;
          },
          set: function set(value) {
            if (value >= 0 && value < this.numItems) {
              if (this._selectionMode != ListSelectionMode.Single) this.clearSelection();
              this.addSelection(value);
            } else this.clearSelection();
          }
        }, {
          key: "numItems",
          get: function get() {
            if (this._virtual) return this._numItems;else return this._children.length;
          },
          set: function set(value) {
            if (this._virtual) {
              if (this.itemRenderer == null) throw new Error("Set itemRenderer first!");
              this._numItems = value;
              if (this._loop) this._realNumItems = this._numItems * 6; //设置6倍数量，用于循环滚动
              else this._realNumItems = this._numItems; //_virtualItems的设计是只增不减的
              var oldCount = this._virtualItems.length;
              if (this._realNumItems > oldCount) {
                for (i = oldCount; i < this._realNumItems; i++) {
                  var ii = {
                    width: this._itemSize.width,
                    height: this._itemSize.height,
                    updateFlag: 0
                  };
                  this._virtualItems.push(ii);
                }
              } else {
                for (i = this._realNumItems; i < oldCount; i++) this._virtualItems[i].selected = false;
              }
              if (this._virtualListChanged != 0) this._partner.unschedule(this._refreshVirtualList); //立即刷新
              this._refreshVirtualList();
            } else {
              var cnt = this._children.length;
              if (value > cnt) {
                for (var i = cnt; i < value; i++) {
                  if (this.itemProvider == null) this.addItemFromPool();else this.addItemFromPool(this.itemProvider(i));
                }
              } else {
                this.removeChildrenToPool(value, cnt);
              }
              if (this.itemRenderer != null) {
                for (i = 0; i < value; i++) this.itemRenderer(i, this.getChildAt(i));
              }
            }
          }
        }]);
        return GList;
      }(GComponent));
      var s_n = 0;
      var GComboBox = exports('GComboBox', /*#__PURE__*/function (_GComponent6) {
        _inheritsLoose(GComboBox, _GComponent6);
        function GComboBox() {
          var _this28;
          _this28 = _GComponent6.call(this) || this;
          _this28._visibleItemCount = 0;
          _this28._selectedIndex = 0;
          _this28._popupDirection = PopupDirection.Auto;
          _this28._node.name = "GComboBox";
          _this28._visibleItemCount = UIConfig.defaultComboBoxVisibleItemCount;
          _this28._itemsUpdated = true;
          _this28._selectedIndex = -1;
          _this28._items = [];
          _this28._values = [];
          return _this28;
        }
        var _proto58 = GComboBox.prototype;
        _proto58.getTextField = function getTextField() {
          if (this._titleObject instanceof GTextField) return this._titleObject;else if ('getTextField' in this._titleObject) return this._titleObject.getTextField();else return null;
        };
        _proto58.setState = function setState(val) {
          if (this._buttonController) this._buttonController.selectedPage = val;
        };
        _proto58.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.titleColor;
            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) return tf.strokeColor;else return 0;
              }
            case ObjectPropID.FontSize:
              {
                tf = this.getTextField();
                if (tf) return tf.fontSize;else return 0;
              }
            default:
              return _GComponent6.prototype.getProp.call(this, index);
          }
        };
        _proto58.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.titleColor = value;
              break;
            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) tf.strokeColor = value;
              }
              break;
            case ObjectPropID.FontSize:
              {
                tf = this.getTextField();
                if (tf) tf.fontSize = value;
              }
              break;
            default:
              _GComponent6.prototype.setProp.call(this, index, value);
              break;
          }
        };
        _proto58.constructExtension = function constructExtension(buffer) {
          var str;
          this._buttonController = this.getController("button");
          this._titleObject = this.getChild("title");
          this._iconObject = this.getChild("icon");
          str = buffer.readS();
          if (str) {
            var obj = UIPackage.createObjectFromURL(str);
            if (!(obj instanceof GComponent)) {
              console.error("下拉框必须为元件");
              return;
            }
            this.dropdown = obj;
            this.dropdown.name = "this.dropdown";
            this._list = this.dropdown.getChild("list", GList);
            if (this._list == null) {
              console.error(this.resourceURL + ": 下拉框的弹出元件里必须包含名为list的列表");
              return;
            }
            this._list.on(Event.CLICK_ITEM, this.onClickItem, this);
            this._list.addRelation(this.dropdown, RelationType.Width);
            this._list.removeRelation(this.dropdown, RelationType.Height);
            this.dropdown.addRelation(this._list, RelationType.Height);
            this.dropdown.removeRelation(this._list, RelationType.Width);
            this.dropdown.on(Event.UNDISPLAY, this.onPopupClosed, this);
          }
          this._node.on(Event.TOUCH_BEGIN, this.onTouchBegin_1, this);
          this._node.on(Event.TOUCH_END, this.onTouchEnd_1, this);
          this._node.on(Event.ROLL_OVER, this.onRollOver_1, this);
          this._node.on(Event.ROLL_OUT, this.onRollOut_1, this);
        };
        _proto58.handleControllerChanged = function handleControllerChanged(c) {
          _GComponent6.prototype.handleControllerChanged.call(this, c);
          if (this._selectionController == c) this.selectedIndex = c.selectedIndex;
        };
        _proto58.updateSelectionController = function updateSelectionController() {
          if (this._selectionController && !this._selectionController.changing && this._selectedIndex < this._selectionController.pageCount) {
            var c = this._selectionController;
            this._selectionController = null;
            c.selectedIndex = this._selectedIndex;
            this._selectionController = c;
          }
        };
        _proto58.dispose = function dispose() {
          if (this.dropdown) {
            this.dropdown.dispose();
            this.dropdown = null;
          }
          _GComponent6.prototype.dispose.call(this);
        };
        _proto58.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent6.prototype.setup_afterAdd.call(this, buffer, beginPos);
          if (!buffer.seek(beginPos, 6)) return;
          if (buffer.readByte() != this.packageItem.objectType) return;
          var i;
          var iv;
          var nextPos;
          var str;
          var itemCount = buffer.readShort();
          for (i = 0; i < itemCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            this._items[i] = buffer.readS();
            this._values[i] = buffer.readS();
            str = buffer.readS();
            if (str != null) {
              if (this._icons == null) this._icons = new Array();
              this._icons[i] = str;
            }
            buffer.position = nextPos;
          }
          str = buffer.readS();
          if (str != null) {
            this.text = str;
            this._selectedIndex = this._items.indexOf(str);
          } else if (this._items.length > 0) {
            this._selectedIndex = 0;
            this.text = this._items[0];
          } else this._selectedIndex = -1;
          str = buffer.readS();
          if (str != null) this.icon = str;
          if (buffer.readBool()) this.titleColor = buffer.readColor();
          iv = buffer.readInt();
          if (iv > 0) this._visibleItemCount = iv;
          this._popupDirection = buffer.readByte();
          iv = buffer.readShort();
          if (iv >= 0) this._selectionController = this.parent.getControllerAt(iv);
        };
        _proto58.showDropdown = function showDropdown() {
          if (this._itemsUpdated) {
            this._itemsUpdated = false;
            this._list.removeChildrenToPool();
            var cnt = this._items.length;
            for (var i = 0; i < cnt; i++) {
              var item = this._list.addItemFromPool();
              item.name = i < this._values.length ? this._values[i] : "";
              item.text = this._items[i];
              item.icon = this._icons && i < this._icons.length ? this._icons[i] : null;
            }
            this._list.resizeToFit(this._visibleItemCount);
          }
          this._list.selectedIndex = -1;
          this.dropdown.width = this.width;
          this._list.ensureBoundsCorrect();
          var groot = GRoot.getInstance(this);
          if (!groot) return;
          groot.togglePopup(this.dropdown, this, this._popupDirection);
          if (this.dropdown.parent) this.setState(GButton.DOWN);
        };
        _proto58.onPopupClosed = function onPopupClosed() {
          if (this._over) this.setState(GButton.OVER);else this.setState(GButton.UP);
        };
        _proto58.onClickItem = function onClickItem(itemObject) {
          var _t = this;
          var index = this._list.getChildIndex(itemObject);
          this._partner.callLater(function (dt) {
            _t.onClickItem2(index);
          }, 0.1);
        };
        _proto58.onClickItem2 = function onClickItem2(index) {
          if (this.dropdown.parent instanceof GRoot) this.dropdown.parent.hidePopup(this.dropdown);
          this._selectedIndex = -1;
          this.selectedIndex = index;
          this._node.emit(Event.STATUS_CHANGED, this);
        };
        _proto58.onRollOver_1 = function onRollOver_1() {
          this._over = true;
          if (this._down || this.dropdown && this.dropdown.parent) return;
          this.setState(GButton.OVER);
        };
        _proto58.onRollOut_1 = function onRollOut_1() {
          this._over = false;
          if (this._down || this.dropdown && this.dropdown.parent) return;
          this.setState(GButton.UP);
        };
        _proto58.onTouchBegin_1 = function onTouchBegin_1(evt) {
          if (evt.button != EventMouse.BUTTON_LEFT) return;
          if (evt.initiator instanceof GTextInput && evt.initiator.editable) return;
          this._down = true;
          evt.captureTouch();
          if (this.dropdown) {
            evt.propagationStopped = true;
            this.showDropdown();
          }
        };
        _proto58.onTouchEnd_1 = function onTouchEnd_1(evt) {
          if (evt.button != EventMouse.BUTTON_LEFT) return;
          if (this._down) {
            this._down = false;
            if (this.dropdown && !this.dropdown.parent) {
              if (this._over) this.setState(GButton.OVER);else this.setState(GButton.UP);
            }
          }
        };
        _createClass(GComboBox, [{
          key: "text",
          get: function get() {
            if (this._titleObject) return this._titleObject.text;else return null;
          },
          set: function set(value) {
            if (this._titleObject) this._titleObject.text = value;
            this.updateGear(6);
          }
        }, {
          key: "icon",
          get: function get() {
            if (this._iconObject) return this._iconObject.icon;else return null;
          },
          set: function set(value) {
            if (this._iconObject) this._iconObject.icon = value;
            this.updateGear(7);
          }
        }, {
          key: "titleColor",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.color;else return Color.BLACK;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.color = value;
          }
        }, {
          key: "titleFontSize",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.fontSize;else return 0;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.fontSize = value;
          }
        }, {
          key: "visibleItemCount",
          get: function get() {
            return this._visibleItemCount;
          },
          set: function set(value) {
            this._visibleItemCount = value;
          }
        }, {
          key: "popupDirection",
          get: function get() {
            return this._popupDirection;
          },
          set: function set(value) {
            this._popupDirection = value;
          }
        }, {
          key: "items",
          get: function get() {
            return this._items;
          },
          set: function set(value) {
            if (!value) this._items.length = 0;else this._items = value.concat();
            if (this._items.length > 0) {
              if (this._selectedIndex >= this._items.length) this._selectedIndex = this._items.length - 1;else if (this._selectedIndex == -1) this._selectedIndex = 0;
              this.text = this._items[this._selectedIndex];
              if (this._icons && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
            } else {
              this.text = "";
              if (this._icons) this.icon = null;
              this._selectedIndex = -1;
            }
            this._itemsUpdated = true;
          }
        }, {
          key: "icons",
          get: function get() {
            return this._icons;
          },
          set: function set(value) {
            this._icons = value;
            if (this._icons && this._selectedIndex != -1 && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
          }
        }, {
          key: "values",
          get: function get() {
            return this._values;
          },
          set: function set(value) {
            if (!value) this._values.length = 0;else this._values = value.concat();
          }
        }, {
          key: "selectedIndex",
          get: function get() {
            return this._selectedIndex;
          },
          set: function set(val) {
            if (this._selectedIndex == val) return;
            this._selectedIndex = val;
            if (this._selectedIndex >= 0 && this._selectedIndex < this._items.length) {
              this.text = this._items[this._selectedIndex];
              if (this._icons && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
            } else {
              this.text = "";
              if (this._icons) this.icon = null;
            }
            this.updateSelectionController();
          }
        }, {
          key: "value",
          get: function get() {
            return this._values[this._selectedIndex];
          },
          set: function set(val) {
            var index = this._values.indexOf(val);
            if (index == -1 && val == null) index = this._values.indexOf("");
            this.selectedIndex = index;
          }
        }, {
          key: "selectionController",
          get: function get() {
            return this._selectionController;
          },
          set: function set(value) {
            this._selectionController = value;
          }
        }]);
        return GComboBox;
      }(GComponent));
      var GSlider = exports('GSlider', /*#__PURE__*/function (_GComponent7) {
        _inheritsLoose(GSlider, _GComponent7);
        function GSlider() {
          var _this29;
          _this29 = _GComponent7.call(this) || this;
          _this29._min = 0;
          _this29._max = 0;
          _this29._value = 0;
          _this29._barMaxWidth = 0;
          _this29._barMaxHeight = 0;
          _this29._barMaxWidthDelta = 0;
          _this29._barMaxHeightDelta = 0;
          _this29._clickPercent = 0;
          _this29._barStartX = 0;
          _this29._barStartY = 0;
          _this29.changeOnClick = true;
          _this29.canDrag = true;
          _this29._node.name = "GSlider";
          _this29._titleType = ProgressTitleType.Percent;
          _this29._value = 50;
          _this29._max = 100;
          _this29._clickPos = new Vec2();
          return _this29;
        }
        var _proto59 = GSlider.prototype;
        _proto59.update = function update() {
          this.updateWithPercent((this._value - this._min) / (this._max - this._min));
        };
        _proto59.updateWithPercent = function updateWithPercent(percent, manual) {
          percent = math.clamp01(percent);
          if (manual) {
            var newValue = math.clamp(this._min + (this._max - this._min) * percent, this._min, this._max);
            if (this._wholeNumbers) {
              newValue = Math.round(newValue);
              percent = math.clamp01((newValue - this._min) / (this._max - this._min));
            }
            if (newValue != this._value) {
              this._value = newValue;
              this._node.emit(Event.STATUS_CHANGED, this);
            }
          }
          if (this._titleObject) {
            switch (this._titleType) {
              case ProgressTitleType.Percent:
                this._titleObject.text = Math.floor(percent * 100) + "%";
                break;
              case ProgressTitleType.ValueAndMax:
                this._titleObject.text = this._value + "/" + this._max;
                break;
              case ProgressTitleType.Value:
                this._titleObject.text = "" + this._value;
                break;
              case ProgressTitleType.Max:
                this._titleObject.text = "" + this._max;
                break;
            }
          }
          var fullWidth = this.width - this._barMaxWidthDelta;
          var fullHeight = this.height - this._barMaxHeightDelta;
          if (!this._reverse) {
            if (this._barObjectH) this._barObjectH.width = Math.round(fullWidth * percent);
            if (this._barObjectV) this._barObjectV.height = Math.round(fullHeight * percent);
          } else {
            if (this._barObjectH) {
              this._barObjectH.width = Math.round(fullWidth * percent);
              this._barObjectH.x = this._barStartX + (fullWidth - this._barObjectH.width);
            }
            if (this._barObjectV) {
              this._barObjectV.height = Math.round(fullHeight * percent);
              this._barObjectV.y = this._barStartY + (fullHeight - this._barObjectV.height);
            }
          }
        };
        _proto59.constructExtension = function constructExtension(buffer) {
          buffer.seek(0, 6);
          this._titleType = buffer.readByte();
          this._reverse = buffer.readBool();
          if (buffer.version >= 2) {
            this._wholeNumbers = buffer.readBool();
            this.changeOnClick = buffer.readBool();
          }
          this._titleObject = this.getChild("title");
          this._barObjectH = this.getChild("bar");
          this._barObjectV = this.getChild("bar_v");
          this._gripObject = this.getChild("grip");
          if (this._barObjectH) {
            this._barMaxWidth = this._barObjectH.width;
            this._barMaxWidthDelta = this.width - this._barMaxWidth;
            this._barStartX = this._barObjectH.x;
          }
          if (this._barObjectV) {
            this._barMaxHeight = this._barObjectV.height;
            this._barMaxHeightDelta = this.height - this._barMaxHeight;
            this._barStartY = this._barObjectV.y;
          }
          if (this._gripObject) {
            this._gripObject.on(Event.TOUCH_BEGIN, this.onGripTouchBegin, this);
            this._gripObject.on(Event.TOUCH_MOVE, this.onGripTouchMove, this);
          }
          this._node.on(Event.TOUCH_BEGIN, this.onBarTouchBegin, this);
        };
        _proto59.handleSizeChanged = function handleSizeChanged() {
          _GComponent7.prototype.handleSizeChanged.call(this);
          if (this._barObjectH) this._barMaxWidth = this.width - this._barMaxWidthDelta;
          if (this._barObjectV) this._barMaxHeight = this.height - this._barMaxHeightDelta;
          if (!this._underConstruct) this.update();
        };
        _proto59.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent7.prototype.setup_afterAdd.call(this, buffer, beginPos);
          if (!buffer.seek(beginPos, 6)) {
            this.update();
            return;
          }
          if (buffer.readByte() != this.packageItem.objectType) {
            this.update();
            return;
          }
          this._value = buffer.readInt();
          this._max = buffer.readInt();
          if (buffer.version >= 2) this._min = buffer.readInt();
          this.update();
        };
        _proto59.onGripTouchBegin = function onGripTouchBegin(evt) {
          this.canDrag = true;
          evt.propagationStopped = true;
          evt.captureTouch();
          this._clickPos = this.globalToLocal(evt.pos.x, evt.pos.y);
          this._clickPercent = math.clamp01((this._value - this._min) / (this._max - this._min));
        };
        _proto59.onGripTouchMove = function onGripTouchMove(evt) {
          if (!this.canDrag) {
            return;
          }
          var pt = this.globalToLocal(evt.pos.x, evt.pos.y, s_vec2$1);
          var deltaX = pt.x - this._clickPos.x;
          var deltaY = pt.y - this._clickPos.y;
          if (this._reverse) {
            deltaX = -deltaX;
            deltaY = -deltaY;
          }
          var percent;
          if (this._barObjectH) percent = this._clickPercent + deltaX / this._barMaxWidth;else percent = this._clickPercent + deltaY / this._barMaxHeight;
          this.updateWithPercent(percent, true);
        };
        _proto59.onBarTouchBegin = function onBarTouchBegin(evt) {
          if (!this.changeOnClick) return;
          var pt = this._gripObject.globalToLocal(evt.pos.x, evt.pos.y, s_vec2$1);
          var percent = math.clamp01((this._value - this._min) / (this._max - this._min));
          var delta = 0;
          if (this._barObjectH != null) delta = (pt.x - this._gripObject.width / 2) / this._barMaxWidth;
          if (this._barObjectV != null) delta = (pt.y - this._gripObject.height / 2) / this._barMaxHeight;
          if (this._reverse) percent -= delta;else percent += delta;
          this.updateWithPercent(percent, true);
        };
        _createClass(GSlider, [{
          key: "titleType",
          get: function get() {
            return this._titleType;
          },
          set: function set(value) {
            this._titleType = value;
          }
        }, {
          key: "wholeNumbers",
          get: function get() {
            return this._wholeNumbers;
          },
          set: function set(value) {
            if (this._wholeNumbers != value) {
              this._wholeNumbers = value;
              this.update();
            }
          }
        }, {
          key: "min",
          get: function get() {
            return this._min;
          },
          set: function set(value) {
            if (this._min != value) {
              this._min = value;
              this.update();
            }
          }
        }, {
          key: "max",
          get: function get() {
            return this._max;
          },
          set: function set(value) {
            if (this._max != value) {
              this._max = value;
              this.update();
            }
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(value) {
            if (this._value != value) {
              this._value = value;
              this.update();
            }
          }
        }]);
        return GSlider;
      }(GComponent));
      var s_vec2$1 = new Vec2();
      var GProgressBar = exports('GProgressBar', /*#__PURE__*/function (_GComponent8) {
        _inheritsLoose(GProgressBar, _GComponent8);
        function GProgressBar() {
          var _this30;
          _this30 = _GComponent8.call(this) || this;
          _this30._min = 0;
          _this30._max = 0;
          _this30._value = 0;
          _this30._barMaxWidth = 0;
          _this30._barMaxHeight = 0;
          _this30._barMaxWidthDelta = 0;
          _this30._barMaxHeightDelta = 0;
          _this30._barStartX = 0;
          _this30._barStartY = 0;
          _this30._node.name = "GProgressBar";
          _this30._titleType = ProgressTitleType.Percent;
          _this30._value = 50;
          _this30._max = 100;
          return _this30;
        }
        var _proto60 = GProgressBar.prototype;
        _proto60.tweenValue = function tweenValue(value, duration) {
          var oldValule;
          var tweener = GTween.getTween(this, this.update);
          if (tweener) {
            oldValule = tweener.value.x;
            tweener.kill();
          } else oldValule = this._value;
          this._value = value;
          return GTween.to(oldValule, this._value, duration).setTarget(this, this.update).setEase(EaseType.Linear);
        };
        _proto60.update = function update(newValue) {
          var percent = math.clamp01((newValue - this._min) / (this._max - this._min));
          if (this._titleObject) {
            switch (this._titleType) {
              case ProgressTitleType.Percent:
                this._titleObject.text = Math.floor(percent * 100) + "%";
                break;
              case ProgressTitleType.ValueAndMax:
                this._titleObject.text = Math.floor(newValue) + "/" + Math.floor(this._max);
                break;
              case ProgressTitleType.Value:
                this._titleObject.text = "" + Math.floor(newValue);
                break;
              case ProgressTitleType.Max:
                this._titleObject.text = "" + Math.floor(this._max);
                break;
            }
          }
          var fullWidth = this.width - this._barMaxWidthDelta;
          var fullHeight = this.height - this._barMaxHeightDelta;
          if (!this._reverse) {
            if (this._barObjectH) {
              if (!this.setFillAmount(this._barObjectH, percent)) this._barObjectH.width = Math.round(fullWidth * percent);
            }
            if (this._barObjectV) {
              if (!this.setFillAmount(this._barObjectV, percent)) this._barObjectV.height = Math.round(fullHeight * percent);
            }
          } else {
            if (this._barObjectH) {
              if (!this.setFillAmount(this._barObjectH, 1 - percent)) {
                this._barObjectH.width = Math.round(fullWidth * percent);
                this._barObjectH.x = this._barStartX + (fullWidth - this._barObjectH.width);
              }
            }
            if (this._barObjectV) {
              if (!this.setFillAmount(this._barObjectV, 1 - percent)) {
                this._barObjectV.height = Math.round(fullHeight * percent);
                this._barObjectV.y = this._barStartY + (fullHeight - this._barObjectV.height);
              }
            }
          }
          if (this._aniObject) this._aniObject.setProp(ObjectPropID.Frame, Math.floor(percent * 100));
        };
        _proto60.setFillAmount = function setFillAmount(bar, percent) {
          if ((bar instanceof GImage || bar instanceof GLoader) && bar.fillMethod != FillMethod.None) {
            bar.fillAmount = percent;
            return true;
          } else return false;
        };
        _proto60.constructExtension = function constructExtension(buffer) {
          buffer.seek(0, 6);
          this._titleType = buffer.readByte();
          this._reverse = buffer.readBool();
          this._titleObject = this.getChild("title");
          this._barObjectH = this.getChild("bar");
          this._barObjectV = this.getChild("bar_v");
          this._aniObject = this.getChild("ani");
          if (this._barObjectH) {
            this._barMaxWidth = this._barObjectH.width;
            this._barMaxWidthDelta = this.width - this._barMaxWidth;
            this._barStartX = this._barObjectH.x;
          }
          if (this._barObjectV) {
            this._barMaxHeight = this._barObjectV.height;
            this._barMaxHeightDelta = this.height - this._barMaxHeight;
            this._barStartY = this._barObjectV.y;
          }
        };
        _proto60.handleSizeChanged = function handleSizeChanged() {
          _GComponent8.prototype.handleSizeChanged.call(this);
          if (this._barObjectH) this._barMaxWidth = this.width - this._barMaxWidthDelta;
          if (this._barObjectV) this._barMaxHeight = this.height - this._barMaxHeightDelta;
          if (!this._underConstruct) this.update(this._value);
        };
        _proto60.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent8.prototype.setup_afterAdd.call(this, buffer, beginPos);
          if (!buffer.seek(beginPos, 6)) {
            this.update(this._value);
            return;
          }
          if (buffer.readByte() != this.packageItem.objectType) {
            this.update(this._value);
            return;
          }
          this._value = buffer.readInt();
          this._max = buffer.readInt();
          if (buffer.version >= 2) this._min = buffer.readInt();
          this.update(this._value);
        };
        _createClass(GProgressBar, [{
          key: "titleType",
          get: function get() {
            return this._titleType;
          },
          set: function set(value) {
            if (this._titleType != value) {
              this._titleType = value;
              this.update(this._value);
            }
          }
        }, {
          key: "min",
          get: function get() {
            return this._min;
          },
          set: function set(value) {
            if (this._min != value) {
              this._min = value;
              this.update(this._value);
            }
          }
        }, {
          key: "max",
          get: function get() {
            return this._max;
          },
          set: function set(value) {
            if (this._max != value) {
              this._max = value;
              this.update(this._value);
            }
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(value) {
            if (this._value != value) {
              GTween.kill(this, false, this.update);
              this._value = value;
              this.update(value);
            }
          }
        }]);
        return GProgressBar;
      }(GComponent));
      var GScrollBar = exports('GScrollBar', /*#__PURE__*/function (_GComponent9) {
        _inheritsLoose(GScrollBar, _GComponent9);
        function GScrollBar() {
          var _this31;
          _this31 = _GComponent9.call(this) || this;
          _this31._node.name = "GScrollBar";
          _this31._dragOffset = new Vec2();
          _this31._scrollPerc = 0;
          return _this31;
        }
        var _proto61 = GScrollBar.prototype;
        _proto61.setScrollPane = function setScrollPane(target, vertical) {
          this._target = target;
          this._vertical = vertical;
        };
        _proto61.setDisplayPerc = function setDisplayPerc(value) {
          if (this._vertical) {
            if (!this._fixedGripSize) this._grip.height = Math.floor(value * this._bar.height);
            this._grip.y = this._bar.y + (this._bar.height - this._grip.height) * this._scrollPerc;
          } else {
            if (!this._fixedGripSize) this._grip.width = Math.floor(value * this._bar.width);
            this._grip.x = this._bar.x + (this._bar.width - this._grip.width) * this._scrollPerc;
          }
          this._grip.visible = value != 0 && value != 1;
        };
        _proto61.setScrollPerc = function setScrollPerc(val) {
          this._scrollPerc = val;
          if (this._vertical) this._grip.y = this._bar.y + (this._bar.height - this._grip.height) * this._scrollPerc;else this._grip.x = this._bar.x + (this._bar.width - this._grip.width) * this._scrollPerc;
        };
        _proto61.constructExtension = function constructExtension(buffer) {
          buffer.seek(0, 6);
          this._fixedGripSize = buffer.readBool();
          this._grip = this.getChild("grip");
          if (!this._grip) {
            console.error("需要定义grip");
            return;
          }
          this._bar = this.getChild("bar");
          if (!this._bar) {
            console.error("需要定义bar");
            return;
          }
          this._arrowButton1 = this.getChild("arrow1");
          this._arrowButton2 = this.getChild("arrow2");
          this._grip.on(Event.TOUCH_BEGIN, this.onGripTouchDown, this);
          this._grip.on(Event.TOUCH_MOVE, this.onGripTouchMove, this);
          this._grip.on(Event.TOUCH_END, this.onGripTouchEnd, this);
          if (this._arrowButton1) this._arrowButton1.on(Event.TOUCH_BEGIN, this.onClickArrow1, this);
          if (this._arrowButton2) this._arrowButton2.on(Event.TOUCH_BEGIN, this.onClickArrow2, this);
          this.on(Event.TOUCH_BEGIN, this.onBarTouchBegin, this);
        };
        _proto61.onGripTouchDown = function onGripTouchDown(evt) {
          evt.propagationStopped = true;
          evt.captureTouch();
          this._gripDragging = true;
          this._target.updateScrollBarVisible();
          this.globalToLocal(evt.pos.x, evt.pos.y, this._dragOffset);
          this._dragOffset.x -= this._grip.x;
          this._dragOffset.y -= this._grip.y;
        };
        _proto61.onGripTouchMove = function onGripTouchMove(evt) {
          if (!this.onStage) return;
          var pt = this.globalToLocal(evt.pos.x, evt.pos.y, s_vec2);
          if (this._vertical) {
            var curY = pt.y - this._dragOffset.y;
            this._target.setPercY((curY - this._bar.y) / (this._bar.height - this._grip.height), false);
          } else {
            var curX = pt.x - this._dragOffset.x;
            this._target.setPercX((curX - this._bar.x) / (this._bar.width - this._grip.width), false);
          }
        };
        _proto61.onGripTouchEnd = function onGripTouchEnd(evt) {
          if (!this.onStage) return;
          this._gripDragging = false;
          this._target.updateScrollBarVisible();
        };
        _proto61.onClickArrow1 = function onClickArrow1(evt) {
          evt.propagationStopped = true;
          if (this._vertical) this._target.scrollUp();else this._target.scrollLeft();
        };
        _proto61.onClickArrow2 = function onClickArrow2(evt) {
          evt.propagationStopped = true;
          if (this._vertical) this._target.scrollDown();else this._target.scrollRight();
        };
        _proto61.onBarTouchBegin = function onBarTouchBegin(evt) {
          evt.propagationStopped = true;
          var pt = this._grip.globalToLocal(evt.pos.x, evt.pos.y, s_vec2);
          if (this._vertical) {
            if (pt.y < 0) this._target.scrollUp(4);else this._target.scrollDown(4);
          } else {
            if (pt.x < 0) this._target.scrollLeft(4);else this._target.scrollRight(4);
          }
        };
        _createClass(GScrollBar, [{
          key: "minSize",
          get: function get() {
            if (this._vertical) return (this._arrowButton1 ? this._arrowButton1.height : 0) + (this._arrowButton2 ? this._arrowButton2.height : 0);else return (this._arrowButton1 ? this._arrowButton1.width : 0) + (this._arrowButton2 ? this._arrowButton2.width : 0);
          }
        }, {
          key: "gripDragging",
          get: function get() {
            return this._gripDragging;
          }
        }]);
        return GScrollBar;
      }(GComponent));
      var s_vec2 = new Vec2();
      var GTreeNode = exports('GTreeNode', /*#__PURE__*/function () {
        function GTreeNode(hasChild, resURL) {
          this._level = 0;
          this._resURL = resURL;
          if (hasChild) this._children = new Array();
        }
        var _proto62 = GTreeNode.prototype;
        _proto62._setLevel = function _setLevel(value) {
          this._level = value;
        };
        _proto62.addChild = function addChild(child) {
          this.addChildAt(child, this._children.length);
          return child;
        };
        _proto62.addChildAt = function addChildAt(child, index) {
          if (!child) throw new Error("child is null");
          var numChildren = this._children.length;
          if (index >= 0 && index <= numChildren) {
            if (child._parent == this) {
              this.setChildIndex(child, index);
            } else {
              if (child._parent) child._parent.removeChild(child);
              var cnt = this._children.length;
              if (index == cnt) this._children.push(child);else this._children.splice(index, 0, child);
              child._parent = this;
              child._level = this._level + 1;
              child._setTree(this._tree);
              if (this._tree && this == this._tree.rootNode || this._cell && this._cell.parent && this._expanded) this._tree._afterInserted(child);
            }
            return child;
          } else {
            throw new RangeError("Invalid child index");
          }
        };
        _proto62.removeChild = function removeChild(child) {
          var childIndex = this._children.indexOf(child);
          if (childIndex != -1) {
            this.removeChildAt(childIndex);
          }
          return child;
        };
        _proto62.removeChildAt = function removeChildAt(index) {
          if (index >= 0 && index < this.numChildren) {
            var child = this._children[index];
            this._children.splice(index, 1);
            child._parent = null;
            if (this._tree) {
              child._setTree(null);
              this._tree._afterRemoved(child);
            }
            return child;
          } else {
            throw new Error("Invalid child index");
          }
        };
        _proto62.removeChildren = function removeChildren(beginIndex, endIndex) {
          beginIndex = beginIndex || 0;
          if (endIndex == null) endIndex = -1;
          if (endIndex < 0 || endIndex >= this.numChildren) endIndex = this.numChildren - 1;
          for (var i = beginIndex; i <= endIndex; ++i) this.removeChildAt(beginIndex);
        };
        _proto62.getChildAt = function getChildAt(index) {
          if (index >= 0 && index < this.numChildren) return this._children[index];else throw new Error("Invalid child index");
        };
        _proto62.getChildIndex = function getChildIndex(child) {
          return this._children.indexOf(child);
        };
        _proto62.getPrevSibling = function getPrevSibling() {
          if (this._parent == null) return null;
          var i = this._parent._children.indexOf(this);
          if (i <= 0) return null;
          return this._parent._children[i - 1];
        };
        _proto62.getNextSibling = function getNextSibling() {
          if (this._parent == null) return null;
          var i = this._parent._children.indexOf(this);
          if (i < 0 || i >= this._parent._children.length - 1) return null;
          return this._parent._children[i + 1];
        };
        _proto62.setChildIndex = function setChildIndex(child, index) {
          var oldIndex = this._children.indexOf(child);
          if (oldIndex == -1) throw new Error("Not a child of this container");
          var cnt = this._children.length;
          if (index < 0) index = 0;else if (index > cnt) index = cnt;
          if (oldIndex == index) return;
          this._children.splice(oldIndex, 1);
          this._children.splice(index, 0, child);
          if (this._tree && this == this._tree.rootNode || this._cell && this._cell.parent && this._expanded) this._tree._afterMoved(child);
        };
        _proto62.swapChildren = function swapChildren(child1, child2) {
          var index1 = this._children.indexOf(child1);
          var index2 = this._children.indexOf(child2);
          if (index1 == -1 || index2 == -1) throw new Error("Not a child of this container");
          this.swapChildrenAt(index1, index2);
        };
        _proto62.swapChildrenAt = function swapChildrenAt(index1, index2) {
          var child1 = this._children[index1];
          var child2 = this._children[index2];
          this.setChildIndex(child1, index2);
          this.setChildIndex(child2, index1);
        };
        _proto62.expandToRoot = function expandToRoot() {
          var p = this;
          while (p) {
            p.expanded = true;
            p = p.parent;
          }
        };
        _proto62._setTree = function _setTree(value) {
          this._tree = value;
          if (this._tree && this._tree.treeNodeWillExpand && this._expanded) this._tree.treeNodeWillExpand(this, true);
          if (this._children) {
            var cnt = this._children.length;
            for (var i = 0; i < cnt; i++) {
              var node = this._children[i];
              node._level = this._level + 1;
              node._setTree(value);
            }
          }
        };
        _createClass(GTreeNode, [{
          key: "expanded",
          get: function get() {
            return this._expanded;
          },
          set: function set(value) {
            if (this._children == null) return;
            if (this._expanded != value) {
              this._expanded = value;
              if (this._tree) {
                if (this._expanded) this._tree._afterExpanded(this);else this._tree._afterCollapsed(this);
              }
            }
          }
        }, {
          key: "isFolder",
          get: function get() {
            return this._children != null;
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          }
        }, {
          key: "text",
          get: function get() {
            if (this._cell) return this._cell.text;else return null;
          },
          set: function set(value) {
            if (this._cell) this._cell.text = value;
          }
        }, {
          key: "icon",
          get: function get() {
            if (this._cell) return this._cell.icon;else return null;
          },
          set: function set(value) {
            if (this._cell) this._cell.icon = value;
          }
        }, {
          key: "cell",
          get: function get() {
            return this._cell;
          }
        }, {
          key: "level",
          get: function get() {
            return this._level;
          }
        }, {
          key: "numChildren",
          get: function get() {
            return this._children.length;
          }
        }, {
          key: "tree",
          get: function get() {
            return this._tree;
          }
        }]);
        return GTreeNode;
      }());
      var GTree = exports('GTree', /*#__PURE__*/function (_GList) {
        _inheritsLoose(GTree, _GList);
        function GTree() {
          var _this32;
          _this32 = _GList.call(this) || this;
          _this32._indent = 15;
          _this32._rootNode = new GTreeNode(true);
          _this32._rootNode._setTree(_assertThisInitialized(_this32));
          _this32._rootNode.expanded = true;
          return _this32;
        }
        var _proto63 = GTree.prototype;
        _proto63.getSelectedNode = function getSelectedNode() {
          if (this.selectedIndex != -1) return this.getChildAt(this.selectedIndex)._treeNode;else return null;
        };
        _proto63.getSelectedNodes = function getSelectedNodes(result) {
          if (!result) result = new Array();
          s_list.length = 0;
          _GList.prototype.getSelection.call(this, s_list);
          var cnt = s_list.length;
          var ret = new Array();
          for (var i = 0; i < cnt; i++) {
            var node = this.getChildAt(s_list[i])._treeNode;
            ret.push(node);
          }
          return ret;
        };
        _proto63.selectNode = function selectNode(node, scrollItToView) {
          var parentNode = node.parent;
          while (parentNode && parentNode != this._rootNode) {
            parentNode.expanded = true;
            parentNode = parentNode.parent;
          }
          if (!node._cell) return;
          this.addSelection(this.getChildIndex(node._cell), scrollItToView);
        };
        _proto63.unselectNode = function unselectNode(node) {
          if (!node._cell) return;
          this.removeSelection(this.getChildIndex(node._cell));
        };
        _proto63.expandAll = function expandAll(folderNode) {
          if (!folderNode) folderNode = this._rootNode;
          folderNode.expanded = true;
          var cnt = folderNode.numChildren;
          for (var i = 0; i < cnt; i++) {
            var node = folderNode.getChildAt(i);
            if (node.isFolder) this.expandAll(node);
          }
        };
        _proto63.collapseAll = function collapseAll(folderNode) {
          if (!folderNode) folderNode = this._rootNode;
          if (folderNode != this._rootNode) folderNode.expanded = false;
          var cnt = folderNode.numChildren;
          for (var i = 0; i < cnt; i++) {
            var node = folderNode.getChildAt(i);
            if (node.isFolder) this.collapseAll(node);
          }
        };
        _proto63.createCell = function createCell(node) {
          var child = this.getFromPool(node._resURL);
          if (!(child instanceof GComponent)) throw new Error("cannot create tree node object.");
          child._treeNode = node;
          node._cell = child;
          var indentObj = child.getChild("indent");
          if (indentObj) indentObj.width = (node.level - 1) * this._indent;
          var cc;
          cc = child.getController("expanded");
          if (cc) {
            cc.on(Event.STATUS_CHANGED, this.__expandedStateChanged, this);
            cc.selectedIndex = node.expanded ? 1 : 0;
          }
          cc = child.getController("leaf");
          if (cc) cc.selectedIndex = node.isFolder ? 0 : 1;
          if (node.isFolder) node._cell.on(Event.TOUCH_BEGIN, this.__cellMouseDown, this);
          if (this.treeNodeRender) this.treeNodeRender(node, child);
        };
        _proto63._afterInserted = function _afterInserted(node) {
          if (!node._cell) this.createCell(node);
          var index = this.getInsertIndexForNode(node);
          this.addChildAt(node._cell, index);
          if (this.treeNodeRender) this.treeNodeRender(node, node._cell);
          if (node.isFolder && node.expanded) this.checkChildren(node, index);
        };
        _proto63.getInsertIndexForNode = function getInsertIndexForNode(node) {
          var prevNode = node.getPrevSibling();
          if (prevNode == null) prevNode = node.parent;
          var insertIndex = this.getChildIndex(prevNode._cell) + 1;
          var myLevel = node.level;
          var cnt = this.numChildren;
          for (var i = insertIndex; i < cnt; i++) {
            var testNode = this.getChildAt(i)._treeNode;
            if (testNode.level <= myLevel) break;
            insertIndex++;
          }
          return insertIndex;
        };
        _proto63._afterRemoved = function _afterRemoved(node) {
          this.removeNode(node);
        };
        _proto63._afterExpanded = function _afterExpanded(node) {
          if (node == this._rootNode) {
            this.checkChildren(this._rootNode, 0);
            return;
          }
          if (this.treeNodeWillExpand != null) this.treeNodeWillExpand(node, true);
          if (node._cell == null) return;
          if (this.treeNodeRender) this.treeNodeRender(node, node._cell);
          var cc = node._cell.getController("expanded");
          if (cc) cc.selectedIndex = 1;
          if (node._cell.parent) this.checkChildren(node, this.getChildIndex(node._cell));
        };
        _proto63._afterCollapsed = function _afterCollapsed(node) {
          if (node == this._rootNode) {
            this.checkChildren(this._rootNode, 0);
            return;
          }
          if (this.treeNodeWillExpand) this.treeNodeWillExpand(node, false);
          if (node._cell == null) return;
          if (this.treeNodeRender) this.treeNodeRender(node, node._cell);
          var cc = node._cell.getController("expanded");
          if (cc) cc.selectedIndex = 0;
          if (node._cell.parent) this.hideFolderNode(node);
        };
        _proto63._afterMoved = function _afterMoved(node) {
          var startIndex = this.getChildIndex(node._cell);
          var endIndex;
          if (node.isFolder) endIndex = this.getFolderEndIndex(startIndex, node.level);else endIndex = startIndex + 1;
          var insertIndex = this.getInsertIndexForNode(node);
          var i;
          var cnt = endIndex - startIndex;
          var obj;
          if (insertIndex < startIndex) {
            for (i = 0; i < cnt; i++) {
              obj = this.getChildAt(startIndex + i);
              this.setChildIndex(obj, insertIndex + i);
            }
          } else {
            for (i = 0; i < cnt; i++) {
              obj = this.getChildAt(startIndex);
              this.setChildIndex(obj, insertIndex);
            }
          }
        };
        _proto63.getFolderEndIndex = function getFolderEndIndex(startIndex, level) {
          var cnt = this.numChildren;
          for (var i = startIndex + 1; i < cnt; i++) {
            var node = this.getChildAt(i)._treeNode;
            if (node.level <= level) return i;
          }
          return cnt;
        };
        _proto63.checkChildren = function checkChildren(folderNode, index) {
          var cnt = folderNode.numChildren;
          for (var i = 0; i < cnt; i++) {
            index++;
            var node = folderNode.getChildAt(i);
            if (node._cell == null) this.createCell(node);
            if (!node._cell.parent) this.addChildAt(node._cell, index);
            if (node.isFolder && node.expanded) index = this.checkChildren(node, index);
          }
          return index;
        };
        _proto63.hideFolderNode = function hideFolderNode(folderNode) {
          var cnt = folderNode.numChildren;
          for (var i = 0; i < cnt; i++) {
            var node = folderNode.getChildAt(i);
            if (node._cell) this.removeChild(node._cell);
            if (node.isFolder && node.expanded) this.hideFolderNode(node);
          }
        };
        _proto63.removeNode = function removeNode(node) {
          if (node._cell) {
            if (node._cell.parent) this.removeChild(node._cell);
            this.returnToPool(node._cell);
            node._cell._treeNode = null;
            node._cell = null;
          }
          if (node.isFolder) {
            var cnt = node.numChildren;
            for (var i = 0; i < cnt; i++) {
              var node2 = node.getChildAt(i);
              this.removeNode(node2);
            }
          }
        };
        _proto63.__cellMouseDown = function __cellMouseDown(evt) {
          var node = GObject.cast(evt.currentTarget)._treeNode;
          this._expandedStatusInEvt = node.expanded;
        };
        _proto63.__expandedStateChanged = function __expandedStateChanged(cc) {
          var node = cc.parent._treeNode;
          node.expanded = cc.selectedIndex == 1;
        };
        _proto63.dispatchItemEvent = function dispatchItemEvent(item, evt) {
          if (this._clickToExpand != 0) {
            var node = item._treeNode;
            if (node && this._expandedStatusInEvt == node.expanded) {
              if (this._clickToExpand == 2) ;else node.expanded = !node.expanded;
            }
          }
          _GList.prototype.dispatchItemEvent.call(this, item, evt);
        };
        _proto63.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GList.prototype.setup_beforeAdd.call(this, buffer, beginPos);
          buffer.seek(beginPos, 9);
          this._indent = buffer.readInt();
          this._clickToExpand = buffer.readByte();
        };
        _proto63.readItems = function readItems(buffer) {
          var cnt;
          var i;
          var nextPos;
          var str;
          var isFolder;
          var lastNode;
          var level;
          var prevLevel = 0;
          cnt = buffer.readShort();
          for (i = 0; i < cnt; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            str = buffer.readS();
            if (str == null) {
              str = this.defaultItem;
              if (!str) {
                buffer.position = nextPos;
                continue;
              }
            }
            isFolder = buffer.readBool();
            level = buffer.readByte();
            var node = new GTreeNode(isFolder, str);
            node.expanded = true;
            if (i == 0) this._rootNode.addChild(node);else {
              if (level > prevLevel) lastNode.addChild(node);else if (level < prevLevel) {
                for (var j = level; j <= prevLevel; j++) lastNode = lastNode.parent;
                lastNode.addChild(node);
              } else lastNode.parent.addChild(node);
            }
            lastNode = node;
            prevLevel = level;
            this.setupItem(buffer, node.cell);
            buffer.position = nextPos;
          }
        };
        _createClass(GTree, [{
          key: "rootNode",
          get: function get() {
            return this._rootNode;
          }
        }, {
          key: "indent",
          get: function get() {
            return this._indent;
          },
          set: function set(value) {
            this._indent = value;
          }
        }, {
          key: "clickToExpand",
          get: function get() {
            return this._clickToExpand;
          },
          set: function set(value) {
            this._clickToExpand = value;
          }
        }]);
        return GTree;
      }(GList));
      var s_list = new Array();
      var PopupMenu = exports('PopupMenu', /*#__PURE__*/function () {
        function PopupMenu(url) {
          if (!url) {
            url = UIConfig.popupMenu;
            if (!url) throw new Error("UIConfig.popupMenu not defined");
          }
          this._contentPane = UIPackage.createObjectFromURL(url);
          this._contentPane.on(Event.DISPLAY, this.onDisplay, this);
          this._list = this._contentPane.getChild("list");
          this._list.removeChildrenToPool();
          this._list.addRelation(this._contentPane, RelationType.Width);
          this._list.removeRelation(this._contentPane, RelationType.Height);
          this._contentPane.addRelation(this._list, RelationType.Height);
          this._list.on(Event.CLICK_ITEM, this.onClickItem, this);
        }
        var _proto64 = PopupMenu.prototype;
        _proto64.dispose = function dispose() {
          this._contentPane.dispose();
        };
        _proto64.addItem = function addItem(caption, callback) {
          var item = this._list.addItemFromPool();
          item.title = caption;
          item.data = callback;
          item.grayed = false;
          var c = item.getController("checked");
          if (c) c.selectedIndex = 0;
          return item;
        };
        _proto64.addItemAt = function addItemAt(caption, index, callback) {
          var item = this._list.getFromPool();
          this._list.addChildAt(item, index);
          item.title = caption;
          item.data = callback;
          item.grayed = false;
          var c = item.getController("checked");
          if (c) c.selectedIndex = 0;
          return item;
        };
        _proto64.addSeperator = function addSeperator() {
          if (UIConfig.popupMenu_seperator == null) throw new Error("UIConfig.popupMenu_seperator not defined");
          this.list.addItemFromPool(UIConfig.popupMenu_seperator);
        };
        _proto64.getItemName = function getItemName(index) {
          var item = this._list.getChildAt(index);
          return item.name;
        };
        _proto64.setItemText = function setItemText(name, caption) {
          var item = this._list.getChild(name);
          item.title = caption;
        };
        _proto64.setItemVisible = function setItemVisible(name, visible) {
          var item = this._list.getChild(name);
          if (item.visible != visible) {
            item.visible = visible;
            this._list.setBoundsChangedFlag();
          }
        };
        _proto64.setItemGrayed = function setItemGrayed(name, grayed) {
          var item = this._list.getChild(name);
          item.grayed = grayed;
        };
        _proto64.setItemCheckable = function setItemCheckable(name, checkable) {
          var item = this._list.getChild(name);
          var c = item.getController("checked");
          if (c) {
            if (checkable) {
              if (c.selectedIndex == 0) c.selectedIndex = 1;
            } else c.selectedIndex = 0;
          }
        };
        _proto64.setItemChecked = function setItemChecked(name, checked) {
          var item = this._list.getChild(name);
          var c = item.getController("checked");
          if (c) c.selectedIndex = checked ? 2 : 1;
        };
        _proto64.isItemChecked = function isItemChecked(name) {
          var item = this._list.getChild(name);
          var c = item.getController("checked");
          if (c) return c.selectedIndex == 2;else return false;
        };
        _proto64.removeItem = function removeItem(name) {
          var item = this._list.getChild(name);
          if (item) {
            var index = this._list.getChildIndex(item);
            this._list.removeChildToPoolAt(index);
            return true;
          } else return false;
        };
        _proto64.clearItems = function clearItems() {
          this._list.removeChildrenToPool();
        };
        _proto64.show = function show(target, dir) {
          var groot = GRoot.getInstance(target);
          if (!groot) return;
          groot.showPopup(this.contentPane, target instanceof GRoot ? null : target, dir);
        };
        _proto64.onClickItem = function onClickItem(item, evt) {
          var _this33 = this;
          this._list._partner.callLater(function (dt) {
            _this33.onClickItem2(item, evt);
          }, 0.1);
        };
        _proto64.onClickItem2 = function onClickItem2(item, evt) {
          if (!(item instanceof GButton)) return;
          if (item.grayed) {
            this._list.selectedIndex = -1;
            return;
          }
          var c = item.getController("checked");
          if (c && c.selectedIndex != 0) {
            if (c.selectedIndex == 1) c.selectedIndex = 2;else c.selectedIndex = 1;
          }
          var r = this._contentPane.parent;
          r.hidePopup(this.contentPane);
          if (item.data instanceof Function) item.data(item, evt);
        };
        _proto64.onDisplay = function onDisplay() {
          this._list.selectedIndex = -1;
          this._list.resizeToFit(100000, 10);
        };
        _createClass(PopupMenu, [{
          key: "itemCount",
          get: function get() {
            return this._list.numChildren;
          }
        }, {
          key: "contentPane",
          get: function get() {
            return this._contentPane;
          }
        }, {
          key: "list",
          get: function get() {
            return this._list;
          }
        }]);
        return PopupMenu;
      }());
      var UIObjectFactory = exports('UIObjectFactory', /*#__PURE__*/function () {
        function UIObjectFactory() {}
        UIObjectFactory.setExtension = function setExtension(url, type) {
          if (url == null) throw new Error("Invaild url: " + url);
          var pi = UIPackage.getItemByURL(url);
          if (pi) pi.extensionType = type;
          UIObjectFactory.extensions[url] = type;
        };
        UIObjectFactory.setLoaderExtension = function setLoaderExtension(type) {
          UIObjectFactory.loaderType = type;
        };
        UIObjectFactory.resolveExtension = function resolveExtension(pi) {
          var extensionType = UIObjectFactory.extensions["ui://" + pi.owner.id + pi.id];
          if (!extensionType) extensionType = UIObjectFactory.extensions["ui://" + pi.owner.name + "/" + pi.name];
          if (extensionType) pi.extensionType = extensionType;
        };
        UIObjectFactory.newObject = function newObject(type, userClass) {
          var obj;
          UIObjectFactory.counter++;
          if (typeof type === 'number') {
            switch (type) {
              case ObjectType.Image:
                return new GImage();
              case ObjectType.MovieClip:
                return new GMovieClip();
              case ObjectType.Component:
                return new GComponent();
              case ObjectType.Text:
                return new GTextField();
              case ObjectType.RichText:
                return new GRichTextField();
              case ObjectType.InputText:
                return new GTextInput();
              case ObjectType.Group:
                return new GGroup();
              case ObjectType.List:
                return new GList();
              case ObjectType.Graph:
                return new GGraph();
              case ObjectType.Loader:
                if (UIObjectFactory.loaderType) return new UIObjectFactory.loaderType();else return new GLoader();
              case ObjectType.Button:
                return new GButton();
              case ObjectType.Label:
                return new GLabel();
              case ObjectType.ProgressBar:
                return new GProgressBar();
              case ObjectType.Slider:
                return new GSlider();
              case ObjectType.ScrollBar:
                return new GScrollBar();
              case ObjectType.ComboBox:
                return new GComboBox();
              case ObjectType.Tree:
                return new GTree();
              case ObjectType.Loader3D:
                return new GLoader3D();
              default:
                return null;
            }
          } else {
            if (type.type == PackageItemType.Component) {
              if (userClass) obj = new userClass();else if (type.extensionType) obj = new type.extensionType();else obj = UIObjectFactory.newObject(type.objectType);
            } else obj = UIObjectFactory.newObject(type.objectType);
            if (obj) obj.packageItem = type;
          }
          return obj;
        };
        return UIObjectFactory;
      }());
      UIObjectFactory.counter = 0;
      UIObjectFactory.extensions = {};
      Decls.UIObjectFactory = UIObjectFactory;
      var DragDropManager = exports('DragDropManager', /*#__PURE__*/function () {
        function DragDropManager() {
          this._agent = new GLoader();
          this._agent.draggable = true;
          this._agent.touchable = false; //important
          this._agent.setSize(100, 100);
          this._agent.setPivot(0.5, 0.5, true);
          this._agent.align = AlignType.Center;
          this._agent.verticalAlign = VertAlignType.Middle;
          this._agent.sortingOrder = 1000000;
          this._agent.on(Event.DRAG_END, this.onDragEnd, this);
        }
        var _proto65 = DragDropManager.prototype;
        _proto65.startDrag = function startDrag(source, icon, sourceData, touchId) {
          if (this._agent.parent) return;
          if (!source) return;
          this._sourceData = sourceData;
          this._agent.url = icon;
          var groot = GRoot.getInstance(source);
          if (!groot) return;
          groot.addChild(this._agent);
          var pt = groot.getTouchPosition(touchId);
          pt = groot.globalToLocal(pt.x, pt.y);
          this._agent.setPosition(pt.x, pt.y);
          this._agent.startDrag(touchId);
        };
        _proto65.cancel = function cancel() {
          if (this._agent.parent) {
            this._agent.stopDrag();
            var groot = GRoot.getInstance(this._agent.parent);
            if (!groot) return;
            groot.removeChild(this._agent);
            this._sourceData = null;
          }
        };
        _proto65.onDragEnd = function onDragEnd() {
          if (!this._agent.parent)
            //cancelled
            return;
          var groot = GRoot.getInstance(this._agent.parent);
          if (!groot) return;
          groot.removeChild(this._agent);
          var sourceData = this._sourceData;
          this._sourceData = null;
          var obj = groot.touchTarget;
          while (obj) {
            if (obj.node.hasEventListener(Event.DROP)) {
              obj.requestFocus();
              obj.node.emit(Event.DROP, obj, sourceData);
              return;
            }
            obj = obj.parent;
          }
        };
        _createClass(DragDropManager, [{
          key: "dragAgent",
          get: function get() {
            return this._agent;
          }
        }, {
          key: "dragging",
          get: function get() {
            return this._agent.parent != null;
          }
        }], [{
          key: "inst",
          get: function get() {
            if (!DragDropManager._inst) DragDropManager._inst = new DragDropManager();
            return DragDropManager._inst;
          }
        }]);
        return DragDropManager;
      }());
      var AsyncOperation = exports('AsyncOperation', /*#__PURE__*/function () {
        function AsyncOperation() {}
        var _proto66 = AsyncOperation.prototype;
        _proto66.createObject = function createObject(pkgName, resName) {
          if (this._node) throw 'Already running';
          var pkg = UIPackage.getByName(pkgName);
          if (pkg) {
            var pi = pkg.getItemByName(resName);
            if (!pi) throw new Error("resource not found: " + resName);
            this.internalCreateObject(pi);
          } else throw new Error("package not found: " + pkgName);
        };
        _proto66.createObjectFromURL = function createObjectFromURL(url) {
          if (this._node) throw 'Already running';
          var pi = UIPackage.getItemByURL(url);
          if (pi) this.internalCreateObject(pi);else throw new Error("resource not found: " + url);
        };
        _proto66.cancel = function cancel() {
          if (this._node) {
            this._node.destroy();
            this._node = null;
          }
        };
        _proto66.internalCreateObject = function internalCreateObject(item) {
          this._node = new Node("[AsyncCreating:" + item.name + "]");
          game.addPersistRootNode(this._node);
          this._node.on("#", this.completed, this);
          this._node.addComponent(AsyncOperationRunner).init(item);
        };
        _proto66.completed = function completed(result) {
          this.cancel();
          if (this.callback) this.callback(result);
        };
        return AsyncOperation;
      }());
      var AsyncOperationRunner = /*#__PURE__*/function (_Component5) {
        _inheritsLoose(AsyncOperationRunner, _Component5);
        function AsyncOperationRunner() {
          var _this34;
          _this34 = _Component5.call(this) || this;
          _this34._itemList = new Array();
          _this34._objectPool = new Array();
          return _this34;
        }
        var _proto67 = AsyncOperationRunner.prototype;
        _proto67.init = function init(item) {
          this._itemList.length = 0;
          this._objectPool.length = 0;
          var di = {
            pi: item,
            type: item.objectType
          };
          di.childCount = this.collectComponentChildren(item);
          this._itemList.push(di);
          this._index = 0;
        };
        _proto67.onDestroy = function onDestroy() {
          this._itemList.length = 0;
          var cnt = this._objectPool.length;
          if (cnt > 0) {
            for (var i = 0; i < cnt; i++) this._objectPool[i].dispose();
            this._objectPool.length = 0;
          }
        };
        _proto67.collectComponentChildren = function collectComponentChildren(item) {
          var buffer = item.rawData;
          buffer.seek(0, 2);
          var di;
          var pi;
          var i;
          var dataLen;
          var curPos;
          var pkg;
          var dcnt = buffer.readShort();
          for (i = 0; i < dcnt; i++) {
            dataLen = buffer.readShort();
            curPos = buffer.position;
            buffer.seek(curPos, 0);
            var type = buffer.readByte();
            var src = buffer.readS();
            var pkgId = buffer.readS();
            buffer.position = curPos;
            if (src != null) {
              if (pkgId != null) pkg = UIPackage.getById(pkgId);else pkg = item.owner;
              pi = pkg != null ? pkg.getItemById(src) : null;
              di = {
                pi: pi,
                type: type
              };
              if (pi && pi.type == PackageItemType.Component) di.childCount = this.collectComponentChildren(pi);
            } else {
              di = {
                type: type
              };
              if (type == ObjectType.List)
                //list
                di.listItemCount = this.collectListChildren(buffer);
            }
            this._itemList.push(di);
            buffer.position = curPos + dataLen;
          }
          return dcnt;
        };
        _proto67.collectListChildren = function collectListChildren(buffer) {
          buffer.seek(buffer.position, 8);
          var listItemCount = 0;
          var i;
          var nextPos;
          var url;
          var pi;
          var di;
          var defaultItem = buffer.readS();
          var itemCount = buffer.readShort();
          for (i = 0; i < itemCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            url = buffer.readS();
            if (url == null) url = defaultItem;
            if (url) {
              pi = UIPackage.getItemByURL(url);
              if (pi) {
                di = {
                  pi: pi,
                  type: pi.objectType
                };
                if (pi.type == PackageItemType.Component) di.childCount = this.collectComponentChildren(pi);
                this._itemList.push(di);
                listItemCount++;
              }
            }
            buffer.position = nextPos;
          }
          return listItemCount;
        };
        _proto67.update = function update() {
          var obj;
          var di;
          var poolStart;
          var k;
          var t = game.totalTime / 1000;
          var frameTime = UIConfig.frameTimeForAsyncUIConstruction;
          var totalItems = this._itemList.length;
          while (this._index < totalItems) {
            di = this._itemList[this._index];
            if (di.pi) {
              obj = UIObjectFactory.newObject(di.pi);
              this._objectPool.push(obj);
              constructingDepth.n++;
              if (di.pi.type == PackageItemType.Component) {
                poolStart = this._objectPool.length - di.childCount - 1;
                obj.constructFromResource2(this._objectPool, poolStart);
                this._objectPool.splice(poolStart, di.childCount);
              } else {
                obj.constructFromResource();
              }
              constructingDepth.n--;
            } else {
              obj = UIObjectFactory.newObject(di.type);
              this._objectPool.push(obj);
              if (di.type == ObjectType.List && di.listItemCount > 0) {
                poolStart = this._objectPool.length - di.listItemCount - 1;
                for (k = 0; k < di.listItemCount; k++)
                //把他们都放到pool里，这样GList在创建时就不需要创建对象了
                obj.itemPool.returnObject(this._objectPool[k + poolStart]);
                this._objectPool.splice(poolStart, di.listItemCount);
              }
            }
            this._index++;
            if (this._index % 5 == 0 && game.totalTime / 1000 - t >= frameTime) return;
          }
          var result = this._objectPool[0];
          this._itemList.length = 0;
          this._objectPool.length = 0;
          this.node.emit("#", result);
        };
        return AsyncOperationRunner;
      }(Component);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FGUIComponentBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GrootEx.ts', './CocosDevKit.ts', './LanguageManage.ts', './TelegramDeviceBridge.ts', './NetNodeManager.ts', './DataBinder.ts', './Logger.ts', './UITools.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, game, director, view, tween, GComponent, GRoot, GRootEx, LanguageManager, TelegramDeviceBridge, NetNodeManager, BINDFUNC, STOPBINDDATA, Log, UITools;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
      director = module.director;
      view = module.view;
      tween = module.tween;
    }, function (module) {
      GComponent = module.GComponent;
      GRoot = module.GRoot;
    }, function (module) {
      GRootEx = module.GRootEx;
    }, null, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      NetNodeManager = module.NetNodeManager;
    }, function (module) {
      BINDFUNC = module.BINDFUNC;
      STOPBINDDATA = module.STOPBINDDATA;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      UITools = module.UITools;
    }],
    execute: function () {
      cclegacy._RF.push({}, "66187TPCvZHT625m4IHayuh", "FGUIComponentBase", undefined);
      var FGUIComponentBase = exports('default', /*#__PURE__*/function (_fgui$GComponent) {
        _inheritsLoose(FGUIComponentBase, _fgui$GComponent);
        function FGUIComponentBase() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GComponent.call.apply(_fgui$GComponent, [this].concat(args)) || this;
          _this._decoratorsInfoInitCompleted = false;
          _this._grootInst = void 0;
          return _this;
        }
        var _proto = FGUIComponentBase.prototype;
        _proto.onEnable = function onEnable() {
          _fgui$GComponent.prototype.onEnable.call(this);
          this.grootInst;
          if (!this._decoratorsInfoInitCompleted) {
            var netNode = NetNodeManager.Instance.getDefaultNetNode();
            netNode.onNetState(this.onNetStateChange, this);
            LanguageManager.on(this.onLanguageChange, this);
            var dataNetEventListenerMark = this._NetEventListenerMark_;
            if (dataNetEventListenerMark) {
              for (var i = 0; i < dataNetEventListenerMark.length; i++) {
                var _dataNetEventListener = dataNetEventListenerMark[i],
                  propertyKey = _dataNetEventListener.propertyKey,
                  protoID = _dataNetEventListener.protoID;
                this.onNetMsg(protoID, this[propertyKey]);
              }
            }
            var dataPageEventListenerMark = this._PageEventListenerMark_;
            if (dataPageEventListenerMark) {
              for (var _i = 0; _i < dataPageEventListenerMark.length; _i++) {
                var _dataPageEventListene = dataPageEventListenerMark[_i],
                  _propertyKey = _dataPageEventListene.propertyKey,
                  eventName = _dataPageEventListene.eventName;
                this.grootInst.node.on(eventName, this[_propertyKey], this);
              }
            }
            var dataBinderMark = this._DataBinderMark_;
            if (dataBinderMark) {
              for (var _i2 = 0; _i2 < dataBinderMark.length; _i2++) {
                var _propertyKey2 = dataBinderMark[_i2];
                BINDFUNC(this, this[_propertyKey2].bind(this));
              }
            }
            this._decoratorsInfoInitCompleted = true;
          }
        };
        _proto.dispose = function dispose() {
          var _this$grootInst;
          STOPBINDDATA(this);
          (_this$grootInst = this.grootInst) == null || _this$grootInst.node.targetOff(this);
          LanguageManager.off(this);
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          netNode.targetOff(this);
          game.targetOff(this);
          director.targetOff(this);
          view.targetOff(this);
          TelegramDeviceBridge.Instance.removeBackTarget(this);
          _fgui$GComponent.prototype.dispose.call(this);
        }

        /**
         * 监听网络通信事件
         * @param protoID
         * @param onResponse
         */;
        _proto.onNetMsg = function onNetMsg(protoID, onResponse) {
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          if (netNode) {
            netNode.onNetMsg(protoID, onResponse, this);
          } else {
            Log.debug.error(this.name, 'onNetMsg', "netNode is undefined");
          }
        }

        /**
         * @description 语言设置变化
         */;
        _proto.onLanguageChange = function onLanguageChange() {}

        /**
         * 网络节点状态变化
         * @param state
         */;
        _proto.onNetStateChange = function onNetStateChange(state) {
          // // example
          // switch (this.netNode.state) {
          //     case NetTypes.ENetNodeState.connected: {
          //         // do something
          //     } break;
          // }
        }

        /**
         * 在当前 groot 实例上创建一个 Loading 控制器
         * @description 为每一个需要显示加载界面的异步过程创建一个 Loading 对象，异步过程开始时调用 show，结束时调用 hide
         * @description LoadingManager 会在处于显示状态的 Loading 对象数量大于 0 的时候真正的显示加载界面，在处于显示状态的 Loading 对象数量等于 0 的时候隐藏加载界面
         * @description 指定了 target 的 Loading 对象会在 target 被销毁后自动的销毁自身，并触发 LoadingManager 对于加载界面可见性的控制
         * @param target 指定的 target 在节点树中被移除并销毁的时候相应的 Loading 对象也会被销毁
         * @returns
         */;
        _proto.createLoadingItem = function createLoadingItem() {
          return this.grootInst.createLoadingItem(this);
        }

        /**
         * @description 在当前页面所在的 groot 实例上抛出页面事件
         * @param eventName
         * @param args
         */;
        _proto.emitPageEvent = function emitPageEvent(eventName) {
          var _this$grootInst2;
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          (_this$grootInst2 = this.grootInst).emitPageEvent.apply(_this$grootInst2, [eventName, this].concat(args));
        }

        /**
         * @description 在所有 groot 实例上抛出页面事件
         * @param eventName
         * @param args
         */;
        _proto.emitPageEventAllInst = function emitPageEventAllInst(eventName) {
          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }
          GRootEx.emitPageEvent.apply(GRootEx, [eventName, this, true].concat(args));
        }

        /**
         * @description 强制递归更新页面尺寸和布局
         */;
        _proto.forceUpdateRecursion = function forceUpdateRecursion() {
          UITools.forceUpdateRecursion(this.node);
        };
        _proto.setTimeout = function setTimeout(callback, time) {
          return tween(this).delay(time).call(callback).start();
        };
        _proto.setInterval = function setInterval(callback, time) {
          return tween(this).repeatForever(tween(this).delay(time).call(callback)).start();
        };
        _proto.enableDeviceBackButtonHandler = function enableDeviceBackButtonHandler() {
          TelegramDeviceBridge.Instance.pushBackTarget(this);
        };
        _proto.disenableDeviceBackButtonHandler = function disenableDeviceBackButtonHandler() {
          TelegramDeviceBridge.Instance.removeBackTarget(this);
        };
        _createClass(FGUIComponentBase, [{
          key: "grootInst",
          get:
          /**
           * @description 当前页面所在的 groot 实例
           */
          function get() {
            if (!this._grootInst && this.node && this.node.isValid) {
              this._grootInst = GRoot.getInstance(this);
              if (!this._grootInst) {
                this._grootInst = GRootEx.getInst();
              }
            }
            return this._grootInst;
          }
        }]);
        return FGUIComponentBase;
      }(GComponent));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FSlider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_FSlider.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, rect, Node, director, v3, UI_FSlider, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      rect = module.rect;
      Node = module.Node;
      director = module.director;
      v3 = module.v3;
    }, function (module) {
      UI_FSlider = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class, _class2;
      cclegacy._RF.push({}, "88f6ebvFZFCqqH5/I7QTep2", "FSlider", undefined);
      var FSlider = exports('FSlider', CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_FSlider) {
        _inheritsLoose(FSlider, _UI_FSlider);
        function FSlider() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_FSlider.call.apply(_UI_FSlider, [this].concat(args)) || this;
          _this.progressBgRect = void 0;
          _this._percent = 0;
          return _this;
        }
        var _proto = FSlider.prototype;
        _proto.onEnable = function onEnable() {
          this.progressBgRect = rect(this.m_bg.x, this.m_bg.y, this.m_bg.width, this.m_bg.height);
          this.node.on(Node.EventType.TOUCH_START, this.onSliderTouch, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onSliderTouch, this);
          this.node.on(Node.EventType.TOUCH_END, this.onSliderTouch, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onSliderTouch, this);
          this.updateSlider();
        };
        _proto.onDisable = function onDisable() {
          this.node.off(Node.EventType.TOUCH_START, this.onSliderTouch, this);
          this.node.off(Node.EventType.TOUCH_MOVE, this.onSliderTouch, this);
          this.node.off(Node.EventType.TOUCH_END, this.onSliderTouch, this);
          this.node.off(Node.EventType.TOUCH_CANCEL, this.onSliderTouch, this);
        };
        _proto.updateSlider = function updateSlider() {
          this.m_bar.width = this.progressBgRect.width * this._percent;
          this.m_sliderHandler.x = this.m_bar.width + this.progressBgRect.xMin;
          this.node.emit(FSlider.EVENT_SLIDER_PERCENT, this);
        };
        _proto.touchLocationToFguiLocal = function touchLocationToFguiLocal(pos) {
          var _camera = director.root.batcher2D.getFirstRenderCamera(this.node);
          var _in = v3(pos.x, pos.y);
          var _out = v3();
          _camera.screenToWorld(_out, _in);
          return this.globalToLocal(_out.x, _out.y);
        };
        _proto.onSliderTouch = function onSliderTouch(event) {
          var location = event.getLocation();
          var pos = this.touchLocationToFguiLocal(location);
          var touchPosX = Math.min(Math.max(pos.x, this.progressBgRect.xMin), this.progressBgRect.xMax);
          this.percent = (touchPosX - this.progressBgRect.xMin) / this.progressBgRect.width;
          if (event.type != Node.EventType.TOUCH_MOVE && event.type != Node.EventType.TOUCH_START) {
            this.node.emit(FSlider.EVENT_SLIDER_TOUCHED, this);
          }
        };
        _createClass(FSlider, [{
          key: "percent",
          get: function get() {
            return this._percent;
          },
          set: function set(v) {
            if (this._percent != v) {
              this._percent = v;
              if (this._percent == undefined) return;
              this.updateSlider();
            }
          }
        }, {
          key: "bgColor",
          get: function get() {
            return this.m_bg.color;
          },
          set: function set(v) {
            this.m_bg.color = v;
          }
        }, {
          key: "barColor",
          get: function get() {
            return this.m_bar.color;
          },
          set: function set(v) {
            this.m_bar.color = v;
          }
        }]);
        return FSlider;
      }(UI_FSlider), _class2.EVENT_SLIDER_PERCENT = 'EVENT_SLIDER_PERCENT', _class2.EVENT_SLIDER_TOUCHED = 'EVENT_SLIDER_TOUCHED', _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Functions.ts", ['cc', './fairygui.mjs', './MultiLanguageText.ts'], function (exports) {
  var cclegacy, GTextInput, GTextField, MultiLanguageText;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GTextInput = module.GTextInput;
      GTextField = module.GTextField;
    }, function (module) {
      MultiLanguageText = module.MultiLanguageText;
    }],
    execute: function () {
      exports('onUserData', onUserData);
      cclegacy._RF.push({}, "2b7e449feNCN7t7UhKrF2Gk", "Functions", undefined);
      function onUserData(obj) {
        if (!obj.data) {
          return;
        }
        if (obj.data == 'MultiLanguageText') {
          if (obj instanceof GTextInput) {
            var multiLanguageText = obj.node.addComponent(MultiLanguageText);
            multiLanguageText.textInput = obj;
          } else if (obj instanceof GTextField) {
            // let multiLanguageText = obj.node.addComponent(MultiLanguageText);
            // multiLanguageText.textField = obj;
            var _multiLanguageText = obj._label.node.addComponent(MultiLanguageText);
            _multiLanguageText.label = obj._label;
          }
        }
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameChatProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './CocosDevKit.ts', './RoleData.ts', './GameConst.ts', './gameproto.js', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, MarkForNetEventListener, GameNetProxyBase, RoleData, GameConst, _cjsExports, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, null, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "28834fFwWVJbqdJMS+rOEUi", "GameChatProxy", undefined);

      /**
       * chat.proto 仅在游戏内使用
       */
      var GameChatProxy = exports('GameChatProxy', (_dec = MarkForNetEventListener(_cjsExports.chat.MsgChatInfoCast.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.rooms.MsgChatMsgCast.ProtocolID), (_class = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(GameChatProxy, _GameNetProxyBase);
        function GameChatProxy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameNetProxyBase.call.apply(_GameNetProxyBase, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          /**
           * 游戏逻辑驱动器，网络消息触发的游戏逻辑 push 进来对游戏逻辑进行驱动，游戏逻辑在执行时可以对驱动器进行暂停和恢复
           */
          _this.gameLogicDrive = void 0;
          return _this;
        }
        var _proto = GameChatProxy.prototype;
        _proto.init = function init(shareSpace, gameLogicDrive) {
          this.shareSpace = shareSpace;
          this.gameLogicDrive = gameLogicDrive;
          _GameNetProxyBase.prototype.init.call(this);
        };
        _proto.reset = function reset() {
          // do something
        };
        _proto.destroy = function destroy() {
          this.removeEventListener();
        }

        /**
         * 发送表情
         * @param playerID
         * @param expressionID
         */;
        _proto.sendExpression = function sendExpression(expressionID) {
          var msg = _cjsExports.chat.MsgChat.create();
          msg.type = 2;
          msg.typeID = this.shareSpace.texasGameData.roomId;
          msg.content = expressionID.toString();
          // msg.toUserID = playerID;
          this.send(_cjsExports.chat.MsgChat.ProtocolID, _cjsExports.chat.MsgChat.encode(msg).finish(), this.onMsgChatRsp.bind(this));
        };
        _proto.onMsgChatRsp = function onMsgChatRsp(netdata) {
          var msg = netdata.getData(_cjsExports.chat.MsgChatRsp);
          if (msg.typeID == this.shareSpace.texasGameData.roomId) {
            if (!netdata.isRetSuccess()) {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }
        /**
         * 表情广播
         * @param netdata
         */;
        _proto.onMsgChatInfoCast = function onMsgChatInfoCast(netdata) {
          var msg = netdata.getData(_cjsExports.chat.MsgChatInfoCast);
          var expressionID = parseInt(msg.content);
          if (msg.type == 2 && msg.typeID == this.shareSpace.texasGameData.roomId && !isNaN(expressionID)) {
            this.shareSpace.onChatExpression(msg);
          }
        }

        /**
         * 获取聊天消息列表
         */;
        _proto.getChatMsgList = function getChatMsgList() {
          var msg = _cjsExports.rooms.MsgGetChatMsgList.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgGetChatMsgList.ProtocolID, _cjsExports.rooms.MsgGetChatMsgList.encode(msg).finish(), this.onMsgGetChatMsgListRsp.bind(this));
        };
        _proto.onMsgGetChatMsgListRsp = function onMsgGetChatMsgListRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgGetChatMsgListRsp);
          if (msg.roomId = this.shareSpace.texasGameData.roomId) {
            this.shareSpace.texasChatData.setMsgList(msg.list);
          }
        }

        /**
         * 发送聊天文本
         * @param content
         */;
        _proto.sendText = function sendText(content) {
          var msg = _cjsExports.rooms.MsgSendChatMsg.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.msg = _cjsExports.rooms.ChatMsg.create();
          msg.msg.type = GameConst.EChatMsgType.Text;
          msg.msg.player = _cjsExports.rooms.PlayerList.create();
          msg.msg.player.icon = RoleData.inst.avatar;
          msg.msg.player.name = RoleData.inst.nick;
          msg.msg.player.playerid = RoleData.inst.playerID;
          msg.msg.time = Utils.curLocalTimestamp / 1000;
          msg.msg.content = content;
          this.send(_cjsExports.rooms.MsgSendChatMsg.ProtocolID, _cjsExports.rooms.MsgSendChatMsg.encode(msg).finish(), this.onMsgSendChatMsgRsp.bind(this));
        };
        _proto.onMsgSendChatMsgRsp = function onMsgSendChatMsgRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgSendChatMsgRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (!netdata.isRetSuccess()) {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }
        /**
         * 聊天消息广播
         * @param netdata
         */;
        _proto.onMsgChatMsgCast = function onMsgChatMsgCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgChatMsgCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.shareSpace.texasChatData.addMsg(msg.msg);
            // todo 更新聊天列表
            this.shareSpace.texasGamePage.popupLayer.chatLayer.onNewMsg(msg.msg);
          }
        };
        return GameChatProxy;
      }(GameNetProxyBase), (_applyDecoratedDescriptor(_class.prototype, "onMsgChatInfoCast", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgChatInfoCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgChatMsgCast", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgChatMsgCast"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './TelegramDeviceBridge.ts', './GameConst.ts', './LocalStorageTool.ts'], function (exports) {
  var _createClass, cclegacy, resources, settings, sys, TelegramDeviceBridge, GameConst, LocalStorageTool;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      resources = module.resources;
      settings = module.settings;
      sys = module.sys;
    }, null, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8e0cbSk7a1Bf6bh/GCFDYwa", "GameConfig", undefined);
      var EnumDownLoadType = exports('EnumDownLoadType', /*#__PURE__*/function (EnumDownLoadType) {
        EnumDownLoadType[EnumDownLoadType["DOWN_NOMALL"] = 0] = "DOWN_NOMALL";
        EnumDownLoadType[EnumDownLoadType["ENCRY_IMAGE_DOWN"] = 1] = "ENCRY_IMAGE_DOWN";
        return EnumDownLoadType;
      }({}));
      var GameConfig = exports('GameConfig', /*#__PURE__*/function () {
        function GameConfig() {}
        GameConfig.addConfig = function addConfig(key, config) {
          this.configMap.set(key, config);
          this._configKeys.push(key);
        };
        GameConfig.isLocalPackage = function isLocalPackage() {
          return false;
        };
        GameConfig.getOssImgUrl_1 = function getOssImgUrl_1(fileName, itype) {
          if (itype === void 0) {
            itype = EnumDownLoadType.DOWN_NOMALL;
          }
          if (itype == EnumDownLoadType.DOWN_NOMALL) {
            return this.curConfig.baseOssConfig + "/ph_back/nomall/" + fileName;
          } else if (itype == EnumDownLoadType.ENCRY_IMAGE_DOWN) {
            return this.curConfig.baseOssConfig + "/ph_back/encryImage/" + fileName;
          }
        };
        GameConfig.init = function init() {
          this.addConfig('TGTest', {
            login: 'https://fronttest2.87poker.club/login/',
            httpBase: 'https://fronttest2.87poker.club/',
            netImgPreAddr: 'https://d2lx1qu2ovib6u.cloudfront.net',
            imageUploadAddr: 'https://fronttest2.87poker.club/upload/saveHeadImage',
            uploadRoomChatAudio: 'https://fronttest2.87poker.club/upload/uploadRoomChatAudio',
            handRecord: 'https://handrecord_test.87poker.club/',
            handRecordLog: 'https://d2lx1qu2ovib6u.cloudfront.net/handslog/',
            feedback: 'https://fronttest2.87poker.club/feedback/feedback',
            chatImgUpload: 'https://fronttest2.87poker.club/upload/feedbackUploadImg',
            policy: 'http://www.87poker.club/privacy.html',
            pay: 'https://fronttest2.87poker.club/pay/',
            gateway: 'https://fronttest2.87poker.club/gateway/',
            ossconfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com/client_creator/hotupdate/ossconfig',
            telegramReportBotToken: '7145651774:AAFRiDcf-FtjiNI-eXyno2OigCVLR2WBoaY',
            telegramReportChatID: -1002053110547,
            telegramShareLink: 'https://t.me/TGPokertestbot/Tgpokertest',
            telegramTonLink: 'https://t.me/TGPokertestbot',
            telegramChannelLink: 'https://t.me/Tgpoker2',
            aboutUsUrl: 'https://t.me/tgpokerofficial_bot',
            mixpanelToken: 'df99b7946c5edead1a8e7e5e87c7285c',
            baseOssConfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com'
          });
          this.addConfig('Test', {
            login: 'https://fronttest.87poker.club/login/',
            httpBase: 'https://fronttest.87poker.club/',
            netImgPreAddr: 'https://d2lx1qu2ovib6u.cloudfront.net',
            imageUploadAddr: 'https://fronttest.87poker.club/upload/saveHeadImage',
            uploadRoomChatAudio: 'https://fronttest.87poker.club/upload/uploadRoomChatAudio',
            handRecord: 'https://handrecord_test.87poker.club/',
            handRecordLog: 'https://d2lx1qu2ovib6u.cloudfront.net/handslog/',
            feedback: 'https://fronttest.87poker.club/feedback/feedback',
            chatImgUpload: 'https://fronttest.87poker.club/upload/feedbackUploadImg',
            policy: 'http://www.87poker.club/privacy.html',
            pay: 'https://fronttest.87poker.club/pay/',
            gateway: 'https://fronttest.87poker.club/gateway/',
            ossconfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com/client_creator/hotupdate/ossconfig',
            telegramReportBotToken: '7145651774:AAFRiDcf-FtjiNI-eXyno2OigCVLR2WBoaY',
            telegramReportChatID: -1002053110547,
            telegramShareLink: 'https://t.me/TGPokertestbot/Tgpokertest',
            telegramTonLink: 'https://t.me/TGPokertestbot',
            telegramChannelLink: 'https://t.me/Tgpoker2',
            aboutUsUrl: 'https://t.me/tgpokerofficial_bot',
            mixpanelToken: 'df99b7946c5edead1a8e7e5e87c7285c',
            baseOssConfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com'
          });
          this.addConfig('Publish', {
            login: 'https://front.87poker.club/login/',
            httpBase: 'https://front.87poker.club/',
            netImgPreAddr: 'https://d2lx1qu2ovib6u.cloudfront.net',
            imageUploadAddr: 'https://front.87poker.club/upload/saveHeadImage',
            uploadRoomChatAudio: 'https://front.87poker.club/upload/uploadRoomChatAudio',
            handRecord: 'https://handrecord.87poker.club/',
            handRecordLog: 'https://d2lx1qu2ovib6u.cloudfront.net/handslog/',
            feedback: 'https://front.87poker.club/feedback/feedback',
            chatImgUpload: 'https://front.87poker.club/upload/feedbackUploadImg',
            policy: 'http://www.87poker.club/privacy.html',
            pay: 'https://front.87poker.club/pay/',
            gateway: 'https://front.87poker.club/gateway/',
            ossconfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com/client_creator/hotupdate/ossconfig',
            telegramReportBotToken: '7145651774:AAFRiDcf-FtjiNI-eXyno2OigCVLR2WBoaY',
            telegramReportChatID: -4552602162,
            telegramShareLink: 'https://t.me/tgpokerofficial_bot/home',
            telegramTonLink: 'https://t.me/tgpokerofficial_bot',
            telegramChannelLink: 'https://t.me/TGPoker87Official',
            aboutUsUrl: 'https://t.me/tgpokerofficial_bot',
            mixpanelToken: '1b4f291b49515caccffaa587f760d372',
            baseOssConfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com'
          });
          this.addConfig('PrePublish', {
            login: 'https://frontpre.87poker.club/login/',
            httpBase: 'https://frontpre.87poker.club/',
            netImgPreAddr: 'https://d2lx1qu2ovib6u.cloudfront.net',
            imageUploadAddr: 'https://frontpre.87poker.club/upload/saveHeadImage',
            uploadRoomChatAudio: 'https://frontpre.87poker.club/upload/uploadRoomChatAudio',
            handRecord: 'http://handrecord_test.87poker.club/',
            handRecordLog: 'https://d2lx1qu2ovib6u.cloudfront.net/handslog/',
            feedback: 'https://frontpre.87poker.club/feedback/feedback',
            chatImgUpload: 'https://frontpre.87poker.club/upload/feedbackUploadImg',
            policy: 'http://www.87poker.club/privacy.html',
            pay: 'https://frontpre.87poker.club/pay/',
            gateway: 'https://frontpre.87poker.club/gateway/',
            ossconfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com/client_creator/hotupdate/ossconfig',
            telegramReportBotToken: '7145651774:AAFRiDcf-FtjiNI-eXyno2OigCVLR2WBoaY',
            telegramReportChatID: -4517039858,
            telegramShareLink: 'https://t.me/TGPokerprebot/TGPokerprebot',
            telegramTonLink: 'https://t.me/TGPokerprebot',
            telegramChannelLink: 'https://t.me/Tgpoker2',
            aboutUsUrl: 'https://t.me/tgpokerofficial_bot',
            mixpanelToken: '1b4f291b49515caccffaa587f760d372',
            baseOssConfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com'
          });
          this.addConfig('Jesse', {
            login: 'http://192.168.1.95:8020/login/',
            httpBase: 'http://192.168.1.95:8020/',
            netImgPreAddr: 'https://d2lx1qu2ovib6u.cloudfront.net',
            imageUploadAddr: 'http://192.168.1.95:8020/upload/saveHeadImage',
            uploadRoomChatAudio: 'http://192.168.1.95:8020/upload/uploadRoomChatAudio',
            handRecord: 'https://handrecord_test.87poker.club/',
            handRecordLog: 'https://d2lx1qu2ovib6u.cloudfront.net/handslog/',
            feedback: 'http://192.168.1.95:8020/feedback/feedback',
            chatImgUpload: 'http://192.168.1.95:8020/upload/feedbackUploadImg',
            policy: 'http://www.87poker.club/privacy.html',
            pay: 'http://192.168.1.95:8020/pay/',
            gateway: 'http://192.168.1.95:8020/gateway/',
            ossconfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com/client_creator/hotupdate/ossconfig',
            telegramReportBotToken: '7145651774:AAFRiDcf-FtjiNI-eXyno2OigCVLR2WBoaY',
            telegramReportChatID: -1002053110547,
            telegramShareLink: 'https://t.me/TGPokertestbot/Tgpokertest',
            telegramTonLink: 'https://t.me/TGPokertestbot',
            telegramChannelLink: 'https://t.me/Tgpoker2',
            aboutUsUrl: 'https://t.me/tgpokerofficial_bot',
            mixpanelToken: 'df99b7946c5edead1a8e7e5e87c7285c',
            baseOssConfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com'
          });
          this.addConfig('Chanlon', {
            login: 'http://192.168.1.195:8020/login/',
            httpBase: 'http://192.168.1.195:8020/',
            netImgPreAddr: 'https://d2lx1qu2ovib6u.cloudfront.net',
            imageUploadAddr: 'http://192.168.1.195:8020/upload/saveHeadImage',
            uploadRoomChatAudio: 'http://192.168.1.195:8020/upload/uploadRoomChatAudio',
            handRecord: 'https://handrecord_test.87poker.club/',
            handRecordLog: 'https://d2lx1qu2ovib6u.cloudfront.net/handslog/',
            feedback: 'http://192.168.1.195:8020/feedback/feedback',
            chatImgUpload: 'http://192.168.1.195:8020/upload/feedbackUploadImg',
            policy: 'http://www.87poker.club/privacy.html',
            pay: 'http://192.168.1.195:8020/pay/',
            gateway: 'http://192.168.1.195:8020/gateway/',
            ossconfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com/client_creator/hotupdate/ossconfig',
            telegramReportBotToken: '7145651774:AAFRiDcf-FtjiNI-eXyno2OigCVLR2WBoaY',
            telegramReportChatID: -1002053110547,
            telegramShareLink: 'https://t.me/TGPokertestbot/Tgpokertest',
            telegramTonLink: 'https://t.me/TGPokertestbot',
            telegramChannelLink: 'https://t.me/Tgpoker2',
            aboutUsUrl: 'https://t.me/tgpokerofficial_bot',
            mixpanelToken: 'df99b7946c5edead1a8e7e5e87c7285c',
            baseOssConfig: 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com'
          });
        };
        _createClass(GameConfig, null, [{
          key: "bundleName",
          get: function get() {
            var bundleName = GameConst.EBundleName.TGPoker;
            {
              bundleName = settings.querySettings('CustomSettings', 'bundleName');
            }
            return bundleName;
          }
        }, {
          key: "useWSS",
          get: function get() {
            // return sys.isBrowser;
            return TelegramDeviceBridge.Instance.isTMA || sys.isBrowser && this._curConfigKey != 'Local';
            // return false;
          }
        }, {
          key: "channel",
          get:
          /**
           * 渠道号
           */
          function get() {
            if (!this._channel) {
              {
                this._channel = '1000';
              }
            }
            return this._channel;
          }

          /**
           * 是否时单GRoot实例模式
           * 多GRoot实例用于实现同时玩多桌的功能
           */
        }, {
          key: "singleInstanceGroot",
          get: function get() {
            // // 多实例模式等做到这里来了再说
            // if (this._singleInstanceGroot == undefined) {
            //     this._singleInstanceGroot = sys.isMobile || TelegramDeviceBridge.Instance.isTMA;
            // }
            // return this._singleInstanceGroot;
            {
              return true;
            }
          }

          /**
           * 验证码请求间隔
           */
        }, {
          key: "configKeys",
          get: function get() {
            return this._configKeys;
          }
        }, {
          key: "curConfigKey",
          get: function get() {
            if (this._curConfigKey == undefined) {
              var defaultConfig = settings.querySettings('CustomSettings', 'defaultConfig');
              {
                var str = LocalStorageTool.getStringWithAES('CurNetConfigKey');
                if (str && this._configKeys.includes(str)) {
                  this._curConfigKey = str;
                  return this._curConfigKey;
                }
                this._curConfigKey = 'Test';
              }
              LocalStorageTool.setStringWithAES('CurNetConfigKey', this._curConfigKey);
            }
            return this._curConfigKey;
          },
          set: function set(v) {
            if (this._curConfigKey != v && this._configKeys.includes(v)) {
              this._curConfigKey = v;
              LocalStorageTool.setStringWithAES('CurNetConfigKey', this._curConfigKey);
            }
          }
        }, {
          key: "curHotUpdateAssetsKey",
          get: function get() {
            if (this._curHotUpdateAssetsKey == undefined) {
              var str = LocalStorageTool.getStringWithAES('CurHotUpdateAssetsKey');
              if (str) {
                this._curHotUpdateAssetsKey = str;
                return this._curHotUpdateAssetsKey;
              }
              this._curHotUpdateAssetsKey = 'test';
              LocalStorageTool.setStringWithAES('CurHotUpdateAssetsKey', this._curHotUpdateAssetsKey);
            }
            return this._curHotUpdateAssetsKey;
          },
          set: function set(v) {
            if (this._curHotUpdateAssetsKey != v) {
              this._curHotUpdateAssetsKey = v;
              LocalStorageTool.setStringWithAES('CurHotUpdateAssetsKey', this._curHotUpdateAssetsKey);
            }
          }
        }, {
          key: "curConfig",
          get: function get() {
            return this.configMap.get(this.curConfigKey);
          }
        }, {
          key: "serverChanelInfo",
          get: function get() {
            return this._serverChanelInfo;
          },
          set:
          /**
           * 服务器返回的渠道信息
           */
          function set(info) {
            this._serverChanelInfo = info;
          }
        }]);
        return GameConfig;
      }());
      GameConfig.bundle = resources;
      GameConfig._channel = void 0;
      GameConfig._singleInstanceGroot = undefined;
      GameConfig.REQUEST_VERIFY_CODE_INTERVAL = 60;
      /**
       * 网络地址配置
       */
      GameConfig.configMap = new Map();
      GameConfig._configKeys = [];
      GameConfig._curConfigKey = void 0;
      GameConfig._curHotUpdateAssetsKey = void 0;
      GameConfig._isLocalPackage = void 0;
      GameConfig._serverChanelInfo = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConst.ts", ['cc', './OnError.ts'], function (exports) {
  var cclegacy, color, OnError;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      OnError = module.OnError;
    }],
    execute: function () {
      exports('GameConst', void 0);
      cclegacy._RF.push({}, "318e1/vlJ5Eb5NeMdSJy5yP", "GameConst", undefined);
      var GameConst;
      (function (_GameConst) {
        var EBundleName = /*#__PURE__*/function (EBundleName) {
          EBundleName["TGPoker"] = "TGPoker";
          EBundleName["PokerMaster"] = "PokerMaster";
          return EBundleName;
        }({});
        _GameConst.EBundleName = EBundleName;
        var SECONDS_OF_MINUTE = _GameConst.SECONDS_OF_MINUTE = 60;
        var SECONDS_OF_HOUR = _GameConst.SECONDS_OF_HOUR = 60 * 60;
        var SECONDS_OF_DAY = _GameConst.SECONDS_OF_DAY = 60 * 60 * 24;
        var SECONDS_OF_WEEK = _GameConst.SECONDS_OF_WEEK = 60 * 60 * 24 * 7;
        var DAYS_OF_MONTH = _GameConst.DAYS_OF_MONTH = [[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]];
        var DAYS_OF_WEEK = _GameConst.DAYS_OF_WEEK = ['Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat', 'Sun'];
        var GAME_TYPE_POS_BB = _GameConst.GAME_TYPE_POS_BB = 'BB';
        var GAME_TYPE_POS_SB = _GameConst.GAME_TYPE_POS_SB = 'SB';
        var GAME_TYPE_POS_BTN = _GameConst.GAME_TYPE_POS_BTN = 'BTN';
        var SCENE_TYPE = /*#__PURE__*/function (SCENE_TYPE) {
          SCENE_TYPE[SCENE_TYPE["club"] = 0] = "club";
          SCENE_TYPE[SCENE_TYPE["lobby"] = 1] = "lobby";
          return SCENE_TYPE;
        }({});
        _GameConst.SCENE_TYPE = SCENE_TYPE;
        var ACTION_TYPE_abbreviation = _GameConst.ACTION_TYPE_abbreviation = ['', 'F',
        // 弃牌F（黑色）
        'C',
        // 看牌C(淡绿色)
        'C',
        // 跟注C(绿色)
        'R',
        // 加注R(黄色)
        '',
        // ACTION_WAIT
        '',
        // ACTION_SITED
        'B',
        // 主动加注B(黄色)
        'SB',
        // SB(灰色)
        'BB',
        // BB(灰色)
        'A',
        // ACTION_ANTE
        'BB',
        // ACTION_FORCE_BB
        'F',
        // ACTION_SYSTEM_FOLD
        'C',
        // ACTION_SYSTEM_CHECK
        '',
        // ACTION_STRADDLE
        '',
        // ACTION_POT
        'F',
        // FAST_FOLD
        'A' // ACTION_ALLIN
        ];

        var ACTION_TYPE_COLOR = _GameConst.ACTION_TYPE_COLOR = [color('#000000'), color('#89898E'),
        // 弃牌F（黑色）
        color('#1ED6FF'),
        // 看牌C(淡绿色)
        color('#06C166'),
        // 跟注C(绿色)
        color('#F7931A'),
        // 加注R(黄色)
        color('#C7C7CC'),
        // ACTION_WAIT
        color('#C7C7CC'),
        // ACTION_SITED
        color('#F7931A'),
        // 主动加注B(黄色)
        color('#ffffff'),
        // SB(灰色)
        color('#ffffff'),
        // BB(灰色)
        color('#ffffff'),
        // ACTION_ANTE 前注
        color('#ffffff'),
        // ACTION_FORCE_BB
        color('#89898E'),
        // ACTION_SYSTEM_FOLD
        color('#1ED6FF'),
        // ACTION_SYSTEM_CHECK
        color('#C7C7CC'),
        // ACTION_STRADDLE
        color('#C7C7CC'),
        // ACTION_POT
        color('#89898E'),
        // FAST_FOLD
        color('#FF3D23') //红色  全押A
        ];

        var ACTION_BG_COLOR = _GameConst.ACTION_BG_COLOR = [color('#000000'), color('#376866'),
        // 弃牌F（黑色）
        color('#147446'),
        // 看牌C(淡绿色)
        color('#147446'),
        // 跟注C(绿色)
        color('#b76723'),
        // 加注R(黄色)
        color('#C7C7CC'),
        // ACTION_WAIT
        color('#C7C7CC'),
        // ACTION_SITED
        color('#b76723'),
        // 主动加注B(黄色)
        color('#1d5ebb'),
        // SB(灰色)
        color('#1d5ebb'),
        // BB(灰色)
        color('#1d5ebb'),
        // ACTION_ANTE 前注
        color('#1d5ebb'),
        // ACTION_FORCE_BB
        color('#376866'),
        // ACTION_SYSTEM_FOLD
        color('#147446'),
        // ACTION_SYSTEM_CHECK
        color('#C7C7CC'),
        // ACTION_STRADDLE
        color('#C7C7CC'),
        // ACTION_POT
        color('#376866'),
        // FAST_FOLD
        color('#a02d1b') //红色  全押A
        ];

        var WINNING_COLOR = _GameConst.WINNING_COLOR = [color(0xff, 0x3d, 0x23), color(0x06, 0xc1, 0x66)];
        var EPropItemID = /*#__PURE__*/function (EPropItemID) {
          EPropItemID[EPropItemID["VIP_CARD_SILVER_ITEM_ID"] = 101] = "VIP_CARD_SILVER_ITEM_ID";
          EPropItemID[EPropItemID["VIP_CARD_BLACK_ITEM_ID"] = 102] = "VIP_CARD_BLACK_ITEM_ID";
          EPropItemID[EPropItemID["VIP_CARD_PURPLE_ITEM_ID"] = 103] = "VIP_CARD_PURPLE_ITEM_ID";
          EPropItemID[EPropItemID["TIEM_BANK_ITEM_ID"] = 104] = "TIEM_BANK_ITEM_ID";
          EPropItemID[EPropItemID["RABBIT_HUNTING_ITEM_ID"] = 105] = "RABBIT_HUNTING_ITEM_ID";
          return EPropItemID;
        }({});
        _GameConst.EPropItemID = EPropItemID;
        function isVipGoods(id) {
          if (id <= 0) return false;
          return id >= EPropItemID.VIP_CARD_SILVER_ITEM_ID && id <= EPropItemID.VIP_CARD_PURPLE_ITEM_ID;
        }
        _GameConst.isVipGoods = isVipGoods;
        var EClubMembership = /*#__PURE__*/function (EClubMembership) {
          EClubMembership[EClubMembership["CLUB_POSITION_DEFAULT"] = 0] = "CLUB_POSITION_DEFAULT";
          EClubMembership[EClubMembership["CLUB_POSITION_MEMBER"] = 1] = "CLUB_POSITION_MEMBER";
          EClubMembership[EClubMembership["CLUB_POSITION_AGENT"] = 2] = "CLUB_POSITION_AGENT";
          EClubMembership[EClubMembership["CLUB_POSITION_MANAGER"] = 3] = "CLUB_POSITION_MANAGER";
          EClubMembership[EClubMembership["CLUB_POSITION_CREATOR"] = 4] = "CLUB_POSITION_CREATOR";
          EClubMembership[EClubMembership["CLUB_POSITION_SUPER_AGENT"] = 5] = "CLUB_POSITION_SUPER_AGENT";
          return EClubMembership;
        }({});
        _GameConst.EClubMembership = EClubMembership;
        var EPropMainType = /*#__PURE__*/function (EPropMainType) {
          EPropMainType[EPropMainType["MONEY"] = 1] = "MONEY";
          EPropMainType[EPropMainType["CUSTOM"] = 2] = "CUSTOM";
          EPropMainType[EPropMainType["GIFT"] = 3] = "GIFT";
          EPropMainType[EPropMainType["TICKET"] = 4] = "TICKET";
          return EPropMainType;
        }({});
        _GameConst.EPropMainType = EPropMainType;
        function getActionTypeColor(type) {
          switch (type) {
            case GameConst.ETexasRetrospectAction.FAST_FOLD:
            case GameConst.ETexasRetrospectAction.ACTION_FOLD:
            case GameConst.ETexasRetrospectAction.ACTION_SYSTEM_FOLD:
              return color('#000000');
            default:
              return color('#ffffff');
          }
        }
        _GameConst.getActionTypeColor = getActionTypeColor;
        function getGameTypeDesc(gameType) {
          switch (gameType) {
            case TexasPlay.EGameType.NLH:
              return 'NLH';
            case TexasPlay.EGameType.SixPlus:
              return '6+';
            case TexasPlay.EGameType.MTT:
              return 'MTT';
            case TexasPlay.EGameType.PLO4:
              return 'PLO4';
            case TexasPlay.EGameType.PLO5:
              return 'PLO5';
            case TexasPlay.EGameType.PLO6:
              return 'PLO6';
            case TexasPlay.EGameType.OFC:
              return 'OFC';
            case TexasPlay.EGameType.ColorGame:
              return 'ColorGame';
            default:
              return '';
          }
        }
        _GameConst.getGameTypeDesc = getGameTypeDesc;
        function getFlashGameTypeDesc(gameType, delimiter) {
          if (delimiter === void 0) {
            delimiter = '/';
          }
          switch (gameType) {
            case TexasPlay.EGameType.NLH:
              return "FLASH" + delimiter + "NLH";
            case TexasPlay.EGameType.PLO4:
              return "FLASH" + delimiter + "PLO4";
            default:
              return '';
          }
        }
        _GameConst.getFlashGameTypeDesc = getFlashGameTypeDesc;
        function getGameTypeDescLancode(gameType) {
          switch (gameType) {
            case TexasPlay.EGameType.NLH:
              return 'CCS_TXT_36';
            case TexasPlay.EGameType.SixPlus:
              return 'CCS_TXT_274';
            case TexasPlay.EGameType.MTT:
              return 'CCS_TXT_199';
            case TexasPlay.EGameType.PLO4:
              return 'TXT_877';
            case TexasPlay.EGameType.PLO5:
              return 'TXT_878';
            case TexasPlay.EGameType.PLO6:
              return 'TXT_879';
            case TexasPlay.EGameType.OFC:
              return 'TXT_1675';
            case TexasPlay.EGameType.ColorGame:
              return 'TXT_1872';
            default:
              return '';
          }
        }
        _GameConst.getGameTypeDescLancode = getGameTypeDescLancode;
        var EGamePlayerPos = /*#__PURE__*/function (EGamePlayerPos) {
          EGamePlayerPos["BB"] = "BB";
          EGamePlayerPos["SB"] = "SB";
          EGamePlayerPos["BTN"] = "BTN";
          EGamePlayerPos["UTG"] = "UTG";
          EGamePlayerPos["UTG1"] = "UTG+1";
          EGamePlayerPos["MP1"] = "MP1";
          EGamePlayerPos["MP2"] = "MP2";
          EGamePlayerPos["HJ"] = "HJ";
          EGamePlayerPos["CO"] = "CO";
          return EGamePlayerPos;
        }({});
        _GameConst.EGamePlayerPos = EGamePlayerPos;
        var ETexasRetrospectAction = /*#__PURE__*/function (ETexasRetrospectAction) {
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_FOLD"] = 1] = "ACTION_FOLD";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_CHECK"] = 2] = "ACTION_CHECK";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_CALL"] = 3] = "ACTION_CALL";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_RAISE"] = 4] = "ACTION_RAISE";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_WAIT"] = 5] = "ACTION_WAIT";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_SITED"] = 6] = "ACTION_SITED";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_BET"] = 7] = "ACTION_BET";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_SB"] = 8] = "ACTION_SB";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_BB"] = 9] = "ACTION_BB";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_ANTE"] = 10] = "ACTION_ANTE";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_FORCE_BB"] = 11] = "ACTION_FORCE_BB";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_SYSTEM_FOLD"] = 12] = "ACTION_SYSTEM_FOLD";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_SYSTEM_CHECK"] = 13] = "ACTION_SYSTEM_CHECK";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_STRADDLE"] = 14] = "ACTION_STRADDLE";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_POT"] = 15] = "ACTION_POT";
          ETexasRetrospectAction[ETexasRetrospectAction["FAST_FOLD"] = 16] = "FAST_FOLD";
          ETexasRetrospectAction[ETexasRetrospectAction["ACTION_ALLIN"] = 17] = "ACTION_ALLIN";
          return ETexasRetrospectAction;
        }({});
        _GameConst.ETexasRetrospectAction = ETexasRetrospectAction;
        var EGameRewardMode = /*#__PURE__*/function (EGameRewardMode) {
          EGameRewardMode[EGameRewardMode["same"] = 2] = "same";
          EGameRewardMode[EGameRewardMode["normal"] = 1] = "normal";
          return EGameRewardMode;
        }({});
        _GameConst.EGameRewardMode = EGameRewardMode;
        var EGameCostType = /*#__PURE__*/function (EGameCostType) {
          EGameCostType[EGameCostType["gold"] = 2] = "gold";
          EGameCostType[EGameCostType["cash"] = 1] = "cash";
          return EGameCostType;
        }({});
        _GameConst.EGameCostType = EGameCostType;
        var EChatMsgType = /*#__PURE__*/function (EChatMsgType) {
          EChatMsgType[EChatMsgType["Text"] = 1] = "Text";
          EChatMsgType[EChatMsgType["Voice"] = 2] = "Voice";
          return EChatMsgType;
        }({});
        _GameConst.EChatMsgType = EChatMsgType;
        var TexasPlay;
        (function (_TexasPlay) {
          var EGameType = /*#__PURE__*/function (EGameType) {
            EGameType[EGameType["NLH"] = 1] = "NLH";
            EGameType[EGameType["SixPlus"] = 2] = "SixPlus";
            EGameType[EGameType["MTT"] = 3] = "MTT";
            EGameType[EGameType["PLO4"] = 4] = "PLO4";
            EGameType[EGameType["PLO5"] = 5] = "PLO5";
            EGameType[EGameType["PLO6"] = 6] = "PLO6";
            EGameType[EGameType["OFC"] = 7] = "OFC";
            EGameType[EGameType["ColorGame"] = 8] = "ColorGame";
            return EGameType;
          }({});
          _TexasPlay.EGameType = EGameType;
          var ERoomStatus = /*#__PURE__*/function (ERoomStatus) {
            ERoomStatus[ERoomStatus["NotStart"] = 1] = "NotStart";
            ERoomStatus[ERoomStatus["PreFlop"] = 2] = "PreFlop";
            ERoomStatus[ERoomStatus["Flop"] = 3] = "Flop";
            ERoomStatus[ERoomStatus["Turn"] = 4] = "Turn";
            ERoomStatus[ERoomStatus["River"] = 5] = "River";
            ERoomStatus[ERoomStatus["Result"] = 6] = "Result";
            ERoomStatus[ERoomStatus["Finish"] = 7] = "Finish";
            return ERoomStatus;
          }({});
          _TexasPlay.ERoomStatus = ERoomStatus;
          var EPreOperationType = /*#__PURE__*/function (EPreOperationType) {
            EPreOperationType[EPreOperationType["Cancel"] = 0] = "Cancel";
            EPreOperationType[EPreOperationType["CheckOrFold"] = 1] = "CheckOrFold";
            EPreOperationType[EPreOperationType["AutoCheck"] = 2] = "AutoCheck";
            EPreOperationType[EPreOperationType["Call"] = 3] = "Call";
            EPreOperationType[EPreOperationType["CallAny"] = 4] = "CallAny";
            return EPreOperationType;
          }({});
          _TexasPlay.EPreOperationType = EPreOperationType;
          var EActStatus = /*#__PURE__*/function (EActStatus) {
            EActStatus[EActStatus["Check"] = 1] = "Check";
            EActStatus[EActStatus["Fold"] = 2] = "Fold";
            EActStatus[EActStatus["Call"] = 3] = "Call";
            EActStatus[EActStatus["Raise"] = 4] = "Raise";
            EActStatus[EActStatus["AllIn"] = 5] = "AllIn";
            EActStatus[EActStatus["Delay"] = 6] = "Delay";
            EActStatus[EActStatus["Straddle"] = 7] = "Straddle";
            EActStatus[EActStatus["FirstBet"] = 9] = "FirstBet";
            EActStatus[EActStatus["SB"] = 10] = "SB";
            EActStatus[EActStatus["BB"] = 11] = "BB";
            return EActStatus;
          }({});
          _TexasPlay.EActStatus = EActStatus;
          var EActType = /*#__PURE__*/function (EActType) {
            EActType[EActType["Check"] = 1] = "Check";
            EActType[EActType["Fold"] = 2] = "Fold";
            EActType[EActType["Call"] = 3] = "Call";
            EActType[EActType["Raise"] = 4] = "Raise";
            EActType[EActType["AllIn"] = 5] = "AllIn";
            EActType[EActType["Delay"] = 6] = "Delay";
            EActType[EActType["Straddle"] = 7] = "Straddle";
            EActType[EActType["ReturnChip"] = 8] = "ReturnChip";
            return EActType;
          }({});
          _TexasPlay.EActType = EActType;
        })(TexasPlay || (TexasPlay = _GameConst.TexasPlay || (_GameConst.TexasPlay = {})));
        var Poker;
        (function (_Poker) {
          var CARD_JOKE1_CODE = _Poker.CARD_JOKE1_CODE = 15;
          var CARD_JOKE2_CODE = _Poker.CARD_JOKE2_CODE = 16;
        })(Poker || (Poker = _GameConst.Poker || (_GameConst.Poker = {})));
        var Notice;
        (function (_Notice) {
          var type = /*#__PURE__*/function (type) {
            type[type["NOTICE_TYPE_CLUB"] = 1] = "NOTICE_TYPE_CLUB";
            type[type["NOTICE_TYPE_SYSTEM"] = 2] = "NOTICE_TYPE_SYSTEM";
            return type;
          }({});
          _Notice.type = type;
          var deleteType = /*#__PURE__*/function (deleteType) {
            deleteType[deleteType["single"] = 1] = "single";
            deleteType[deleteType["all"] = 2] = "all";
            return deleteType;
          }({});
          _Notice.deleteType = deleteType;
          var EACH_TIMES_REQUEST_MSG_COUNT = _Notice.EACH_TIMES_REQUEST_MSG_COUNT = 500;
          var NOTICE_SUB_TYPE_MATCH_CANNEL = _Notice.NOTICE_SUB_TYPE_MATCH_CANNEL = 6;
          var NOTICE_SUB_HALL_RANK_REWARD = _Notice.NOTICE_SUB_HALL_RANK_REWARD = 48;
          var NOTICE_SUB_HALL_RANK_REWARD_GIFT = _Notice.NOTICE_SUB_HALL_RANK_REWARD_GIFT = 49;
        })(Notice || (Notice = _GameConst.Notice || (_GameConst.Notice = {})));
        var EHALL_PAGE_TYPE = /*#__PURE__*/function (EHALL_PAGE_TYPE) {
          EHALL_PAGE_TYPE[EHALL_PAGE_TYPE["MY_GAGES"] = 100] = "MY_GAGES";
          EHALL_PAGE_TYPE[EHALL_PAGE_TYPE["HOT"] = 101] = "HOT";
          EHALL_PAGE_TYPE[EHALL_PAGE_TYPE["NLH"] = 1] = "NLH";
          EHALL_PAGE_TYPE[EHALL_PAGE_TYPE["SIXPLUS"] = 2] = "SIXPLUS";
          EHALL_PAGE_TYPE[EHALL_PAGE_TYPE["MTT"] = 3] = "MTT";
          EHALL_PAGE_TYPE[EHALL_PAGE_TYPE["PLO4"] = 4] = "PLO4";
          EHALL_PAGE_TYPE[EHALL_PAGE_TYPE["TG_CASH"] = 1000] = "TG_CASH";
          EHALL_PAGE_TYPE[EHALL_PAGE_TYPE["TG_NHL"] = 1001] = "TG_NHL";
          return EHALL_PAGE_TYPE;
        }({});
        _GameConst.EHALL_PAGE_TYPE = EHALL_PAGE_TYPE;
        var HALL_ROOM_INFO = _GameConst.HALL_ROOM_INFO = [{
          pageid: 0,
          reqId: EHALL_PAGE_TYPE.MY_GAGES,
          name: 'TXT_936'
        }, {
          pageid: 1,
          reqId: EHALL_PAGE_TYPE.HOT,
          name: 'BUTTON_RECOMMEND'
        }, {
          pageid: 2,
          reqId: EHALL_PAGE_TYPE.TG_NHL,
          name: 'TXT_1030'
        }, {
          pageid: 3,
          reqId: EHALL_PAGE_TYPE.TG_CASH,
          name: 'CASH_NHL'
        }, {
          pageid: 4,
          reqId: EHALL_PAGE_TYPE.MTT,
          name: 'MTT'
        }];
        var ERoomType = /*#__PURE__*/function (ERoomType) {
          ERoomType[ERoomType["normal"] = 1] = "normal";
          ERoomType[ERoomType["mtt"] = 2] = "mtt";
          return ERoomType;
        }({});
        _GameConst.ERoomType = ERoomType;
        var MATCH;
        (function (_MATCH) {
          var EMttType = /*#__PURE__*/function (EMttType) {
            EMttType[EMttType["MTT_TYPE_NORMAL"] = 1] = "MTT_TYPE_NORMAL";
            EMttType[EMttType["MTT_TYPE_SATELLITE"] = 2] = "MTT_TYPE_SATELLITE";
            EMttType[EMttType["MTT_TYPE_MULTY_DAY"] = 3] = "MTT_TYPE_MULTY_DAY";
            return EMttType;
          }({});
          _MATCH.EMttType = EMttType;
          var EMttBtnStatus = /*#__PURE__*/function (EMttBtnStatus) {
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_REGISTER"] = -1] = "MATCH_STATUS_REGISTER";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_APPLYING"] = -2] = "MATCH_STATUS_APPLYING";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_WAITING"] = -3] = "MATCH_STATUS_WAITING";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_ENTER"] = -4] = "MATCH_STATUS_ENTER";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_DELAY_ENTER"] = -5] = "MATCH_STATUS_DELAY_ENTER";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_RE_ENTER"] = -6] = "MATCH_STATUS_RE_ENTER";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_CLOSE"] = -7] = "MATCH_STATUS_CLOSE";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_DISABLE_CLICK"] = -8] = "MATCH_STATUS_DISABLE_CLICK";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_FINISH"] = -9] = "MATCH_STATUS_FINISH";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_LOOKON"] = -10] = "MATCH_STATUS_LOOKON";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_REBUY"] = -11] = "MATCH_STATUS_REBUY";
            EMttBtnStatus[EMttBtnStatus["MATCH_STATUS_NO_RANK"] = 0] = "MATCH_STATUS_NO_RANK";
            return EMttBtnStatus;
          }({});
          _MATCH.EMttBtnStatus = EMttBtnStatus;
          var ETimeType = /*#__PURE__*/function (ETimeType) {
            ETimeType[ETimeType["REGISTRATION_DEADLINE"] = 1] = "REGISTRATION_DEADLINE";
            ETimeType[ETimeType["MATCH_BEGIN"] = 2] = "MATCH_BEGIN";
            ETimeType[ETimeType["MATCH_DELAY"] = 3] = "MATCH_DELAY";
            ETimeType[ETimeType["ALREADY_STARTED"] = 4] = "ALREADY_STARTED";
            ETimeType[ETimeType["MATCH_CLOSED"] = 5] = "MATCH_CLOSED";
            ETimeType[ETimeType["MATCH_FINISHED"] = 6] = "MATCH_FINISHED";
            return ETimeType;
          }({});
          _MATCH.ETimeType = ETimeType;
          var ETimeDays = /*#__PURE__*/function (ETimeDays) {
            ETimeDays[ETimeDays["TODAY"] = 0] = "TODAY";
            ETimeDays[ETimeDays["TOMORROW"] = 1] = "TOMORROW";
            ETimeDays[ETimeDays["OTHER_DAY"] = 2] = "OTHER_DAY";
            ETimeDays[ETimeDays["TIME_COUNT_DOWN"] = 3] = "TIME_COUNT_DOWN";
            return ETimeDays;
          }({});
          _MATCH.ETimeDays = ETimeDays;
          var EKOBountyType = /*#__PURE__*/function (EKOBountyType) {
            EKOBountyType[EKOBountyType["KO"] = 1] = "KO";
            EKOBountyType[EKOBountyType["PKO"] = 2] = "PKO";
            return EKOBountyType;
          }({});
          _MATCH.EKOBountyType = EKOBountyType;
          var EMTTJoinState = /*#__PURE__*/function (EMTTJoinState) {
            EMTTJoinState[EMTTJoinState["NORMAL"] = 4] = "NORMAL";
            EMTTJoinState[EMTTJoinState["EXIT"] = 7] = "EXIT";
            EMTTJoinState[EMTTJoinState["LOOKON"] = 8] = "LOOKON";
            return EMTTJoinState;
          }({});
          _MATCH.EMTTJoinState = EMTTJoinState;
          var ETableType = /*#__PURE__*/function (ETableType) {
            ETableType[ETableType["S"] = 0] = "S";
            ETableType[ETableType["N"] = 1] = "N";
            return ETableType;
          }({});
          _MATCH.ETableType = ETableType;
          var AddonTotalTime = _MATCH.AddonTotalTime = 180;
          var RebuyTotalTime = _MATCH.RebuyTotalTime = 60;
          function decodeMsgWeedCastValue(value) {
            try {
              var data = JSON.parse(value);
              if (data.reward && data.reward.length > 0) {
                data.reward = JSON.parse(data.reward);
              } else {
                data.reward = undefined;
              }
              return data;
            } catch (error) {
              error.message = error.message ? error.message : '';
              error.message = "decodeMsgWeedCastValue fail: " + error.message;
              OnError.cache(error);
            }
          }
          _MATCH.decodeMsgWeedCastValue = decodeMsgWeedCastValue;
        })(MATCH || (MATCH = _GameConst.MATCH || (_GameConst.MATCH = {})));
        var ExpressionMap = _GameConst.ExpressionMap = {
          1: 'hurry',
          2: 'self-evident',
          3: 'question',
          4: 'sad',
          5: 'laugh',
          6: 'cry',
          7: 'anger',
          8: 'alarmed',
          9: 'heart-broken',
          10: 'despise',
          11: 'fire',
          12: 'wink',
          13: 'provoke',
          14: 'sweating',
          15: 'blab'
        };
        var MTT_ADDON_TIME_MIN = _GameConst.MTT_ADDON_TIME_MIN = 3;
        var EMsgKickReason = /*#__PURE__*/function (EMsgKickReason) {
          EMsgKickReason[EMsgKickReason["DuplicatLogin"] = 1] = "DuplicatLogin";
          EMsgKickReason[EMsgKickReason["ServerClose"] = 2] = "ServerClose";
          EMsgKickReason[EMsgKickReason["BackGroundKick"] = 3] = "BackGroundKick";
          EMsgKickReason[EMsgKickReason["BanningAccount"] = 4] = "BanningAccount";
          return EMsgKickReason;
        }({});
        _GameConst.EMsgKickReason = EMsgKickReason;
        var ESoundPath = /*#__PURE__*/function (ESoundPath) {
          ESoundPath["SOUND_EFFECT_CHIP_TO_POT"] = "Sound/sound_game_chiptopot";
          ESoundPath["SOUND_EFFECT_CHIP_TO_TABLE"] = "Sound/sound_game_addon";
          ESoundPath["SOUND_EFFECT_CHEAK"] = "Sound/sound_game_check";
          ESoundPath["SOUND_EFFECT_FOLD"] = "Sound/sound_game_fold";
          ESoundPath["SOUND_EFFECT_TURN"] = "Sound/sound_game_turnmyself";
          ESoundPath["SOUND_EFFECT_TIME_OUT"] = "Sound/sound_game_timeout";
          ESoundPath["SOUND_EFFECT_PKFLIP"] = "Sound/sound_game_pkflip";
          ESoundPath["SOUND_EFFECT_WIN"] = "Sound/sound_game_win";
          return ESoundPath;
        }({});
        _GameConst.ESoundPath = ESoundPath;
      })(GameConst || (GameConst = exports('GameConst', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameDebugView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_DebugView.ts', './CocosDevKit.ts', './UITools.ts'], function (exports) {
  var _inheritsLoose, cclegacy, EEnterType, GameWindowBase, UI_DebugView, UITools;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_DebugView = module.default;
    }, null, function (module) {
      UITools = module.UITools;
    }],
    execute: function () {
      cclegacy._RF.push({}, "99a44onCixBxaX7XbiSBihc", "GameDebugView", undefined);
      var GameDebugView = exports('GameDebugView', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(GameDebugView, _GameWindowBase);
        function GameDebugView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Debug'];
          _this.paneClass = UI_DebugView;
          _this.gestureCloseWindow = false;
          _this.enterType = EEnterType.horizontal;
          _this.showEnterLoading = false;
          _this.pageOrder = 1000;
          _this.pageName = 'GameDebugView';
          return _this;
        }
        GameDebugView.create = function create(from) {
          return new GameDebugView(from);
        };
        var _proto = GameDebugView.prototype;
        _proto.onInit = function onInit() {
          for (var i = 0; i < this.pane.m_contentList._children.length; i++) {
            var item = this.pane.m_contentList._children[i];
            item.data = this;
          }
          UITools.optimizationScrollPane(this.pane.m_contentList.scrollPane);
        };
        _proto.callOnDestroy = function callOnDestroy(callback) {
          this.addHook({
            onPageDestroy: callback
          });
          this.hide();
        };
        return GameDebugView;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameDecorators.ts", ['cc', './fairygui.mjs', './GrootEx.ts', './CocosDevKit.ts', './OnError.ts', './LanguageManage.ts', './NetData87.ts', './Logger.ts', './HttpProtoBase.ts', './CDKDecorators.ts'], function (exports) {
  var assert, Node, Component, cclegacy, GObject, GRoot, UIObjectFactory, GRootEx, OnError, LanguageManager, NetData87, Log, HttpError, EHttpErrorType, CDKSafeError;
  return {
    setters: [function (module) {
      assert = module.assert;
      Node = module.Node;
      Component = module.Component;
      cclegacy = module.cclegacy;
    }, function (module) {
      GObject = module.GObject;
      GRoot = module.GRoot;
      UIObjectFactory = module.UIObjectFactory;
    }, function (module) {
      GRootEx = module.GRootEx;
    }, null, function (module) {
      OnError = module.OnError;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      NetData87 = module.NetData87;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      HttpError = module.HttpError;
      EHttpErrorType = module.EHttpErrorType;
    }, function (module) {
      CDKSafeError = module.CDKSafeError;
    }],
    execute: function () {
      exports({
        AutoLoadingProcess: AutoLoadingProcess,
        CustomFguiClass: CustomFguiClass,
        ExceptionCapture: ExceptionCapture,
        GameDataClass: GameDataClass,
        InitGameData: InitGameData,
        InitNetProxy: InitNetProxy,
        MarkForDataBinder: MarkForDataBinder,
        MarkForNetEventListener: MarkForNetEventListener,
        MarkForPageEventListener: MarkForPageEventListener,
        NetProxyClass: NetProxyClass,
        PrepareRequest: PrepareRequest,
        ResetGameData: ResetGameData,
        ResetNetProxy: ResetNetProxy,
        SetCustomFguiClassExtension: SetCustomFguiClassExtension
      });
      cclegacy._RF.push({}, "de53aCJVo9I+6k0MVQVZsew", "GameDecorators", undefined);

      /**
       * 标记为数据绑定目标，被使用的数据在变化后会自动调用这个方法
       * @description 注意被使用的数据在变化后会自动调用这个方法，所以通常来说不要在被标记的方法中做设置界面内容以外的操作，避免引起逻辑或业务的错误难以调试和定位问题
       * @description 只能装饰方法
       * @returns
       */
      function MarkForDataBinder() {
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", MarkForDataBinder \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var tg = target;
          if (!tg._DataBinderMark_) {
            tg._DataBinderMark_ = [];
          }
          tg._DataBinderMark_.push(propertyKey);
        };
      }

      /**
       * 标记为网络事件监听函数
       * @description 只能装饰方法
       * @param protoID 协议ID
       * @param promptErrcode 是否在返回码非 0 且有错误码文本的配置时进行提示
       * @returns
       */
      function MarkForNetEventListener(protoID, promptErrcode) {
        if (promptErrcode === void 0) {
          promptErrcode = false;
        }
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", MarkForNetEventListener \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var tg = target;
          if (!tg._NetEventListenerMark_) {
            tg._NetEventListenerMark_ = [];
          }
          tg._NetEventListenerMark_.push({
            propertyKey: propertyKey,
            protoID: protoID
          });
          if (!promptErrcode) return;
          var origin = descriptor.value;
          descriptor.value = function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            var netdata = args[0];
            if (netdata instanceof NetData87) {
              var ret = netdata.getRetCode();
              if (ret != undefined && ret != null && ret != 0) {
                var text = LanguageManager.getErrorText(ret.toString());
                if (text) {
                  if (className.endsWith('Proxy')) {
                    // @ts-ignore
                    var insts = GRootEx._inst;
                    for (var i = 0; i < insts.length; i++) {
                      var inst = insts[i];
                      inst.showCenterTip(text);
                    }
                  } else {
                    var groot;
                    var targetObj = this;
                    if (targetObj && (Node.isNode(targetObj) || targetObj instanceof GObject || targetObj instanceof Component)) {
                      groot = GRoot.getInstance(targetObj);
                    }
                    if (!groot) {
                      groot = GRootEx.getInst(); // 没有指定target的或者不在groot下的target，默认在第一个groot实例上显示
                    }

                    groot.showCenterTip(text);
                  }
                }
              }
            }
            origin.apply(this, args);
          };
        };
      }

      /**
       * 标记为页面事件监听函数
       * @param eventName
       * @returns
       */
      function MarkForPageEventListener(eventName) {
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", MarkForPageEventListener \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var tg = target;
          if (!tg._PageEventListenerMark_) {
            tg._PageEventListenerMark_ = [];
          }
          tg._PageEventListenerMark_.push({
            propertyKey: propertyKey,
            eventName: eventName
          });
        };
      }

      /**
       * 自动显示loading
       * @description 仅在装饰 GObject, Node, Component 下的方法时生效，如果方法的实例不在GRoot实例下，loading将默认显示到第一个GRoot实例下
       * @description 请不要用来装饰非异步函数
       */
      function AutoLoadingProcess() {
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", AutoLoadingProcess \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var origin = descriptor.value;
          descriptor.value = function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            var result = origin.apply(this, args);
            if (result instanceof Promise) {
              var groot;
              var loadingTarget = this;
              if (loadingTarget && (Node.isNode(loadingTarget) || loadingTarget instanceof GObject || loadingTarget instanceof Component)) {
                groot = GRoot.getInstance(loadingTarget);
              }
              if (!groot) {
                groot = GRootEx.getInst(); // 没有指定target的或者不在groot下的target，默认在第一个groot实例上显示loading
              }

              var loadingItem = groot.createLoadingItem(this);
              loadingItem.show();
              return result.then(function () {
                loadingItem.destroy();
              }, function (reason) {
                loadingItem.destroy();
                return Promise.reject(reason);
              });
            } else {
              Log.debug.warn(target.name, propertyKey, 'AutoLoadingProcess 请不要用来装饰非异步函数');
            }
            return result;
          };
        };
      }

      /**
       * 用于统一处理 Exception
       * @param groot
       * @param err
       * @returns
       */
      function HandlerException(groot, err) {
        if (groot && err instanceof HttpError) {
          Log.debug.error(err);
          if (err.errType == EHttpErrorType.CodeError) {
            if (err.errCode == -9) {
              groot.showCenterTip('TXT_734');
            } else if (err.errCode == -6) {
              groot.showCenterTip('TXT_735');
            } else if (err.errCode == -2 || err.errCode == -3) {
              groot.showCenterTip('TXT_737');
            } else if (err.errCode == -12) {
              groot.showCenterTip('TXT_740');
            } else if (err.errCode == -14) {
              groot.showCenterTip('TXT_740');
            } else if (err.errCode == -8) {
              groot.showCenterTip('TXT_741');
            } else if (err.errCode == -7) {
              groot.showCenterTip('TXT_742');
            } else {
              groot.showCenterTip(err.message);
            }
            return false;
          } else {
            Log.debug.error(err);
            {
              groot.showCenterTip('Some http exception are caught');
            }
            OnError.cache(err);
            return false;
          }
        } else if (err instanceof CDKSafeError) {
          Log.debug.error(err);
          return false;
        } else {
          Log.debug.error(err);
          {
            groot.showCenterTip('Some exception are caught');
          }
          OnError.cache(err);
          return false;
        }
      }

      /**
       * 自动异常捕获
       * @description 仅在装饰 GObject, Node, Component 下的方法时生效
       * @returns
       */
      function ExceptionCapture() {
        return function (target, propertyKey, descriptor) {
          var className = 'unknown';
          if (target.constructor && target.constructor.name) {
            className = target.constructor.name;
          }
          assert(typeof descriptor.value == 'function', className + " " + propertyKey + ", AutoRejectionHandler \u88C5\u9970\u5668\u53EA\u80FD\u7528\u5728\u51FD\u6570\u4E0A");
          var origin = descriptor.value;
          descriptor.value = function () {
            var groot;
            var loadingTarget = this;
            if (loadingTarget && (Node.isNode(loadingTarget) || loadingTarget instanceof GObject || loadingTarget instanceof Component)) {
              groot = GRoot.getInstance(loadingTarget);
            }
            if (!groot) {
              groot = GRootEx.getInst(); // 没有指定target的或者不在groot下的target，默认在第一个groot实例上显示loading
            }

            var result;
            try {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              result = origin.apply(this, args);
            } catch (error) {
              HandlerException(groot, error);
              return;
            }
            if (result instanceof Promise) {
              return result.then(function (value) {
                return value;
              })["catch"](function (reason) {
                if (HandlerException(groot, reason)) {
                  return Promise.reject(reason);
                }
              });
            }
            return result;
          };
        };
      }
      var NetProxyList = [];
      var SortOrderKey = '__proxy_sort_order__';
      /**
       * 将类标记为 proxy 类，用于对所有标记的 proxy 进行统一的操作
       * @param sortOrder 顺序
       * @returns
       */
      function NetProxyClass(sortOrder) {
        if (sortOrder === void 0) {
          sortOrder = 10;
        }
        return function (target) {
          target[SortOrderKey] = sortOrder;
          if (NetProxyList.length == 0) {
            NetProxyList.push(target);
            return;
          }
          for (var i = NetProxyList.length - 1; i >= 0; i--) {
            var cls = NetProxyList[i];
            var order = cls[SortOrderKey];
            if (sortOrder >= order) {
              NetProxyList.splice(i + 1, 0, target);
              return;
            }
          }
          NetProxyList.unshift(target);
        };
      }

      /**
       * 初始化所有 proxy，实例化所有被标记的 proxy 类并调用 init 方法
       */
      function InitNetProxy() {
        for (var i = 0; i < NetProxyList.length; i++) {
          var cls = NetProxyList[i];
          var obj = new cls();
          // @ts-ignore
          cls._inst = obj;
          obj.init();
        }
      }

      /**
       * 调用所有被标记的 proxy 实例的 reset 方法
       */
      function ResetNetProxy() {
        for (var i = 0; i < NetProxyList.length; i++) {
          var cls = NetProxyList[i];
          // @ts-ignore
          if (cls._inst && cls._inst.reset) {
            // @ts-ignore
            cls._inst.reset();
          }
        }
      }

      /**
       * 调用所有被标记的 proxy 实例的 prepareRequest 方法
       */
      function PrepareRequest() {
        var arr = [];
        for (var i = 0; i < NetProxyList.length; i++) {
          var cls = NetProxyList[i];
          // @ts-ignore
          if (cls._inst && cls._inst.reset) {
            arr.push(cls._inst.prepareRequest());
          }
        }
        return Promise.all(arr);
      }
      var GameDataList = [];

      /**
       * 将类标记为 data 类，目前用于对所有标记的 data 进行统一的初始化和重置
       * @param target
       */
      function GameDataClass(target) {
        GameDataList.push(target);
      }

      /**
       * 初始化所有 proxy
       */
      function InitGameData() {
        for (var i = 0; i < GameDataList.length; i++) {
          var cls = GameDataList[i];
          // @ts-ignore
          cls._inst = new cls();
        }
      }

      /**
       * 调用所有 proxy 的 reset
       */
      function ResetGameData() {
        for (var i = 0; i < GameDataList.length; i++) {
          var cls = GameDataList[i];
          // @ts-ignore
          if (cls._inst && cls._inst.reset) {
            // @ts-ignore
            cls._inst.reset();
          }
        }
      }
      var CustomFguiClassList = [];

      /**
       * @description 将类标记为自定义 fgui 类
       * @param target
       */
      function CustomFguiClass(target) {
        CustomFguiClassList.push(target);
      }
      function SetCustomFguiClassExtension() {
        for (var i = 0; i < CustomFguiClassList.length; i++) {
          var cls = CustomFguiClassList[i];
          // @ts-ignore
          if (cls.URL) {
            // @ts-ignore
            UIObjectFactory.setExtension(cls.URL, cls);
          }
        }
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameExpressionDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameDecorators.ts', './UI_GameExpressionDialog.ts', './GameConst.ts', './GameConfig.ts', './CDKDecorators.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, CustomFguiClass, UI_GameExpressionDialog, GameConst, GameConfig, EnumDownLoadType, SafeTimeInterval;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_GameExpressionDialog = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      GameConfig = module.GameConfig;
      EnumDownLoadType = module.EnumDownLoadType;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "efbe6n147pCUII1CZlRwLp0", "GameExpressionDialog", undefined);
      var GameExpressionDialog = exports('GameExpressionDialog', (_dec = SafeTimeInterval(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_GameExpressionDia) {
        _inheritsLoose(GameExpressionDialog, _UI_GameExpressionDia);
        function GameExpressionDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_GameExpressionDia.call.apply(_UI_GameExpressionDia, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.emojEx = null;
          _this.inited = false;
          return _this;
        }
        var _proto = GameExpressionDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_GameExpressionDia.prototype.onConstruct.call(this);
          this.emojEx = this.m_gameEmoj;
          var frame = this.m_frame;
          frame.m_closeButton.onClick(this.onButtonCloseClick, this);
        };
        _proto.onEnable = function onEnable() {
          _UI_GameExpressionDia.prototype.onEnable.call(this);
          if (this.inited) return;
          this.inited = true;
          for (var expressionID = 1; expressionID <= 15; expressionID++) {
            var place = this.emojEx["m_place" + (expressionID - 1)];
            place.onClick(this.onExpressionItemClick.bind(this, expressionID), this);
            var url = GameConfig.getOssImgUrl_1("icon_face_" + GameConst.ExpressionMap[expressionID] + ".png", EnumDownLoadType.DOWN_NOMALL);
            place.url = url;
            //LoadEncryImage.Instance.LoadRemoteDecryptImage(url, place);
          }
        };

        _proto.closeView = function closeView() {
          this.shareSpace.texasGamePage.popupLayer.m_expressionControler.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView() {
          this.shareSpace.texasGamePage.popupLayer.m_expressionControler.selectedIndex = 1;
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.closeView();
        };
        _proto.init = function init(shareSpace) {
          this.name = 'GameExpressionDialog';
          this.shareSpace = shareSpace;
        };
        _proto.onButtonCloseClick = function onButtonCloseClick() {
          this.closeView();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onButtonCloseClick();
          }
        };
        _proto.onExpressionItemClick = function onExpressionItemClick(expressionID) {
          this.closeView();
          this.shareSpace.chatProxy.sendExpression(expressionID);
        };
        _createClass(GameExpressionDialog, [{
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_expressionControler.selectedIndex == 1;
          }
        }]);
        return GameExpressionDialog;
      }(UI_GameExpressionDialog), _applyDecoratedDescriptor(_class2.prototype, "onButtonCloseClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onButtonCloseClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameMttProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './CocosDevKit.ts', './GameConst.ts', './MttProxy.ts', './gameproto.js', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, MarkForNetEventListener, GameNetProxyBase, GameConst, MttProxy, _cjsExports, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class;
      cclegacy._RF.push({}, "16820ZuEa9KE4Z+vJR1xfrD", "GameMttProxy", undefined);
      var GameMttProxy = exports('GameMttProxy', (_dec = MarkForNetEventListener(_cjsExports.mtt.MsgGameRoomIdCast.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.mtt.MsgWaitCast.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.mtt.MsgAddonOrBreakCast.ProtocolID), _dec4 = MarkForNetEventListener(_cjsExports.mtt.MsgRebuyInfoCast.ProtocolID), _dec5 = MarkForNetEventListener(_cjsExports.mtt.MsgMttStatusCast.ProtocolID), _dec6 = MarkForNetEventListener(_cjsExports.mtt.MsgRoomInfoCast.ProtocolID), _dec7 = MarkForNetEventListener(_cjsExports.mtt.MsgWeedCast.ProtocolID), _dec8 = MarkForNetEventListener(_cjsExports.mtt.MsgNotifyFinalTableCast.ProtocolID), _dec9 = MarkForNetEventListener(_cjsExports.mtt.MsgNextHandAddonOrBreakCast.ProtocolID), _dec10 = MarkForNetEventListener(_cjsExports.mtt.MsgEntryPlayerNumChangeCast.ProtocolID), _dec11 = MarkForNetEventListener(_cjsExports.mtt.MsgPlayerRankCast.ProtocolID), _dec12 = MarkForNetEventListener(_cjsExports.mtt.MsgMttMoneyRoundCast.ProtocolID), (_class = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(GameMttProxy, _GameNetProxyBase);
        function GameMttProxy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameNetProxyBase.call.apply(_GameNetProxyBase, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          /**
           * 游戏逻辑驱动器，网络消息触发的游戏逻辑 push 进来对游戏逻辑进行驱动，游戏逻辑在执行时可以对驱动器进行暂停和恢复
           */
          _this.gameLogicDrive = void 0;
          return _this;
        }
        var _proto = GameMttProxy.prototype;
        _proto.init = function init(shareSpace, gameLogicDrive) {
          this.shareSpace = shareSpace;
          this.gameLogicDrive = gameLogicDrive;
          _GameNetProxyBase.prototype.init.call(this);
        };
        _proto.destroy = function destroy() {
          this.removeEventListener();
        };
        _proto.joinMTT = function joinMTT() {
          var gameData = this.shareSpace.texasGameData;
          var msg = _cjsExports.mtt.MsgJoinMtt.create();
          msg.mttid = gameData.mttId;
          if (gameData.isMatch) {
            if (gameData.isLookOn) {
              msg.state = GameConst.MATCH.EMTTJoinState.LOOKON;
              msg.roomId = gameData.lookonRoom;
              msg.obPlayerid = gameData.lookonPlayer;
            } else {
              msg.state = GameConst.MATCH.EMTTJoinState.NORMAL;
            }
          } else {
            msg.state = GameConst.MATCH.EMTTJoinState.NORMAL;
          }
          if (gameData.isClubRoom) {
            msg.clubid = gameData.clubID;
          }
          // msg.switchOutMttid
          // msg.noSwitchOut
          this.send(_cjsExports.mtt.MsgJoinMtt.ProtocolID, _cjsExports.mtt.MsgJoinMtt.encode(msg).finish(), this.onMsgJoinMttRsp.bind(this));
        };
        _proto.onMsgJoinMttRsp = function onMsgJoinMttRsp(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgJoinMttRsp);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgJoinMttRsp', msg);
          this.gameLogicDrive.push(this.shareSpace.onMatchJoin.bind(this.shareSpace, netdata));
        };
        _proto.exitMTT = function exitMTT(onRsp) {
          var gameData = this.shareSpace.texasGameData;
          var msg = _cjsExports.mtt.MsgJoinMtt.create();
          msg.mttid = gameData.mttId;
          msg.state = GameConst.MATCH.EMTTJoinState.EXIT;
          // msg.switchOutMttid
          msg.noSwitchOut = false;
          this.send(_cjsExports.mtt.MsgJoinMtt.ProtocolID, _cjsExports.mtt.MsgJoinMtt.encode(msg).finish(), this.onMsgExitMttRsp.bind(this, onRsp));
        };
        _proto.onMsgExitMttRsp = function onMsgExitMttRsp(onRsp, netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgJoinMttRsp);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgExitMttRsp', msg);
          onRsp(msg);
          // if (netdata.isRetSuccess()) {
          //     onRsp(msg);
          // } else {
          //     this.shareSpace.texasGamePage.onMsgRetFail(netdata);
          // }
        }

        //服务器 主动推送mtt的状态变化后，客户端根据变动主动同步mtt的信息 eg：mtt到点涨盲， 钱圈等
        ;

        _proto.getMttFreshInfo = function getMttFreshInfo() {
          var msg = _cjsExports.mtt.MsgGetMttFreshInfo.create();
          msg.mttid = this.shareSpace.texasGameData.mttId;
          this.send(_cjsExports.mtt.MsgGetMttFreshInfo.ProtocolID, _cjsExports.mtt.MsgGetMttFreshInfo.encode(msg).finish(), this.onMsgGetMttFreshInfoRsp.bind(this));
        };
        _proto.onMsgGetMttFreshInfoRsp = function onMsgGetMttFreshInfoRsp(netdata) {
          var msg = netdata.getData(_cjsExports.mtt.MsgGetMttFreshInfoRsp);
          if (msg.mttid == this.shareSpace.texasGameData.mttId) {
            this.shareSpace.texasGameData.mttInfoFresh(msg);
            this.shareSpace.texasGamePage.popupLayer.updateMttPopup();
            this.shareSpace.texasGamePage.mttWaitTipLayer.updateLayer();
          }
        }

        /**
         * 请求 addon
         */;
        _proto.requestAddon = function requestAddon(onRsp) {
          var msg = _cjsExports.mtt.MsgRequestAddon.create();
          msg.mttid = this.shareSpace.texasGameData.mttId;
          this.send(_cjsExports.mtt.MsgRequestAddon.ProtocolID, _cjsExports.mtt.MsgRequestAddon.encode(msg).finish(), this.onMsgRequestAddonRsp.bind(this, onRsp));
        };
        _proto.onMsgRequestAddonRsp = function onMsgRequestAddonRsp(onRsp, netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgRequestAddonRsp);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          if (netdata.isRetSuccess()) {
            this.shareSpace.texasGameData.mttState.addonNum++;
            this.shareSpace.texasGamePage.menuLayer.updateGameMenuStatus();
            onRsp(msg);
          } else {
            this.shareSpace.texasGamePage.onMsgRetFail(netdata);
          }
        }

        /**
         * 请求 rebuy
         * @param type 1=申请 2=不申请(退赛) 3=手动申请
         */;
        _proto.requestRebuy = function requestRebuy(type, onRsp) {
          var msg = _cjsExports.mtt.MsgApply.create();
          msg.mttid = this.shareSpace.texasGameData.mttId;
          msg.applytype = 2;
          msg.type = type;
          if (this.shareSpace.texasGameData.isClubRoom) {
            msg.clubid = this.shareSpace.texasGameData.clubID;
          }
          if (onRsp) {
            this.send(_cjsExports.mtt.MsgApply.ProtocolID, _cjsExports.mtt.MsgApply.encode(msg).finish(), this.onMsgApply.bind(this, onRsp));
          } else {
            this.send(_cjsExports.mtt.MsgApply.ProtocolID, _cjsExports.mtt.MsgApply.encode(msg).finish());
          }
        };
        _proto.onMsgApply = function onMsgApply(onRsp, netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgApplyRsp);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          if (netdata.isRetSuccess()) {
            onRsp(msg);
          } else {
            this.shareSpace.texasGamePage.onMsgRetFail(netdata);
          }
        }

        /**
         * 获取比赛当前信息
         */;
        _proto.getMttLiveInfo = function getMttLiveInfo(onRsp) {
          var msg = _cjsExports.mtt.MsgGetMttLiveInfo.create();
          msg.mttid = this.shareSpace.texasGameData.mttId;
          this.send(_cjsExports.mtt.MsgGetMttLiveInfo.ProtocolID, _cjsExports.mtt.MsgGetMttLiveInfo.encode(msg).finish(), this.onMsgGetMttLiveInfoRsp.bind(this, onRsp));
        };
        _proto.onMsgGetMttLiveInfoRsp = function onMsgGetMttLiveInfoRsp(callback, netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgGetMttLiveInfoRsp);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgGetMttLiveInfoRsp', msg);
          if (netdata.isRetSuccess()) {
            callback(msg);
          } else {
            this.shareSpace.texasGamePage.onMsgRetFail(netdata);
          }
        }

        /**
         * 获取比赛当前排名信息
         */;
        _proto.getMttRankInfo = function getMttRankInfo(roomId, onRsp) {
          var msg = _cjsExports.mtt.MsgGetMttRankInfo.create();
          msg.mttid = this.shareSpace.texasGameData.mttId;
          if (roomId) {
            msg.roomid = roomId;
          }
          this.send(_cjsExports.mtt.MsgGetMttRankInfo.ProtocolID, _cjsExports.mtt.MsgGetMttRankInfo.encode(msg).finish(), this.onMsgGetMttRankInfoRsp.bind(this, onRsp));
        };
        _proto.onMsgGetMttRankInfoRsp = function onMsgGetMttRankInfoRsp(callback, netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgGetMttRankInfoRsp);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgGetMttRankInfoRsp', msg);
          if (netdata.isRetSuccess()) {
            callback(msg);
          } else {
            this.shareSpace.texasGamePage.onMsgRetFail(netdata);
          }
        }
        /**
         * 获取比赛房间列表
         */;
        _proto.getMttRoomList = function getMttRoomList(onRsp) {
          var msg = _cjsExports.mtt.MsgGetMttRoomList.create();
          msg.mttid = this.shareSpace.texasGameData.mttId;
          this.send(_cjsExports.mtt.MsgGetMttRoomList.ProtocolID, _cjsExports.mtt.MsgGetMttRoomList.encode(msg).finish(), this.onMsgGetMttRoomListRsp.bind(this, onRsp));
        };
        _proto.onMsgGetMttRoomListRsp = function onMsgGetMttRoomListRsp(callback, netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgGetMttRoomListRsp);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgGetMttRoomListRsp', msg);
          if (netdata.isRetSuccess()) {
            callback(msg);
          } else {
            this.shareSpace.texasGamePage.onMsgRetFail(netdata);
          }
        }
        /**
         * 获取比赛当前排名信息
         */;
        _proto.getMttPropRewardInfo = function getMttPropRewardInfo(onRsp) {
          var msg = _cjsExports.mtt.MsgGetMttPropRewardInfo.create();
          msg.mttid = this.shareSpace.texasGameData.mttId;
          this.send(_cjsExports.mtt.MsgGetMttPropRewardInfo.ProtocolID, _cjsExports.mtt.MsgGetMttPropRewardInfo.encode(msg).finish(), this.onMsgGetMttPropRewardInfoRsp.bind(this, onRsp));
        };
        _proto.onMsgGetMttPropRewardInfoRsp = function onMsgGetMttPropRewardInfoRsp(callback, netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgGetMttPropRewardInfoRsp);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgGetMttPropRewardInfoRsp', msg);
          if (netdata.isRetSuccess()) {
            callback(msg);
          } else {
            this.shareSpace.texasGamePage.onMsgRetFail(netdata);
          }
        };
        _proto.onMsgGameRoomIdCast = function onMsgGameRoomIdCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgWaitCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgGameRoomIdCast', msg);
          this.gameLogicDrive.push(this.shareSpace.onMttGameRoomIdCast.bind(this.shareSpace, msg));
        };
        _proto.onMsgWaitCast = function onMsgWaitCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgWaitCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgWaitCast', msg);
          this.gameLogicDrive.push(this.shareSpace.onMttWaitCast.bind(this.shareSpace, msg));
        };
        _proto.onMsgAddonOrBreakCast = function onMsgAddonOrBreakCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgAddonOrBreakCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgAddonOrBreakCast', msg);
          if (msg.type == 1) {
            this.gameLogicDrive.push(this.shareSpace.onMttAddOnCast.bind(this.shareSpace, msg));
          } else {
            this.gameLogicDrive.push(this.shareSpace.onMttBreakCast.bind(this.shareSpace, msg));
          }
        };
        _proto.onMsgRebuyInfoCast = function onMsgRebuyInfoCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgRebuyInfoCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgRebuyInfoCast', msg);
          this.gameLogicDrive.push(this.shareSpace.onMttRebuyInfoCast.bind(this.shareSpace, msg));
        };
        _proto.onMsgMttStatusCast = function onMsgMttStatusCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgMttStatusCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgMttStatusCast', msg);
          switch (msg.mttidStatus) {
            case 1:
              // 新建比赛
              break;
            case 2:
              // 牌局关闭
              this.gameLogicDrive.push(this.shareSpace.onMttClose.bind(this.shareSpace));
              break;
            case 3:
              // 3.比赛更新部分信息 4.比赛更新所有信息
              MttProxy.inst.getMttInfo(this.shareSpace.texasGameData.mttId, this.onMsgGetMttInfoRsp.bind(this));
              break;
            case 4:
              // 4.比赛更新所有信息
              this.getMttFreshInfo();
              break;
          }
          // if (msg.mttidStatus == 2) {
          //     // 只关心牌局关闭
          //     this.gameLogicDrive.push(this.shareSpace.onMttClose.bind(this.shareSpace));
          // }
        };

        _proto.onMsgGetMttInfoRsp = function onMsgGetMttInfoRsp(netData) {
          if (!this.shareSpace) return;
          if (!(this.shareSpace.texasGamePage.node && this.shareSpace.texasGamePage.node.isValid)) return;
          var msg = netData.getData(_cjsExports.mtt.MsgGetMttInfoRsp);
          if (msg.mttInfo) {
            this.shareSpace.texasGameData.mttInfo = msg.mttInfo;
            this.shareSpace.texasGamePage.popupLayer.updateMttPopup();
            this.shareSpace.texasGamePage.mttWaitTipLayer.updateLayer();
          }
        };
        _proto.onMsgRoomInfoCast = function onMsgRoomInfoCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgRoomInfoCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgRoomInfoCast', msg);
          this.gameLogicDrive.push(this.shareSpace.onMttRoomInfoCast.bind(this.shareSpace, msg));
        };
        _proto.onMsgWeedCast = function onMsgWeedCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgWeedCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgWeedCast', msg);
          this.gameLogicDrive.push(this.shareSpace.onMttWeedCast.bind(this.shareSpace, msg));
        };
        _proto.onMsgNotifyFinalTableCast = function onMsgNotifyFinalTableCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgNotifyFinalTableCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgNotifyFinalTableCast', msg);
          this.gameLogicDrive.push(this.shareSpace.onMttFinalTableCast.bind(this.shareSpace, msg));
        };
        _proto.onMsgNextHandAddonOrBreakCast = function onMsgNextHandAddonOrBreakCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgNextHandAddonOrBreakCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgNextHandAddonOrBreakCast', msg);
          if (msg.type == 1) {
            this.gameLogicDrive.push(this.shareSpace.onMttNextHandAddonCast.bind(this.shareSpace, msg));
          } else {
            this.gameLogicDrive.push(this.shareSpace.onMttNextHandBreakCast.bind(this.shareSpace, msg));
          }
        };
        _proto.onMsgEntryPlayerNumChangeCast = function onMsgEntryPlayerNumChangeCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgEntryPlayerNumChangeCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          Log.game.log('GameMttProxy', 'onMsgEntryPlayerNumChangeCast', 'mttid:', msg.mttid, 'num:', msg.num);
          this.shareSpace.texasGameData.mttInfo.num = msg.num;
        };
        _proto.onMsgPlayerRankCast = function onMsgPlayerRankCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgPlayerRankCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          this.gameLogicDrive.push(this.shareSpace.onMsgPlayerRankCast.bind(this.shareSpace, msg));
        };
        _proto.oMsgMttMoneyRoundCast = function oMsgMttMoneyRoundCast(netdata) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var msg = netdata.getData(_cjsExports.mtt.MsgPlayerRankCast);
          if (msg.mttid != this.shareSpace.texasGameData.mttInfo.mttid) return;
          this.gameLogicDrive.push(this.shareSpace.onMsgMttMoneyRoundCast.bind(this.shareSpace, msg));
        };
        return GameMttProxy;
      }(GameNetProxyBase), (_applyDecoratedDescriptor(_class.prototype, "onMsgGameRoomIdCast", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgGameRoomIdCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgWaitCast", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgWaitCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgAddonOrBreakCast", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgAddonOrBreakCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgRebuyInfoCast", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgRebuyInfoCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgMttStatusCast", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgMttStatusCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgRoomInfoCast", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgRoomInfoCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgWeedCast", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgWeedCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgNotifyFinalTableCast", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgNotifyFinalTableCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgNextHandAddonOrBreakCast", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgNextHandAddonOrBreakCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgEntryPlayerNumChangeCast", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgEntryPlayerNumChangeCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgPlayerRankCast", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgPlayerRankCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "oMsgMttMoneyRoundCast", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "oMsgMttMoneyRoundCast"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameNetProxyBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GrootEx.ts', './NetProxyBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GRootEx, NetProxyBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GRootEx = module.GRootEx;
    }, function (module) {
      NetProxyBase = module.NetProxyBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8d63f9qdYFHOJQHRLB6bU6C", "GameNetProxyBase", undefined);
      var GameNetProxyBase = exports('GameNetProxyBase', /*#__PURE__*/function (_NetProxyBase) {
        _inheritsLoose(GameNetProxyBase, _NetProxyBase);
        function GameNetProxyBase() {
          return _NetProxyBase.apply(this, arguments) || this;
        }
        var _proto = GameNetProxyBase.prototype;
        /**
         * 向第一个 groot 实例发送页面事件
         * @param eventName
         * @param args
         */
        _proto.emitPageEvent0 = function emitPageEvent0(eventName) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          GRootEx.emitPageEvent.apply(GRootEx, [eventName, this, false].concat(args));
        }

        /**
         * 向所有 groot 实例发送页面事件
         * @param eventName
         * @param args
         */;
        _proto.emitPageEventAllInst = function emitPageEventAllInst(eventName) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          GRootEx.emitPageEvent.apply(GRootEx, [eventName, this, true].concat(args));
        };
        return GameNetProxyBase;
      }(NetProxyBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GamePlayBinder.ts", ['cc', './UI_TexasMttInfoBlindsLayer.ts', './UI_TexasMttInfoRankingLayerItem.ts', './UI_TexasMttInfoLayer.ts', './UI_TexasMttInfoRankingLayer.ts', './UI_TabbarButton.ts', './UI_TexasTableMainPot.ts', './UI_TexasChipActionLayer.ts', './UI_GameButtonCircle1.ts', './UI_GameMenuItem.ts', './UI_TexasTableSidePot.ts', './UI_TexasTableInfoLayer.ts', './UI_TexasTableInfoLayerItem.ts', './UI_Button1.ts', './UI_MttDialogValueItem.ts', './UI_TexasMttAddonDialog.ts', './UI_TexasOperatorContent.ts', './UI_GameOperatorButton.ts', './UI_TablePlayerTimeCountdown.ts', './UI_TexasMttTipMoney.ts', './UI_TexasMttTipBlindsUP.ts', './UI_TexasMttTipCommon.ts', './UI_TexasTipLayer.ts', './UI_TexasMttResultRewardItem.ts', './UI_TexasMttWaitStartItem.ts', './UI_GameExpressionDialog.ts', './UI_TexasPopupLayer.ts', './UI_TexasPlayerOpenCardItem.ts', './UI_CardTypePowerDialog.ts', './UI_CardTypePowerItem.ts', './UI_TexasRetrospectDetailInfo.ts', './UI_TexasRetrospectDetailTop.ts', './UI_TexasRetrospectDetailOp.ts', './UI_TexasRetrospectDetailLevel.ts', './UI_TexasRetrospectDetailShow.ts', './UI_TexasRetrospectDetailPlayer.ts', './UI_ButtonWithBg.ts', './UI_LoadingLayer.ts', './UI_TexasMttInfoBlindsLayerItem.ts', './UI_TexasPlayerInfoLayer.ts', './UI_TexasMttInfoTablesLayer.ts', './UI_TexasMttInfoTablesLayerItem.ts', './UI_TexasCardTypeLayer.ts', './UI_TexasCardTypeItem.ts', './UI_TexasMttInfoPrizesLayer.ts', './UI_TexasMttInfoPrizesLayerItem.ts', './UI_TexasBuyinDialog.ts', './UI_TexasPlayerItem.ts', './UI_TexasActionTag.ts', './UI_TableScoreLeft.ts', './UI_TableScoreRight.ts', './UI_TableScoreCenter.ts', './UI_gameExpression.ts', './UI_TexasPopMenuLayer.ts', './UI_TexasGamePage.ts', './UI_TexasRoomMenuLayer.ts', './UI_TexasTableLayer.ts', './UI_TexasPlayerLayer.ts', './UI_TexasOperatorLayer.ts', './UI_TexasMttRebuyDialog.ts', './UI_TexasMttWaitTipLayer.ts', './UI_TexasMttCountdown.ts', './UI_TexasMttResultDialog.ts', './UI_TexasHandCardTip.ts', './UI_TexasRetrospectBlankItem.ts', './UI_TexasChatAtPlayerItem.ts', './UI_TexasPokerLayer.ts', './UI_TexasPlayerWinRateItem.ts', './UI_TexasChatBlockPlayerItem.ts', './UI_TexasRetrospectLayer.ts', './UI_TexasRetrospectInfo.ts', './UI_TexasRetrospectInfoItem.ts', './UI_GameButton2.ts', './UI_TexasMttInfoObserverItem.ts', './UI_GamePreOperatorButton.ts', './UI_TexasRetrospectPotsItem.ts', './UI_TexasChatLayer.ts', './UI_TexasChatMstItemSelf.ts', './UI_TexasChatMstItemOther.ts', './UI_TexasChatMsgShortItem.ts', './UI_TexasGameContent.ts', './UI_GameButtonTimeBank.ts', './UI_GameButtonRabbitCamera.ts', './fairygui.mjs'], function (exports) {
  var cclegacy, UI_TexasMttInfoBlindsLayer, UI_TexasMttInfoRankingLayerItem, UI_TexasMttInfoLayer, UI_TexasMttInfoRankingLayer, UI_TabbarButton, UI_TexasTableMainPot, UI_TexasChipActionLayer, UI_GameButtonCircle1, UI_GameMenuItem, UI_TexasTableSidePot, UI_TexasTableInfoLayer, UI_TexasTableInfoLayerItem, UI_Button1, UI_MttDialogValueItem, UI_TexasMttAddonDialog, UI_TexasOperatorContent, UI_GameOperatorButton, UI_TablePlayerTimeCountdown, UI_TexasMttTipMoney, UI_TexasMttTipBlindsUP, UI_TexasMttTipCommon, UI_TexasTipLayer, UI_TexasMttResultRewardItem, UI_TexasMttWaitStartItem, UI_GameExpressionDialog, UI_TexasPopupLayer, UI_TexasPlayerOpenCardItem, UI_CardTypePowerDialog, UI_CardTypePowerItem, UI_TexasRetrospectDetailInfo, UI_TexasRetrospectDetailTop, UI_TexasRetrospectDetailOp, UI_TexasRetrospectDetailLevel, UI_TexasRetrospectDetailShow, UI_TexasRetrospectDetailPlayer, UI_ButtonWithBg, UI_LoadingLayer, UI_TexasMttInfoBlindsLayerItem, UI_TexasPlayerInfoLayer, UI_TexasMttInfoTablesLayer, UI_TexasMttInfoTablesLayerItem, UI_TexasCardTypeLayer, UI_TexasCardTypeItem, UI_TexasMttInfoPrizesLayer, UI_TexasMttInfoPrizesLayerItem, UI_TexasBuyinDialog, UI_TexasPlayerItem, UI_TexasActionTag, UI_TableScoreLeft, UI_TableScoreRight, UI_TableScoreCenter, UI_gameExpression, UI_TexasPopMenuLayer, UI_TexasGamePage, UI_TexasRoomMenuLayer, UI_TexasTableLayer, UI_TexasPlayerLayer, UI_TexasOperatorLayer, UI_TexasMttRebuyDialog, UI_TexasMttWaitTipLayer, UI_TexasMttCountdown, UI_TexasMttResultDialog, UI_TexasHandCardTip, UI_TexasRetrospectBlankItem, UI_TexasChatAtPlayerItem, UI_TexasPokerLayer, UI_TexasPlayerWinRateItem, UI_TexasChatBlockPlayerItem, UI_TexasRetrospectLayer, UI_TexasRetrospectInfo, UI_TexasRetrospectInfoItem, UI_GameButton, UI_TexasMttInfoObserverItem, UI_GamePreOperatorButton, UI_TexasRetrospectPotsItem, UI_TexasChatLayer, UI_TexasChatMstItemSelf, UI_TexasChatMstItemOther, UI_TexasChatMsgShortItem, UI_TexasGameContent, UI_GameButtonTimeBank, UI_GameButtonRabbitCamera, UIObjectFactory;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasMttInfoBlindsLayer = module.default;
    }, function (module) {
      UI_TexasMttInfoRankingLayerItem = module.default;
    }, function (module) {
      UI_TexasMttInfoLayer = module.default;
    }, function (module) {
      UI_TexasMttInfoRankingLayer = module.default;
    }, function (module) {
      UI_TabbarButton = module.default;
    }, function (module) {
      UI_TexasTableMainPot = module.default;
    }, function (module) {
      UI_TexasChipActionLayer = module.default;
    }, function (module) {
      UI_GameButtonCircle1 = module.default;
    }, function (module) {
      UI_GameMenuItem = module.default;
    }, function (module) {
      UI_TexasTableSidePot = module.default;
    }, function (module) {
      UI_TexasTableInfoLayer = module.default;
    }, function (module) {
      UI_TexasTableInfoLayerItem = module.default;
    }, function (module) {
      UI_Button1 = module.default;
    }, function (module) {
      UI_MttDialogValueItem = module.default;
    }, function (module) {
      UI_TexasMttAddonDialog = module.default;
    }, function (module) {
      UI_TexasOperatorContent = module.default;
    }, function (module) {
      UI_GameOperatorButton = module.default;
    }, function (module) {
      UI_TablePlayerTimeCountdown = module.default;
    }, function (module) {
      UI_TexasMttTipMoney = module.default;
    }, function (module) {
      UI_TexasMttTipBlindsUP = module.default;
    }, function (module) {
      UI_TexasMttTipCommon = module.default;
    }, function (module) {
      UI_TexasTipLayer = module.default;
    }, function (module) {
      UI_TexasMttResultRewardItem = module.default;
    }, function (module) {
      UI_TexasMttWaitStartItem = module.default;
    }, function (module) {
      UI_GameExpressionDialog = module.default;
    }, function (module) {
      UI_TexasPopupLayer = module.default;
    }, function (module) {
      UI_TexasPlayerOpenCardItem = module.default;
    }, function (module) {
      UI_CardTypePowerDialog = module.default;
    }, function (module) {
      UI_CardTypePowerItem = module.default;
    }, function (module) {
      UI_TexasRetrospectDetailInfo = module.default;
    }, function (module) {
      UI_TexasRetrospectDetailTop = module.default;
    }, function (module) {
      UI_TexasRetrospectDetailOp = module.default;
    }, function (module) {
      UI_TexasRetrospectDetailLevel = module.default;
    }, function (module) {
      UI_TexasRetrospectDetailShow = module.default;
    }, function (module) {
      UI_TexasRetrospectDetailPlayer = module.default;
    }, function (module) {
      UI_ButtonWithBg = module.default;
    }, function (module) {
      UI_LoadingLayer = module.default;
    }, function (module) {
      UI_TexasMttInfoBlindsLayerItem = module.default;
    }, function (module) {
      UI_TexasPlayerInfoLayer = module.default;
    }, function (module) {
      UI_TexasMttInfoTablesLayer = module.default;
    }, function (module) {
      UI_TexasMttInfoTablesLayerItem = module.default;
    }, function (module) {
      UI_TexasCardTypeLayer = module.default;
    }, function (module) {
      UI_TexasCardTypeItem = module.default;
    }, function (module) {
      UI_TexasMttInfoPrizesLayer = module.default;
    }, function (module) {
      UI_TexasMttInfoPrizesLayerItem = module.default;
    }, function (module) {
      UI_TexasBuyinDialog = module.default;
    }, function (module) {
      UI_TexasPlayerItem = module.default;
    }, function (module) {
      UI_TexasActionTag = module.default;
    }, function (module) {
      UI_TableScoreLeft = module.default;
    }, function (module) {
      UI_TableScoreRight = module.default;
    }, function (module) {
      UI_TableScoreCenter = module.default;
    }, function (module) {
      UI_gameExpression = module.default;
    }, function (module) {
      UI_TexasPopMenuLayer = module.default;
    }, function (module) {
      UI_TexasGamePage = module.default;
    }, function (module) {
      UI_TexasRoomMenuLayer = module.default;
    }, function (module) {
      UI_TexasTableLayer = module.default;
    }, function (module) {
      UI_TexasPlayerLayer = module.default;
    }, function (module) {
      UI_TexasOperatorLayer = module.default;
    }, function (module) {
      UI_TexasMttRebuyDialog = module.default;
    }, function (module) {
      UI_TexasMttWaitTipLayer = module.default;
    }, function (module) {
      UI_TexasMttCountdown = module.default;
    }, function (module) {
      UI_TexasMttResultDialog = module.default;
    }, function (module) {
      UI_TexasHandCardTip = module.default;
    }, function (module) {
      UI_TexasRetrospectBlankItem = module.default;
    }, function (module) {
      UI_TexasChatAtPlayerItem = module.default;
    }, function (module) {
      UI_TexasPokerLayer = module.default;
    }, function (module) {
      UI_TexasPlayerWinRateItem = module.default;
    }, function (module) {
      UI_TexasChatBlockPlayerItem = module.default;
    }, function (module) {
      UI_TexasRetrospectLayer = module.default;
    }, function (module) {
      UI_TexasRetrospectInfo = module.default;
    }, function (module) {
      UI_TexasRetrospectInfoItem = module.default;
    }, function (module) {
      UI_GameButton = module.default;
    }, function (module) {
      UI_TexasMttInfoObserverItem = module.default;
    }, function (module) {
      UI_GamePreOperatorButton = module.default;
    }, function (module) {
      UI_TexasRetrospectPotsItem = module.default;
    }, function (module) {
      UI_TexasChatLayer = module.default;
    }, function (module) {
      UI_TexasChatMstItemSelf = module.default;
    }, function (module) {
      UI_TexasChatMstItemOther = module.default;
    }, function (module) {
      UI_TexasChatMsgShortItem = module.default;
    }, function (module) {
      UI_TexasGameContent = module.default;
    }, function (module) {
      UI_GameButtonTimeBank = module.default;
    }, function (module) {
      UI_GameButtonRabbitCamera = module.default;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }],
    execute: function () {
      cclegacy._RF.push({}, "834117Kd3NKSou5f+9qiszZ", "GamePlayBinder", undefined);
      var GamePlayBinder = exports('default', /*#__PURE__*/function () {
        function GamePlayBinder() {}
        GamePlayBinder.bindAll = function bindAll() {
          UIObjectFactory.setExtension(UI_TexasMttInfoBlindsLayer.URL, UI_TexasMttInfoBlindsLayer);
          UIObjectFactory.setExtension(UI_TexasMttInfoRankingLayerItem.URL, UI_TexasMttInfoRankingLayerItem);
          UIObjectFactory.setExtension(UI_TexasMttInfoLayer.URL, UI_TexasMttInfoLayer);
          UIObjectFactory.setExtension(UI_TexasMttInfoRankingLayer.URL, UI_TexasMttInfoRankingLayer);
          UIObjectFactory.setExtension(UI_TabbarButton.URL, UI_TabbarButton);
          UIObjectFactory.setExtension(UI_TexasTableMainPot.URL, UI_TexasTableMainPot);
          UIObjectFactory.setExtension(UI_TexasChipActionLayer.URL, UI_TexasChipActionLayer);
          UIObjectFactory.setExtension(UI_GameButtonCircle1.URL, UI_GameButtonCircle1);
          UIObjectFactory.setExtension(UI_GameMenuItem.URL, UI_GameMenuItem);
          UIObjectFactory.setExtension(UI_TexasTableSidePot.URL, UI_TexasTableSidePot);
          UIObjectFactory.setExtension(UI_TexasTableInfoLayer.URL, UI_TexasTableInfoLayer);
          UIObjectFactory.setExtension(UI_TexasTableInfoLayerItem.URL, UI_TexasTableInfoLayerItem);
          UIObjectFactory.setExtension(UI_Button1.URL, UI_Button1);
          UIObjectFactory.setExtension(UI_MttDialogValueItem.URL, UI_MttDialogValueItem);
          UIObjectFactory.setExtension(UI_TexasMttAddonDialog.URL, UI_TexasMttAddonDialog);
          UIObjectFactory.setExtension(UI_TexasOperatorContent.URL, UI_TexasOperatorContent);
          UIObjectFactory.setExtension(UI_GameOperatorButton.URL, UI_GameOperatorButton);
          UIObjectFactory.setExtension(UI_TablePlayerTimeCountdown.URL, UI_TablePlayerTimeCountdown);
          UIObjectFactory.setExtension(UI_TexasMttTipMoney.URL, UI_TexasMttTipMoney);
          UIObjectFactory.setExtension(UI_TexasMttTipBlindsUP.URL, UI_TexasMttTipBlindsUP);
          UIObjectFactory.setExtension(UI_TexasMttTipCommon.URL, UI_TexasMttTipCommon);
          UIObjectFactory.setExtension(UI_TexasTipLayer.URL, UI_TexasTipLayer);
          UIObjectFactory.setExtension(UI_TexasMttResultRewardItem.URL, UI_TexasMttResultRewardItem);
          UIObjectFactory.setExtension(UI_TexasMttWaitStartItem.URL, UI_TexasMttWaitStartItem);
          UIObjectFactory.setExtension(UI_GameExpressionDialog.URL, UI_GameExpressionDialog);
          UIObjectFactory.setExtension(UI_TexasPopupLayer.URL, UI_TexasPopupLayer);
          UIObjectFactory.setExtension(UI_TexasPlayerOpenCardItem.URL, UI_TexasPlayerOpenCardItem);
          UIObjectFactory.setExtension(UI_CardTypePowerDialog.URL, UI_CardTypePowerDialog);
          UIObjectFactory.setExtension(UI_CardTypePowerItem.URL, UI_CardTypePowerItem);
          UIObjectFactory.setExtension(UI_TexasRetrospectDetailInfo.URL, UI_TexasRetrospectDetailInfo);
          UIObjectFactory.setExtension(UI_TexasRetrospectDetailTop.URL, UI_TexasRetrospectDetailTop);
          UIObjectFactory.setExtension(UI_TexasRetrospectDetailOp.URL, UI_TexasRetrospectDetailOp);
          UIObjectFactory.setExtension(UI_TexasRetrospectDetailLevel.URL, UI_TexasRetrospectDetailLevel);
          UIObjectFactory.setExtension(UI_TexasRetrospectDetailShow.URL, UI_TexasRetrospectDetailShow);
          UIObjectFactory.setExtension(UI_TexasRetrospectDetailPlayer.URL, UI_TexasRetrospectDetailPlayer);
          UIObjectFactory.setExtension(UI_ButtonWithBg.URL, UI_ButtonWithBg);
          UIObjectFactory.setExtension(UI_LoadingLayer.URL, UI_LoadingLayer);
          UIObjectFactory.setExtension(UI_TexasMttInfoBlindsLayerItem.URL, UI_TexasMttInfoBlindsLayerItem);
          UIObjectFactory.setExtension(UI_TexasPlayerInfoLayer.URL, UI_TexasPlayerInfoLayer);
          UIObjectFactory.setExtension(UI_TexasMttInfoTablesLayer.URL, UI_TexasMttInfoTablesLayer);
          UIObjectFactory.setExtension(UI_TexasMttInfoTablesLayerItem.URL, UI_TexasMttInfoTablesLayerItem);
          UIObjectFactory.setExtension(UI_TexasCardTypeLayer.URL, UI_TexasCardTypeLayer);
          UIObjectFactory.setExtension(UI_TexasCardTypeItem.URL, UI_TexasCardTypeItem);
          UIObjectFactory.setExtension(UI_TexasMttInfoPrizesLayer.URL, UI_TexasMttInfoPrizesLayer);
          UIObjectFactory.setExtension(UI_TexasMttInfoPrizesLayerItem.URL, UI_TexasMttInfoPrizesLayerItem);
          UIObjectFactory.setExtension(UI_TexasBuyinDialog.URL, UI_TexasBuyinDialog);
          UIObjectFactory.setExtension(UI_TexasPlayerItem.URL, UI_TexasPlayerItem);
          UIObjectFactory.setExtension(UI_TexasActionTag.URL, UI_TexasActionTag);
          UIObjectFactory.setExtension(UI_TableScoreLeft.URL, UI_TableScoreLeft);
          UIObjectFactory.setExtension(UI_TableScoreRight.URL, UI_TableScoreRight);
          UIObjectFactory.setExtension(UI_TableScoreCenter.URL, UI_TableScoreCenter);
          UIObjectFactory.setExtension(UI_gameExpression.URL, UI_gameExpression);
          UIObjectFactory.setExtension(UI_TexasPopMenuLayer.URL, UI_TexasPopMenuLayer);
          UIObjectFactory.setExtension(UI_TexasGamePage.URL, UI_TexasGamePage);
          UIObjectFactory.setExtension(UI_TexasRoomMenuLayer.URL, UI_TexasRoomMenuLayer);
          UIObjectFactory.setExtension(UI_TexasTableLayer.URL, UI_TexasTableLayer);
          UIObjectFactory.setExtension(UI_TexasPlayerLayer.URL, UI_TexasPlayerLayer);
          UIObjectFactory.setExtension(UI_TexasOperatorLayer.URL, UI_TexasOperatorLayer);
          UIObjectFactory.setExtension(UI_TexasMttRebuyDialog.URL, UI_TexasMttRebuyDialog);
          UIObjectFactory.setExtension(UI_TexasMttWaitTipLayer.URL, UI_TexasMttWaitTipLayer);
          UIObjectFactory.setExtension(UI_TexasMttCountdown.URL, UI_TexasMttCountdown);
          UIObjectFactory.setExtension(UI_TexasMttResultDialog.URL, UI_TexasMttResultDialog);
          UIObjectFactory.setExtension(UI_TexasHandCardTip.URL, UI_TexasHandCardTip);
          UIObjectFactory.setExtension(UI_TexasRetrospectBlankItem.URL, UI_TexasRetrospectBlankItem);
          UIObjectFactory.setExtension(UI_TexasChatAtPlayerItem.URL, UI_TexasChatAtPlayerItem);
          UIObjectFactory.setExtension(UI_TexasPokerLayer.URL, UI_TexasPokerLayer);
          UIObjectFactory.setExtension(UI_TexasPlayerWinRateItem.URL, UI_TexasPlayerWinRateItem);
          UIObjectFactory.setExtension(UI_TexasChatBlockPlayerItem.URL, UI_TexasChatBlockPlayerItem);
          UIObjectFactory.setExtension(UI_TexasRetrospectLayer.URL, UI_TexasRetrospectLayer);
          UIObjectFactory.setExtension(UI_TexasRetrospectInfo.URL, UI_TexasRetrospectInfo);
          UIObjectFactory.setExtension(UI_TexasRetrospectInfoItem.URL, UI_TexasRetrospectInfoItem);
          UIObjectFactory.setExtension(UI_GameButton.URL, UI_GameButton);
          UIObjectFactory.setExtension(UI_TexasMttInfoObserverItem.URL, UI_TexasMttInfoObserverItem);
          UIObjectFactory.setExtension(UI_GamePreOperatorButton.URL, UI_GamePreOperatorButton);
          UIObjectFactory.setExtension(UI_TexasRetrospectPotsItem.URL, UI_TexasRetrospectPotsItem);
          UIObjectFactory.setExtension(UI_TexasChatLayer.URL, UI_TexasChatLayer);
          UIObjectFactory.setExtension(UI_TexasChatMstItemSelf.URL, UI_TexasChatMstItemSelf);
          UIObjectFactory.setExtension(UI_TexasChatMstItemOther.URL, UI_TexasChatMstItemOther);
          UIObjectFactory.setExtension(UI_TexasChatMsgShortItem.URL, UI_TexasChatMsgShortItem);
          UIObjectFactory.setExtension(UI_TexasGameContent.URL, UI_TexasGameContent);
          UIObjectFactory.setExtension(UI_GameButtonTimeBank.URL, UI_GameButtonTimeBank);
          UIObjectFactory.setExtension(UI_GameButtonRabbitCamera.URL, UI_GameButtonRabbitCamera);
        };
        return GamePlayBinder;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gameproto.js", ['./cjs-loader.mjs', './light.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      exports('default', void 0);
      var _cjsExports;
      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        var $protobuf = require("protobufjs/light.js");
        var str = "\n {\"nested\":{\"chat\":{\"nested\":{\"MsgChatInfoCast\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"typeID\":{\"type\":\"uint64\",\"id\":2},\"toUserID\":{\"type\":\"uint64\",\"id\":9},\"userID\":{\"type\":\"uint64\",\"id\":3},\"icon\":{\"type\":\"string\",\"id\":4},\"vipLv\":{\"type\":\"uint32\",\"id\":5},\"nickname\":{\"type\":\"string\",\"id\":6},\"content\":{\"type\":\"string\",\"id\":7},\"time\":{\"type\":\"uint32\",\"id\":8}}},\"MsgChat\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"typeID\":{\"type\":\"uint64\",\"id\":2},\"toUserID\":{\"type\":\"uint64\",\"id\":3},\"content\":{\"type\":\"string\",\"id\":4}}},\"MsgChatRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"typeID\":{\"type\":\"uint64\",\"id\":2}}},\"MsgFeedbackInfoCast\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"content\":{\"type\":\"string\",\"id\":2},\"time\":{\"type\":\"uint32\",\"id\":3},\"type\":{\"type\":\"uint32\",\"id\":4},\"id\":{\"type\":\"string\",\"id\":5},\"source\":{\"type\":\"uint32\",\"id\":6},\"sender\":{\"type\":\"uint64\",\"id\":7},\"receiver\":{\"type\":\"uint64\",\"id\":8},\"clientid\":{\"type\":\"string\",\"id\":9},\"status\":{\"type\":\"uint32\",\"id\":10}}},\"MsgFeedback\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"content\":{\"type\":\"string\",\"id\":2},\"type\":{\"type\":\"uint32\",\"id\":3},\"source\":{\"type\":\"uint32\",\"id\":4},\"clientid\":{\"type\":\"string\",\"id\":5}}},\"MsgFeedbackRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"clientid\":{\"type\":\"string\",\"id\":2}}},\"MsgCheckHasUnreadMessage\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgCheckHasUnreadMessageRsp\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"unReadNum\":{\"type\":\"uint32\",\"id\":2},\"isHasService\":{\"type\":\"bool\",\"id\":3},\"notice\":{\"type\":\"string\",\"id\":4},\"name\":{\"type\":\"string\",\"id\":5},\"bankinfo\":{\"type\":\"string\",\"id\":6},\"cardnum\":{\"type\":\"string\",\"id\":7}}},\"MsgGetFeedbackList\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"limit\":{\"type\":\"uint32\",\"id\":2},\"id\":{\"type\":\"string\",\"id\":3}}},\"MsgGetFeedbackListRsp\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"MsgFeedbackInfoCast\",\"id\":2}}},\"MsgMarkRead\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"id\":{\"type\":\"string\",\"id\":2}}},\"MsgMarkReadRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"id\":{\"type\":\"string\",\"id\":2}}}}},\"common\":{\"nested\":{\"MsgErrorCodeCast\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1}}},\"PropReward\":{\"fields\":{\"propId\":{\"type\":\"uint32\",\"id\":1},\"propType\":{\"type\":\"uint32\",\"id\":2},\"name\":{\"type\":\"string\",\"id\":3},\"pic\":{\"type\":\"string\",\"id\":4},\"value\":{\"type\":\"uint64\",\"id\":5},\"num\":{\"type\":\"uint64\",\"id\":6},\"expiresTime\":{\"type\":\"uint32\",\"id\":7}}},\"LevelConf\":{\"fields\":{\"level\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"exp\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"perAdd\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3},\"energyLimit\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4},\"halfNode\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":5},\"energyRecover\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":6}}}}},\"hall\":{\"nested\":{\"GameInfo\":{\"fields\":{\"gameId\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"gameTag\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"gameType\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":3},\"smallBlind\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":4},\"minBuyin\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":5},\"maxBuyin\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":6},\"ante\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":7}}},\"SceneInfo\":{\"fields\":{\"sceneId\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"gameType\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":2},\"gameList\":{\"rule\":\"repeated\",\"type\":\"GameInfo\",\"id\":3}}},\"SignRewardConfig\":{\"fields\":{\"day\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"diamond\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":2},\"coin\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":3},\"icon\":{\"rule\":\"required\",\"type\":\"string\",\"id\":4}}},\"GameOnline\":{\"fields\":{\"gameId\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"onlineNum\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":2}}},\"RankInfo\":{\"fields\":{\"playerid\":{\"type\":\"int32\",\"id\":1},\"rank\":{\"type\":\"int32\",\"id\":2},\"nick\":{\"type\":\"string\",\"id\":3},\"score\":{\"type\":\"int64\",\"id\":4},\"avatar\":{\"type\":\"string\",\"id\":5}}},\"RewardItem\":{\"fields\":{\"itemId\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"num\":{\"type\":\"int32\",\"id\":2},\"name\":{\"type\":\"string\",\"id\":3},\"icon\":{\"type\":\"string\",\"id\":4},\"vipDay\":{\"type\":\"int32\",\"id\":5}}},\"RankRewards\":{\"fields\":{\"rank\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1},\"rewards\":{\"rule\":\"repeated\",\"type\":\"common.PropReward\",\"id\":2}}},\"RankRewardConfig\":{\"fields\":{\"type\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"RankRewards\",\"id\":2}}},\"TaskConf\":{\"fields\":{\"taskId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"taskType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"eventType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3},\"actType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4},\"startTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":5},\"endTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":6},\"period\":{\"type\":\"uint32\",\"id\":7},\"checkValue\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":8},\"rewards\":{\"rule\":\"repeated\",\"type\":\"common.PropReward\",\"id\":9},\"title\":{\"rule\":\"required\",\"type\":\"string\",\"id\":10},\"sortWeight\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":11},\"iconType\":{\"type\":\"string\",\"id\":12},\"languageKey\":{\"type\":\"string\",\"id\":13},\"iconUrl\":{\"type\":\"string\",\"id\":14}}},\"TaskInfo\":{\"fields\":{\"conf\":{\"rule\":\"required\",\"type\":\"TaskConf\",\"id\":1},\"progressValue\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":2},\"status\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":3},\"refreshTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4}}},\"NormalTableInfo\":{\"fields\":{\"gameId\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"gameType\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":2},\"smallBlind\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":3},\"minBuyin\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":4},\"maxBuyin\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":5},\"ante\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":6},\"num\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":7},\"topWeight\":{\"type\":\"uint32\",\"id\":8}}},\"RoomInfo\":{\"fields\":{\"roomType\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"normal\":{\"type\":\"NormalTableInfo\",\"id\":2},\"mtt\":{\"type\":\"mtt.MttInfo\",\"id\":3},\"costType\":{\"type\":\"int32\",\"id\":4}}},\"ExchangeRate\":{\"fields\":{\"coinType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"goldRate\":{\"type\":\"uint32\",\"id\":2}}},\"RecommendConf\":{\"fields\":{\"id\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"weight\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":2},\"gameType\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":3},\"coinType\":{\"type\":\"uint32\",\"id\":4}}},\"MsgGetSignRewardConfigList\":{\"fields\":{\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgGetSignRewardConfigListRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"list\":{\"rule\":\"repeated\",\"type\":\"SignRewardConfig\",\"id\":3},\"todaySign\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":4},\"signIndex\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":5}}},\"MsgGetTodaySignReward\":{\"fields\":{}},\"MsgGetTodaySignRewardRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"reward\":{\"type\":\"SignRewardConfig\",\"id\":2}}},\"MsgGetSceneList\":{\"fields\":{\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgGetSceneListRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"sceneList\":{\"rule\":\"repeated\",\"type\":\"SceneInfo\",\"id\":3},\"onlineList\":{\"rule\":\"repeated\",\"type\":\"GameOnline\",\"id\":4}}},\"MsgGetHallRoomId\":{\"fields\":{\"gameId\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"index\":{\"type\":\"int32\",\"id\":2}}},\"MsgGetHallRoomIdRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgHallTableCountCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"tableCount\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetRankList\":{\"fields\":{\"type\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1}}},\"MsgGetRankListRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"type\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":2},\"rankList\":{\"rule\":\"repeated\",\"type\":\"RankInfo\",\"id\":3},\"myRank\":{\"type\":\"RankInfo\",\"id\":4},\"lastRank\":{\"type\":\"RankInfo\",\"id\":5},\"lastRankTime\":{\"type\":\"uint32\",\"id\":6}}},\"MsgGetRankRewardConfig\":{\"fields\":{\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgGetRankRewardConfigRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"list\":{\"rule\":\"repeated\",\"type\":\"RankRewardConfig\",\"id\":3}}},\"MsgGetRankRewardCfg\":{\"fields\":{\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgGetRankRewardCfgRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"list\":{\"rule\":\"repeated\",\"type\":\"RankRewardConfig\",\"id\":3}}},\"MsgGetTaskList\":{\"fields\":{}},\"MsgGetTaskListRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"TaskInfo\",\"id\":2}}},\"MsgTasksUpdateCast\":{\"fields\":{\"status\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgClaimTaskReward\":{\"fields\":{\"taskId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgClaimTaskRewardRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"taskId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2}}},\"MsgFinishClientTask\":{\"fields\":{\"taskId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgFinishClientTaskRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"taskId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2}}},\"MsgGetHallInfo\":{\"fields\":{\"pageId\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"channel\":{\"type\":\"string\",\"id\":2}}},\"MsgGetHallInfoRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"pageId\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":2},\"roomList\":{\"rule\":\"repeated\",\"type\":\"RoomInfo\",\"id\":3},\"recommendConf\":{\"rule\":\"repeated\",\"type\":\"RecommendConf\",\"id\":4},\"channel\":{\"type\":\"string\",\"id\":5},\"rateList\":{\"rule\":\"repeated\",\"type\":\"ExchangeRate\",\"id\":6}}},\"MsgGetSpinupMatchPlayAgain\":{\"fields\":{\"channel\":{\"type\":\"string\",\"id\":1}}},\"MsgGetSpinupMatchPlayAgainRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"info\":{\"type\":\"mtt.MttInfo\",\"id\":2}}},\"MsgGetSngMatchPlayAgain\":{\"fields\":{\"channel\":{\"type\":\"string\",\"id\":1}}},\"MsgGetSngMatchPlayAgainRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"info\":{\"type\":\"mtt.MttInfo\",\"id\":2}}},\"MsgTaskClaimChangedCast\":{\"fields\":{\"remainClaim\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetPracticeCourtRewardInfo\":{\"fields\":{}},\"MsgGetPracticeCourtRewardInfoRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"remainTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"rewardCount\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3}}},\"MsgPickPracticeCourtReward\":{\"fields\":{}},\"MsgPickPracticeCourtRewardRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"remainTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"rewardCount\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3}}},\"MsgTGPInfo\":{\"fields\":{}},\"MsgTGPInfoRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"energy\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"energyLastTimestamp\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3},\"levelConfList\":{\"rule\":\"repeated\",\"type\":\"common.LevelConf\",\"id\":4},\"cashExpRatio\":{\"type\":\"double\",\"id\":5},\"normalExpRatio\":{\"type\":\"double\",\"id\":6}}},\"MsgGetTGP\":{\"fields\":{}},\"MsgGetTGPRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"energy\":{\"type\":\"uint32\",\"id\":2},\"rewardCount\":{\"type\":\"uint32\",\"id\":3},\"energyLastTimestamp\":{\"type\":\"uint32\",\"id\":4}}},\"InviteConfigInfo\":{\"fields\":{\"iType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"iGameNum\":{\"type\":\"uint32\",\"id\":2},\"iPumpingNum\":{\"type\":\"uint32\",\"id\":3},\"rewards\":{\"rule\":\"repeated\",\"type\":\"common.PropReward\",\"id\":4}}},\"MsgInviteConfigReq\":{\"fields\":{}},\"MsgInviteConfigRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"inviteConfigInfo\":{\"rule\":\"repeated\",\"type\":\"InviteConfigInfo\",\"id\":2}}},\"InviteInfo\":{\"fields\":{\"nick\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1},\"playerId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"awardTime\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":3},\"iType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4},\"rewards\":{\"rule\":\"repeated\",\"type\":\"common.PropReward\",\"id\":5}}},\"MsgInviteAwardListReq\":{\"fields\":{\"iPageId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgInviteAwardListRsp\":{\"fields\":{\"iTotalPageNum\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"iPageId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"inviteAwardListInfo\":{\"rule\":\"repeated\",\"type\":\"InviteInfo\",\"id\":3}}},\"MsgInviteAwardInfoReq\":{\"fields\":{}},\"MsgInviteAwardInfoRsp\":{\"fields\":{\"type\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"rewards\":{\"rule\":\"repeated\",\"type\":\"common.PropReward\",\"id\":2}}}}},\"mtt\":{\"nested\":{\"MttInfo\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"rule\":{\"type\":\"MttRule\",\"id\":2},\"gameinfo\":{\"type\":\"RoomInfo\",\"id\":3},\"num\":{\"type\":\"uint32\",\"id\":4},\"prizePool\":{\"type\":\"double\",\"id\":5},\"rebuyNum\":{\"type\":\"uint32\",\"id\":6},\"addonNum\":{\"type\":\"uint32\",\"id\":7},\"buttonState\":{\"type\":\"sint32\",\"id\":8},\"memberrank\":{\"type\":\"PlayerRank\",\"id\":9},\"time\":{\"type\":\"MttTime\",\"id\":10},\"iscreater\":{\"type\":\"uint32\",\"id\":11},\"closeTime\":{\"type\":\"uint32\",\"id\":12},\"isSuper\":{\"type\":\"bool\",\"id\":13},\"clubid\":{\"type\":\"uint32\",\"id\":14},\"koPrizePool\":{\"type\":\"double\",\"id\":15},\"koValue\":{\"type\":\"double\",\"id\":16},\"isEntranceClose\":{\"type\":\"bool\",\"id\":17},\"teamMatchid\":{\"type\":\"uint64\",\"id\":18},\"isTeamFinal\":{\"type\":\"bool\",\"id\":19},\"groupId\":{\"type\":\"uint32\",\"id\":20},\"lastGroupStartTime\":{\"type\":\"uint32\",\"id\":21},\"unionid\":{\"type\":\"uint32\",\"id\":22},\"waitBalanceStart\":{\"type\":\"bool\",\"id\":23},\"pin\":{\"type\":\"uint32\",\"id\":24},\"authingEnabled\":{\"type\":\"bool\",\"id\":25},\"signAuthing\":{\"type\":\"bool\",\"id\":26},\"isEntrance\":{\"type\":\"uint32\",\"id\":27},\"topWeight\":{\"type\":\"uint32\",\"id\":28},\"multiplier\":{\"type\":\"uint32\",\"id\":29},\"isEnter\":{\"type\":\"bool\",\"id\":30}}},\"MttTime\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"days\":{\"type\":\"uint32\",\"id\":2},\"time\":{\"type\":\"uint32\",\"id\":3}}},\"MttCustomReward\":{\"fields\":{\"name\":{\"type\":\"string\",\"id\":1},\"value\":{\"type\":\"uint32\",\"id\":2},\"expiresTime\":{\"type\":\"uint32\",\"id\":3},\"getTime\":{\"type\":\"uint32\",\"id\":4},\"isTicket\":{\"type\":\"bool\",\"id\":5},\"isExchangeChips\":{\"type\":\"bool\",\"id\":6},\"doubleValue\":{\"type\":\"double\",\"id\":7},\"itemType\":{\"type\":\"uint32\",\"id\":8}}},\"MttRewardInfo\":{\"fields\":{\"rank\":{\"type\":\"uint32\",\"id\":1},\"reward\":{\"type\":\"MttCustomReward\",\"id\":2},\"chips\":{\"type\":\"double\",\"id\":3}}},\"MttPropRewardInfo\":{\"fields\":{\"rank\":{\"type\":\"uint32\",\"id\":1},\"reward\":{\"type\":\"common.PropReward\",\"id\":2},\"chips\":{\"type\":\"double\",\"id\":3}}},\"MttCustomRaiseBlind\":{\"fields\":{\"beforeEntryClose\":{\"type\":\"uint32\",\"id\":1},\"afterEntryClose\":{\"type\":\"uint32\",\"id\":2},\"whileFinalTable\":{\"type\":\"uint32\",\"id\":3}}},\"ClubLimit\":{\"fields\":{\"clubid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"unionid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":2}}},\"RankInfo\":{\"fields\":{\"rank\":{\"type\":\"uint32\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"chips\":{\"type\":\"uint32\",\"id\":3},\"uid\":{\"type\":\"uint64\",\"id\":4},\"avatar\":{\"type\":\"string\",\"id\":5},\"rebuyNum\":{\"type\":\"uint32\",\"id\":6},\"addonNum\":{\"type\":\"uint32\",\"id\":7},\"koNum\":{\"type\":\"uint32\",\"id\":8},\"signAuthing\":{\"type\":\"bool\",\"id\":9},\"approved\":{\"type\":\"bool\",\"id\":10}}},\"RoomInfo\":{\"fields\":{\"bigblind\":{\"type\":\"uint32\",\"id\":1},\"front\":{\"type\":\"uint32\",\"id\":2},\"averagechip\":{\"type\":\"uint32\",\"id\":3},\"riseblind\":{\"type\":\"int32\",\"id\":4},\"nextbigblind\":{\"type\":\"uint32\",\"id\":5},\"nextfront\":{\"type\":\"uint32\",\"id\":6},\"blindround\":{\"type\":\"uint32\",\"id\":7},\"largestchip\":{\"type\":\"uint32\",\"id\":8},\"smallestchip\":{\"type\":\"uint32\",\"id\":9}}},\"PlayerRank\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"rank\":{\"type\":\"uint32\",\"id\":2},\"num\":{\"type\":\"uint32\",\"id\":3},\"totalnum\":{\"type\":\"uint32\",\"id\":4},\"isMoney\":{\"type\":\"uint32\",\"id\":5}}},\"MttRoomInfo\":{\"fields\":{\"roomId\":{\"type\":\"uint64\",\"id\":1},\"mttid\":{\"type\":\"uint64\",\"id\":2},\"memberCount\":{\"type\":\"uint32\",\"id\":3},\"chipMin\":{\"type\":\"uint32\",\"id\":4},\"chipMax\":{\"type\":\"uint32\",\"id\":5}}},\"KOBounty\":{\"fields\":{\"isOpen\":{\"type\":\"bool\",\"id\":1},\"type\":{\"type\":\"uint32\",\"id\":2},\"bounty\":{\"type\":\"uint32\",\"id\":3}}},\"SngRule\":{\"fields\":{\"isOpen\":{\"type\":\"bool\",\"id\":1},\"mulType\":{\"type\":\"uint32\",\"id\":2},\"isSpinup\":{\"type\":\"bool\",\"id\":3}}},\"MttRule\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"mttType\":{\"type\":\"uint32\",\"id\":2},\"name\":{\"type\":\"string\",\"id\":3},\"tableType\":{\"type\":\"uint32\",\"id\":4},\"actionTime\":{\"type\":\"uint32\",\"id\":5},\"fee\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":6},\"buyin\":{\"rule\":\"required\",\"type\":\"double\",\"id\":7},\"rebuy\":{\"rule\":\"required\",\"type\":\"double\",\"id\":8},\"addOn\":{\"rule\":\"required\",\"type\":\"double\",\"id\":9},\"reBuyNum\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":10},\"AddOnTimes\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":11},\"raiseBlindTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":12},\"blindType\":{\"type\":\"uint32\",\"id\":13},\"initChip\":{\"type\":\"uint32\",\"id\":14},\"endJoinTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":15},\"delayTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":16},\"minPerson\":{\"type\":\"uint32\",\"id\":17},\"maxPerson\":{\"type\":\"uint32\",\"id\":18},\"linkedEmail\":{\"type\":\"bool\",\"id\":19},\"banChatting\":{\"type\":\"bool\",\"id\":20},\"hasBreak\":{\"type\":\"bool\",\"id\":21},\"prizePool\":{\"type\":\"uint32\",\"id\":22},\"gtdPrizePool\":{\"type\":\"bool\",\"id\":23},\"gtdPrizeSize\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":24},\"reward\":{\"rule\":\"repeated\",\"type\":\"MttRewardInfo\",\"id\":25},\"ticket\":{\"type\":\"MttCustomReward\",\"id\":26},\"startTime\":{\"type\":\"uint32\",\"id\":27},\"pcRestriction\":{\"type\":\"bool\",\"id\":28},\"gameType\":{\"type\":\"uint32\",\"id\":29},\"chairNum\":{\"type\":\"uint32\",\"id\":30},\"koBounty\":{\"type\":\"KOBounty\",\"id\":31},\"isSpinup\":{\"type\":\"bool\",\"id\":32},\"iosOnly\":{\"type\":\"bool\",\"id\":33},\"customRaiseBlind\":{\"type\":\"MttCustomRaiseBlind\",\"id\":34},\"clubLimit\":{\"rule\":\"repeated\",\"type\":\"ClubLimit\",\"id\":35},\"isSuper\":{\"type\":\"uint32\",\"id\":36},\"isOpenIp\":{\"rule\":\"required\",\"type\":\"bool\",\"id\":37},\"isSignAuth\":{\"rule\":\"required\",\"type\":\"bool\",\"id\":38},\"gameImg\":{\"type\":\"string\",\"id\":39},\"propReward\":{\"rule\":\"repeated\",\"type\":\"MttPropRewardInfo\",\"id\":40},\"propTicket\":{\"type\":\"common.PropReward\",\"id\":41},\"afkActTimesToAllin\":{\"type\":\"uint32\",\"id\":42},\"sng\":{\"type\":\"SngRule\",\"id\":43},\"isOpenGps\":{\"type\":\"bool\",\"id\":44},\"autoOpen\":{\"type\":\"bool\",\"id\":45},\"coinType\":{\"type\":\"uint32\",\"id\":46},\"buyCoinType\":{\"type\":\"uint32\",\"id\":47},\"rewardMode\":{\"type\":\"uint32\",\"id\":48},\"rewardPersonNum\":{\"type\":\"uint32\",\"id\":49}}},\"MsgGetAllMttInfo\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"myMtt\":{\"type\":\"uint32\",\"id\":2},\"isHall\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGetAllMttInfoRsp\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"MttInfo\",\"id\":2}}},\"MsgCreateMtt\":{\"fields\":{\"clubid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"mttType\":{\"type\":\"uint32\",\"id\":2},\"rule\":{\"rule\":\"required\",\"type\":\"MttRule\",\"id\":3},\"isSuper\":{\"type\":\"uint32\",\"id\":4},\"isHall\":{\"type\":\"uint32\",\"id\":5}}},\"MsgCreateMttRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"mttid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgApply\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"applytype\":{\"type\":\"uint32\",\"id\":2},\"type\":{\"type\":\"uint32\",\"id\":3},\"clubid\":{\"type\":\"uint64\",\"id\":4},\"unionid\":{\"type\":\"uint32\",\"id\":5},\"chairId\":{\"type\":\"uint32\",\"id\":6},\"isSimulator\":{\"type\":\"bool\",\"id\":7},\"isGpsValid\":{\"type\":\"bool\",\"id\":8},\"vlat\":{\"type\":\"double\",\"id\":9},\"vlong\":{\"type\":\"double\",\"id\":10}}},\"MsgApplyRsp\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"applytype\":{\"type\":\"uint32\",\"id\":2},\"type\":{\"type\":\"uint32\",\"id\":3},\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4},\"entriedClub\":{\"type\":\"string\",\"id\":5},\"ticket\":{\"type\":\"common.PropReward\",\"id\":6}}},\"MsgGetMttRankInfo\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"roomid\":{\"type\":\"uint32\",\"id\":2},\"clubid\":{\"type\":\"uint64\",\"id\":3}}},\"MsgGetMttRankInfoRsp\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":2},\"rankList\":{\"rule\":\"repeated\",\"type\":\"RankInfo\",\"id\":3},\"obstate\":{\"type\":\"uint32\",\"id\":4},\"myRank\":{\"type\":\"RankInfo\",\"id\":5},\"myStatus\":{\"type\":\"uint32\",\"id\":6},\"mttid\":{\"type\":\"uint64\",\"id\":7}}},\"MsgGetMttRewardInfo\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgGetMttRewardInfoRsp\":{\"fields\":{\"mttType\":{\"type\":\"uint32\",\"id\":1},\"rewardList\":{\"rule\":\"repeated\",\"type\":\"MttRewardInfo\",\"id\":2},\"rewardtype\":{\"type\":\"uint32\",\"id\":3},\"chipcount\":{\"type\":\"uint32\",\"id\":4},\"mttid\":{\"type\":\"uint64\",\"id\":5}}},\"MsgGetMttPropRewardInfo\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgGetMttPropRewardInfoRsp\":{\"fields\":{\"mttType\":{\"type\":\"uint32\",\"id\":1},\"rewardList\":{\"rule\":\"repeated\",\"type\":\"MttPropRewardInfo\",\"id\":2},\"rewardtype\":{\"type\":\"uint32\",\"id\":3},\"chipcount\":{\"type\":\"uint32\",\"id\":4},\"mttid\":{\"type\":\"uint64\",\"id\":5}}},\"MsgCloseMtt\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgCloseMttRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgJoinMtt\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"state\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint64\",\"id\":3},\"obPlayerid\":{\"type\":\"uint64\",\"id\":4},\"clubid\":{\"type\":\"uint64\",\"id\":5},\"switchOutMttid\":{\"type\":\"uint64\",\"id\":6},\"noSwitchOut\":{\"type\":\"bool\",\"id\":7}}},\"MsgJoinMttRsp\":{\"fields\":{\"state\":{\"type\":\"uint32\",\"id\":1},\"ec\":{\"type\":\"uint32\",\"id\":2},\"mttid\":{\"type\":\"uint64\",\"id\":3}}},\"MsgGetMttInfo\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgGetMttInfoRsp\":{\"fields\":{\"mttInfo\":{\"type\":\"MttInfo\",\"id\":1}}},\"MsgGetMttRoomList\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgGetMttRoomListRsp\":{\"fields\":{\"mttroominfo\":{\"rule\":\"repeated\",\"type\":\"MttRoomInfo\",\"id\":1},\"obstate\":{\"type\":\"uint32\",\"id\":2},\"myRoomid\":{\"type\":\"uint32\",\"id\":3},\"mttid\":{\"type\":\"uint64\",\"id\":4}}},\"MsgGetMttLiveInfo\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"roomid\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetMttLiveInfoRsp\":{\"fields\":{\"gameinfo\":{\"type\":\"RoomInfo\",\"id\":1},\"startTime\":{\"type\":\"uint32\",\"id\":2},\"num\":{\"type\":\"uint32\",\"id\":3},\"maxPerson\":{\"type\":\"uint32\",\"id\":4},\"raiseBlindTime\":{\"type\":\"uint32\",\"id\":5},\"rankList\":{\"rule\":\"repeated\",\"type\":\"RankInfo\",\"id\":6},\"memberrank\":{\"type\":\"PlayerRank\",\"id\":7},\"rebuyNum\":{\"type\":\"uint32\",\"id\":8},\"addonNum\":{\"type\":\"uint32\",\"id\":9},\"prizePool\":{\"type\":\"double\",\"id\":10},\"mttid\":{\"type\":\"uint64\",\"id\":11},\"koPrizePool\":{\"type\":\"double\",\"id\":12},\"koValue\":{\"type\":\"double\",\"id\":13},\"waitBalanceStart\":{\"type\":\"bool\",\"id\":14},\"restTime\":{\"type\":\"uint32\",\"id\":15},\"rewards\":{\"rule\":\"repeated\",\"type\":\"double\",\"id\":16,\"options\":{\"packed\":false}},\"multiplier\":{\"type\":\"uint32\",\"id\":17}}},\"MsgGetMttFreshInfo\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgGetMttFreshInfoRsp\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"num\":{\"type\":\"uint32\",\"id\":2},\"startTime\":{\"type\":\"uint32\",\"id\":3},\"buttonState\":{\"type\":\"sint32\",\"id\":4},\"time\":{\"type\":\"MttTime\",\"id\":5},\"isMoney\":{\"type\":\"uint32\",\"id\":6},\"isEntranceClose\":{\"type\":\"bool\",\"id\":7},\"waitBalanceStart\":{\"type\":\"bool\",\"id\":8}}},\"MsgGetRoomState\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint64\",\"id\":2},\"obPlayerid\":{\"type\":\"uint64\",\"id\":3}}},\"MsgGetRoomStateRsp\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint64\",\"id\":2},\"obPlayerid\":{\"type\":\"uint64\",\"id\":3},\"ec\":{\"type\":\"uint32\",\"id\":4}}},\"MsgGetMttRedPoint\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgGetMttRedPointRsp\":{\"fields\":{\"redPoint\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgChangeMttStartTime\":{\"fields\":{\"mttid\":{\"type\":\"uint32\",\"id\":1},\"newStartTime\":{\"type\":\"uint32\",\"id\":2},\"clubid\":{\"type\":\"uint64\",\"id\":3}}},\"MsgChangeMttStartTimeRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgRequestAddon\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgRequestAddonRsp\":{\"fields\":{\"ec\":{\"type\":\"uint32\",\"id\":1},\"mttid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgOutMtt\":{\"fields\":{\"mttid\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgOutMttRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"mttid\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2}}},\"MsgPinMtt\":{\"fields\":{\"mttid\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"opt\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPinMttRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"mttid\":{\"type\":\"uint32\",\"id\":2},\"opt\":{\"type\":\"uint32\",\"id\":3},\"pin\":{\"type\":\"uint32\",\"id\":4}}},\"MsgSetSignAuthEnabled\":{\"fields\":{\"mttid\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"authingEnabled\":{\"type\":\"bool\",\"id\":3}}},\"MsgSetSignAuthEnabledRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"mttid\":{\"type\":\"uint32\",\"id\":2},\"authingEnabled\":{\"type\":\"bool\",\"id\":3}}},\"MsgApplySignOperation\":{\"fields\":{\"mttid\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":2},\"playerid\":{\"type\":\"uint64\",\"id\":3},\"AorR\":{\"type\":\"uint32\",\"id\":4}}},\"MsgApplySignOperationRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":2},\"mttid\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGameRoomIdCast\":{\"fields\":{\"roomId\":{\"type\":\"uint64\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"mttid\":{\"type\":\"uint32\",\"id\":3},\"state\":{\"type\":\"uint32\",\"id\":4}}},\"MsgWaitCast\":{\"fields\":{\"state\":{\"type\":\"uint32\",\"id\":1},\"value\":{\"type\":\"uint32\",\"id\":2},\"mttid\":{\"type\":\"uint32\",\"id\":3}}},\"MsgWeedCast\":{\"fields\":{\"value\":{\"type\":\"string\",\"id\":1},\"mttid\":{\"type\":\"uint32\",\"id\":2},\"num\":{\"type\":\"uint32\",\"id\":3},\"rule\":{\"type\":\"MttRule\",\"id\":4}}},\"MsgRebuyInfoCast\":{\"fields\":{\"joinFee\":{\"type\":\"uint32\",\"id\":1},\"serverFee\":{\"type\":\"uint32\",\"id\":2},\"leftTime\":{\"type\":\"uint32\",\"id\":3},\"mttid\":{\"type\":\"uint32\",\"id\":4}}},\"MsgPlayerJoinCast\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgPlayerRankCast\":{\"fields\":{\"memberrank\":{\"type\":\"PlayerRank\",\"id\":1},\"mttid\":{\"type\":\"uint32\",\"id\":2}}},\"MsgMttStatusCast\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"mttid\":{\"type\":\"uint64\",\"id\":2},\"mttidStatus\":{\"type\":\"uint32\",\"id\":3},\"mttSite\":{\"type\":\"uint32\",\"id\":4}}},\"MsgEntryPlayerNumChangeCast\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"num\":{\"type\":\"uint32\",\"id\":2},\"inNum\":{\"type\":\"uint32\",\"id\":3}}},\"MsgRoomInfoCast\":{\"fields\":{\"gameinfo\":{\"type\":\"RoomInfo\",\"id\":1},\"mttid\":{\"type\":\"uint32\",\"id\":2}}},\"MsgAddonOrBreakCast\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"time\":{\"type\":\"uint32\",\"id\":2},\"mttid\":{\"type\":\"uint32\",\"id\":3},\"addOn\":{\"type\":\"uint32\",\"id\":4}}},\"MsgNextHandAddonOrBreakCast\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"mttid\":{\"type\":\"uint32\",\"id\":2}}},\"MsgNotifyMatchStartCast\":{\"fields\":{\"clubid\":{\"type\":\"uint32\",\"id\":1},\"mttid\":{\"type\":\"uint32\",\"id\":2},\"name\":{\"type\":\"string\",\"id\":3},\"startTime\":{\"type\":\"uint32\",\"id\":4},\"sng\":{\"type\":\"SngRule\",\"id\":5}}},\"MsgNotifyFinalTableCast\":{\"fields\":{\"mttid\":{\"type\":\"uint32\",\"id\":1}}},\"MsgNotifyUserSignAuthCast\":{\"fields\":{\"mttid\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint32\",\"id\":2},\"signAuthing\":{\"type\":\"bool\",\"id\":3}}},\"MsgNotifyMttSignAuthCast\":{\"fields\":{\"mttid\":{\"type\":\"uint32\",\"id\":1},\"authingEnabled\":{\"type\":\"bool\",\"id\":2}}},\"MsgMttMoneyRoundCast\":{\"fields\":{\"mttid\":{\"type\":\"uint64\",\"id\":1},\"moneyRound\":{\"type\":\"uint32\",\"id\":2}}},\"MsgNotifySpinUpMultiplierCast\":{\"fields\":{\"mttid\":{\"type\":\"uint32\",\"id\":1},\"multiplier\":{\"type\":\"uint32\",\"id\":2},\"reward\":{\"type\":\"uint32\",\"id\":3}}}}},\"login\":{\"nested\":{\"MsgLogin\":{\"fields\":{\"timestamp\":{\"type\":\"int32\",\"id\":2},\"session\":{\"type\":\"int32\",\"id\":3},\"playerid\":{\"type\":\"uint64\",\"id\":4},\"addr\":{\"type\":\"string\",\"id\":5},\"token\":{\"type\":\"string\",\"id\":6},\"clientid\":{\"type\":\"string\",\"id\":7},\"platform\":{\"type\":\"string\",\"id\":8},\"model\":{\"type\":\"string\",\"id\":9},\"selectTab\":{\"type\":\"uint32\",\"id\":10},\"ip\":{\"type\":\"string\",\"id\":11},\"channel\":{\"type\":\"string\",\"id\":12}}},\"MsgLoginRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"timestamp\":{\"type\":\"int32\",\"id\":2},\"session\":{\"type\":\"int32\",\"id\":3},\"playerid\":{\"type\":\"uint64\",\"id\":4},\"tableid\":{\"type\":\"uint32\",\"id\":5},\"mttid\":{\"type\":\"uint32\",\"id\":6},\"clubid\":{\"type\":\"uint64\",\"id\":7},\"state\":{\"type\":\"uint32\",\"id\":8},\"gameType\":{\"type\":\"uint32\",\"id\":9}}},\"MsgkickCast\":{\"fields\":{\"reason\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"desc\":{\"type\":\"string\",\"id\":2}}}}},\"notice\":{\"nested\":{\"NoticeInfo\":{\"fields\":{\"noticeId\":{\"type\":\"string\",\"id\":1},\"content\":{\"type\":\"string\",\"id\":2},\"time\":{\"type\":\"uint32\",\"id\":3},\"needDeal\":{\"type\":\"uint32\",\"id\":4},\"status\":{\"type\":\"uint32\",\"id\":5},\"type\":{\"type\":\"uint32\",\"id\":6},\"subType\":{\"type\":\"uint32\",\"id\":7},\"clubid\":{\"type\":\"uint64\",\"id\":8},\"isRead\":{\"type\":\"uint32\",\"id\":9}}},\"PopupMessageInfo\":{\"fields\":{\"sceneType\":{\"type\":\"uint32\",\"id\":1},\"winId\":{\"type\":\"uint32\",\"id\":2},\"param\":{\"type\":\"string\",\"id\":3},\"isOnce\":{\"type\":\"uint32\",\"id\":4}}},\"MsgGetMessageList\":{\"fields\":{\"getType\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"limit\":{\"type\":\"uint32\",\"id\":3},\"noticeId\":{\"type\":\"string\",\"id\":4}}},\"MsgGetMessageListRsp\":{\"fields\":{\"noticelist\":{\"rule\":\"repeated\",\"type\":\"NoticeInfo\",\"id\":1},\"getType\":{\"type\":\"uint32\",\"id\":2},\"clubid\":{\"type\":\"uint64\",\"id\":3}}},\"MsgReadMessage\":{\"fields\":{\"noticeId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgReadMessageRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"noticeId\":{\"type\":\"string\",\"id\":2}}},\"MsgDelMessage\":{\"fields\":{\"type\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"noticeId\":{\"type\":\"string\",\"id\":2},\"getType\":{\"type\":\"uint32\",\"id\":3},\"clubid\":{\"type\":\"uint64\",\"id\":4}}},\"MsgDelMessageRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"type\":{\"type\":\"uint32\",\"id\":2},\"noticeId\":{\"type\":\"string\",\"id\":3}}},\"MsgGetPopupMessageList\":{\"fields\":{\"channel\":{\"type\":\"string\",\"id\":1}}},\"MsgGetPopupMessageListRsp\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"PopupMessageInfo\",\"id\":1}}},\"MsgNewMessageCast\":{\"fields\":{\"notice\":{\"type\":\"NoticeInfo\",\"id\":1}}},\"MsgPopupMessageCast\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"PopupMessageInfo\",\"id\":1}}},\"MsgScrollMessageCast\":{\"fields\":{\"noticeId\":{\"type\":\"uint32\",\"id\":1},\"sceneType\":{\"type\":\"uint32\",\"id\":2},\"isOnce\":{\"type\":\"uint32\",\"id\":3},\"content\":{\"type\":\"string\",\"id\":4}}}}},\"ping\":{\"nested\":{\"MsgPing\":{\"fields\":{\"tag\":{\"type\":\"int32\",\"id\":1}}},\"MsgPingRsp\":{\"fields\":{\"timestamp\":{\"type\":\"int32\",\"id\":1},\"tag\":{\"type\":\"int32\",\"id\":2}}}}},\"role\":{\"nested\":{\"ItemInfo\":{\"fields\":{\"itemid\":{\"type\":\"uint32\",\"id\":1},\"num\":{\"type\":\"uint32\",\"id\":2}}},\"PlayerTag\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"descTag\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"colorTag\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3}}},\"GameAutoBuyIn\":{\"fields\":{\"thresholdChips\":{\"type\":\"uint32\",\"id\":1},\"buyinChips\":{\"type\":\"uint32\",\"id\":2}}},\"Mobile\":{\"fields\":{\"number\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1},\"country\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"dialing\":{\"rule\":\"required\",\"type\":\"string\",\"id\":3}}},\"RoleInfo\":{\"fields\":{\"email\":{\"type\":\"string\",\"id\":1},\"nick\":{\"type\":\"string\",\"id\":2},\"sex\":{\"type\":\"uint32\",\"id\":3},\"province\":{\"type\":\"uint32\",\"id\":4},\"city\":{\"type\":\"uint32\",\"id\":5},\"signature\":{\"type\":\"string\",\"id\":6},\"diamonds\":{\"type\":\"uint32\",\"id\":7},\"chip\":{\"type\":\"uint64\",\"id\":8},\"avatar\":{\"type\":\"string\",\"id\":9},\"vip\":{\"type\":\"int32\",\"id\":10},\"winCount\":{\"type\":\"uint32\",\"id\":11},\"loseCount\":{\"type\":\"uint32\",\"id\":12},\"tableCount\":{\"type\":\"uint32\",\"id\":13},\"profit\":{\"type\":\"int32\",\"id\":14},\"playerid\":{\"type\":\"uint64\",\"id\":15},\"firstModifyName\":{\"type\":\"uint32\",\"id\":16},\"guide\":{\"type\":\"uint32\",\"id\":17},\"regBonus\":{\"type\":\"uint32\",\"id\":18},\"area\":{\"type\":\"string\",\"id\":19},\"vipExprie\":{\"type\":\"uint32\",\"id\":20},\"itemList\":{\"rule\":\"repeated\",\"type\":\"ItemInfo\",\"id\":21},\"vipProp\":{\"type\":\"uint32\",\"id\":22},\"vipTimeBank\":{\"type\":\"uint32\",\"id\":23},\"createdClub\":{\"type\":\"uint32\",\"id\":24},\"report\":{\"type\":\"uint64\",\"id\":25},\"usedHeads\":{\"rule\":\"repeated\",\"type\":\"string\",\"id\":26},\"hideProfit\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":27},\"autoBuyin\":{\"rule\":\"required\",\"type\":\"GameAutoBuyIn\",\"id\":28},\"cash\":{\"type\":\"int64\",\"id\":29},\"exp\":{\"type\":\"uint64\",\"id\":30},\"level\":{\"type\":\"uint32\",\"id\":31},\"tgpChip\":{\"type\":\"uint64\",\"id\":32},\"mobile\":{\"type\":\"Mobile\",\"id\":33}}},\"CareerInfo\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"games\":{\"type\":\"uint32\",\"id\":2},\"hands\":{\"type\":\"uint32\",\"id\":3},\"profit\":{\"type\":\"double\",\"id\":4}}},\"MsgRoleInfo\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgRoleInfoRsp\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"role\":{\"type\":\"RoleInfo\",\"id\":2}}},\"MsgRoleChipChangeCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"chip\":{\"type\":\"double\",\"id\":2},\"Reason\":{\"type\":\"uint32\",\"id\":3},\"clubid\":{\"type\":\"uint64\",\"id\":4}}},\"MsgRoleDiamondChangeCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"diamond\":{\"type\":\"uint32\",\"id\":2},\"Reason\":{\"type\":\"uint32\",\"id\":3}}},\"MsgRoleCashChangeCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"cash\":{\"type\":\"int64\",\"id\":2},\"Reason\":{\"type\":\"uint32\",\"id\":3}}},\"MsgRoleVipLevelChangeCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"vip\":{\"type\":\"uint32\",\"id\":2}}},\"MsgRoleExpLevelChangeCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"exp\":{\"type\":\"uint64\",\"id\":2},\"level\":{\"type\":\"uint32\",\"id\":3}}},\"MsgRoleGameLog\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgRoleGameLogRsp\":{\"fields\":{\"allFieldNum\":{\"type\":\"uint32\",\"id\":1},\"winTableCount\":{\"type\":\"uint32\",\"id\":2},\"allPotNum\":{\"type\":\"uint32\",\"id\":3},\"inPotNum\":{\"type\":\"uint32\",\"id\":4},\"maxPotChip\":{\"type\":\"uint32\",\"id\":5},\"tableCount\":{\"type\":\"uint32\",\"id\":6}}},\"MsgRoleInfoChangeCast\":{\"fields\":{}},\"MsgSetRoleInfo\":{\"fields\":{\"avatar\":{\"type\":\"string\",\"id\":1},\"email\":{\"type\":\"string\",\"id\":2},\"sex\":{\"type\":\"uint32\",\"id\":3},\"province\":{\"type\":\"uint32\",\"id\":4},\"signature\":{\"type\":\"string\",\"id\":5},\"name\":{\"type\":\"string\",\"id\":6},\"chip\":{\"type\":\"uint32\",\"id\":7},\"defaultAvatar\":{\"type\":\"bool\",\"id\":8},\"channel\":{\"type\":\"string\",\"id\":9}}},\"MsgSetRoleInfoRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgChangeAvatarSwitch\":{\"fields\":{}},\"MsgChangeAvatarSwitchRsp\":{\"fields\":{\"switch\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetReportLogSet\":{\"fields\":{}},\"MsgGetReportLogSetRsp\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"startTime\":{\"type\":\"uint64\",\"id\":2},\"endTime\":{\"type\":\"uint64\",\"id\":3}}},\"MsgGetGameConfig\":{\"fields\":{}},\"MsgGetGameConfigRsp\":{\"fields\":{\"clubFreeCount\":{\"type\":\"uint32\",\"id\":1},\"clubCreateDiamond\":{\"type\":\"uint32\",\"id\":2},\"diamondToChip\":{\"type\":\"uint32\",\"id\":3},\"changeNick\":{\"type\":\"uint32\",\"id\":4},\"roomProp\":{\"type\":\"uint32\",\"id\":5},\"dataexportClubdata\":{\"type\":\"uint32\",\"id\":6},\"dataexportTransaction\":{\"type\":\"uint32\",\"id\":7},\"dataexportDiamond\":{\"type\":\"uint32\",\"id\":8},\"feeMttDiamond\":{\"type\":\"uint32\",\"id\":9}}},\"MsgSetRoleGuide\":{\"fields\":{\"guide\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgSetRoleGuideRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgGetRoleCareer\":{\"fields\":{\"isAll\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"startTime\":{\"type\":\"uint32\",\"id\":2},\"endTime\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGetRoleCareerRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"careerInfo\":{\"rule\":\"repeated\",\"type\":\"CareerInfo\",\"id\":2}}},\"MsgGetFreePropCount\":{\"fields\":{}},\"MsgGetFreePropCountRsp\":{\"fields\":{}},\"MsgDeleteAccount\":{\"fields\":{}},\"MsgDeleteAccountRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgSetRoleReport\":{\"fields\":{\"report\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1}}},\"MsgSetRoleReportRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"report\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":2}}},\"MsgSetRoleTag\":{\"fields\":{\"tag\":{\"rule\":\"required\",\"type\":\"PlayerTag\",\"id\":1}}},\"MsgSetRoleTagRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"tag\":{\"rule\":\"required\",\"type\":\"PlayerTag\",\"id\":2}}},\"MsgGetRoleTagList\":{\"fields\":{}},\"MsgGetRoleTagListRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"tags\":{\"rule\":\"repeated\",\"type\":\"PlayerTag\",\"id\":2}}},\"MsgSetHideProfit\":{\"fields\":{\"hideProfit\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgSetHideProfitRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"hideProfit\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2}}},\"MsgSetAutoBuyin\":{\"fields\":{\"autoBuyin\":{\"rule\":\"required\",\"type\":\"GameAutoBuyIn\",\"id\":1}}},\"MsgSetAutoBuyinRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"autoBuyin\":{\"rule\":\"required\",\"type\":\"GameAutoBuyIn\",\"id\":2}}},\"MsgGetAutoBuyin\":{\"fields\":{}},\"MsgGetAutoBuyinRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"autoBuyin\":{\"type\":\"GameAutoBuyIn\",\"id\":2}}},\"MsgGetProfileCode\":{\"fields\":{}},\"MsgGetProfileCodeRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint32\",\"id\":2},\"code\":{\"type\":\"string\",\"id\":3}}},\"MsgRegBonusCast\":{\"fields\":{\"diamond\":{\"type\":\"uint32\",\"id\":1},\"chips\":{\"type\":\"uint32\",\"id\":2}}},\"MsgVipStateChangeCast\":{\"fields\":{\"vipLevel\":{\"type\":\"uint32\",\"id\":1},\"vipExprie\":{\"type\":\"uint32\",\"id\":2}}},\"MsgVipFreeChangeCast\":{\"fields\":{\"vipProp\":{\"type\":\"uint32\",\"id\":1},\"vipTimeBank\":{\"type\":\"uint32\",\"id\":2}}},\"MsgItemsChangeCast\":{\"fields\":{\"itemid\":{\"type\":\"uint32\",\"id\":1},\"num\":{\"type\":\"uint32\",\"id\":2}}},\"MsgClubTableCountCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"gameType\":{\"type\":\"uint32\",\"id\":2},\"tableCount\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGetHallBackPack\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1}}},\"MsgGetHallBackPackRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"mtt.MttCustomReward\",\"id\":2}}},\"MsgGetBackPack\":{\"fields\":{}},\"MsgGetBackPackRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"common.PropReward\",\"id\":2}}},\"MsgBackPackCast\":{\"fields\":{\"ifHave\":{\"type\":\"bool\",\"id\":1}}},\"MsgInviteAwardInfoCast\":{\"fields\":{\"type\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"rewards\":{\"rule\":\"repeated\",\"type\":\"common.PropReward\",\"id\":2}}}}},\"rooms\":{\"nested\":{\"PlayerData\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"icon\":{\"type\":\"string\",\"id\":3},\"vipLevel\":{\"type\":\"uint32\",\"id\":4},\"sex\":{\"type\":\"uint32\",\"id\":5},\"chip\":{\"type\":\"double\",\"id\":6},\"tableChip\":{\"type\":\"double\",\"id\":7},\"clubPos\":{\"type\":\"uint32\",\"id\":8},\"clubChip\":{\"type\":\"double\",\"id\":9},\"vlat\":{\"type\":\"double\",\"id\":10},\"vlong\":{\"type\":\"double\",\"id\":11},\"isGpsValid\":{\"type\":\"bool\",\"id\":12},\"chairId\":{\"type\":\"uint32\",\"id\":13},\"isCreator\":{\"type\":\"bool\",\"id\":14},\"straddle\":{\"type\":\"bool\",\"id\":15},\"isLeftback\":{\"type\":\"bool\",\"id\":17},\"actStatus\":{\"type\":\"uint32\",\"id\":18},\"status\":{\"type\":\"uint32\",\"id\":19},\"leftTime\":{\"type\":\"uint64\",\"id\":20},\"addChipLeftTime\":{\"type\":\"uint64\",\"id\":21},\"winChip\":{\"type\":\"double\",\"id\":22},\"calltime\":{\"type\":\"uint32\",\"id\":23},\"useEvchop\":{\"type\":\"bool\",\"id\":24},\"handcards\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":25,\"options\":{\"packed\":false}},\"koValue\":{\"type\":\"double\",\"id\":26},\"waitSitdownLeftTime\":{\"type\":\"uint32\",\"id\":27},\"readyEnabled\":{\"type\":\"bool\",\"id\":28},\"beReady\":{\"type\":\"bool\",\"id\":29},\"leaveNextRound\":{\"type\":\"bool\",\"id\":30}}},\"PlayerStatistics\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"bringInChip\":{\"rule\":\"required\",\"type\":\"int64\",\"id\":3},\"winChip\":{\"rule\":\"required\",\"type\":\"double\",\"id\":4},\"icon\":{\"type\":\"string\",\"id\":5},\"gameNum\":{\"type\":\"uint32\",\"id\":6},\"fee\":{\"type\":\"double\",\"id\":7},\"bringInChipDouble\":{\"rule\":\"required\",\"type\":\"double\",\"id\":8}}},\"PlayerClubDataOfcPart\":{\"fields\":{\"ftcNum\":{\"type\":\"uint32\",\"id\":1},\"reFtcNum\":{\"type\":\"uint32\",\"id\":2},\"bust\":{\"type\":\"uint32\",\"id\":3},\"qqFtcNum\":{\"type\":\"uint32\",\"id\":4},\"kkFtcNum\":{\"type\":\"uint32\",\"id\":5},\"aaFtcNum\":{\"type\":\"uint32\",\"id\":6},\"tokFtcNum\":{\"type\":\"uint32\",\"id\":7},\"regularNum\":{\"type\":\"uint32\",\"id\":8},\"progressiveNum\":{\"type\":\"uint32\",\"id\":9},\"ultimateNum\":{\"type\":\"uint32\",\"id\":10},\"jokerNum\":{\"type\":\"uint32\",\"id\":11}}},\"PlayerClubData\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"bringInChip\":{\"rule\":\"required\",\"type\":\"int64\",\"id\":3},\"winChip\":{\"rule\":\"required\",\"type\":\"double\",\"id\":4},\"icon\":{\"type\":\"string\",\"id\":5},\"tableNum\":{\"type\":\"uint32\",\"id\":6},\"inPotNum\":{\"type\":\"uint32\",\"id\":7},\"totalGames\":{\"type\":\"uint32\",\"id\":8},\"ctTime\":{\"type\":\"uint32\",\"id\":9},\"mttItm\":{\"type\":\"uint32\",\"id\":10},\"mttTitleNum\":{\"type\":\"uint32\",\"id\":11},\"totalMttGames\":{\"type\":\"uint32\",\"id\":12},\"clubName\":{\"type\":\"string\",\"id\":13},\"clubid\":{\"type\":\"uint32\",\"id\":14},\"ofc\":{\"type\":\"PlayerClubDataOfcPart\",\"id\":15},\"pfrNum\":{\"type\":\"uint32\",\"id\":16},\"pfrChanceNum\":{\"type\":\"uint32\",\"id\":17},\"bet3Num\":{\"type\":\"uint32\",\"id\":18},\"bet3ChanceNum\":{\"type\":\"uint32\",\"id\":19},\"cbetNum\":{\"type\":\"uint32\",\"id\":20},\"cbetChanceNum\":{\"type\":\"uint32\",\"id\":21},\"winnerNum\":{\"type\":\"uint32\",\"id\":22},\"fishNum\":{\"type\":\"uint32\",\"id\":23},\"openCard\":{\"type\":\"uint32\",\"id\":24},\"flopHands\":{\"type\":\"uint32\",\"id\":25},\"openCardWin\":{\"type\":\"uint32\",\"id\":26},\"spinupItm\":{\"type\":\"uint32\",\"id\":27},\"spinupTitleNum\":{\"type\":\"uint32\",\"id\":28},\"totalSpinupGames\":{\"type\":\"uint32\",\"id\":29},\"sngItm\":{\"type\":\"uint32\",\"id\":30},\"sngTitleNum\":{\"type\":\"uint32\",\"id\":31},\"totalSngGames\":{\"type\":\"uint32\",\"id\":32}}},\"PlayerTableVipData\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"handsNum\":{\"type\":\"uint32\",\"id\":3},\"inPotNum\":{\"type\":\"uint32\",\"id\":4},\"pfrNum\":{\"type\":\"uint32\",\"id\":5},\"pfrChanceNum\":{\"type\":\"uint32\",\"id\":6},\"stealNum\":{\"type\":\"uint32\",\"id\":7},\"stealChanceNum\":{\"type\":\"uint32\",\"id\":8},\"checkRaiseNum\":{\"type\":\"uint32\",\"id\":9},\"checkRaiseChanceNum\":{\"type\":\"uint32\",\"id\":10},\"bet3Num\":{\"type\":\"uint32\",\"id\":11},\"bet3ChanceNum\":{\"type\":\"uint32\",\"id\":12},\"cbetNum\":{\"type\":\"uint32\",\"id\":13},\"cbetChanceNum\":{\"type\":\"uint32\",\"id\":14},\"foldBet3Num\":{\"type\":\"uint32\",\"id\":15},\"foldBet3ChanceNum\":{\"type\":\"uint32\",\"id\":16},\"foldCbetNum\":{\"type\":\"uint32\",\"id\":17},\"foldCbetChanceNum\":{\"type\":\"uint32\",\"id\":18}}},\"PlayerActRecord\":{\"fields\":{\"actType\":{\"rule\":\"required\",\"type\":\"int64\",\"id\":1},\"chip\":{\"type\":\"double\",\"id\":2}}},\"PlayerTableInfo\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"icon\":{\"type\":\"string\",\"id\":3},\"handcards\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":4,\"options\":{\"packed\":false}},\"hightlightCards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":5,\"options\":{\"packed\":false}},\"result\":{\"type\":\"uint32\",\"id\":6},\"isFold\":{\"type\":\"bool\",\"id\":7},\"chip\":{\"type\":\"double\",\"id\":8},\"pokerType\":{\"type\":\"uint32\",\"id\":9},\"insurance\":{\"type\":\"int32\",\"id\":10},\"isShowPrivatePoker\":{\"type\":\"bool\",\"id\":11},\"showHandcards\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":12,\"options\":{\"packed\":false}},\"chairId\":{\"type\":\"uint32\",\"id\":13},\"record\":{\"rule\":\"repeated\",\"type\":\"PlayerActRecord\",\"id\":14},\"isWinner\":{\"type\":\"bool\",\"id\":16},\"evChopFee\":{\"type\":\"int32\",\"id\":17},\"pokerType_2\":{\"type\":\"uint32\",\"id\":18},\"hightlightCards_2\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":19,\"options\":{\"packed\":false}},\"result_2\":{\"type\":\"uint32\",\"id\":20},\"chip_2\":{\"type\":\"double\",\"id\":21},\"isWinner_2\":{\"type\":\"bool\",\"id\":22},\"pokerType_3\":{\"type\":\"uint32\",\"id\":23},\"hightlightCards_3\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":24,\"options\":{\"packed\":false}},\"result_3\":{\"type\":\"uint32\",\"id\":25},\"chip_3\":{\"type\":\"double\",\"id\":26},\"isWinner_3\":{\"type\":\"bool\",\"id\":27},\"cover\":{\"type\":\"bool\",\"id\":28}}},\"OfcWildInfo\":{\"fields\":{\"wildCard\":{\"type\":\"int32\",\"id\":1},\"changeCard\":{\"type\":\"int32\",\"id\":2}}},\"OfcPlayerInfo\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"handCard\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":2,\"options\":{\"packed\":false}},\"headCard\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":3,\"options\":{\"packed\":false}},\"middleCard\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":4,\"options\":{\"packed\":false}},\"tailCard\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":5,\"options\":{\"packed\":false}},\"headType\":{\"type\":\"int32\",\"id\":6},\"middleType\":{\"type\":\"int32\",\"id\":7},\"tailType\":{\"type\":\"int32\",\"id\":8},\"headScore\":{\"type\":\"int32\",\"id\":9},\"middleScore\":{\"type\":\"int32\",\"id\":10},\"tailScore\":{\"type\":\"int32\",\"id\":11},\"headReward\":{\"type\":\"int32\",\"id\":12},\"middleReward\":{\"type\":\"int32\",\"id\":13},\"tailReward\":{\"type\":\"int32\",\"id\":14},\"abandonCard\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":15,\"options\":{\"packed\":false}},\"bust\":{\"type\":\"bool\",\"id\":16},\"ftc\":{\"type\":\"uint32\",\"id\":17},\"ftcTimes\":{\"type\":\"uint32\",\"id\":18},\"ftcNext\":{\"type\":\"bool\",\"id\":19},\"allScore\":{\"type\":\"int32\",\"id\":20},\"wildCardInfo\":{\"rule\":\"repeated\",\"type\":\"OfcWildInfo\",\"id\":21}}},\"OfcPlayerTableInfo\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"icon\":{\"type\":\"string\",\"id\":3},\"ofcInfo\":{\"type\":\"OfcPlayerInfo\",\"id\":4},\"chairId\":{\"type\":\"uint32\",\"id\":5},\"chip\":{\"type\":\"double\",\"id\":6},\"leftChip\":{\"type\":\"double\",\"id\":7}}},\"LastRoundInfo\":{\"fields\":{\"pot\":{\"type\":\"double\",\"id\":1},\"gameType\":{\"type\":\"uint32\",\"id\":2},\"publicCards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":3,\"options\":{\"packed\":false}},\"list\":{\"rule\":\"repeated\",\"type\":\"PlayerTableInfo\",\"id\":4},\"insurancePot\":{\"type\":\"int32\",\"id\":5},\"gameNum\":{\"type\":\"uint32\",\"id\":6},\"isCollect\":{\"type\":\"bool\",\"id\":7},\"btnChairId\":{\"type\":\"uint32\",\"id\":8},\"sbChairId\":{\"type\":\"uint32\",\"id\":9},\"bbChairId\":{\"type\":\"uint32\",\"id\":10}}},\"RoundDetail\":{\"fields\":{\"pot\":{\"type\":\"double\",\"id\":1},\"time\":{\"type\":\"uint32\",\"id\":2},\"gameType\":{\"type\":\"uint32\",\"id\":3},\"collectId\":{\"type\":\"string\",\"id\":4},\"gameNum\":{\"type\":\"uint32\",\"id\":5},\"publicCards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":6,\"options\":{\"packed\":false}},\"list\":{\"rule\":\"repeated\",\"type\":\"PlayerTableInfo\",\"id\":7},\"isCollect\":{\"type\":\"bool\",\"id\":8},\"btnChairId\":{\"type\":\"uint32\",\"id\":9},\"sbChairId\":{\"type\":\"uint32\",\"id\":10},\"bbChairId\":{\"type\":\"uint32\",\"id\":11},\"operate\":{\"type\":\"string\",\"id\":12},\"publicCards_2\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":13,\"options\":{\"packed\":false}},\"multiPublicCards\":{\"rule\":\"repeated\",\"type\":\"MultiTimePublicCards\",\"id\":14}}},\"OfcRoundDetail\":{\"fields\":{\"time\":{\"type\":\"uint32\",\"id\":1},\"gameType\":{\"type\":\"uint32\",\"id\":2},\"collectId\":{\"type\":\"string\",\"id\":3},\"gameNum\":{\"type\":\"uint32\",\"id\":4},\"list\":{\"rule\":\"repeated\",\"type\":\"OfcPlayerTableInfo\",\"id\":5},\"isCollect\":{\"type\":\"bool\",\"id\":6},\"btnChairId\":{\"type\":\"uint32\",\"id\":7},\"utgChairId\":{\"type\":\"uint32\",\"id\":8}}},\"ColorRoundDetail\":{\"fields\":{\"time\":{\"type\":\"uint32\",\"id\":1},\"gameType\":{\"type\":\"uint32\",\"id\":2},\"collectId\":{\"type\":\"string\",\"id\":3},\"gameNum\":{\"type\":\"uint32\",\"id\":4},\"showColors\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":5,\"options\":{\"packed\":false}},\"profit\":{\"rule\":\"required\",\"type\":\"double\",\"id\":6}}},\"PlayerList\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"icon\":{\"type\":\"string\",\"id\":3}}},\"PlayerListBan\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"icon\":{\"type\":\"string\",\"id\":3},\"ban\":{\"type\":\"bool\",\"id\":4}}},\"ChatMsg\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"content\":{\"type\":\"string\",\"id\":2},\"time\":{\"type\":\"uint32\",\"id\":3},\"player\":{\"type\":\"PlayerList\",\"id\":4}}},\"WaitingPlayer\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"icon\":{\"type\":\"string\",\"id\":3},\"clubid\":{\"type\":\"uint64\",\"id\":4},\"clubName\":{\"type\":\"string\",\"id\":5}}},\"MultiTimePublicCards\":{\"fields\":{\"cards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":1,\"options\":{\"packed\":false}}}},\"MsgSitDown\":{\"fields\":{\"chairId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"isGpsValid\":{\"type\":\"bool\",\"id\":2},\"vlat\":{\"type\":\"double\",\"id\":3},\"vlong\":{\"type\":\"double\",\"id\":4},\"isSimulator\":{\"type\":\"bool\",\"id\":5},\"roomId\":{\"type\":\"uint32\",\"id\":6},\"chipNum\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":7}}},\"MsgSitDownRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"params\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgStandUp\":{\"fields\":{\"forceLeave\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgStandUpRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgApplyAddChip\":{\"fields\":{\"chipNum\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgApplyAddChipRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"isWaitAdd\":{\"type\":\"bool\",\"id\":3}}},\"MsgApplyDelayGameTime\":{\"fields\":{\"delayTime\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgApplyDelayGameTimeRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgApplyDismissRoom\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint32\",\"id\":2}}},\"MsgApplyDismissRoomRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgOpenGame\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgOpenGameRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"roomStatus\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGetGameStatisticsInfo\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetGameStatisticsInfoRsp\":{\"fields\":{\"playerStatistics\":{\"rule\":\"repeated\",\"type\":\"PlayerStatistics\",\"id\":1},\"gameNum\":{\"type\":\"uint32\",\"id\":2},\"remainTime\":{\"type\":\"uint32\",\"id\":3},\"name\":{\"type\":\"string\",\"id\":4},\"insurancePool\":{\"type\":\"int64\",\"id\":5},\"award\":{\"type\":\"int64\",\"id\":6},\"onlookerPlayers\":{\"rule\":\"repeated\",\"type\":\"PlayerData\",\"id\":7},\"participatedPlayerids\":{\"rule\":\"repeated\",\"type\":\"uint64\",\"id\":8,\"options\":{\"packed\":false}},\"gamePlayerids\":{\"rule\":\"repeated\",\"type\":\"uint64\",\"id\":9,\"options\":{\"packed\":false}},\"roomId\":{\"type\":\"uint32\",\"id\":10}}},\"MsgGetPlayerStatisticsInfo\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"clubid\":{\"type\":\"uint64\",\"id\":3}}},\"MsgGetPlayerStatisticsInfoRsp\":{\"fields\":{\"playerStatistics\":{\"type\":\"PlayerStatistics\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"statisticsids\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":3,\"options\":{\"packed\":false}}}},\"MsgGetPlayerClubInfo\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetPlayerClubInfoRsp\":{\"fields\":{\"playerClubData\":{\"type\":\"PlayerClubData\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgSetStraddle\":{\"fields\":{\"straddle\":{\"type\":\"bool\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgSetStraddleRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgClientSync\":{\"fields\":{}},\"MsgClientSyncRsp\":{\"fields\":{\"time\":{\"type\":\"uint64\",\"id\":1}}},\"MsgApplyDelayActionTime\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgApplyDelayActionTimeRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetGameLastRoundListInfo\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetGameLastRoundListInfoRsp\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"LastRoundInfo\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetRoundInfo\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"gameNum\":{\"type\":\"uint32\",\"id\":2},\"filterSelf\":{\"type\":\"bool\",\"id\":3}}},\"MsgGetRoundInfoRsp\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"gameNum\":{\"type\":\"uint32\",\"id\":2},\"total\":{\"type\":\"uint32\",\"id\":3},\"roundDetail\":{\"type\":\"RoundDetail\",\"id\":4},\"gameNumList\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":5,\"options\":{\"packed\":false}}}},\"MsgGetOfcRoundInfo\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"gameNum\":{\"type\":\"uint32\",\"id\":2},\"filterSelf\":{\"type\":\"bool\",\"id\":3}}},\"MsgGetOfcRoundInfoRsp\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"gameNum\":{\"type\":\"uint32\",\"id\":2},\"total\":{\"type\":\"uint32\",\"id\":3},\"roundDetail\":{\"type\":\"OfcRoundDetail\",\"id\":4},\"gameNumList\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":5,\"options\":{\"packed\":false}}}},\"MsgGetColorRoundInfoList\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"gameNumStart\":{\"type\":\"uint32\",\"id\":2},\"gameNumLen\":{\"type\":\"uint32\",\"id\":3},\"filterSelf\":{\"type\":\"bool\",\"id\":4}}},\"MsgGetColorRoundInfoListRsp\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"gameNumStart\":{\"type\":\"uint32\",\"id\":2},\"total\":{\"type\":\"uint32\",\"id\":3},\"roundDetails\":{\"rule\":\"repeated\",\"type\":\"ColorRoundDetail\",\"id\":4},\"gameNumListStart\":{\"type\":\"uint32\",\"id\":5},\"gameNumListEnd\":{\"type\":\"uint32\",\"id\":6},\"remainTime\":{\"type\":\"uint32\",\"id\":7},\"totalWinnings\":{\"type\":\"double\",\"id\":8}}},\"MsgCollectGameRound\":{\"fields\":{\"index\":{\"type\":\"uint32\",\"id\":1},\"type\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgCollectGameRoundRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"index\":{\"type\":\"uint32\",\"id\":2},\"type\":{\"type\":\"uint32\",\"id\":3},\"roomId\":{\"type\":\"uint32\",\"id\":4}}},\"MsgJoinGame\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgJoinGameRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgSetAFK\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"noLeave\":{\"type\":\"bool\",\"id\":2}}},\"MsgSetAFKRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgCancelAFK\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgCancelAFKRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetPlayingPlayerList\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetPlayingPlayerListRsp\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"PlayerList\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGroupReport\":{\"fields\":{\"playerid1\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"playerid2\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGroupReportRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgPlayerReport\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"reportType\":{\"type\":\"uint32\",\"id\":3},\"reportContent\":{\"type\":\"string\",\"id\":4}}},\"MsgPlayerReportRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetRabbitAction\":{\"fields\":{\"actType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2}}},\"MsgGetRabbitActionRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"actType\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgCloseAutoOpen\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgCloseAutoOpenRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgCloseAutoExtension\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgCloseAutoExtensionRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetTablePassword\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetTablePasswordRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"password\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgSetCalltime\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgSetCalltimeRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"time\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGetChatMsgList\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetChatMsgListRsp\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"ChatMsg\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgSendChatMsg\":{\"fields\":{\"msg\":{\"type\":\"ChatMsg\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgSendChatMsgRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetRoomPlayerList\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetRoomPlayerListRsp\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"PlayerListBan\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgChatBanPlayerOpt\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint64\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgChatBanPlayerOptRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"type\":{\"type\":\"uint32\",\"id\":2},\"playerid\":{\"type\":\"uint64\",\"id\":3},\"roomId\":{\"type\":\"uint32\",\"id\":4}}},\"MsgGetOnlookPlayer\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetOnlookPlayerRsp\":{\"fields\":{\"onlookerPlayers\":{\"rule\":\"repeated\",\"type\":\"PlayerData\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgSetUseEvchop\":{\"fields\":{\"useEvchop\":{\"rule\":\"required\",\"type\":\"bool\",\"id\":1}}},\"MsgSetUseEvchopRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"useEvchop\":{\"rule\":\"required\",\"type\":\"bool\",\"id\":2}}},\"MsgGetWaitPlayerList\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetWaitPlayerListRsp\":{\"fields\":{\"waitingPlayers\":{\"rule\":\"repeated\",\"type\":\"WaitingPlayer\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgJoinWaitList\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"clubName\":{\"type\":\"string\",\"id\":2}}},\"MsgJoinWaitListRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgExitWaitList\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgExitWaitListRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgWaitingJoinRoom\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"isJoin\":{\"type\":\"uint32\",\"id\":2},\"isGpsValid\":{\"type\":\"bool\",\"id\":3},\"vlat\":{\"type\":\"double\",\"id\":4},\"vlong\":{\"type\":\"double\",\"id\":5},\"isSimulator\":{\"type\":\"bool\",\"id\":6}}},\"MsgWaitingJoinRoomRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"params\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPinRoom\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint32\",\"id\":2},\"opt\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPinRoomRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"opt\":{\"type\":\"uint32\",\"id\":3},\"pin\":{\"type\":\"uint32\",\"id\":4}}},\"MsgCheckEnterRoom\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgCheckEnterRoomRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3},\"gameType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4}}},\"MsgAddPlayerCast\":{\"fields\":{\"player\":{\"type\":\"PlayerData\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"tableIndex\":{\"type\":\"uint32\",\"id\":3}}},\"MsgRemovePlayerCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"tableIndex\":{\"type\":\"uint32\",\"id\":3}}},\"MsgSitDownCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"chairId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3},\"tableIndex\":{\"type\":\"uint32\",\"id\":4}}},\"MsgStandUpCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"chairId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"reason\":{\"type\":\"uint32\",\"id\":3},\"roomId\":{\"type\":\"uint32\",\"id\":4},\"tableIndex\":{\"type\":\"uint32\",\"id\":5}}},\"MsgRoomRemainTimeCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"remainTime\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2}}},\"MsgDismissTableCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgRoomListChangeCast\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGameStatisticsCast\":{\"fields\":{\"playerStatistics\":{\"rule\":\"repeated\",\"type\":\"PlayerStatistics\",\"id\":1},\"insurancePool\":{\"type\":\"int64\",\"id\":2},\"award\":{\"type\":\"int64\",\"id\":3},\"roomId\":{\"type\":\"uint32\",\"id\":4}}},\"MsgApplyAddChipSuccCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"chip\":{\"rule\":\"required\",\"type\":\"double\",\"id\":2},\"addChip\":{\"rule\":\"required\",\"type\":\"double\",\"id\":3},\"clubChip\":{\"type\":\"double\",\"id\":4},\"roomId\":{\"type\":\"uint32\",\"id\":5},\"applyType\":{\"type\":\"uint32\",\"id\":6}}},\"MsgNotifyPlayerAddChipCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"leftTime\":{\"type\":\"uint64\",\"id\":2}}},\"MsgActionRemainTimeCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint64\",\"id\":2},\"actionFinishTime\":{\"type\":\"uint64\",\"id\":3},\"boughtLeftTimeNeedDiamonds\":{\"type\":\"uint32\",\"id\":4}}},\"MsgKickPlayerCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgForceStandupTimeCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"leftTime\":{\"type\":\"uint64\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgRabbitActionCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"cards\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":2,\"options\":{\"packed\":false}},\"roomId\":{\"type\":\"uint32\",\"id\":3},\"cards_2\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":4,\"options\":{\"packed\":false}}}},\"MsgPlayerTableVPIPCast\":{\"fields\":{\"gameNum\":{\"type\":\"uint32\",\"id\":1},\"inPotNum\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPlayerVPIPLevelCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgAFKTimeoutCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgChatMsgCast\":{\"fields\":{\"msg\":{\"type\":\"ChatMsg\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgPlayerUseRabbitCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"nick\":{\"type\":\"string\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPlayerAfkStateCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"afkState\":{\"type\":\"bool\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPlayerLeaveNextRoundStateCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"leaveNextRound\":{\"type\":\"bool\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgActionTimeProtectCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint64\",\"id\":2},\"actionFinishTime\":{\"type\":\"uint64\",\"id\":3}}},\"MsgPlayerStatisticsInfoCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint64\",\"id\":2},\"gameName\":{\"type\":\"string\",\"id\":3},\"gameType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4},\"sbNum\":{\"rule\":\"required\",\"type\":\"double\",\"id\":5},\"winChip\":{\"rule\":\"required\",\"type\":\"double\",\"id\":6},\"flash\":{\"type\":\"uint32\",\"id\":7},\"bets\":{\"rule\":\"repeated\",\"type\":\"double\",\"id\":8,\"options\":{\"packed\":false}},\"exchangeRate\":{\"type\":\"double\",\"id\":9}}},\"MsgPlayerKickoutTableCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint32\",\"id\":2},\"reason\":{\"type\":\"uint32\",\"id\":3},\"time\":{\"type\":\"uint32\",\"id\":4},\"type\":{\"type\":\"uint32\",\"id\":5},\"smallBlind\":{\"type\":\"uint32\",\"id\":6},\"bets\":{\"rule\":\"repeated\",\"type\":\"double\",\"id\":7,\"options\":{\"packed\":false}},\"exchangeRate\":{\"type\":\"double\",\"id\":8}}},\"MsgFlashEnterNewRoomCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"newRoomid\":{\"type\":\"uint32\",\"id\":2}}},\"MsgWaitingTableCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"gameType\":{\"type\":\"uint32\",\"id\":2},\"smallBlind\":{\"type\":\"double\",\"id\":3},\"leftTime\":{\"type\":\"uint32\",\"id\":4},\"clubid\":{\"type\":\"uint32\",\"id\":5},\"clubName\":{\"type\":\"string\",\"id\":6},\"exchangeRate\":{\"type\":\"double\",\"id\":7}}},\"MsgWaitingListChangeCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"waitingNum\":{\"type\":\"uint32\",\"id\":2},\"playerIsWaiting\":{\"type\":\"uint32\",\"id\":3},\"playerIndex\":{\"type\":\"uint32\",\"id\":4}}},\"MsgWaitingListCountCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"waitingNum\":{\"type\":\"uint32\",\"id\":2}}},\"MsgWaitingSitdownTimeCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"leftTime\":{\"type\":\"uint64\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPlayerVPIPCheckCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"curGameNum\":{\"type\":\"uint32\",\"id\":2},\"curInPotNum\":{\"type\":\"uint32\",\"id\":3},\"handNum\":{\"type\":\"uint32\",\"id\":4},\"vpip\":{\"type\":\"uint32\",\"id\":5},\"minVpip\":{\"type\":\"uint32\",\"id\":6},\"vpipLevel\":{\"type\":\"uint32\",\"id\":7},\"ec\":{\"type\":\"uint32\",\"id\":8}}},\"MsgVipPlayerClubDataCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"tableIndex\":{\"type\":\"uint32\",\"id\":2},\"vipData\":{\"rule\":\"repeated\",\"type\":\"PlayerTableVipData\",\"id\":3}}}}},\"statistics\":{\"nested\":{\"PlayerStatistics\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"icon\":{\"type\":\"string\",\"id\":3},\"winChip\":{\"type\":\"double\",\"id\":4},\"bringInChip\":{\"type\":\"double\",\"id\":5},\"gameNum\":{\"type\":\"int32\",\"id\":6},\"fee\":{\"type\":\"double\",\"id\":7},\"evChop\":{\"type\":\"double\",\"id\":8},\"jackpot\":{\"type\":\"double\",\"id\":9},\"betChip\":{\"type\":\"double\",\"id\":10},\"insurance\":{\"type\":\"double\",\"id\":11}}},\"StatisticsRecordOfcPart\":{\"fields\":{\"gameMode\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"actionMode\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"joker\":{\"rule\":\"required\",\"type\":\"bool\",\"id\":3}}},\"StatisticsRecordColorPart\":{\"fields\":{\"bets\":{\"rule\":\"repeated\",\"type\":\"double\",\"id\":1,\"options\":{\"packed\":false}}}},\"StatisticsRecord\":{\"fields\":{\"statisticsId\":{\"type\":\"string\",\"id\":1},\"statisticsTime\":{\"type\":\"uint32\",\"id\":2},\"avatar\":{\"type\":\"string\",\"id\":3},\"time\":{\"type\":\"uint32\",\"id\":4},\"feeRate\":{\"type\":\"uint32\",\"id\":5},\"sbNum\":{\"type\":\"double\",\"id\":6},\"roomType\":{\"type\":\"uint32\",\"id\":7},\"gameType\":{\"type\":\"uint32\",\"id\":8},\"fee\":{\"type\":\"double\",\"id\":9},\"playerStatistics\":{\"rule\":\"repeated\",\"type\":\"PlayerStatistics\",\"id\":10},\"profit\":{\"type\":\"double\",\"id\":11},\"cardName\":{\"type\":\"string\",\"id\":12},\"calltime\":{\"type\":\"uint32\",\"id\":13},\"creatorId\":{\"type\":\"uint64\",\"id\":14},\"evchopFee\":{\"type\":\"double\",\"id\":15},\"jackpotFee\":{\"type\":\"double\",\"id\":16},\"evChop\":{\"type\":\"bool\",\"id\":17},\"jackpot\":{\"type\":\"bool\",\"id\":18},\"flash\":{\"type\":\"bool\",\"id\":19},\"bomb\":{\"type\":\"bool\",\"id\":20},\"bombDoubleCards\":{\"type\":\"bool\",\"id\":21},\"doubleCards\":{\"type\":\"bool\",\"id\":22},\"feeCap\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":23},\"ofc\":{\"type\":\"StatisticsRecordOfcPart\",\"id\":24},\"color\":{\"type\":\"StatisticsRecordColorPart\",\"id\":25},\"insurance\":{\"type\":\"bool\",\"id\":26}}},\"PlayerMtt\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"icon\":{\"type\":\"string\",\"id\":3},\"winChip\":{\"type\":\"double\",\"id\":4},\"prize\":{\"type\":\"string\",\"id\":5},\"gameNum\":{\"type\":\"uint32\",\"id\":6},\"rank\":{\"type\":\"uint32\",\"id\":7},\"rebuyNum\":{\"type\":\"uint32\",\"id\":8},\"addonNum\":{\"type\":\"uint32\",\"id\":9},\"useTicket\":{\"type\":\"bool\",\"id\":10},\"koNum\":{\"type\":\"uint32\",\"id\":11},\"getKoBonus\":{\"type\":\"double\",\"id\":12}}},\"MttRecord\":{\"fields\":{\"mttId\":{\"type\":\"uint32\",\"id\":1},\"startTime\":{\"type\":\"uint32\",\"id\":2},\"closeTime\":{\"type\":\"uint32\",\"id\":3},\"avatar\":{\"type\":\"string\",\"id\":4},\"buyIn\":{\"type\":\"double\",\"id\":5},\"raiseBlindTime\":{\"type\":\"uint32\",\"id\":6},\"roomType\":{\"type\":\"uint32\",\"id\":7},\"gameType\":{\"type\":\"uint32\",\"id\":8},\"fee\":{\"type\":\"double\",\"id\":9},\"initChips\":{\"type\":\"uint32\",\"id\":10},\"members\":{\"rule\":\"repeated\",\"type\":\"PlayerMtt\",\"id\":11},\"joinFee\":{\"type\":\"double\",\"id\":12},\"moneyRound\":{\"type\":\"uint32\",\"id\":13},\"serviceFee\":{\"type\":\"double\",\"id\":14},\"profit\":{\"type\":\"double\",\"id\":15},\"rebuyNum\":{\"type\":\"uint32\",\"id\":16},\"addonNum\":{\"type\":\"uint32\",\"id\":17},\"mttType\":{\"type\":\"uint32\",\"id\":18},\"mttName\":{\"type\":\"string\",\"id\":19},\"feeRate\":{\"type\":\"uint32\",\"id\":20},\"creatorId\":{\"type\":\"uint64\",\"id\":21},\"koType\":{\"type\":\"uint32\",\"id\":22},\"koValue\":{\"type\":\"double\",\"id\":23},\"customRaiseBlind\":{\"type\":\"mtt.MttCustomRaiseBlind\",\"id\":24},\"multiplier\":{\"type\":\"uint32\",\"id\":25},\"isSpinup\":{\"type\":\"bool\",\"id\":26},\"isSng\":{\"type\":\"bool\",\"id\":27}}},\"PlayerHandsRecord\":{\"fields\":{\"id\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint64\",\"id\":2},\"cTime\":{\"type\":\"uint32\",\"id\":3},\"smallBlind\":{\"type\":\"double\",\"id\":4},\"handcards\":{\"type\":\"string\",\"id\":5},\"profit\":{\"type\":\"double\",\"id\":6},\"shardKey\":{\"type\":\"string\",\"id\":7},\"collectId\":{\"type\":\"string\",\"id\":8},\"collected\":{\"type\":\"bool\",\"id\":9},\"sceneType\":{\"type\":\"uint32\",\"id\":10},\"gameType\":{\"type\":\"uint32\",\"id\":11},\"extType\":{\"type\":\"uint32\",\"id\":12},\"coinType\":{\"type\":\"uint32\",\"id\":13}}},\"MsgGetPlayerHandsRecord\":{\"fields\":{}},\"MsgGetPlayerHandsRecordRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"PlayerHandsRecord\",\"id\":2}}},\"MsgGetCollectRecord\":{\"fields\":{}},\"MsgGetCollectRecordRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"PlayerHandsRecord\",\"id\":2}}},\"MsgCollectRecordAdd\":{\"fields\":{\"collectId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgCollectRecordAddRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"collectId\":{\"type\":\"string\",\"id\":2}}},\"MsgCollectRecordDel\":{\"fields\":{\"collectId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgCollectRecordDelRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"collectId\":{\"type\":\"string\",\"id\":2}}},\"MsgGetStatisticsRecord\":{\"fields\":{\"statisticsids\":{\"rule\":\"repeated\",\"type\":\"string\",\"id\":1},\"type\":{\"type\":\"uint32\",\"id\":2},\"playerids\":{\"rule\":\"repeated\",\"type\":\"uint64\",\"id\":3,\"options\":{\"packed\":false}}}},\"MsgGetStatisticsRecordRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"statistics\":{\"rule\":\"repeated\",\"type\":\"StatisticsRecord\",\"id\":2}}},\"MsgGetMttRecord\":{\"fields\":{\"mttids\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":1,\"options\":{\"packed\":false}},\"type\":{\"type\":\"uint32\",\"id\":2},\"playerids\":{\"rule\":\"repeated\",\"type\":\"uint64\",\"id\":3,\"options\":{\"packed\":false}}}},\"MsgGetMttRecordRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"mttrecord\":{\"rule\":\"repeated\",\"type\":\"MttRecord\",\"id\":2}}},\"MsgGetShardKeyByCollectId\":{\"fields\":{\"collectId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgGetShardKeyByCollectIdRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"collectId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"shardKey\":{\"type\":\"string\",\"id\":3}}}}},\"store\":{\"nested\":{\"pbStoreInfo\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1},\"startTime\":{\"type\":\"uint32\",\"id\":2},\"endTime\":{\"type\":\"uint32\",\"id\":3}}},\"pbProduct\":{\"fields\":{\"Id\":{\"type\":\"uint32\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"cost\":{\"type\":\"uint32\",\"id\":3},\"value\":{\"type\":\"uint32\",\"id\":4},\"clubLevel\":{\"type\":\"uint32\",\"id\":5},\"type\":{\"type\":\"uint32\",\"id\":6},\"pic\":{\"type\":\"string\",\"id\":7},\"effectiveDay\":{\"type\":\"uint32\",\"id\":9},\"time\":{\"type\":\"uint32\",\"id\":10},\"rewardType\":{\"type\":\"uint32\",\"id\":11},\"googleplayId\":{\"type\":\"string\",\"id\":12},\"appstoreId\":{\"type\":\"string\",\"id\":13},\"propId\":{\"type\":\"uint32\",\"id\":14},\"douleCost\":{\"type\":\"double\",\"id\":15}}},\"PayRecord\":{\"fields\":{\"diamond\":{\"type\":\"uint32\",\"id\":1},\"time\":{\"type\":\"uint32\",\"id\":2},\"name\":{\"type\":\"string\",\"id\":3},\"type\":{\"type\":\"uint32\",\"id\":4},\"itemid\":{\"type\":\"uint32\",\"id\":5},\"value\":{\"type\":\"uint32\",\"id\":6},\"effectDay\":{\"type\":\"uint32\",\"id\":7}}},\"VipPrivilege\":{\"fields\":{\"level\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"itemid\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"rabbitHunting\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":3},\"connnectProtect\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":4},\"clubCreate\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":5},\"freeProp\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":6},\"timeBank\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":7},\"validDay\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":8},\"clubData\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":9},\"rivalData\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":10}}},\"MsgProductList\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"currency\":{\"type\":\"string\",\"id\":2}}},\"MsgProductListRsp\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"pbProduct\",\"id\":1},\"info\":{\"rule\":\"repeated\",\"type\":\"pbStoreInfo\",\"id\":2}}},\"MsgGetPaySuccRecord\":{\"fields\":{\"type\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetPaySuccRecordRsp\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"PayRecord\",\"id\":1}}},\"MsgGetVipPrivilegeConfig\":{\"fields\":{\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgGetVipPrivilegeConfigRsp\":{\"fields\":{\"md5\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1},\"list\":{\"rule\":\"repeated\",\"type\":\"VipPrivilege\",\"id\":2}}},\"MsgUseDiamondPay\":{\"fields\":{\"id\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgUseDiamondPayRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1}}},\"MsgSendUserItem\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"int64\",\"id\":1},\"id\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"clubid\":{\"type\":\"uint64\",\"id\":3}}},\"MsgSendUserItemRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1}}},\"MsgPaySuccCast\":{\"fields\":{\"diamonds\":{\"type\":\"uint32\",\"id\":1}}}}},\"texas\":{\"nested\":{\"TexasRule\":{\"fields\":{\"name\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1},\"gameType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"chipMax\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3},\"chipMin\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4},\"sbNum\":{\"rule\":\"required\",\"type\":\"double\",\"id\":5},\"maxChair\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":6},\"time\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":7},\"ante\":{\"rule\":\"required\",\"type\":\"double\",\"id\":8},\"isCanbuyInsurance\":{\"rule\":\"required\",\"type\":\"bool\",\"id\":9},\"isForceStraddle\":{\"rule\":\"required\",\"type\":\"bool\",\"id\":10},\"isOpenGps\":{\"type\":\"bool\",\"id\":12},\"isOpenIp\":{\"type\":\"bool\",\"id\":13},\"autostart\":{\"type\":\"uint32\",\"id\":14},\"handsFee\":{\"type\":\"uint32\",\"id\":15},\"feeCap\":{\"type\":\"uint32\",\"id\":16},\"actionTime\":{\"type\":\"uint32\",\"id\":17},\"minVpip\":{\"type\":\"uint32\",\"id\":18},\"vpipLevel\":{\"type\":\"uint32\",\"id\":19},\"handsThreshold\":{\"type\":\"uint32\",\"id\":20},\"autoExtension\":{\"type\":\"bool\",\"id\":21},\"extensionTimes\":{\"type\":\"uint32\",\"id\":22},\"autoOpen\":{\"type\":\"bool\",\"id\":23},\"calltime\":{\"type\":\"uint32\",\"id\":24},\"exclusive\":{\"type\":\"bool\",\"id\":25},\"banChatting\":{\"type\":\"bool\",\"id\":26},\"linkedEmail\":{\"type\":\"bool\",\"id\":27},\"pcRestriction\":{\"type\":\"bool\",\"id\":28},\"evChop\":{\"type\":\"bool\",\"id\":29},\"jackpot\":{\"type\":\"bool\",\"id\":30},\"flash\":{\"type\":\"uint32\",\"id\":31},\"bombPot\":{\"type\":\"BombPot\",\"id\":32},\"doubleCards\":{\"type\":\"bool\",\"id\":33},\"simulatorRestriction\":{\"type\":\"bool\",\"id\":34},\"iosOnly\":{\"type\":\"bool\",\"id\":35},\"multiTimes\":{\"type\":\"bool\",\"id\":36},\"evChopNoBomb\":{\"type\":\"bool\",\"id\":37},\"insuranceNoBomb\":{\"type\":\"bool\",\"id\":38}}},\"BombPot\":{\"fields\":{\"valid\":{\"type\":\"bool\",\"id\":1},\"perHand\":{\"type\":\"uint32\",\"id\":2},\"minBb\":{\"type\":\"uint32\",\"id\":3},\"maxBb\":{\"type\":\"uint32\",\"id\":4},\"doubleCards\":{\"type\":\"bool\",\"id\":5}}},\"TableInfo\":{\"fields\":{\"gameNum\":{\"type\":\"uint32\",\"id\":1},\"remainTime\":{\"type\":\"uint32\",\"id\":2},\"btnChairId\":{\"type\":\"uint32\",\"id\":3},\"sbChairId\":{\"type\":\"uint32\",\"id\":4},\"bbChairId\":{\"type\":\"uint32\",\"id\":5},\"players\":{\"rule\":\"repeated\",\"type\":\"rooms.PlayerData\",\"id\":6},\"publicCards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":7,\"options\":{\"packed\":false}},\"sidePot\":{\"rule\":\"repeated\",\"type\":\"double\",\"id\":8,\"options\":{\"packed\":false}},\"isOpen\":{\"type\":\"bool\",\"id\":10},\"roomStatus\":{\"type\":\"uint32\",\"id\":11},\"pot\":{\"type\":\"double\",\"id\":12},\"roomId\":{\"type\":\"uint32\",\"id\":13},\"clubid\":{\"type\":\"uint64\",\"id\":14},\"rule\":{\"type\":\"TexasRule\",\"id\":15},\"gamePlayerids\":{\"rule\":\"repeated\",\"type\":\"uint64\",\"id\":17,\"options\":{\"packed\":false}},\"curActionPlayer\":{\"type\":\"MsgNextActionPlayerCast\",\"id\":18},\"handcards\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":19,\"options\":{\"packed\":false}},\"waitTime\":{\"type\":\"uint32\",\"id\":20},\"landscape\":{\"type\":\"bool\",\"id\":21},\"preOprType\":{\"type\":\"uint32\",\"id\":22},\"needTimes\":{\"type\":\"bool\",\"id\":23},\"tableIndex\":{\"type\":\"uint32\",\"id\":24},\"fastFold\":{\"type\":\"bool\",\"id\":25},\"openCards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":26,\"options\":{\"packed\":false}},\"publicCards_2\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":27,\"options\":{\"packed\":false}},\"multiPublicCards\":{\"rule\":\"repeated\",\"type\":\"MultiTimePublicCards\",\"id\":28},\"multiStatus\":{\"type\":\"uint32\",\"id\":29},\"multiInfo\":{\"type\":\"MultiTimeInfo\",\"id\":30},\"curCollectId\":{\"type\":\"string\",\"id\":31}}},\"MultiTimePublicCards\":{\"fields\":{\"cards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":1,\"options\":{\"packed\":false}}}},\"MultiTimePlayer\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"nick\":{\"type\":\"string\",\"id\":2},\"avatar\":{\"type\":\"string\",\"id\":3},\"handcards\":{\"rule\":\"repeated\",\"type\":\"uint64\",\"id\":4,\"options\":{\"packed\":false}},\"chairId\":{\"type\":\"uint32\",\"id\":5},\"chance\":{\"type\":\"uint32\",\"id\":6},\"isLeader\":{\"type\":\"bool\",\"id\":7}}},\"MultiTimeInfo\":{\"fields\":{\"players\":{\"rule\":\"repeated\",\"type\":\"MultiTimePlayer\",\"id\":1},\"outs\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":2,\"options\":{\"packed\":false}},\"chops\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":3,\"options\":{\"packed\":false}},\"pot\":{\"type\":\"double\",\"id\":4},\"publicCards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":5,\"options\":{\"packed\":false}},\"multiTimes\":{\"type\":\"uint32\",\"id\":6},\"endTime\":{\"type\":\"uint32\",\"id\":7},\"remainNum\":{\"type\":\"uint32\",\"id\":8},\"tempMultiTimes\":{\"type\":\"uint32\",\"id\":9}}},\"RoomInfo\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"creatorUserID\":{\"type\":\"uint64\",\"id\":2},\"creatorNick\":{\"type\":\"string\",\"id\":3},\"creatorAvatar\":{\"type\":\"string\",\"id\":4},\"clubid\":{\"type\":\"uint64\",\"id\":5},\"createTime\":{\"type\":\"uint64\",\"id\":6},\"validity\":{\"type\":\"bool\",\"id\":7},\"rule\":{\"type\":\"TexasRule\",\"id\":8},\"remainTime\":{\"type\":\"uint32\",\"id\":9},\"count\":{\"type\":\"uint32\",\"id\":10},\"clubAvatar\":{\"type\":\"string\",\"id\":11},\"groupNo\":{\"type\":\"uint32\",\"id\":12},\"clubNick\":{\"type\":\"string\",\"id\":13},\"status\":{\"type\":\"int32\",\"id\":14},\"isIn\":{\"type\":\"bool\",\"id\":15},\"index\":{\"type\":\"uint32\",\"id\":16},\"isEnter\":{\"type\":\"bool\",\"id\":17},\"gameid\":{\"type\":\"uint32\",\"id\":18},\"isFlash\":{\"type\":\"uint32\",\"id\":19},\"waitingNum\":{\"type\":\"uint32\",\"id\":20},\"isSit\":{\"type\":\"bool\",\"id\":21},\"isWait\":{\"type\":\"bool\",\"id\":22},\"pin\":{\"type\":\"uint32\",\"id\":23},\"costType\":{\"type\":\"int32\",\"id\":24}}},\"RoomDynamicInfo\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"validity\":{\"type\":\"bool\",\"id\":2},\"remainTime\":{\"type\":\"uint32\",\"id\":3},\"count\":{\"type\":\"uint32\",\"id\":4},\"status\":{\"type\":\"int32\",\"id\":5},\"isIn\":{\"type\":\"bool\",\"id\":6},\"isEnter\":{\"type\":\"bool\",\"id\":7},\"gameid\":{\"type\":\"uint32\",\"id\":8},\"isFlash\":{\"type\":\"uint32\",\"id\":9},\"waitingNum\":{\"type\":\"uint32\",\"id\":10},\"isSit\":{\"type\":\"bool\",\"id\":11},\"isWait\":{\"type\":\"bool\",\"id\":12},\"pin\":{\"type\":\"uint32\",\"id\":13}}},\"PlayerBet\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"turnChip\":{\"type\":\"double\",\"id\":2},\"tableChip\":{\"type\":\"double\",\"id\":3},\"chip\":{\"type\":\"double\",\"id\":4},\"pot\":{\"type\":\"double\",\"id\":6},\"gameNum\":{\"type\":\"uint32\",\"id\":7},\"round\":{\"type\":\"uint32\",\"id\":8},\"actType\":{\"type\":\"uint32\",\"id\":9},\"actStatus\":{\"type\":\"uint32\",\"id\":10},\"sumBetChip\":{\"type\":\"uint32\",\"id\":11}}},\"PlayerResult\":{\"fields\":{\"playerid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"handcards\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":2,\"options\":{\"packed\":false}},\"isFold\":{\"type\":\"bool\",\"id\":3},\"pokerType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4},\"result\":{\"type\":\"uint32\",\"id\":5},\"chip\":{\"type\":\"double\",\"id\":6},\"hightlightCards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":7,\"options\":{\"packed\":false}},\"fee\":{\"type\":\"double\",\"id\":8},\"returnCount\":{\"type\":\"uint32\",\"id\":9},\"insurance\":{\"type\":\"uint32\",\"id\":10},\"leftchip\":{\"type\":\"double\",\"id\":11},\"rabbitselfDiamond\":{\"type\":\"uint32\",\"id\":12},\"rabbitallDiamond\":{\"type\":\"uint32\",\"id\":13},\"winChip\":{\"type\":\"double\",\"id\":14},\"isEvchop\":{\"type\":\"bool\",\"id\":15},\"pokerType_2\":{\"type\":\"uint32\",\"id\":16},\"result_2\":{\"type\":\"uint32\",\"id\":17},\"hightlightCards_2\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":18,\"options\":{\"packed\":false}},\"returnChip\":{\"type\":\"double\",\"id\":19},\"cashRabbitCast\":{\"type\":\"double\",\"id\":20}}},\"GameAutoBuyIn\":{\"fields\":{\"thresholdChips\":{\"type\":\"double\",\"id\":1},\"buyinChips\":{\"type\":\"double\",\"id\":2}}},\"GameRecordInfo\":{\"fields\":{\"recordType\":{\"type\":\"string\",\"id\":1},\"nextActionPlayer\":{\"type\":\"MsgNextActionPlayerCast\",\"id\":2},\"betAnte\":{\"type\":\"MsgBetAnteCast\",\"id\":3},\"playerBet\":{\"type\":\"MsgPlayerBetCast\",\"id\":4},\"sidePot\":{\"type\":\"MsgPotsCast\",\"id\":5},\"publicCards\":{\"type\":\"MsgPublicCardsCast\",\"id\":6},\"gameResult\":{\"type\":\"MsgGameResultCast\",\"id\":7}}},\"InsuranceInfo\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"potId\":{\"type\":\"uint32\",\"id\":2},\"outs\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":3,\"options\":{\"packed\":false}},\"odds\":{\"type\":\"float\",\"id\":4},\"minInsurance\":{\"type\":\"uint32\",\"id\":5},\"breakevenInsurance\":{\"type\":\"uint32\",\"id\":6},\"maxInsurance\":{\"type\":\"uint32\",\"id\":7},\"potNum\":{\"type\":\"uint32\",\"id\":8},\"allinPlayers\":{\"rule\":\"repeated\",\"type\":\"ShowHandCardInfo\",\"id\":9}}},\"InsuranceResult\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"insuranceCount\":{\"type\":\"uint32\",\"id\":2},\"returnCount\":{\"type\":\"uint32\",\"id\":3}}},\"ShowHandCardInfo\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"handcards\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":2,\"options\":{\"packed\":false}},\"cover\":{\"type\":\"bool\",\"id\":3}}},\"CommonRule\":{\"fields\":{\"name\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1},\"gameType\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"sbNum\":{\"rule\":\"required\",\"type\":\"double\",\"id\":3},\"maxChair\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4},\"time\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":5},\"actionTime\":{\"type\":\"uint32\",\"id\":6}}},\"CommonNextActionPlayer\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"actionFinishTime\":{\"type\":\"uint64\",\"id\":2},\"boughtLeftTimeTimes\":{\"type\":\"uint32\",\"id\":3}}},\"CommonPlayer\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"status\":{\"type\":\"uint32\",\"id\":2},\"isLeftback\":{\"type\":\"bool\",\"id\":3}}},\"CommonTableInfo\":{\"fields\":{\"gameNum\":{\"type\":\"uint32\",\"id\":1},\"remainTime\":{\"type\":\"uint32\",\"id\":2},\"btnChairId\":{\"type\":\"uint32\",\"id\":3},\"isOpen\":{\"type\":\"bool\",\"id\":4},\"roomStatus\":{\"type\":\"uint32\",\"id\":5},\"players\":{\"rule\":\"repeated\",\"type\":\"CommonPlayer\",\"id\":6},\"roomId\":{\"type\":\"uint32\",\"id\":7},\"clubid\":{\"type\":\"uint64\",\"id\":8},\"rule\":{\"type\":\"CommonRule\",\"id\":9},\"gamePlayerids\":{\"rule\":\"repeated\",\"type\":\"uint64\",\"id\":10,\"options\":{\"packed\":false}},\"curActionPlayer\":{\"type\":\"CommonNextActionPlayer\",\"id\":11},\"ftcActionPlayers\":{\"rule\":\"repeated\",\"type\":\"CommonNextActionPlayer\",\"id\":12},\"waitTime\":{\"type\":\"uint32\",\"id\":13},\"needTimes\":{\"type\":\"bool\",\"id\":14},\"tableIndex\":{\"type\":\"uint32\",\"id\":15}}},\"UserRoomInfo\":{\"fields\":{\"roomId\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"mttid\":{\"type\":\"uint32\",\"id\":3},\"state\":{\"type\":\"uint32\",\"id\":4},\"tableInfo\":{\"type\":\"CommonTableInfo\",\"id\":5},\"time\":{\"type\":\"uint32\",\"id\":6},\"gameType\":{\"type\":\"uint32\",\"id\":7},\"isSpinup\":{\"type\":\"bool\",\"id\":8},\"isSng\":{\"type\":\"bool\",\"id\":9}}},\"EvchopInfoPlayer\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"chairId\":{\"type\":\"uint32\",\"id\":2},\"chips\":{\"type\":\"uint32\",\"id\":3},\"chance\":{\"type\":\"uint32\",\"id\":4}}},\"PotsEvchopInfo\":{\"fields\":{\"potIndex\":{\"type\":\"uint32\",\"id\":1},\"potChips\":{\"type\":\"uint32\",\"id\":2},\"evchopPlayers\":{\"rule\":\"repeated\",\"type\":\"EvchopInfoPlayer\",\"id\":3}}},\"ChanceInfoPlayer\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"chairId\":{\"type\":\"uint32\",\"id\":2},\"chance\":{\"type\":\"uint32\",\"id\":3}}},\"MsgGetGameTableList\":{\"fields\":{\"clubid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1}}},\"MsgGetGameTableListRsp\":{\"fields\":{\"roomList\":{\"rule\":\"repeated\",\"type\":\"RoomInfo\",\"id\":1}}},\"MsgGetGameTableListByIds\":{\"fields\":{\"clubid\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"roomids\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":2,\"options\":{\"packed\":false}}}},\"MsgGetGameTableListByIdsRsp\":{\"fields\":{\"roomList\":{\"rule\":\"repeated\",\"type\":\"RoomDynamicInfo\",\"id\":1}}},\"MsgCreateRoom\":{\"fields\":{\"rule\":{\"type\":\"TexasRule\",\"id\":1},\"operationType\":{\"type\":\"uint32\",\"id\":2},\"roomType\":{\"type\":\"uint32\",\"id\":3},\"validity\":{\"type\":\"bool\",\"id\":4},\"clubid\":{\"type\":\"uint64\",\"id\":5}}},\"MsgCreateRoomRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"info\":{\"type\":\"RoomInfo\",\"id\":2}}},\"MsgEnterRoom\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"enterType\":{\"type\":\"uint32\",\"id\":2},\"password\":{\"type\":\"uint32\",\"id\":3},\"clubid\":{\"type\":\"uint32\",\"id\":4},\"mttid\":{\"type\":\"uint32\",\"id\":5},\"switchOutPre\":{\"type\":\"bool\",\"id\":6}}},\"MsgEnterRoomRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgLeaveRoom\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"enterType\":{\"type\":\"uint32\",\"id\":2}}},\"MsgLeaveRoomRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgCheckEnterRoom\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgCheckEnterRoomRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgQueryRoomInfo\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgQueryRoomInfoRsp\":{\"fields\":{\"info\":{\"type\":\"RoomInfo\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgQueryChip\":{\"fields\":{}},\"MsgQueryChipRsp\":{\"fields\":{\"tableChipNum\":{\"type\":\"uint32\",\"id\":1},\"chipNum\":{\"type\":\"uint32\",\"id\":2},\"chipMax\":{\"type\":\"uint32\",\"id\":3},\"chipMin\":{\"type\":\"uint32\",\"id\":4},\"sbNum\":{\"type\":\"uint32\",\"id\":5}}},\"MsgPlayerAction\":{\"fields\":{\"actType\":{\"type\":\"uint32\",\"id\":1},\"value\":{\"type\":\"double\",\"id\":2},\"round\":{\"type\":\"uint32\",\"id\":3},\"roomId\":{\"type\":\"uint32\",\"id\":4}}},\"MsgPlayerActionRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"actType\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPlayerBuyInsurance\":{\"fields\":{\"potId\":{\"type\":\"uint32\",\"id\":1},\"insurance\":{\"type\":\"uint32\",\"id\":2},\"isCancel\":{\"type\":\"bool\",\"id\":3},\"roomId\":{\"type\":\"uint32\",\"id\":4}}},\"MsgPlayerBuyInsuranceRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgKickRoomMember\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"kickPlayerid\":{\"type\":\"uint64\",\"id\":2}}},\"MsgKickRoomMemberRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgApplyJionRoom\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgApplyJionRoomRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgOpenHandCard\":{\"fields\":{\"card\":{\"type\":\"int32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"close\":{\"type\":\"uint32\",\"id\":3}}},\"MsgOpenHandCardRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgPropList\":{\"fields\":{}},\"MsgPropListRsp\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"store.pbProduct\",\"id\":1}}},\"MsgGivingProp\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"toUserID\":{\"type\":\"uint32\",\"id\":2},\"Id\":{\"type\":\"uint32\",\"id\":3},\"num\":{\"type\":\"uint32\",\"id\":4}}},\"MsgGivingPropRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGetUserRoomInfo\":{\"fields\":{}},\"MsgGetUserRoomInfoRsp\":{\"fields\":{\"roomlist\":{\"rule\":\"repeated\",\"type\":\"UserRoomInfo\",\"id\":1}}},\"MsgChangeRoom\":{\"fields\":{}},\"MsgChangeRoomRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgPreOpration\":{\"fields\":{\"type\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2}}},\"MsgPreOprationRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"type\":{\"type\":\"uint32\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgBetEvchop\":{\"fields\":{\"roomId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"potIndex\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"act\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3}}},\"MsgBetEvchopRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgSetAutoBuyin\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"autoBuyin\":{\"rule\":\"required\",\"type\":\"GameAutoBuyIn\",\"id\":2}}},\"MsgSetAutoBuyinRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"autoBuyin\":{\"rule\":\"required\",\"type\":\"GameAutoBuyIn\",\"id\":3}}},\"MsgGetAutoBuyin\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgGetAutoBuyinRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"autoBuyin\":{\"type\":\"GameAutoBuyIn\",\"id\":3}}},\"MsgQuickJoinWaitList\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"clubid\":{\"type\":\"uint64\",\"id\":2},\"password\":{\"type\":\"uint32\",\"id\":3},\"clubName\":{\"type\":\"string\",\"id\":4}}},\"MsgQuickJoinWaitListRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgMultiTimesConfirm\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"multiTimes\":{\"type\":\"uint32\",\"id\":2},\"accept\":{\"type\":\"bool\",\"id\":3}}},\"MsgMultiTimesConfirmRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgMultiTimesDelaySelectTime\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgMultiTimesDelaySelectTimeRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgApplyInsuranceTime\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgApplyInsuranceTimeRsp\":{\"fields\":{\"result\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"time\":{\"type\":\"uint32\",\"id\":3}}},\"MsgNextActionPlayerCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"canPass\":{\"type\":\"bool\",\"id\":2},\"canRaise\":{\"type\":\"bool\",\"id\":3},\"followChip\":{\"type\":\"double\",\"id\":4},\"minAddChip\":{\"type\":\"double\",\"id\":5},\"maxBet\":{\"type\":\"double\",\"id\":6},\"minBet\":{\"type\":\"double\",\"id\":7},\"actionFinishTime\":{\"type\":\"uint64\",\"id\":8},\"canAllin\":{\"type\":\"bool\",\"id\":9},\"firstBet\":{\"type\":\"bool\",\"id\":10},\"round\":{\"type\":\"uint32\",\"id\":11},\"boughtLeftTimeTimes\":{\"type\":\"uint32\",\"id\":12},\"boughtLeftTimeNeedDiamonds\":{\"type\":\"uint32\",\"id\":13},\"roomId\":{\"type\":\"uint32\",\"id\":14},\"boughtLeftTimeNeedCash\":{\"type\":\"double\",\"id\":15}}},\"MsgBetAnteCast\":{\"fields\":{\"playerBets\":{\"rule\":\"repeated\",\"type\":\"PlayerBet\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgBetSBBBAnteCast\":{\"fields\":{\"playerBets\":{\"rule\":\"repeated\",\"type\":\"PlayerBet\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgBombAnteCast\":{\"fields\":{\"playerBets\":{\"rule\":\"repeated\",\"type\":\"PlayerBet\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgHandCardsCast\":{\"fields\":{\"playerids\":{\"rule\":\"repeated\",\"type\":\"uint64\",\"id\":1,\"options\":{\"packed\":false}},\"handcards\":{\"rule\":\"repeated\",\"type\":\"int32\",\"id\":2,\"options\":{\"packed\":false}},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgPlayerBetCast\":{\"fields\":{\"bet\":{\"type\":\"PlayerBet\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgSidePotsCast\":{\"fields\":{\"sidePot\":{\"rule\":\"repeated\",\"type\":\"double\",\"id\":1,\"options\":{\"packed\":false}},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgPotsCast\":{\"fields\":{\"pot\":{\"type\":\"double\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgPublicCardsCast\":{\"fields\":{\"publicCards\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":1,\"options\":{\"packed\":false}},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"publicCards_2\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":3,\"options\":{\"packed\":false}}}},\"MsgMultiTimesPublicCardsCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1},\"multiPublicCards\":{\"rule\":\"repeated\",\"type\":\"MultiTimePublicCards\",\"id\":2}}},\"MsgGameResultCast\":{\"fields\":{\"playerResults\":{\"rule\":\"repeated\",\"type\":\"PlayerResult\",\"id\":1},\"wait\":{\"type\":\"bool\",\"id\":2},\"waitTime\":{\"type\":\"uint32\",\"id\":3},\"roomId\":{\"type\":\"uint32\",\"id\":4}}},\"MsgGameRecord\":{\"fields\":{\"id\":{\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgGameRecordRsp\":{\"fields\":{\"id\":{\"type\":\"uint32\",\"id\":1},\"records\":{\"rule\":\"repeated\",\"type\":\"GameRecordInfo\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgTableStatusCast\":{\"fields\":{\"roomStatus\":{\"type\":\"uint32\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgTexasTableInfoCast\":{\"fields\":{\"info\":{\"type\":\"TableInfo\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgOpenHandCardCast\":{\"fields\":{\"handCard\":{\"rule\":\"repeated\",\"type\":\"ShowHandCardInfo\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgOpenHandCardBtnCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgShowHandCardCast\":{\"fields\":{\"handCard\":{\"type\":\"ShowHandCardInfo\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"tableIndex\":{\"type\":\"uint32\",\"id\":3}}},\"MsgRoomStatusCast\":{\"fields\":{\"clubid\":{\"type\":\"uint64\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":2},\"roomStatus\":{\"type\":\"uint32\",\"id\":3},\"gameType\":{\"type\":\"uint32\",\"id\":4}}},\"MsgGivingPropCast\":{\"fields\":{\"pic\":{\"type\":\"string\",\"id\":1},\"name\":{\"type\":\"string\",\"id\":2},\"price\":{\"type\":\"uint32\",\"id\":3},\"uid\":{\"type\":\"uint32\",\"id\":4},\"touid\":{\"type\":\"uint32\",\"id\":5},\"num\":{\"type\":\"uint32\",\"id\":6},\"nick\":{\"type\":\"string\",\"id\":7},\"Id\":{\"type\":\"uint32\",\"id\":8},\"roomId\":{\"type\":\"uint32\",\"id\":9}}},\"MsgFeedbackInfoCast\":{\"fields\":{\"unReadNum\":{\"type\":\"uint32\",\"id\":1},\"isHasService\":{\"type\":\"bool\",\"id\":2},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgTableWillFinish\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgTableCloseCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"mttid\":{\"type\":\"uint32\",\"id\":2}}},\"MsgMulitTableActionCast\":{\"fields\":{\"roomid\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"curActionPlayer\":{\"rule\":\"required\",\"type\":\"MsgNextActionPlayerCast\",\"id\":2},\"exchangeRate\":{\"type\":\"double\",\"id\":3}}},\"MsgPlayerActionDoneCast\":{\"fields\":{\"roomid\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1}}},\"MsgTableResultCast\":{\"fields\":{\"roomid\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"playerResult\":{\"rule\":\"required\",\"type\":\"PlayerResult\",\"id\":2},\"exchangeRate\":{\"type\":\"double\",\"id\":3}}},\"MsgEvchopCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"evchopInfo\":{\"rule\":\"repeated\",\"type\":\"PotsEvchopInfo\",\"id\":2},\"actionFinishTime\":{\"type\":\"uint64\",\"id\":3},\"playerCurrPot\":{\"type\":\"uint32\",\"id\":4},\"playerResumed\":{\"type\":\"bool\",\"id\":5}}},\"MsgChanceChangeCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"players\":{\"rule\":\"repeated\",\"type\":\"EvchopInfoPlayer\",\"id\":2}}},\"MsgPlayerJackpotCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint32\",\"id\":2},\"chips\":{\"type\":\"double\",\"id\":3}}},\"MsgOpenStraddleBtnCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":1}}},\"MsgRoomKoCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1}}},\"MsgKoValueChangeCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint32\",\"id\":2},\"koValue\":{\"type\":\"double\",\"id\":3}}},\"MsgNormalChanceStartCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"players\":{\"rule\":\"repeated\",\"type\":\"ChanceInfoPlayer\",\"id\":2}}},\"MsgNormalChanceChangeCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"players\":{\"rule\":\"repeated\",\"type\":\"ChanceInfoPlayer\",\"id\":2}}},\"MsgAutoBuyInFailCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"playerid\":{\"type\":\"uint32\",\"id\":2}}},\"MsgFastFoldStatusChangeCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"fastFold\":{\"type\":\"bool\",\"id\":2}}},\"MsgBombPotAntedCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"bombNum\":{\"type\":\"uint32\",\"id\":2}}},\"MsgMultiTimesCardThinkingCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"multiInfo\":{\"type\":\"MultiTimeInfo\",\"id\":2},\"multiStatus\":{\"type\":\"uint32\",\"id\":3}}},\"MsgMultiTimesCardStatusCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"multiStatus\":{\"type\":\"uint32\",\"id\":2},\"players\":{\"rule\":\"repeated\",\"type\":\"MultiTimePlayer\",\"id\":3}}},\"MsgMultiTimesThinkingTimeCast\":{\"fields\":{\"roomid\":{\"type\":\"uint32\",\"id\":1},\"endTime\":{\"type\":\"uint32\",\"id\":2},\"remainNum\":{\"type\":\"uint32\",\"id\":3}}},\"MsgInsuranceBuyingPlayerCast\":{\"fields\":{\"playerids\":{\"rule\":\"repeated\",\"type\":\"uint32\",\"id\":1,\"options\":{\"packed\":false}},\"roomId\":{\"type\":\"uint32\",\"id\":2}}},\"MsgPlayerBoughtInsuranceCast\":{\"fields\":{\"playerid\":{\"type\":\"uint64\",\"id\":1},\"potId\":{\"type\":\"uint32\",\"id\":2},\"insuranceCount\":{\"type\":\"uint32\",\"id\":3},\"returnCount\":{\"type\":\"uint32\",\"id\":4},\"roomId\":{\"type\":\"uint32\",\"id\":5}}},\"MsgPlayerCanBuyInsuranceListCast\":{\"fields\":{\"insuranceInfos\":{\"rule\":\"repeated\",\"type\":\"InsuranceInfo\",\"id\":1},\"time\":{\"type\":\"uint32\",\"id\":2},\"leftTime\":{\"type\":\"uint32\",\"id\":3},\"roomId\":{\"type\":\"uint32\",\"id\":4}}},\"MsgInsuranceResultCast\":{\"fields\":{\"list\":{\"rule\":\"repeated\",\"type\":\"InsuranceResult\",\"id\":1},\"roomId\":{\"type\":\"uint32\",\"id\":3}}},\"MsgOutsOverNoticeCast\":{\"fields\":{\"roomId\":{\"type\":\"uint32\",\"id\":3}}}}},\"trade\":{\"nested\":{\"TradePrice\":{\"fields\":{\"value\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":1},\"scale\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":2}}},\"TradeOrder\":{\"fields\":{\"id\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1},\"side\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"productId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":3},\"price\":{\"rule\":\"required\",\"type\":\"TradePrice\",\"id\":4},\"quantity\":{\"rule\":\"required\",\"type\":\"uint64\",\"id\":5},\"totalPrice\":{\"rule\":\"required\",\"type\":\"TradePrice\",\"id\":6},\"status\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":7},\"created\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":8},\"feeRate\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":9},\"feeNum\":{\"rule\":\"required\",\"type\":\"TradePrice\",\"id\":10},\"finished\":{\"type\":\"uint32\",\"id\":11}}},\"MsgTradeBook\":{\"fields\":{\"side\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":1},\"sort\":{\"type\":\"int32\",\"id\":2},\"fromId\":{\"type\":\"string\",\"id\":3}}},\"MsgTradeBookRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"side\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":2},\"sort\":{\"rule\":\"required\",\"type\":\"int32\",\"id\":3},\"fromId\":{\"type\":\"string\",\"id\":4},\"ordersList\":{\"rule\":\"repeated\",\"type\":\"TradeOrder\",\"id\":5}}},\"MsgTradeUserOrders\":{\"fields\":{}},\"MsgTradeUserOrdersRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"feeRate\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"ordersList\":{\"rule\":\"repeated\",\"type\":\"TradeOrder\",\"id\":3}}},\"MsgTradeCreateOrder\":{\"fields\":{\"productId\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"side\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":2},\"price\":{\"rule\":\"required\",\"type\":\"TradePrice\",\"id\":3},\"quantity\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":4}}},\"MsgTradeCreateOrderRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"order\":{\"type\":\"TradeOrder\",\"id\":2}}},\"MsgTradeCancelOrder\":{\"fields\":{\"orderId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgTradeCancelOrderRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"orderId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2}}},\"MsgTradeBuy\":{\"fields\":{\"orderId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgTradeBuyRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"orderId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"order\":{\"type\":\"TradeOrder\",\"id\":3}}},\"MsgTradeSell\":{\"fields\":{\"orderId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":1}}},\"MsgTradeSellRsp\":{\"fields\":{\"ec\":{\"rule\":\"required\",\"type\":\"uint32\",\"id\":1},\"orderId\":{\"rule\":\"required\",\"type\":\"string\",\"id\":2},\"order\":{\"type\":\"TradeOrder\",\"id\":3}}}}}}}";
        function signed_crc_table() {
          var c = 0,
            table = new Array(256);
          for (var n = 0; n != 256; ++n) {
            c = n;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            table[n] = c;
          }
          return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
        }
        var T0 = signed_crc_table();
        function crc32_str(str, seed) {
          var C = seed ^ -1;
          for (var i = 0, L = str.length, c = 0, d = 0; i < L;) {
            c = str.charCodeAt(i++);
            if (c < 0x80) {
              C = C >>> 8 ^ T0[(C ^ c) & 0xff];
            } else if (c < 0x800) {
              C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 0xff];
              C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xff];
            } else if (c >= 0xd800 && c < 0xe000) {
              c = (c & 1023) + 64;
              d = str.charCodeAt(i++) & 1023;
              C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 0xff];
              C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 0xff];
              C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xff];
              C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 0xff];
            } else {
              C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 0xff];
              C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 0xff];
              C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xff];
            }
          }
          return ~C;
        }
        var $root = $protobuf.Root.fromJSON(JSON.parse(str)).nested;
        var gameproto_map = {};
        for (var key1 in $root) {
          if ($root.hasOwnProperty(key1)) {
            var ns = $root[key1];
            for (var key2 in ns) {
              if (ns.hasOwnProperty(key2)) {
                if (ns[key2] && ns[key2] instanceof $protobuf.Type) {
                  var id = (crc32_str(key1 + "." + key2) & 0xFFFFFFFF) >>> 0;
                  ns[key2]['ProtocolID'] = id;
                  gameproto_map[id] = ns[key2];
                }
              }
            }
          }
        }
        $root['gameproto_map'] = gameproto_map;
        module.exports = $root;

        // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, function () {
        return {
          'protobufjs/light.js': __cjsMetaURL$1
        };
      });
    }
  };
});

System.register("chunks:///_virtual/gameproto.mjs_cjs=&original=.js", ['./gameproto.js', './cjs-loader.mjs'], function (exports, module) {
  var __cjsMetaURL, loader;
  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      var _setter = {};
      _setter.__cjsMetaURL = module.__cjsMetaURL;
      _setter.default = module.default;
      exports(_setter);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './gameproto.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./gameproto.js', module.meta.url);
      }
      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/GameRoomPageItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_GameRoomPageItem.ts', './HallProxy.ts', './GameConst.ts', './GameDecorators.ts', './PageEvent.ts', './CocosDevKit.ts', './HallData.ts', './UITools.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Event, UI_GameRoomPageItem, HallProxy, GameConst, CustomFguiClass, EPageEvent, HallData, UITools, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      UI_GameRoomPageItem = module.default;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, null, function (module) {
      HallData = module.HallData;
    }, function (module) {
      UITools = module.UITools;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "1058dXPQzxN7roa9qSZxUDx", "GameRoomPageItem", undefined);
      var GameRoomPageItem = exports('GameRoomPageItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_GameRoomPageItem) {
        _inheritsLoose(GameRoomPageItem, _UI_GameRoomPageItem);
        function GameRoomPageItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_GameRoomPageItem.call.apply(_UI_GameRoomPageItem, [this].concat(args)) || this;
          _this._hallInfo = [];
          _this._pagePid = 1;
          return _this;
        }
        var _proto = GameRoomPageItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_GameRoomPageItem.prototype.onConstruct.call(this);
          this.name = 'GameRoomPageItem';
          this.m_list.setVirtual();
          UITools.optimizationScrollPane(this.m_list.scrollPane);
          this.m_list.itemRenderer = this.roomItemRender.bind(this);
          this.m_list.itemProvider = this.roomItemProvider.bind(this);
          this.m_list.on(Event.CLICK_ITEM, this.onRoomItemClick, this);
          this.m_list.on(Event.PULL_DOWN_RELEASE, this.onPullDownToRefresh, this);
        };
        _proto.roomItemProvider = function roomItemProvider(index) {
          var data = this._hallInfo[index];
          if (data.roomType == GameConst.ERoomType.normal) {
            return 'ui://Lobby/RoomItemNLH';
          } else if (data.roomType == GameConst.ERoomType.mtt) {
            return 'ui://Lobby/RoomItemMTT';
          }
        };
        _proto.roomItemRender = function roomItemRender(index, item) {
          var msg = this._hallInfo[index];
          if (msg.roomType == GameConst.ERoomType.normal) {
            var itemNode = item;
            itemNode.setItem(this._hallInfo[index], index, this.enterMTTRoom.bind(this), this.refreshListOrder.bind(this));
          } else if (msg.roomType == GameConst.ERoomType.mtt) {
            var _itemNode = item;
            _itemNode.setItem(this._hallInfo[index], index, this.enterMTTRoom.bind(this), this.refreshListOrder.bind(this));
          }
        };
        _proto.onPullDownToRefresh = function onPullDownToRefresh() {
          //获取对应页的房间信息
          var pageid = GameConst.HALL_ROOM_INFO[this._pagePid].reqId;
          HallProxy.inst.getHallInfo(pageid);
        };
        _proto.setItem = function setItem(ppid, data) {
          this._pagePid = ppid;
          this._hallInfo = data.roomList;
          this.m_list.numItems = this._hallInfo.length;
          var noneNode = this.m_NodeNone;
          if (this._hallInfo.length <= 0) {
            noneNode.m_title.text = this._pagePid == 0 ? 'NO_GAME_ON_TABLE' : 'TXT_875';
          }
          this.m_NodeNone.visible = this._hallInfo.length <= 0;
        };
        _proto.onRoomItemClick = function onRoomItemClick(item) {
          this.emitPageEvent(EPageEvent.ROOM_LIST_ITEM_CLICK, item.itemData, this._pagePid);
        }

        //进入mtt比赛场
        ;

        _proto.enterMTTRoom = function enterMTTRoom(itemInfo) {
          Log.debug.log('进入mtt比赛场.........', itemInfo);
        };
        _proto.refreshListOrder = function refreshListOrder(roomInfo) {
          var pageid = GameConst.HALL_ROOM_INFO[this._pagePid].reqId;
          if (pageid == GameConst.EHALL_PAGE_TYPE.HOT || pageid == GameConst.EHALL_PAGE_TYPE.MTT) {
            var data = HallData.inst.getHallInfoByPid(pageid);
            this.setItem(this._pagePid, data);
          }
        };
        return GameRoomPageItem;
      }(UI_GameRoomPageItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameRoomProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './CocosDevKit.ts', './RoleData.ts', './LanguageManage.ts', './gameproto.js', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, MarkForNetEventListener, GameNetProxyBase, RoleData, LanguageManager, _cjsExports, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, null, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class;
      cclegacy._RF.push({}, "a2bb4kxB/xKNpt6dQRSoQoW", "GameRoomProxy", undefined);
      var GameRoomProxy = exports('GameRoomProxy', (_dec = MarkForNetEventListener(_cjsExports.rooms.MsgRabbitActionCast.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.rooms.MsgAddPlayerCast.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.rooms.MsgRemovePlayerCast.ProtocolID), _dec4 = MarkForNetEventListener(_cjsExports.rooms.MsgSitDownCast.ProtocolID), _dec5 = MarkForNetEventListener(_cjsExports.rooms.MsgStandUpCast.ProtocolID), _dec6 = MarkForNetEventListener(_cjsExports.rooms.MsgApplyAddChipSuccCast.ProtocolID), _dec7 = MarkForNetEventListener(_cjsExports.rooms.MsgPlayerAfkStateCast.ProtocolID), _dec8 = MarkForNetEventListener(_cjsExports.rooms.MsgActionRemainTimeCast.ProtocolID), _dec9 = MarkForNetEventListener(_cjsExports.rooms.MsgNotifyPlayerAddChipCast.ProtocolID), _dec10 = MarkForNetEventListener(_cjsExports.rooms.MsgActionTimeProtectCast.ProtocolID), (_class = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(GameRoomProxy, _GameNetProxyBase);
        function GameRoomProxy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameNetProxyBase.call.apply(_GameNetProxyBase, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          /**
           * 游戏逻辑驱动器，网络消息触发的游戏逻辑 push 进来对游戏逻辑进行驱动，游戏逻辑在执行时可以对驱动器进行暂停和恢复
           */
          _this.gameLogicDrive = void 0;
          return _this;
        }
        var _proto = GameRoomProxy.prototype;
        _proto.init = function init(shareSpace, gameLogicDrive) {
          this.shareSpace = shareSpace;
          this.gameLogicDrive = gameLogicDrive;
          _GameNetProxyBase.prototype.init.call(this);
        };
        _proto.reset = function reset() {
          // do something
        };
        _proto.destroy = function destroy() {
          this.removeEventListener();
        }

        /**
         * 坐下
         * @param chairId
         */;
        _proto.sitdown = function sitdown(chairId) {
          var msg = _cjsExports.rooms.MsgSitDown.create();
          msg.chairId = chairId;
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgSitDown.ProtocolID, _cjsExports.rooms.MsgSitDown.encode(msg).finish(), this.onMsgSitDownRsp.bind(this));
        };
        _proto.onMsgSitDownRsp = function onMsgSitDownRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgSitDownRsp);
          Log.game.log('GameRoomProxy', 'onMsgSitDownRsp', msg);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.shareSpace.texasGameData.texasClientState.autoSitdown = true;
            if (!netdata.isRetSuccess()) {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 起立
         */;
        _proto.standup = function standup() {
          var msg = _cjsExports.rooms.MsgStandUp.create();
          msg.forceLeave = 0;
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgStandUp.ProtocolID, _cjsExports.rooms.MsgStandUp.encode(msg).finish(), this.onMsgStandUpRsp.bind(this));
        };
        _proto.onMsgStandUpRsp = function onMsgStandUpRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgStandUpRsp);
          Log.game.log('GameRoomProxy', 'onMsgStandUp', msg);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (!netdata.isRetSuccess()) {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 托管
         * @param leave
         */;
        _proto.setAFK = function setAFK(leave) {
          if (leave === void 0) {
            leave = false;
          }
          var msg = _cjsExports.rooms.MsgSetAFK.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.noLeave = !leave;
          this.send(_cjsExports.rooms.MsgSetAFK.ProtocolID, _cjsExports.rooms.MsgSetAFK.encode(msg).finish(), this.onMsgSetAFKRsp.bind(this));
        };
        _proto.onMsgSetAFKRsp = function onMsgSetAFKRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgSetAFKRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (!netdata.isRetSuccess()) {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 取消托管
         */;
        _proto.cancelAFK = function cancelAFK() {
          var msg = _cjsExports.rooms.MsgCancelAFK.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgCancelAFK.ProtocolID, _cjsExports.rooms.MsgCancelAFK.encode(msg).finish(), this.onMsgCancelAFKRsp.bind(this));
        };
        _proto.onMsgCancelAFKRsp = function onMsgCancelAFKRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgCancelAFKRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (!netdata.isRetSuccess()) {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 强交大盲注（即刻入局）
         */;
        _proto.postBigBlind = function postBigBlind() {
          var msg = _cjsExports.rooms.MsgJoinGame.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgJoinGame.ProtocolID, _cjsExports.rooms.MsgJoinGame.encode(msg).finish(), this.onMsgJoinGameRsp.bind(this));
        };
        _proto.onMsgJoinGameRsp = function onMsgJoinGameRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgJoinGameRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              this.gameLogicDrive.push(this.shareSpace.onMsgJoinGameRsp.bind(this.shareSpace, msg));
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }
        /**
         * 获取房间屏蔽玩家消息
         */;
        _proto.setChatBanPlayerOpt = function setChatBanPlayerOpt(playerid, ban, onRsp) {
          var msg = _cjsExports.rooms.MsgChatBanPlayerOpt.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.playerid = playerid;
          msg.type = ban ? 1 : 2;
          this.send(_cjsExports.rooms.MsgChatBanPlayerOpt.ProtocolID, _cjsExports.rooms.MsgChatBanPlayerOpt.encode(msg).finish(), this.onMsgChatBanPlayerOptRsp.bind(this, onRsp));
        };
        _proto.onMsgChatBanPlayerOptRsp = function onMsgChatBanPlayerOptRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgChatBanPlayerOptRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              if (msg) {
                callback(msg);
              }
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }
        /**
         * 获取房间players信息
         */;
        _proto.getRoomPlayerList = function getRoomPlayerList(onRsp) {
          var msg = _cjsExports.rooms.MsgGetRoomPlayerList.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgGetRoomPlayerList.ProtocolID, _cjsExports.rooms.MsgGetRoomPlayerList.encode(msg).finish(), this.onMsgGetRoomPlayerListRsp.bind(this, onRsp));
        };
        _proto.onMsgGetRoomPlayerListRsp = function onMsgGetRoomPlayerListRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgGetRoomPlayerListRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              if (msg) {
                callback(msg);
              }
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }
        /**
         * 获取用户信息
         */;
        _proto.getUserInfo = function getUserInfo(playerId, onRsp) {
          var msg = _cjsExports.rooms.MsgGetPlayerClubInfo.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.playerid = playerId;
          this.send(_cjsExports.rooms.MsgGetPlayerClubInfo.ProtocolID, _cjsExports.rooms.MsgGetPlayerClubInfo.encode(msg).finish(), this.onMsgUserInfoRsp.bind(this, onRsp));
        };
        _proto.onMsgUserInfoRsp = function onMsgUserInfoRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgGetPlayerClubInfoRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              if (msg.playerClubData) {
                callback(msg.playerClubData);
              }
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 发消息
         */;
        _proto.sendMsg = function sendMsg(data, onRsp) {
          var msg = _cjsExports.rooms.MsgSendChatMsg.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.msg = data;
          this.send(_cjsExports.rooms.MsgSendChatMsg.ProtocolID, _cjsExports.rooms.MsgSendChatMsg.encode(msg).finish(), this.onMsgSendChatMsgRsp.bind(this, onRsp));
        };
        _proto.onMsgSendChatMsgRsp = function onMsgSendChatMsgRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgSendChatMsgRsp);
          if (msg && msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              callback(msg);
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 补充筹码
         * @param chipNum
         */;
        _proto.addChip = function addChip(chipNum) {
          var msg = _cjsExports.rooms.MsgApplyAddChip.create();
          msg.chipNum = chipNum;
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgApplyAddChip.ProtocolID, _cjsExports.rooms.MsgApplyAddChip.encode(msg).finish(), this.onMsgApplyAddChipRsp.bind(this));
        };
        _proto.onMsgApplyAddChipRsp = function onMsgApplyAddChipRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgApplyAddChipRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              if (msg.isWaitAdd) {
                this.shareSpace.texasGamePage.grootInst.showCenterTip(LanguageManager.get('TXT_541'));
              }
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 获取普通牌桌積分信息
         */;
        _proto.getGameStatisticsInfo = function getGameStatisticsInfo(onRsp) {
          var msg = _cjsExports.rooms.MsgGetGameStatisticsInfo.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgGetGameStatisticsInfo.ProtocolID, _cjsExports.rooms.MsgGetGameStatisticsInfo.encode(msg).finish(), this.onMsgGetGameStatisticsInfoRsp.bind(this, onRsp));
        };
        _proto.onMsgGetGameStatisticsInfoRsp = function onMsgGetGameStatisticsInfoRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgGetGameStatisticsInfoRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              callback(msg);
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 收藏牌局
         */;
        _proto.collectRoundInfo = function collectRoundInfo(gameNum, type, onRsp) {
          var msg = _cjsExports.rooms.MsgCollectGameRound.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.type = type;
          msg.index = gameNum;
          this.send(_cjsExports.rooms.MsgCollectGameRound.ProtocolID, _cjsExports.rooms.MsgCollectGameRound.encode(msg).finish(), this.onMsgCollectGameRoundRsp.bind(this, onRsp));
        };
        _proto.onMsgCollectGameRoundRsp = function onMsgCollectGameRoundRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgCollectGameRoundRsp);
          if (msg && msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              callback(msg);
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 获取牌局历史列表
         */;
        _proto.getLastRoundListInfo = function getLastRoundListInfo(onRsp) {
          var msg = _cjsExports.rooms.MsgGetRoundInfo.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgGetGameLastRoundListInfo.ProtocolID, _cjsExports.rooms.MsgGetGameLastRoundListInfo.encode(msg).finish(), this.onMsgGetRoundListInfoRsp.bind(this, onRsp));
        };
        _proto.onMsgGetRoundListInfoRsp = function onMsgGetRoundListInfoRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgGetGameLastRoundListInfoRsp);
          if (msg && msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              callback(msg);
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 获取牌房间聊天记录
         */;
        _proto.getChatMsgList = function getChatMsgList(onRsp) {
          if (this.shareSpace.texasGameData.roomId == undefined || !this.shareSpace.texasGameData.roomId) {
            onRsp(null);
            return;
          }
          var msg = _cjsExports.rooms.MsgGetChatMsgList.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgGetChatMsgList.ProtocolID, _cjsExports.rooms.MsgGetChatMsgList.encode(msg).finish(), this.onMsgGetChatMsgListRsp.bind(this, onRsp));
        };
        _proto.onMsgGetChatMsgListRsp = function onMsgGetChatMsgListRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgGetChatMsgListRsp);
          if (msg && msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              callback(msg);
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 获取牌局历史信息
         */;
        _proto.getRoundInfo = function getRoundInfo(gameNum, filterSelf, onRsp) {
          if (this.shareSpace.texasGameData.roomId == undefined || !this.shareSpace.texasGameData.roomId) {
            onRsp(null);
            return;
          }
          var msg = _cjsExports.rooms.MsgGetRoundInfo.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.gameNum = gameNum;
          msg.filterSelf = filterSelf;
          this.send(_cjsExports.rooms.MsgGetRoundInfo.ProtocolID, _cjsExports.rooms.MsgGetRoundInfo.encode(msg).finish(), this.onMsgGetRoundInfoRsp.bind(this, onRsp));
        };
        _proto.onMsgGetRoundInfoRsp = function onMsgGetRoundInfoRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgGetRoundInfoRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              callback(msg);
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 时间银行
         */;
        _proto.applyDelayActionTime = function applyDelayActionTime() {
          var msg = _cjsExports.rooms.MsgApplyDelayActionTime.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgApplyDelayActionTime.ProtocolID, _cjsExports.rooms.MsgApplyDelayActionTime.encode(msg).finish(), this.onMsgApplyDelayActionTimeRsp.bind(this));
        };
        _proto.onMsgApplyDelayActionTimeRsp = function onMsgApplyDelayActionTimeRsp(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgApplyDelayActionTimeRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (!netdata.isRetSuccess()) {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 使用兔子相机
         */;
        _proto.getRabbitAction = function getRabbitAction() {
          var msg = _cjsExports.rooms.MsgGetRabbitAction.create();
          msg.actType = 2;
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgGetRabbitAction.ProtocolID, _cjsExports.rooms.MsgGetRabbitAction.encode(msg).finish(), this.onMsgGetRabbitActionRsp.bind(this));
        };
        _proto.onMsgGetRabbitActionRsp = function onMsgGetRabbitActionRsp(netdata) {
          if (!netdata.isRetSuccess()) {
            this.shareSpace.texasGamePage.onMsgRetFail(netdata);
          }
        }
        /**
         * 兔子相机使用广播
         * @param netdata
         */;
        _proto.onMsgRabbitActionCast = function onMsgRabbitActionCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgRabbitActionCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgRabbitActionCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 玩家进入广播
         * @param netdata
         */;
        _proto.onMsgAddPlayerCast = function onMsgAddPlayerCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgAddPlayerCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId && msg.tableIndex == this.shareSpace.texasGameData.tableIndex) {
            this.gameLogicDrive.push(this.shareSpace.playerEnter.bind(this.shareSpace, msg));
          }
        }

        /**
         * 玩家离开房间广播
         * @param netdata
         */;
        _proto.onMsgRemovePlayerCast = function onMsgRemovePlayerCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgRemovePlayerCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId && msg.tableIndex == this.shareSpace.texasGameData.tableIndex) {
            this.gameLogicDrive.push(this.shareSpace.playerLeave.bind(this.shareSpace, msg));
          }
        }

        /**
         * 玩家坐下广播
         * @param netdata
         */;
        _proto.onMsgSitDownCast = function onMsgSitDownCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgSitDownCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId && msg.tableIndex == this.shareSpace.texasGameData.tableIndex) {
            if (msg.playerid == RoleData.inst.playerID) {
              this.shareSpace.texasGamePage.popupLayer.chatLayer.setChatEnable();
            }
            this.gameLogicDrive.push(this.shareSpace.playerSitdown.bind(this.shareSpace, msg));
          }
        }

        /**
         * 玩家站起广播
         * @param netdata
         */;
        _proto.onMsgStandUpCast = function onMsgStandUpCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgStandUpCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId && msg.tableIndex == this.shareSpace.texasGameData.tableIndex) {
            if (msg.playerid == RoleData.inst.playerID) {
              this.shareSpace.texasGamePage.popupLayer.chatLayer.setChatEnable();
            }
            this.gameLogicDrive.push(this.shareSpace.playerStandup.bind(this.shareSpace, msg));
          }
        }

        /**
         * 玩家补充筹码广播
         * @param netdata
         */;
        _proto.onMsgApplyAddChipSuccCast = function onMsgApplyAddChipSuccCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgApplyAddChipSuccCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onPlayerAddChip.bind(this.shareSpace, msg));
          }
        }

        /**
         * 玩家托管广播
         * @param netdata
         */;
        _proto.onMsgPlayerAfkStateCast = function onMsgPlayerAfkStateCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgPlayerAfkStateCast);
          if (!this.shareSpace.texasGameData.tableInfo) {
            Log.game.error('GameRoomProxy', 'onMsgPlayerAfkStateCast', 'tableInfo 不存在', 'roomID:', msg.roomId, 'playerID:', msg.playerid);
            return;
          }
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.playerAfkState.bind(this.shareSpace, msg));
          }
        }

        /**
         * 思考时间结束时间变化广播
         * @param netdata
         */;
        _proto.onMsgActionRemainTimeCast = function onMsgActionRemainTimeCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgActionRemainTimeCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgActionRemainTimeCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 通知客户端弹出补充筹码弹窗
         * @param netdata
         */;
        _proto.onMsgNotifyPlayerAddChipCast = function onMsgNotifyPlayerAddChipCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgNotifyPlayerAddChipCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.shareSpace.onMsgNotifyPlayerAddChipCast(msg);
          }
        }

        /**
         * 断线保护增加思考时间
         * @param netdata
         */;
        _proto.onMsgActionTimeProtectCast = function onMsgActionTimeProtectCast(netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgActionTimeProtectCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgActionTimeProtectCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 获取比赛房间旁观玩家信息
         */;
        _proto.getOnlookPlayer = function getOnlookPlayer(onRsp) {
          var msg = _cjsExports.rooms.MsgGetOnlookPlayer.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.rooms.MsgGetOnlookPlayer.ProtocolID, _cjsExports.rooms.MsgGetOnlookPlayer.encode(msg).finish(), this.onMsgGetOnlookPlayerRsp.bind(this, onRsp));
        };
        _proto.onMsgGetOnlookPlayerRsp = function onMsgGetOnlookPlayerRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.rooms.MsgGetOnlookPlayerRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              callback(msg);
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        };
        return GameRoomProxy;
      }(GameNetProxyBase), (_applyDecoratedDescriptor(_class.prototype, "onMsgRabbitActionCast", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgRabbitActionCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgAddPlayerCast", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgAddPlayerCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgRemovePlayerCast", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgRemovePlayerCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgSitDownCast", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgSitDownCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgStandUpCast", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgStandUpCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgApplyAddChipSuccCast", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgApplyAddChipSuccCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgPlayerAfkStateCast", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgPlayerAfkStateCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgActionRemainTimeCast", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgActionRemainTimeCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgNotifyPlayerAddChipCast", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgNotifyPlayerAddChipCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgActionTimeProtectCast", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgActionTimeProtectCast"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameStorage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './LocalStorageTool.ts'], function (exports) {
  var _createClass, cclegacy, LocalStorageTool;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4a977pJkhNOSZ7SlWCfDQwn", "GameStorage", undefined);

      /**
       * 本地持久化存储的用户登录信息
       */

      var GameStorage = exports('GameStorage', /*#__PURE__*/function () {
        function GameStorage() {}
        _createClass(GameStorage, null, [{
          key: "showFPS",
          get:
          /**
           * 是否展示 FPS 调试信息
           */
          function get() {
            if (this._showFPS == undefined) {
              var value = LocalStorageTool.getString('showFPS');
              if (value != undefined && value != null) {
                this._showFPS = value == '1';
                return this._showFPS;
              }
              this._showFPS = true;
              LocalStorageTool.setString('showFPS', this._showFPS ? '1' : '0');
            }
            return this._showFPS;
          },
          set: function set(v) {
            if (this._showFPS != v) {
              this._showFPS = v;
              LocalStorageTool.setString('showFPS', this._showFPS ? '1' : '0');
            }
          }
        }, {
          key: "lastVerificationCodeSendTime",
          get:
          /**
           * 最近一次验证码发送的时间
           */
          function get() {
            if (this._lastVerificationCodeSendTime == undefined) {
              var value = LocalStorageTool.getString('LastSignupVerificationCodeSendTime');
              if (value != undefined && value != null) {
                this._lastVerificationCodeSendTime = parseInt(value);
                if (isNaN(this._lastVerificationCodeSendTime)) {
                  return 0;
                } else {
                  return this._lastVerificationCodeSendTime;
                }
              }
            }
            return this._lastVerificationCodeSendTime;
          },
          set: function set(v) {
            if (v == undefined || v == null || !isNaN(v)) {
              this._lastVerificationCodeSendTime = undefined;
              LocalStorageTool.removeItem('LastSignupVerificationCodeSendTime');
              return;
            }
            this._lastVerificationCodeSendTime = v;
            LocalStorageTool.setString('LastSignupVerificationCodeSendTime', v.toString());
          }
        }, {
          key: "loginInfo",
          get:
          /**
           * 本地持久化存储的用户登录信息
           */
          function get() {
            if (!this._loginInfo) {
              this._loginInfo = LocalStorageTool.getJsonWithAES('loginInfo');
            }
            return this._loginInfo;
          },
          set: function set(info) {
            if (info == undefined || info == null) {
              this._loginInfo = undefined;
              LocalStorageTool.getJsonWithAES('loginInfo');
              return;
            }
            this._loginInfo = info;
            LocalStorageTool.setJsonWithAES('loginInfo', info);
          }
        }, {
          key: "lastUpdateVersion",
          get: function get() {
            if (this._lastUpdateVersion == undefined || this._lastUpdateVersion == null) {
              this._lastUpdateVersion = LocalStorageTool.getJsonWithAES('LastUpdateVersion');
            }
            return this._lastUpdateVersion;
          },
          set: function set(v) {
            if (v == undefined || v == null) {
              this._lastUpdateVersion = undefined;
              LocalStorageTool.removeItem('LastUpdateVersion');
              return;
            }
            this._lastUpdateVersion = v;
            LocalStorageTool.setJsonWithAES('LastUpdateVersion', v);
          }

          //是否点击过tgp
        }, {
          key: "fristTgpTouch",
          get: function get() {
            if (this._bFristTgpTouched == undefined || this._bFristTgpTouched == null) {
              this._bFristTgpTouched = LocalStorageTool.getString('localstroage_FristTgpTouch');
              this._bFristTgpTouched = this._bFristTgpTouched == '1' ? '1' : '0';
            }
            return this._bFristTgpTouched == '1';
          },
          set: function set(v) {
            if (v == undefined || v == null) {
              this._bFristTgpTouched = undefined;
              LocalStorageTool.removeItem('localstroage_FristTgpTouch');
              return;
            }
            var ret = v ? '1' : '0';
            if (this._bFristTgpTouched == ret) return;
            this._bFristTgpTouched = ret;
            LocalStorageTool.setString('localstroage_FristTgpTouch', this._bFristTgpTouched);
          }
        }]);
        return GameStorage;
      }());
      GameStorage._showFPS = void 0;
      GameStorage._lastVerificationCodeSendTime = void 0;
      GameStorage._loginInfo = void 0;
      GameStorage._lastUpdateVersion = void 0;
      GameStorage._bFristTgpTouched = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameTexasProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameNetProxyBase.ts', './CocosDevKit.ts', './GameDecorators.ts', './GameConst.ts', './gameproto.js', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, GameNetProxyBase, MarkForNetEventListener, GameConst, _cjsExports, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class;
      cclegacy._RF.push({}, "0199afbnYlIxJTw5+rSpctC", "GameTexasProxy", undefined);
      var GameTexasProxy = exports('GameTexasProxy', (_dec = MarkForNetEventListener(_cjsExports.texas.MsgSidePotsCast.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.texas.MsgBetAnteCast.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.texas.MsgHandCardsCast.ProtocolID), _dec4 = MarkForNetEventListener(_cjsExports.texas.MsgTexasTableInfoCast.ProtocolID), _dec5 = MarkForNetEventListener(_cjsExports.texas.MsgBetSBBBAnteCast.ProtocolID), _dec6 = MarkForNetEventListener(_cjsExports.texas.MsgNextActionPlayerCast.ProtocolID), _dec7 = MarkForNetEventListener(_cjsExports.texas.MsgPlayerBetCast.ProtocolID), _dec8 = MarkForNetEventListener(_cjsExports.texas.MsgPublicCardsCast.ProtocolID), _dec9 = MarkForNetEventListener(_cjsExports.texas.MsgOpenHandCardCast.ProtocolID), _dec10 = MarkForNetEventListener(_cjsExports.texas.MsgShowHandCardCast.ProtocolID), _dec11 = MarkForNetEventListener(_cjsExports.texas.MsgGameResultCast.ProtocolID), _dec12 = MarkForNetEventListener(_cjsExports.texas.MsgTableCloseCast.ProtocolID), (_class = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(GameTexasProxy, _GameNetProxyBase);
        function GameTexasProxy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameNetProxyBase.call.apply(_GameNetProxyBase, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          /**
           * 游戏逻辑驱动器，网络消息触发的游戏逻辑 push 进来对游戏逻辑进行驱动，游戏逻辑在执行时可以对驱动器进行暂停和恢复
           */
          _this.gameLogicDrive = void 0;
          return _this;
        }
        var _proto = GameTexasProxy.prototype;
        _proto.init = function init(shareSpace, gameLogicDrive) {
          this.shareSpace = shareSpace;
          this.gameLogicDrive = gameLogicDrive;
          _GameNetProxyBase.prototype.init.call(this);
        };
        _proto.reset = function reset() {
          // do something
        };
        _proto.destroy = function destroy() {
          this.removeEventListener();
        }

        /**
         * 进入房间
         * @param switchOutPre 是否切出当前房间
         */;
        _proto.enterRoom = function enterRoom(switchOutPre) {
          var msg = _cjsExports.texas.MsgEnterRoom.create();
          if (this.shareSpace.texasGameData.isClubRoom) {
            msg.clubid = this.shareSpace.texasGameData.clubID;
          }
          msg.roomId = this.shareSpace.texasGameData.roomId;
          if (this.shareSpace.texasGameData.isMatch) {
            msg.mttid = this.shareSpace.texasGameData.mttInfo.mttid;
            if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.gold) {
              msg.enterType = 2;
            } else if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.cash) {
              msg.enterType = 2;
            }
          } else {
            if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.gold) {
              msg.enterType = 3;
            } else if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.cash) {
              msg.enterType = 4;
            }
          }
          msg.switchOutPre = switchOutPre;
          this.send(_cjsExports.texas.MsgEnterRoom.ProtocolID, _cjsExports.texas.MsgEnterRoom.encode(msg).finish(), this.onMsgEnterRoomRsp.bind(this));
        };
        _proto.onMsgEnterRoomRsp = function onMsgEnterRoomRsp(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgEnterRoomRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onRoomEnter.bind(this.shareSpace, netdata));
          }
        };
        _proto.leaveRoom = function leaveRoom(onRsp) {
          var msg = _cjsExports.texas.MsgLeaveRoom.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.enterType = this.shareSpace.texasGameData.isMatch ? 2 : 1;
          this.send(_cjsExports.texas.MsgLeaveRoom.ProtocolID, _cjsExports.texas.MsgLeaveRoom.encode(msg).finish(), this.onMsgLeaveRoomRsp.bind(this, onRsp));
        };
        _proto.onMsgLeaveRoomRsp = function onMsgLeaveRoomRsp(callback, netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgLeaveRoomRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              Log.game.log('GameTexasProxy', 'onMsgLeaveRoomRsp');
              this.shareSpace.reset();
              callback();
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 玩家预操作
         * @param preOprationType
         */;
        _proto.playerPreOpration = function playerPreOpration(preOprationType) {
          var msg = _cjsExports.texas.MsgPreOpration.create();
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.type = preOprationType;
          this.send(_cjsExports.texas.MsgPreOpration.ProtocolID, _cjsExports.texas.MsgPreOpration.encode(msg).finish(), this.onMsgPreOprationRsp.bind(this));
        };
        _proto.onMsgPreOprationRsp = function onMsgPreOprationRsp(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgPreOprationRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              Log.game.log('GameTexasProxy', 'onMsgPreOprationRsp', msg);
              this.gameLogicDrive.push(this.shareSpace.onMsgPreOprationRsp.bind(this.shareSpace, msg));
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 玩家下注
         * @param actType
         * @param value
         */;
        _proto.playerAction = function playerAction(actType, value) {
          if (value === void 0) {
            value = 0;
          }
          var msg = _cjsExports.texas.MsgPlayerAction.create();
          msg.actType = actType;
          msg.roomId = this.shareSpace.texasGameData.roomId;
          msg.round = this.shareSpace.texasGameData.tableInfo.curActionPlayer.round;
          msg.value = value;
          this.send(_cjsExports.texas.MsgPlayerAction.ProtocolID, _cjsExports.texas.MsgPlayerAction.encode(msg).finish(), this.onMsgPlayerActionRsp.bind(this));
        };
        _proto.onMsgPlayerActionRsp = function onMsgPlayerActionRsp(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgPlayerActionRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              Log.game.log('GameTexasProxy', 'MsgPlayerActionRsp', msg);
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 主池边池变化广播
         * @param netdata
         */;
        _proto.onMsgSidePotsCast = function onMsgSidePotsCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgSidePotsCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgSidePotsCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 亮牌
         * @param cardIndex
         * @param show
         */;
        _proto.openHandCard = function openHandCard(cardIndex, show) {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (cardIndex >= tableInfo.handcards.length) return;
          // let card = tableInfo.handcards[cardIndex];
          var msg = _cjsExports.texas.MsgOpenHandCard.create();
          msg.card = cardIndex + 1;
          msg.close = show ? 0 : 1;
          msg.roomId = this.shareSpace.texasGameData.roomId;
          this.send(_cjsExports.texas.MsgOpenHandCard.ProtocolID, _cjsExports.texas.MsgOpenHandCard.encode(msg).finish(), this.onMsgOpenHandCardRsp.bind(this, cardIndex, show));
        };
        _proto.onMsgOpenHandCardRsp = function onMsgOpenHandCardRsp(cardIndex, show, netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgOpenHandCardRsp);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            if (netdata.isRetSuccess()) {
              this.gameLogicDrive.push(this.shareSpace.onMsgOpenHandCardRsp.bind(this.shareSpace, cardIndex, show));
            } else {
              this.shareSpace.texasGamePage.onMsgRetFail(netdata);
            }
          }
        }

        /**
         * 下前注广播
         * @param netdata
         */;
        _proto.onMsgBetAnteCast = function onMsgBetAnteCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgBetAnteCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            for (var i = 0; i < msg.playerBets.length; i++) {
              var betInfo = msg.playerBets[i];
              this.gameLogicDrive.push(this.shareSpace.onPlayerAnte.bind(this.shareSpace, betInfo));
            }
          }
        }

        /**
         * 发手牌广播
         * @param netdata
         */;
        _proto.onMsgHandCardsCast = function onMsgHandCardsCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgHandCardsCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgHandCardsCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 桌子信息广播
         * @param netdata
         */;
        _proto.onMsgTexasTableInfoCast = function onMsgTexasTableInfoCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgTexasTableInfoCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgTexasTableInfoCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 下盲注广播
         * @param netdata
         */;
        _proto.onMsgBetSBBBAnteCast = function onMsgBetSBBBAnteCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgBetSBBBAnteCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            for (var i = 0; i < msg.playerBets.length; i++) {
              var betInfo = msg.playerBets[i];
              this.gameLogicDrive.push(this.shareSpace.onPlayerBlind.bind(this.shareSpace, betInfo));
            }
          }
        }

        /**
         * 指示下一个行动的玩家广播
         * @param netdata
         */;
        _proto.onMsgNextActionPlayerCast = function onMsgNextActionPlayerCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgNextActionPlayerCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgNextActionPlayerCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 玩家操作广播
         * @param netdata
         */;
        _proto.onMsgPlayerBetCast = function onMsgPlayerBetCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgPlayerBetCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onPlayerBet.bind(this.shareSpace, msg.bet));
          }
        }

        /**
         * 发公共牌广播
         * @param netdata
         */;
        _proto.onMsgPublicCardsCast = function onMsgPublicCardsCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgPublicCardsCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgPublicCardsCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 摊牌广播
         * @param netdata
         */;
        _proto.onMsgOpenHandCardCast = function onMsgOpenHandCardCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgOpenHandCardCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgOpenHandCardCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 亮牌广播
         * @param netdata
         */;
        _proto.onMsgShowHandCardCast = function onMsgShowHandCardCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgShowHandCardCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgShowHandCardCast.bind(this.shareSpace, msg));
          }
        }

        /**
         * 结算广播
         * @param netdata
         */;
        _proto.onMsgGameResultCast = function onMsgGameResultCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgGameResultCast);
          if (msg.roomId == this.shareSpace.texasGameData.roomId) {
            this.gameLogicDrive.push(this.shareSpace.onMsgGameResultCast.bind(this.shareSpace, msg));
          }
        };
        _proto.onMsgTableCloseCast = function onMsgTableCloseCast(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgTableCloseCast);
          if (this.shareSpace.texasGameData.isMatch) ;else {
            if (msg.roomid == this.shareSpace.texasGameData.roomId) {
              // 弹窗退出房间
              this.gameLogicDrive.push(this.shareSpace.onMsgTableCloseCast.bind(this.shareSpace, msg));
            }
          }
        };
        return GameTexasProxy;
      }(GameNetProxyBase), (_applyDecoratedDescriptor(_class.prototype, "onMsgSidePotsCast", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgSidePotsCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgBetAnteCast", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgBetAnteCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgHandCardsCast", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgHandCardsCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgTexasTableInfoCast", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgTexasTableInfoCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgBetSBBBAnteCast", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgBetSBBBAnteCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgNextActionPlayerCast", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgNextActionPlayerCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgPlayerBetCast", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgPlayerBetCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgPublicCardsCast", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgPublicCardsCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgOpenHandCardCast", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgOpenHandCardCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgShowHandCardCast", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgShowHandCardCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgGameResultCast", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgGameResultCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgTableCloseCast", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgTableCloseCast"), _class.prototype)), _class)));

      // [NetNode] default <<<< protoname: MsgWeedCast , head: {"wPacketSize":173,"iSession":0,"iProtoId":149262225} , byteLength: 177
      // [NetNode] default <<<< protoname: MsgTableCloseCast , head: {"wPacketSize":17,"iSession":0,"iProtoId":3550177392} , byteLength: 21
      // [NetNode] default <<<< protoname: MsgRemovePlayerCast , head: {"wPacketSize":17,"iSession":0,"iProtoId":1660705766} , byteLength: 21
      // [NetNode] default <<<< protoname: MsgMttStatusCast , head: {"wPacketSize":14,"iSession":0,"iProtoId":1831548749} , byteLength: 18 mttidStatus 3
      // [NetNode] default <<<< protoname: MsgMttStatusCast , head: {"wPacketSize":14,"iSession":0,"iProtoId":1831548749} , byteLength: 18 mttidStatus 2
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameTypes.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('GameTypes', void 0);
      cclegacy._RF.push({}, "80c8393uFVK0JMPN66kwqyQ", "GameTypes", undefined);
      var GameTypes;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameWindowBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GrootEx.ts', './CocosDevKit.ts', './LanguageManage.ts', './EventReporter.ts', './TelegramDeviceBridge.ts', './CDKDecorators.ts', './UITools.ts', './NetNodeManager.ts', './DataBinder.ts', './Logger.ts', './Utils.ts', './NodePoolExtention.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, v3, v2, BlockInputEvents, game, director, view, Color, Node, sys, tween, RelationType, GLoader, LoaderFillType, GGraph, Event, GRoot, Window, GObject, GRootEx, LanguageManager, EventReporter, TelegramDeviceBridge, SafeTimeInterval, UITools, NetNodeManager, BINDFUNC, STOPBINDDATA, Log, Utils, GObjectPoolEx;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      v2 = module.v2;
      BlockInputEvents = module.BlockInputEvents;
      game = module.game;
      director = module.director;
      view = module.view;
      Color = module.Color;
      Node = module.Node;
      sys = module.sys;
      tween = module.tween;
    }, function (module) {
      RelationType = module.RelationType;
      GLoader = module.GLoader;
      LoaderFillType = module.LoaderFillType;
      GGraph = module.GGraph;
      Event = module.Event;
      GRoot = module.GRoot;
      Window = module.Window;
      GObject = module.GObject;
    }, function (module) {
      GRootEx = module.GRootEx;
    }, null, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      UITools = module.UITools;
    }, function (module) {
      NetNodeManager = module.NetNodeManager;
    }, function (module) {
      BINDFUNC = module.BINDFUNC;
      STOPBINDDATA = module.STOPBINDDATA;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GObjectPoolEx = module.GObjectPoolEx;
    }],
    execute: function () {
      var _dec, _class3;
      cclegacy._RF.push({}, "34774k5w8FGLZ7CiOxxXAQl", "GameWindowBase", undefined);
      var EnterActTime = 0.2;
      var ContentPaneActionSpeedScale = 3.2;
      var BlaclMaskAlpha = 0.6;
      var OutSideClickObjectPool = /*#__PURE__*/function (_GObjectPoolEx2) {
        _inheritsLoose(OutSideClickObjectPool, _GObjectPoolEx2);
        function OutSideClickObjectPool() {
          return _GObjectPoolEx2.apply(this, arguments) || this;
        }
        _createClass(OutSideClickObjectPool, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new OutSideClickObjectPool(function () {
                var outside = new GObject();
                outside.name = 'OutsideNode';
                outside.touchable = true;
                var grootSize = GRootEx.getGRootSize();
                outside.setSize(grootSize.width, grootSize.height);
                return outside;
              });
            }
            return this._instance;
          }
        }]);
        return OutSideClickObjectPool;
      }(GObjectPoolEx);
      /**
       * 页面入场动作类型
       */
      OutSideClickObjectPool._instance = void 0;
      var EEnterType = exports('EEnterType', /*#__PURE__*/function (EEnterType) {
        EEnterType[EEnterType["none"] = 0] = "none";
        EEnterType[EEnterType["horizontal"] = 1] = "horizontal";
        EEnterType[EEnterType["vertical"] = 2] = "vertical";
        EEnterType[EEnterType["scale"] = 3] = "scale";
        return EEnterType;
      }({}));

      /**
       * 游戏页面基础类
       *
       * 页面制作示例 @example
       * export class YourPage extends GameWindowBase<UI_YourPage> {
       *     public static create<K extends fgui.GComponent>(from?: K) {
       *         return new YourPage(from);
       *     }
       *     public package = [
       *         'FGUI/PackageName',
       *     ];
       *     protected paneClass = UI_YourPage;
       *     protected gestureCloseWindow: boolean = true;
       *     protected enterType: EEnterType = EEnterType.horizontal;
       *     protected showEnterLoading: boolean = false;
       *     public pageOrder: number = 1000;
       *     protected onInit(): void {
       *         this.name = 'GameDebugView';
       *     }
       *     public callOnDestroy(callback: () => void) {
       *     }
       * }
       */
      var GameWindowBase = exports('GameWindowBase', (_dec = SafeTimeInterval(500), (_class3 = /*#__PURE__*/function (_fgui$Window) {
        _inheritsLoose(GameWindowBase, _fgui$Window);
        function GameWindowBase(from) {
          var _this;
          _this = _fgui$Window.call(this) || this;
          _this._grootInst = void 0;
          /**
           * @implements IUISource
           */
          _this.loaded = false;
          /**
           * @description 页面所依赖的包，载入页面时会自动加载这些包（Public 包可以不用指定）,
           * @description 不支持运行时设置
           */
          _this["package"] = void 0;
          /**
           * @description 页面所依赖的 bundle 下的目录，载入页面时会自动加载这些目录
           * @description 不支持运行时设置
           */
          _this.resourcesDirs = void 0;
          /**
           * @description 页面所依赖的 bundle 下的资源，载入页面时会自动加载这些资源
           * @description 不支持运行时设置
           */
          _this.resources = void 0;
          /**
           * @description 常驻页面，用于 PublicLayer 的特殊处理
           * @description 不支持运行时设置
           */
          _this.stayPage = false;
          /**
           * @description 界面内容类，将用这个类创建内容实例
           * @description 不支持运行时设置
           */
          _this.paneClass = void 0;
          /**
           * @description 是否覆盖下层页面
           * @description 不支持运行时设置
           */
          _this.coverUnderlyingWindow = true;
          /**
           * @description 是否显示灰色蒙层,
           * @description coverUnderlyingWindow 设置为 true 时将忽略这个设置
           * @description 不支持运行时设置
           */
          _this.showBlackMask = false;
          /**
           * @description 点击空白隐藏开关
           * @description coverUnderlyingWindow 设置为 true 时将忽略这个设置
           * @description 可以通过覆盖 onOutsideClick 改变点击空白区域的行为
           * @description 不支持运行时设置
           */
          _this.clickOutsideHide = false;
          /**
           * @description 显示后是否移除被覆盖的窗口
           * @description 不支持运行时设置
           */
          _this.removeUnderlyingWindow = false;
          /**
           * @description 手势滑动关闭页面开关，开启后支持左侧滑动关闭页面
           * @description removeUnderlyingWindow 设置为 true 时将忽略这个设置
           * @description 不支持运行时设置
           */
          _this.gestureCloseWindow = false;
          /**
           * @description 页面进入方式,
           * @description 不支持运行时设置
           */
          _this.enterType = EEnterType.none;
          /**
           * @description 页面在 GRoot 下的显示层级,
           * @description 不支持运行时设置
           */
          _this.pageOrder = 0;
          /**
           * @description 是否显示加载,
           * @description 不支持运行时设置
           */
          _this.showEnterLoading = true;
          /**
           * 是否上报页面打开
           */
          _this.reportOpenPage = false;
          /**
           * 页面名称
           */
          _this.pageName = 'GameWindowBase';
          _this.outsideClickObject = void 0;
          _this.blackMaskLayer = void 0;
          _this.gestureJudgedWidth = void 0;
          _this.hookList = [];
          _this._gestureEnable = false;
          _this.blockInputEvents = void 0;
          _this.openFrom = void 0;
          _this.inputParams = void 0;
          _this.enterLoadingItem = void 0;
          _this._contentFixInfo = void 0;
          _this.tweenContentPanel = void 0;
          _this.tweenBlackMask = void 0;
          _this.showAnimationFlag = false;
          _this._startGesture = false;
          _this._gestureDeltaX = void 0;
          _this._s_vec3 = v3();
          _this._s_vec3_2 = v3();
          _this._s_vec2 = v2();
          _this._camera = void 0;
          _this.dragTouchBeginPos = void 0;
          _this.openFrom = from;
          _this.addUISource(_assertThisInitialized(_this));
          _this.gestureJudgedWidth = GRootEx.getGRootSize().width / 4;
          _this.hookList = [];
          _this.blockInputEvents = _this.node.addComponent(BlockInputEvents);
          return _this;
        }

        /**
         * @description 语言设置变化
         */
        var _proto = GameWindowBase.prototype;
        _proto.onLanguageChange = function onLanguageChange() {
          this.forceUpdateRecursion();
        }

        /**
         * @description 强制递归更新页面尺寸和布局
         */;
        _proto.forceUpdateRecursion = function forceUpdateRecursion() {
          UITools.forceUpdateRecursion(this.node);
        }

        /**
         * 在当前 groot 实例上创建一个 Loading 控制器
         * @description 为每一个需要显示加载界面的异步过程创建一个 Loading 对象，异步过程开始时调用 show，结束时调用 hide
         * @description LoadingManager 会在处于显示状态的 Loading 对象数量大于 0 的时候真正的显示加载界面，在处于显示状态的 Loading 对象数量等于 0 的时候隐藏加载界面
         * @description 指定了 target 的 Loading 对象会在 target 被销毁后自动的销毁自身，并触发 LoadingManager 对于加载界面可见性的控制
         * @param target 指定的 target 在节点树中被移除并销毁的时候相应的 Loading 对象也会被销毁
         * @returns
         */;
        _proto.createLoadingItem = function createLoadingItem() {
          return this.grootInst.createLoadingItem(this);
        }

        /**
         * @description 设置输入参数
         * @param params
         */;
        _proto.setInputParams = function setInputParams(params) {
          this.inputParams = params;
        }

        /**
         * @description 添加页面回调
         * @param hook
         */;
        _proto.addHook = function addHook(hook) {
          if (!this.hookList.includes(hook)) {
            this.hookList.push(hook);
          }
        }

        /**
         * 清除所有页面回调
         */;
        _proto.clearHooks = function clearHooks() {
          this.hookList.length = 0;
        };
        _proto.show = function show(root) {
          _fgui$Window.prototype.show.call(this, root);
        };
        _proto.showOn = function showOn(root) {
          _fgui$Window.prototype.showOn.call(this, root);
        };
        _proto._init = function _init() {
          var flag = !this._inited;
          _fgui$Window.prototype._init.call(this);
          if (flag) {
            var netNode = NetNodeManager.Instance.getDefaultNetNode();
            netNode.onNetState(this.onNetStateChange, this);
            LanguageManager.on(this.onLanguageChange, this);
            var dataNetEventListenerMark = this._NetEventListenerMark_;
            if (dataNetEventListenerMark) {
              for (var i = 0; i < dataNetEventListenerMark.length; i++) {
                var _dataNetEventListener = dataNetEventListenerMark[i],
                  propertyKey = _dataNetEventListener.propertyKey,
                  protoID = _dataNetEventListener.protoID;
                this.onNetMsg(protoID, this[propertyKey]);
              }
            }
            var dataPageEventListenerMark = this._PageEventListenerMark_;
            if (dataPageEventListenerMark) {
              for (var _i = 0; _i < dataPageEventListenerMark.length; _i++) {
                var _dataPageEventListene = dataPageEventListenerMark[_i],
                  _propertyKey = _dataPageEventListene.propertyKey,
                  eventName = _dataPageEventListene.eventName;
                this.grootInst.node.on(eventName, this[_propertyKey], this);
              }
            }
            var dataBinderMark = this._DataBinderMark_;
            if (dataBinderMark) {
              for (var _i2 = 0; _i2 < dataBinderMark.length; _i2++) {
                var _propertyKey2 = dataBinderMark[_i2];
                BINDFUNC(this, this[_propertyKey2].bind(this));
              }
            }
          }
        }

        // protected onInit(): void {
        //     super.onInit();
        // if (this.reportOpenPage) {
        //     EventReporter.emit(EventReporter.Event.mixpanel.OPEN_PAGE, { From: this.openFrom?.name, To: this.name });
        // }
        // }
        ;

        _proto.onEnable = function onEnable() {
          // @ts-ignore
          this.name = this.pageName;
          if (!this._inited) {
            this.grootInst;
            if (!this.stayPage && this.showEnterLoading) {
              this.enterLoadingItem = this.createLoadingItem();
              this.enterLoadingItem.show();
            }
            if (this.reportOpenPage) {
              var _this$openFrom;
              EventReporter.emit(EventReporter.Event.mixpanel.OPEN_PAGE, {
                From: (_this$openFrom = this.openFrom) == null ? void 0 : _this$openFrom.name,
                To: this.name
              });
            }
          }
          _fgui$Window.prototype.onEnable.call(this);
        };
        _proto.dispose = function dispose() {
          var _this$grootInst;
          STOPBINDDATA(this);
          if (this.outsideClickObject) {
            OutSideClickObjectPool.Instance.putObj(this.outsideClickObject);
            this.outsideClickObject = undefined;
          }
          // if (this.blackMaskLayer) {
          //     BlackMaskPool.Instance.putObj(this.blackMaskLayer);
          //     this.blackMaskLayer = undefined;
          // }
          LanguageManager.off(this);
          (_this$grootInst = this.grootInst) == null || _this$grootInst.node.targetOff(this);
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          netNode.targetOff(this);
          game.targetOff(this);
          director.targetOff(this);
          view.targetOff(this);
          _fgui$Window.prototype.dispose.call(this);
          for (var i = 0; i < this.hookList.length; i++) {
            var hook = this.hookList[i];
            if (hook.onPageDestroy) {
              hook.onPageDestroy(this);
            }
          }
          TelegramDeviceBridge.Instance.removeBackTarget(this);
        }

        /**
         * @description 监听网络通信事件
         * @param protoID
         * @param onResponse
         */;
        _proto.onNetMsg = function onNetMsg(protoID, onResponse) {
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          if (netNode) {
            netNode.onNetMsg(protoID, onResponse, this);
          } else {
            Log.debug.error(this.name, 'onNetMsg', "netNode is undefined");
          }
        }

        /**
         * @description 网络节点状态变化
         * @param state
         */;
        _proto.onNetStateChange = function onNetStateChange(state) {
          // // example
          // switch (this.netNode.state) {
          //     case NetTypes.ENetNodeState.connected: {
          //         // do something
          //     } break;
          // }
        }

        /**
         * @description 在当前页面所在的 groot 实例上抛出页面事件
         * @param eventName
         * @param args
         */;
        _proto.emitPageEvent = function emitPageEvent(eventName) {
          var _this$grootInst2;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          (_this$grootInst2 = this.grootInst).emitPageEvent.apply(_this$grootInst2, [eventName, this].concat(args));
        }

        /**
         * @description 在所有 groot 实例上抛出页面事件
         * @param eventName
         * @param args
         */;
        _proto.emitPageEventAllInst = function emitPageEventAllInst(eventName) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          GRootEx.emitPageEvent.apply(GRootEx, [eventName, this, true].concat(args));
        };
        _proto.addContentPane = function addContentPane() {
          var _this$contentPane$m_f;
          this.contentPane = this.paneClass.createInstance();
          this.makeFullScreen();
          this.screenFix();
          if (this.enterType == EEnterType.vertical) {
            this.contentPane.y = 5000;
          }
          var grootSize = GRootEx.getGRootSize();
          var x = -(grootSize.width - this.width) / 2;
          var y = -(grootSize.height - this.height) / 2;
          if (!this.coverUnderlyingWindow && this.clickOutsideHide) {
            this.outsideClickObject = OutSideClickObjectPool.Instance.getObj();
            this.contentPane.addChildAt(this.outsideClickObject, 0);
            this.outsideClickObject.setPosition(x, y);
            this.outsideClickObject.addRelation(this, RelationType.Size);
            this.outsideClickObject.onClick(this.closeEventHandler, this);
          }
          if (!this.coverUnderlyingWindow && this.showBlackMask) {
            var mask = new GLoader();
            mask.name = 'ViewBaseMaskLayer';
            mask.url = 'ui://xddh4ifdp6qk1';
            mask.color = Color.BLACK.clone();
            mask.alpha = BlaclMaskAlpha;
            mask.fill = LoaderFillType.ScaleFree;
            mask.touchable = false;
            var _grootSize = GRootEx.getGRootSize();
            mask.setSize(_grootSize.width, _grootSize.height);
            this.blackMaskLayer = mask;
            this.addChildAt(this.blackMaskLayer, 0);
            this.blackMaskLayer.setPosition(x, y);
            this.blackMaskLayer.addRelation(this, RelationType.Size);
          }
          // @ts-ignore
          var dragNode = (_this$contentPane$m_f = this.contentPane.m_frame) == null ? void 0 : _this$contentPane$m_f.m_dragNode;
          var dargEnable = !!dragNode && dragNode instanceof GGraph && this.enterType == EEnterType.vertical;
          this._gestureEnable = this.gestureCloseWindow && !this.removeUnderlyingWindow && !dargEnable;
          if (this._gestureEnable) {
            this.node.on(Node.EventType.TOUCH_START, this.onGestureTouchBegin, this);
            this.node.on(Node.EventType.TOUCH_MOVE, this.onGestureTouchMove, this);
            this.node.on(Node.EventType.TOUCH_END, this.onGestureTouchEnd, this);
            this.node.on(Node.EventType.TOUCH_CANCEL, this.onGestureTouchEnd, this);
          }
          if (dargEnable) {
            dragNode.on(Event.TOUCH_BEGIN, this.onDragTouchBegin, this);
            dragNode.on(Event.TOUCH_MOVE, this.onDragTouchMove, this);
            dragNode.on(Event.TOUCH_END, this.onDragTouchEnd, this);
          }
          if (this.closeButton && this.closeButton.visible) {
            TelegramDeviceBridge.Instance.pushBackTarget(this);
          }
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          var enable = this.node && this.node.isValid && this.closeButton && this.closeButton.visible;
          if (!enable) {
            TelegramDeviceBridge.Instance.removeBackTarget(this);
          } else {
            if (this.closeEventHandler) {
              this.closeEventHandler();
            } else {
              TelegramDeviceBridge.Instance.removeBackTarget(this);
            }
          }
        };
        _proto.screenFix = function screenFix() {
          if (sys.isNative) {
            if (sys.hasFeature(sys.Feature.SAFE_AREA)) {
              var isAndroid = sys.platform == sys.Platform.ANDROID;
              var rect = sys.getSafeAreaRect();
              var visibleSize = view.getVisibleSize();
              this._contentFixInfo = {
                x: 0,
                y: visibleSize.height - rect.yMax,
                width: this.contentPane.width,
                height: isAndroid ? rect.height + rect.yMin : rect.height
              };
              this.contentPane.setSize(this._contentFixInfo.width, this._contentFixInfo.height);
              this.contentPane.addRelation(this, RelationType.Size);
            } else {
              var default_top_margin = 130;
              var grootSize = GRootEx.getGRootSize();
              this._contentFixInfo = {
                x: 0,
                y: default_top_margin,
                width: this.contentPane.width,
                height: grootSize.height - default_top_margin
              };
              this.contentPane.setSize(this._contentFixInfo.width, this._contentFixInfo.height);
              this.contentPane.addRelation(this, RelationType.Size);
            }
          } else {
            this.contentPane.makeFullScreen();
            this._contentFixInfo = {
              x: this.contentPane.x,
              y: this.contentPane.y,
              width: this.contentPane.width,
              height: this.contentPane.height
            };
          }
        };
        _proto.load = function load(callback, target) {
          var _this2 = this;
          var arr = [];
          if (this["package"] && this["package"].length > 0) {
            arr.push(Utils.fguiLoadPackage(this["package"]));
          }
          if (this.resourcesDirs && this.resourcesDirs.length > 0) {
            arr.push(Utils.ccLoadResourcesDir(this.resourcesDirs));
          }
          if (this.resources && this.resources.length > 0) {
            arr.push(Utils.ccLoadResources(this.resources));
          }
          if (arr.length > 0) {
            Promise.all(arr).then(function () {
              if (_this2.node && _this2.node.isValid) {
                _this2.addContentPane();
                _this2.loaded = true;
                callback.call(target);
              }
            }, function (resaon) {
              throw resaon;
            });
          } else {
            this.addContentPane();
            this.loaded = true;
            callback.call(target);
          }
          // if (this.package && this.package.length > 0 && this.resourcesDirs && this.resourcesDirs.length > 0) {
          //     Promise.all([Utils.fguiLoadPackage(this.package), Utils.ccLoadResourcesDir(this.resourcesDirs)]).then(
          //         () => {
          //             if (this.node && this.node.isValid) {
          //                 this.addContentPane();
          //                 this.loaded = true;
          //                 callback.call(target);
          //             }
          //         },
          //         (resaon) => {
          //             throw resaon;
          //         }
          //     );
          // } else if (this.package && this.package.length > 0) {
          //     Utils.fguiLoadPackage(this.package).then(
          //         () => {
          //             if (this.node && this.node.isValid) {
          //                 this.addContentPane();
          //                 this.loaded = true;
          //                 callback.call(target);
          //             }
          //         },
          //         (resaon) => {
          //             throw resaon;
          //         }
          //     );
          // } else if (this.resourcesDirs && this.resourcesDirs.length > 0) {
          //     Utils.ccLoadResourcesDir(this.resourcesDirs).then(
          //         () => {
          //             if (this.node && this.node.isValid) {
          //                 this.addContentPane();
          //                 this.loaded = true;
          //                 callback.call(target);
          //             }
          //         },
          //         (resaon) => {
          //             throw resaon;
          //         }
          //     );
          // } else {
          //     this.addContentPane();
          //     this.loaded = true;
          //     callback.call(target);
          // }
        };

        _proto.doCoverUnderlyingWindow = function doCoverUnderlyingWindow() {
          var selfIndex = this.parent.getChildIndex(this);
          if (selfIndex > 0) {
            var otherIndex = selfIndex - 1;
            while (true) {
              var otherWindow = this.grootInst.getChildAt(otherIndex);
              if (otherWindow) {
                if (otherWindow instanceof GameWindowBase) {
                  otherWindow.visible = false;
                }
                if (otherIndex == 0) {
                  break;
                }
                otherIndex -= 1;
              } else {
                break;
              }
            }
          }
        };
        _proto.doRemoveUnderlyingWindow = function doRemoveUnderlyingWindow() {
          var selfIndex = this.parent.getChildIndex(this);
          if (selfIndex > 0) {
            var otherIndex = selfIndex - 1;
            while (true) {
              var otherWindow = this.grootInst.getChildAt(otherIndex);
              if (otherWindow) {
                if (otherWindow instanceof GameWindowBase && !otherWindow.stayPage) {
                  otherWindow.dispose();
                }
                if (otherIndex == 0) {
                  break;
                }
                otherIndex -= 1;
              } else {
                break;
              }
            }
          }
        };
        _proto.showUnderlyingWindow = function showUnderlyingWindow() {
          var selfIndex = this.parent.getChildIndex(this);
          if (selfIndex > 0) {
            var otherIndex = selfIndex - 1;
            while (true) {
              var otherWindow = this.grootInst.getChildAt(otherIndex);
              if (otherWindow) {
                if (otherWindow instanceof GameWindowBase) {
                  if (otherWindow.coverUnderlyingWindow) {
                    otherWindow.visible = true;
                    return;
                  } else {
                    otherWindow.visible = true;
                    otherIndex -= 1;
                  }
                } else {
                  if (otherIndex == 0) {
                    break;
                  }
                  otherIndex -= 1;
                }
              } else {
                break;
              }
            }
          }
        };
        _proto.doEnterAction = function doEnterAction(callback, gestureCase) {
          if (gestureCase === void 0) {
            gestureCase = false;
          }
          if (this.tweenContentPanel) {
            this.tweenContentPanel.stop();
          }
          if (this.tweenBlackMask) {
            this.tweenBlackMask.stop();
          }
          var actionTime;
          var grootSize = GRootEx.getGRootSize();
          if (this.enterType == EEnterType.horizontal) {
            var start = gestureCase ? this.contentPane.x : grootSize.width + 300;
            actionTime = (start - this._contentFixInfo.x) / grootSize.width * EnterActTime;
            this.tweenContentPanel = tween(this.contentPane).set({
              x: start,
              y: this._contentFixInfo.y
            });
            this.tweenContentPanel = this.tweenContentPanel.delay(0.1);
            if (actionTime > 0) {
              this.tweenContentPanel = this.tweenContentPanel.to(actionTime, {
                x: this._contentFixInfo.x
              }, {
                easing: 'expoOut'
              });
            }
            this.tweenContentPanel.call(callback).start();
          } else if (this.enterType == EEnterType.vertical) {
            var _start = gestureCase ? this.contentPane.y : grootSize.height;
            actionTime = (_start - this._contentFixInfo.y) / grootSize.height * EnterActTime;
            this.tweenContentPanel = tween(this.contentPane).set({
              x: this._contentFixInfo.x,
              y: _start
            });
            this.tweenContentPanel = this.tweenContentPanel.delay(0.1);
            if (actionTime > 0) {
              this.tweenContentPanel = this.tweenContentPanel.to(actionTime, {
                y: this._contentFixInfo.y
              }, {
                easing: 'expoOut'
              });
            }
            this.tweenContentPanel.call(callback).start();
          } else {
            var startScale = gestureCase ? this.contentPane.scaleX : 0.5;
            var startAlpha = gestureCase ? this.contentPane.alpha : 0;
            actionTime = (1 - startScale) / ContentPaneActionSpeedScale;
            this.tweenContentPanel = tween(this.contentPane).set({
              x: this._contentFixInfo.x,
              y: this._contentFixInfo.y
            }).set({
              pivotX: 0.5,
              pivotY: 0.5,
              alpha: startAlpha,
              scaleX: startScale,
              scaleY: startScale
            });
            this.tweenContentPanel = this.tweenContentPanel.delay(0.1);
            if (actionTime > 0) {
              this.tweenContentPanel = this.tweenContentPanel.to(actionTime, {
                alpha: 1,
                scaleX: 1,
                scaleY: 1
              }, {
                easing: 'expoOut'
              });
            }
            this.tweenContentPanel.set({
              pivotX: 0,
              pivotY: 0
            }).call(callback).start();
          }
          if (this.blackMaskLayer) {
            this.tweenBlackMask = tween(this.blackMaskLayer).set({
              alpha: gestureCase ? this.blackMaskLayer.alpha : 0
            });
            this.tweenBlackMask = this.tweenBlackMask.delay(0.1);
            if (actionTime > 0) {
              this.tweenBlackMask = this.tweenBlackMask.to(actionTime, {
                alpha: BlaclMaskAlpha
              });
            }
            this.tweenBlackMask.start();
          }
        };
        _proto.doExitAction = function doExitAction(callback) {
          if (this.tweenContentPanel) {
            this.tweenContentPanel.stop();
          }
          if (this.tweenBlackMask) {
            this.tweenBlackMask.stop();
          }
          var actionTime;
          var grootSize = GRootEx.getGRootSize();
          if (this.enterType == EEnterType.horizontal) {
            var num = grootSize.width + 300;
            actionTime = (num - this.contentPane.x) / num * EnterActTime;
            this.tweenContentPanel = tween(this.contentPane).to(actionTime, {
              x: num
            }, {
              easing: 'expoOut'
            }).call(callback).start();
          } else if (this.enterType == EEnterType.vertical) {
            actionTime = (grootSize.height - this.contentPane.y) / grootSize.height * EnterActTime;
            this.tweenContentPanel = tween(this.contentPane).to(actionTime, {
              y: grootSize.height
            }, {
              easing: 'expoIn'
            }).call(callback).start();
          } else {
            actionTime = (this.contentPane.scaleX - 0.5) / ContentPaneActionSpeedScale;
            this.tweenContentPanel = tween(this.contentPane).set({
              pivotX: 0.5,
              pivotY: 0.5
            }).to(actionTime, {
              alpha: 0,
              scaleX: 0.5,
              scaleY: 0.5
            }, {
              easing: 'expoIn'
            }).set({
              pivotX: 0,
              pivotY: 0
            }).call(callback).start();
          }
          if (this.blackMaskLayer) {
            this.tweenBlackMask = tween(this.blackMaskLayer).to(actionTime, {
              alpha: 0
            }).start();
          }
        };
        _proto.doShowAnimation = function doShowAnimation() {
          var _this3 = this;
          if (this.showAnimationFlag) {
            return;
          }
          this.showAnimationFlag = true;
          if (this.enterType != EEnterType.none) {
            this.doEnterAction(function () {
              if (_this3.removeUnderlyingWindow) {
                _this3.doRemoveUnderlyingWindow();
              } else if (_this3.coverUnderlyingWindow) {
                _this3.doCoverUnderlyingWindow();
              }
              _this3.blockInputEvents.enabled = false;
              _this3.onShown();
              if (_this3.enterLoadingItem) {
                _this3.enterLoadingItem.hide();
              }
              for (var i = 0; i < _this3.hookList.length; i++) {
                var hook = _this3.hookList[i];
                if (hook.onPageShown) {
                  hook.onPageShown(_this3);
                }
              }
            });
          } else {
            if (this.removeUnderlyingWindow) {
              this.doRemoveUnderlyingWindow();
            } else if (this.coverUnderlyingWindow) {
              this.doCoverUnderlyingWindow();
            }
            this.blockInputEvents.enabled = false;
            if (this.enterLoadingItem) {
              this.enterLoadingItem.hide();
            }
            this.contentPane.x = this._contentFixInfo.x;
            this.contentPane.y = this._contentFixInfo.y;
            this.onShown();
            for (var i = 0; i < this.hookList.length; i++) {
              var hook = this.hookList[i];
              if (hook.onPageShown) {
                hook.onPageShown(this);
              }
            }
          }
        };
        _proto.doHideAnimation = function doHideAnimation() {
          var _this4 = this;
          if (this.enterType != EEnterType.none) {
            this.blockInputEvents.enabled = true;
            if (!this.removeUnderlyingWindow) {
              this.showUnderlyingWindow();
            }
            this.doExitAction(function () {
              _this4.blockInputEvents.enabled = false;
              _this4.dispose();
            });
          } else {
            if (!this.removeUnderlyingWindow) {
              this.showUnderlyingWindow();
            }
            this.dispose();
          }
        };
        _proto.touchLocationToFguiLocal = function touchLocationToFguiLocal(pos) {
          if (!this._camera) {
            this._camera = director.root.batcher2D.getFirstRenderCamera(this.node);
          }
          this._s_vec3.set(pos.x, pos.y);
          this._camera.screenToWorld(this._s_vec3_2, this._s_vec3);
          this._s_vec2.set(this._s_vec3_2.x, this._s_vec3_2.y);
          var p = this.globalToLocal(this._s_vec2.x, this._s_vec2.y);
          p.y = this.height - p.y;
          return p;
        };
        _proto.onGestureTouchBegin = function onGestureTouchBegin(event) {
          event.bubbles = false;
          if (!this._gestureEnable) {
            this.grootInst.node.dispatchEvent(event);
            return;
          }
          var location = event.getLocation();
          location = this.touchLocationToFguiLocal(location);
          var num1 = this.grootInst.height * 0.2;
          var num2 = this.grootInst.height * 0.8;
          this._startGesture = location.x < 100 && location.y > num1 && location.y < num2;
          if (this._startGesture) {
            if (this.tweenContentPanel) {
              this.tweenContentPanel.stop();
            }
            if (this.tweenBlackMask) {
              this.tweenBlackMask.stop();
            }
            this.contentPane.x = 0;
            if (this.coverUnderlyingWindow) {
              this.showUnderlyingWindow();
            }
          } else {
            this.grootInst.node.dispatchEvent(event);
            return;
          }
        };
        _proto.onGestureTouchMove = function onGestureTouchMove(event) {
          event.bubbles = false;
          if (!this._gestureEnable) {
            this.grootInst.node.dispatchEvent(event);
            return;
          }
          if (!this._startGesture) {
            this.grootInst.node.dispatchEvent(event);
            return;
          }
          var location = event.getUILocation();
          var startLocation = event.getUIStartLocation();
          this._gestureDeltaX = event.getUIDelta().x;
          var diff = location.x - startLocation.x;
          var proportion = diff / this.grootInst.width;
          if (this.enterType == EEnterType.horizontal) {
            this.contentPane.x = Math.min(Math.max(proportion * this.grootInst.width, 0), this.grootInst.width);
          } else if (this.enterType == EEnterType.vertical) {
            this.contentPane.y = Math.min(Math.max(proportion * this.grootInst.height, 0), this.grootInst.height);
          } else if (this.enterType == EEnterType.scale) {
            var scale = 0.5 + (1 - proportion) * 0.5;
            this.contentPane.scaleX = scale;
            this.contentPane.scaleY = scale;
            this.contentPane.alpha = 1 - proportion;
          }
          if (this.blackMaskLayer) {
            this.blackMaskLayer.alpha = BlaclMaskAlpha * (1 - proportion);
          }
        };
        _proto.onGestureTouchEnd = function onGestureTouchEnd(event) {
          var _this5 = this;
          event.bubbles = false;
          if (!this._gestureEnable) {
            this.grootInst.node.dispatchEvent(event);
            return;
          }
          if (!this._startGesture) {
            this.grootInst.node.dispatchEvent(event);
            return;
          }
          var location = event.getUILocation();
          var startLocation = event.getUIStartLocation();
          var diff = location.x - startLocation.x;
          if (diff > this.gestureJudgedWidth) {
            this.hide();
          } else {
            this.doEnterAction(function () {
              if (_this5.removeUnderlyingWindow) {
                _this5.doRemoveUnderlyingWindow();
              } else if (_this5.coverUnderlyingWindow) {
                _this5.doCoverUnderlyingWindow();
              }
            }, true);
          }
        };
        _proto.onDragTouchBegin = function onDragTouchBegin(evt) {
          evt.captureTouch();
          this.dragTouchBeginPos = this.globalToLocal(evt.pos.x, evt.pos.y);
        };
        _proto.onDragTouchMove = function onDragTouchMove(evt) {
          if (this.dragTouchBeginPos) {
            var pt = this.globalToLocal(evt.pos.x, evt.pos.y);
            if (pt.y > this.dragTouchBeginPos.y) {
              var diff = pt.y - this.dragTouchBeginPos.y;
              this.contentPane.y = this._contentFixInfo.y + diff;
              if (this.blackMaskLayer) {
                this.blackMaskLayer.alpha = BlaclMaskAlpha * ((this.height - diff) / this.height);
              }
            } else {
              this.contentPane.y = this._contentFixInfo.y;
              if (this.blackMaskLayer) {
                this.blackMaskLayer.alpha = BlaclMaskAlpha;
              }
            }
          }
        };
        _proto.onDragTouchEnd = function onDragTouchEnd(evt) {
          var _this6 = this;
          if (this.dragTouchBeginPos) {
            var pt = this.globalToLocal(evt.pos.x, evt.pos.y);
            // if (pt.y > this.dragTouchBeginPos.y) {
            //     this.contentPane.y = this._contentFixInfo.y + (pt.y - this.dragTouchBeginPos.y);
            // } else {
            //     this.contentPane.y = this._contentFixInfo.y;
            // }
            var diff = pt.y - this.dragTouchBeginPos.y;
            if (diff > 180) {
              this.hide();
            } else {
              // this.contentPane.y = this._contentFixInfo.y;
              this.doEnterAction(function () {
                if (_this6.removeUnderlyingWindow) {
                  _this6.doRemoveUnderlyingWindow();
                } else if (_this6.coverUnderlyingWindow) {
                  _this6.doCoverUnderlyingWindow();
                }
              }, true);
            }
          }
        };
        _proto.setTimeout = function setTimeout(callback, time) {
          return tween(this).delay(time).call(callback).start();
        };
        _proto.setInterval = function setInterval(callback, time) {
          return tween(this).repeatForever(tween(this).delay(time).call(callback)).start();
        };
        _createClass(GameWindowBase, [{
          key: "grootInst",
          get:
          /**
           * @description 当前页面所在的 groot 实例
           */
          function get() {
            if (!this._grootInst && this.node.isValid) {
              this._grootInst = GRoot.getInstance(this);
              if (!this._grootInst) {
                this._grootInst = GRootEx.getInst();
              }
            }
            return this._grootInst;
          }
        }, {
          key: "pane",
          get:
          /**
           * @description 页面内容实例
           */
          function get() {
            return this.contentPane;
          }
        }]);
        return GameWindowBase;
      }(Window), _applyDecoratedDescriptor(_class3.prototype, "onDeviceBackButtonClick", [_dec], Object.getOwnPropertyDescriptor(_class3.prototype, "onDeviceBackButtonClick"), _class3.prototype), _class3)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GateWayCheck.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameConfig.ts', './HttpProtoBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameConfig, HttpProtoBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      HttpProtoBase = module.HttpProtoBase;
    }],
    execute: function () {
      exports('GateWayCheck', void 0);
      cclegacy._RF.push({}, "ba828VLgspFMYnMK3lrac9S", "GateWayCheck", undefined);
      var GateWayCheck;
      (function (_GateWayCheck) {
        var GateWayCheckRequest = /*#__PURE__*/function (_HttpProtoBase) {
          _inheritsLoose(GateWayCheckRequest, _HttpProtoBase);
          function GateWayCheckRequest() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            _this = _HttpProtoBase.call.apply(_HttpProtoBase, [this].concat(args)) || this;
            _this.encryptEnable = false;
            _this.requestUrl = GameConfig.curConfig.gateway;
            return _this;
          }
          GateWayCheckRequest.create = function create() {
            return new GateWayCheckRequest({
              channel: GameConfig.channel
            });
          };
          return GateWayCheckRequest;
        }(HttpProtoBase);
        _GateWayCheck.GateWayCheckRequest = GateWayCheckRequest;
      })(GateWayCheck || (GateWayCheck = exports('GateWayCheck', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GetRewardPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_GetRewardPage.ts', './GameWindowBase.ts', './Utils.ts', './LobbyConst.ts', './LanguageManage.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_GetRewardPage, EEnterType, GameWindowBase, Utils, LobbyConst, LanguageManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_GetRewardPage = module.default;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      LanguageManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "94d3biBAUNJkabWp5TdxZiy", "GetRewardPage", undefined);

      //通用获得弹框
      var GetRewardPage = exports('default', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(GetRewardPage, _GameWindowBase);
        function GetRewardPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this.vertical = void 0;
          _this.paneClass = UI_GetRewardPage;
          _this.enterType = EEnterType.vertical;
          _this.gestureCloseWindow = false;
          _this.coverUnderlyingWindow = false;
          _this.showBlackMask = true;
          _this.showEnterLoading = false;
          _this.clickOutsideHide = true;
          _this.pageName = 'GetRewardPage';
          return _this;
        }
        GetRewardPage.create = function create(from) {
          return new GetRewardPage(from);
        };
        var _proto = GetRewardPage.prototype;
        _proto.setInputParams = function setInputParams(params) {
          this.inputParams = params;
        };
        _proto.onInit = function onInit() {
          if (this.inputParams.title) this.setTitle(this.inputParams.title);
          if (this.inputParams.content) this.setContentMsg(this.inputParams.content);
          this.pane.m_RewardList.setVirtual();
          this.pane.m_RewardList.itemRenderer = this.itemRendererCB.bind(this);
          this.pane.m_RewardList.numItems = this.inputParams.items.length;
          var frame = this.pane.m_frame;
          frame.m_btnConfirm.onClick(this.onBtnConfirm.bind(this), this);
          if (!this.inputParams.iType) {
            frame.m_btnConfirm.text = LanguageManager.get('CCS_TXT_267');
          } else if (this.inputParams.iType == 2) {
            frame.m_btnConfirm.text = LanguageManager.get('WALLET_REQSUB_DETAILS');
          }
        }

        //目前只展示金币，这个后面扩充的时候要改
        ;

        _proto.itemRendererCB = function itemRendererCB(idx, item) {
          if (!this.inputParams.items || this.inputParams.items.length <= 0) return;
          var award = this.inputParams.items[idx];

          // if (award.propid == LobbyConst.ENUMMoney_Type.TAG_MONEY_U || award.propid == LobbyConst.ENUMMoney_Type.TAG_MONEY) {
          //     award.num = award.num / 100;
          // }
          item.m_title.text = this.getPropName(award.propid, award.num);
          var iType = 0;
          if (award.propid == LobbyConst.ENUMMoney_Type.TAG_MONEY) {
            iType = LobbyConst.ENUMPOP_Money_Type.TAG_MONEY_130;
          } else if (award.propid == LobbyConst.ENUMMoney_Type.TAG_MONEY_U) {
            iType = LobbyConst.ENUMPOP_U_Type.TAG_U_131;
          } else if (award.propid == LobbyConst.ENUMMoney_Type.TAG_XP) ;
          var imageUrl = LobbyConst.GetPropIconPath(award.propid, iType);
          if (imageUrl.length == 0) {
            imageUrl = award.pic || '';
          }
          item.m_icon.url = imageUrl;
        };
        _proto.onBtnConfirm = function onBtnConfirm() {
          if (this.inputParams.cb) {
            this.inputParams.cb();
          }
          this.hide();
        }

        //设置dialog title
        ;

        _proto.setTitle = function setTitle(title) {
          this.pane.m_frame.text = LanguageManager.get(title);
        }

        //设置 内容描述
        ;

        _proto.setContentMsg = function setContentMsg(title) {
          this.pane.m_title.text = LanguageManager.get(title);
        };
        _proto.getPropName = function getPropName(iPropId, iNum) {
          var strName = '';
          switch (iPropId) {
            case 1001:
            case 1002:
            case 1003:
              strName = Utils.formatStr('%s', Utils.getThousandShowNumber(iNum)); //Utils.getDisplayNumber(iNum, false, true);
              break;
            case 109:
            case 105:
            case 101:
              strName = '7D';
              break;
            case 110:
            case 106:
            case 102:
              strName = '30D';
              break;
            case 111:
            case 107:
            case 103:
              strName = '90D';
              break;
            case 112:
            case 108:
            case 104:
              strName = '365D';
              break;
            default:
              strName = "x" + iNum;
              break;
          }
          return strName;
        };
        return GetRewardPage;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GLoaderExtention.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, GLoader;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GLoader = module.GLoader;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e927ez3ao1EVaRFSj/Jsbb8", "GLoaderExtention", undefined);
      var GLoaderExtention = exports('GLoaderExtention', /*#__PURE__*/function (_fgui$GLoader) {
        _inheritsLoose(GLoaderExtention, _fgui$GLoader);
        function GLoaderExtention() {
          return _fgui$GLoader.apply(this, arguments) || this;
        }
        return GLoaderExtention;
      }(GLoader));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GoldComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_GoldComponent.ts'], function () {
  var _inheritsLoose, cclegacy, CustomFguiClass, UI_GoldComponent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_GoldComponent = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "c8e31DtZCBOP4TeSa0hzDVN", "GoldComponent", undefined);
      var GoldComponent = CustomFguiClass(_class = /*#__PURE__*/function (_UI_GoldComponent) {
        _inheritsLoose(GoldComponent, _UI_GoldComponent);
        function GoldComponent() {
          return _UI_GoldComponent.apply(this, arguments) || this;
        }
        var _proto = GoldComponent.prototype;
        _proto.setIcon = function setIcon(icon) {
          //可以根据渠道设置不同的金币类型
          this.m_icon.url = 'ui://Public/common_userinfo_coin';
        };
        return GoldComponent;
      }(UI_GoldComponent)) || _class;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GrootEx.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './CocosDevKit.ts', './GameWindowBase.ts', './ConfirmBox.ts', './LoginProxy.ts', './PublicLayer.ts', './PageEvent.ts', './GameDecorators.ts', './LanguageManage.ts', './TelegramDeviceBridge.ts', './gameproto.mjs_cjs=&original=.js', './GameConfig.ts', './GameConst.ts', './NativeDeviceBridge.ts', './NetNodeManager.ts', './Loading.ts', './gameproto.js', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _assertThisInitialized, cclegacy, game, sys, size, Event, GRoot, GameWindowBase, ConfirmBox, LoginProxy, PublicLayer, EPageEvent, ResetGameData, ResetNetProxy, ExceptionCapture, LanguageManager, TelegramDeviceBridge, GameConfig, GameConst, NativeDeviceBridge, NetNodeManager, LoadingManager, Loading, _cjsExports, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
      sys = module.sys;
      size = module.size;
    }, function (module) {
      Event = module.Event;
      GRoot = module.GRoot;
    }, null, function (module) {
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      LoginProxy = module.LoginProxy;
    }, function (module) {
      PublicLayer = module.PublicLayer;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      ResetGameData = module.ResetGameData;
      ResetNetProxy = module.ResetNetProxy;
      ExceptionCapture = module.ExceptionCapture;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, null, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      NetNodeManager = module.NetNodeManager;
    }, function (module) {
      LoadingManager = module.LoadingManager;
      Loading = module.Loading;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "98de3EJ6OlADZZaXGy6QziH", "GrootEx", undefined);
      game.on('do_restart_game', function () {
        NetNodeManager.Instance.getDefaultNetNode().forceClose();
        ResetGameData();
        ResetNetProxy();
        if (sys.isNative || !globalThis.location) {
          game.restart();
        } else {
          globalThis.location.reload();
        }
      });
      var GRootEx = exports('GRootEx', (_dec = ExceptionCapture(), (_class = (_class2 = /*#__PURE__*/function (_fgui$GRoot) {
        _inheritsLoose(GRootEx, _fgui$GRoot);
        GRootEx.getInst = function getInst(index) {
          if (index === void 0) {
            index = 0;
          }
          return this._inst[index];
        };
        GRootEx.getGRootSize = function getGRootSize() {
          for (var i = 0; i < 3; i++) {
            var element = this._inst[i];
            if (element) {
              return size(element.width, element.height);
            }
          }
          return size(1080, 1920);
        }

        /**
         * 发送页面事件
         * @param eventName 事件名
         * @param from 发送来源
         * @param allInst 是否向所有 groot 实例发送，为 false 时只向第一个 groot 实例发送
         * @param args 事件参数
         */;
        GRootEx.emitPageEvent = function emitPageEvent(eventName, from, allInst) {
          for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
            args[_key - 3] = arguments[_key];
          }
          for (var i = 0; i < this._inst.length; i++) {
            var inst = this._inst[i];
            inst.emitPageEvent.apply(inst, [eventName, from].concat(args));
            if (!allInst) {
              break;
            }
          }
        };
        function GRootEx() {
          var _this;
          _this = _fgui$GRoot.call(this) || this;
          _this.grootIndex = void 0;
          _this.loadingManager = void 0;
          _this.connectLoadingItem = void 0;
          _this.publicLayer = void 0;
          _this._kickComfirmBox = void 0;
          _this.loadingManager = new LoadingManager(_assertThisInitialized(_this));
          if (TelegramDeviceBridge.Instance.isTMA) {
            globalThis.__loadingManager = _this.loadingManager;
          }
          _this.connectLoadingItem = _this.createLoadingItem(_assertThisInitialized(_this));
          return _this;
        }
        var _proto = GRootEx.prototype;
        _proto.onEnable = function onEnable() {
          _fgui$GRoot.prototype.onEnable.call(this);
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          netNode.onNetMsg(_cjsExports.login.MsgkickCast.ProtocolID, this.onMsgkickCast, this);
          if (!this.node.hasEventListener(EPageEvent.LOGIN_PROCESS_START, this.onLoginProcessStart, this)) {
            this.node.on(EPageEvent.LOGIN_PROCESS_START, this.onLoginProcessStart, this);
          }
          if (!this.node.hasEventListener(EPageEvent.LOGIN_PROCESS_COMPLETED, this.onLoginProcessCompleted, this)) {
            this.node.on(EPageEvent.LOGIN_PROCESS_COMPLETED, this.onLoginProcessCompleted, this);
          }
          if (!this.node.hasEventListener(EPageEvent.LOGIN_PROCESS_FAILED, this.onLoginProcessFaild, this)) {
            this.node.on(EPageEvent.LOGIN_PROCESS_FAILED, this.onLoginProcessFaild, this);
          }
          if (!this.node.hasEventListener(Event.CLICK, this.globalClickListener, this)) {
            this.node.on(Event.CLICK, this.globalClickListener, this);
          }
        };
        _proto.onDisable = function onDisable() {
          _fgui$GRoot.prototype.onDisable.call(this);
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          netNode.targetOff(this);
          this.node.off(EPageEvent.LOGIN_PROCESS_START, this.onLoginProcessStart, this);
          this.node.off(EPageEvent.LOGIN_PROCESS_COMPLETED, this.onLoginProcessCompleted, this);
          this.node.off(EPageEvent.LOGIN_PROCESS_FAILED, this.onLoginProcessFaild, this);
        };
        _proto.onDestroy = function onDestroy() {
          _fgui$GRoot.prototype.onDestroy.call(this);
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          netNode.targetOff(this);
          this.connectLoadingItem.destroy();
          this.connectLoadingItem = undefined;
          this.loadingManager = undefined;
        };
        _proto.globalClickListener = function globalClickListener(evt) {
          if (evt.buttonObj) {
            // @ts-ignore
            var disableVibrate = evt.buttonObj.disableVibrate;
            if (disableVibrate) return;
            // GButton 点击
            NativeDeviceBridge.Instance.shortVibrate(2);
          }
        };
        _proto.onMsgkickCast = function onMsgkickCast(netdata) {
          var _this2 = this;
          var msg = netdata.getData(_cjsExports.login.MsgkickCast);
          if (!GameConfig.singleInstanceGroot) {
            if (this.grootIndex != 0) {
              for (var i = this._children.length - 1; i >= 0; i--) {
                var child = this._children[i];
                if (!(child instanceof PublicLayer)) {
                  child.dispose();
                }
              }
            }
          }
          if (this.grootIndex == 0) {
            var netNode = NetNodeManager.Instance.getDefaultNetNode();
            netNode.forceClose();
            if (this._kickComfirmBox) return;
            var text = '';
            switch (msg.reason) {
              case GameConst.EMsgKickReason.ServerClose:
                text = LanguageManager.get('TXT_201');
                break;
              case GameConst.EMsgKickReason.BackGroundKick:
                text = LanguageManager.get('TXT_201');
                break;
              case GameConst.EMsgKickReason.BanningAccount:
                if (msg.desc && msg.desc.length > 0) {
                  if (msg.desc == 'delete_account') {
                    text = LanguageManager.get('UP_2');
                  } else {
                    text = msg.desc;
                  }
                } else {
                  text = 'Your account has been banned. If you have any questions, please contact customer service.';
                }
                break;
              default:
                text = LanguageManager.get('TXT_1309');
                break;
            }
            ConfirmBox.disposAll();
            var box = ConfirmBox.create(this);
            box.setInputParams({
              content: text,
              clickOutsideClose: false,
              buttonNum: 1
            });
            box.addHook({
              onConfirm: this.loginAgain.bind(this),
              onPageDestroy: function onPageDestroy() {
                _this2._kickComfirmBox = undefined;
              }
            });
            box.showOn(this);
            this._kickComfirmBox = box;
          }
        };
        _proto.onLoginProcessStart = function onLoginProcessStart() {
          if (!this.visible) return;
          this.connectLoadingItem.show();
        };
        _proto.onLoginProcessCompleted = function onLoginProcessCompleted(from) {
          if (!this.visible) return;
          Log.debug.log('GRootEx', 'onLoginProcessCompleted');
          this.connectLoadingItem.hide();
        };
        _proto.onLoginProcessFaild = function onLoginProcessFaild() {
          if (!this.visible) return;
          this.connectLoadingItem.hide();
          if (!globalThis['LaunchPageInstance']) {
            if (LoginProxy.inst.reloginCount <= 0) {
              this.showReconnectComfirmBox(LanguageManager.get('TXT_552'));
            } else if (LoginProxy.inst.reloginCount >= 3) {
              this.showReconnectComfirmBox(LanguageManager.get('TXT_552'));
            } else {
              this.connectLoadingItem.show();
              setTimeout(function () {
                LoginProxy.inst.loginAgain();
              }, 3000);
            }
          }
        }

        /**
         * 发送页面事件
         * @param eventName 事件名
         * @param from 发送来源
         * @param args 事件参数
         */;
        _proto.emitPageEvent = function emitPageEvent(eventName, from) {
          var _this$node;
          for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }
          (_this$node = this.node).emit.apply(_this$node, [eventName, from].concat(args));
        }

        // private onNetStateChange(state: NetTypes.ENetNodeState) {
        //     switch (state) {
        //         case NetTypes.ENetNodeState.connecting: {
        //             // do something
        //         } break;
        //         case NetTypes.ENetNodeState.connected: {
        //             // do something
        //         } break;
        //         case NetTypes.ENetNodeState.closed: {
        //             if (this.grootIndex == 0) {
        //                 this.connectLoadingItem.hide();
        //                 if (!LoginPage.inst && !globalThis['LaunchPageInstance']) {
        //                     this.showReconnectComfirmBox('无法连接服务器，点击确定重试');
        //                 }
        //             }
        //         } break;
        //         case NetTypes.ENetNodeState.weakly: {
        //             // do something
        //         } break;
        //     }
        // }
        ;

        _proto.showReconnectComfirmBox = function showReconnectComfirmBox(content) {
          ConfirmBox.disposAll();
          var box = ConfirmBox.create(this);
          var btnNum = 2;
          if (TelegramDeviceBridge.Instance.isTMA) {
            btnNum = 1;
          }
          box.setInputParams({
            content: content,
            clickOutsideClose: false,
            buttonNum: btnNum
          });
          box.addHook({
            onConfirm: this.loginAgain.bind(this),
            onCancel: function onCancel() {
              game.emit('do_restart_game');
            }
          });
          box.showOn(this);
        };
        _proto.loginAgain = function loginAgain() {
          return LoginProxy.inst.loginAgain();
        };
        _proto._showLoading = function _showLoading(target) {
          Log.debug.log('_showLoading');
          if (!this.publicLayer) return;
          // @ts-ignore
          this.publicLayer.setLoading(true);
        };
        _proto._hideLoading = function _hideLoading() {
          Log.debug.log('_hideLoading');
          if (!this.publicLayer) return;
          // @ts-ignore
          this.publicLayer.setLoading(false);
        }

        /**
         * @override
         */;
        _proto.showWindow = function showWindow(win) {
          if (win instanceof GameWindowBase) {
            var idx = undefined;
            var lastGameWindow;
            for (var i = this._children.length - 1; i >= 0; i--) {
              var child = this._children[i];
              if (child instanceof GameWindowBase) {
                lastGameWindow = i;
                if (win.pageOrder >= child.pageOrder) {
                  idx = lastGameWindow;
                  break;
                }
              }
            }
            if (idx == undefined) {
              this.addChildAt(win, 0);
            } else {
              this.addChildAt(win, idx + 1);
            }
          } else {
            this.addChild(win);
          }
          win.requestFocus();
          if (win.x > this.width) win.x = this.width - win.width;else if (win.x + win.width < 0) win.x = 0;
          if (win.y > this.height) win.y = this.height - win.height;else if (win.y + win.height < 0) win.y = 0;
          // @ts-ignore
          this.adjustModalLayer();
        }

        /**
         * 创建一个 loading 控制器
         * @description 为每一个需要显示加载界面的异步过程创建一个 Loading 对象，异步过程开始时调用 show，结束时调用 hide
         * @description LoadingManager 会在处于显示状态的 Loading 对象数量大于 0 的时候真正的显示加载界面，在处于显示状态的 Loading 对象数量等于 0 的时候隐藏加载界面
         * @description 指定了 target 的 Loading 对象会在 target 被销毁后自动的销毁自身，并触发 LoadingManager 对于加载界面可见性的控制
         * @param target 指定的 target 在节点树中被移除并销毁的时候相应的 Loading 对象也会被销毁
         * @returns
         */;
        _proto.createLoadingItem = function createLoadingItem(target) {
          return new Loading(this.loadingManager, target);
        }

        /**
         * 显示一个中心 Tips
         * @param contentStr
         * @param args
         */;
        _proto.showCenterTip = function showCenterTip(contentStr) {
          if (this.publicLayer && this.visible) {
            var _this$publicLayer;
            for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
              args[_key3 - 1] = arguments[_key3];
            }
            (_this$publicLayer = this.publicLayer).showCenterTip.apply(_this$publicLayer, [contentStr].concat(args));
          }
        };
        return GRootEx;
      }(GRoot), _class2._inst = [], _class2), _applyDecoratedDescriptor(_class.prototype, "loginAgain", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "loginAgain"), _class.prototype), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GRootMultipleInstances.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GrootEx.ts', './CocosDevKit.ts', './GameWindowBase.ts', './PublicLayer.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UITransform, Mask, director, Node, updateScaler, UIContentScaler, GRootEx, GameWindowBase, PublicLayer, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      Mask = module.Mask;
      director = module.director;
      Node = module.Node;
    }, function (module) {
      updateScaler = module.updateScaler;
      UIContentScaler = module.UIContentScaler;
    }, function (module) {
      GRootEx = module.GRootEx;
    }, null, function (module) {
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      PublicLayer = module.PublicLayer;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d5420vNPtJBgqSDUeCx35EW", "GRootMultipleInstances", undefined);
      function updateLayers() {
        updateScaler();
        var gape = 50;
        var layerWidth;
        var activeLayers = [];
        for (var i = 0; i < 3; i++) {
          // @ts-ignore
          var layer = GRootEx._inst[i];
          var scale = UIContentScaler.rootSize.height / layer.height;
          layer.setScale(scale, scale);
          var visible = false;
          for (var _i = 0; _i < layer._children.length; _i++) {
            var child = layer._children[_i];
            if (child instanceof GameWindowBase && !child.stayPage) {
              visible = true;
              break;
            }
          }
          layer.visible = visible;
          if (visible) {
            activeLayers.push(layer);
            layerWidth = layer.width * layer.scaleX;
          }
        }
        if (activeLayers.length > 0) {
          var totalWidth = layerWidth * activeLayers.length + (activeLayers.length - 1) * gape;
          var startPos = -totalWidth / 2;
          var diff = layerWidth + gape;
          for (var _i2 = 0; _i2 < activeLayers.length; _i2++) {
            var _layer = activeLayers[_i2];
            var x = startPos + diff * _i2;
            var anchorPoint = _layer.node.getParent().getComponent(UITransform).anchorPoint;
            var y = UIContentScaler.rootSize.height * (1 - anchorPoint.y);
            _layer.node.setPosition(x, y);
          }
        }
      }
      var GRootMultipleInstances = exports('GRootMultipleInstances', /*#__PURE__*/function (_GRootEx) {
        _inheritsLoose(GRootMultipleInstances, _GRootEx);
        function GRootMultipleInstances() {
          return _GRootEx.apply(this, arguments) || this;
        }
        GRootMultipleInstances.create = function create() {
          Log.debug.log('GRootMultipleInstances', 'create');
          for (var i = 0; i < 3; i++) {
            // @ts-ignore
            GRootEx._inst[i] = new GRootMultipleInstances();
            // @ts-ignore
            var groot = GRootEx._inst[i];
            groot.node.name = 'GRootMultipleInstances';
            var ccmask = groot.node.addComponent(Mask);
            ccmask.type = Mask.Type.GRAPHICS_RECT;
            groot.setSize(1080, 1920);
            groot.y = 0;
            // @ts-ignore
            groot.grootIndex = i;
            director.getScene().getChildByPath('Canvas/UI').insertChild(groot.node, 0);
            groot._container.on(Node.EventType.CHILD_ADDED, updateLayers);
            groot._container.on(Node.EventType.CHILD_REMOVED, updateLayers);
          }
          updateLayers();
        };
        GRootMultipleInstances.createPublicLayer = function createPublicLayer() {
          for (var i = 0; i < 3; i++) {
            // @ts-ignore
            var groot = GRootEx._inst[i];
            if (groot.publicLayer) {
              continue;
            }
            groot.publicLayer = PublicLayer.create(groot);
            groot.publicLayer.showOn(groot);
          }
        };
        var _proto = GRootMultipleInstances.prototype;
        _proto.onWinResize = function onWinResize() {
          updateLayers();
        };
        return GRootMultipleInstances;
      }(GRootEx));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GRootSingleInstance.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GrootEx.ts', './CocosDevKit.ts', './PublicLayer.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, director, GRootEx, PublicLayer, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
    }, function (module) {
      GRootEx = module.GRootEx;
    }, null, function (module) {
      PublicLayer = module.PublicLayer;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "532b3yjoORFZKaUPK1FPPvg", "GRootSingleInstance", undefined);
      var GRootSingleInstance = exports('GRootSingleInstance', /*#__PURE__*/function (_GRootEx) {
        _inheritsLoose(GRootSingleInstance, _GRootEx);
        function GRootSingleInstance() {
          return _GRootEx.apply(this, arguments) || this;
        }
        GRootSingleInstance.create = function create() {
          Log.debug.log('GRootSingleInstance', 'create');
          // @ts-ignore
          GRootEx._inst[0] = new GRootSingleInstance();
          // @ts-ignore
          var groot = GRootEx._inst[0];
          director.getScene().getChildByPath('Canvas/UI').insertChild(groot.node, 0);
          groot.node.name = 'GRootSingleInstance';
          // @ts-ignore
          groot.grootIndex = 0;
          groot.onWinResize();
        };
        GRootSingleInstance.createPublicLayer = function createPublicLayer() {
          // @ts-ignore
          var groot = GRootEx._inst[0];
          if (groot.publicLayer) return;
          groot.publicLayer = PublicLayer.create(groot);
          groot.publicLayer.showOn(groot);
        };
        return GRootSingleInstance;
      }(GRootEx));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HallData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameDecorators.ts', './GameConst.ts', './MttData.ts', './LobbyPage.ts', './RoleData.ts', './BlindLevelInfo.ts', './LobbyItemGame.ts', './Utils.ts', './mobx.ts'], function (exports) {
  var _createClass, cclegacy, GameDataClass, GameConst, MttData, ELobbyPage, RoleData, BlindLevelInfo, EGamePage, Utils, makeAutoObservable;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameDataClass = module.GameDataClass;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      MttData = module.MttData;
    }, function (module) {
      ELobbyPage = module.ELobbyPage;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      BlindLevelInfo = module.BlindLevelInfo;
    }, function (module) {
      EGamePage = module.EGamePage;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      makeAutoObservable = module.makeAutoObservable;
    }],
    execute: function () {
      var _Banner_jump_window_c, _class, _class2;
      cclegacy._RF.push({}, "58cdeVUnytDMYl/gyCyDuKK", "HallData", undefined);
      var EBANNER_TYPE = exports('EBANNER_TYPE', /*#__PURE__*/function (EBANNER_TYPE) {
        EBANNER_TYPE[EBANNER_TYPE["url"] = 1] = "url";
        EBANNER_TYPE[EBANNER_TYPE["windows"] = 2] = "windows";
        EBANNER_TYPE[EBANNER_TYPE["MTT"] = 3] = "MTT";
        return EBANNER_TYPE;
      }({}));
      var EBANNER_VIEW_ID = exports('EBANNER_VIEW_ID', /*#__PURE__*/function (EBANNER_VIEW_ID) {
        EBANNER_VIEW_ID[EBANNER_VIEW_ID["task"] = 1] = "task";
        EBANNER_VIEW_ID[EBANNER_VIEW_ID["mtt"] = 2] = "mtt";
        EBANNER_VIEW_ID[EBANNER_VIEW_ID["nlh"] = 3] = "nlh";
        EBANNER_VIEW_ID[EBANNER_VIEW_ID["mygame"] = 4] = "mygame";
        EBANNER_VIEW_ID[EBANNER_VIEW_ID["club"] = 5] = "club";
        EBANNER_VIEW_ID[EBANNER_VIEW_ID["ranking"] = 6] = "ranking";
        EBANNER_VIEW_ID[EBANNER_VIEW_ID["profile"] = 7] = "profile";
        EBANNER_VIEW_ID[EBANNER_VIEW_ID["wallet"] = 8] = "wallet";
        return EBANNER_VIEW_ID;
      }({}));
      //banner 跳转界面配置
      var Banner_jump_window_conf = exports('Banner_jump_window_conf', (_Banner_jump_window_c = {}, _Banner_jump_window_c[EBANNER_VIEW_ID.task] = {
        id: EBANNER_VIEW_ID.task
      }, _Banner_jump_window_c[EBANNER_VIEW_ID.mtt] = {
        id: EBANNER_VIEW_ID.mtt
      }, _Banner_jump_window_c[EBANNER_VIEW_ID.nlh] = {
        id: EBANNER_VIEW_ID.nlh
      }, _Banner_jump_window_c[EBANNER_VIEW_ID.mygame] = {
        id: EBANNER_VIEW_ID.mygame
      }, _Banner_jump_window_c[EBANNER_VIEW_ID.club] = {
        id: EBANNER_VIEW_ID.club
      }, _Banner_jump_window_c[EBANNER_VIEW_ID.ranking] = {
        id: EBANNER_VIEW_ID.ranking
      }, _Banner_jump_window_c[EBANNER_VIEW_ID.profile] = {
        id: EBANNER_VIEW_ID.profile
      }, _Banner_jump_window_c[EBANNER_VIEW_ID.wallet] = {
        id: EBANNER_VIEW_ID.wallet
      }, _Banner_jump_window_c));
      var HallData = exports('HallData', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function HallData() {
          this._MsgGetSignRewardConfigListRsp = void 0;
          this.rankList1 = void 0;
          this.rankList2 = void 0;
          this.rankList3 = void 0;
          this._MsgGetRankRewardCfgRsp = void 0;
          this._MsgGetPracticeCourtRewardInfoRsp = void 0;
          this._MsgPickPracticeCourtRewardRsp = void 0;
          this.taskRemainClaim = void 0;
          this.taskList = void 0;
          //banner
          this._bannerInfo = null;
          //首页房间列表
          this._msgHallInfoAll = new Map();
          //大厅界面数据
          this.lobbyOpenViewInfo = {
            pid: ELobbyPage.home
          };
          //游戏列表页签保存数据
          this._openGameppid = EGamePage.hot;
          //邀请奖励 和 被邀请奖励 以及 新人奖励  同时只有一个会弹出
          this._inviteAwardDataInfo = void 0;
          this._bHadAwardTask = false;
          //tgp 增长参数
          this.vitalityCur = 0;
          this.vitalityTimeTamp = 0;
          this.vitalityCur_client = 0;
          this.vitalityCurConfig = null;
          this.vitalityConfig = [];
          //tgp config
          this.cashExpRatio = 0;
          this.normalExpRatio = 0;
          this.stepAddTamp = 60 * 1;
          makeAutoObservable(this);
        }
        var _proto = HallData.prototype;
        _proto.setLobbyOpenViewInfo = function setLobbyOpenViewInfo(info) {
          this.lobbyOpenViewInfo = info;
        };
        _proto.setRankList = function setRankList(info) {
          if (info.type == 1) {
            this.rankList1 = info;
          } else if (info.type == 2) {
            this.rankList2 = info;
          } else if (info.type == 3) {
            this.rankList3 = info;
          }
        };
        _proto.setTaskList = function setTaskList(info) {
          this.taskList = info.list;
        };
        _proto.setTaskRemainClaim = function setTaskRemainClaim(info) {
          this.taskRemainClaim = info.remainClaim;
        }

        /**
         * 插入类型房间数据
         * @param pid 页签id
         *
         * @param msg 房间数据
         */;
        _proto.insertHallInfo = function insertHallInfo(pid, msg) {
          this._msgHallInfoAll.set(pid, msg);
        }

        /**
         * 根据配置推荐页返回游戏列表
         */;
        _proto.getHotGameByConf = function getHotGameByConf() {
          var info = this.getHallInfoByPid(GameConst.EHALL_PAGE_TYPE.HOT);
          info = Object.assign({}, info);
          info.roomList = info.roomList.slice(0, 5);
          return info;
        }

        /**
         *
         * @param pid 页签id
         * @param sortId 排序规则id
         */;
        _proto.getHallInfoByPid = function getHallInfoByPid(pid, sortId) {
          var retlist = [];
          var info = this._msgHallInfoAll.get(pid);
          if (!info) return;
          if (pid == GameConst.EHALL_PAGE_TYPE.MY_GAGES) {
            retlist = this.sortMyGame(info.roomList);
            info.roomList = retlist;
          } else if (pid == GameConst.EHALL_PAGE_TYPE.HOT) {
            var recommendconf = info.recommendConf || [];
            retlist = this.sortRecommandGameList(info.roomList, recommendconf, info.rateList);
            info.roomList = retlist;
          } else if (pid == GameConst.EHALL_PAGE_TYPE.MTT) {
            retlist = this.sortMTTGameList(info.roomList);
            info.roomList = retlist;
          } else if (pid == GameConst.EHALL_PAGE_TYPE.NLH || pid == GameConst.EHALL_PAGE_TYPE.SIXPLUS || pid == GameConst.EHALL_PAGE_TYPE.TG_CASH || pid == GameConst.EHALL_PAGE_TYPE.PLO4 || pid == GameConst.EHALL_PAGE_TYPE.TG_NHL) {
            retlist = this.sortNormalGameList(info.roomList);
            info.roomList = retlist;
          }
          return info;
        };
        _proto._getMTTNum = function _getMTTNum(info) {
          var bplaying = MttData.isMatchPlaying(info);
          var num = info.num || 0;
          if (bplaying) {
            var rankinfo = info.memberrank;
            var number = rankinfo.num;
            if (num > 0) num = number;
          }
          return num;
        };
        _proto.getBlindLvByMttInfo = function getBlindLvByMttInfo(mtt) {
          var status = mtt.buttonState ? mtt.buttonState : null;
          var timeInfo = mtt.time ? mtt.time : null;
          var timeType = timeInfo ? timeInfo.type : null; // 1=截止报名 2=比赛开始 3=延迟状态 4=已经开赛 5=比赛关闭 6=比赛结束
          var blindinfo = mtt.gameinfo;
          var blindround = blindinfo.blindround ? blindinfo.blindround : 1;
          var starttime = mtt.rule.startTime || 0;
          if (starttime > Utils.curServerTimeSecondstamp) {
            blindround = 1;
          } else if (status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH || status > 0 && (5 == timeType || 6 == timeType)) {
            blindround = 1;
          }
          return blindround;
        };
        _proto.sortNormalGameList = function sortNormalGameList(arr) {
          arr.sort(function (a, b) {
            if (a.normal.smallBlind == a.normal.smallBlind) {
              return a.normal.ante - b.normal.ante;
            }
            return a.normal.smallBlind - b.normal.smallBlind;
          });
          return arr;
        };
        _proto.sortMTTGameList = function sortMTTGameList(arr) {
          var lateRegs = [];
          var regs = [];
          var noRegs = [];
          for (var i = 0; i < arr.length; i++) {
            var ri = arr[i];
            if (ri.roomType != 2) {
              continue;
            }
            var mttInfo = ri.mtt;
            if (ri.mtt.rule.startTime < Utils.curServerTimeSecondstamp) {
              var curBlindLv = this.getBlindLvByMttInfo(ri.mtt);
              var rebuyFinishIdx = mttInfo.rule.endJoinTime || 0;
              if (rebuyFinishIdx >= curBlindLv) {
                var endTime = mttInfo.rule.startTime + rebuyFinishIdx * mttInfo.rule.raiseBlindTime;
                var remainTime = endTime - Utils.curServerTimeSecondstamp;
                var rankInfo = mttInfo ? mttInfo.memberrank : null;
                if (mttInfo.rule.AddOnTimes > 0) {
                  remainTime = remainTime + GameConst.MTT_ADDON_TIME_MIN * 60;
                }
                if (remainTime > 0) {
                  ri['remainTime'] = remainTime;
                  ri['noReg'] = false;
                  ri['num'] = this._getMTTNum(ri.mtt);
                  lateRegs.push(ri);
                } else {
                  ri['noReg'] = true;
                  ri['num'] = this._getMTTNum(ri.mtt);
                  noRegs.push(ri);
                }
              } else {
                ri['noReg'] = true;
                ri['num'] = this._getMTTNum(ri.mtt);
                noRegs.push(ri);
              }
            } else {
              ri['noReg'] = false;
              ri['num'] = this._getMTTNum(ri.mtt);
              regs.push(ri);
            }
          }
          lateRegs.sort(function (a, b) {
            if (a['remainTime'] == b['remainTime']) {
              return b['num'] - a['num'];
            }
            return a['remainTime'] - b['remainTime'];
          });
          regs.sort(function (a, b) {
            var startTimea = a.mtt.rule.startTime ? a.mtt.rule.startTime : 0; // 开赛时间
            var startTimeb = b.mtt.rule.startTime ? b.mtt.rule.startTime : 0; //开赛时间
            if (startTimea == startTimeb) {
              return b['num'] - a['num'];
            }
            return startTimea - startTimeb;
          });
          noRegs.sort(function (a, b) {
            var startTimea = a.mtt.rule.startTime ? a.mtt.rule.startTime : 0; // 开赛时间
            var startTimeb = b.mtt.rule.startTime ? b.mtt.rule.startTime : 0; //开赛时间
            if (startTimea == startTimeb) {
              return b['num'] - a['num'];
            }
            return startTimea - startTimeb;
          });
          return lateRegs.concat(regs, noRegs);
        };
        _proto.sortMyGame = function sortMyGame(list) {
          var arr = list.filter(function (info) {
            var roomType = info.roomType ? info.roomType : 0;
            var isEntrance = info.mtt.isEntrance ? info.mtt.isEntrance : 0;
            return roomType == 2 && isEntrance == 1;
          });
          var list1 = [];
          var list2 = [];
          var list3 = [];
          var list4 = [];
          for (var i = 0; i < arr.length; i++) {
            var ri = arr[i];
            var buttonState = ri.mtt.buttonState;
            var timeInfo = ri.mtt.time;
            if ((buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_WAITING && timeInfo.type == GameConst.MATCH.ETimeType.MATCH_BEGIN && timeInfo.days == GameConst.MATCH.ETimeType.MATCH_DELAY || buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_ENTER || buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_RE_ENTER || buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_DELAY_ENTER) && ri.mtt.rule.startTime < Utils.curServerTimeSecondstamp) {
              ri['num'] = this._getMTTNum(ri.mtt);
              list1.push(ri);
            } else if (ri.mtt.rule.startTime >= Utils.curServerTimeSecondstamp && (buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_WAITING || buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_APPLYING)) {
              ri['num'] = this._getMTTNum(ri.mtt);
              list2.push(ri);
            } else if (buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH || buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_NO_RANK || buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE || buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_LOOKON || buttonState == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_REBUY) {
              ri['num'] = this._getMTTNum(ri.mtt);
              list3.push(ri);
            } else {
              ri['num'] = this._getMTTNum(ri.mtt);
              list4.push(ri);
            }
          }
          list1.sort(function (a, b) {
            return b['num'] - a['num'];
          });
          list2.sort(function (a, b) {
            return b['num'] - a['num'];
          });
          list3.sort(function (a, b) {
            return b['num'] - a['num'];
          });
          list4.sort(function (a, b) {
            return b['num'] - a['num'];
          });
          return list1.concat(list2, list3, list4);
        };
        _proto.sortRecommandGameList = function sortRecommandGameList(infos, confs, rateList) {
          var _this = this;
          var retlist = [];
          var tmplist = [];
          var toplist = [];
          for (var i = 0; i < infos.length; i++) {
            var info = infos[i];
            if (info.roomType == GameConst.ERoomType.normal) {
              info['topWeight'] = info.normal.topWeight;
              if (info.normal.topWeight && info.normal.topWeight > 0) {
                toplist.push(info);
              } else {
                tmplist.push(info);
              }
            }
            if (info.roomType == GameConst.ERoomType.mtt) {
              info['topWeight'] = info.mtt.topWeight;
              if (info.mtt.topWeight && info.mtt.topWeight > 0) {
                toplist.push(info);
              } else {
                tmplist.push(info);
              }
            }
          }
          toplist.sort(function (a, b) {
            return b['topWeight'] - a['topWeight'];
          });
          tmplist.sort(function (a, b) {
            return b['topWeight'] - a['topWeight'];
          });
          if (confs.length <= 0) {
            retlist = retlist.concat(toplist, this.getRecommandGamesByNoConfig(tmplist, rateList));
          } else {
            confs.sort(function (a, b) {
              return b.weight - a.weight;
            });

            //获取一个推荐
            var _loop = function _loop() {
              var conf = confs[j];
              var coinTypeList = tmplist;
              if (conf.coinType) {
                coinTypeList = coinTypeList.filter(function (info) {
                  var coinType = info.costType ? info.costType : 0;
                  return coinType == conf.coinType;
                });
              }
              var onegame = _this.getOneGameByConfig(coinTypeList, conf.gameType);
              if (onegame) {
                retlist.push(onegame);
              } else {
                return 1; // continue
              }

              for (var index = 0; index < tmplist.length; index++) {
                var _info = tmplist[index];
                if (onegame.roomType == _info.roomType) {
                  if (onegame.roomType == GameConst.ERoomType.normal && onegame.normal.gameId == _info.normal.gameId) {
                    tmplist.splice(index, 1);
                    break;
                  }
                  if (onegame.roomType == GameConst.ERoomType.mtt && onegame.mtt.mttid == _info.mtt.mttid) {
                    tmplist.splice(index, 1);
                    break;
                  }
                }
              }
            };
            for (var j = 0; j < confs.length; j++) {
              if (_loop()) continue;
            }
            retlist = retlist.concat(toplist, this.getRecommandGamesByNoConfig(tmplist, rateList));
          }
          return retlist;
        };
        _proto.getOneGameByConfig = function getOneGameByConfig(infos, type) {
          var lateRegs = [];
          var noRegs = [];
          var regs = [];
          var lobbys = [];
          for (var i = 0; i < infos.length; i++) {
            var info = infos[i];
            info['sortIndex'] = i;
            if (type == GameConst.ERoomType.mtt && info.roomType == GameConst.ERoomType.mtt) {
              if (info.mtt.rule.startTime < Utils.curServerTimeSecondstamp) {
                var curBlindlv = MttData.getBlindLvByMttInfo(info.mtt);
                var rebuyFinishIdx = info.mtt.rule.endJoinTime;
                if (rebuyFinishIdx >= curBlindlv) {
                  var endtime = info.mtt.rule.startTime + rebuyFinishIdx * info.mtt.rule.raiseBlindTime;
                  var remainTime = endtime - Utils.curServerTimeSecondstamp;
                  var rankInfo = info.mtt.memberrank;
                  if (info.mtt.rule.AddOnTimes > 0) {
                    remainTime = remainTime + GameConst.MTT_ADDON_TIME_MIN * 60;
                  }
                  info['num'] = this._getMTTNum(info.mtt);
                  if (remainTime > 0) {
                    lateRegs.push(info);
                  } else {
                    noRegs.push(info);
                  }
                } else {
                  info['num'] = this._getMTTNum(info.mtt);
                  noRegs.push(info);
                }
              } else {
                info['num'] = this._getMTTNum(info.mtt);
                regs.push(info);
              }
            } else if (type == GameConst.ERoomType.normal && info.roomType == GameConst.ERoomType.normal) {
              if (info.normal.gameType == GameConst.TexasPlay.EGameType.SixPlus) {
                info['sort_type'] = 3;
              } else if (info.normal.gameType == GameConst.TexasPlay.EGameType.NLH) {
                info['sort_type'] = 1;
              } else {
                info['sort_type'] = 2;
              }
              lobbys.push(info);
            }
          }
          if (type == GameConst.ERoomType.mtt) {
            var tmplist = [];
            if (lateRegs.length > 0) {
              tmplist = lateRegs;
            } else if (regs.length > 0) {
              tmplist = regs;
            } else if (noRegs.length > 0) {
              tmplist = noRegs;
            }
            tmplist.sort(function (a, b) {
              if (a.mtt.rule.startTime == b.mtt.rule.startTime) {
                if (a['num'] == b['num']) {
                  return b.mtt.num - a.mtt.num;
                } else {
                  return b['num'] - a['num'];
                }
              } else {
                return a.mtt.rule.startTime - b.mtt.rule.startTime;
              }
            });
            if (tmplist.length > 0) return tmplist[0];
          } else if (type == GameConst.ERoomType.normal) {
            lobbys.sort(function (a, b) {
              if (a.normal.num == b.normal.num) {
                if (a['sort_type'] == b['sort_type']) {
                  if (a.normal.smallBlind == b.normal.smallBlind) {
                    return a.normal.ante - b.normal.ante;
                  } else {
                    return a.normal.smallBlind - b.normal.smallBlind;
                  }
                } else {
                  return a['sort_type'] - b['sort_type'];
                }
              } else {
                return b.normal.num - a.normal.num;
              }
            });
            if (lobbys.length > 0) {
              return lobbys[0];
            }
          } else {
            var _tmplist = [];
            for (var _i = 0; _i < infos.length; _i++) {
              var _info2 = infos[_i];
              if (_info2.roomType == GameConst.ERoomType.normal) {
                _info2['num'] = _info2.normal.topWeight;
              }
              if (_info2.roomType == GameConst.ERoomType.mtt) {
                _info2['num'] = _info2.mtt.topWeight;
              }
              _tmplist.push(_info2);
            }
            _tmplist.sort(function (a, b) {
              return b['num'] - a['num'];
            });
            if (_tmplist.length > 0) {
              return _tmplist[0];
            }
          }
        };
        _proto.getRecommandGamesByNoConfig = function getRecommandGamesByNoConfig(infos, rateList) {
          var retlist = [];
          if (!infos || infos.length <= 0) return retlist;
          for (var i = 0; i < infos.length; i++) {
            var info = infos[i];
            var num = 0;
            var sb = 0;
            var anti = 0;
            var changeRage = 1;
            for (var index = 0; index < rateList.length; index++) {
              var element = rateList[index];
              if (element.coinType == info.costType) {
                changeRage = element.goldRate;
              }
            }
            if (info.roomType == GameConst.ERoomType.mtt) {
              var _info$mtt;
              num = this._getMTTNum(info.mtt);
              var blindinfo = info.mtt.gameinfo;
              var blindround = blindinfo.blindround ? blindinfo.blindround : 1;
              var starttime = info.mtt.rule.startTime || 0;
              if (starttime > Utils.curServerTimeSecondstamp) {
                blindround = 1;
              }
              var blindIdx = ((_info$mtt = info.mtt) == null || (_info$mtt = _info$mtt.rule) == null ? void 0 : _info$mtt.blindType) - 1;
              var blindroundIdx = blindround - 1;
              if (blindIdx < BlindLevelInfo.Config.length) {
                sb = BlindLevelInfo.Config[blindIdx][blindroundIdx].bigBlinds * 0.5 * changeRage;
                anti = BlindLevelInfo.Config[blindIdx][blindroundIdx].ante * changeRage;
              }
            } else if (info.roomType == GameConst.ERoomType.normal) {
              var rate = info.costType == GameConst.EGameCostType.cash ? 100 : 1;
              num = info.normal.num;
              sb = info.normal.smallBlind * changeRage / rate;
              anti = info.normal.ante * changeRage / rate;
            }
            info['num'] = num;
            info['sb'] = sb;
            info['anti'] = anti;
            retlist.push(info);
          }
          retlist.sort(function (a, b) {
            if (a['num'] == b['num']) {
              if (a['sb'] == b['sb']) {
                return a['anti'] - b['anti'];
              } else {
                return a['sb'] - b['sb'];
              }
            } else {
              return b['num'] - a['num'];
            }
          });
          return retlist;
        };
        //(s)
        // vitalitySub: number = 0;
        // vitalityTotal: number = 0;
        // vitalityAdd: number = 0;
        _proto.setVitalityCur = function setVitalityCur(value) {
          this.vitalityCur = value;
          this.vitalityCur_client = this.vitalityCur;
        };
        _proto.setVitalityTime = function setVitalityTime(value) {
          this.vitalityTimeTamp = value;
        };
        _proto.updataCurTGPConfigByLevel = function updataCurTGPConfigByLevel(level) {
          var len = this.vitalityConfig.length;
          if (!this.vitalityConfig || level < 1 || len < 0 || level > len) {
            return null;
          }
          return this.vitalityConfig[level - 1];
        };
        _proto.setVitalityInfo = function setVitalityInfo(info) {
          this.vitalityCur = info.energy;
          this.vitalityCur_client = info.energy;
          this.vitalityTimeTamp = info.energyLastTimestamp;
          this.vitalityConfig = info.levelConfList || [];
          this.cashExpRatio = info.cashExpRatio;
          this.normalExpRatio = info.normalExpRatio;
        };
        _proto.setCurVitalityConfig = function setCurVitalityConfig() {
          this.vitalityCurConfig = this.updataCurTGPConfigByLevel(RoleData.inst.level);
        };
        _proto.setVitalityAddFunc = function setVitalityAddFunc() {
          var num = this.vitalityCur;
          num += Math.floor((Utils.curServerTimeSecondstamp - this.vitalityTimeTamp) / this.stepAddTamp) * this.vitalityCurConfig.energyRecover;
          if (num > this.vitalityCurConfig.energyLimit) {
            this.vitalityCur_client = this.vitalityCurConfig.energyLimit;
          } else {
            this.vitalityCur_client = num;
          }
        };
        _proto.updataVitalityCur_client = function updataVitalityCur_client() {
          this.setCurVitalityConfig();
          this.vitalityCur_client = this.vitalityCur + Math.floor((Utils.curServerTimeSecondstamp - this.vitalityTimeTamp) / this.stepAddTamp) * this.vitalityCurConfig.energyRecover;
        };
        _proto.reset = function reset() {};
        _createClass(HallData, [{
          key: "MsgGetSignRewardConfigListRsp",
          get: function get() {
            return this._MsgGetSignRewardConfigListRsp;
          },
          set: function set(msg) {
            this._MsgGetSignRewardConfigListRsp = msg;
          }
        }, {
          key: "MsgGetRankRewardCfgRsp",
          get: function get() {
            return this._MsgGetRankRewardCfgRsp;
          },
          set: function set(msg) {
            this._MsgGetRankRewardCfgRsp = msg;
          }
        }, {
          key: "MsgGetPracticeCourtRewardInfoRsp",
          get: function get() {
            return this._MsgGetPracticeCourtRewardInfoRsp;
          },
          set: function set(msg) {
            this._MsgGetPracticeCourtRewardInfoRsp = msg;
          }
        }, {
          key: "MsgPickPracticeCourtRewardRsp",
          get: function get() {
            return this._MsgPickPracticeCourtRewardRsp;
          },
          set: function set(msg) {
            this._MsgPickPracticeCourtRewardRsp = msg;
          }
        }, {
          key: "bannerInfo",
          get: function get() {
            return this._bannerInfo;
          },
          set: function set(info) {
            this._bannerInfo = info;
          }
        }, {
          key: "openGameppid",
          get: function get() {
            return this._openGameppid;
          },
          set: function set(ppid) {
            this._openGameppid = ppid;
          }
        }, {
          key: "inviteAwardData",
          get:
          //[{propid:1003, num:100}, {propid:1001, num:100}];
          function get() {
            return this._inviteAwardDataInfo;
          },
          set: function set(info) {
            this._inviteAwardDataInfo = info;
          }
        }, {
          key: "GetAwardTaskStatus",
          get: function get() {
            return this._bHadAwardTask;
          },
          set: function set(status) {
            this._bHadAwardTask = status;
          }
        }], [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return HallData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HallProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './CocosDevKit.ts', './HallData.ts', './RoleData.ts', './HttpBanner.ts', './GameConfig.ts', './GameConst.ts', './RedHotData.ts', './gameproto.js', './Logger.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, MarkForNetEventListener, NetProxyClass, GameNetProxyBase, HallData, RoleData, HttpBanner, GameConfig, GameConst, RedHotData, _cjsExports, Log, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      NetProxyClass = module.NetProxyClass;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, null, function (module) {
      HallData = module.HallData;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      HttpBanner = module.HttpBanner;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      RedHotData = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _class3;
      cclegacy._RF.push({}, "3ff4fiX9PJKcpts2yiX688B", "HallProxy", undefined);
      var HallProxy = exports('HallProxy', (_dec = NetProxyClass(), _dec2 = MarkForNetEventListener(_cjsExports.hall.MsgTGPInfoRsp.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.hall.MsgHallTableCountCast.ProtocolID), _dec4 = MarkForNetEventListener(_cjsExports.hall.MsgGetRankRewardCfgRsp.ProtocolID), _dec5 = MarkForNetEventListener(_cjsExports.hall.MsgGetTaskListRsp.ProtocolID), _dec6 = MarkForNetEventListener(_cjsExports.hall.MsgTaskClaimChangedCast.ProtocolID), _dec7 = MarkForNetEventListener(_cjsExports.hall.MsgGetHallInfoRsp.ProtocolID), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(HallProxy, _GameNetProxyBase);
        function HallProxy() {
          return _GameNetProxyBase.apply(this, arguments) || this;
        }
        var _proto = HallProxy.prototype;
        _proto.prepareRequest = function prepareRequest() {
          Log.info.log('HallProxy', 'prepareRequest');
          return Promise.all([this.getBannerInfo(), this.getRankRewardCfg(), this.getTaskList(), this.getEnergyCfg()
          // this.onMsgGetPracticeCourtRewardInfo()
          ]);
        };

        _proto.getBannerInfo = function getBannerInfo() {
          HttpBanner.create().post(false).then(function (resp) {
            if (!resp || resp.code != 200) return;
            if (resp && resp.data) {
              //权重排序
              var ret = [];
              for (var idx = 0; idx < resp.data.length; idx++) {
                var item = resp.data[idx];
                ret.push(item);
              }
              ret.sort(function (a, b) {
                return a.sort_weight = -b.sort_weight;
              });
              HallData.inst.bannerInfo = ret;
            }
          });
        };
        _proto.getEnergyCfg = function getEnergyCfg() {
          var _this = this;
          return new Promise(function (resolve) {
            var msg = _cjsExports.hall.MsgTGPInfo.create();
            _this.send(_cjsExports.hall.MsgTGPInfo.ProtocolID, _cjsExports.hall.MsgTGPInfo.encode(msg).finish(), resolve);
          });
        };
        _proto.onMsgTGPInfoRsp = function onMsgTGPInfoRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgTGPInfoRsp);
            HallData.inst.setVitalityInfo(info);
          }
        };
        _proto.getSignRewardConfigList = function getSignRewardConfigList() {
          var _this2 = this;
          if (HallData.inst.MsgGetSignRewardConfigListRsp) return Promise.resolve();
          var msg = _cjsExports.hall.MsgGetSignRewardConfigList.create();
          // if (HallData.inst.MsgGetSignRewardConfigListRsp) {
          //     msg.md5 = HallData.inst.MsgGetSignRewardConfigListRsp.md5;
          // } else {
          //     msg.md5 = Utils.curLocalTimestamp.toString();
          // }
          return new Promise(function (resolve) {
            _this2.send(_cjsExports.hall.MsgGetSignRewardConfigList.ProtocolID, _cjsExports.hall.MsgGetSignRewardConfigList.encode(msg).finish(), resolve);
          });
        };
        _proto.getTodaySignReward = function getTodaySignReward() {
          var msg = _cjsExports.hall.MsgGetTodaySignReward.create();
          this.send(_cjsExports.hall.MsgGetTodaySignReward.ProtocolID, _cjsExports.hall.MsgGetTodaySignReward.encode(msg).finish());
        };
        _proto.getHallRoomId = function getHallRoomId(gameId, onRsp, index) {
          if (index === void 0) {
            index = 0;
          }
          var msg = _cjsExports.hall.MsgGetHallRoomId.create();
          msg.gameId = gameId;
          msg.index = index; // index 使用默认的 0 会返回服务器的第一个房间
          this.send(_cjsExports.hall.MsgGetHallRoomId.ProtocolID, _cjsExports.hall.MsgGetHallRoomId.encode(msg).finish(), onRsp);
        };
        _proto.onMsgHallTableCountCast = function onMsgHallTableCountCast(netdata) {
          // 玩家休闲场手数变化
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgHallTableCountCast);
            if (info.playerid == RoleData.inst.playerID) ;
          }
        }

        /**
         * @param mode 1.赢取金币。2.赢取比赛奖励。3.拥有的金币
         */;
        _proto.getRankList = function getRankList(mode) {
          var msg = _cjsExports.hall.MsgGetRankList.create();
          msg.type = mode;
          this.send(_cjsExports.hall.MsgGetRankList.ProtocolID, _cjsExports.hall.MsgGetRankList.encode(msg).finish(), this.onMsgGetRankListRsp.bind(this));
        };
        _proto.onMsgGetRankListRsp = function onMsgGetRankListRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgGetRankListRsp);
            HallData.inst.setRankList(info);
          }
        };
        _proto.getRankRewardCfg = function getRankRewardCfg() {
          var _this3 = this;
          if (HallData.inst.MsgGetRankRewardCfgRsp) return Promise.resolve();
          var msg = _cjsExports.hall.MsgGetRankRewardCfg.create();
          if (HallData.inst.MsgGetRankRewardCfgRsp) {
            msg.md5 = HallData.inst.MsgGetRankRewardCfgRsp.md5;
          } else {
            msg.md5 = Utils.curLocalTimestamp.toString();
          }
          return new Promise(function (resolve) {
            _this3.send(_cjsExports.hall.MsgGetRankRewardCfg.ProtocolID, _cjsExports.hall.MsgGetRankRewardCfg.encode(msg).finish(), resolve);
          });
        };
        _proto.onMsgGetRankRewardConfigRsp = function onMsgGetRankRewardConfigRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgGetRankRewardCfgRsp);
            if (info.list && info.list.length > 0) {
              if (!HallData.inst.MsgGetRankRewardCfgRsp || HallData.inst.MsgGetRankRewardCfgRsp.md5 != info.md5) {
                HallData.inst.MsgGetRankRewardCfgRsp = info;
              }
            }
          }
        };
        _proto.getTaskList = function getTaskList() {
          var _this4 = this;
          if (HallData.inst.taskList) return Promise.resolve();
          return new Promise(function (resolve) {
            _this4.send(_cjsExports.hall.MsgGetTaskList.ProtocolID, undefined, resolve);
          });
        };
        _proto.onMsgGetTaskListRsp = function onMsgGetTaskListRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgGetTaskListRsp);
            HallData.inst.setTaskList(info);
          }
        }

        /**
         * 领取任务奖励
         * @param taskId
         * @param onRsp
         */;
        _proto.claimTaskReward = function claimTaskReward(taskId, onRsp) {
          var msg = _cjsExports.hall.MsgClaimTaskReward.create();
          msg.taskId = taskId;
          this.send(_cjsExports.hall.MsgClaimTaskReward.ProtocolID, _cjsExports.hall.MsgClaimTaskReward.encode(msg).finish(), onRsp);
        };
        _proto.onMsgTaskClaimChangedCast = function onMsgTaskClaimChangedCast(netdata) {
          // 剩余待领取任务数量变化
          var info = netdata.getData(_cjsExports.hall.MsgTaskClaimChangedCast);
          HallData.inst.setTaskRemainClaim(info);
        }

        //获取首页信息
        ;

        _proto.getHallInfo = function getHallInfo(pageid, onRsp) {
          var msg = _cjsExports.hall.MsgGetHallInfo.create();
          msg.pageId = pageid;
          msg.channel = GameConfig.channel;
          this.send(_cjsExports.hall.MsgGetHallInfo.ProtocolID, _cjsExports.hall.MsgGetHallInfo.encode(msg).finish(), function (netdata) {
            if (netdata.isRetSuccess()) {
              var info = netdata.getData(_cjsExports.hall.MsgGetHallInfoRsp);
              HallData.inst.insertHallInfo(info.pageId, info);
              if (pageid == GameConst.EHALL_PAGE_TYPE.MY_GAGES) {
                RedHotData.inst.checkMyGameRedHot();
              }
              onRsp && onRsp(netdata);
            } else {
              console.error(netdata.getRetCode);
            }
          });
        };
        _proto.onMsgGetHallInfoRsp = function onMsgGetHallInfoRsp(netdata) {
          // if (netdata.isRetSuccess()) {
          //     let info = netdata.getData(gameproto.hall.MsgGetHallInfoRsp);
          //     HallData.inst.insertHallInfo(info.pageId, info);
          //     if (pageid == GameConst.EHALL_PAGE_TYPE.MY_GAGES) {
          //         RedHotData.inst.checkMyGameRedHot();
          //     }
          //     onRsp && onRsp(netdata);
          // } else {
          //     console.error(netdata.getRetCode);
          // }
        }

        //TG 获取练习币状态
        ;

        _proto.onMsgGetPracticeCourtRewardInfo = function onMsgGetPracticeCourtRewardInfo() {
          this.send(_cjsExports.hall.MsgGetPracticeCourtRewardInfo.ProtocolID, _cjsExports.hall.MsgGetPracticeCourtRewardInfo.encode({}).finish(), this.onMsgGetPracticeCourtRewardInfoRsp.bind(this));
        };
        _proto.onMsgGetPracticeCourtRewardInfoRsp = function onMsgGetPracticeCourtRewardInfoRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgGetPracticeCourtRewardInfoRsp);
            HallData.inst.MsgGetPracticeCourtRewardInfoRsp = info;
          }
        }

        //领取练习币
        ;

        _proto.onMsgPickPracticeCourtReward = function onMsgPickPracticeCourtReward(cb) {
          this.send(_cjsExports.hall.MsgPickPracticeCourtReward.ProtocolID, _cjsExports.hall.MsgPickPracticeCourtReward.encode({}).finish(), cb);
        };
        _proto.onMsgPickPracticeCourtRewardRsp = function onMsgPickPracticeCourtRewardRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgPickPracticeCourtRewardRsp);
            HallData.inst.MsgPickPracticeCourtRewardRsp = info;
          }
        }

        //获取任务列表
        ;

        _proto.getTaskListReq = function getTaskListReq() {
          this.send(_cjsExports.hall.MsgGetTaskList.ProtocolID, _cjsExports.hall.MsgGetTaskList.encode({}).finish());
        }

        //领取奖励
        ;

        _proto.sendTaskAwardReq = function sendTaskAwardReq(id) {
          var info = _cjsExports.hall.MsgClaimTaskReward.create();
          info.taskId = id;
          this.send(_cjsExports.hall.MsgClaimTaskReward.ProtocolID, _cjsExports.hall.MsgClaimTaskReward.encode(info).finish());
        }
        //体力换取tgp币
        ;

        _proto.getTGP = function getTGP(cb) {
          this.send(_cjsExports.hall.MsgGetTGP.ProtocolID, _cjsExports.hall.MsgGetTGP.encode({}).finish(), function (netdata) {
            if (netdata.isRetSuccess()) {
              var info = netdata.getData(_cjsExports.hall.MsgGetTGPRsp);
              HallData.inst.setVitalityTime(info.energyLastTimestamp);
              HallData.inst.setVitalityCur(info.energy);
              cb && cb(info);
            }
          });
        }

        //任务完成
        ;

        _proto.FinishTaskReq = function FinishTaskReq(taskId) {
          var info = _cjsExports.hall.MsgFinishClientTask.create();
          info.taskId = taskId;
          this.send(_cjsExports.hall.MsgFinishClientTask.ProtocolID, _cjsExports.hall.MsgFinishClientTask.encode(info).finish());
        }

        //获取邀请配置信息
        ;

        _proto.sendInviteConfigReq = function sendInviteConfigReq() {
          var info = _cjsExports.hall.MsgInviteConfigReq.create();
          this.send(_cjsExports.hall.MsgInviteConfigReq.ProtocolID, _cjsExports.hall.MsgInviteConfigReq.encode(info).finish());
        }

        //获取邀请奖励信息
        ;

        _proto.sendInviteAwardListReq = function sendInviteAwardListReq(pageId) {
          var info = _cjsExports.hall.MsgInviteAwardListReq.create();
          info.iPageId = pageId;
          this.send(_cjsExports.hall.MsgInviteAwardListReq.ProtocolID, _cjsExports.hall.MsgInviteAwardListReq.encode(info).finish());
        }

        //test
        ;

        _proto.addTest = function addTest() {
          // let data:LobbyConst.GetRewardPageDataInfo ={
          //     propid:1003,
          //     num:2000,
          // };
          // HallData.inst.inviteAwardData = [{propid:1003, num:200}, {propid:1001, num:200}];
          var awardInfo = []; // = HallData.inst.inviteAwardData;
          var rewards = [{
            propid: 1001,
            num: 200
          }, {
            propid: 1001,
            num: 200
          }];
          rewards.forEach(function (item, index) {
            var ipropId = item.propid;
            var iNum = item.num;
            var bAddData = true;
            if (awardInfo && awardInfo.length > 0) {
              var nowItem = awardInfo.find(function (item1) {
                return item1.propid === ipropId;
              });
              if (nowItem) {
                nowItem.num = nowItem.num + iNum;
                bAddData = false;
              }
            }
            if (bAddData) {
              var localInfo = {
                propid: ipropId,
                num: iNum
                //info.pic = item.pic;//todo后续扩展 目前没有走后台道具配置
              };

              awardInfo.push(localInfo);
            }
            //HallData.inst.inviteAwardData = awardInfo;
          });
        }

        //获取奖励信息
        ;

        _proto.getInviteAwardReq = function getInviteAwardReq() {
          var info = _cjsExports.hall.MsgInviteAwardInfoReq.create();
          this.send(_cjsExports.hall.MsgInviteAwardInfoReq.ProtocolID, _cjsExports.hall.MsgInviteAwardInfoReq.encode(info).finish());
        };
        _createClass(HallProxy, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return HallProxy;
      }(GameNetProxyBase), _class3._inst = void 0, _class3), (_applyDecoratedDescriptor(_class2.prototype, "onMsgTGPInfoRsp", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgTGPInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgHallTableCountCast", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgHallTableCountCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetRankRewardConfigRsp", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetRankRewardConfigRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetTaskListRsp", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetTaskListRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgTaskClaimChangedCast", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgTaskClaimChangedCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetHallInfoRsp", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetHallInfoRsp"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HandCardDayItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_HandCardDayItem.ts'], function (exports) {
  var _inheritsLoose, cclegacy, CustomFguiClass, UI_HandCardDayItem;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_HandCardDayItem = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "c809fMldytH4p7eMRGx3jni", "HandCardDayItem", undefined);
      var HandCardDayItem = exports('HandCardDayItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_HandCardDayItem) {
        _inheritsLoose(HandCardDayItem, _UI_HandCardDayItem);
        function HandCardDayItem() {
          return _UI_HandCardDayItem.apply(this, arguments) || this;
        }
        var _proto = HandCardDayItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_HandCardDayItem.prototype.onConstruct.call(this);
          this.name = 'HandCardDayItem';
        };
        return HandCardDayItem;
      }(UI_HandCardDayItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HandCardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_HandCardItem.ts', './gameproto.mjs_cjs=&original=.js', './Utils.ts', './GameConst.ts', './HandCardReviewPage.ts', './StatisticsProxy.ts', './GameDecorators.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, color, UI_HandCardItem, Utils, GameConst, HandCardReviewType, StatisticsProxy, MarkForNetEventListener, CustomFguiClass, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      UI_HandCardItem = module.default;
    }, null, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      HandCardReviewType = module.HandCardReviewType;
    }, function (module) {
      StatisticsProxy = module.StatisticsProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "c9061U1sDVEo7ixzAKNqMfr", "HandCardItem", undefined);
      var HandCardItem = exports('HandCardItem', (_dec = MarkForNetEventListener(_cjsExports.statistics.MsgCollectRecordAddRsp.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_HandCardItem) {
        _inheritsLoose(HandCardItem, _UI_HandCardItem);
        function HandCardItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_HandCardItem.call.apply(_UI_HandCardItem, [this].concat(args)) || this;
          _this._showType = HandCardReviewType.myhand;
          _this.cardNodes = [];
          _this._itemData = null;
          return _this;
        }
        var _proto = HandCardItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_HandCardItem.prototype.onConstruct.call(this);
          this.name = 'HandCardItem';
          this.cardNodes.push(this.m_cardNode0);
          this.cardNodes.push(this.m_cardNode1);
          this.cardNodes.push(this.m_cardNode2);
          this.cardNodes.push(this.m_cardNode3);
          this.cardNodes.push(this.m_cardNode4);
          this.cardNodes.push(this.m_cardNode5);
          this.m_BtnDelete.onClick(this.onBtnDeleteClick, this);
          this.m_BtnShare.onClick(this.onBtnShareClick, this);
          this.m_BtnCollect.onClick(this.onBtnCollectClick, this);
          this.m_BtnCollectSelect.onClick(this.onBtnCollectClick, this);
        };
        _proto.setDate = function setDate(data, type) {
          var _pageindex;
          this._itemData = data;
          this._showType = type;
          this.m_BtnDelete.visible = !(type == HandCardReviewType.myhand);
          this.m_BtnCollect.visible = type == HandCardReviewType.myhand;
          this.m_BtnCollectSelect.visible = type == HandCardReviewType.myhand;
          this.m_BtnShare.visible = false; //暂时没有回放功能

          this.m_TextTime.text = Utils.formatDateWithTime(data.cTime * 1000, false).slice(11);
          this.m_TextGameType.text = Utils.getRoomTypeStr(data.sceneType == GameConst.SCENE_TYPE.lobby, data.gameType, data.extType == 1);
          this.m_TextResult.text = Utils.toFormat(data.profit, 2, data.coinType == GameConst.EGameCostType.cash, true);
          this.m_TextResult.color = data.profit < 0 ? color('#D25148') : color('#35B898');
          var smallBlind = Utils.formatDoubleValue(data.smallBlind);
          this.m_TextBS.text = Utils.toFormat(smallBlind) + "/" + Utils.toFormat(smallBlind * 2);
          var cards = data.handcards.split(',');
          var pageindex = (_pageindex = {}, _pageindex[2] = 0, _pageindex[4] = 1, _pageindex[5] = 2, _pageindex[6] = 3, _pageindex);
          this.m_CardNumControl.selectedIndex = pageindex[cards.length];
          for (var idx = 0; idx < cards.length; idx++) {
            var card_v = cards[idx];
            var node = this.cardNodes[idx].component;
            node.front = true;
            node.showEye = false;
            node.code = parseInt(card_v);
          }
          //刷新收藏
          this.collectControlView(data.collected);
          // let node = this.m_BtnCollect.getChild('icon', fgui.GLoader);
          // node.color = data.collected ? Color1EFFB0.clone() : Color.WHITE.clone();
        };

        _proto.onBtnDeleteClick = function onBtnDeleteClick() {
          StatisticsProxy.inst.onMsgCollectRecordDel(this._itemData.collectId);
        };
        _proto.onBtnCollectClick = function onBtnCollectClick() {
          if (this._itemData.collected) {
            StatisticsProxy.inst.onMsgCollectRecordDel(this._itemData.collectId);
          } else {
            StatisticsProxy.inst.onMsgCollectRecordAdd(this._itemData.collectId);
          }
        };
        _proto.onBtnShareClick = function onBtnShareClick() {};
        _proto.onMsgCollectRecordAddRsp = function onMsgCollectRecordAddRsp(netdata) {
          var info = netdata.getData(_cjsExports.statistics.MsgCollectRecordAddRsp);
          if (netdata.isRetSuccess()) {
            if (info.collectId == this._itemData.collectId) {
              this._itemData.collected = true;
              this.grootInst.showCenterTip('TXT_639');
              this.collectControlView(true);
              // let node = this.m_BtnCollect.getChild('icon', fgui.GLoader);
              // node.color = this._itemData.collected ? Color1EFFB0.clone() : Color.WHITE.clone();
            }
          }
        };

        _proto.collectControlView = function collectControlView(bcollect) {
          this.m_CollectControl.selectedIndex = bcollect ? 0 : 1;
        };
        return HandCardItem;
      }(UI_HandCardItem), _applyDecoratedDescriptor(_class2.prototype, "onMsgCollectRecordAddRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgCollectRecordAddRsp"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HandCardReviewItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_HandCardReviewItem.ts', './HandCardReviewPage.ts', './StatisticsData.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_HandCardReviewItem, HandCardReviewType, StatisticsData, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_HandCardReviewItem = module.default;
    }, function (module) {
      HandCardReviewType = module.HandCardReviewType;
    }, function (module) {
      StatisticsData = module.StatisticsData;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "f7f7byR4FpDVLS6FWi8956T", "HandCardReviewItem", undefined);
      var HandCardReviewItem = exports('HandCardReviewItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_HandCardReviewIte) {
        _inheritsLoose(HandCardReviewItem, _UI_HandCardReviewIte);
        function HandCardReviewItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_HandCardReviewIte.call.apply(_UI_HandCardReviewIte, [this].concat(args)) || this;
          _this._type = HandCardReviewType.myhand;
          _this._dataList = [];
          return _this;
        }
        var _proto = HandCardReviewItem.prototype;
        _proto.setType = function setType(type) {
          var _this2 = this;
          this._type = type;
          this._dataList = [];
          var ret;
          if (type == HandCardReviewType.myhand) {
            ret = StatisticsData.inst.getPlayerHandsRecordSortData();
          } else {
            ret = StatisticsData.inst.getCollectRecordSortData();
          }
          ret.forEach(function (value, key) {
            _this2._dataList.push({
              bData: true,
              time: key
            });
            for (var i = 0; i < value.length; i++) {
              _this2._dataList.push({
                bData: false,
                date: value[i]
              });
            }
          });
          this.m_list.numItems = this._dataList.length;
          this.m_noneCmpt.visible = this._dataList.length <= 0;
        };
        _proto.onConstruct = function onConstruct() {
          _UI_HandCardReviewIte.prototype.onConstruct.call(this);
          this.name = 'HandCardReviewItem';
          this.m_list.setVirtual();
          this.m_list.itemProvider = this.getListItemResource.bind(this);
          this.m_list.itemRenderer = this.renderListItem.bind(this);
        };
        _proto.getListItemResource = function getListItemResource(index) {
          var msg = this._dataList[index];
          if (msg.bData) return 'ui://Lobby/HandCardDayItem';else return 'ui://Lobby/HandCardItem';
        };
        _proto.renderListItem = function renderListItem(index, item) {
          var msg = this._dataList[index];
          if (msg.bData) {
            var itemNode = item;
            itemNode.m_title.text = msg.time.slice(5);
          } else {
            var _itemNode = item;
            _itemNode.setDate(msg.date, this._type);
          }
        };
        return HandCardReviewItem;
      }(UI_HandCardReviewItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HandCardReviewPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_HandCardReviewPage.ts', './GameDecorators.ts', './gameproto.mjs_cjs=&original=.js', './StatisticsData.ts', './StatisticsProxy.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, isValid, EEnterType, GameWindowBase, UI_HandCardReviewPage, MarkForNetEventListener, StatisticsData, StatisticsProxy, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      isValid = module.isValid;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_HandCardReviewPage = module.default;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, null, function (module) {
      StatisticsData = module.StatisticsData;
    }, function (module) {
      StatisticsProxy = module.StatisticsProxy;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "173d7UKjktMC5EWO1tRXI9i", "HandCardReviewPage", undefined);
      var HandCardReviewType = exports('HandCardReviewType', /*#__PURE__*/function (HandCardReviewType) {
        HandCardReviewType[HandCardReviewType["myhand"] = 0] = "myhand";
        HandCardReviewType[HandCardReviewType["collection"] = 1] = "collection";
        return HandCardReviewType;
      }({}));
      var HandCardReviewPage = exports('HandCardReviewPage', (_dec = MarkForNetEventListener(_cjsExports.statistics.MsgCollectRecordDelRsp.ProtocolID), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(HandCardReviewPage, _GameWindowBase);
        function HandCardReviewPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby', 'FGUI/Poker'];
          _this.paneClass = UI_HandCardReviewPage;
          _this.coverUnderlyingWindow = true;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.enterType = EEnterType.horizontal;
          _this.reportOpenPage = true;
          _this.pageName = 'HandCardReviewPage';
          _this.inputParams = {
            showType: HandCardReviewType.myhand
          };
          return _this;
        }
        HandCardReviewPage.create = function create(from) {
          return new HandCardReviewPage(from);
        };
        var _proto = HandCardReviewPage.prototype;
        _proto.setInputParams = function setInputParams(params) {
          _GameWindowBase.prototype.setInputParams.call(this, params);
        };
        _proto.onInit = function onInit() {
          this.pane.m_PageControl.onChanged(this.onPageChange, this);
          this.pane.m_PageControl.selectedIndex = this.inputParams.showType;
          StatisticsProxy.inst.onMsgGetPlayerHandsRecord(this.onMsgGetPlayerHandsRecordRsp.bind(this));
        };
        _proto.onPageChange = function onPageChange() {
          if (!isValid(this.node) || !this.node.active) return;
          var idx = this.pane.m_PageControl.selectedIndex;
          var item = this.pane.m_ListContent.getChildAt(idx);
          item.setType(idx);
        };
        _proto.onMsgCollectRecordDelRsp = function onMsgCollectRecordDelRsp(netdata) {
          var info = netdata.getData(_cjsExports.statistics.MsgCollectRecordDelRsp);
          if (netdata.isRetSuccess()) {
            StatisticsData.inst.modifyPlayerHandsRecodeByCollectId(info.collectId, false);
            this.onPageChange();
          }
        };
        _proto.onMsgGetPlayerHandsRecordRsp = function onMsgGetPlayerHandsRecordRsp(netdata) {
          var info = netdata.getData(_cjsExports.statistics.MsgGetPlayerHandsRecordRsp);
          if (netdata.isRetSuccess()) {
            this.onPageChange();
          }
        };
        return HandCardReviewPage;
      }(GameWindowBase), _applyDecoratedDescriptor(_class.prototype, "onMsgCollectRecordDelRsp", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgCollectRecordDelRsp"), _class.prototype), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HeadItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_HeadItem.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, UI_HeadItem, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      UI_HeadItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "5c519jPSDVKW4YtND9YEzeZ", "HeadItem", undefined);
      var Color1EFFB0 = color('#1EFFB0');
      var Color8B96A0 = color('#8B96A0');
      var HeadItem = exports('HeadItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_HeadItem) {
        _inheritsLoose(HeadItem, _UI_HeadItem);
        function HeadItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_HeadItem.call.apply(_UI_HeadItem, [this].concat(args)) || this;
          _this.imgIdx = 0;
          _this.imgUrl = '';
          return _this;
        }
        var _proto = HeadItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_HeadItem.prototype.onConstruct.call(this);
          this.name = 'HeadItem';
        };
        _proto.setItem = function setItem(idx, url) {
          this.imgIdx = idx;
          this.imgUrl = url;
          var node = this.m_HeadNode.component;
          node.setContent(url);
        };
        _proto.setSelectStatus = function setSelectStatus(able) {
          // let node = this.m_HeadNode.component as Avatar;
          this.m_frame.color = able ? Color1EFFB0.clone() : Color8B96A0.clone();
        };
        return HeadItem;
      }(UI_HeadItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HotUpdate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Logger.ts'], function (exports) {
  var _createClass, cclegacy, native, path, sys, Log;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      native = module.native;
      path = module.path;
      sys = module.sys;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3331cRtQU5KA5tc3w+HIdIv", "HotUpdate", undefined);
      var EUpdateState = exports('EUpdateState', /*#__PURE__*/function (EUpdateState) {
        EUpdateState["ready"] = "ready";
        EUpdateState["updateing"] = "updateing";
        EUpdateState["failed"] = "failed";
        EUpdateState["finished"] = "finished";
        return EUpdateState;
      }({}));
      var HotUpdateConfig = exports('HotUpdateConfig', /*#__PURE__*/function () {
        function HotUpdateConfig() {
          this.cacheDirName = 'HotUpdateCache';
          this.remoteAssetsBaseUrl = void 0;
          this._writablePath = void 0;
          this._writablePath = native.fileUtils.getWritablePath();
        }
        var _proto = HotUpdateConfig.prototype;
        _proto.formatPackVersion = function formatPackVersion(version) {
          var arr = version.split('.');
          return arr[0] + "." + arr[1];
        };
        _proto.getPackInsideAssetsDirPath = function getPackInsideAssetsDirPath() {
          var searchPaths = native.fileUtils.getSearchPaths();
          Log.hotupdate.log('getPackInsideAssetsDirPath', 'searchPaths:', searchPaths.toString());
          return searchPaths[searchPaths.length - 1];
        };
        _proto.getCacheDirPath = function getCacheDirPath() {
          var cachePath = path.join(this._writablePath, this.cacheDirName);
          if (!native.fileUtils.isDirectoryExist(cachePath)) {
            native.fileUtils.createDirectory(cachePath);
          }
          return cachePath;
        };
        _proto.getBaseUrl = function getBaseUrl() {
          if (this.remoteAssetsBaseUrl[this.remoteAssetsBaseUrl.length - 1] != '/') {
            this.remoteAssetsBaseUrl = this.remoteAssetsBaseUrl + '/';
          }
          return this.remoteAssetsBaseUrl;
        };
        _proto.getPackageUrl = function getPackageUrl() {
          return "" + this.getBaseUrl();
        };
        _proto.getProjectManifestUrl = function getProjectManifestUrl() {
          return this.getBaseUrl() + "project.manifest";
        };
        _proto.getVersionManifestUrl = function getVersionManifestUrl() {
          return this.getBaseUrl() + "version.manifest";
        };
        _proto.getLocalManifestObj = function getLocalManifestObj() {
          Log.hotupdate.log('getLocalManifestObj');
          var manifestObj;
          var manifestRoot;
          var manifestDir = this.getCacheDirPath();
          var manifestFile = path.join(manifestDir, 'project.manifest'); // 首先在缓存目录中找
          if (!native.fileUtils.isFileExist(manifestFile)) {
            // 缓存目录中没有就在包内资源中找
            manifestDir = this.getPackInsideAssetsDirPath();
            manifestFile = path.join(manifestDir, 'project.manifest');
          }
          if (native.fileUtils.isFileExist(manifestFile)) {
            var jsonStr = native.fileUtils.getStringFromFile(manifestFile);
            var json = JSON.parse(jsonStr);
            if (this.remoteAssetsBaseUrl) {
              Log.hotupdate.log('getLocalManifestObj', '重定向热更新地址:', this.remoteAssetsBaseUrl);
              json.packageUrl = this.getPackageUrl();
              json.remoteManifestUrl = this.getProjectManifestUrl();
              json.remoteVersionUrl = this.getVersionManifestUrl();
            }
            manifestObj = json;
            manifestRoot = manifestDir;
            return [manifestObj, manifestRoot];
          } else {
            // 缓存目录包内资源中都没有说明既不是包内资源，也没有下载下来
            throw '缓存目录包内资源中都没有版本清单文件';
          }
        };
        _proto.getLocalVersion = function getLocalVersion() {
          if (sys.isNative) {
            var _this$getLocalManifes = this.getLocalManifestObj(),
              manifestObj = _this$getLocalManifes[0],
              manifestRoot = _this$getLocalManifes[1];
            return manifestObj.version;
          } else {
            return '0.0.0';
          }
        };
        _proto.getLocalVersionTag = function getLocalVersionTag() {
          if (sys.isNative) {
            var _this$getLocalManifes2 = this.getLocalManifestObj(),
              manifestObj = _this$getLocalManifes2[0],
              manifestRoot = _this$getLocalManifes2[1];
            return manifestObj.tag ? manifestObj.tag : '';
          } else {
            return '--';
          }
        };
        _proto.versionCompare = function versionCompare(versionA, versionB) {
          Log.hotupdate.log('versionCompare:', 'versionA:', versionA, ', versionB:', versionB);
          var vA = versionA.split('.');
          var vB = versionB.split('.');
          if (!(vA[0] == vB[0] && vA[1] == vB[1])) {
            return -1;
          }
          for (var i = 0; i < vA.length; ++i) {
            var a = parseInt(vA[i]);
            a = isNaN(a) ? 0 : a;
            var b = parseInt(vB[i]);
            if (isNaN(b)) {
              return 1;
            } else if (a === b) {
              continue;
            } else {
              return a - b;
            }
          }
          if (vB.length > vA.length) {
            return -1;
          } else {
            return 0;
          }
        };
        return HotUpdateConfig;
      }());
      var HotUpdate = exports('HotUpdate', /*#__PURE__*/function () {
        HotUpdate.init = function init(config) {
          this._config = config;
        };
        HotUpdate.create = function create(eventDelegate) {
          var task = new HotUpdate(eventDelegate);
          if (!task.isValid) {
            Log.hotupdate.error('checkUpdate', ' the task is invalid');
            task.destroy();
            return;
          }
          if (task.state != EUpdateState.ready) {
            Log.hotupdate.error('checkUpdate', " the task state(" + task.state + ") is not 'ready'");
            task.destroy();
            return;
          }
          return task;
        };
        function HotUpdate(eventDelegate) {
          this.state = null;
          this.eventDelegate = null;
          this.localManifestObj = null;
          this.assetsMgr = null;
          this._valid = false;
          var cachePath = HotUpdate._config.getCacheDirPath();
          var _HotUpdate$_config$ge = HotUpdate._config.getLocalManifestObj(),
            manifestObj = _HotUpdate$_config$ge[0],
            manifestRoot = _HotUpdate$_config$ge[1];
          this.eventDelegate = eventDelegate;
          this.localManifestObj = manifestObj;
          this.assetsMgr = native.AssetsManager.create('', cachePath);
          this.assetsMgr.setVersionCompareHandle(HotUpdate._config.versionCompare);
          var manifast = new native.Manifest(JSON.stringify(this.localManifestObj), manifestRoot);
          this.assetsMgr.loadLocalManifest(manifast, cachePath);
          this.assetsMgr.setMaxConcurrentTask(5);
          this.assetsMgr.setEventCallback(this.onUpdateEvent.bind(this));
          this._valid = true;
          this.state = EUpdateState.ready;
          this.printTask();
        }
        var _proto2 = HotUpdate.prototype;
        _proto2.printTask = function printTask() {
          if (this.localManifestObj) {
            Log.hotupdate.log('printTask', '---- start ----');
            Log.hotupdate.log('packageUrl:', this.localManifestObj.packageUrl);
            Log.hotupdate.log('remoteManifestUrl:', this.localManifestObj.remoteManifestUrl);
            Log.hotupdate.log('remoteVersionUrl:', this.localManifestObj.remoteVersionUrl);
            Log.hotupdate.log('version:', this.localManifestObj.version);
            Log.hotupdate.log('printTask', '---- end ----');
          } else {
            Log.hotupdate.error('printTask', ', manifestObj is null');
          }
        };
        _proto2.checkUpdate = function checkUpdate() {
          Log.hotupdate.log('checkUpdate');
          if (!this.isValid) {
            Log.hotupdate.warn('checkUpdate', ', the task is not valid');
            return;
          }
          if (this.state == EUpdateState.ready) {
            this.assetsMgr.checkUpdate();
          } else {
            Log.hotupdate.warn('checkUpdate', ", the state(" + this.state + ") is not 'ready'");
          }
        };
        _proto2.update = function update() {
          Log.hotupdate.log('update');
          if (!this.isValid) {
            Log.hotupdate.warn('update', ', the task is not valid');
            return;
          }
          this.printTask();
          if (this.state == EUpdateState.ready) {
            this.assetsMgr.update();
            this.state = EUpdateState.updateing;
          } else {
            Log.hotupdate.warn('update', ", the state(" + this.state + ") is not 'ready'");
          }
        };
        _proto2.retry = function retry() {
          Log.hotupdate.log('retry');
          if (!this.isValid) {
            Log.hotupdate.warn('checkUpdate', 'the task is not valid');
            return;
          }
          if (this.state == EUpdateState.failed) {
            this.assetsMgr.downloadFailedAssets();
            this.state = EUpdateState.updateing;
          } else {
            Log.hotupdate.warn('retry', "the state(" + this.state + ") is not 'failed'");
          }
        };
        _proto2.destroy = function destroy() {
          this.assetsMgr.setEventCallback(null);
          this.assetsMgr = undefined;
          this.eventDelegate = undefined;
          this.localManifestObj = undefined;
          this.state = undefined;
        };
        _proto2.onUpdateEvent = function onUpdateEvent(event) {
          var eventCode = event.getEventCode();
          Log.hotupdate.log('onUpdateEvent', ', eventCode:', eventCode);
          switch (eventCode) {
            case native.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              {
                // Logger.hotupdate('onUpdateEvent', 'bundle:', this.bundleName, 'ERROR_NO_LOCAL_MANIFEST');
                Log.hotupdate.error('onUpdateEvent', 'ERROR_NO_LOCAL_MANIFEST', event);
                this.printTask();
              }
              break;
            case native.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
              {
                // Logger.hotupdate('onUpdateEvent', 'bundle:', this.bundleName, 'ERROR_DOWNLOAD_MANIFEST');
                Log.hotupdate.error('onUpdateEvent', 'ERROR_DOWNLOAD_MANIFEST', event);
                this.printTask();
                this.state = EUpdateState.failed;
                var _reason = new Error("[Hotupdate] onUpdateEvent ERROR_DOWNLOAD_MANIFEST\npackageUrl: " + this.localManifestObj.packageUrl + "\nremoteManifestUrl: " + this.localManifestObj.remoteManifestUrl + "\nremoteVersionUrl: " + this.localManifestObj.remoteVersionUrl);
                if (this.eventDelegate && this.eventDelegate.onHotUpdateFailed) {
                  var _this$eventDelegate;
                  (_this$eventDelegate = this.eventDelegate) == null || _this$eventDelegate.onHotUpdateFailed(this, _reason);
                }
              }
              break;
            case native.EventAssetsManager.ERROR_PARSE_MANIFEST:
              {
                // Logger.hotupdate('onUpdateEvent', 'bundle:', this.bundleName, 'ERROR_PARSE_MANIFEST');
                Log.hotupdate.error('onUpdateEvent', 'ERROR_PARSE_MANIFEST', event);
                this.printTask();
              }
              break;
            case native.EventAssetsManager.ERROR_UPDATING:
              {
                // Logger.hotupdate('onUpdateEvent', 'bundle:', this.bundleName, 'ERROR_UPDATING');
                Log.hotupdate.error('onUpdateEvent', 'ERROR_UPDATING', event);
                Log.hotupdate.error('onUpdateEvent', 'EventCode:', event.getEventCode());
                Log.hotupdate.error('onUpdateEvent', 'CURLECode:', event.getCURLECode());
                Log.hotupdate.error('onUpdateEvent', 'CURLMCode:', event.getCURLMCode());
                Log.hotupdate.error('onUpdateEvent', 'Message:', event.getMessage());
                Log.hotupdate.error('onUpdateEvent', 'AssetId:', event.getAssetId());
              }
              break;
            case native.EventAssetsManager.ERROR_DECOMPRESS:
              {
                // Logger.hotupdate('onUpdateEvent', 'bundle:', this.bundleName, 'ERROR_DECOMPRESS');
                Log.hotupdate.error('onUpdateEvent', 'ERROR_DECOMPRESS', event);
              }
              break;
            case native.EventAssetsManager.UPDATE_FAILED:
              {
                // 失败最终会到这里
                // Logger.hotupdate('onUpdateEvent', 'bundle:', this.bundleName, 'UPDATE_FAILED');
                Log.hotupdate.error('onUpdateEvent', 'UPDATE_FAILED');
                Log.hotupdate.error('onUpdateEvent', 'EventCode:', event.getEventCode());
                Log.hotupdate.error('onUpdateEvent', 'CURLECode:', event.getCURLECode());
                Log.hotupdate.error('onUpdateEvent', 'CURLMCode:', event.getCURLMCode());
                Log.hotupdate.error('onUpdateEvent', 'Message:', event.getMessage());
                Log.hotupdate.error('onUpdateEvent', 'AssetId:', event.getAssetId());
                this.printTask();
                this.state = EUpdateState.failed;
                var _reason2 = new Error("[Hotupdate] onUpdateEvent UPDATE_FAILED\npackageUrl: " + this.localManifestObj.packageUrl + "\nremoteManifestUrl: " + this.localManifestObj.remoteManifestUrl + "\nremoteVersionUrl: " + this.localManifestObj.remoteVersionUrl);
                if (this.eventDelegate && this.eventDelegate.onHotUpdateFailed) {
                  var _this$eventDelegate2;
                  (_this$eventDelegate2 = this.eventDelegate) == null || _this$eventDelegate2.onHotUpdateFailed(this, _reason2);
                }
              }
              break;
            case native.EventAssetsManager.NEW_VERSION_FOUND:
              {
                Log.hotupdate.log('onUpdateEvent', 'NEW_VERSION_FOUND');
                if (this.eventDelegate && this.eventDelegate.onHotUpdateNewVersion) {
                  var _this$eventDelegate3;
                  (_this$eventDelegate3 = this.eventDelegate) == null || _this$eventDelegate3.onHotUpdateNewVersion(this, this.assetsMgr.getRemoteManifest().getVersion());
                }
              }
              break;
            case native.EventAssetsManager.ALREADY_UP_TO_DATE:
              {
                // 已经是最新的了
                Log.hotupdate.log('onUpdateEvent', 'ALREADY_UP_TO_DATE');
                this.state = EUpdateState.finished;
                if (this.eventDelegate && this.eventDelegate.onHotUpdateAlreadUpToDate) {
                  var _this$eventDelegate4;
                  (_this$eventDelegate4 = this.eventDelegate) == null || _this$eventDelegate4.onHotUpdateAlreadUpToDate(this);
                }
              }
              break;
            case native.EventAssetsManager.UPDATE_PROGRESSION:
              {
                // Logger.hotupdate('onUpdateEvent', 'bundle:', this.bundleName, 'UPDATE_PROGRESSION');
                var _percent = event.getPercent();
                if (isNaN(_percent)) {
                  _percent = 0;
                }
                if (this.eventDelegate && this.eventDelegate.onHotUpdateProgress) {
                  var _this$eventDelegate5;
                  (_this$eventDelegate5 = this.eventDelegate) == null || _this$eventDelegate5.onHotUpdateProgress(this, _percent, event.getTotalBytes(), event.getDownloadedBytes());
                }
              }
              break;
            case native.EventAssetsManager.ASSET_UPDATED:
              break;
            case native.EventAssetsManager.UPDATE_FINISHED:
              {
                Log.hotupdate.log('onUpdateEvent', 'UPDATE_FINISHED');
                this.state = EUpdateState.finished;
                if (this.eventDelegate && this.eventDelegate.onHotUpdateFinish) {
                  var _this$eventDelegate6;
                  (_this$eventDelegate6 = this.eventDelegate) == null || _this$eventDelegate6.onHotUpdateFinish(this);
                }
              }
              break;
            default:
              {
                Log.hotupdate.error('onUpdateEvent', 'unknown EventCode', eventCode);
              }
              break;
          }
        };
        _createClass(HotUpdate, [{
          key: "isValid",
          get: function get() {
            return this._valid && this.assetsMgr != null;
          }
        }], [{
          key: "config",
          get: function get() {
            return this._config;
          }
        }]);
        return HotUpdate;
      }());
      HotUpdate._config = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpBanner.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameConfig.ts', './HttpProtoBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, sys, GameConfig, HttpProtoBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, null, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      HttpProtoBase = module.HttpProtoBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "60360StRB1LXbXW9DzuwWjg", "HttpBanner", undefined);
      var HttpBanner = exports('HttpBanner', /*#__PURE__*/function (_HttpProtoBase) {
        _inheritsLoose(HttpBanner, _HttpProtoBase);
        function HttpBanner() {
          var _this;
          var com = {
            time: sys.now(),
            channel: GameConfig.channel
          };
          // @ts-ignore
          _this = _HttpProtoBase.call(this, com) || this;
          _this.encryptEnable = true;
          _this.requestUrl = GameConfig.curConfig.httpBase + "Hall/getBannerList";
          return _this;
        }
        HttpBanner.create = function create() {
          return new HttpBanner();
        };
        return HttpBanner;
      }(HttpProtoBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpFormData.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "340055YlLhDJ7zb6NkhQCn6", "HttpFormData", undefined);
      /**
       * 自定义表单类
       */
      var HttpFormData = exports('HttpFormData', /*#__PURE__*/function () {
        function HttpFormData(boundary_key) {
          this._boundary_key = '----WebKitFormBoundary';
          this._boundary = void 0;
          this._end_boundary = void 0;
          this._appendData = void 0;
          if (boundary_key) {
            this._boundary_key = boundary_key;
          }
          this._boundary_key += new Date().getTime();
          this._boundary = '--' + this._boundary_key;
          this._end_boundary = this._boundary + '--';
          this._appendData = '';
        }
        var _proto = HttpFormData.prototype;
        _proto.getBoundaryKey = function getBoundaryKey() {
          return this._boundary_key;
        };
        _proto.append = function append(key, value) {
          this._appendData += this._boundary + "\r\nContent-Disposition: form-data; name=\"" + key + "\"\r\n\r\n" + value + "\r\n";
        };
        _proto.appendFile = function appendFile(filename, filedata, contentType) {
          this._appendData += this._boundary + "\r\nContent-Disposition: form-data; name=\"file\"; filename=\"" + filename + "\"\r\nContent-Type: " + contentType + "\r\n";
          for (var i = 0; i < filedata.byteLength; i++) {
            var n = filedata[i];
            this._appendData += String.fromCharCode(n);
          }
        };
        _proto.getContentStr = function getContentStr() {
          return this._appendData + this._end_boundary;
        };
        _proto.getContentData = function getContentData() {
          var contentStr = this.getContentStr();
          var charArr = [];
          for (var i = 0, len = contentStr.length; i < len; i++) {
            charArr.push(contentStr.charCodeAt(i));
          }
          var uint8arr = new Uint8Array(charArr);
          return uint8arr.buffer;
        };
        return HttpFormData;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpLogin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameConfig.ts', './CryptoTool.ts', './HttpProtoBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameConfig, CryptoTool, HttpProtoBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      CryptoTool = module.CryptoTool;
    }, function (module) {
      HttpProtoBase = module.HttpProtoBase;
    }],
    execute: function () {
      exports('HttpLogin', void 0);
      cclegacy._RF.push({}, "7e25e3ukOpAmrLiHYGO6grk", "HttpLogin", undefined);
      var HttpLogin;
      (function (_HttpLogin) {
        var ELoginType = /*#__PURE__*/function (ELoginType) {
          ELoginType["apple"] = "apple";
          ELoginType["facebook"] = "facebook";
          ELoginType["email"] = "email";
          ELoginType["google"] = "google";
          ELoginType["guest"] = "guest";
          ELoginType["phone"] = "phone";
          ELoginType["username"] = "username";
          ELoginType["telegram"] = "telegram";
          return ELoginType;
        }({});
        _HttpLogin.ELoginType = ELoginType;
        var LoginRequest = /*#__PURE__*/function (_HttpProtoBase) {
          _inheritsLoose(LoginRequest, _HttpProtoBase);
          function LoginRequest(loginType, req) {
            var _this;
            var data = Object.assign({}, req);
            // @ts-ignore
            data.appinfo = JSON.stringify(req.appinfo);
            if (data.password) {
              data.password = CryptoTool.hex_md5(req.password);
            }
            _this = _HttpProtoBase.call(this, data) || this;
            _this.encryptEnable = true;
            _this.requestUrl = GameConfig.curConfig.login + loginType;
            return _this;
          }
          LoginRequest.create = function create(loginType, req) {
            return new LoginRequest(loginType, req);
          };
          return LoginRequest;
        }(HttpProtoBase);
        _HttpLogin.LoginRequest = LoginRequest;
      })(HttpLogin || (HttpLogin = exports('HttpLogin', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpPayment.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameConfig.ts', './HttpProtoBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameConfig, HttpProtoBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      HttpProtoBase = module.HttpProtoBase;
    }],
    execute: function () {
      exports('HttpPayment', void 0);
      cclegacy._RF.push({}, "27d37a49mRCdanizjhJWIj6", "HttpPayment", undefined);
      var HttpPayment;
      (function (_HttpPayment) {
        var EPaymentRequestStr = /*#__PURE__*/function (EPaymentRequestStr) {
          EPaymentRequestStr["userPayAddr"] = "payment/userPayAddr";
          EPaymentRequestStr["userWithDrawal"] = "payment/userWithDrawal";
          EPaymentRequestStr["getUserRecord"] = "payment/getUserRecord";
          EPaymentRequestStr["getChainList"] = "payment/getChainList";
          return EPaymentRequestStr;
        }({});
        _HttpPayment.EPaymentRequestStr = EPaymentRequestStr;
        var EChainKey = /*#__PURE__*/function (EChainKey) {
          EChainKey["ARETH"] = "ARETH";
          EChainKey["BSC"] = "BSC";
          EChainKey["ETH"] = "ETH";
          EChainKey["OPTIMISM"] = "OPTIMISM";
          EChainKey["POLYGON"] = "POLYGON";
          EChainKey["SOL"] = "SOL";
          EChainKey["TON"] = "TON";
          EChainKey["TRX"] = "TRX";
          return EChainKey;
        }({});
        _HttpPayment.EChainKey = EChainKey;
        var PayAddrRequest = /*#__PURE__*/function (_HttpProtoBase) {
          _inheritsLoose(PayAddrRequest, _HttpProtoBase);
          function PayAddrRequest(req) {
            var _this;
            _this = _HttpProtoBase.call(this, req) || this;
            _this.encryptEnable = true;
            _this.requestUrl = GameConfig.curConfig.httpBase + EPaymentRequestStr.userPayAddr;
            return _this;
          }
          PayAddrRequest.create = function create(req) {
            return new PayAddrRequest(req);
          };
          return PayAddrRequest;
        }(HttpProtoBase);
        _HttpPayment.PayAddrRequest = PayAddrRequest;
        var WithDrawalRequest = /*#__PURE__*/function (_HttpProtoBase2) {
          _inheritsLoose(WithDrawalRequest, _HttpProtoBase2);
          function WithDrawalRequest(req) {
            var _this2;
            _this2 = _HttpProtoBase2.call(this, req) || this;
            _this2.encryptEnable = true;
            _this2.requestUrl = GameConfig.curConfig.httpBase + EPaymentRequestStr.userWithDrawal;
            return _this2;
          }
          WithDrawalRequest.create = function create(req) {
            return new WithDrawalRequest(req);
          };
          return WithDrawalRequest;
        }(HttpProtoBase);
        _HttpPayment.WithDrawalRequest = WithDrawalRequest;
        var payRecordRequest = /*#__PURE__*/function (_HttpProtoBase3) {
          _inheritsLoose(payRecordRequest, _HttpProtoBase3);
          function payRecordRequest(req) {
            var _this3;
            _this3 = _HttpProtoBase3.call(this, req) || this;
            _this3.encryptEnable = true;
            _this3.requestUrl = GameConfig.curConfig.httpBase + EPaymentRequestStr.getUserRecord;
            return _this3;
          }
          payRecordRequest.create = function create(req) {
            return new payRecordRequest(req);
          };
          return payRecordRequest;
        }(HttpProtoBase);
        _HttpPayment.payRecordRequest = payRecordRequest;
        var getChainListRequest = /*#__PURE__*/function (_HttpProtoBase4) {
          _inheritsLoose(getChainListRequest, _HttpProtoBase4);
          function getChainListRequest(req) {
            var _this4;
            _this4 = _HttpProtoBase4.call(this, req) || this;
            _this4.encryptEnable = true;
            _this4.requestUrl = GameConfig.curConfig.httpBase + EPaymentRequestStr.getChainList;
            return _this4;
          }
          getChainListRequest.create = function create(req) {
            return new getChainListRequest(req);
          };
          return getChainListRequest;
        }(HttpProtoBase);
        _HttpPayment.getChainListRequest = getChainListRequest;
      })(HttpPayment || (HttpPayment = exports('HttpPayment', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpProtoBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Logger.ts', './HttpRequest.ts'], function (exports) {
  var _inheritsLoose, _wrapNativeSuper, cclegacy, Log, HttpRequest;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _wrapNativeSuper = module.wrapNativeSuper;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      HttpRequest = module.HttpRequest;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b22e1h5j1BBQaI75gY3t+ck", "HttpProtoBase", undefined);
      var EHttpErrorType = exports('EHttpErrorType', /*#__PURE__*/function (EHttpErrorType) {
        EHttpErrorType["RequestFail"] = "RequestFail";
        EHttpErrorType["CodeError"] = "CodeError";
        return EHttpErrorType;
      }({}));
      var HttpError = exports('HttpError', /*#__PURE__*/function (_Error) {
        _inheritsLoose(HttpError, _Error);
        function HttpError() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Error.call.apply(_Error, [this].concat(args)) || this;
          _this.errType = void 0;
          _this.errCode = void 0;
          return _this;
        }
        HttpError.createRequestFail = function createRequestFail(err) {
          var e = new HttpError(err.message);
          e.errType = EHttpErrorType.RequestFail;
          e.name = err.name;
          e.stack = err.stack;
          return e;
        };
        HttpError.createCodeError = function createCodeError(params) {
          var e = new HttpError(params.msg);
          e.errType = EHttpErrorType.CodeError;
          e.name = 'HttpCodeError';
          e.errCode = params.code;
          return e;
        };
        return HttpError;
      }( /*#__PURE__*/_wrapNativeSuper(Error)));
      var HttpProtoBase = exports('HttpProtoBase', /*#__PURE__*/function (_HttpRequest) {
        _inheritsLoose(HttpProtoBase, _HttpRequest);
        function HttpProtoBase(req) {
          var _this2;
          _this2 = _HttpRequest.call(this, req) || this;
          _this2.printRecive = void 0;
          return _this2;
        }
        var _proto = HttpProtoBase.prototype;
        _proto.post = function post(printRecive) {
          var _this3 = this;
          if (printRecive === void 0) {
            printRecive = false;
          }
          this.printRecive = printRecive;
          return new Promise(function (resolve, reject) {
            _this3.returnCallback = function (p) {
              if (p.error) {
                reject(HttpError.createRequestFail(p.error));
              } else {
                if (_this3.printRecive) Log.http.log('POST', _this3.requestUrl, 'recive: ', JSON.stringify(p.data, undefined, 4));
                // @ts-ignore
                if (p.data.code == undefined || p.data.code >= 0) {
                  resolve(p.data);
                } else {
                  // @ts-ignore
                  if (!p.data.msg || p.data.msg == '' || typeof p.data.msg != 'string') {
                    // @ts-ignore
                    p.data.msg = "request fail with rsp code " + p.data.code;
                  }
                  // @ts-ignore
                  reject(HttpError.createCodeError(p.data));
                }
              }
            };
            _this3._post();
          });
        };
        _proto.get = function get(printRecive) {
          var _this4 = this;
          if (printRecive === void 0) {
            printRecive = false;
          }
          this.printRecive = printRecive;
          return new Promise(function (resolve, reject) {
            _this4.returnCallback = function (p) {
              if (p.error) {
                reject(p.error);
              } else {
                if (_this4.printRecive) Log.http.log('GET', _this4.requestUrl, 'recive: ', p.data);
                resolve(p.data);
              }
            };
            _this4._get();
          });
        };
        return HttpProtoBase;
      }(HttpRequest));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpRequest.ts", ['cc', './CryptoTool.ts', './Logger.ts', './HttpTools.ts', './HttpFormData.ts'], function (exports) {
  var cclegacy, CryptoTool, Log, HttpTools, HttpFormData;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoTool = module.CryptoTool;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      HttpTools = module.HttpTools;
    }, function (module) {
      HttpFormData = module.HttpFormData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2344186AkNJuJGR+DKgSKxf", "HttpRequest", undefined);
      var HttpRequest = exports('HttpRequest', /*#__PURE__*/function () {
        function HttpRequest(req) {
          this.requestUrl = void 0;
          /**
           * 通信过程是否加密
           */
          this.encryptEnable = false;
          this.postFormData = true;
          // 以上变量可以在协议定义时进行声明
          this.params = void 0;
          this.isPost = void 0;
          this.requestObj = void 0;
          this.tryCount = 3;
          this.tryTimes = 0;
          this.returnCallback = void 0;
          this.requestData = void 0;
          this.promptCode = void 0;
          this.createRequest();
          this.params = req;
        }
        var _proto = HttpRequest.prototype;
        _proto.createRequest = function createRequest() {
          this.requestObj = new XMLHttpRequest();
          this.requestObj.timeout = 6000;
          this.requestObj.onerror = this.onError.bind(this);
          this.requestObj.onreadystatechange = this.onReadystateChange.bind(this);
          this.requestObj.ontimeout = this.onTimeout.bind(this);
          this.requestObj.responseType = 'text';
        };
        _proto.deleteRequest = function deleteRequest() {
          this.requestObj.onerror = null;
          this.requestObj.onreadystatechange = null;
          this.requestObj.ontimeout = null;
          delete this.requestObj;
        }

        // 改为重置轮询列表次数，此处方法名未修改
        ;

        _proto.resetTryTimes = function resetTryTimes() {
          this.tryTimes = 0;
        };
        _proto.reset = function reset() {
          this.deleteRequest();
          this.tryTimes = 0;
        };
        _proto.formatUrl = function formatUrl(url) {
          return url;
        };
        _proto.formatPostData = function formatPostData() {};
        _proto._post = function _post() {
          this.tryTimes++;
          var encryptEnable = HttpTools.httpEncryptKey && this.encryptEnable;
          if (!this.requestData) {
            if (this.params) {
              if (encryptEnable) {
                var data = CryptoTool.XXTEA.encryptToBase64(JSON.stringify(this.params), HttpTools.httpEncryptKey);
                if (this.postFormData) {
                  this.requestData = HttpTools.formatPostDataFormData(this.requestUrl, {
                    api: data
                  });
                } else {
                  this.requestData = HttpTools.formatPostDataJsonStr(this.requestUrl, {
                    api: data
                  });
                }
              } else {
                if (this.postFormData) {
                  this.requestData = HttpTools.formatPostDataFormData(this.requestUrl, this.params);
                } else {
                  this.requestData = HttpTools.formatPostDataJsonStr(this.requestUrl, this.params);
                }
              }
            } else {
              this.requestData = {
                url: this.requestUrl
              };
            }
          }
          Log.http.log('POST', 'url:', this.requestData.url);
          Log.http.log('POST', 'encryptEnable:', encryptEnable);
          if (this.params && encryptEnable) {
            Log.http.log('POST', '明文:', this.params);
            Log.http.log('POST', '密文:', this.requestData.params);
          } else {
            Log.http.log('POST', '明文:', this.requestData.params);
          }
          Log.http.log('POST', '可用次数:', this.tryCount);
          Log.http.log('POST', 'tryTimes:', this.tryTimes);
          this.isPost = true;
          this.requestObj.open('POST', this.requestData.url, true);
          if (this.requestData.params instanceof HttpFormData) {
            this.requestObj.setRequestHeader('Content-Type', "multipart/form-data; boundary=" + this.requestData.params.getBoundaryKey());
          } else {
            if (typeof this.requestData.params == 'string') {
              this.requestObj.setRequestHeader('Content-Type', 'application/json;charset=utf-8');
            }
          }
          if (this.requestData.params) {
            if (this.requestData.params instanceof HttpFormData) {
              this.requestObj.send(this.requestData.params.getContentStr());
            } else {
              this.requestObj.send(this.requestData.params);
            }
          } else {
            this.requestObj.send();
          }
        };
        _proto._get = function _get() {
          var encryptEnable = HttpTools.httpEncryptKey && this.encryptEnable;
          this.requestData = HttpTools.formatGetData(this.requestUrl, this.params, encryptEnable);
          this.requestData.url = this.formatUrl(this.requestData.url);
          Log.http.log('POST', 'urlName:', this.requestUrl);
          Log.http.log('POST', 'url:', this.requestData.url);
          Log.http.log('POST', 'encryptEnable:', encryptEnable);
          Log.http.log('POST', '明文:', this.requestData.params);
          Log.http.log('POST', '可用次数:', this.tryCount);
          Log.http.log('POST', 'tryTimes:', this.tryTimes);
          this.isPost = false;
          this.requestObj.open('GET', this.requestData.url, true);
          this.requestObj.send();
        };
        _proto.requestAgain = function requestAgain() {
          Log.http.log('requestAgain', this.requestData.url, this.tryCount);
          this.deleteRequest();
          this.createRequest();
          if (this.isPost) {
            this._post();
          } else {
            this._get();
          }
        };
        _proto.onRequestFail = function onRequestFail(err) {
          Log.http.error('onRequestFail', err);
          if (this.tryTimes < this.tryCount) {
            this.requestAgain();
          } else {
            Log.http.error('onRequestFail', '最终失败', err);
            this.returnCallback({
              error: err
            });
            this.reset();
          }
        };
        _proto.onError = function onError() {
          this.onRequestFail(new Error("[" + (this.isPost ? 'post' : 'get') + " onError] \nurl: " + this.requestData.url + " \n"));
        };
        _proto.onTimeout = function onTimeout() {
          this.onRequestFail(new Error("[" + (this.isPost ? 'post' : 'get') + " onTimeout] \nurl: " + this.requestData.url + " \n"));
        };
        _proto.onReadystateChange = function onReadystateChange() {
          Log.http.log('onReadystateChange', '\n    url:', this.requestData.url, '\n    readyState:', this.requestObj.readyState, '\n    status:', this.requestObj.status);
          if (this.requestObj.readyState == 4) {
            if (this.requestObj.status >= 200 && this.requestObj.status <= 207) {
              try {
                var encryptEnable = HttpTools.httpEncryptKey && this.encryptEnable;
                var jsonStr = this.requestObj.response;
                if (encryptEnable) {
                  jsonStr = CryptoTool.XXTEA.decryptFromBase64(jsonStr, HttpTools.httpEncryptKey);
                }
                var resp = {
                  data: JSON.parse(jsonStr)
                };
                Log.http.log('onReadystateChange', '成功返回', '\n    url:', this.requestData.url, '\n    response:', jsonStr.trim());
                this.returnCallback(resp);
              } catch (err) {
                Log.http.error('responseText: ', this.requestObj.responseText, err);
                this.returnCallback({
                  error: err
                });
              } finally {
                this.reset();
              }
            } else {
              this.onRequestFail(new Error("[" + (this.isPost ? 'post' : 'get') + " status error: " + this.requestObj.status + "] \nurl: " + this.requestData.url + " \n"));
            }
          }
        };
        return HttpRequest;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpTools.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CryptoTool.ts', './HttpFormData.ts'], function (exports) {
  var _createClass, cclegacy, sys, CryptoTool, HttpFormData;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      CryptoTool = module.CryptoTool;
    }, function (module) {
      HttpFormData = module.HttpFormData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f2c4dbc/+ZOXZAdhN1O9wNX", "HttpTools", undefined);
      var EFileContentType = exports('EFileContentType', /*#__PURE__*/function (EFileContentType) {
        EFileContentType["text"] = "text/plain";
        EFileContentType["jpg"] = "image/jpeg";
        EFileContentType["png"] = "image/png";
        return EFileContentType;
      }({}));
      var FormDataFile = exports('FormDataFile', function FormDataFile(fileName, fileData, contentType) {
        this.fileName = fileName;
        this.fileData = fileData;
        this.contentType = contentType;
      });
      var HttpTools = exports('HttpTools', /*#__PURE__*/function () {
        function HttpTools() {}
        HttpTools.init = function init(httpEncryptKey) {
          this._httpEncryptKey = httpEncryptKey;
        };
        HttpTools.formatParams = function formatParams(params, encryptEnable) {
          var arr = [];
          for (var _key in params) {
            if (params[_key] != undefined && params[_key] != null) {
              var value = params[_key];
              if (value != undefined && value != null) {
                arr.push(_key + "=" + encodeURIComponent(value));
              }
            }
          }
          var str = arr.join('&');
          if (encryptEnable) {
            str = CryptoTool.aesEncryptString(this._httpEncryptKey, str);
          }
          return str;
        };
        HttpTools.formatGetData = function formatGetData(url, params, encryptEnable) {
          if (encryptEnable === void 0) {
            encryptEnable = false;
          }
          var result = {
            url: url
          };
          if (params && Object.keys(params).length > 0) {
            result.url = result.url + "?" + this.formatParams(params, encryptEnable);
          }
          return result;
        };
        HttpTools.formatPostDataJsonStr = function formatPostDataJsonStr(url, params) {
          var result = {
            url: url
          };
          if (params) {
            result.params = JSON.stringify(params);
          } else {
            result.params = '';
          }
          return result;
        };
        HttpTools.formatPostDataFormData = function formatPostDataFormData(url, params) {
          var result = {
            url: url
          };
          if (!params) params = {};
          var formdata;
          if (sys.isNative) {
            formdata = new HttpFormData();
          } else {
            formdata = new FormData();
          }
          for (var _key2 in params) {
            if (Object.prototype.hasOwnProperty.call(params, _key2)) {
              var element = params[_key2];
              if (element instanceof FormDataFile) {
                if (sys.isNative) {
                  formdata.appendFile(element.fileName, element.fileData, element.contentType);
                }
              } else if (typeof element == 'string' || typeof element == 'number' || typeof element == 'boolean') {
                formdata.append(_key2, element.toString());
              }
            }
          }
          result.params = formdata;
          return result;
        };
        _createClass(HttpTools, null, [{
          key: "httpEncryptKey",
          get: function get() {
            return this._httpEncryptKey;
          }
        }]);
        return HttpTools;
      }());
      HttpTools._httpEncryptKey = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpUserAct.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameConfig.ts', './HttpProtoBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameConfig, HttpProtoBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      HttpProtoBase = module.HttpProtoBase;
    }],
    execute: function () {
      exports('HttpUserAct', void 0);
      cclegacy._RF.push({}, "61633TAOYBNgIxTaTRbsj6c", "HttpUserAct", undefined);
      var HttpUserAct;
      (function (_HttpUserAct) {
        var EActType = /*#__PURE__*/function (EActType) {
          EActType["getVerificationCode"] = "getVerificationCode";
          EActType["checkCode"] = "checkCode";
          EActType["newPassword"] = "newPassword";
          EActType["register"] = "register";
          EActType["changePassword"] = "changePassword";
          EActType["link"] = "link";
          return EActType;
        }({});
        var EVerificationType = /*#__PURE__*/function (EVerificationType) {
          EVerificationType[EVerificationType["register"] = 0] = "register";
          EVerificationType[EVerificationType["change_pwd"] = 1] = "change_pwd";
          EVerificationType[EVerificationType["forget_pwd"] = 2] = "forget_pwd";
          EVerificationType[EVerificationType["link"] = 3] = "link";
          return EVerificationType;
        }({});
        _HttpUserAct.EVerificationType = EVerificationType; // playerid     = FRoleData:getPlayerId(),
        // sessionkey   = FRoleData:getSessionKey(),
        // email        = params.email,
        // code         = params.code,
        // password     = crypto.md5(params.password),
        // new_password = crypto.md5(params.new_password),
        var SendVerificationCode = /*#__PURE__*/function (_HttpProtoBase) {
          _inheritsLoose(SendVerificationCode, _HttpProtoBase);
          function SendVerificationCode(req, appinfo) {
            var _this;
            // @ts-ignore
            req.appinfo = JSON.stringify(appinfo);
            _this = _HttpProtoBase.call(this, req) || this;
            _this.encryptEnable = true;
            _this.requestUrl = GameConfig.curConfig.httpBase + "members/" + EActType.getVerificationCode;
            return _this;
          }
          SendVerificationCode.create = function create(req, appinfo) {
            return new SendVerificationCode(req, appinfo);
          };
          return SendVerificationCode;
        }(HttpProtoBase);
        _HttpUserAct.SendVerificationCode = SendVerificationCode;
        var CheckVerificationCode = /*#__PURE__*/function (_HttpProtoBase2) {
          _inheritsLoose(CheckVerificationCode, _HttpProtoBase2);
          function CheckVerificationCode(req, appinfo) {
            var _this2;
            // @ts-ignore
            req.appinfo = JSON.stringify(appinfo);
            _this2 = _HttpProtoBase2.call(this, req) || this;
            _this2.encryptEnable = true;
            _this2.requestUrl = GameConfig.curConfig.httpBase + "members/" + EActType.checkCode;
            return _this2;
          }
          CheckVerificationCode.create = function create(req, appinfo) {
            return new CheckVerificationCode(req, appinfo);
          };
          return CheckVerificationCode;
        }(HttpProtoBase);
        _HttpUserAct.CheckVerificationCode = CheckVerificationCode;
        var AccountRegister = /*#__PURE__*/function (_HttpProtoBase3) {
          _inheritsLoose(AccountRegister, _HttpProtoBase3);
          function AccountRegister(req, appinfo) {
            var _this3;
            // @ts-ignore
            req.appinfo = JSON.stringify(appinfo);
            _this3 = _HttpProtoBase3.call(this, req) || this;
            _this3.encryptEnable = true;
            _this3.requestUrl = GameConfig.curConfig.httpBase + "members/" + EActType.register;
            return _this3;
          }
          AccountRegister.create = function create(req, appinfo) {
            return new AccountRegister(req, appinfo);
          };
          return AccountRegister;
        }(HttpProtoBase);
        _HttpUserAct.AccountRegister = AccountRegister;
        var ModifyPassWord = /*#__PURE__*/function (_HttpProtoBase4) {
          _inheritsLoose(ModifyPassWord, _HttpProtoBase4);
          function ModifyPassWord(req, appinfo) {
            var _this4;
            // @ts-ignore
            req.appinfo = JSON.stringify(appinfo);
            _this4 = _HttpProtoBase4.call(this, req) || this;
            _this4.encryptEnable = true;
            _this4.requestUrl = GameConfig.curConfig.httpBase + "members/" + EActType.newPassword;
            return _this4;
          }
          ModifyPassWord.create = function create(req, appinfo) {
            return new ModifyPassWord(req, appinfo);
          };
          return ModifyPassWord;
        }(HttpProtoBase);
        _HttpUserAct.ModifyPassWord = ModifyPassWord;
      })(HttpUserAct || (HttpUserAct = exports('HttpUserAct', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageManage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageTypes.ts', './multi_language_text.ts', './errorcode_config.ts', './CocosDevKit.ts', './TelegramDeviceBridge.ts', './LocalStorageTool.ts'], function (exports) {
  var _createClass, cclegacy, EventTarget, sys, LanguageTypes, multi_language_text, errorcode_config, TelegramDeviceBridge, LocalStorageTool;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      EventTarget = module.EventTarget;
      sys = module.sys;
    }, function (module) {
      LanguageTypes = module.default;
    }, function (module) {
      multi_language_text = module.default;
    }, function (module) {
      errorcode_config = module.default;
    }, null, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d7042PpDGxEFJ9H5eLjinuo", "LanguageManage", undefined);
      var LanguageManager = exports('default', /*#__PURE__*/function () {
        function LanguageManager() {}
        LanguageManager.on = function on(callback, target) {
          this.eventTarget.on(LanguageTypes.EventLanguageChange, callback, target);
        };
        LanguageManager.off = function off(target) {
          this.eventTarget.targetOff(target);
        }

        // --获取指定语言的翻译
        ;

        LanguageManager.getByLanguage = function getByLanguage(key, langtype) {
          var currentLanguage = langtype;
          if (multi_language_text) {
            if (multi_language_text[key]) {
              var text = multi_language_text[key][currentLanguage];
              // Log.debug.log("[LanguageManager]", "get", key, currentLanguage, text);
              if (text) {
                return text;
              } else {
                return multi_language_text[key][LanguageTypes.ELanguage.en];
              }
            } else {
              return key;
            }
          }
          return key || '';
        };
        LanguageManager.get = function get(key) {
          return this.getByLanguage(key, LanguageManager.language);
        };
        LanguageManager.getErrorText = function getErrorText(code) {
          if (errorcode_config[code]) {
            var currentLanguage = this.language;
            return errorcode_config[code][currentLanguage];
          }
        };
        _createClass(LanguageManager, null, [{
          key: "language",
          get: function get() {
            if (this._language == undefined) {
              var str = LocalStorageTool.getStringWithAES('language');
              if (str) {
                this._language = parseInt(str);
                return this._language;
              }
              this._language = LanguageTypes.ELanguage.en;
              //对于不同平台有自己本身的语言则这里使用我们支持的自己的语言系统
              if (TelegramDeviceBridge.Instance.isTMA) {
                var lang = sys.languageCode;
                if (TelegramDeviceBridge.Instance.userInfo) {
                  lang = TelegramDeviceBridge.Instance.userInfo.languageCode;
                }
                if (lang == sys.Language.ENGLISH) {
                  this._language = LanguageTypes.ELanguage.en;
                } else if (lang == sys.Language.CHINESE) {
                  this._language = LanguageTypes.ELanguage.sc;
                } else if (lang == sys.Language.RUSSIAN) {
                  this._language = LanguageTypes.ELanguage.ru;
                }
              }
              LocalStorageTool.setStringWithAES('language', this._language.toString());
            }
            return this._language;
          },
          set: function set(v) {
            if (this._language != v) {
              this._language = v;
              LocalStorageTool.setStringWithAES('language', this._language.toString());
              this.eventTarget.emit(LanguageTypes.EventLanguageChange);
            }
          }
        }]);
        return LanguageManager;
      }());
      LanguageManager.eventTarget = new EventTarget();
      LanguageManager._language = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageTypes.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "dd473eytwBATap8FC9gpfD2", "LanguageTypes", undefined);
      var LanguageTypes;
      (function (_LanguageTypes) {
        var EventLanguageChange = _LanguageTypes.EventLanguageChange = 'EVENT_LANGUAGE_CHANGE';
        var ELanguage = /*#__PURE__*/function (ELanguage) {
          ELanguage[ELanguage["tc"] = 0] = "tc";
          ELanguage[ELanguage["sc"] = 1] = "sc";
          ELanguage[ELanguage["en"] = 2] = "en";
          ELanguage[ELanguage["ru"] = 3] = "ru";
          return ELanguage;
        }({});
        _LanguageTypes.ELanguage = ELanguage;
      })(LanguageTypes || (LanguageTypes = {}));
      var LanguageTypes$1 = exports('default', LanguageTypes);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Launch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './CocosDevKit.ts', './Functions.ts', './GrootEx.ts', './LaunchPage.ts', './GameStorage.ts', './DebugButton.ts', './GameConfig.ts', './NativeDeviceBridge.ts', './GameDecorators.ts', './NativeLaunchBridge.ts', './PublicBinder.ts', './OnError.ts', './GRootSingleInstance.ts', './GRootMultipleInstances.ts', './TelegramDeviceBridge.ts', './DebugBinder.ts', './LobbyBinder.ts', './GamePlayBinder.ts', './LaunchBinder.ts', './EventReporter.ts', './AudioManager.ts', './WalletBinder.ts', './PokerBinder.ts', './HttpTools.ts', './LocalStorageTool.ts', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, assetManager, Component, sys, screen, view, ResolutionPolicy, profiler, game, UIConfig, onUserData, GRootEx, LaunchPage, GameStorage, DebugButton, GameConfig, NativeDeviceBridge, SetCustomFguiClassExtension, InitGameData, InitNetProxy, NativeLaunchBridge, PublicBinder, OnError, GRootSingleInstance, GRootMultipleInstances, TelegramDeviceBridge, DebugBinder, LobbyBinder, GamePlayBinder, LaunchBinder, EventReporter, AudioManager, WalletBinder, PokerBinder, HttpTools, LocalStorageTool, LogOption;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      assetManager = module.assetManager;
      Component = module.Component;
      sys = module.sys;
      screen = module.screen;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      profiler = module.profiler;
      game = module.game;
    }, function (module) {
      UIConfig = module.UIConfig;
    }, null, function (module) {
      onUserData = module.onUserData;
    }, function (module) {
      GRootEx = module.GRootEx;
    }, function (module) {
      LaunchPage = module.LaunchPage;
    }, function (module) {
      GameStorage = module.GameStorage;
    }, function (module) {
      DebugButton = module.DebugButton;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      SetCustomFguiClassExtension = module.SetCustomFguiClassExtension;
      InitGameData = module.InitGameData;
      InitNetProxy = module.InitNetProxy;
    }, function (module) {
      NativeLaunchBridge = module.NativeLaunchBridge;
    }, function (module) {
      PublicBinder = module.default;
    }, function (module) {
      OnError = module.OnError;
    }, function (module) {
      GRootSingleInstance = module.GRootSingleInstance;
    }, function (module) {
      GRootMultipleInstances = module.GRootMultipleInstances;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      DebugBinder = module.default;
    }, function (module) {
      LobbyBinder = module.default;
    }, function (module) {
      GamePlayBinder = module.default;
    }, function (module) {
      LaunchBinder = module.default;
    }, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      WalletBinder = module.default;
    }, function (module) {
      PokerBinder = module.default;
    }, function (module) {
      HttpTools = module.HttpTools;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }, function (module) {
      LogOption = module.LogOption;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "5d05feWgptAC6GdPZr8o+Nd", "Launch", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Launch = exports('Launch', (_dec = ccclass('Launch'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Launch, _Component);
        function Launch() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "debugButton", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = Launch.prototype;
        _proto.onLoad = /*#__PURE__*/function () {
          var _onLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var resize, callback, groot;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  OnError.init();
                  GameConfig.init();
                  LogOption.loadTagOption();
                  _context.next = 5;
                  return this.loadBundle();
                case 5:
                  {
                    GameStorage.showFPS = false;
                    profiler.hideStats();
                  }
                  LocalStorageTool.storageEncryptKey = '5d4f9sg0'; // 长度必须是8的整数倍
                  _context.next = 9;
                  return TelegramDeviceBridge.Instance.initDeviceInfo('7a6b8c9d0e1f2a3b');
                case 9:
                  _context.next = 11;
                  return NativeDeviceBridge.Instance.initDeviceInfo();
                case 11:
                  _context.next = 13;
                  return NativeLaunchBridge.Instance.init();
                case 13:
                  EventReporter.init();
                  if (GameConfig.singleInstanceGroot) {
                    resize = function resize() {
                      var size = view.getVisibleSize();
                      if (size.width / size.height > 1080 / 1920) {
                        view.setResolutionPolicy(ResolutionPolicy.SHOW_ALL);
                      } else {
                        view.setResolutionPolicy(ResolutionPolicy.FIXED_WIDTH);
                      }
                    };
                    callback = function callback() {
                      game.emit('do_restart_game');
                    };
                    resize();
                    if (!TelegramDeviceBridge.Instance.isTMA && (sys.isBrowser && !sys.isMobile || !sys.isBrowser)) {
                      screen.on('window-resize', callback, this);
                    }
                  } else {
                    view.setDesignResolutionSize(3540, 1920, ResolutionPolicy.SHOW_ALL);
                  }
                  UIConfig.bringWindowToFrontOnClick = false;
                  UIConfig.onUserData = onUserData;
                  HttpTools.init('OHVp3NNlfsnNYFSh');
                  InitGameData();
                  InitNetProxy();
                  this.bindPublicExtension();
                  if (GameConfig.singleInstanceGroot) {
                    GRootSingleInstance.create();
                  } else {
                    GRootMultipleInstances.create();
                  }
                  groot = GRootEx.getInst();
                  AudioManager.inst.init(groot);
                  LaunchPage.create(groot).showOn(groot);
                  this.debugButton.addComponent(DebugButton);
                case 26:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onLoad() {
            return _onLoad.apply(this, arguments);
          }
          return onLoad;
        }();
        _proto.bindPublicExtension = function bindPublicExtension() {
          PublicBinder.bindAll();
          PokerBinder.bindAll();
          DebugBinder.bindAll();
          LobbyBinder.bindAll();
          GamePlayBinder.bindAll();
          LaunchBinder.bindAll();
          WalletBinder.bindAll();
          SetCustomFguiClassExtension();
        };
        _proto.loadBundle = function loadBundle() {
          return new Promise(function (resolve) {
            assetManager.loadBundle(GameConfig.bundleName, function (err, bundle) {
              if (err) {
                console.error(err);
              }
              if (bundle) {
                GameConfig.bundle = bundle;
                UIConfig.defaultBundle = bundle;
                resolve();
              }
            });
          });
        };
        return Launch;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "debugButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LaunchBgFix.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, UITransform, screen, view, Component, GameConfig;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      screen = module.screen;
      view = module.view;
      Component = module.Component;
    }, function (module) {
      GameConfig = module.GameConfig;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "12952/7hq9F+6+zMRNd9yLn", "LaunchBgFix", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BgFix = exports('BgFix', (_dec = ccclass('BgFix'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BgFix, _Component);
        function BgFix() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = BgFix.prototype;
        _proto.start = function start() {
          if (GameConfig.singleInstanceGroot) {
            var trans = this.getComponent(UITransform);
            var vszie = screen.windowSize;
            vszie.width /= view.getScaleX();
            vszie.height /= view.getScaleY();
            var scale = Math.max(vszie.width / trans.width, vszie.height / trans.height);
            this.node.setScale(scale, scale);
          }
        };
        return BgFix;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LaunchBinder.ts", ['cc', './UI_UILaunch.ts', './fairygui.mjs'], function (exports) {
  var cclegacy, UI_UILaunch, UIObjectFactory;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_UILaunch = module.default;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a46c7/K3fFDjpbCfikjFT1l", "LaunchBinder", undefined);
      var LaunchBinder = exports('default', /*#__PURE__*/function () {
        function LaunchBinder() {}
        LaunchBinder.bindAll = function bindAll() {
          UIObjectFactory.setExtension(UI_UILaunch.URL, UI_UILaunch);
        };
        return LaunchBinder;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LaunchPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_UILaunch.ts', './MultiLanguageText.ts', './CocosDevKit.ts', './GameWindowBase.ts', './GameConfig.ts', './GateWayCheck.ts', './GameDecorators.ts', './LoginProxy.ts', './HttpLogin.ts', './PageEvent.ts', './LobbyPage.ts', './GameStorage.ts', './ConfirmBox.ts', './OSSConfig.ts', './TelegramDeviceBridge.ts', './ServerMaintenancePage.ts', './LanguageManage.ts', './GameConst.ts', './gameproto.mjs_cjs=&original=.js', './TexasProxy.ts', './TexasGamePage.ts', './GRootSingleInstance.ts', './GRootMultipleInstances.ts', './EventReporter.ts', './MttProxy.ts', './NativeDeviceBridge.ts', './HttpProtoBase.ts', './CDKDecorators.ts', './gameproto.js', './NetTypes.ts', './HotUpdate.ts', './Logger.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, sys, TTFFont, director, HorizontalTextAlignment, game, settings, registerFont, UIConfig, UI_UILaunch, MultiLanguageText, GameWindowBase, GameConfig, GateWayCheck, MarkForPageEventListener, ExceptionCapture, LoginProxy, HttpLogin, EPageEvent, LobbyPage, GameStorage, ConfirmBox, OSSConfig, TelegramDeviceBridge, ServerMaintenancePage, LanguageManager, GameConst, TexasProxy, TexasGamePage, GRootSingleInstance, GRootMultipleInstances, EventReporter, MttProxy, NativeDeviceBridge, HttpError, EHttpErrorType, SafeHandler, _cjsExports, NetTypes, HotUpdateConfig, HotUpdate, Log, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      TTFFont = module.TTFFont;
      director = module.director;
      HorizontalTextAlignment = module.HorizontalTextAlignment;
      game = module.game;
      settings = module.settings;
    }, function (module) {
      registerFont = module.registerFont;
      UIConfig = module.UIConfig;
    }, function (module) {
      UI_UILaunch = module.default;
    }, function (module) {
      MultiLanguageText = module.MultiLanguageText;
    }, null, function (module) {
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      GateWayCheck = module.GateWayCheck;
    }, function (module) {
      MarkForPageEventListener = module.MarkForPageEventListener;
      ExceptionCapture = module.ExceptionCapture;
    }, function (module) {
      LoginProxy = module.LoginProxy;
    }, function (module) {
      HttpLogin = module.HttpLogin;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      LobbyPage = module.LobbyPage;
    }, function (module) {
      GameStorage = module.GameStorage;
    }, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      OSSConfig = module.OSSConfig;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      ServerMaintenancePage = module.ServerMaintenancePage;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, null, function (module) {
      TexasProxy = module.TexasProxy;
    }, function (module) {
      TexasGamePage = module.TexasGamePage;
    }, function (module) {
      GRootSingleInstance = module.GRootSingleInstance;
    }, function (module) {
      GRootMultipleInstances = module.GRootMultipleInstances;
    }, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      HttpError = module.HttpError;
      EHttpErrorType = module.EHttpErrorType;
    }, function (module) {
      SafeHandler = module.SafeHandler;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      NetTypes = module.NetTypes;
    }, function (module) {
      HotUpdateConfig = module.HotUpdateConfig;
      HotUpdate = module.HotUpdate;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2;
      cclegacy._RF.push({}, "eeae1v+E0ZOgLNMFTb+d4Z4", "LaunchPage", undefined);
      var LaunchPage = exports('LaunchPage', (_dec = ExceptionCapture(), _dec2 = ExceptionCapture(), _dec3 = MarkForPageEventListener(EPageEvent.LOGIN_PROCESS_COMPLETED), _dec4 = MarkForPageEventListener(EPageEvent.LOGIN_PROCESS_FAILED), _dec5 = ExceptionCapture(), _dec6 = MarkForPageEventListener(EPageEvent.DEBUG_LOGIN), (_class = (_class2 = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(LaunchPage, _GameWindowBase);
        function LaunchPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Launch'];
          _this.paneClass = UI_UILaunch;
          _this.removeUnderlyingWindow = true;
          _this.gestureCloseWindow = false;
          _this.showEnterLoading = false;
          _this.pageName = 'LaunchPage';
          _this.newVersion = void 0;
          _this.versionMultiLanguageText = void 0;
          _this.jumpLoading = void 0;
          _this._startLoginTime = void 0;
          _this._reconnectConfirmBox = void 0;
          return _this;
        }
        LaunchPage.create = function create(from) {
          if (!this._inst) {
            this._inst = new LaunchPage(from);
            globalThis['LaunchPageInstance'] = this._inst;
            return this._inst;
          }
        };
        var _proto = LaunchPage.prototype;
        _proto.setProgress = function setProgress(num) {
          this.pane.m_text_progress.setVar('progress', '' + num).flushVars();
          this.pane.m_progressBar.value = num;
          if (window.__setCustomLoadingProgress) {
            window.__setCustomLoadingProgress(num);
          }
        };
        _proto.removeCustomLoading = function removeCustomLoading() {
          if (!sys.isNative && window.__removeCustomLoadingView) {
            window.__removeCustomLoadingView();
          }
        };
        _proto.onInit = /*#__PURE__*/function () {
          var _onInit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this2 = this;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  Log.debug.log('LaunchPage', 'onInit');
                  settings.querySettings('CustomSettings', 'tgMiniApp');
                  {
                    _context.next = 8;
                    break;
                  }
                case 8:
                  this.pane.m_groupLaunchErr.visible = false;
                  this.grootInst.loadingManager.forbid = true;
                  this.jumpLoading = this.grootInst.createLoadingItem(this);
                  this.versionMultiLanguageText = this.pane.m_text_version.node.getComponent(MultiLanguageText);
                  {
                    this.pane.m_text_version.visible = false;
                  }
                  this.setProgress(0);
                  {
                    this.showDebugButton();
                  }
                  _context.next = 17;
                  return this.loadFont('TTFFont/HelveticaNeue-01', true);
                case 17:
                  _context.next = 19;
                  return this.loadFont('TTFFont/HelveticaNeue-Medium-11');
                case 19:
                  _context.next = 21;
                  return this.loadFont('TTFFont/HelveticaNeue-Bold-02');
                case 21:
                  if (sys.isBrowser) {
                    Utils.fguiLoadPackage(['FGUI/Public', 'FGUI/Lobby'], function (finished, total) {
                      var num = 95 * (finished / total);
                      _this2.setProgress(num);
                    }).then(function () {
                      if (GameConfig.singleInstanceGroot) {
                        GRootSingleInstance.createPublicLayer();
                      } else {
                        GRootMultipleInstances.createPublicLayer();
                      }
                      _this2.gateWayCheck();
                    });
                  } else {
                    Utils.fguiLoadPackage(['FGUI/Public']).then(function () {
                      if (GameConfig.singleInstanceGroot) {
                        GRootSingleInstance.createPublicLayer();
                      } else {
                        GRootMultipleInstances.createPublicLayer();
                      }
                      _this2.gateWayCheck();
                    });
                  }
                case 22:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onInit() {
            return _onInit.apply(this, arguments);
          }
          return onInit;
        }();
        _proto.dispose = function dispose() {
          _GameWindowBase.prototype.dispose.call(this);
          LaunchPage._inst = undefined;
          globalThis['LaunchPageInstance'] = undefined;
          this.grootInst.loadingManager.forbid = false;
        };
        _proto.loadFont = function loadFont(fontPath, isDefaultFont) {
          if (isDefaultFont === void 0) {
            isDefaultFont = false;
          }
          return new Promise(function (resolve) {
            GameConfig.bundle.load(fontPath, TTFFont, function (err, font) {
              if (err) {
                console.error(err);
              }
              if (font) {
                registerFont(font.name, font);
                if (isDefaultFont) {
                  UIConfig.defaultFont = font.name;
                }
                resolve();
              }
            });
          });
        };
        _proto.showDebugButton = function showDebugButton() {
          var btnNode = director.getScene().getChildByPath('Canvas/DebugButton');
          if (btnNode) {
            btnNode.active = true;
          }
        };
        _proto.gateWayCheck = function gateWayCheck() {
          var _this3 = this;
          this._startLoginTime = sys.now();
          return GateWayCheck.GateWayCheckRequest.create().post().then(function (resp) {
            if (resp) {
              if (resp.channel_info) {
                GameConfig.serverChanelInfo = resp.channel_info;
              }
              if (resp.code == 0) {
                {
                  _this3.setProgress(97);
                  _this3.tryLogin();
                }
              } else if (resp.code == 1) {
                _this3.removeCustomLoading();
                //停服公告
                var noticemsg = resp.data;
                var view = ServerMaintenancePage.create(_this3);
                view.setInputParams(noticemsg);
                view.showOn(_this3.grootInst);
              } else if (resp.code == 2) {
                _this3.removeCustomLoading();
                var box = ConfirmBox.create(_this3);
                box.setInputParams({
                  title: LanguageManager.get('TOAST_INFO'),
                  content: LanguageManager.get('TXT_553'),
                  clickOutsideClose: false,
                  buttonNum: 1,
                  confirmText: LanguageManager.get('TXT_545'),
                  align: HorizontalTextAlignment.CENTER
                });
                box.addHook({
                  onConfirm: function onConfirm() {
                    game.end();
                  }
                });
                box.showOn(_this3.grootInst);
              } else {
                // do something
                _this3.removeCustomLoading();
                _this3.showGateWayCheckConfirmBox("\u7F51\u5173\u8FD4\u56DE\u7801\u975E0\uFF1A" + resp.code + "\uFF0C\n" + resp.msg);
              }
            }
          }, function (reason) {
            _this3.removeCustomLoading();
            if (reason instanceof HttpError) {
              if (reason.errType == EHttpErrorType.RequestFail) {
                _this3.showGateWayCheckConfirmBox("\u7F51\u5173\u8BF7\u6C42\u5931\u8D25\uFF0C\n" + reason.message);
              } else {
                _this3.showGateWayCheckConfirmBox("\u7F51\u5173\u8BF7\u6C42\u5931\u8D25\uFF0C\u8FD4\u56DE\u7801\u9519\u8BEF\uFF1A" + reason.errCode + "\uFF0C\n" + reason.message);
              }
            } else if (reason instanceof Error) {
              _this3.showGateWayCheckConfirmBox("\u7F51\u5173\u8BF7\u6C42\u8FC7\u7A0B\u53D1\u751F\u5F02\u5E38\uFF0C\n" + reason.message);
            } else if (typeof reason == 'string') {
              _this3.showGateWayCheckConfirmBox("\u7F51\u5173\u8BF7\u6C42\u8FC7\u7A0B\u53D1\u751F\u5F02\u5E38\uFF0C\n" + reason);
            } else {
              return Promise.reject(reason);
            }
          });
        };
        _proto.showGateWayCheckConfirmBox = function showGateWayCheckConfirmBox(text) {
          var _this4 = this;
          var box = ConfirmBox.create(this);
          box.setInputParams({
            content: text,
            clickOutsideClose: false,
            buttonNum: 1,
            align: HorizontalTextAlignment.LEFT
          });
          box.addHook({
            onConfirm: function onConfirm() {
              _this4.gateWayCheck();
            }
          });
          box.showOn(this.grootInst);
        };
        _proto.showHotUpdateCheckConfirmBox = function showHotUpdateCheckConfirmBox(text) {
          var _this5 = this;
          var box = ConfirmBox.create(this);
          box.setInputParams({
            content: text,
            clickOutsideClose: false,
            buttonNum: 1,
            align: HorizontalTextAlignment.LEFT
          });
          box.addHook({
            onConfirm: function onConfirm() {
              _this5.startHotupdateProcess();
            }
          });
          box.showOn(this.grootInst);
        };
        _proto.tryLogin = /*#__PURE__*/function () {
          var _tryLogin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var isTMA, initDataRaw, info;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(GameConfig.bundleName == GameConst.EBundleName.PokerMaster)) {
                    _context2.next = 2;
                    break;
                  }
                  return _context2.abrupt("return");
                case 2:
                  isTMA = TelegramDeviceBridge.Instance.isTMA;
                  if (!isTMA) {
                    _context2.next = 8;
                    break;
                  }
                  initDataRaw = TelegramDeviceBridge.Instance.initDataRaw;
                  Log.info.log('LaunchPage', 'tryLogin', 'TelegramDeviceBridge.initDataRaw:', initDataRaw);
                  this.login(HttpLogin.ELoginType.telegram, initDataRaw);
                  return _context2.abrupt("return");
                case 8:
                  {
                    _context2.next = 21;
                    break;
                  }
                case 15:
                  this.login(info.loginType, info.account);
                  return _context2.abrupt("break", 20);
                case 17:
                  this.login(info.loginType, info.account, info.password);
                  return _context2.abrupt("break", 20);
                case 19:
                  return _context2.abrupt("break", 20);
                case 20:
                  return _context2.abrupt("return");
                case 21:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function tryLogin() {
            return _tryLogin.apply(this, arguments);
          }
          return tryLogin;
        }();
        _proto.login = function login(type, email, pswd) {
          return LoginProxy.inst.startLoginProcess(type, email, pswd);
        };
        _proto.onLoginProcessCompleted = function onLoginProcessCompleted(from) {
          var _this6 = this;
          var now = sys.now();
          var cost = (now - this._startLoginTime) / 1000;
          EventReporter.emit(EventReporter.Event.mixpanel.LOGIN, {
            TimeCost: cost
          });
          if (GameConfig.bundleName == GameConst.EBundleName.PokerMaster) {
            this.setProgress(100);
            var roomID = NativeDeviceBridge.Instance.launchParam.roomid;
            // todo mtt 处理
            if (roomID && roomID > 0) {
              this.jumpLoading.show();
              TexasProxy.inst.queryHallRoomInfo(roomID, SafeHandler(function (netdata) {
                var msgQueryRoomInfoRsp = netdata.getData(_cjsExports.texas.MsgQueryRoomInfoRsp);
                var roomInfo = msgQueryRoomInfoRsp.info;
                if (msgQueryRoomInfoRsp.roomId == roomID && roomInfo) {
                  _this6.enterHallGame(roomInfo);
                } else {
                  _this6.jumpLoading.hide();
                  // todo 错误处理
                }
              }, this));
              return;
            }
            return;
          }
          this.jumpLoading.show();
          this.setProgress(100);
          var loginRspMsg = LoginProxy.inst.loginRspMsg;
          var mttid = 0;
          var roomid = 0;
          if (loginRspMsg) {
            mttid = loginRspMsg.mttid;
            roomid = loginRspMsg.tableid;
          }
          var flag = mttid > 0 || roomid > 0;
          if (!flag && TelegramDeviceBridge.Instance.isTMA && TelegramDeviceBridge.Instance.startParam) {
            // 可以接收 tg 分享所携带的 mttid 和 roomid 参数
            if (TelegramDeviceBridge.Instance.startParam.mttid) {
              mttid = loginRspMsg.mttid;
            }
            if (TelegramDeviceBridge.Instance.startParam.roomid) {
              roomid = TelegramDeviceBridge.Instance.startParam.roomid;
            }
            flag = mttid > 0 || roomid > 0;
          }
          if (flag) {
            var isMTT = mttid > 0;
            var isClub = false; // (loginRspMsg.clubid as number) > 0;
            if (isMTT) {
              MttProxy.inst.getMttInfo(mttid, SafeHandler(function (netdata) {
                if (netdata.isRetSuccess()) {
                  // 基于返回码判断是否为成功
                  var msg = netdata.getData(_cjsExports.mtt.MsgGetMttInfoRsp); // 获取消息内容
                  var mttInfo = msg.mttInfo;
                  if (mttInfo) {
                    var status = mttInfo.buttonState;
                    switch (status) {
                      case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE:
                      case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH:
                      case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_NO_RANK:
                        // 不能进
                        break;
                      default:
                        var clubid = mttInfo.clubid;
                        if (clubid && clubid > 0) ;else {
                          var isLookon = loginRspMsg.state == 8;
                          _this6.enterHallMTT(mttInfo, isLookon);
                          return;
                        }
                        break;
                    }
                  }
                } else {
                  var retCode = netdata.getRetCode();
                  var text = LanguageManager.getErrorText(retCode.toString());
                  if (text && text.length > 0) {
                    _this6.grootInst.showCenterTip(text);
                  }
                }
                _this6.enterLobby();
              }, this));
            } else if (isClub) {
              // if (isColorGame) {
              //     // 俱乐部 ColorGame
              // } else if (isOFC) {
              //     // 俱乐部 OFC
              // } else {
              //     // 俱乐部德州
              // }
              // this.enterLobby();
              throw '进入俱乐部牌局逻辑还没做';
            } else {
              // 大厅德州
              var _roomID = roomid;
              TexasProxy.inst.queryHallRoomInfo(_roomID, SafeHandler(function (netdata) {
                var msgQueryRoomInfoRsp = netdata.getData(_cjsExports.texas.MsgQueryRoomInfoRsp);
                var roomInfo = msgQueryRoomInfoRsp.info;
                if (msgQueryRoomInfoRsp.roomId == _roomID && roomInfo) {
                  _this6.enterHallGame(roomInfo);
                } else {
                  // this.enterGameLoading.hide();
                  _this6.enterLobby();
                }
              }, this));
            }
          } else {
            this.enterLobby();
          }
        };
        _proto.onLoginFaildCallBack = function onLoginFaildCallBack() {
          this.removeCustomLoading();
          this.showReconnectConfirmBox(LanguageManager.get('TXT_552'));
        };
        _proto.showReconnectConfirmBox = function showReconnectConfirmBox(content) {
          var _this7 = this;
          if (this._reconnectConfirmBox) return;
          var box = ConfirmBox.create(this);
          var btnNum = 2;
          if (TelegramDeviceBridge.Instance.isTMA) {
            btnNum = 1;
          }
          box.setInputParams({
            content: content,
            clickOutsideClose: false,
            buttonNum: btnNum
          });
          box.addHook({
            onConfirm: this.tryLogin.bind(this),
            onCancel: function onCancel() {
              game.emit('do_restart_game');
            },
            onPageDestroy: function onPageDestroy() {
              _this7._reconnectConfirmBox = undefined;
            }
          });
          box.showOn(this.grootInst);
          this._reconnectConfirmBox = box;
        };
        _proto.onNetStateChange = function onNetStateChange(state) {
          switch (state) {
            case NetTypes.ENetNodeState.closed:
              {
                this.removeCustomLoading();
                this.showReconnectConfirmBox(LanguageManager.get('TXT_552'));
              }
              break;
          }
        };
        _proto.enterLobby = function enterLobby() {
          LobbyPage.create(this).showOn(this.grootInst);
        };
        _proto.enterHallGame = function enterHallGame(roomInfo) {
          var texasGamePage = TexasGamePage.create(this);
          texasGamePage.setInputParams({
            roomInfo: roomInfo
          });
          texasGamePage.showOn(this.grootInst);
        };
        _proto.enterHallMTT = function enterHallMTT(mttInfo, lookon) {
          var texasGamePage = TexasGamePage.create(this);
          texasGamePage.setInputParams({
            isMatch: true,
            isLookOn: lookon,
            mttInfo: mttInfo
          });
          texasGamePage.showOn(this.grootInst);
        };
        _proto.startHotupdateProcess = function startHotupdateProcess() {
          var _this8 = this;
          if (GameConfig.isLocalPackage()) {
            var hotupdateConfig = new HotUpdateConfig();
            var localVersion = hotupdateConfig.getLocalVersion();
            this.versionMultiLanguageText.setFormatParams(localVersion);
            var lastVersion = GameStorage.lastUpdateVersion;
            if (lastVersion == localVersion) {
              // 不用再检查更新了
              this.setProgress(100);
              GameStorage.lastUpdateVersion = undefined;
              this.tryLogin();
            } else {
              HotUpdate.init(hotupdateConfig);
              HotUpdate.create(this).update();
            }
          } else {
            var _hotupdateConfig = new HotUpdateConfig();
            var _localVersion = _hotupdateConfig.getLocalVersion();
            this.versionMultiLanguageText.setFormatParams(_localVersion);
            OSSConfig.OSSConfigRequest.create().get(true).then(function (v) {
              if (v) {
                Log.hotupdate.log('当前热更新资源配置:', GameConfig.curHotUpdateAssetsKey);
                _hotupdateConfig.remoteAssetsBaseUrl = v[GameConfig.curHotUpdateAssetsKey];
                Log.hotupdate.log('remoteAssetsBaseUrl:', _hotupdateConfig.remoteAssetsBaseUrl);
                var _lastVersion = GameStorage.lastUpdateVersion;
                if (_lastVersion == _localVersion) {
                  // 不用再检查更新了
                  _this8.setProgress(100);
                  GameStorage.lastUpdateVersion = undefined;
                  _this8.tryLogin();
                } else {
                  HotUpdate.init(_hotupdateConfig);
                  HotUpdate.create(_this8).update();
                }
              } else {
                _this8.showHotUpdateCheckConfirmBox("ossconfig\u914D\u7F6E\u83B7\u53D6\u5931\u8D25\uFF0C\u70B9\u51FB\u786E\u5B9A\u91CD\u8BD5");
              }
            }, function (reason) {
              _this8.showHotUpdateCheckConfirmBox("ossconfig\u914D\u7F6E\u83B7\u53D6\u5931\u8D25\uFF0C\u70B9\u51FB\u786E\u5B9A\u91CD\u8BD5");
            });
          }
        };
        _proto.onHotUpdateFailed = function onHotUpdateFailed(task, reason) {
          this.showHotUpdateCheckConfirmBox("\u70ED\u66F4\u65B0\u5931\u8D25\n" + reason.message + "\n\u70B9\u51FB\u786E\u5B9A\u91CD\u8BD5");
        };
        _proto.onHotUpdateProgress = function onHotUpdateProgress(task, percent, totalBytes, downloadedBytes) {
          this.setProgress(Math.floor(0.95 * percent * 100 + 5));
        };
        _proto.onHotUpdateFinish = function onHotUpdateFinish(task) {
          GameStorage.lastUpdateVersion = this.newVersion;
          game.emit('do_restart_game');
        };
        _proto.onHotUpdateNewVersion = function onHotUpdateNewVersion(task, newVersion) {
          this.newVersion = newVersion;
          this.versionMultiLanguageText.setFormatParams(newVersion);
        };
        _proto.onHotUpdateAlreadUpToDate = function onHotUpdateAlreadUpToDate(task) {
          this.setProgress(100);
          this.tryLogin();
        };
        _proto.onGuestLoginListener = function onGuestLoginListener(from, account) {
          return LoginProxy.inst.startLoginProcess(HttpLogin.ELoginType.guest, account);
        };
        _createClass(LaunchPage, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return LaunchPage;
      }(GameWindowBase), _class2._inst = void 0, _class2), (_applyDecoratedDescriptor(_class.prototype, "gateWayCheck", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "gateWayCheck"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "login", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "login"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLoginProcessCompleted", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "onLoginProcessCompleted"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLoginFaildCallBack", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "onLoginFaildCallBack"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onGuestLoginListener", [_dec5, _dec6], Object.getOwnPropertyDescriptor(_class.prototype, "onGuestLoginListener"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadEncryImage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, isValid, ImageAsset, SpriteFrame, Texture2D, assetManager;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      isValid = module.isValid;
      ImageAsset = module.ImageAsset;
      SpriteFrame = module.SpriteFrame;
      Texture2D = module.Texture2D;
      assetManager = module.assetManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b91dbP0q6BMJoP1Cc/tLYIm", "LoadEncryImage", undefined);
      /**
       * 网络图片组件，使用方法和头像一样
       */
      var LoadEncryImage = exports('LoadEncryImage', /*#__PURE__*/function () {
        function LoadEncryImage() {}
        var _proto = LoadEncryImage.prototype;
        // 将 Base64 字符串解码为 ArrayBuffer
        _proto.base64ToArrayBuffer = function base64ToArrayBuffer(base64) {
          var binaryString = window.atob(base64);
          var len = binaryString.length;
          var bytes = new Uint8Array(len);
          for (var i = 0; i < len; i++) {
            bytes[i] = binaryString.charCodeAt(i);
          }
          return bytes.buffer;
        }

        // 使用 ArrayBuffer 创建 Blob
        ;

        _proto.createBlob = function createBlob(base64) {
          var arrayBuffer = this.base64ToArrayBuffer(base64);
          return new Blob([arrayBuffer], {
            type: 'image/png'
          });
        }

        // 创建图片纹理并赋值给精灵组件
        ;

        _proto.loadImageFromBase64 = function loadImageFromBase64(base64, loader) {
          if (loader && isValid(loader)) {
            var loadNode = loader;
            var blob = this.createBlob(base64);
            var img = new Image();
            img.src = URL.createObjectURL(blob);
            img.onload = function () {
              // 创建 ImageAsset
              var imageAsset = new ImageAsset(img);
              // 创建 SpriteFrame
              var spriteFrame = new SpriteFrame();
              var texture = new Texture2D();
              texture.image = imageAsset;
              spriteFrame.texture = texture;
              if (loadNode && isValid(loadNode)) {
                loadNode.texture = spriteFrame;
              }
            };
          }
        };
        _proto.LoadRemoteDecryptImage = function LoadRemoteDecryptImage(nowUrl, loader) {
          var _this = this;
          if (!nowUrl || nowUrl.length <= 0 || !loader) return;
          //eg:本地逻辑判断
          var info = localStorage.getItem(nowUrl);
          if (info && info.length > 0) {
            this.loadImageFromBase64(info, loader);
          } else {
            assetManager.loadRemote(nowUrl, {}, function (err, asset) {
              if (err || !asset) {
                console.error('1=>getRemoteDecryptImage Failed to load image:', err);
              } else {
                if (err) {
                  console.error('2=>getRemoteDecryptImage Failed to load image:', err);
                } else {
                  if (asset) {
                    var str = asset['_file'];
                    if (str && str.length > 0) {
                      _this.loadImageFromBase64(str, loader);
                      localStorage.setItem(nowUrl, str);
                    }
                  }
                }
              }
            });
          }
        };
        _createClass(LoadEncryImage, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new LoadEncryImage();
            }
            return this._instance;
          }
        }]);
        return LoadEncryImage;
      }());
      LoadEncryImage._instance = null;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Loading.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, Component, Node;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      Node = module.Node;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e4fc2yxTqhH+rOwj2TrwYdz", "Loading", undefined);
      var LoadingManager = exports('LoadingManager', /*#__PURE__*/function () {
        function LoadingManager(loadingHandler) {
          this.loadingHandler = void 0;
          this._forbid = false;
          this.showingList = [];
          this.loadingHandler = loadingHandler;
        }
        var _proto = LoadingManager.prototype;
        _proto.isShowing = function isShowing(item) {
          return this.showingList.includes(item);
        };
        _proto.addShowingObject = function addShowingObject(item) {
          if (!this.isShowing(item)) {
            this.showingList.push(item);
            if (!this._forbid) {
              this.loadingHandler._showLoading(item.target);
            }
          }
        };
        _proto.removeShowingObject = function removeShowingObject(item) {
          var index = this.showingList.indexOf(item);
          if (index != -1) {
            this.showingList.splice(index, 1);
          }
          if (this.showingList.length == 0) {
            this.loadingHandler._hideLoading();
          }
        };
        _createClass(LoadingManager, [{
          key: "forbid",
          get: function get() {
            return this._forbid;
          },
          set: function set(v) {
            this._forbid = v;
            if (v) {
              if (this.showingList.length > 0) {
                var item = this.showingList[this.showingList.length - 1];
                this.loadingHandler._showLoading(item.target);
              }
            } else {
              this.loadingHandler._hideLoading();
            }
          }
        }, {
          key: "isLoading",
          get: function get() {
            return this.showingList.length > 0;
          }
        }]);
        return LoadingManager;
      }());
      var Loading = exports('Loading', /*#__PURE__*/function () {
        function Loading(loadingManager, target) {
          this.target = void 0;
          this.loadingManager = void 0;
          this.loadingManager = loadingManager;
          if (!target) return;
          if (Node.isNode(target)) {
            if (target.isValid) {
              this.target = target;
              target.on(Node.EventType.NODE_DESTROYED, this.onTargetNodeDestroy, this);
              target.on(Node.EventType.PARENT_CHANGED, this.onTargetParentChaned, this);
            }
          } else if (target instanceof Component) {
            if (target.isValid) {
              this.target = target;
              target.node.on(Node.EventType.COMPONENT_REMOVED, this.onTargetComponentRemoved, this);
              target.node.on(Node.EventType.NODE_DESTROYED, this.onTargetNodeDestroy, this);
              target.node.on(Node.EventType.PARENT_CHANGED, this.onTargetParentChaned, this);
            }
          } else {
            if (target.node.isValid) {
              this.target = target;
              target.node.on(Node.EventType.NODE_DESTROYED, this.onTargetNodeDestroy, this);
              target.node.on(Node.EventType.PARENT_CHANGED, this.onTargetParentChaned, this);
            }
          }
        }
        var _proto2 = Loading.prototype;
        _proto2.onTargetNodeDestroy = function onTargetNodeDestroy(node) {
          this.destroy();
        };
        _proto2.onTargetComponentRemoved = function onTargetComponentRemoved(component) {
          if (this.target == component) {
            this.destroy();
          }
        };
        _proto2.onTargetParentChaned = function onTargetParentChaned() {
          if (this.target instanceof Component) {
            if (!this.target.node.parent) {
              this.hide();
            }
          }
        };
        _proto2.show = function show() {
          if (!this.loadingManager) return;
          if (this.target) {
            if (Node.isNode(this.target)) {
              if (!this.target.isValid) return;
            } else {
              if (!this.target.node.isValid) return;
            }
          }
          // @ts-ignore
          this.loadingManager.addShowingObject(this);
        };
        _proto2.hide = function hide() {
          if (!this.loadingManager) return;
          if (this.target) {
            if (Node.isNode(this.target)) {
              if (!this.target.isValid) return;
            } else {
              if (!this.target.node.isValid) return;
            }
          }
          // @ts-ignore
          this.loadingManager.removeShowingObject(this);
        };
        _proto2.destroy = function destroy() {
          // @ts-ignore
          this.loadingManager && this.loadingManager.removeShowingObject(this);
          if (this.target) {
            if (Node.isNode(this.target)) {
              if (this.target.isValid) {
                this.target.targetOff(this);
              }
            } else {
              if (this.target.node && this.target.node.isValid) {
                this.target.node.targetOff(this);
              }
            }
          }
          this.target = undefined;
          this.loadingManager = undefined;
        };
        return Loading;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyBinder.ts", ['cc', './UI_MarketButton2.ts', './UI_MarketBuyDetailDialog.ts', './UI_MarketSellDetailDialog.ts', './UI_LobbyHomeTaskItem.ts', './UI_MarketBuyDialog.ts', './UI_MarketCreateOrderDialog.ts', './UI_MarketButton3.ts', './UI_LobbyDayLogin.ts', './UI_DayLoginBItem.ts', './UI_HandCardReviewItem.ts', './UI_Lobby_Board_BlindDialog.ts', './UI_Lobby_Board_BlindItem.ts', './UI_Lobby_board_payout_structure.ts', './UI_Lobby_board_page_item.ts', './UI_HandCardReviewPage.ts', './UI_WalletGroup.ts', './UI_MarketButton1.ts', './UI_InviteContent.ts', './UI_SelectDefaultAvatarDialog.ts', './UI_HeadItem.ts', './UI_Lobby_Enter_Rank_Ko_Item.ts', './UI_Lobby_Entry_Panal.ts', './UI_Lobby_Prize_Item.ts', './UI_Lobby_Prize_Panal.ts', './UI_Lobby_Table_Item.ts', './UI_Lobby_Table_Panal.ts', './UI_Lobby_Board_Layer.ts', './UI_Lobby_Detail_info_panal.ts', './UI_Lobby_Enter_Item.ts', './UI_Lobby_Enter_Rank_Item.ts', './UI_TGPLevelDialog.ts', './UI_TGPLevelItem.ts', './UI_RoomItemNLH.ts', './UI_NoticeDetailPage.ts', './UI_BannerButton.ts', './UI_GameButton.ts', './UI_GameRoomPageItem.ts', './UI_LobbyItemMarket.ts', './UI_MarketSellItem.ts', './UI_MarketBuyItem.ts', './UI_LobbyMarketSell.ts', './UI_LobbyMarketBuy.ts', './UI_LobbyMarketMyOrder.ts', './UI_MarketOrderItem.ts', './UI_MarketSellDialog.ts', './UI_ChangeNickDialog.ts', './UI_ProfileHeadGroup.ts', './UI_ProfileLanguagePage.ts', './UI_Button4.ts', './UI_Lobby_Invite_Friend_layer.ts', './UI_Lobby_Invite_Friend_Item.ts', './UI_button_Invite.ts', './UI_LobbyPage.ts', './UI_CoinGroup.ts', './UI_LobbyItemGame.ts', './UI_LobbyItemProfile.ts', './UI_NoticePage.ts', './UI_NoticeItem.ts', './UI_LobbyHeadGroup.ts', './UI_LobbyItemHome.ts', './UI_RoomButton.ts', './UI_HandCardItem.ts', './UI_HandCardDayItem.ts', './UI_TGPFreeGoldView.ts', './UI_ButtonTGP.ts', './UI_LobbyHomeGame.ts', './UI_LobbyHomeTask.ts', './UI_RoomItemPlus.ts', './UI_RoomItemMTT.ts', './UI_BannerButtonCmpt.ts', './UI_TouchCmpt.ts', './fairygui.mjs'], function (exports) {
  var cclegacy, UI_MarketButton2, UI_MarketBuyDetailDialog, UI_MarketSellDetailDialog, UI_LobbyHomeTaskItem, UI_MarketBuyDialog, UI_MarketCreateOrderDialog, UI_MarketButton3, UI_LobbyDayLogin, UI_DayLoginBItem, UI_HandCardReviewItem, UI_Lobby_Board_BlindDialog, UI_Lobby_Board_BlindItem, UI_Lobby_board_payout_structure, UI_Lobby_board_page_item, UI_HandCardReviewPage, UI_WalletGroup, UI_MarketButton1, UI_InviteContent, UI_SelectDefaultAvatarDialog, UI_HeadItem, UI_Lobby_Enter_Rank_Ko_Item, UI_Lobby_Entry_Panal, UI_Lobby_Prize_Item, UI_Lobby_Prize_Panal, UI_Lobby_Table_Item, UI_Lobby_Table_Panal, UI_Lobby_Board_Layer, UI_Lobby_Detail_info_panal, UI_Lobby_Enter_Item, UI_Lobby_Enter_Rank_Item, UI_TGPLevelDialog, UI_TGPLevelItem, UI_RoomItemNLH, UI_NoticeDetailPage, UI_BannerButton, UI_GameButton, UI_GameRoomPageItem, UI_LobbyItemMarket, UI_MarketSellItem, UI_MarketBuyItem, UI_LobbyMarketSell, UI_LobbyMarketBuy, UI_LobbyMarketMyOrder, UI_MarketOrderItem, UI_MarketSellDialog, UI_ChangeNickDialog, UI_ProfileHeadGroup, UI_ProfileLanguagePage, UI_Button4, UI_Lobby_Invite_Friend_layer, UI_Lobby_Invite_Friend_Item, UI_button_Invite, UI_LobbyPage, UI_CoinGroup, UI_LobbyItemGame, UI_LobbyItemProfile, UI_NoticePage, UI_NoticeItem, UI_LobbyHeadGroup, UI_LobbyItemHome, UI_RoomButton, UI_HandCardItem, UI_HandCardDayItem, UI_TGPFreeGoldView, UI_ButtonTGP, UI_LobbyHomeGame, UI_LobbyHomeTask, UI_RoomItemPlus, UI_RoomItemMTT, UI_BannerButtonCmpt, UI_TouchCmpt, UIObjectFactory;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_MarketButton2 = module.default;
    }, function (module) {
      UI_MarketBuyDetailDialog = module.default;
    }, function (module) {
      UI_MarketSellDetailDialog = module.default;
    }, function (module) {
      UI_LobbyHomeTaskItem = module.default;
    }, function (module) {
      UI_MarketBuyDialog = module.default;
    }, function (module) {
      UI_MarketCreateOrderDialog = module.default;
    }, function (module) {
      UI_MarketButton3 = module.default;
    }, function (module) {
      UI_LobbyDayLogin = module.default;
    }, function (module) {
      UI_DayLoginBItem = module.default;
    }, function (module) {
      UI_HandCardReviewItem = module.default;
    }, function (module) {
      UI_Lobby_Board_BlindDialog = module.default;
    }, function (module) {
      UI_Lobby_Board_BlindItem = module.default;
    }, function (module) {
      UI_Lobby_board_payout_structure = module.default;
    }, function (module) {
      UI_Lobby_board_page_item = module.default;
    }, function (module) {
      UI_HandCardReviewPage = module.default;
    }, function (module) {
      UI_WalletGroup = module.default;
    }, function (module) {
      UI_MarketButton1 = module.default;
    }, function (module) {
      UI_InviteContent = module.default;
    }, function (module) {
      UI_SelectDefaultAvatarDialog = module.default;
    }, function (module) {
      UI_HeadItem = module.default;
    }, function (module) {
      UI_Lobby_Enter_Rank_Ko_Item = module.default;
    }, function (module) {
      UI_Lobby_Entry_Panal = module.default;
    }, function (module) {
      UI_Lobby_Prize_Item = module.default;
    }, function (module) {
      UI_Lobby_Prize_Panal = module.default;
    }, function (module) {
      UI_Lobby_Table_Item = module.default;
    }, function (module) {
      UI_Lobby_Table_Panal = module.default;
    }, function (module) {
      UI_Lobby_Board_Layer = module.default;
    }, function (module) {
      UI_Lobby_Detail_info_panal = module.default;
    }, function (module) {
      UI_Lobby_Enter_Item = module.default;
    }, function (module) {
      UI_Lobby_Enter_Rank_Item = module.default;
    }, function (module) {
      UI_TGPLevelDialog = module.default;
    }, function (module) {
      UI_TGPLevelItem = module.default;
    }, function (module) {
      UI_RoomItemNLH = module.default;
    }, function (module) {
      UI_NoticeDetailPage = module.default;
    }, function (module) {
      UI_BannerButton = module.default;
    }, function (module) {
      UI_GameButton = module.default;
    }, function (module) {
      UI_GameRoomPageItem = module.default;
    }, function (module) {
      UI_LobbyItemMarket = module.default;
    }, function (module) {
      UI_MarketSellItem = module.default;
    }, function (module) {
      UI_MarketBuyItem = module.default;
    }, function (module) {
      UI_LobbyMarketSell = module.default;
    }, function (module) {
      UI_LobbyMarketBuy = module.default;
    }, function (module) {
      UI_LobbyMarketMyOrder = module.default;
    }, function (module) {
      UI_MarketOrderItem = module.default;
    }, function (module) {
      UI_MarketSellDialog = module.default;
    }, function (module) {
      UI_ChangeNickDialog = module.default;
    }, function (module) {
      UI_ProfileHeadGroup = module.default;
    }, function (module) {
      UI_ProfileLanguagePage = module.default;
    }, function (module) {
      UI_Button4 = module.default;
    }, function (module) {
      UI_Lobby_Invite_Friend_layer = module.default;
    }, function (module) {
      UI_Lobby_Invite_Friend_Item = module.default;
    }, function (module) {
      UI_button_Invite = module.default;
    }, function (module) {
      UI_LobbyPage = module.default;
    }, function (module) {
      UI_CoinGroup = module.default;
    }, function (module) {
      UI_LobbyItemGame = module.default;
    }, function (module) {
      UI_LobbyItemProfile = module.default;
    }, function (module) {
      UI_NoticePage = module.default;
    }, function (module) {
      UI_NoticeItem = module.default;
    }, function (module) {
      UI_LobbyHeadGroup = module.default;
    }, function (module) {
      UI_LobbyItemHome = module.default;
    }, function (module) {
      UI_RoomButton = module.default;
    }, function (module) {
      UI_HandCardItem = module.default;
    }, function (module) {
      UI_HandCardDayItem = module.default;
    }, function (module) {
      UI_TGPFreeGoldView = module.default;
    }, function (module) {
      UI_ButtonTGP = module.default;
    }, function (module) {
      UI_LobbyHomeGame = module.default;
    }, function (module) {
      UI_LobbyHomeTask = module.default;
    }, function (module) {
      UI_RoomItemPlus = module.default;
    }, function (module) {
      UI_RoomItemMTT = module.default;
    }, function (module) {
      UI_BannerButtonCmpt = module.default;
    }, function (module) {
      UI_TouchCmpt = module.default;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a4ca4dlGzdPDphLALnzTml9", "LobbyBinder", undefined);
      var LobbyBinder = exports('default', /*#__PURE__*/function () {
        function LobbyBinder() {}
        LobbyBinder.bindAll = function bindAll() {
          UIObjectFactory.setExtension(UI_MarketButton2.URL, UI_MarketButton2);
          UIObjectFactory.setExtension(UI_MarketBuyDetailDialog.URL, UI_MarketBuyDetailDialog);
          UIObjectFactory.setExtension(UI_MarketSellDetailDialog.URL, UI_MarketSellDetailDialog);
          UIObjectFactory.setExtension(UI_LobbyHomeTaskItem.URL, UI_LobbyHomeTaskItem);
          UIObjectFactory.setExtension(UI_MarketBuyDialog.URL, UI_MarketBuyDialog);
          UIObjectFactory.setExtension(UI_MarketCreateOrderDialog.URL, UI_MarketCreateOrderDialog);
          UIObjectFactory.setExtension(UI_MarketButton3.URL, UI_MarketButton3);
          UIObjectFactory.setExtension(UI_LobbyDayLogin.URL, UI_LobbyDayLogin);
          UIObjectFactory.setExtension(UI_DayLoginBItem.URL, UI_DayLoginBItem);
          UIObjectFactory.setExtension(UI_HandCardReviewItem.URL, UI_HandCardReviewItem);
          UIObjectFactory.setExtension(UI_Lobby_Board_BlindDialog.URL, UI_Lobby_Board_BlindDialog);
          UIObjectFactory.setExtension(UI_Lobby_Board_BlindItem.URL, UI_Lobby_Board_BlindItem);
          UIObjectFactory.setExtension(UI_Lobby_board_payout_structure.URL, UI_Lobby_board_payout_structure);
          UIObjectFactory.setExtension(UI_Lobby_board_page_item.URL, UI_Lobby_board_page_item);
          UIObjectFactory.setExtension(UI_HandCardReviewPage.URL, UI_HandCardReviewPage);
          UIObjectFactory.setExtension(UI_WalletGroup.URL, UI_WalletGroup);
          UIObjectFactory.setExtension(UI_MarketButton1.URL, UI_MarketButton1);
          UIObjectFactory.setExtension(UI_InviteContent.URL, UI_InviteContent);
          UIObjectFactory.setExtension(UI_SelectDefaultAvatarDialog.URL, UI_SelectDefaultAvatarDialog);
          UIObjectFactory.setExtension(UI_HeadItem.URL, UI_HeadItem);
          UIObjectFactory.setExtension(UI_Lobby_Enter_Rank_Ko_Item.URL, UI_Lobby_Enter_Rank_Ko_Item);
          UIObjectFactory.setExtension(UI_Lobby_Entry_Panal.URL, UI_Lobby_Entry_Panal);
          UIObjectFactory.setExtension(UI_Lobby_Prize_Item.URL, UI_Lobby_Prize_Item);
          UIObjectFactory.setExtension(UI_Lobby_Prize_Panal.URL, UI_Lobby_Prize_Panal);
          UIObjectFactory.setExtension(UI_Lobby_Table_Item.URL, UI_Lobby_Table_Item);
          UIObjectFactory.setExtension(UI_Lobby_Table_Panal.URL, UI_Lobby_Table_Panal);
          UIObjectFactory.setExtension(UI_Lobby_Board_Layer.URL, UI_Lobby_Board_Layer);
          UIObjectFactory.setExtension(UI_Lobby_Detail_info_panal.URL, UI_Lobby_Detail_info_panal);
          UIObjectFactory.setExtension(UI_Lobby_Enter_Item.URL, UI_Lobby_Enter_Item);
          UIObjectFactory.setExtension(UI_Lobby_Enter_Rank_Item.URL, UI_Lobby_Enter_Rank_Item);
          UIObjectFactory.setExtension(UI_TGPLevelDialog.URL, UI_TGPLevelDialog);
          UIObjectFactory.setExtension(UI_TGPLevelItem.URL, UI_TGPLevelItem);
          UIObjectFactory.setExtension(UI_RoomItemNLH.URL, UI_RoomItemNLH);
          UIObjectFactory.setExtension(UI_NoticeDetailPage.URL, UI_NoticeDetailPage);
          UIObjectFactory.setExtension(UI_BannerButton.URL, UI_BannerButton);
          UIObjectFactory.setExtension(UI_GameButton.URL, UI_GameButton);
          UIObjectFactory.setExtension(UI_GameRoomPageItem.URL, UI_GameRoomPageItem);
          UIObjectFactory.setExtension(UI_LobbyItemMarket.URL, UI_LobbyItemMarket);
          UIObjectFactory.setExtension(UI_MarketSellItem.URL, UI_MarketSellItem);
          UIObjectFactory.setExtension(UI_MarketBuyItem.URL, UI_MarketBuyItem);
          UIObjectFactory.setExtension(UI_LobbyMarketSell.URL, UI_LobbyMarketSell);
          UIObjectFactory.setExtension(UI_LobbyMarketBuy.URL, UI_LobbyMarketBuy);
          UIObjectFactory.setExtension(UI_LobbyMarketMyOrder.URL, UI_LobbyMarketMyOrder);
          UIObjectFactory.setExtension(UI_MarketOrderItem.URL, UI_MarketOrderItem);
          UIObjectFactory.setExtension(UI_MarketSellDialog.URL, UI_MarketSellDialog);
          UIObjectFactory.setExtension(UI_ChangeNickDialog.URL, UI_ChangeNickDialog);
          UIObjectFactory.setExtension(UI_ProfileHeadGroup.URL, UI_ProfileHeadGroup);
          UIObjectFactory.setExtension(UI_ProfileLanguagePage.URL, UI_ProfileLanguagePage);
          UIObjectFactory.setExtension(UI_Button4.URL, UI_Button4);
          UIObjectFactory.setExtension(UI_Lobby_Invite_Friend_layer.URL, UI_Lobby_Invite_Friend_layer);
          UIObjectFactory.setExtension(UI_Lobby_Invite_Friend_Item.URL, UI_Lobby_Invite_Friend_Item);
          UIObjectFactory.setExtension(UI_button_Invite.URL, UI_button_Invite);
          UIObjectFactory.setExtension(UI_LobbyPage.URL, UI_LobbyPage);
          UIObjectFactory.setExtension(UI_CoinGroup.URL, UI_CoinGroup);
          UIObjectFactory.setExtension(UI_LobbyItemGame.URL, UI_LobbyItemGame);
          UIObjectFactory.setExtension(UI_LobbyItemProfile.URL, UI_LobbyItemProfile);
          UIObjectFactory.setExtension(UI_NoticePage.URL, UI_NoticePage);
          UIObjectFactory.setExtension(UI_NoticeItem.URL, UI_NoticeItem);
          UIObjectFactory.setExtension(UI_LobbyHeadGroup.URL, UI_LobbyHeadGroup);
          UIObjectFactory.setExtension(UI_LobbyItemHome.URL, UI_LobbyItemHome);
          UIObjectFactory.setExtension(UI_RoomButton.URL, UI_RoomButton);
          UIObjectFactory.setExtension(UI_HandCardItem.URL, UI_HandCardItem);
          UIObjectFactory.setExtension(UI_HandCardDayItem.URL, UI_HandCardDayItem);
          UIObjectFactory.setExtension(UI_TGPFreeGoldView.URL, UI_TGPFreeGoldView);
          UIObjectFactory.setExtension(UI_ButtonTGP.URL, UI_ButtonTGP);
          UIObjectFactory.setExtension(UI_LobbyHomeGame.URL, UI_LobbyHomeGame);
          UIObjectFactory.setExtension(UI_LobbyHomeTask.URL, UI_LobbyHomeTask);
          UIObjectFactory.setExtension(UI_RoomItemPlus.URL, UI_RoomItemPlus);
          UIObjectFactory.setExtension(UI_RoomItemMTT.URL, UI_RoomItemMTT);
          UIObjectFactory.setExtension(UI_BannerButtonCmpt.URL, UI_BannerButtonCmpt);
          UIObjectFactory.setExtension(UI_TouchCmpt.URL, UI_TouchCmpt);
        };
        return LobbyBinder;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyBoardBlindDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Board_BlindDialog.ts', './MttData.ts', './GameWindowBase.ts', './Logger.ts', './BlindLevelInfo.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_Lobby_Board_BlindDialog, MttData, EEnterType, GameWindowBase, Log, BlindLevelInfo;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Board_BlindDialog = module.default;
    }, function (module) {
      MttData = module.MttData;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      BlindLevelInfo = module.BlindLevelInfo;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bbd747x819Ik7KQJf5xRHd4", "LobbyBoardBlindDialog", undefined);
      var LobbyBoardBlindDialog = exports('LobbyBoardBlindDialog', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(LobbyBoardBlindDialog, _GameWindowBase);
        function LobbyBoardBlindDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = false;
          _this.showBlackMask = true;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.scale;
          _this.pageName = 'LobbyBoardBlindDialog';
          _this.paneClass = UI_Lobby_Board_BlindDialog;
          _this._blindInfo = [];
          return _this;
        }
        LobbyBoardBlindDialog.create = function create(from) {
          return new LobbyBoardBlindDialog(from);
        };
        var _proto = LobbyBoardBlindDialog.prototype;
        _proto.onInit = function onInit() {
          Log.debug.log('LobbyBoardBlindDialog', 'onInit');

          //初始化基础数据
          this.pane.m_tableview.itemRenderer = this.itemRedererBlind.bind(this);
          this.pane.m_tableview.setVirtual();
          this.freshBoardLindInfo();
        };
        //todo frank 展示奖励界面
        _proto.itemRedererBlind = function itemRedererBlind(index, node) {
          if (index < 0 || index >= this._blindInfo.length) return;
          node.setItem(index, this._blindInfo[index]);
        };
        _proto.freshBoardLindInfo = function freshBoardLindInfo() {
          //mtt 信息
          if (MttData.inst.MttInfo != null) {
            var blindType = MttData.inst.MttInfo.rule.blindType - 1;
            this._blindInfo = BlindLevelInfo.Config[blindType];
            this.pane.m_tableview.numItems = this._blindInfo.length;
          }
        };
        return LobbyBoardBlindDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyBoardBlindItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Board_BlindItem.ts', './Utils.ts', './MttData.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, UI_Lobby_Board_BlindItem, Utils, MttData, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      UI_Lobby_Board_BlindItem = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      MttData = module.MttData;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "d646fOJzxVJu4z7QPMHiCda", "LobbyBoardBlindItem", undefined);
      var ColorCFDFE7 = color('#cfdfe7');
      var ColorFFD151 = color('#FFD151');
      var LobbyBoardBlindItem = exports('LobbyBoardBlindItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_Board_Blind) {
        _inheritsLoose(LobbyBoardBlindItem, _UI_Lobby_Board_Blind);
        function LobbyBoardBlindItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Board_Blind.call.apply(_UI_Lobby_Board_Blind, [this].concat(args)) || this;
          _this.ShopData = null;
          _this.COLOR_LABEL = [ColorCFDFE7, ColorFFD151];
          return _this;
        }
        var _proto = LobbyBoardBlindItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Board_Blind.prototype.onConstruct.call(this);
          this.name = 'LobbyBoardBlindItem';
        };
        _proto.setItem = function setItem(index, arryData) {
          if (index >= 0) {
            this.m_line.visible = index != 0;
            var trueIndx = index + 1;
            //排名
            this.m_labelIndex.text = trueIndx.toString();

            //blind
            this.m_labelBlind.text = Utils.formatStr('%s/%s', Utils.toFormat(arryData.bigBlinds / 2), Utils.toFormat(arryData.bigBlinds));

            //ante
            this.m_labelAnte.text = Utils.toFormat(arryData.ante);
            this.m_labelRebuy.visible = false;
            this.m_labelAddon.visible = false;

            //add on
            if (MttData.inst.MttInfo.rule.reBuyNum > 0) {
              var endJoinLevel = MttData.inst.MttInfo.rule.endJoinTime;
              if (trueIndx <= endJoinLevel) {
                this.m_labelRebuy.visible = true;
              }
            }
            if (MttData.inst.MttInfo.rule.AddOnTimes > 0) {
              var _endJoinLevel = MttData.inst.MttInfo.rule.endJoinTime;
              if (trueIndx == _endJoinLevel) {
                this.m_labelAddon.visible = true;
              }
            }
          }
        };
        return LobbyBoardBlindItem;
      }(UI_Lobby_Board_BlindItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyBoardLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Board_Layer.ts', './LobbyConst.ts', './GameWindowBase.ts', './MttProxy.ts', './CocosDevKit.ts', './GameDecorators.ts', './gameproto.mjs_cjs=&original=.js', './MttData.ts', './LanguageManage.ts', './ConfirmBox.ts', './PageEvent.ts', './gameproto.js', './Logger.ts', './UITools.ts', './CDKDecorators.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, Vec2, Tween, tween, UI_Lobby_Board_Layer, LobbyConst, EEnterType, GameWindowBase, MttProxy, MarkForNetEventListener, MarkForPageEventListener, MttData, LanguageManager, ConfirmBox, EPageEvent, _cjsExports, Log, UITools, SafeHandler;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      UI_Lobby_Board_Layer = module.default;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      MarkForPageEventListener = module.MarkForPageEventListener;
    }, null, function (module) {
      MttData = module.MttData;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      UITools = module.UITools;
    }, function (module) {
      SafeHandler = module.SafeHandler;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class;
      cclegacy._RF.push({}, "cdbfdgmbTRLSpjlUERQGnYK", "LobbyBoardLayer", undefined);
      var LobbyBoardLayer = exports('LobbyBoardLayer', (_dec = MarkForNetEventListener(_cjsExports.mtt.MsgApplyRsp.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.mtt.MsgMttStatusCast.ProtocolID), _dec3 = MarkForPageEventListener(EPageEvent.LOGIN_PROCESS_COMPLETED), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(LobbyBoardLayer, _GameWindowBase);
        function LobbyBoardLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this._selectPage = LobbyConst.ENUMBordType.INIT_NUM;
          _this.coverUnderlyingWindow = true;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = false;
          _this.showBlackMask = false;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.horizontal;
          _this.gestureCloseWindow = true;
          _this.pageName = 'LobbyBoardLayer';
          _this.paneClass = UI_Lobby_Board_Layer;
          _this._freshCount = 0;
          _this._tickClock = void 0;
          return _this;
        }
        LobbyBoardLayer.create = function create(from) {
          return new LobbyBoardLayer(from);
        };
        var _proto = LobbyBoardLayer.prototype;
        _proto.onInit = function onInit() {
          Log.debug.log('LobbyBoardLayer', 'onInit');

          //初始化基础数据
          UITools.optimizationScrollPane(this.pane.m_tabelview.scrollPane);
          this.pane.m_top_btn_group.onChanged(this.onChangeCallBack, this);
          this.pane.m_top_btn_group.setSelectedIndex(this._selectPage);
          this.pane.m_boardCommonBtn.onClick(this.onBtnRegister, this);
          this._freshCount = MttData.inst.FreshCount;
          this.onChangeCallBack();
          this.startTimer();
          this.freshCurretUIInfo();
          this.sendGetMttInfoReq();
        };
        _proto.setInputParams = function setInputParams(mttInfo) {
          _GameWindowBase.prototype.setInputParams.call(this, mttInfo);
          if (mttInfo != null) {
            MttData.inst.initMttIdInfo(mttInfo);
          }
        };
        _proto.onChangeCallBack = function onChangeCallBack() {
          var pid = this.pane.m_top_btn_group.selectedIndex;
          if (this._selectPage == pid) {
            return;
          }
          var moveLength = Math.abs(this._selectPage - pid);
          this._selectPage = pid;
          var pos = new Vec2();
          if (this._selectPage == LobbyConst.ENUMBordType.DETAIL) {
            var detailPanel = this.pane.m_tabelview.getChildAt(pid);
            if (detailPanel) {
              detailPanel.freshCurretUIInfo();
            }
            pos.x = this.pane.m_btn_detail.x;
            pos.y = this.pane.m_btn_detail.y;
          } else if (this._selectPage == LobbyConst.ENUMBordType.ENTER_PLAYER) {
            var entryPanel = this.pane.m_tabelview.getChildAt(pid);
            if (entryPanel) {
              entryPanel.getEnterDataReq(); //初始化基础数据
            }

            pos.x = this.pane.m_btn_enter.x;
            pos.y = this.pane.m_btn_enter.y;
          } else if (this._selectPage == LobbyConst.ENUMBordType.TABLES) {
            var tablePanel = this.pane.m_tabelview.getChildAt(pid);
            if (tablePanel) {
              tablePanel.getTableInfoReq(); //初始化基础数据
            }

            pos.x = this.pane.m_btn_table.x;
            pos.y = this.pane.m_btn_table.y;
          } else if (this._selectPage == LobbyConst.ENUMBordType.PRIZES) {
            var PrizePanel = this.pane.m_tabelview.getChildAt(pid);
            if (PrizePanel) {
              PrizePanel.getPrizePropInfoReq(); //初始化基础数据
            }

            pos.x = this.pane.m_btn_prize.x;
            pos.y = this.pane.m_btn_prize.y;
          }
          var moveTime = 0.15 * moveLength;
          if (moveTime > 0.5) {
            moveTime = 0.5;
          }
          Tween.stopAllByTarget(this.pane.m_light_icon);
          tween(this.pane.m_light_icon).to(moveTime, {
            x: pos.x,
            y: pos.y
          }, {
            easing: 'quartOut'
          }).call(this.freshNowSelectBtn.bind(this)).start();

          // let allCount = this.pane.m_top_btn_group.pageCount;
          // let startNum = this._selectPage - 1 < 0 ? 0 : this._selectPage - 1;
          // let endNum = this._selectPage + 1 >= allCount ? allCount : this._selectPage + 1;
          // for (let i = 0; i < allCount; i++) {
          //     let nowVisible = false;
          //     if (i >= startNum && i <= endNum) {
          //         nowVisible = true;
          //     }

          //     this.pane.m_tabelview.getChildAt(i).visible = nowVisible;
          // }

          //this.pane.m_light_icon_btn.x = pos.x;
        };

        _proto.freshNowSelectBtn = function freshNowSelectBtn() {};
        _proto.onBtnRegister = function onBtnRegister() {
          var _MttData$inst$MttInfo;
          var buttonStatus = (_MttData$inst$MttInfo = MttData.inst.MttInfo) == null ? void 0 : _MttData$inst$MttInfo.buttonState;
          if (MttData.inst.MttInfo == null || buttonStatus == null) return;
          var mttId = MttData.GetNowMttId(MttData.inst.MttInfo);
          if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_LOOKON) {
            //旁观
            //todo frank 进入房间
            this.EnterRoom(true);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REBUY) {
            //重构 直接买入
            MttProxy.inst.sendQuitMttReq(2, 3, mttId);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_DELAY_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_RE_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_WAITING) {
            //进入游戏
            if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_WAITING) {
              var _MttData$inst$MttInfo2, _MttData$inst$MttInfo3;
              var nowType = ((_MttData$inst$MttInfo2 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo2 = _MttData$inst$MttInfo2.time) == null ? void 0 : _MttData$inst$MttInfo2.type) || 0;
              var nowDay = ((_MttData$inst$MttInfo3 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo3 = _MttData$inst$MttInfo3.time) == null ? void 0 : _MttData$inst$MttInfo3.days) || 0;
              if (nowType == 2 && nowDay == 3) {
                this.EnterRoom(false);
              } else {
                var iType;
                if (MttData.inst.MttInfo.isEntrance == 1) {
                  //已报名时  发送取消报名
                  iType = 2;
                  MttProxy.inst.sendQuitMttReq(1, iType, mttId);
                  MttProxy.inst.getMttFreshInfo(mttId);
                }
              } // 倒计时提前进入
            } else {
              this.EnterRoom(false);
            }
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REGISTER) {
            //tag 不做账号游戏绑定判定
            //报名
            var _iType;
            if (MttData.inst.MttInfo.isEntrance == 1) {
              //已报名时  发送取消报名
              _iType = 2;
            } else {
              //未报名时  发送报名信息
              _iType = 1;
            }
            MttProxy.inst.sendQuitMttReq(1, _iType, mttId);
            MttProxy.inst.getMttFreshInfo(mttId);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE) {
            //比赛关闭
            this.onBtnClose();
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) ;else if (buttonStatus > LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
            //do nothing
            this.EnterRoom(true);
          }
        };
        _proto.onBtnClose = function onBtnClose() {
          this.hide();
        }

        //跳转到游戏内
        ;

        _proto.EnterRoom = function EnterRoom(lookOn) {
          if (lookOn === void 0) {
            lookOn = false;
          }
          this.emitPageEvent(EPageEvent.ENTER_MATCH, MttData.inst.MttInfo, lookOn);
        }

        //刷新界面
        ;

        _proto.freshCurretUIInfo = function freshCurretUIInfo() {
          var _MttData$inst$MttInfo4;
          //顶部title
          var titleName = (_MttData$inst$MttInfo4 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo4 = _MttData$inst$MttInfo4.rule) == null ? void 0 : _MttData$inst$MttInfo4.name;
          var title = this.pane.m_frame.getChild('title');
          if (title != null && titleName != null && titleName.length > 0) {
            title.text = titleName;
          }
          if (LobbyConst.getPlayerMttStatus(MttData.inst.MttInfo) != null) {
            var mttInfo = LobbyConst.getPlayerMttStatus(MttData.inst.MttInfo);
            this.pane.m_boardCommonBtn.text = mttInfo.title;
            this.pane.m_boardCommonBtn.visible = mttInfo.isVisible;
            this.pane.m_boardCommonBtn.titleColor = mttInfo.color;

            //按键背景颜色
            var commonBtn = this.pane.m_boardCommonBtn;
            commonBtn.m_bg.color = mttInfo.btnBgColor.clone();
          }
        }

        //刷新其他页签
        ;

        _proto.freshPageInfo = function freshPageInfo(pageId) {
          if (this._selectPage == LobbyConst.ENUMBordType.ENTER_PLAYER && pageId == LobbyConst.ENUMBordType.ENTER_PLAYER) {
            //刷新报名信息
            var enteryPanel = this.pane.m_tabelview.getChildAt(LobbyConst.ENUMBordType.ENTER_PLAYER);
            if (enteryPanel) {
              enteryPanel.getEnterDataReq();
            }
          } else if (this._selectPage == LobbyConst.ENUMBordType.DETAIL && pageId == LobbyConst.ENUMBordType.DETAIL) {
            var detailPanel = this.pane.m_tabelview.getChildAt(LobbyConst.ENUMBordType.DETAIL);
            if (detailPanel) {
              detailPanel.freshCurretUIInfo();
            }
          }
        }

        /////////////////////////////////////服务端逻辑/////////////////////////////////
        //刷新比赛信息
        ;

        _proto.sendGetMttInfoReq = function sendGetMttInfoReq() {
          var _this2 = this;
          var mttId = MttData.GetNowMttId(MttData.inst.MttInfo);
          if (mttId > 0) {
            MttProxy.inst.getMttInfo(mttId, SafeHandler(function (netdata) {
              if (netdata.isRetSuccess()) {
                // 基于返回码判断是否为成功
                var info = netdata.getData(_cjsExports.mtt.MsgGetMttInfoRsp); // 获取消息内容
                if (info != null) {
                  MttData.inst.MttInfo = info.mttInfo;
                }
                _this2.freshCurretUIInfo();
              } else {
                var retCode = netdata.getRetCode();
                var text = LanguageManager.getErrorText(retCode.toString());
                if (text && text.length > 0) {
                  _this2.grootInst.showCenterTip(text);
                }
              }
            }, this));
          }
        };
        _proto.onMsgApplyRsp = function onMsgApplyRsp(netdata) {
          if (netdata.isRetSuccess()) {
            // 基于返回码判断是否为成功
            var info = netdata.getData(_cjsExports.mtt.MsgApplyRsp); // 获取消息内容
            if (info == null) return;
            var applyType = info.applytype;
            var type = info.type;

            //先刷新当前 所在mtt比赛的信息
            this.sendGetMttInfoReq();
            //处理报名和rebuy的逻辑
            if (applyType == 1) {
              //处理报名信息
              if (type == 2) {
                //弹窗 取消报名成功
                var titleText = LanguageManager.get('TXT_826');
                var contentText = LanguageManager.get('TXT_827');
                var okButtonText = LanguageManager.get('CCS_TXT_427');
                var confirmBox = ConfirmBox.create(this);
                confirmBox.setInputParams({
                  buttonNum: 1,
                  title: titleText,
                  content: contentText,
                  confirmText: okButtonText
                });
                confirmBox.showOn(this.grootInst);
                //todo 日志上报 退还玩家报名费或者票据
              } else if (type == 1 && MttData.isMatchPlaying(MttData.inst.MttInfo)) {
                this.EnterRoom(false);
                return;
              }
              this.freshPageInfo(LobbyConst.ENUMBordType.ENTER_PLAYER);
            } else if (applyType == 2) {
              //处理rebuy逻辑
              if (type == 3) {
                //主动rebuy完 直接进入比赛
                this.EnterRoom();
                //todo 日志上报 退还玩家报名费或者票据
              }
            }
          } else {
            var rt = netdata.getRetCode();
            if (rt && rt > 0) {
              if (rt == LobbyConst.EnumServerErrorCode.PLAYER_FEE_NOT_ENOUGH) ;
              this.grootInst.showCenterTip(LanguageManager.getErrorText(rt));
            }
          }
        };
        _proto.onMsgMttStatusCast = function onMsgMttStatusCast(netdata) {
          var msg = netdata.getData(_cjsExports.mtt.MsgMttStatusCast);
          var selfMttId = MttData.GetNowMttId(MttData.inst.MttInfo);
          if (msg.mttid != selfMttId) return;
          switch (msg.mttidStatus) {
            case 1:
              // 新建比赛
              break;
            case 2:
              // 牌局关闭
              this.onBtnClose();
              break;
            case 3: // 3.比赛更新部分信息 4.比赛更新所有信息
            case 4:
              // 4.比赛更新所有信息
              this.sendGetMttInfoReq();
              break;
          }
        };
        _proto.startTimer = function startTimer() {
          if (this._tickClock) this._tickClock.stop();
          this._tickClock = this.setInterval(this.refreshTimeOnTick.bind(this), 1);
        };
        _proto.refreshTimeOnTick = function refreshTimeOnTick() {
          if (MttData.inst.FreshCount != this._freshCount) {
            this._freshCount = MttData.inst.FreshCount;
            this.freshCurretUIInfo();
            this.freshPageInfo(LobbyConst.ENUMBordType.DETAIL);
          }
        };
        _proto.onDestroy = function onDestroy() {
          _GameWindowBase.prototype.onDestroy.call(this);
          MttData.inst.reset();
        };
        _proto.onLoginSuccess = function onLoginSuccess() {
          //重连刷新 看板界面
          this.sendGetMttInfoReq();
        };
        return LobbyBoardLayer;
      }(GameWindowBase), (_applyDecoratedDescriptor(_class.prototype, "onMsgApplyRsp", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgApplyRsp"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgMttStatusCast", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgMttStatusCast"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLoginSuccess", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "onLoginSuccess"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyBoardPageItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './UI_Lobby_board_page_item.ts', './GameDecorators.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Utils, UI_Lobby_board_page_item, CustomFguiClass, GameConfig;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      UI_Lobby_board_page_item = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      GameConfig = module.GameConfig;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "c7ecdRYYhdCaZjLbZQF/PbL", "LobbyBoardPageItem", undefined);
      var LobbyBoardPageItem = exports('LobbyBoardPageItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_board_page_) {
        _inheritsLoose(LobbyBoardPageItem, _UI_Lobby_board_page_);
        function LobbyBoardPageItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_board_page_.call.apply(_UI_Lobby_board_page_, [this].concat(args)) || this;
          _this.ShopData = null;
          //奖励信息
          _this._prizeInfo = null;
          return _this;
        }
        var _proto = LobbyBoardPageItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_board_page_.prototype.onConstruct.call(this);
          this.name = 'LobbyEnterItem';
        };
        _proto.setItem = function setItem(iType) {
          var strAddre = GameConfig.curConfig.baseOssConfig;
          if (iType > 0 && iType <= 3) {
            for (var i = 0; i < 3; i++) {
              var num = i + 1;
              this[Utils.formatStr('m_icon%d', num)].url = GameConfig.getOssImgUrl_1(iType + "-" + num + ".png");
            }
          }
        };
        return LobbyBoardPageItem;
      }(UI_Lobby_board_page_item)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyBoardPayoutStructure.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './MttData.ts', './UI_Lobby_board_payout_structure.ts', './GameWindowBase.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, MttData, UI_Lobby_board_payout_structure, GameWindowBase, EEnterType, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      MttData = module.MttData;
    }, function (module) {
      UI_Lobby_board_payout_structure = module.default;
    }, function (module) {
      GameWindowBase = module.GameWindowBase;
      EEnterType = module.EEnterType;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "98882hc13hLAY7DbDgBNLHb", "LobbyBoardPayoutStructure", undefined);
      var LobbyBoardPayoutStructure = exports('LobbyBoardPayoutStructure', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(LobbyBoardPayoutStructure, _GameWindowBase);
        function LobbyBoardPayoutStructure() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = false;
          _this.showBlackMask = true;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.horizontal;
          _this.gestureCloseWindow = true;
          _this.pageName = 'LobbyBoardPayoutStructure';
          _this.paneClass = UI_Lobby_board_payout_structure;
          return _this;
        }
        LobbyBoardPayoutStructure.create = function create(from) {
          return new LobbyBoardPayoutStructure(from);
        };
        var _proto = LobbyBoardPayoutStructure.prototype;
        _proto.onInit = function onInit() {
          Log.debug.log(this.name, 'onInit');

          //初始化基础数据
          this.pane.m_tableview.itemRenderer = this.itemRenderStructure.bind(this);
          this.pane.m_tableview.numItems = 1;
        };
        _proto.itemRenderStructure = function itemRenderStructure(index, node) {
          if (index < 0 || index >= 1) return;
          var bindType = MttData.inst.MttInfo.rule.prizePool;
          node.setItem(bindType);
        };
        _proto.onDestroy = function onDestroy() {
          _GameWindowBase.prototype.onDestroy.call(this);
        };
        return LobbyBoardPayoutStructure;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyConst.ts", ['cc', './LanguageManage.ts', './MttData.ts'], function (exports) {
  var cclegacy, color, LanguageManager, MttData;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      MttData = module.MttData;
    }],
    execute: function () {
      exports('LobbyConst', void 0);
      cclegacy._RF.push({}, "903b3+Uu0RLDrXMRrUFPDYQ", "LobbyConst", undefined);
      var LobbyConst;
      (function (_LobbyConst) {
        var ENUMMsgApply_Applytype = /*#__PURE__*/function (ENUMMsgApply_Applytype) {
          ENUMMsgApply_Applytype[ENUMMsgApply_Applytype["REGISTER"] = 1] = "REGISTER";
          ENUMMsgApply_Applytype[ENUMMsgApply_Applytype["REBUY"] = 2] = "REBUY";
          return ENUMMsgApply_Applytype;
        }({});
        _LobbyConst.ENUMMsgApply_Applytype = ENUMMsgApply_Applytype;
        var ENUMMsgApply_Type = /*#__PURE__*/function (ENUMMsgApply_Type) {
          ENUMMsgApply_Type[ENUMMsgApply_Type["APPLY"] = 1] = "APPLY";
          ENUMMsgApply_Type[ENUMMsgApply_Type["CANCLE_APPLY"] = 2] = "CANCLE_APPLY";
          ENUMMsgApply_Type[ENUMMsgApply_Type["MANUAL_APPLY"] = 3] = "MANUAL_APPLY";
          return ENUMMsgApply_Type;
        }({});
        _LobbyConst.ENUMMsgApply_Type = ENUMMsgApply_Type;
        var CONST_MTT_ADDON_TIME_MIN = _LobbyConst.CONST_MTT_ADDON_TIME_MIN = 3;
        var CONST_SECONDS_OF_MINUTE = _LobbyConst.CONST_SECONDS_OF_MINUTE = 60;
        var CONST_SECONDS_OF_HOUR = _LobbyConst.CONST_SECONDS_OF_HOUR = 60 * 60;
        var CONST_SECONDS_OF_DAY = _LobbyConst.CONST_SECONDS_OF_DAY = 60 * 60 * 24;
        var CONST_SECONDS_OF_WEEK = _LobbyConst.CONST_SECONDS_OF_WEEK = 60 * 60 * 24 * 7;
        var CONST_DAYS_OF_MONTH = _LobbyConst.CONST_DAYS_OF_MONTH = [[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        // 非闰年
        [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] // 闰年
        ];

        var CONST_DAYS_OF_WEEK = _LobbyConst.CONST_DAYS_OF_WEEK = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

        /**
         * 大厅看板类型
         */
        var ENUMBordType = /*#__PURE__*/function (ENUMBordType) {
          ENUMBordType[ENUMBordType["INIT_NUM"] = -1] = "INIT_NUM";
          ENUMBordType[ENUMBordType["DETAIL"] = 0] = "DETAIL";
          ENUMBordType[ENUMBordType["ENTER_PLAYER"] = 1] = "ENTER_PLAYER";
          ENUMBordType[ENUMBordType["TABLES"] = 2] = "TABLES";
          ENUMBordType[ENUMBordType["PRIZES"] = 3] = "PRIZES";
          return ENUMBordType;
        }({});
        _LobbyConst.ENUMBordType = ENUMBordType;
        var ENUMBordSignUpType = /*#__PURE__*/function (ENUMBordSignUpType) {
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_REGISTER"] = -1] = "MATCH_STATUS_REGISTER";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_APPLYING"] = -2] = "MATCH_STATUS_APPLYING";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_WAITING"] = -3] = "MATCH_STATUS_WAITING";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_ENTER"] = -4] = "MATCH_STATUS_ENTER";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_DELAY_ENTER"] = -5] = "MATCH_STATUS_DELAY_ENTER";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_RE_ENTER"] = -6] = "MATCH_STATUS_RE_ENTER";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_CLOSE"] = -7] = "MATCH_STATUS_CLOSE";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_DISABLE_CLICK"] = -8] = "MATCH_STATUS_DISABLE_CLICK";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_FINISH"] = -9] = "MATCH_STATUS_FINISH";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_LOOKON"] = -10] = "MATCH_STATUS_LOOKON";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_REBUY"] = -11] = "MATCH_STATUS_REBUY";
          ENUMBordSignUpType[ENUMBordSignUpType["MATCH_STATUS_NO_RANK"] = 0] = "MATCH_STATUS_NO_RANK";
          ENUMBordSignUpType[ENUMBordSignUpType["DEFAULT_NUM"] = 9999] = "DEFAULT_NUM";
          return ENUMBordSignUpType;
        }({});
        _LobbyConst.ENUMBordSignUpType = ENUMBordSignUpType;
        var PlayerRegisterInfo = function PlayerRegisterInfo() {
          this.title = void 0;
          this.color = void 0;
          this.status = void 0;
          this.isVisible = void 0;
          this.btnBgColor = void 0;
        };
        _LobbyConst.PlayerRegisterInfo = PlayerRegisterInfo;
        var btnRegisterAllColor = _LobbyConst.btnRegisterAllColor = [color('#FFFFFF'),
        //白色
        color('#959595') //灰色
        ];

        var btnRegisterBgColor = _LobbyConst.btnRegisterBgColor = [color('#353535'),
        //黑色
        color('#6B2525'),
        //暗红色
        color('#A14E0F'),
        //暗黄色
        color('#1B4A76'),
        //暗蓝色
        color('#118D34') //暗绿色、
        ];

        function getPlayerMttStatus(mttInfo) {
          var btnRegisterInfo = new PlayerRegisterInfo();
          if (mttInfo != null) {
            var colorS;
            var titleStr;
            var nowVisible = true;
            var bgColor;
            var buttonStatus = mttInfo.buttonState; //按键状态
            var isEnternce = mttInfo.isEntrance; //是否报名

            bgColor = this.btnRegisterBgColor[4];
            colorS = btnRegisterAllColor[0];
            if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE) {
              titleStr = LanguageManager.get('TXT_240'); //比赛关闭
              nowVisible = true;
              colorS = btnRegisterAllColor[0];
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
              titleStr = LanguageManager.get('TXT_240');
              nowVisible = false;
            } else if (buttonStatus > LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
              //当前排名信息 buttonStatus 大于0 表示当前的排名值
              // titleStr = Utils.formatStr(LanguageManager.get('CCS_TXT_228'), Utils.formatStr('%d', buttonStatus));
              titleStr = LanguageManager.get('CCS_TXT_17');
              nowVisible = true;
              colorS = btnRegisterAllColor[0];
              bgColor = btnRegisterBgColor[3];
              // if (MttData.isMatchPlaying(mttInfo)) {
              //     bgColor = btnRegisterBgColor[2];
              // } else {
              //     bgColor = btnRegisterBgColor[3];
              // }
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REGISTER) {
              titleStr = LanguageManager.get('TXT_97'); //tag 不考虑战队赛  报名
              nowVisible = true;
              colorS = btnRegisterAllColor[0];
              if (MttData.isMatchPlaying(mttInfo)) {
                bgColor = btnRegisterBgColor[2];
              }
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_APPLYING) ;else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_WAITING) {
              var timeInfo = mttInfo.time;
              if (timeInfo && timeInfo.type == 2 && timeInfo.days == 3) {
                // 倒计时提前进入
                colorS = btnRegisterAllColor[1];
                titleStr = LanguageManager.get('TXT_47'); //进入
                bgColor = btnRegisterBgColor[1];
              } else {
                colorS = btnRegisterAllColor[1];
                titleStr = LanguageManager.get('TXT_970');
                bgColor = btnRegisterBgColor[0];
              }
              nowVisible = true;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_RE_ENTER) {
              titleStr = LanguageManager.get('TXT_47'); //进入
              nowVisible = true;
              //colorS = btnRegisterAllColor[1];
              bgColor = btnRegisterBgColor[1];
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_DELAY_ENTER) {
              titleStr = LanguageManager.get('TXT_47'); //进入
              nowVisible = true;
              //colorS = btnRegisterAllColor[2];
              bgColor = btnRegisterBgColor[2];
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_LOOKON) {
              //--旁观
              titleStr = LanguageManager.get('CCS_TXT_17'); //旁观
              nowVisible = true;
              bgColor = btnRegisterBgColor[3];
              //colorS = btnRegisterAllColor[3];
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REBUY) {
              //--复购
              titleStr = LanguageManager.get('CCS_TXT_252'); //rebuy
              nowVisible = true;
              //colorS = btnRegisterAllColor[4];
              bgColor = btnRegisterBgColor[4];
            }
            btnRegisterInfo.color = colorS.clone();
            btnRegisterInfo.title = titleStr;
            btnRegisterInfo.status = buttonStatus;
            btnRegisterInfo.isVisible = nowVisible;
            btnRegisterInfo.btnBgColor = bgColor;
          }
          return btnRegisterInfo;
        }
        _LobbyConst.getPlayerMttStatus = getPlayerMttStatus;
        var ENUMMoney_Type = /*#__PURE__*/function (ENUMMoney_Type) {
          ENUMMoney_Type[ENUMMoney_Type["TAG_MONEY"] = 1001] = "TAG_MONEY";
          ENUMMoney_Type[ENUMMoney_Type["TAG_MONEY_U"] = 1003] = "TAG_MONEY_U";
          ENUMMoney_Type[ENUMMoney_Type["TAG_XP"] = 115] = "TAG_XP";
          return ENUMMoney_Type;
        }({});
        _LobbyConst.ENUMMoney_Type = ENUMMoney_Type;
        var ENUMPOP_Money_Type = /*#__PURE__*/function (ENUMPOP_Money_Type) {
          ENUMPOP_Money_Type[ENUMPOP_Money_Type["TAG_MONEY_130"] = 1] = "TAG_MONEY_130";
          ENUMPOP_Money_Type[ENUMPOP_Money_Type["TAG_MONEY_100"] = 2] = "TAG_MONEY_100";
          ENUMPOP_Money_Type[ENUMPOP_Money_Type["TAG_MONEY_59"] = 5] = "TAG_MONEY_59";
          ENUMPOP_Money_Type[ENUMPOP_Money_Type["TAG_MONEY_36"] = 8] = "TAG_MONEY_36";
          return ENUMPOP_Money_Type;
        }({});
        _LobbyConst.ENUMPOP_Money_Type = ENUMPOP_Money_Type;
        var ENUMPOP_U_Type = /*#__PURE__*/function (ENUMPOP_U_Type) {
          ENUMPOP_U_Type[ENUMPOP_U_Type["TAG_U_131"] = 1] = "TAG_U_131";
          ENUMPOP_U_Type[ENUMPOP_U_Type["TAG_U_36"] = 2] = "TAG_U_36";
          return ENUMPOP_U_Type;
        }({});
        _LobbyConst.ENUMPOP_U_Type = ENUMPOP_U_Type;
        var EnumInvite = /*#__PURE__*/function (EnumInvite) {
          EnumInvite[EnumInvite["INVITE_FRIEND"] = 1] = "INVITE_FRIEND";
          EnumInvite[EnumInvite["BE_INVITE_FRIEND"] = 2] = "BE_INVITE_FRIEND";
          EnumInvite[EnumInvite["PUMP_WATER"] = 3] = "PUMP_WATER";
          EnumInvite[EnumInvite["FRIDE_PLAY_GAME"] = 4] = "FRIDE_PLAY_GAME";
          return EnumInvite;
        }({});
        _LobbyConst.EnumInvite = EnumInvite; //配置信息
        var EnumTaskStatus = /*#__PURE__*/function (EnumTaskStatus) {
          EnumTaskStatus[EnumTaskStatus["NO_FINISH"] = 0] = "NO_FINISH";
          EnumTaskStatus[EnumTaskStatus["FINISH_NO_WARD"] = 1] = "FINISH_NO_WARD";
          EnumTaskStatus[EnumTaskStatus["FINISH_AWARD_DONE"] = 2] = "FINISH_AWARD_DONE";
          return EnumTaskStatus;
        }({});
        _LobbyConst.EnumTaskStatus = EnumTaskStatus; //配置信息
        function GetPropIconPath(propId, iType) {
          if (iType === void 0) {
            iType = 1;
          }
          var path = '';
          if (propId == ENUMMoney_Type.TAG_MONEY) {
            if (iType == ENUMPOP_Money_Type.TAG_MONEY_130) {
              path = 'ui://Public/TGP_130';
            } else if (iType == ENUMPOP_Money_Type.TAG_MONEY_100) {
              path = 'ui://Public/TGP_100';
            } else if (iType == ENUMPOP_Money_Type.TAG_MONEY_59) {
              path = 'ui://Public/TGP_60';
            } else if (iType == ENUMPOP_Money_Type.TAG_MONEY_36) {
              path = 'ui://Public/TGP_36';
            } else {
              path = 'ui://Public/TGP_130';
            }
          } else if (propId == ENUMMoney_Type.TAG_MONEY_U) {
            if (iType == ENUMPOP_U_Type.TAG_U_131) {
              path = 'ui://Public/USTD_130';
            } else if (iType == ENUMPOP_U_Type.TAG_U_36) {
              path = 'ui://Public/USTD_36';
            }
          } else if (propId == ENUMMoney_Type.TAG_XP) {
            path = 'ui://Public/common_exp2';
          }
          return path;
        }
        _LobbyConst.GetPropIconPath = GetPropIconPath;
        var EnumGameType = /*#__PURE__*/function (EnumGameType) {
          EnumGameType[EnumGameType["GAME_CASH"] = 1] = "GAME_CASH";
          EnumGameType[EnumGameType["GAME_NOMORLL"] = 2] = "GAME_NOMORLL";
          return EnumGameType;
        }({});
        _LobbyConst.EnumGameType = EnumGameType;
        var EnumServerErrorCode = /*#__PURE__*/function (EnumServerErrorCode) {
          EnumServerErrorCode[EnumServerErrorCode["MTT_NOT_EXIST"] = 6001] = "MTT_NOT_EXIST";
          EnumServerErrorCode[EnumServerErrorCode["ENTRY_ENTRANCE_CLOSED"] = 6002] = "ENTRY_ENTRANCE_CLOSED";
          EnumServerErrorCode[EnumServerErrorCode["REPEAT_APPLY"] = 6003] = "REPEAT_APPLY";
          EnumServerErrorCode[EnumServerErrorCode["ENTRY_SUCCESS"] = 6004] = "ENTRY_SUCCESS";
          EnumServerErrorCode[EnumServerErrorCode["PLAYER_IS_FULL"] = 6005] = "PLAYER_IS_FULL";
          EnumServerErrorCode[EnumServerErrorCode["PARAM_IS_ERROR"] = 6006] = "PARAM_IS_ERROR";
          EnumServerErrorCode[EnumServerErrorCode["NO_ACCESS"] = 6007] = "NO_ACCESS";
          EnumServerErrorCode[EnumServerErrorCode["PLAYER_IS_NOT_APPLY"] = 6008] = "PLAYER_IS_NOT_APPLY";
          EnumServerErrorCode[EnumServerErrorCode["PLAYER_FEE_NOT_ENOUGH"] = 6009] = "PLAYER_FEE_NOT_ENOUGH";
          EnumServerErrorCode[EnumServerErrorCode["CONNOT_REBUY"] = 6010] = "CONNOT_REBUY";
          EnumServerErrorCode[EnumServerErrorCode["REBUY_CLOSED"] = 6011] = "REBUY_CLOSED";
          EnumServerErrorCode[EnumServerErrorCode["MONEY_ROUND"] = 6012] = "MONEY_ROUND";
          EnumServerErrorCode[EnumServerErrorCode["CONNOT_QUIT"] = 6013] = "CONNOT_QUIT";
          EnumServerErrorCode[EnumServerErrorCode["REBUY_EXPIRE"] = 6014] = "REBUY_EXPIRE";
          EnumServerErrorCode[EnumServerErrorCode["MTT_OVER"] = 6015] = "MTT_OVER";
          EnumServerErrorCode[EnumServerErrorCode["CHIP_BIGGER_INIT_CHIP"] = 6016] = "CHIP_BIGGER_INIT_CHIP";
          EnumServerErrorCode[EnumServerErrorCode["REBUY_COUNT_NONE"] = 6017] = "REBUY_COUNT_NONE";
          EnumServerErrorCode[EnumServerErrorCode["MTT_IS_OPEN"] = 6018] = "MTT_IS_OPEN";
          EnumServerErrorCode[EnumServerErrorCode["TIME_ERR"] = 6019] = "TIME_ERR";
          EnumServerErrorCode[EnumServerErrorCode["STATUS_ERR"] = 6020] = "STATUS_ERR";
          EnumServerErrorCode[EnumServerErrorCode["ADDON_ERR"] = 6021] = "ADDON_ERR";
          EnumServerErrorCode[EnumServerErrorCode["MTT_CANNOT_CLOSE_WHILE_OPEN"] = 6022] = "MTT_CANNOT_CLOSE_WHILE_OPEN";
          EnumServerErrorCode[EnumServerErrorCode["ONLY_LIMIT_CLUB_ALLOW_APPLY"] = 6023] = "ONLY_LIMIT_CLUB_ALLOW_APPLY";
          EnumServerErrorCode[EnumServerErrorCode["ALREADY_OUT"] = 6024] = "ALREADY_OUT";
          EnumServerErrorCode[EnumServerErrorCode["IP_IDENTICAL"] = 6025] = "IP_IDENTICAL";
          return EnumServerErrorCode;
        }({});
        _LobbyConst.EnumServerErrorCode = EnumServerErrorCode;
      })(LobbyConst || (LobbyConst = exports('LobbyConst', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyDayLogin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './LanguageManage.ts', './gameproto.mjs_cjs=&original=.js', './UI_LobbyDayLogin.ts', './GameWindowBase.ts', './Logger.ts', './HallProxy.ts', './GameDecorators.ts', './HallData.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, color, Utils, LanguageManager, UI_LobbyDayLogin, EEnterType, GameWindowBase, Log, HallProxy, MarkForNetEventListener, HallData, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LanguageManager = module.default;
    }, null, function (module) {
      UI_LobbyDayLogin = module.default;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      HallData = module.HallData;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "5cf5bBk5WRLwKS4YPaWiqKQ", "LobbyDayLogin", undefined);
      var LobbyDayLogin = exports('LobbyDayLogin', (_dec = MarkForNetEventListener(_cjsExports.hall.MsgGetSignRewardConfigListRsp.ProtocolID), (_class = (_class2 = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(LobbyDayLogin, _GameWindowBase);
        function LobbyDayLogin() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.vertical;
          _this.gestureCloseWindow = false;
          _this.paneClass = UI_LobbyDayLogin;
          // @MarkForNetEventListener(gameproto.hall.MsgGetTodaySignRewardRsp.ProtocolID)
          // private onMsgGetTodaySignRewardRsp(netdata: NetData87) {
          //     if (netdata.isRetSuccess()) {
          //         let info = netdata.getData(gameproto.hall.MsgGetTodaySignRewardRsp);
          //         if (!info) return;
          //         if (info.reward) {
          //             let moneyNum = info.reward.coin;
          //             let siginDay = info.reward.day;
          //             let awardInfo: LobbyConst.GetRewardPageDataInfo[] = [];
          //             let item: LobbyConst.GetRewardPageDataInfo = {
          //                 propid: LobbyConst.ENUMMoney_Type.TAG_MONEY,
          //                 num: moneyNum
          //             };
          //             awardInfo.push(item);
          //             //发奖
          //             let param: IGetReward_param = {
          //                 items: awardInfo
          //                 //content: 'TASK_999'
          //             };
          //             let awardPage = GetRewardPage.create(this);
          //             awardPage.setInputParams(param);
          //             awardPage.showOn(this.grootInst);
          //             HallData.inst.MsgGetSignRewardConfigListRsp.todaySign = siginDay;
          //             HallData.inst.MsgGetSignRewardConfigListRsp.signIndex = siginDay;
          //             this.freshDayConfigInfo();
          //             EventReporter.emit(EventReporter.Event.mixpanel.DAILY_LOGIN_REWARDS_STATE_CHANGE, { State: '2', TaskID: '999' });
          //             if (this.inputParams.cb) {
          //                 this.inputParams.cb(siginDay);
          //             }
          //         }
          //     }
          // }
          //子图颜色 背景颜色 icon透明度
          _this.selectDayInfo = [{
            titleColor: color('#7A808E'),
            awardColor: color('#7A808E'),
            bgColor: color('#212332'),
            oca: 0.2
          },
          //已领
          {
            titleColor: color('#F3F7F8'),
            awardColor: color('#FDDD68'),
            bgColor: color('#212332'),
            oca: 1
          },
          //未领
          {
            titleColor: color('#35B898'),
            awardColor: color('#35B898'),
            bgColor: color('#212332'),
            oca: 1
          } //选中
          ];

          return _this;
        }
        LobbyDayLogin.create = function create(from) {
          if (LobbyDayLogin.g_dayLogin == null) {
            LobbyDayLogin.g_dayLogin = new LobbyDayLogin(from);
          }
          return LobbyDayLogin.g_dayLogin;
        };
        var _proto = LobbyDayLogin.prototype;
        _proto.setInputParams = function setInputParams(params) {
          this.inputParams = params;
        };
        _proto.onInit = function onInit() {
          this.name = 'LobbyDayLogin';
          Log.debug.log('LobbyDayLogin', 'onInit');
          var fram = this.pane.m_frame;
          if (fram) {
            fram.m_btnConfirm.onClick(this.onBtnConfirm.bind(this), this);
          }

          //获取七日登录信息
          this.reqNetInfo();
        };
        _proto.reqNetInfo = function reqNetInfo() {
          if (!HallData.inst.MsgGetSignRewardConfigListRsp) {
            HallProxy.inst.getSignRewardConfigList();
          } else {
            this.freshDayConfigInfo();
          }
        };
        _proto.onMsgGetSignRewardConfigListRsp = function onMsgGetSignRewardConfigListRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgGetSignRewardConfigListRsp);
            if (info.list && info.list.length > 0) {
              if (!HallData.inst.MsgGetSignRewardConfigListRsp || HallData.inst.MsgGetSignRewardConfigListRsp.md5 != info.md5) {
                HallData.inst.MsgGetSignRewardConfigListRsp = info;

                // let status;
                // let todayStatus = info.todaySign;
                // if (todayStatus == 0) {
                //     status = 1;
                // } else {
                //     status = 2;
                // }
                // EventReporter.emit(EventReporter.Event.mixpanel.DAILY_LOGIN_REWARDS_STATE_CHANGE, {
                //     State: status.toString(),
                //     TaskID: '999'
                // });

                this.freshDayConfigInfo();
              }
            }
          }
        };
        _proto.reqAwardInfo = function reqAwardInfo() {
          HallProxy.inst.getTodaySignReward();
        };
        _proto.freshDayConfigInfo = function freshDayConfigInfo() {
          var _this2 = this;
          var rewardList = HallData.inst.MsgGetSignRewardConfigListRsp;
          if (!rewardList) return;
          var nowDaysign = rewardList.todaySign; //今天是否签到 大于0 已签到
          var siginX = rewardList.signIndex; //第几天签到

          //关闭或者领取
          var fram = this.pane.m_frame;
          if (nowDaysign > 0) {
            if (fram) {
              fram.m_btnConfirm.text = LanguageManager.get('CCS_TXT_342');
            }
          } else {
            if (fram) {
              fram.m_btnConfirm.text = LanguageManager.get('CCS_TXT_427');
            }
          }
          if (rewardList.list.length > 0) {
            rewardList.list.forEach(function (item, index) {
              var dayIndx = item.day;
              var dayNode = _this2.pane.getChild(Utils.formatStr('day_login_%d', dayIndx));
              if (dayNode) {
                var loginItem = dayNode;
                if (loginItem) {
                  // let urlMoney, moneyNum;
                  // if (item.coin > 0) {
                  //     urlMoney = LobbyConst.GetPropIconPath(
                  //         LobbyConst.ENUMMoney_Type.TAG_MONEY,
                  //         LobbyConst.ENUMPOP_Money_Type.TAG_MONEY_DAY_LOGIN
                  //     );
                  //     moneyNum = item.coin;
                  // } else if (item.diamond > 0) {
                  //     urlMoney = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY, 2);
                  //     moneyNum = 0;
                  // }

                  loginItem.m_day_award.text = Utils.getThousandShowNumber(item.coin);
                  loginItem.m_award_icon.url = 'ui://Public/TGP_100';
                  var indx = 0;
                  var bShowLight = false;
                  var bShowHadAward = false;
                  //签到
                  if (dayIndx <= siginX) {
                    //已经领取
                    indx = 0;
                    bShowHadAward = true;
                  } else {
                    if (dayIndx == siginX + 1 && nowDaysign == 0) {
                      //选中
                      indx = 2;
                      bShowLight = true;
                    } else {
                      //未领
                      indx = 1;
                    }
                  }
                  loginItem.m_day_award.color = _this2.selectDayInfo[indx].awardColor.clone();
                  loginItem.m_day_title.color = _this2.selectDayInfo[indx].titleColor.clone();

                  //icon的透明度
                  loginItem.m_award_icon.alpha = _this2.selectDayInfo[indx].oca;
                  loginItem.m_day_bg_light.visible = bShowLight;
                  loginItem.m_had_award_icon.visible = bShowHadAward;
                  loginItem.m_day_bg_gray.color = _this2.selectDayInfo[indx].bgColor.clone();
                }
              }
            });
          }
        };
        _proto.onBtnConfirm = function onBtnConfirm() {
          if (!HallData.inst.MsgGetSignRewardConfigListRsp) return;
          if (HallData.inst.MsgGetSignRewardConfigListRsp.todaySign > 0) {
            this.hide();
          } else {
            this.reqAwardInfo();
          }
        };
        _proto.onDestroy = function onDestroy() {
          LobbyDayLogin.g_dayLogin = null;
        };
        return LobbyDayLogin;
      }(GameWindowBase), _class2.g_dayLogin = null, _class2), _applyDecoratedDescriptor(_class.prototype, "onMsgGetSignRewardConfigListRsp", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgGetSignRewardConfigListRsp"), _class.prototype), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyDetailInfoPanal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Detail_info_panal.ts', './LobbyConst.ts', './CocosDevKit.ts', './GameDecorators.ts', './MttData.ts', './LanguageManage.ts', './ConfirmBox.ts', './LobbyBoardBlindDialog.ts', './GameConst.ts', './BlindLevelInfo.ts', './Logger.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, HorizontalTextAlignment, UI_Lobby_Detail_info_panal, LobbyConst, CustomFguiClass, MttData, LanguageManager, ConfirmBox, LobbyBoardBlindDialog, GameConst, BlindLevelInfo, Log, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      HorizontalTextAlignment = module.HorizontalTextAlignment;
    }, function (module) {
      UI_Lobby_Detail_info_panal = module.default;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      MttData = module.MttData;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      LobbyBoardBlindDialog = module.LobbyBoardBlindDialog;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      BlindLevelInfo = module.BlindLevelInfo;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "4965dNyVhJLWrCe4WYnifAM", "LobbyDetailInfoPanal", undefined);
      var LobbyDetailInfoPanal = exports('LobbyDetailInfoPanal', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_Detail_info) {
        _inheritsLoose(LobbyDetailInfoPanal, _UI_Lobby_Detail_info);
        function LobbyDetailInfoPanal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Detail_info.call.apply(_UI_Lobby_Detail_info, [this].concat(args)) || this;
          _this._tickClock = void 0;
          return _this;
        }
        var _proto = LobbyDetailInfoPanal.prototype;
        _proto.onConstruct = function onConstruct() {
          var _this2 = this;
          _UI_Lobby_Detail_info.prototype.onConstruct.call(this);
          this.name = 'LobbyDetailInfoPanal';
          this.m_btnBlindTimeTip.onClick(this.onBtnBlindTips.bind(this), this);
          this.m_btnBlindTip_spr.onClick(function () {
            var titleText = LanguageManager.get('TOAST_INFO');
            var contentText = LanguageManager.get('TXT_1715');
            var okButtonText = LanguageManager.get('CCS_TXT_427');
            var confirmBox = ConfirmBox.create(_this2);
            confirmBox.setInputParams({
              buttonNum: 1,
              title: titleText,
              content: contentText,
              confirmText: okButtonText,
              align: HorizontalTextAlignment.LEFT
            });
            confirmBox.showOn(_this2.grootInst);
          }, this);
          this.refreshTimeOnTick();
          this.startTimer();
          //初始化基础数据
          this.freshCurretUIInfo();
          this._partner.scheduleOnce(function () {
            //重置背景尺寸
            if (_this2.m_detail_bg_2.height < 940) {
              _this2.m_detail_bg_2.height = 940;
            }
          }, 0.05);

          // this._partner.callLater(() => {
          //     //重置背景尺寸
          //     if (this.m_detail_bg_2.height < 940) {
          //         this.m_detail_bg_2.height = 940;
          //     }
          // }, 0.05);
        };

        _proto.onBtnBlindTips = function onBtnBlindTips() {
          Log.debug.log(this.name, 'onBtnBlindTips');
          LobbyBoardBlindDialog.create(this).showOn(this.grootInst);
        };
        _proto.startTimer = function startTimer() {
          if (this._tickClock) this._tickClock.stop();
          this._tickClock = this.setInterval(this.refreshTimeOnTick.bind(this), 1);
        }

        //刷新界面
        ;

        _proto.freshCurretUIInfo = function freshCurretUIInfo() {
          var _MttData$inst$MttInfo, _MttData$inst$MttInfo2, _MttData$inst$MttInfo3, _MttData$inst$MttInfo4, _MttData$inst$MttInfo5, _MttData$inst$MttInfo6, _MttData$inst$MttInfo7, _MttData$inst$MttInfo8, _MttData$inst$MttInfo9;
          if (MttData.inst.MttInfo == null) return;
          var coinType = (_MttData$inst$MttInfo = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo = _MttData$inst$MttInfo.rule) == null ? void 0 : _MttData$inst$MttInfo.coinType; //奖池类型
          var buyCoinType = (_MttData$inst$MttInfo2 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo2 = _MttData$inst$MttInfo2.rule) == null ? void 0 : _MttData$inst$MttInfo2.buyCoinType; //报名类型

          //缺少：的两个label
          this.m_btnBlindStruct.text = Utils.formatStr('%s: ', LanguageManager.get('TXT_757'));
          this.m_test_up_blind.text = Utils.formatStr('%s: ', LanguageManager.get('TXT_754'));

          //mtt标志
          var showMttIcon = false;
          if (((_MttData$inst$MttInfo3 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo3 = _MttData$inst$MttInfo3.rule) == null ? void 0 : _MttData$inst$MttInfo3.mttType) == 2) {
            showMttIcon = true;
          }
          this.m_image_mtt.visible = showMttIcon;

          //ko or pko标志
          var showKoIcon = false;
          var showPkoIcon = false;
          var isKoMtt = false;
          if (((_MttData$inst$MttInfo4 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo4 = _MttData$inst$MttInfo4.rule) == null ? void 0 : _MttData$inst$MttInfo4.koBounty) != null && (_MttData$inst$MttInfo5 = MttData.inst.MttInfo) != null && (_MttData$inst$MttInfo5 = _MttData$inst$MttInfo5.rule) != null && (_MttData$inst$MttInfo5 = _MttData$inst$MttInfo5.koBounty) != null && _MttData$inst$MttInfo5.isOpen) {
            if (MttData.inst.MttInfo.rule.koBounty.type == 1) {
              showKoIcon = true;
            } else if (MttData.inst.MttInfo.rule.koBounty.type == 2) {
              showPkoIcon = true;
            }
            isKoMtt = true;
          }
          this.m_image_ko.visible = showKoIcon;
          this.m_image_pko.visible = showPkoIcon;
          var buyinNum = MttData.inst.MttInfo.num || 0; //报名人数
          var feeRate = MttData.inst.MttInfo.rule.fee || 0;
          var rebuy_num = MttData.inst.MttInfo.rule.reBuyNum || 0;
          var rebuyMoney = MttData.inst.MttInfo.rule.rebuy || 0;
          var buyin = MttData.inst.MttInfo.rule.buyin; //买入的钱
          var fee = buyin * feeRate / 100; //服务费
          var buyNum = buyin - fee; //jackPot的钱

          //ko 赛
          if (isKoMtt) {
            //比赛奖池
            var mttPrizePool = MttData.inst.MttInfo.prizePool || 0;
            var gtdPrizeSize = MttData.inst.MttInfo.rule.gtdPrizeSize || 0;
            var koPrizePool = MttData.inst.MttInfo.koPrizePool || 0;
            var strPrize;
            if (gtdPrizeSize > mttPrizePool) {
              strPrize = Utils.formatStr('%s (%s+%s)', Utils.toFormat(gtdPrizeSize), Utils.toFormat(gtdPrizeSize - koPrizePool), Utils.toFormat(koPrizePool));
            } else {
              strPrize = Utils.formatStr('%s (%s+%s)', Utils.toFormat(mttPrizePool), Utils.toFormat(mttPrizePool - koPrizePool), Utils.toFormat(koPrizePool));
            }
            this.m_labelPrizePool.text = Utils.toFormat(strPrize, 2, coinType == GameConst.EGameCostType.cash);

            //Buy-in:  Buyin总数 (实际buy-in数 =((Buyin数 - 服务费) - 猎人奖励) + 猎人奖 + 服务费)
            var koBountyTypeValue = [1 / 4, 1 / 3, 1 / 2, 2 / 3];
            var personKOPrize = (buyin - fee) * koBountyTypeValue[MttData.inst.MttInfo.rule.koBounty.bounty];
            buyNum = buyin - fee - personKOPrize;
            //buyin
            if (buyin > 0) {
              this.m_buyinIcon.visible = true;
              this.m_labelBuyinPre.visible = true;
              this.m_labelBuyinPre.text = Utils.formatStr('%s (%s+%s+%s)', Utils.toFormat(buyin), Utils.toFormat(buyNum), Utils.toFormat(personKOPrize), Utils.toFormat(fee));
            } else {
              //免费
              this.m_buyinIcon.visible = false;
              this.m_labelBuyinPre.visible = true;
              this.m_labelBuyinPre.text = LanguageManager.get('TXT_323');
            }

            //累加赏金 pko 显示
            if (showPkoIcon) {
              this.m_labelPBValue.text = '50%';
              this.m_pko_comb.visible = showPkoIcon;
            }
          } else {
            //比赛奖池
            var _mttPrizePool = MttData.inst.MttInfo.prizePool || 0;
            var _gtdPrizeSize = MttData.inst.MttInfo.rule.gtdPrizeSize || 0;
            var iPrizeNum = Math.max(_mttPrizePool, _gtdPrizeSize);
            // this.m_labelPrizePool.text = Utils.toFormat(iPrizeNum);
            this.m_labelPrizePool.text = Utils.toFormat(iPrizeNum, 2, coinType == GameConst.EGameCostType.cash);

            //buyin
            if (buyin > 0) {
              this.m_buyinIcon.visible = true;
              this.m_labelBuyinPre.visible = true;
              var flag = buyCoinType == GameConst.EGameCostType.cash ? '$' : '';
              this.m_labelBuyinPre.text = Utils.formatStr('%s%s (%s+%s)', flag, Utils.toFormat(buyin, 3), Utils.toFormat(buyNum, 3), Utils.toFormat(fee, 3));
            } else {
              //免费
              this.m_buyinIcon.visible = false;
              this.m_labelBuyinPre.visible = true;
              this.m_labelBuyinPre.text = LanguageManager.get('TXT_323');
            }

            //累加赏金 pko 显示
            this.m_pko_comb.visible = false;
          }

          //公共部分
          // --延时报名等级
          var levelEnd = MttData.inst.MttInfo.rule.endJoinTime || 0;
          this.m_labelLateRegLv.text = Utils.formatStr(LanguageManager.get('TXT_832'), levelEnd);

          //当前盲注级别
          var blindLv = this.getBlindLvByMttInfo();
          this.m_labelLevel.text = Utils.formatStr(LanguageManager.get('TXT_832'), blindLv);

          //起始筹码
          var bigBlinds = BlindLevelInfo.Config[MttData.inst.MttInfo.rule.blindType - 1][0].bigBlinds;
          this.m_Text_start_chips_num.text = Utils.toFormat(MttData.inst.MttInfo.rule.initChip * bigBlinds);

          // rebuy
          if (rebuy_num > 0) {
            if (rebuy_num >= 10000) {
              //无限rebuy
              this.m_Image_rebuyicon.visible = false;
              this.m_labelValue_icon.visible = false;
              this.m_labelRebuy.text = LanguageManager.get('TXT_901');
            } else {
              this.m_Image_rebuyicon.visible = true;
              this.m_labelValue_icon.visible = true;
              this.m_labelRebuy.text = Utils.formatStr('%s/', Utils.toFormat(rebuy_num));
              this.m_labelValue_icon.text = Utils.toFormat(rebuyMoney, 2, buyCoinType == GameConst.EGameCostType.cash);
            }
          } else {
            this.m_Image_rebuyicon.visible = false;
            this.m_labelValue_icon.visible = false;
            this.m_labelRebuy.text = LanguageManager.get('TXT_257');
          }

          // Addon
          var addonNum = MttData.inst.MttInfo.rule.addOn;
          var addTimes = MttData.inst.MttInfo.rule.AddOnTimes;
          if (addTimes > 0) {
            this.m_labelAddon.text = Utils.formatStr('%sx/', Utils.formatStr('%0.2d', addTimes / 10));
            this.m_Image_addon_icon.visible = true;
            this.m_labelAddonValue.visible = true;
            this.m_labelAddonValue.text = Utils.toFormat(addonNum, 2, buyCoinType == GameConst.EGameCostType.cash);
          } else {
            this.m_labelAddon.text = LanguageManager.get('TXT_257');
            this.m_Image_addon_icon.visible = false;
            this.m_labelAddonValue.visible = false;
          }

          // 平均筹码
          this.m_labelAvgStack.text = Utils.toFormat(this.getAvgStack());

          // 参赛人数范围
          var minPerson = ((_MttData$inst$MttInfo6 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo6 = _MttData$inst$MttInfo6.rule) == null ? void 0 : _MttData$inst$MttInfo6.minPerson) || 0;
          var maxPerson = ((_MttData$inst$MttInfo7 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo7 = _MttData$inst$MttInfo7.rule) == null ? void 0 : _MttData$inst$MttInfo7.maxPerson) || 0;
          this.m_labelEntryRange.text = Utils.formatStr('%d-%d', minPerson, maxPerson);

          // 参赛人数
          var entryNum = ((_MttData$inst$MttInfo8 = MttData.inst.MttInfo) == null ? void 0 : _MttData$inst$MttInfo8.num) || 0;
          var nowNum = ((_MttData$inst$MttInfo9 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo9 = _MttData$inst$MttInfo9.memberrank) == null ? void 0 : _MttData$inst$MttInfo9.num) || 0;
          if (this.isMatchPlaying()) {
            this.m_labelEntry.text = Utils.formatStr('%s/%s', Utils.toFormat(nowNum), Utils.toFormat(entryNum));
          } else {
            this.m_labelEntry.text = Utils.toFormat(entryNum);
          }

          // 休息时间
          var showBreak = false;
          if (MttData.inst.MttInfo.rule.hasBreak) {
            showBreak = true;
          }
          this.m_nodeBreak.visible = showBreak;

          // 涨盲时间
          var strCrBlind;
          var crBlind = MttData.inst.MttInfo.rule.customRaiseBlind;
          var raiseBlindTime = MttData.inst.MttInfo.rule.raiseBlindTime || 0;
          if (crBlind && crBlind.beforeEntryClose && (crBlind.beforeEntryClose !== crBlind.afterEntryClose || crBlind.beforeEntryClose !== crBlind.whileFinalTable)) {
            strCrBlind = Utils.formatStr('%d/%d/%d%s', crBlind.beforeEntryClose / 60, crBlind.afterEntryClose / 60, crBlind.whileFinalTable / 60, LanguageManager.get('TXT_368'));
          } else {
            strCrBlind = Utils.formatStr('%d%s', raiseBlindTime / 60, LanguageManager.get('TXT_368'));
          }
          this.m_labelBlindTime.text = strCrBlind || '';

          // 盲注结构
          var bindTypeName = '';
          var bindType = MttData.inst.MttInfo.rule.blindType || 1;
          if (bindType == 1) {
            bindTypeName = LanguageManager.get('TXT_759');
          } else if (bindType === 2) {
            bindTypeName = LanguageManager.get('TXT_760');
          } else if (bindType === 3) {
            bindTypeName = LanguageManager.get('TXT_761');
          }
          this.m_labelBindType.text = bindTypeName;

          //刷新icon
          var imageUrl = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY, LobbyConst.ENUMPOP_Money_Type.TAG_MONEY_36);
          if (coinType == LobbyConst.EnumGameType.GAME_CASH) {
            imageUrl = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY_U, LobbyConst.ENUMPOP_U_Type.TAG_U_36);
          }
          this.m_prizeIcon.url = imageUrl;
          var imageUrl2 = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY, LobbyConst.ENUMPOP_Money_Type.TAG_MONEY_36);
          if (buyCoinType == LobbyConst.EnumGameType.GAME_CASH) {
            imageUrl2 = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY_U, LobbyConst.ENUMPOP_U_Type.TAG_U_36);
          }
          this.m_buyinIcon.url = imageUrl2;
          this.m_Image_rebuyicon.url = imageUrl2;
          this.m_Image_addon_icon.url = imageUrl2;
        }

        //函数说明: 根据比赛信息获取盲注级别
        ;

        _proto.getBlindLvByMttInfo = function getBlindLvByMttInfo() {
          var num = 0;
          if (MttData.inst.MttInfo != null) {
            var _MttData$inst$MttInfo10, _MttData$inst$MttInfo11, _MttData$inst$MttInfo12;
            var status = ((_MttData$inst$MttInfo10 = MttData.inst.MttInfo) == null ? void 0 : _MttData$inst$MttInfo10.buttonState) || 0;
            var startTime = ((_MttData$inst$MttInfo11 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo11 = _MttData$inst$MttInfo11.rule) == null ? void 0 : _MttData$inst$MttInfo11.startTime) || 0;
            var timeType = ((_MttData$inst$MttInfo12 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo12 = _MttData$inst$MttInfo12.time) == null ? void 0 : _MttData$inst$MttInfo12.type) || 0; //1=截止报名 2=比赛开始 3=延迟状态 4=已经开赛 5=比赛关闭 6=比赛结束
            var blindInfo = MttData.inst.MttInfo.gameinfo;
            num = blindInfo.blindround || 1;
            if (startTime > Utils.curServerTimeSecondstamp) {
              num = 1;
            } else if (status == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE || status == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || status > 0 && (GameConst.MATCH.ETimeType.MATCH_CLOSED == timeType || GameConst.MATCH.ETimeType.MATCH_FINISHED == timeType)) {
              num = 1;
            }
          }
          return num;
        }

        //函数说明: 获取平均筹码
        ;

        _proto.getAvgStack = function getAvgStack() {
          var averagechip = 0;
          if (MttData.inst.MttInfo != null) {
            var _MttData$inst$MttInfo13;
            averagechip = ((_MttData$inst$MttInfo13 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo13 = _MttData$inst$MttInfo13.gameinfo) == null ? void 0 : _MttData$inst$MttInfo13.averagechip) || 0;
            if (averagechip == 0) {
              var _MttData$inst$MttInfo14, _MttData$inst$MttInfo15;
              var initChips = ((_MttData$inst$MttInfo14 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo14 = _MttData$inst$MttInfo14.rule) == null ? void 0 : _MttData$inst$MttInfo14.initChip) || 0;
              var bigBB = BlindLevelInfo.Config[((_MttData$inst$MttInfo15 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo15 = _MttData$inst$MttInfo15.rule) == null ? void 0 : _MttData$inst$MttInfo15.blindType) - 1][0].bigBlinds;
              averagechip = initChips * bigBB;
            }
          }
          return averagechip;
        };
        _proto.isMatchPlaying = function isMatchPlaying() {
          return MttData.isMatchPlaying(MttData.inst.MttInfo);
        };
        _proto.refreshTimeOnTick = function refreshTimeOnTick() {
          var _MttData$inst$MttInfo16, _MttData$inst$MttInfo17;
          var isPlaying = this.isMatchPlaying();
          var startTime = ((_MttData$inst$MttInfo16 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo16 = _MttData$inst$MttInfo16.rule) == null ? void 0 : _MttData$inst$MttInfo16.startTime) || 0;
          var timeType = ((_MttData$inst$MttInfo17 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo17 = _MttData$inst$MttInfo17.time) == null ? void 0 : _MttData$inst$MttInfo17.type) || 0;
          var leftTime = startTime - Utils.curServerTimeSecondstamp;

          //比赛非进行中(未开赛 或 已结束)
          if (!isPlaying) {
            this.m_labelStartTime.text = Utils.formatStr('[color=#8D9098]%s[/color]', LanguageManager.get('CCS_TXT_416')) + Utils.formatStr('[color=#1EFF6A]%s[/color]', Utils.getFormatMonthDateByStamp2(startTime, false));
            if (GameConst.MATCH.ETimeType.MATCH_CLOSED == timeType || GameConst.MATCH.ETimeType.MATCH_FINISHED == timeType) {
              //比赛已关闭 或者结束
              this.setCountDownTime(leftTime, 2);
              this.m_labelgameStatus.text = LanguageManager.get('MTT_Ended');
              this.setCountDownTime(0, 2);
            } else {
              this.setCountDownTime(leftTime, 1);
              this.m_labelgameStatus.text = LanguageManager.get('MTT_COUNTDOWN');
            }
          } else {
            this.m_labelStartTime.text = Utils.formatStr('[color=#8D9098]%s[/color]', LanguageManager.get('CCS_TXT_416')) + Utils.formatStr('[color=#E56C1D]%s[/color]', Utils.getFormatMonthDateByStamp2(startTime, false));
            this.m_labelgameStatus.text = LanguageManager.get('MTT_RUNNING');
            var goTime = Utils.curServerTimeSecondstamp - startTime;
            this.setCountDownTime(goTime, 1);

            //延迟报名未结束
            var curBlindLv = this.getBlindLvByMttInfo();
            var rebuyFinishIdx = MttData.inst.MttInfo.rule.endJoinTime || 0;
            if (rebuyFinishIdx >= curBlindLv) {
              var _MttData$inst$MttInfo18, _MttData$inst$MttInfo19;
              var endTime = startTime + rebuyFinishIdx * MttData.inst.MttInfo.rule.raiseBlindTime;
              var remainTime = endTime - Utils.curServerTimeSecondstamp;
              var isMoney = ((_MttData$inst$MttInfo18 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo18 = _MttData$inst$MttInfo18.memberrank) == null ? void 0 : _MttData$inst$MttInfo18.isMoney) || 0;
              var status = ((_MttData$inst$MttInfo19 = MttData.inst.MttInfo) == null ? void 0 : _MttData$inst$MttInfo19.buttonState) || 0;
              if (MttData.inst.MttInfo.rule.AddOnTimes > 0) {
                remainTime = remainTime + LobbyConst.CONST_MTT_ADDON_TIME_MIN * 60;
              }
              if (remainTime < 0 || isMoney == 1) {
                this.m_labelStartTime.text = Utils.formatStr('[color=#8D9098]%s[/color]', LanguageManager.get('MTT_RegClosed')); //Utils.formatStr("<font color='#8D9098'>%s</font>", LanguageManager.get('MTT_RegClosed'));
              } else {
                this.m_labelStartTime.text = Utils.formatStr('[color=#8D9098]%s[/color]', LanguageManager.get('MTT_RegCloseTime2')) + Utils.formatStr('[color=#E56C1D] %s[/color]', Math.ceil(remainTime / 60)) + Utils.formatStr('[color=#E56C1D] %s[/color]', LanguageManager.get('INVITE_MINUTE'));
              }
            } else {
              this.m_labelStartTime.text = Utils.formatStr('[color=#8D9098]%s[/color]', LanguageManager.get('MTT_RegClosed')); //Utils.formatStr("<font color='#8D9098'>%s</font>", LanguageManager.get('MTT_RegClosed'));
            }
          }
        };

        _proto.setCountDownTime = function setCountDownTime(leftTime, type) {
          var timeNum = [];
          for (var i = 0; i < 6; i++) {
            timeNum.push('-');
          }
          if (type == 1) {
            leftTime = Math.max(leftTime, 0);
            // str = Utils.formatStr(
            //     '%02d:%02d:%02d',
            //     Math.floor(leftTime / LobbyConst.CONST_SECONDS_OF_HOUR),
            //     Math.floor((leftTime % LobbyConst.CONST_SECONDS_OF_HOUR) / LobbyConst.CONST_SECONDS_OF_MINUTE),
            //     Math.floor(leftTime % LobbyConst.CONST_SECONDS_OF_MINUTE)
            // );
            timeNum[0] = Math.floor(leftTime / LobbyConst.CONST_SECONDS_OF_HOUR / 10).toString();
            timeNum[1] = Math.floor(leftTime / LobbyConst.CONST_SECONDS_OF_HOUR % 10).toString();
            timeNum[2] = Math.floor(leftTime % LobbyConst.CONST_SECONDS_OF_HOUR / LobbyConst.CONST_SECONDS_OF_MINUTE / 10).toString();
            timeNum[3] = Math.floor(leftTime % LobbyConst.CONST_SECONDS_OF_HOUR / LobbyConst.CONST_SECONDS_OF_MINUTE % 10).toString();
            timeNum[4] = Math.floor(leftTime % LobbyConst.CONST_SECONDS_OF_MINUTE / 10).toString();
            timeNum[5] = Math.floor(leftTime % LobbyConst.CONST_SECONDS_OF_MINUTE % 10).toString();
          }
          this.m_labe_1.text = timeNum[0].toString();
          this.m_labe_2.text = timeNum[1].toString();
          this.m_labe_3.text = timeNum[2].toString();
          this.m_labe_4.text = timeNum[3].toString();
          this.m_labe_5.text = timeNum[4].toString();
          this.m_labe_6.text = timeNum[5].toString();
        };
        _proto.onDestroy = function onDestroy() {
          _UI_Lobby_Detail_info.prototype.onDestroy.call(this);
        };
        return LobbyDetailInfoPanal;
      }(UI_Lobby_Detail_info_panal)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyEnteRankItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Enter_Rank_Item.ts', './Utils.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_Lobby_Enter_Rank_Item, Utils, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Enter_Rank_Item = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "3389cQ9illBUIphari1ro/0", "LobbyEnteRankItem", undefined);
      var LobbyEnteRankItem = exports('LobbyEnteRankItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_Enter_Item) {
        _inheritsLoose(LobbyEnteRankItem, _UI_Lobby_Enter_Item);
        function LobbyEnteRankItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Enter_Item.call.apply(_UI_Lobby_Enter_Item, [this].concat(args)) || this;
          _this._rankInfo = null;
          return _this;
        }
        var _proto = LobbyEnteRankItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Enter_Item.prototype.onConstruct.call(this);
          this.name = 'LobbyEnteRankItem';
        };
        _proto.setItemInfo = function setItemInfo(index, data) {
          this._rankInfo = data;
          var playerId = this._rankInfo.uid;
          if (playerId > 0) {
            this.m_line.visible = index != 0;
            this.m_labelRank.text = (index + 1).toString();
            this.m_labelName.text = Utils.formatDisplayNickName(this._rankInfo.name, 12);
            this.m_labelStack.text = Utils.getThousandShowNumber(this._rankInfo.chips);
            this.m_labelStack.text = Utils.getThousandShowNumber(this._rankInfo.chips);

            //add on or rebuy
            var aNum = this._rankInfo.addonNum;
            var rNum = this._rankInfo.rebuyNum;
            var strName = '[color=#9FA0A2]0[/color]';
            if (rNum > 0 && aNum > 0) {
              var strR = 'R';
              var strA = 'A';
              if (rNum == 1) {
                strR = 'R';
              } else {
                strR = Utils.formatStr('%dR', rNum);
              }
              if (aNum == 1) {
                strA = 'A';
              } else {
                strA = Utils.formatStr('%dR', aNum);
              }
              strName = Utils.formatStr('[color=#008000]%s[/color][color=#9FA0A2]%s[/color][color=#FF0000]%s[/color]', strR, '+', strA);
            } else if (rNum > 0) {
              var _strR = 'R';
              if (rNum == 1) {
                _strR = 'R';
              } else {
                _strR = Utils.formatStr('%dR', rNum);
              }
              strName = Utils.formatStr('[color=#008000]%s[/color]', _strR);
            } else if (aNum > 0) {
              var _strA = 'A';
              if (aNum == 1) {
                _strA = 'A';
              } else {
                _strA = Utils.formatStr('%dA', aNum);
              }
              strName = Utils.formatStr('[color=#FF0000]%s[/color]', _strA);
            }
            this.m_labelRA.text = strName;
          }

          //头像
          var avatar = this.m_headNode.component;
          avatar.setContent(data.avatar);
        };
        return LobbyEnteRankItem;
      }(UI_Lobby_Enter_Rank_Item)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyEnterItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Enter_Item.ts', './Utils.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_Lobby_Enter_Item, Utils, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Enter_Item = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "6d94enK5X5Id57MycH9JXkL", "LobbyEnterItem", undefined);
      var LobbyEnterItem = exports('LobbyEnterItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_Enter_Item) {
        _inheritsLoose(LobbyEnterItem, _UI_Lobby_Enter_Item);
        function LobbyEnterItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Enter_Item.call.apply(_UI_Lobby_Enter_Item, [this].concat(args)) || this;
          _this.ShopData = null;
          _this._rankInfo = null;
          return _this;
        }
        var _proto = LobbyEnterItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Enter_Item.prototype.onConstruct.call(this);
          this.name = 'LobbyEnterItem';
        };
        _proto.setItemInfo = function setItemInfo(index, data) {
          this._rankInfo = data;
          var playerId = this._rankInfo.uid;
          if (playerId > 0) {
            this.m_line.visible = index != 0;
            //头像
            var avatar = this.m_headNode.component;
            avatar.setContent(this._rankInfo.avatar);

            //Id
            this.m_lable_id.text = Utils.formatStr('ID:%d', playerId);

            //昵称
            this.m_lable_name.text = Utils.formatDisplayNickName(this._rankInfo.name, 16);
          }
        };
        return LobbyEnterItem;
      }(UI_Lobby_Enter_Item)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyEnterRankKoItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Enter_Rank_Ko_Item.ts', './Utils.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_Lobby_Enter_Rank_Ko_Item, Utils, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Enter_Rank_Ko_Item = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "c89e8FVu19JdIE4Sxq4swxR", "LobbyEnterRankKoItem", undefined);
      var LobbyEnterRankKoItem = exports('LobbyEnterRankKoItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_Enter_Rank_) {
        _inheritsLoose(LobbyEnterRankKoItem, _UI_Lobby_Enter_Rank_);
        function LobbyEnterRankKoItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Enter_Rank_.call.apply(_UI_Lobby_Enter_Rank_, [this].concat(args)) || this;
          _this._rankInfo = null;
          return _this;
        }
        var _proto = LobbyEnterRankKoItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Enter_Rank_.prototype.onConstruct.call(this);
          this.name = 'LobbyEnterRankKoItem';
        };
        _proto.setItem = function setItem(index, data) {
          this._rankInfo = data;
          var playerId = this._rankInfo.uid;
          if (playerId > 0) {
            this.m_line.visible = index != 0;
            this.m_labelRank.text = this._rankInfo.rank.toString();
            this.m_labelName.text = Utils.formatDisplayNickName(this._rankInfo.name, 16);
            this.m_labelStack.text = Utils.getThousandShowNumber(this._rankInfo.chips);

            //ko
            this.m_labelKO.text = this._rankInfo.koNum.toString();

            //add on or rebuy
            var aNum = this._rankInfo.addonNum;
            var rNum = this._rankInfo.rebuyNum;
            var strName = "<font color='#9FA0A2'>--</font>";
            if (rNum > 0 && aNum > 0) {
              var strR = 'R';
              var strA = 'A';
              if (rNum == 1) {
                strR = 'R';
              } else {
                strR = Utils.formatStr('%dR', rNum);
              }
              if (aNum == 1) {
                strA = 'A';
              } else {
                strA = Utils.formatStr('%dR', aNum);
              }
              strName = Utils.formatStr("<font color='#008000'>%s</font><font color='#9FA0A2'>%s</font><font color='#FF0000'>%s</font>", strR, '+', strA);
            } else if (rNum > 0) {
              var _strR = 'R';
              if (rNum == 1) {
                _strR = 'R';
              } else {
                _strR = Utils.formatStr('%dR', rNum);
              }
              strName = Utils.formatStr("<font color='#008000'>%s</font>", _strR);
            } else if (aNum > 0) {
              var _strA = 'A';
              if (aNum == 1) {
                _strA = 'A';
              } else {
                _strA = Utils.formatStr('%dA', aNum);
              }
              strName = Utils.formatStr("<font color='#FF0000'>%s</font>", _strA);
            }
            this.m_labelRA.text = strName;
          }
        };
        return LobbyEnterRankKoItem;
      }(UI_Lobby_Enter_Rank_Ko_Item)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyEntryPanal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Entry_Panal.ts', './fairygui.mjs', './MttProxy.ts', './CocosDevKit.ts', './GameDecorators.ts', './gameproto.mjs_cjs=&original=.js', './MttData.ts', './LanguageManage.ts', './gameproto.js', './Logger.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_Lobby_Entry_Panal, Event, MttProxy, MarkForNetEventListener, CustomFguiClass, MttData, LanguageManager, _cjsExports, Log, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Entry_Panal = module.default;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      MttData = module.MttData;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "103f7i2HqdNkZV4aYtcba+q", "LobbyEntryPanal", undefined);
      var EEnterStatus = /*#__PURE__*/function (EEnterStatus) {
        EEnterStatus[EEnterStatus["GAME_DEFAULT"] = 0] = "GAME_DEFAULT";
        EEnterStatus[EEnterStatus["GAME_NOT_START"] = 1] = "GAME_NOT_START";
        EEnterStatus[EEnterStatus["GAME_START_RANK"] = 2] = "GAME_START_RANK";
        EEnterStatus[EEnterStatus["GAME_START_KO"] = 3] = "GAME_START_KO";
        return EEnterStatus;
      }(EEnterStatus || {});
      var LobbyEntryPanal = exports('LobbyEntryPanal', (_dec = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttRankInfoRsp.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_Lobby_Entry_Panal) {
        _inheritsLoose(LobbyEntryPanal, _UI_Lobby_Entry_Panal);
        function LobbyEntryPanal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Entry_Panal.call.apply(_UI_Lobby_Entry_Panal, [this].concat(args)) || this;
          _this._mttRankInfo = null;
          _this._curretGameStatus = EEnterStatus.GAME_DEFAULT;
          _this._mttNoStartRankInfo = [];
          //比赛未开始
          _this._mttNomallRankInfo = [];
          //常规比赛开始
          _this._mttRankKoInfo = [];
          return _this;
        }
        var _proto = LobbyEntryPanal.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Entry_Panal.prototype.onConstruct.call(this);
          this.name = 'LobbyEntryPanal';

          //比赛未开始
          this.m_tableView.itemRenderer = this.rendererEnterPlayer.bind(this);
          this.m_tableView.setVirtual();
          this.m_tableView.on(Event.CLICK_ITEM, this.onEnterItemClick, this);

          //ko赛开始
          this.m_tableViewRankKo.itemRenderer = this.rendererKoRank.bind(this);
          this.m_tableViewRankKo.setVirtual();
          this.m_tableViewRankKo.on(Event.CLICK_ITEM, this.onKoRankItemClick, this);

          //非ko赛开始
          this.m_tableViewRank.itemRenderer = this.rendererNomallRank.bind(this);
          this.m_tableViewRank.setVirtual();
          this.m_tableViewRank.on(Event.CLICK_ITEM, this.onNomallItemClick, this);
          this.freshCurretUIInfo();
          this.getEnterDataReq();
        }

        //比赛未开始
        ;

        _proto.rendererEnterPlayer = function rendererEnterPlayer(index, node) {
          var rankLength = this._mttNoStartRankInfo.length;
          if (index < 0 || index >= rankLength) return;
          var item = this._mttNoStartRankInfo[index];
          var classRankInfo = _cjsExports.mtt.RankInfo.create();
          classRankInfo.rank = this._mttNoStartRankInfo[index].rank;
          classRankInfo.name = this._mttNoStartRankInfo[index].name;
          classRankInfo.chips = this._mttNoStartRankInfo[index].chips;
          classRankInfo.uid = this._mttNoStartRankInfo[index].uid;
          classRankInfo.avatar = this._mttNoStartRankInfo[index].avatar;
          classRankInfo.rebuyNum = this._mttNoStartRankInfo[index].rebuyNum;
          classRankInfo.addonNum = this._mttNoStartRankInfo[index].addonNum;
          classRankInfo.koNum = this._mttNoStartRankInfo[index].koNum;
          classRankInfo.signAuthing = this._mttNoStartRankInfo[index].signAuthing;
          classRankInfo.approved = this._mttNoStartRankInfo[index].approved;
          node.setItemInfo(index, classRankInfo);
        };
        _proto.onEnterItemClick = function onEnterItemClick(item) {}

        //ko赛开始
        ;

        _proto.rendererKoRank = function rendererKoRank(index, node) {
          var rankLength = this._mttRankKoInfo.length;
          if (index < 0 || index >= rankLength) return;
          var item = this._mttRankKoInfo[index];
          var classRankInfo = _cjsExports.mtt.RankInfo.create();
          classRankInfo.rank = this._mttRankKoInfo[index].rank;
          classRankInfo.name = this._mttRankKoInfo[index].name;
          classRankInfo.chips = this._mttRankKoInfo[index].chips;
          classRankInfo.uid = this._mttRankKoInfo[index].uid;
          classRankInfo.avatar = this._mttRankKoInfo[index].avatar;
          classRankInfo.rebuyNum = this._mttRankKoInfo[index].rebuyNum;
          classRankInfo.addonNum = this._mttRankKoInfo[index].addonNum;
          classRankInfo.koNum = this._mttRankKoInfo[index].koNum;
          classRankInfo.signAuthing = this._mttRankKoInfo[index].signAuthing;
          classRankInfo.approved = this._mttRankKoInfo[index].approved;
          node.setItem(index, classRankInfo);
        };
        _proto.onKoRankItemClick = function onKoRankItemClick(item) {
          this.onEnterGame();
        }

        //非ko赛开始
        ;

        _proto.rendererNomallRank = function rendererNomallRank(index, node) {
          var rankLength = this._mttNomallRankInfo.length;
          if (index < 0 || index >= rankLength) return;
          var classRankInfo = _cjsExports.mtt.RankInfo.create();
          classRankInfo.rank = this._mttNomallRankInfo[index].rank;
          classRankInfo.name = this._mttNomallRankInfo[index].name;
          classRankInfo.chips = this._mttNomallRankInfo[index].chips;
          classRankInfo.uid = this._mttNomallRankInfo[index].uid;
          classRankInfo.avatar = this._mttNomallRankInfo[index].avatar;
          classRankInfo.rebuyNum = this._mttNomallRankInfo[index].rebuyNum;
          classRankInfo.addonNum = this._mttNomallRankInfo[index].addonNum;
          classRankInfo.koNum = this._mttNomallRankInfo[index].koNum;
          classRankInfo.signAuthing = this._mttNomallRankInfo[index].signAuthing;
          classRankInfo.approved = this._mttNomallRankInfo[index].approved;
          node.setItemInfo(index, classRankInfo);
        };
        _proto.onNomallItemClick = function onNomallItemClick(item) {
          Log.debug.log(item._rankInfo);
          this.onEnterGame();
        };
        _proto.onEnterGame = function onEnterGame() {
          //todo frank 进入游戏
        };
        _proto.getEnterStatus = function getEnterStatus() {
          var _MttData$inst$MttInfo;
          var status = EEnterStatus.GAME_DEFAULT;
          var isKoOpen = ((_MttData$inst$MttInfo = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo = _MttData$inst$MttInfo.rule) == null || (_MttData$inst$MttInfo = _MttData$inst$MttInfo.koBounty) == null ? void 0 : _MttData$inst$MttInfo.isOpen) || 0;
          var enterClose = MttData.inst.MttInfo.isEntranceClose; //报名结束
          if (isKoOpen == 1) {
            if (!enterClose) {
              //设置当前报名人数
              status = EEnterStatus.GAME_NOT_START;
            } else {
              status = EEnterStatus.GAME_START_KO;
            }
          } else {
            if (!enterClose) {
              //设置当前报名人数
              status = EEnterStatus.GAME_NOT_START;
            } else {
              status = EEnterStatus.GAME_START_RANK;
            }
          }
          return status;
        }

        //获取排名信息
        ;

        _proto.getEnterDataReq = function getEnterDataReq() {
          if (MttData.inst.MttInfo) {
            var _MttData$inst$MttInfo2;
            var mttId = ((_MttData$inst$MttInfo2 = MttData.inst.MttInfo) == null ? void 0 : _MttData$inst$MttInfo2.mttid) || 0;
            MttProxy.inst.getMsgGetMttRankInfo(mttId);
          }
        };
        _proto.onMsgGetMttRankInfoRsp = function onMsgGetMttRankInfoRsp(netdata) {
          if (netdata.isRetSuccess()) {
            Log.debug.log(this.name, 'onMsgGetMttRankInfoRsp');
            var info = netdata.getData(_cjsExports.mtt.MsgGetMttRankInfoRsp);
            if (info.mttid == MttData.inst.MttInfo.mttid) {
              this._mttRankInfo = info;
              this.freshCurretUIInfo();
            }
          }
        };
        //ko赛开始
        //刷新界面
        //@MarkForDataBinder()
        _proto.freshCurretUIInfo = function freshCurretUIInfo() {
          if (MttData.inst.MttInfo == null) return;
          if (this._mttRankInfo == null) return;
          var typed = this._mttRankInfo.type; //1=比赛开始前 2=比赛进行中 3=比赛结束
          if (1 == this._mttRankInfo.obstate) ; // -- 1=可以旁观 2=不能旁观

          var count = MttData.inst.MttInfo.num || 0;
          var nowStatus = this.getEnterStatus();
          if (nowStatus == EEnterStatus.GAME_NOT_START) {
            //报名人数
            this.m_label_enter_2.text = Utils.getThousandShowNumber(count);

            //延迟报名未结束
            if (!MttData.inst.MttInfo.isEntranceClose) {
              this._mttNoStartRankInfo = this._mttRankInfo.rankList;
              this.m_tableView.numItems = this._mttNoStartRankInfo.length;
            }
          } else if (nowStatus == EEnterStatus.GAME_START_RANK) {
            this.m_labelTitle2.text = Utils.formatStr('%s(%d)', LanguageManager.get('CCS_TXT_236'), count);
            this._mttNomallRankInfo = this._mttRankInfo.rankList;
            this._mttNomallRankInfo.sort(function (info1, info2) {
              return info1.rank - info2.rank;
            });
            this.m_tableViewRank.numItems = this._mttNomallRankInfo.length;
          } else if (nowStatus == EEnterStatus.GAME_START_KO) {
            this.m_lable_ko_2.text = Utils.formatStr('%s(%d)', LanguageManager.get('CCS_TXT_419'), count);
            this._mttRankKoInfo = this._mttRankInfo.rankList;
            this._mttRankKoInfo.sort(function (info1, info2) {
              return info1.rank - info2.rank;
            });
            this.m_tableViewRankKo.numItems = this._mttRankKoInfo.length;
          }
          this._curretGameStatus = nowStatus;
          //按键状态
          if (this._curretGameStatus == EEnterStatus.GAME_NOT_START) {
            this.m_enter_player_rank_ko_info.visible = false;
            this.m_enter_player_rank_info.visible = false;
            this.m_enter_player_info.visible = true;
          } else if (this._curretGameStatus == EEnterStatus.GAME_START_KO) {
            this.m_enter_player_rank_ko_info.visible = true;
            this.m_enter_player_rank_info.visible = false;
            this.m_enter_player_info.visible = false;
          } else if (this._curretGameStatus == EEnterStatus.GAME_START_RANK) {
            this.m_enter_player_rank_ko_info.visible = false;
            this.m_enter_player_rank_info.visible = true;
            this.m_enter_player_info.visible = false;
          }
        };
        _proto.onDestroy = function onDestroy() {
          _UI_Lobby_Entry_Panal.prototype.onDestroy.call(this);
          Log.debug.log(this.name, '======LobbyEntryPanal=onDestroy=========');
        };
        return LobbyEntryPanal;
      }(UI_Lobby_Entry_Panal), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttRankInfoRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttRankInfoRsp"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyHeadGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_LobbyHeadGroup.ts', './GameConst.ts', './GameDecorators.ts', './RoleData.ts', './Utils.ts', './gameproto.mjs_cjs=&original=.js', './NoticePage.ts', './RedHotData.ts', './LobbyItemProfile.ts', './WalletDepositPage.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_LobbyHeadGroup, GameConst, CustomFguiClass, MarkForDataBinder, RoleData, Utils, NoticePage, RedHotData, LobbyItemProfile, WalletDepositPage, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_LobbyHeadGroup = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
      MarkForDataBinder = module.MarkForDataBinder;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      Utils = module.Utils;
    }, null, function (module) {
      NoticePage = module.default;
    }, function (module) {
      RedHotData = module.default;
    }, function (module) {
      LobbyItemProfile = module.LobbyItemProfile;
    }, function (module) {
      WalletDepositPage = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2;
      cclegacy._RF.push({}, "8d29brOWhBG+Y3Vq4wZ22C6", "LobbyHeadGroup", undefined);
      var LobbyHeadGroup = exports('LobbyHeadGroup', (_dec = MarkForDataBinder(), _dec2 = MarkForDataBinder(), _dec3 = MarkForDataBinder(), _dec4 = MarkForDataBinder(), _dec5 = MarkForDataBinder(), _dec6 = MarkForDataBinder(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_LobbyHeadGroup) {
        _inheritsLoose(LobbyHeadGroup, _UI_LobbyHeadGroup);
        function LobbyHeadGroup() {
          return _UI_LobbyHeadGroup.apply(this, arguments) || this;
        }
        var _proto = LobbyHeadGroup.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyHeadGroup.prototype.onConstruct.call(this);
          this.name = 'LobbyHeadGroup';
          this.m_headNode.component.onClick(this.onHeadNodeClick, this);
          this.m_btnMsgBox.onClick(this.onBtnMsgBoxCalendarClick, this);
          this.m_walletAdd.onClick(this.onBtnOpenShop, this);
        };
        _proto.initView = function initView(btgpShow) {
          if (btgpShow === void 0) {
            btgpShow = false;
          }
          this.m_TgpControl.selectedIndex = btgpShow ? 0 : 1;
          this.checkRedHot();
        };
        _proto.onBtnMsgBoxCalendarClick = function onBtnMsgBoxCalendarClick() {
          var view = NoticePage.create(this);
          view.setInputParams({
            msgtype: GameConst.Notice.type.NOTICE_TYPE_SYSTEM
          });
          view.showOn(this.grootInst);
          // NoticeProxy.inst.getMsgGetMessageList(GameConst.Notice.type.NOTICE_TYPE_SYSTEM, 0, this.onMsgGetMessageListRsp.bind(this));
        };

        _proto.onHeadNodeClick = function onHeadNodeClick() {
          LobbyItemProfile.create(this).showOn(this.grootInst);
          // ChangeNickDialog.create(this).showOn(this.grootInst);
        };

        _proto.onBtnOpenShop = function onBtnOpenShop() {
          WalletDepositPage.create(this).showOn(this.grootInst);
        };
        _proto.setPlayer = function setPlayer() {
          // this.m_name.text = RoleData.inst.nick;
          this.m_name.text = Utils.formatDisplayNickName(RoleData.inst.nick, 12);
          this.m_pid.text = "ID:" + RoleData.inst.playerID;
        };
        _proto.setAvatar = function setAvatar() {
          var avatar = this.m_headNode.component;
          avatar.setContent(RoleData.inst.avatar);
        };
        _proto.setUserNick = function setUserNick() {
          this.m_name.text = Utils.formatDisplayNickName(RoleData.inst.nick, 12);
          // this.m_BtnAdd.setSize(this.m_name.width, this.m_name.height);
        };

        _proto.setWallet = function setWallet() {
          this.m_WalletValue.text = Utils.toFormat(RoleData.inst.cash, 2, true);
        };
        _proto.setTGP = function setTGP() {
          this.m_TgpValue.text = Utils.toFormat(RoleData.inst.chip, 0);
        };
        _proto.checkRedHot = function checkRedHot() {
          this.m_NoticeRedControl.selectedIndex = RedHotData.inst.noticeCnt == 0 ? 0 : 1;
        };
        _proto.onMsgGetMessageListRsp = function onMsgGetMessageListRsp(netdata) {
          if (!this.node.active) return;
          var info = netdata.getData(_cjsExports.notice.MsgGetMessageListRsp);
          if (netdata.isRetSuccess()) {
            var view = NoticePage.create(this);
            view.setInputParams({
              msgtype: info.getType
            });
            view.showOn(this.grootInst);
          }
        };
        return LobbyHeadGroup;
      }(UI_LobbyHeadGroup), (_applyDecoratedDescriptor(_class2.prototype, "setPlayer", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "setPlayer"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setAvatar", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "setAvatar"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setUserNick", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "setUserNick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setWallet", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "setWallet"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setTGP", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "setTGP"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "checkRedHot", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "checkRedHot"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyHomeGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HallData.ts', './GameDecorators.ts', './UI_LobbyHomeGame.ts', './PageEvent.ts', './LobbyPage.ts', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, HallData, CustomFguiClass, UI_LobbyHomeGame, EPageEvent, ELobbyPage, Event;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HallData = module.HallData;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_LobbyHomeGame = module.default;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      ELobbyPage = module.ELobbyPage;
    }, function (module) {
      Event = module.Event;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "efe3bTNk2NLXow99SMdVdtk", "LobbyHomeGame", undefined);
      var LobbyHomeGame = exports('LobbyHomeGame', CustomFguiClass(_class = /*#__PURE__*/function (_UI_LobbyHomeGame) {
        _inheritsLoose(LobbyHomeGame, _UI_LobbyHomeGame);
        function LobbyHomeGame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyHomeGame.call.apply(_UI_LobbyHomeGame, [this].concat(args)) || this;
          _this.hotGameInfo = null;
          return _this;
        }
        var _proto = LobbyHomeGame.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyHomeGame.prototype.onConstruct.call(this);
          this.name = 'LobbyHomeGame';
          this.m_BtnMore.onClick(this.onBtnMoreClick.bind(this), this);
          this.m_HotGameList.itemRenderer = this.roomItemRender.bind(this);
          this.m_HotGameList.on(Event.CLICK_ITEM, this.onBtnHotGameItemClick.bind(this), this);
          // this.m_GameTypeList.on(fgui.Event.CLICK_ITEM, this.onBtnGameTypeItemClick.bind(this), this);
        };

        _proto.initView = function initView() {
          this.initHotGame();
        }

        //初始化游戏推荐
        ;

        _proto.initHotGame = function initHotGame() {
          this.hotGameInfo = HallData.inst.getHotGameByConf();
          this.m_HotGameList.numItems = this.hotGameInfo.roomList.length;
        };
        _proto.roomItemRender = function roomItemRender(index, item) {
          var roomInfos = this.hotGameInfo.roomList;
          item.setItem(roomInfos[index], index);
        };
        _proto.onBtnMoreClick = function onBtnMoreClick() {
          var ppid = HallData.inst.openGameppid;
          this.gotoGamePageByIdx(ppid);
        };
        _proto.onBtnGameTypeItemClick = function onBtnGameTypeItemClick(item) {
          var ppid = Number(item.name);
          this.gotoGamePageByIdx(ppid);
        };
        _proto.gotoGamePageByIdx = function gotoGamePageByIdx(ppid) {
          this.emitPageEvent(EPageEvent.JUMP_TO_LOBBY_PAGE, {
            pid: ELobbyPage.game,
            ppid: ppid
          });
        };
        _proto.onBtnHotGameItemClick = function onBtnHotGameItemClick(item) {
          this.emitPageEvent(EPageEvent.ROOM_LIST_ITEM_CLICK, item.itemData, 4);
        };
        return LobbyHomeGame;
      }(UI_LobbyHomeGame)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyHomeTask.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './UI_LobbyHomeTask.ts', './LobbyHomeTaskItem.ts', './HallProxy.ts', './LobbyConst.ts', './GetRewardPage.ts', './HallData.ts', './fairygui.mjs', './TelegramDeviceBridge.ts', './LobbyDayLogin.ts', './EventReporter.ts', './LobbyPage.ts', './PageEvent.ts', './WalletDepositPage.ts', './CocosDevKit.ts', './LobbyItemGame.ts', './gameproto.js', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, MarkForNetEventListener, CustomFguiClass, UI_LobbyHomeTask, EnumTASK_EVENT_TYPE, EnumTASK_ACT_TYPE, HallProxy, LobbyConst, GetRewardPage, HallData, Event, TelegramDeviceBridge, LobbyDayLogin, EventReporter, ELobbyPage, EPageEvent, WalletDepositPage, EGamePage, _cjsExports, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_LobbyHomeTask = module.default;
    }, function (module) {
      EnumTASK_EVENT_TYPE = module.EnumTASK_EVENT_TYPE;
      EnumTASK_ACT_TYPE = module.EnumTASK_ACT_TYPE;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      GetRewardPage = module.default;
    }, function (module) {
      HallData = module.HallData;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      LobbyDayLogin = module.LobbyDayLogin;
    }, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      ELobbyPage = module.ELobbyPage;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      WalletDepositPage = module.default;
    }, null, function (module) {
      EGamePage = module.EGamePage;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2;
      cclegacy._RF.push({}, "4c71dfOQkJGIKwp9ViZ/frk", "LobbyHomeTask", undefined);
      var EnumTASK_TYPE = exports('EnumTASK_TYPE', /*#__PURE__*/function (EnumTASK_TYPE) {
        EnumTASK_TYPE[EnumTASK_TYPE["TASK_CIRCLE"] = 1] = "TASK_CIRCLE";
        EnumTASK_TYPE[EnumTASK_TYPE["TASK_NORMALL"] = 2] = "TASK_NORMALL";
        return EnumTASK_TYPE;
      }({}));
      var LobbyHomeTask = exports('LobbyHomeTask', (_dec = MarkForNetEventListener(_cjsExports.hall.MsgGetTaskListRsp.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.hall.MsgFinishClientTaskRsp.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.hall.MsgClaimTaskRewardRsp.ProtocolID), _dec4 = MarkForNetEventListener(_cjsExports.hall.MsgTasksUpdateCast.ProtocolID), _dec5 = MarkForNetEventListener(_cjsExports.hall.MsgInviteAwardInfoRsp.ProtocolID), _dec6 = MarkForNetEventListener(_cjsExports.hall.MsgGetTodaySignRewardRsp.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_LobbyHomeTask) {
        _inheritsLoose(LobbyHomeTask, _UI_LobbyHomeTask);
        function LobbyHomeTask() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyHomeTask.call.apply(_UI_LobbyHomeTask, [this].concat(args)) || this;
          _this.TASK_DAY_LOGIN = 999;
          //task item
          _this._arryNomallTaskInfo = [];
          //task challenge
          _this._arryChallgeTaskInfo = [];
          _this._arryTaskInfo = [];
          _this._tickClock = void 0;
          return _this;
        }
        var _proto = LobbyHomeTask.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyHomeTask.prototype.onConstruct.call(this);
          this.name = 'LobbyHomeTask';
          this.m_TaskList.itemRenderer = this.itemRenderTask.bind(this);
          this.m_TaskList.setVirtual();
          this.m_TaskList.on(Event.CLICK_ITEM, this.TaskItemClick, this);
          this.m_TaskListChallenge.itemRenderer = this.itemRenderTaskChallenge.bind(this);
          this.m_TaskListChallenge.setVirtual();
          this.m_TaskListChallenge.on(Event.CLICK_ITEM, this.TaskItemClick, this);
        };
        _proto.initView = function initView() {
          //this.startTimer();
          this.sendGetTaskReq();
          this.sendGetAwardInfo();
        }

        //获取task信息
        ;

        _proto.sendGetTaskReq = function sendGetTaskReq() {
          HallProxy.inst.getTaskListReq();
        }

        //获取task信息
        ;

        _proto.sendGetAwardInfo = function sendGetAwardInfo() {
          HallProxy.inst.getInviteAwardReq();
        };
        _proto.TaskItemClick = function TaskItemClick(item) {
          if (item) {
            var taskType = item.taskType;
            var btnStatus = item.btnStatus;
            var taskId = item.taskId;
            var actType = item.actType;
            if (taskId == this.TASK_DAY_LOGIN) {
              //taskType == EnumTASK_EVENT_TYPE.DAILY_SIGN) {
              var LoginLayer = LobbyDayLogin.create(this);
              var param = {
                cb: this.onBtnRewardFreshBack.bind(this)
              };
              LoginLayer.setInputParams(param);
              LoginLayer.showOn(this.grootInst);
            } else {
              if (btnStatus == LobbyConst.EnumTaskStatus.FINISH_NO_WARD) {
                HallProxy.inst.sendTaskAwardReq(taskId);
              } else {
                if (taskType == EnumTASK_EVENT_TYPE.JOIN_TELEGRAM_COMMUNITY) {
                  if (btnStatus == LobbyConst.EnumTaskStatus.NO_FINISH) {
                    HallProxy.inst.FinishTaskReq(taskId);
                  }
                  //加入社区
                  TelegramDeviceBridge.Instance.openTelegramLink();
                } else {
                  if (actType == EnumTASK_ACT_TYPE.JUMP_TO_WALLET) {
                    WalletDepositPage.create(this).showOn(this.grootInst);
                  } else if (actType == EnumTASK_ACT_TYPE.JUMP_TO_CASH) {
                    this.emitPageEvent(EPageEvent.JUMP_TO_LOBBY_PAGE, {
                      pid: ELobbyPage.game,
                      ppid: 3
                    });
                    // if (this._selfTaskInfo && this._selfTaskInfo.cb) {
                    //     this._selfTaskInfo.cb({ pid: ELobbyPage.game, ppid: 3 } as ILobbyInputParam);
                    // }
                  } else if (actType == EnumTASK_ACT_TYPE.JUMP_TO_RECOMMON) {
                    this.emitPageEvent(EPageEvent.JUMP_TO_LOBBY_PAGE, {
                      pid: ELobbyPage.game,
                      ppid: 1
                    });
                  } else if (actType == EnumTASK_ACT_TYPE.JUMP_TO_INVITE_FRIENDS) {
                    this.emitPageEvent(EPageEvent.JUMP_TO_LOBBY_PAGE, {
                      pid: ELobbyPage.invite
                    });
                    //LobbyInviteFriendLayer.create(this).showOn(this.grootInst);
                  } else if (actType == EnumTASK_ACT_TYPE.JUMP_TO_MTT) {
                    this.emitPageEvent(EPageEvent.JUMP_TO_LOBBY_PAGE, {
                      pid: ELobbyPage.game,
                      ppid: EGamePage.mtt
                    });
                  }
                }
              }
            }
          }
        };
        _proto.onBtnRewardFreshBack = function onBtnRewardFreshBack(day) {
          this.resetTaskStatus(this.TASK_DAY_LOGIN, LobbyConst.EnumTaskStatus.FINISH_AWARD_DONE);
        }

        //查找循环和常规任务数
        ;

        _proto.freshTaskLength = function freshTaskLength(iType) {
          var _this2 = this;
          if (!this._arryTaskInfo) return;
          var iNomallDoneNum = 0;
          var iChallengDoneNum = 0;
          if (iType == 1) {
            //循环任务 对应每日任务
            this._arryNomallTaskInfo = [];
            this._arryTaskInfo.forEach(function (item, index) {
              if (item.conf.taskType == EnumTASK_TYPE.TASK_CIRCLE) {
                _this2._arryNomallTaskInfo.push(item);
                if (item.status == LobbyConst.EnumTaskStatus.FINISH_NO_WARD || item.status == LobbyConst.EnumTaskStatus.FINISH_AWARD_DONE) {
                  iNomallDoneNum += 1;
                }
              }
            });
            this.m_TaskListChallenge.numItems = this._arryChallgeTaskInfo.length;
          } else if (iType == 2) {
            //常规任务 对应跳转任务
            this._arryChallgeTaskInfo = [];
            this._arryTaskInfo.forEach(function (item, index) {
              if (item.conf.taskType == EnumTASK_TYPE.TASK_NORMALL) {
                _this2._arryChallgeTaskInfo.push(item);
                if (item.status == LobbyConst.EnumTaskStatus.FINISH_NO_WARD || item.status == LobbyConst.EnumTaskStatus.FINISH_AWARD_DONE) {
                  iChallengDoneNum += 1;
                }
              }
            });
            this.m_TaskList.numItems = this._arryNomallTaskInfo.length;
          } else {
            this._arryChallgeTaskInfo = [];
            this._arryNomallTaskInfo = [];
            this._arryTaskInfo.forEach(function (item, index) {
              if (item.conf.taskType == EnumTASK_TYPE.TASK_NORMALL) {
                _this2._arryChallgeTaskInfo.push(item);
                if (item.status == LobbyConst.EnumTaskStatus.FINISH_NO_WARD || item.status == LobbyConst.EnumTaskStatus.FINISH_AWARD_DONE) {
                  iChallengDoneNum += 1;
                }
              } else if (item.conf.taskType == EnumTASK_TYPE.TASK_CIRCLE) {
                _this2._arryNomallTaskInfo.push(item);
                if (item.status == LobbyConst.EnumTaskStatus.FINISH_NO_WARD || item.status == LobbyConst.EnumTaskStatus.FINISH_AWARD_DONE) {
                  iNomallDoneNum += 1;
                }
              }
            });
          }

          //重置 list的高度 重置整个view的高度
          // this.m_TaskList.viewHeight = 1500;
          // this.m_TaskListChallenge.viewHeight = 1500;
          // this.viewHeight = 3000;

          var taskListViewHeight = 0;
          var taskListChallengeViewHeight = 0;
          var totalViewHeight = 0;
          var titleTaskHeight = 120; //title高度
          var titleChallengeHeight = 130; //title 高度

          var addHeight = 6;
          var taskLineGap = this.m_TaskList.lineGap;
          var taskLineHeight = this.m_TaskList.virtualItemSize.height;
          var taskChallengeLineGap = this.m_TaskListChallenge.lineGap;
          var taskChallengeLineHeight = this.m_TaskListChallenge.virtualItemSize.height;

          //m_TaskList
          var addTitleHeight = 0;
          if (this._arryNomallTaskInfo.length == 0) {
            this.m_task_day.visible = false;
            taskListViewHeight = 0;
          } else {
            addTitleHeight = titleTaskHeight;
            this.m_task_day.visible = true;
            taskListViewHeight = (this._arryNomallTaskInfo.length - 1) * taskLineGap + this._arryNomallTaskInfo.length * taskLineHeight;
            //fresh all task info
            this.m_task_info_text1.text = Utils.formatStr('%d/%d', iNomallDoneNum, this._arryNomallTaskInfo.length);
          }
          totalViewHeight += taskListViewHeight + addTitleHeight;

          //m_TaskListChallenge
          var addTitleHeight2 = 0;
          if (this._arryChallgeTaskInfo.length == 0) {
            this.m_task_challeng.visible = false;
            taskListChallengeViewHeight = 0;
          } else {
            addTitleHeight2 = titleChallengeHeight;
            taskListChallengeViewHeight = (this._arryChallgeTaskInfo.length - 1) * taskChallengeLineGap + this._arryChallgeTaskInfo.length * taskChallengeLineHeight;
            this.m_task_challeng.visible = true;

            //fresh all task info
            this.m_task_info_text2.text = Utils.formatStr('%d/%d', iChallengDoneNum, this._arryChallgeTaskInfo.length);
          }
          totalViewHeight += taskListChallengeViewHeight + addTitleHeight2;
          this.m_TaskList.viewHeight = taskListViewHeight;
          this.m_TaskListChallenge.viewHeight = taskListChallengeViewHeight;

          //针对task 按键做跳转有用
          // if (totalViewHeight < screen.windowSize.height - 180) {
          //     totalViewHeight = screen.windowSize.height - 180;
          // }

          this.viewHeight = totalViewHeight + addHeight;
          this.m_TaskList.numItems = this._arryNomallTaskInfo.length;
          this.m_TaskListChallenge.numItems = this._arryChallgeTaskInfo.length;
        };
        _proto.itemRenderTask = function itemRenderTask(index, node) {
          if (!this._arryNomallTaskInfo) return;
          if (index < 0 || index >= this._arryNomallTaskInfo.length) return;
          var itemInfo = this._arryNomallTaskInfo[index];
          node.setItem(index, itemInfo);
        };
        _proto.itemRenderTaskChallenge = function itemRenderTaskChallenge(index, node) {
          if (!this._arryChallgeTaskInfo) return;
          if (index < 0 || index >= this._arryChallgeTaskInfo.length) return;
          var itemInfo = this._arryChallgeTaskInfo[index];
          node.setItem(index, itemInfo);
        };
        _proto.onMsgGetTaskListRsp = function onMsgGetTaskListRsp(netdata) {
          if (netdata.isRetSuccess()) {
            // 基于返回码判断是否为成功
            var info = netdata.getData(_cjsExports.hall.MsgGetTaskListRsp); // 获取消息内容
            if (info == null) return;
            this._arryTaskInfo = info.list;

            // console.log(info.list);

            // this.height = this.parent.height;
            // this.m_TaskList.viewHeight = this.height - 90;

            this.sortTaskInfo();

            //排序规则
            this.checkTaskReadPoint();
            this.refreshTableView();

            //temp
            // let taskId = 1057;
            // let status = LobbyConst.EnumTaskStatus.FINISH_NO_WARD;
            // this.resetTaskStatus(taskId, status);
          }
        };

        _proto.onMsgFinishClientTaskRsp = function onMsgFinishClientTaskRsp(netdata) {
          if (netdata.isRetSuccess()) {
            // 基于返回码判断是否为成功
            var info = netdata.getData(_cjsExports.hall.MsgFinishClientTaskRsp); // 获取消息内容
            if (!info || !this._arryTaskInfo) return;
            var taskId = info.taskId;
            var status = LobbyConst.EnumTaskStatus.FINISH_NO_WARD;
            this.resetTaskStatus(taskId, status);
          }
        };
        _proto.onMsgClaimTaskRewardRsp = function onMsgClaimTaskRewardRsp(netdata) {
          if (netdata.isRetSuccess()) {
            // 基于返回码判断是否为成功
            var info = netdata.getData(_cjsExports.hall.MsgClaimTaskRewardRsp); // 获取消息内容
            if (!info || !this._arryTaskInfo) return;
            var taskId = info.taskId;
            var status = LobbyConst.EnumTaskStatus.FINISH_AWARD_DONE;
            this.resetTaskStatus(taskId, status);
            EventReporter.emit(EventReporter.Event.mixpanel.TASK_REWARDS_STATE_CHANGE, {
              State: '2',
              TaskID: taskId.toString()
            });
          }
        };
        _proto.onMsgTasksUpdateCast = function onMsgTasksUpdateCast(netdata) {
          if (netdata.isRetSuccess()) {
            // 基于返回码判断是否为成功
            var info = netdata.getData(_cjsExports.hall.MsgTasksUpdateCast); // 获取消息内容
            if (!info) return;
            this.sendGetTaskReq();
          }
        };
        _proto.resetTaskStatus = function resetTaskStatus(Id, status) {
          var _this3 = this;
          var taskId = Id;
          var _loop = function _loop() {
            var taskInfo = _step.value;
            if (taskInfo.conf.taskId == taskId) {
              var _taskInfo$conf;
              var nowRewardData = [];
              (_taskInfo$conf = taskInfo.conf) == null || (_taskInfo$conf = _taskInfo$conf.rewards) == null || _taskInfo$conf.forEach(function (item) {
                var awardInfo = {
                  num: item.num,
                  propid: item.propId,
                  pic: item.pic
                };
                nowRewardData.push(awardInfo);
              });
              if (nowRewardData && status == LobbyConst.EnumTaskStatus.FINISH_AWARD_DONE && Id != _this3.TASK_DAY_LOGIN) {
                //show 奖励界面
                var param = {
                  items: nowRewardData
                };
                var awardPage = GetRewardPage.create(_this3);
                awardPage.setInputParams(param);
                awardPage.showOn(_this3.grootInst);
              }
              taskInfo.status = status;

              //重新排序
              _this3.sortTaskInfo();
              _this3.checkTaskReadPoint();
              _this3.refreshTableView(true);
              return 1; // break
            }
          };

          for (var _iterator = _createForOfIteratorHelperLoose(this._arryTaskInfo), _step; !(_step = _iterator()).done;) {
            if (_loop()) break;
          }
        }

        //排序 状态（0:未完成 1:已完成 2:已领取）
        ;

        _proto.sortTaskInfo = function sortTaskInfo() {
          if (!this._arryTaskInfo) return;
          if (this._arryTaskInfo.length <= 0) return;
          var tempTaskInfo = this._arryTaskInfo;
          this._arryTaskInfo = this.sortTasks(tempTaskInfo);
        }

        //
        ;

        _proto.sortTasks = function sortTasks(taskList) {
          return taskList.sort(function (a, b) {
            if (a.status == 1) {
              if (b.status == 1) {
                if (a.conf.sortWeight > b.conf.sortWeight) {
                  return -1;
                }
              } else {
                return -1;
              }
            } else if (a.status == 2) {
              if (b.status == 2) {
                if (a.conf.sortWeight > b.conf.sortWeight) {
                  return -1;
                }
              }
            } else if (a.status == 0) {
              if (b.status == 0) {
                var progressValue = a.progressValue;
                var totalValue = a.conf.checkValue;
                var progressValueB = b.progressValue;
                var totalValueB = b.conf.checkValue;
                var aProgressRatio = progressValue / totalValue;
                var bProgressRatio = progressValueB / totalValueB;
                if (aProgressRatio > bProgressRatio) {
                  return -1;
                } else if (aProgressRatio == bProgressRatio) {
                  if (a.conf.sortWeight > b.conf.sortWeight) {
                    return -1;
                  }
                }
              } else if (b.status == 2) {
                return -1;
              }
            }
            return 1;
          });
        }

        //刷新tableview
        ;

        _proto.refreshTableView = function refreshTableView(reFreshList) {
          if (!this._arryTaskInfo) return;
          //this.m_TaskList.numItems = this._arryTaskInfo.length;

          this.freshTaskLength(3);
        };
        _proto.checkTaskReadPoint = function checkTaskReadPoint() {
          var showReadPoint = false;

          //let taskId: number[] = [];
          if (this._arryTaskInfo.length > 0) {
            this._arryTaskInfo.forEach(function (item, indx) {
              if (item.status == LobbyConst.EnumTaskStatus.FINISH_NO_WARD) {
                showReadPoint = true;
                return;
                //taskId.push(item.conf.taskId);
              }
            });
          }

          HallData.inst.GetAwardTaskStatus = showReadPoint;

          // if (taskId.length > 0) {
          //     EventReporter.emit(EventReporter.Event.mixpanel.TASK_REWARDS_STATE_CHANGE, { State: '1', TaskID: taskId.toString() });
          // }
        };

        _proto.onMsgInviteAwardInfoRsp = function onMsgInviteAwardInfoRsp(netdata) {
          if (netdata.isRetSuccess()) {
            // 基于返回码判断是否为成功
            var info = netdata.getData(_cjsExports.hall.MsgInviteAwardInfoRsp); // 获取消息内容
            if (!info) return;
            var awardPropId = [];
            var awardPropNum = [];
            // 1邀请奖励  2被要请的奖励
            var awardInfo = [];
            info.rewards.forEach(function (item, index) {
              var ipropId = item.propId;
              var iNum = item.num;

              //邀请奖励的抽水 金币和 ustd都需要除以100
              if (ipropId == LobbyConst.ENUMMoney_Type.TAG_MONEY || ipropId == LobbyConst.ENUMMoney_Type.TAG_MONEY_U) {
                iNum = iNum / 100;
              }
              var localInfo = {
                propid: ipropId,
                num: iNum
                //info.pic = item.pic;//todo后续扩展 目前没有走后台道具配置
              };

              awardInfo.push(localInfo);
              awardPropId.push(ipropId);
              awardPropNum.push(iNum);
            });
            if (awardInfo.length > 0) {
              var showAward = {
                iType: info.type,
                info: awardInfo
              };
              this.showAwardPage(showAward);
              EventReporter.emit(EventReporter.Event.mixpanel.PASSIVE_AWARD_SEND, {
                EventType: info.type.toString(),
                PropId: awardPropId.toString(),
                PropNum: awardPropNum.toString()
              });
            }
          }
        };
        _proto.showAwardPage = function showAwardPage(showAward) {
          // console.log('==showAwardPage=');

          var iType = showAward.iType;
          if (iType == 1) {
            if (showAward.info.length > 0) {
              var param = {
                items: showAward.info,
                content: 'INVITE_2',
                iType: 2,
                cb: this.onBtnConfigCallBack.bind(this)
              };
              var awardPage = GetRewardPage.create(this);
              awardPage.setInputParams(param);
              awardPage.showOn(this.grootInst);
            }
          } else if (iType == 2) {
            if (showAward.info.length > 0) {
              var _param = {
                items: showAward.info,
                content: 'INVITE_1'
              };
              var _awardPage = GetRewardPage.create(this);
              _awardPage.setInputParams(_param);
              _awardPage.showOn(this.grootInst);
            }
          } else if (iType == 3) {
            if (showAward.info.length > 0) {
              var _param2 = {
                items: showAward.info,
                content: 'HOME_WELCOMEGIFT'
              };
              var _awardPage2 = GetRewardPage.create(this);
              _awardPage2.setInputParams(_param2);
              _awardPage2.showOn(this.grootInst);
            }
          }
        };
        _proto.onBtnConfigCallBack = function onBtnConfigCallBack() {
          this.emitPageEvent(EPageEvent.JUMP_TO_LOBBY_PAGE, {
            pid: ELobbyPage.invite
          });
          //LobbyInviteFriendLayer.create(this).showOn(this.grootInst);
        };

        _proto.onDestroy = function onDestroy() {
          if (this._tickClock) this._tickClock.stop();
          this._tickClock = undefined;
          _UI_LobbyHomeTask.prototype.onDestroy.call(this);
        };
        _proto.startTimer = function startTimer() {
          if (this._tickClock) this._tickClock.stop();
          this._tickClock = this.setInterval(this.refreshTimeOnTick.bind(this), 10);
        };
        _proto.refreshTimeOnTick = function refreshTimeOnTick() {
          // HallProxy.inst.addTest();
        };
        _proto.onMsgGetTodaySignRewardRsp = function onMsgGetTodaySignRewardRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgGetTodaySignRewardRsp);
            if (!info) return;
            if (info.reward) {
              var moneyNum = info.reward.coin;
              var siginDay = info.reward.day;
              var awardInfo = [];
              var item = {
                propid: LobbyConst.ENUMMoney_Type.TAG_MONEY,
                num: moneyNum
              };
              awardInfo.push(item);

              //发奖
              var param = {
                items: awardInfo
                //content: 'TASK_999'
              };

              var awardPage = GetRewardPage.create(this);
              awardPage.setInputParams(param);
              awardPage.showOn(this.grootInst);
              HallData.inst.MsgGetSignRewardConfigListRsp.todaySign = siginDay;
              HallData.inst.MsgGetSignRewardConfigListRsp.signIndex = siginDay;
              EventReporter.emit(EventReporter.Event.mixpanel.DAILY_LOGIN_REWARDS_STATE_CHANGE, {
                State: '2',
                TaskID: '999'
              });
              this.onBtnRewardFreshBack(siginDay);

              //关闭现有的 每日登录界面
              if (LobbyDayLogin.g_dayLogin) {
                LobbyDayLogin.g_dayLogin.hide();
              }
            }
          }
        };
        return LobbyHomeTask;
      }(UI_LobbyHomeTask), (_applyDecoratedDescriptor(_class2.prototype, "onMsgGetTaskListRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetTaskListRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgFinishClientTaskRsp", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgFinishClientTaskRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgClaimTaskRewardRsp", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgClaimTaskRewardRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgTasksUpdateCast", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgTasksUpdateCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgInviteAwardInfoRsp", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgInviteAwardInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetTodaySignRewardRsp", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetTodaySignRewardRsp"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyHomeTaskItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_LobbyHomeTaskItem.ts', './LobbyConst.ts', './LanguageManage.ts', './Utils.ts', './MultiLanguageText.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Tween, tween, CustomFguiClass, UI_LobbyHomeTaskItem, LobbyConst, LanguageManager, Utils, MultiLanguageText;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_LobbyHomeTaskItem = module.default;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      MultiLanguageText = module.MultiLanguageText;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "4c332ZnRA5LNYamBUo01uDO", "LobbyHomeTaskItem", undefined);
      //#task_type 1 加入telegram社区 2金币奖励 3邀请好友 4所有好友获得的金币总和 5每日登录 6 玩游戏
      var EnumTaskIcon = /*#__PURE__*/function (EnumTaskIcon) {
        EnumTaskIcon[EnumTaskIcon["TASK_JOIN_TG"] = 1] = "TASK_JOIN_TG";
        EnumTaskIcon[EnumTaskIcon["TASK_ICON_AWARD"] = 2] = "TASK_ICON_AWARD";
        EnumTaskIcon[EnumTaskIcon["TASK_INVITE_FRIENDS"] = 3] = "TASK_INVITE_FRIENDS";
        EnumTaskIcon[EnumTaskIcon["TASK_ALL_FRIENDS_TOTAL_MONEY"] = 4] = "TASK_ALL_FRIENDS_TOTAL_MONEY";
        EnumTaskIcon[EnumTaskIcon["TASK_DAY_SINGIN"] = 5] = "TASK_DAY_SINGIN";
        EnumTaskIcon[EnumTaskIcon["TASK_PLAY_GAME"] = 6] = "TASK_PLAY_GAME";
        return EnumTaskIcon;
      }(EnumTaskIcon || {});
      var EnumTASK_EVENT_TYPE = exports('EnumTASK_EVENT_TYPE', /*#__PURE__*/function (EnumTASK_EVENT_TYPE) {
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["WIN_GAME"] = 1] = "WIN_GAME";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["MTT_TOP_10"] = 2] = "MTT_TOP_10";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["WIN_GAME_WITH_THREE_OF_A_KIND"] = 3] = "WIN_GAME_WITH_THREE_OF_A_KIND";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["GAME_PROFIT"] = 4] = "GAME_PROFIT";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["WIN_MTT_GAME"] = 5] = "WIN_MTT_GAME";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["INVITE_FRIEND"] = 6] = "INVITE_FRIEND";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["JOIN_TELEGRAM_COMMUNITY"] = 7] = "JOIN_TELEGRAM_COMMUNITY";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["CAST_ROOM_PROFIT"] = 8] = "CAST_ROOM_PROFIT";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["PLAYER_GAME_HANDS"] = 9] = "PLAYER_GAME_HANDS";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["GTE_FLUSH_AND_NOT_FOLD"] = 10] = "GTE_FLUSH_AND_NOT_FOLD";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["NORMAL_TABLE_WIN_NUM"] = 11] = "NORMAL_TABLE_WIN_NUM";
        EnumTASK_EVENT_TYPE[EnumTASK_EVENT_TYPE["DAILY_SIGN"] = 99] = "DAILY_SIGN";
        return EnumTASK_EVENT_TYPE;
      }({}));

      //4，跳转美金桌  5 跳转钱包， 6跳转推荐列表， 7跳转邀请中
      var EnumTASK_ACT_TYPE = exports('EnumTASK_ACT_TYPE', /*#__PURE__*/function (EnumTASK_ACT_TYPE) {
        EnumTASK_ACT_TYPE[EnumTASK_ACT_TYPE["JUMP_TO_MTT"] = 2] = "JUMP_TO_MTT";
        EnumTASK_ACT_TYPE[EnumTASK_ACT_TYPE["JUMP_TO_CASH"] = 4] = "JUMP_TO_CASH";
        EnumTASK_ACT_TYPE[EnumTASK_ACT_TYPE["JUMP_TO_WALLET"] = 5] = "JUMP_TO_WALLET";
        EnumTASK_ACT_TYPE[EnumTASK_ACT_TYPE["JUMP_TO_RECOMMON"] = 6] = "JUMP_TO_RECOMMON";
        EnumTASK_ACT_TYPE[EnumTASK_ACT_TYPE["JUMP_TO_INVITE_FRIENDS"] = 7] = "JUMP_TO_INVITE_FRIENDS";
        return EnumTASK_ACT_TYPE;
      }({}));
      var LobbyHomeTaskItem = exports('LobbyHomeTaskItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_LobbyHomeTaskItem) {
        _inheritsLoose(LobbyHomeTaskItem, _UI_LobbyHomeTaskItem);
        function LobbyHomeTaskItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyHomeTaskItem.call.apply(_UI_LobbyHomeTaskItem, [this].concat(args)) || this;
          _this._btnStatus = -1;
          _this._taskId = 0;
          _this._iconType = void 0;
          _this._taskType = void 0;
          _this._actType = 0;
          _this.taskIconInterface = [{
            eventType: EnumTaskIcon.TASK_JOIN_TG,
            strIcon: 'ui://Lobby/task_telegram_icon'
          }, {
            eventType: EnumTaskIcon.TASK_ICON_AWARD,
            strIcon: 'ui://Lobby/task_money_tg'
          }, {
            eventType: EnumTaskIcon.TASK_INVITE_FRIENDS,
            strIcon: 'ui://Lobby/task_invite'
          }, {
            eventType: EnumTaskIcon.TASK_ALL_FRIENDS_TOTAL_MONEY,
            strIcon: 'ui://Lobby/task_friend_money_tg'
          }, {
            eventType: EnumTaskIcon.TASK_DAY_SINGIN,
            strIcon: 'ui://Lobby/task_sigin'
          }, {
            eventType: EnumTaskIcon.TASK_PLAY_GAME,
            strIcon: 'ui://Lobby/task_playgame'
          }];
          return _this;
        }
        var _proto = LobbyHomeTaskItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyHomeTaskItem.prototype.onConstruct.call(this);
          //this.m_task_status.onClick(this.onBtnReward.bind(this), this);
          this.m_task_status.touchable = false;
          this.name = 'LobbyBoardBlindItem';
        };
        _proto.GetIconPath = function GetIconPath(propId) {
          var path = '';
          if (propId == LobbyConst.ENUMMoney_Type.TAG_MONEY) {
            path = 'ui://Lobby/task_icon_2';
          } else if (propId == LobbyConst.ENUMMoney_Type.TAG_XP) {
            path = 'ui://Lobby/task_icon_exp';
          }
          return path;
        };
        _proto.setItem = function setItem(index, taskInfo) {
          var _this2 = this;
          if (index >= 0) {
            var _taskInfo$conf$reward;
            this._btnStatus = taskInfo.status;
            this._taskId = taskInfo.conf.taskId;
            this._taskType = taskInfo.conf.eventType;
            this._iconType = parseInt(taskInfo.conf.iconType || '2'); //每日登录走默认值
            this._actType = taskInfo.conf.actType;
            this.m_icon.url = taskInfo.conf.iconUrl;

            //展示图标
            //LoadEncryImage.Instance.LoadRemoteDecryptImage(taskInfo.conf.iconUrl, this.m_icon);
            // for (let info of this.taskIconInterface) {
            //     if (info.eventType == this._iconType) {
            //         this.m_icon.url = info.strIcon;
            //         break;
            //     }
            // }

            //奖励类型 money or ustd
            this.m_award_1.visible = false;
            this.m_award_2.visible = false;
            var iListLength = ((_taskInfo$conf$reward = taskInfo.conf.rewards) == null ? void 0 : _taskInfo$conf$reward.length) || 0;
            if (iListLength > 0) {
              taskInfo.conf.rewards.forEach(function (item, indx) {
                if (indx <= 1) {
                  // }else if (item.propId == LobbyConst.ENUMMoney_Type.TAG_MONEY_U) {
                  //     this.m_award_icon.url = 'ui://Public/common_ustd';
                  // } else if (item.propId == LobbyConst.ENUMPROP_Type.TAG_XP) {
                  //     this.m_award_icon.url = 'ui://Public/common_ustd';
                  // }
                  if (indx == 0) {
                    _this2.m_award_label.text = Utils.toFormat(item.num, 3, false, true); //Utils.getThousandShowNumber(item.num as number);
                    _this2.m_award_1.visible = true;
                    var imageUrl = _this2.GetIconPath(item.propId);
                    if (imageUrl.length == 0) {
                      imageUrl = item.pic || '';
                    }
                    _this2.m_award_icon.url = imageUrl;
                  } else if (indx == 1) {
                    _this2.m_award_label_2.text = Utils.toFormat(item.num, 3, false, true);
                    _this2.m_award_2.visible = true;
                    var _imageUrl = _this2.GetIconPath(item.propId);
                    if (_imageUrl.length == 0) {
                      _imageUrl = item.pic || '';
                    }
                    _this2.m_award_icon_2.url = _imageUrl;
                  }
                  // let awardCom = this[Utils.formatStr('m_award_%d', index + 1)];
                  // if (awardCom) {
                  //     awardCom.visible = true;
                  // }
                }
              });
            }

            //奖励状态
            Tween.stopAllByTarget(this.m_task_status);
            this.m_task_status.setScale(1, 1);
            if (this._btnStatus == LobbyConst.EnumTaskStatus.NO_FINISH) {
              this.m_task_status.url = 'ui://Lobby/task_rt';
            } else if (this._btnStatus == LobbyConst.EnumTaskStatus.FINISH_NO_WARD) {
              this.m_task_status.url = 'ui://Lobby/lobby_task_gift';
              tween(this.m_task_status).repeatForever(tween(this.m_task_status).set({
                scaleX: 1.0,
                scaleY: 1.0
              }).to(0.8, {
                scaleX: 1.2,
                scaleY: 1.2
              }, {
                easing: 'sineIn'
              }).to(0.8, {
                scaleX: 1.0,
                scaleY: 1.0
              }, {
                easing: 'sineIn'
              })).start();
            } else if (this._btnStatus == LobbyConst.EnumTaskStatus.FINISH_AWARD_DONE) {
              this.m_task_status.url = 'ui://Lobby/lobby_task_success';
            }
            var totalNum = taskInfo.conf.checkValue;
            var nowProgress = taskInfo.progressValue;
            if (nowProgress > totalNum) {
              nowProgress = totalNum;
            }
            this.m_titlemsg.text = Utils.formatStr('(%d/%d)', nowProgress, totalNum);
            if (totalNum == 1) {
              this.m_titlemsg.visible = false;
            } else {
              this.m_titlemsg.visible = true;
            }
            var componet = this.m_title.node.getComponent(MultiLanguageText);
            componet.setFormatFunction(function () {
              var _taskInfo$conf$langua;
              var str = (_taskInfo$conf$langua = taskInfo.conf.languageKey) != null ? _taskInfo$conf$langua : '';
              if (str.length > 0) {
                if (totalNum > 0) {
                  str = Utils.formatStr(LanguageManager.get(str), totalNum.toString());
                } else {
                  str = LanguageManager.get(str);
                }
              }
              return "" + str;
            });
          }
        }

        //奖励领取
        // private onBtnReward() {
        //     if (this._btnStatus == LobbyConst.EnumTaskStatus.FINISH_NO_WARD) {
        //         HallProxy.inst.sendTaskAwardReq(this._taskId);
        //     } else if (this._taskType == EnumTASK_EVENT_TYPE.JOIN_TELEGRAM_COMMUNITY) {
        //         if (this._btnStatus == LobbyConst.EnumTaskStatus.NO_FINISH) {
        //             HallProxy.inst.FinishTaskReq(this._taskId);
        //         }
        //         //加入社区
        //         TelegramDeviceBridge.Instance.openTelegramLink();
        //     } else if (this._taskType == EnumTASK_EVENT_TYPE.INVITE_FRIEND) {
        //         if (this._btnStatus == LobbyConst.EnumTaskStatus.NO_FINISH) {
        //             LobbyInviteFriendLayer.create(this).showOn(this.grootInst);
        //         }
        //     }
        // }
        ;

        _createClass(LobbyHomeTaskItem, [{
          key: "btnStatus",
          get: function get() {
            return this._btnStatus;
          },
          set: function set(num) {
            this._btnStatus = num;
          }
        }, {
          key: "taskId",
          get: function get() {
            return this._taskId;
          },
          set: function set(num) {
            this._taskId = num;
          }
        }, {
          key: "taskType",
          get: function get() {
            return this._taskType;
          },
          set: function set(num) {
            this._taskType = num;
          }
        }, {
          key: "actType",
          get: function get() {
            return this._actType;
          },
          set: function set(num) {
            this._actType = num;
          }
        }]);
        return LobbyHomeTaskItem;
      }(UI_LobbyHomeTaskItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyInviteFriendItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Invite_Friend_Item.ts', './Utils.ts', './LobbyConst.ts', './GameDecorators.ts', './LanguageManage.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, UI_Lobby_Invite_Friend_Item, Utils, LobbyConst, CustomFguiClass, LanguageManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Invite_Friend_Item = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      LanguageManager = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "dc6c8C4ttZIXLsu52Y4IUIN", "LobbyInviteFriendItem", undefined);
      var LobbyInviteFriendItem = exports('LobbyInviteFriendItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_Invite_Frie) {
        _inheritsLoose(LobbyInviteFriendItem, _UI_Lobby_Invite_Frie);
        function LobbyInviteFriendItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Invite_Frie.call.apply(_UI_Lobby_Invite_Frie, [this].concat(args)) || this;
          _this.ShopData = null;
          //1.邀请好友奖励（邀請一個好友）， 2被邀请好友奖励 (被邀請獎勵) 3.抽水 （好友獲勝）4 好友玩牌（好友獲勝）
          _this.IviteTitle = [[1, 'INVITE_7'], [2, 'INVITE_9'], [3, 'INVITE_TASKTITLE1'], [4, 'INVITE_6']];
          _this["package"] = ['FGUI/Lobby'];
          return _this;
        }
        var _proto = LobbyInviteFriendItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Invite_Frie.prototype.onConstruct.call(this);
          this.name = 'LobbyInviteFriendItem';
        };
        _proto.setItem = function setItem(index, arryData) {
          if (index >= 0) {
            if (arryData.playerId == 0) {
              this.m_com_bg.visible = false;
            } else {
              this.m_com_bg.visible = true;
              //描述
              var iType = arryData.iType;
              for (var _iterator = _createForOfIteratorHelperLoose(this.IviteTitle), _step; !(_step = _iterator()).done;) {
                var item = _step.value;
                if (item[0] == iType) {
                  this.m_label_invate_info.text = LanguageManager.get(item[1]);
                  break;
                }
              }

              //人名
              this.m_label_name.text = Utils.formatDisplayNickName(arryData.nick, 16);

              //时间
              var offTime = Utils.curServerTimeSecondstamp - arryData.awardTime;
              this.m_label_time.text = this.getTimeStr(offTime);

              //奖励的钱
              var iNum = arryData.rewards[0].num;
              var iPropId = arryData.rewards[0].propId;
              if (iPropId == LobbyConst.ENUMMoney_Type.TAG_MONEY_U || iPropId == LobbyConst.ENUMMoney_Type.TAG_MONEY) {
                iNum = iNum / 100; //有小数 需要除以100
              }

              if (iPropId == LobbyConst.ENUMMoney_Type.TAG_MONEY_U) {
                this.m_money_icon.url = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY_U, LobbyConst.ENUMPOP_U_Type.TAG_U_36);
              } else {
                this.m_money_icon.url = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY, LobbyConst.ENUMPOP_Money_Type.TAG_MONEY_36);
              }
              this.m_label_invate_award_money.text = Utils.formatStr('+%s', Utils.getThousandShowNumber(iNum));
            }
          }
        };
        _proto.getTimeStr = function getTimeStr(offTime) {
          var yearNum = 365 * 24 * 3600;
          var mothNum = 30 * 24 * 3600;
          var dayNum = 24 * 3600;
          var HourNum = 3600;
          var MinNum = 60;
          var strTime = '';
          if (offTime > yearNum) {
            strTime = Utils.formatStr('%d %s %s', Math.floor(offTime / yearNum), LanguageManager.get('INVITE_YEAR'), LanguageManager.get('INVITE_AGO'));
          } else if (offTime > mothNum) {
            strTime = Utils.formatStr('%d %s %s', Math.floor(offTime / mothNum), LanguageManager.get('INVITE_MONTH'), LanguageManager.get('INVITE_AGO'));
          } else if (offTime > dayNum) {
            strTime = Utils.formatStr('%d %s %s', Math.floor(offTime / dayNum), LanguageManager.get('INVITE_DAY'), LanguageManager.get('INVITE_AGO'));
          } else if (offTime > HourNum) {
            strTime = Utils.formatStr('%d %s %s', Math.floor(offTime / HourNum), LanguageManager.get('INVITE_HOUR'), LanguageManager.get('INVITE_AGO'));
          } else if (offTime > MinNum) {
            strTime = Utils.formatStr('%d %s %s', Math.floor(offTime / MinNum), LanguageManager.get('INVITE_MINUTE'), LanguageManager.get('INVITE_AGO'));
          } else if (offTime >= 0) {
            strTime = Utils.formatStr('%d %s %s', offTime, LanguageManager.get('INVITE_SECOND'), LanguageManager.get('INVITE_AGO'));
          }
          return strTime;
        };
        return LobbyInviteFriendItem;
      }(UI_Lobby_Invite_Friend_Item)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyInviteFriendLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Invite_Friend_layer.ts', './fairygui.mjs', './LobbyConst.ts', './Logger.ts', './LanguageManage.ts', './Utils.ts', './TelegramDeviceBridge.ts', './NativeDeviceBridge.ts', './RoleData.ts', './HallProxy.ts', './GameDecorators.ts', './gameproto.mjs_cjs=&original=.js', './CDKDecorators.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_Lobby_Invite_Friend_layer, Event, LobbyConst, Log, LanguageManager, Utils, TelegramDeviceBridge, NativeDeviceBridge, RoleData, HallProxy, MarkForNetEventListener, CustomFguiClass, SafeTimeInterval, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Invite_Friend_layer = module.default;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2;
      cclegacy._RF.push({}, "03869LZuQVEBoDWhsEq9/Db", "LobbyInviteFriendLayer", undefined);
      var LobbyInviteFriendLayer = exports('LobbyInviteFriendLayer', (_dec = SafeTimeInterval(500), _dec2 = MarkForNetEventListener(_cjsExports.hall.MsgInviteConfigRsp.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.hall.MsgInviteAwardListRsp.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_Lobby_Invite_Frie) {
        _inheritsLoose(LobbyInviteFriendLayer, _UI_Lobby_Invite_Frie);
        function LobbyInviteFriendLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Invite_Frie.call.apply(_UI_Lobby_Invite_Frie, [this].concat(args)) || this;
          _this._nowPage = 1;
          //当前的刷新页
          _this._totalPage = 0;
          //总的刷新页
          _this._freshTime = 0;
          //1.邀请奖励  2.被邀请奖励 3.抽水奖励 4.游戏玩N局奖励
          //iGameNum   抽水比列， 或者游戏局数
          _this._AwardCofingInfo = [];
          //1.邀请奖励  2.被邀请奖励 3.抽水奖励 4.游戏玩N局奖励
          //iGameNum   抽水比列， 或者游戏局数
          _this._AwardInfo = [];
          _this._lastPageTime = 0;
          return _this;
        }
        var _proto = LobbyInviteFriendLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Invite_Frie.prototype.onConstruct.call(this);
          this.name = 'LobbyInviteFriendLayer';

          //初始化基础数据
          this.m_content.m_tableview.lineGap = 26;
          this.m_content.m_tableview.itemRenderer = this.itemRedererBlindAward.bind(this);
          // this.m_content.m_tableview.setVirtual();
          this.m_btn_invite_friend.onClick(this.onBtnInviteFriend.bind(this), this);
          this.m_btn_copy.onClick(this.onBtnCopy.bind(this), this);
          this.m_content.m_tableview.on(Event.SCROLL_END, this.onListerScrollBottom.bind(this));
        };
        _proto.initView = function initView(params) {
          Log.debug.log('LobbyInviteFriendLayer', 'initView');
          this.resetInviteData();
          if (Utils.curServerTimeSecondstamp - this._freshTime < 60 * 60 && this._AwardCofingInfo.length > 0) {
            this.freshInviteConfigInfo();
          } else {
            this._freshTime = Utils.curServerTimeSecondstamp;
            this.sendInviteFriendConfigReq();
          }
          this.sendInviteFriendAwardReq(this._nowPage);
        };
        _proto.resetInviteData = function resetInviteData() {
          //this._AwardInfo = [];
          this._nowPage = 1;
          this._totalPage = 0;
        };
        _proto.sendInviteFriendConfigReq = function sendInviteFriendConfigReq() {
          // if (this._AwardCofingInfo && this._AwardCofingInfo.length > 0) {
          //     this.freshInviteConfigInfo();
          //     return;
          // }
          HallProxy.inst.sendInviteConfigReq();
        };
        _proto.sendInviteFriendAwardReq = function sendInviteFriendAwardReq(pageId) {
          //if ((pageId <= this._totalPage && this._nowPage != this._totalPage) || this._totalPage == 0)
          //每次进来允许刷新一次， 避免刷新后再邀请，邀请完 还是只有一页， 没法获取到最新数据的情况
          if (pageId <= this._totalPage || this._totalPage == 0) {
            HallProxy.inst.sendInviteAwardListReq(pageId);
            //return;
          }

          //刷新邀请好友信息
          //this.freshInviteFriendInfo();
        };
        // private _AwardCofingInfo: gameproto.hall.IInviteConfigInfo[] = [
        //     {
        //         iType: 1,
        //         iGameNum: 0,
        //         iPumpingNum: 0,
        //         rewards:[{propId:1002, num:2000}]
        //     },
        //     {
        //         iType: 3,
        //         iGameNum: 0,
        //         iPumpingNum: 20,
        //         rewards:[{propId:1002, num:1000}]
        //     },
        //     {
        //         iType: 4,
        //         iGameNum: 3,
        //         iPumpingNum: 0,
        //         rewards:[{propId:1003, num:5000}]
        //     }
        // ];
        _proto.freshInviteConfigInfo = function freshInviteConfigInfo() {
          var _this2 = this;
          //刷新
          if (!this._AwardCofingInfo) return;
          //if (this._AwardCofingInfo.length != 3) return;

          this._AwardCofingInfo.forEach(function (item, index) {
            if (item.iType == LobbyConst.EnumInvite.INVITE_FRIEND) {
              var awardNum = item.rewards[0] ? item.rewards[0].num : 0;
              var strInvite = Utils.formatStr(LanguageManager.get('INVITE_8'), Utils.getThousandShowNumber(awardNum));
              _this2.m_content.m_label_reward_friend.text = strInvite;
              _this2.m_content.m_label_mony_1.text = Utils.formatStr('+%s', Utils.getThousandShowNumber(awardNum)); //
            } else if (item.iType == LobbyConst.EnumInvite.PUMP_WATER) {
              _this2.m_content.m_label_award_2.text = Utils.formatStr(LanguageManager.get('INVITE_3'), Utils.getThousandShowNumber(item.iPumpingNum));
            } else if (item.iType == LobbyConst.EnumInvite.FRIDE_PLAY_GAME) {
              var _awardNum = item.rewards[0] ? item.rewards[0].num : 0;
              _this2.m_content.m_label_game_2.text = Utils.formatStr(LanguageManager.get('INVITE_4'), item.iGameNum);
              _this2.m_content.m_label_game_money.text = Utils.formatStr('+%s', Utils.getThousandShowNumber(_awardNum)); //
            }
          });
        };
        // private _AwardInfo: gameproto.hall.IInviteInfo[] = [
        //     {
        //         nick: 'frank01',
        //         playerId: 100001,
        //         awardTime: 100030,
        //         iType: 1,
        //         rewards: [{ propId: 1002, num: 1000 }]
        //     },
        //     {
        //         nick: 'frank02',
        //         playerId: 100002,
        //         awardTime: 100030,
        //         iType: 2,
        //         rewards: [{ propId: 1002, num: 2000 }]
        //     },
        //     {
        //         nick: 'frank03',
        //         playerId: 100003,
        //         awardTime: 100030,
        //         iType: 3,
        //         rewards: [{ propId: 1002, num: 3000 }]
        //     },
        //     {
        //         nick: 'frank04',
        //         playerId: 100004,
        //         awardTime: 100030,
        //         iType: 4,
        //         rewards: [{ propId: 1003, num: 4000 }]
        //     },
        //     {
        //         nick: 'frank05',
        //         playerId: 100005,
        //         awardTime: 100030,
        //         iType: 4,
        //         rewards: [{ propId: 1003, num: 4000 }]
        //     },
        //     {
        //         nick: 'frank01',
        //         playerId: 100001,
        //         awardTime: 100030,
        //         iType: 1,
        //         rewards: [{ propId: 1002, num: 1000 }]
        //     },
        //     {
        //         nick: 'frank02',
        //         playerId: 100002,
        //         awardTime: 100030,
        //         iType: 2,
        //         rewards: [{ propId: 1002, num: 2000 }]
        //     },
        //     {
        //         nick: 'frank03',
        //         playerId: 100003,
        //         awardTime: 100030,
        //         iType: 3,
        //         rewards: [{ propId: 1002, num: 3000 }]
        //     },
        //     {
        //         nick: 'frank04',
        //         playerId: 100004,
        //         awardTime: 100030,
        //         iType: 4,
        //         rewards: [{ propId: 1003, num: 4000 }]
        //     },
        //     {
        //         nick: 'frank05',
        //         playerId: 100005,
        //         awardTime: 100030,
        //         iType: 4,
        //         rewards: [{ propId: 1003, num: 4000 }]
        //     }
        // ];
        _proto.freshInviteFriendInfo = function freshInviteFriendInfo() {
          var bShowNoRecord = false;
          if (!this._AwardInfo || this._AwardInfo.length <= 0) {
            bShowNoRecord = true;
          } else {
            bShowNoRecord = false;
            //刷新列表
          }

          this.m_content.m_tableview.numItems = this._AwardInfo.length;
          this.m_content.m_no_record_com.visible = bShowNoRecord;
          this.m_content.m_tableview.ensureBoundsCorrect();
          this.m_content.m_tableview.resizeToFit();
        };
        _proto.itemRedererBlindAward = function itemRedererBlindAward(index, node) {
          if (index < 0 || index >= this._AwardInfo.length) return;
          node.setItem(index, this._AwardInfo[index]);
        };
        _proto.onListerScrollBottom = function onListerScrollBottom() {
          if (!this._AwardInfo || this._AwardInfo.length <= 0) return;
          // if (this.m_content.m_tableview.scrollPane.isBottomMost && Utils.curServerTimeSecondstamp > this._lastPageTime+5){
          //     console.log("==isBottomMost====");
          //     this._lastPageTime = Utils.curServerTimeSecondstamp;
          //     let awardInfo = this._AwardInfo;
          //     awardInfo.forEach((item, index)=>{
          //         this._AwardInfo.push(item);
          //     });

          //     this.freshInviteFriendInfo();
          // }
          if (this.m_content.m_tableview.scrollPane.isBottomMost && Utils.curServerTimeSecondstamp > this._lastPageTime + 5) {
            this._lastPageTime = Utils.curServerTimeSecondstamp;
            var iReqPageId;
            if (this._nowPage < this._totalPage || this._totalPage == 0) {
              iReqPageId = this._nowPage + 1;
              this.sendInviteFriendAwardReq(iReqPageId);
            }
          }
        };
        _proto.onBtnInviteFriend = function onBtnInviteFriend() {
          //邀请
          var info = {
            text: LanguageManager.get('INVITE_SHARETXT'),
            params: {
              playerid: RoleData.inst.playerID
            }
          };
          // info.text = "welcom to 87poker";
          // info.params.playerid = RoleData.inst.playerID;
          // console.log(info);
          TelegramDeviceBridge.Instance.shareURL(info);
        };
        _proto.onBtnCopy = function onBtnCopy() {
          var _this3 = this;
          //拷贝邀请链接
          // let appLink = GameConfig.curConfig.telegramShareLink;
          // if (appLink) {
          //     NativeDeviceBridge.Instance.copyTextToClipboard(appLink);
          // }

          var info = {
            text: LanguageManager.get('INVITE_SHARETXT'),
            params: {
              playerid: RoleData.inst.playerID
            }
          };
          var nowShareUrl = TelegramDeviceBridge.Instance.getShareUrl(info);
          if (nowShareUrl && nowShareUrl.length > 0) {
            NativeDeviceBridge.Instance.copyTextToClipboard(nowShareUrl).then(function (rt) {
              if (rt) {
                _this3.grootInst.showCenterTip('TXT_140');
              }
            });
          }
        };
        _proto.onMsgInviteConfigRsp = function onMsgInviteConfigRsp(netdata) {
          if (netdata.isRetSuccess()) {
            // 基于返回码判断是否为成功
            var info = netdata.getData(_cjsExports.hall.MsgInviteConfigRsp); // 获取消息内容

            this._AwardCofingInfo = info.inviteConfigInfo;
            this.freshInviteConfigInfo();
          }
        };
        _proto.onMsgInviteAwardListRsp = function onMsgInviteAwardListRsp(netdata) {
          if (netdata.isRetSuccess()) {
            // 基于返回码判断是否为成功
            var info = netdata.getData(_cjsExports.hall.MsgInviteAwardListRsp); // 获取消息内容
            //
            this._totalPage = info.iTotalPageNum;
            this._nowPage = info.iPageId;
            if (this._nowPage == 1) {
              this._AwardInfo = [];
              if (info.inviteAwardListInfo.length > 0) {
                this._AwardInfo.push({
                  nick: '',
                  playerId: 0,
                  awardTime: 1,
                  iType: 4
                });
              }
            }
            this._AwardInfo = this.addAwardListData(this._AwardInfo, info.inviteAwardListInfo);
            this.freshInviteFriendInfo();
          }
        };
        _proto.addAwardListData = function addAwardListData(data1, data2) {
          var combinedArray = [].concat(data1, data2);
          // 使用 Map 去除 playerId 相同的对象，保留最后一个
          combinedArray.sort(function (a, b) {
            var time1 = a.awardTime;
            var time2 = b.awardTime;
            return time2 - time1;
          });
          return combinedArray;
        };
        _proto.onDestroy = function onDestroy() {};
        return LobbyInviteFriendLayer;
      }(UI_Lobby_Invite_Friend_layer), (_applyDecoratedDescriptor(_class2.prototype, "sendInviteFriendAwardReq", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "sendInviteFriendAwardReq"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgInviteConfigRsp", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgInviteConfigRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgInviteAwardListRsp", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgInviteAwardListRsp"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyItemGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './HallProxy.ts', './LobbyPage.ts', './GameDecorators.ts', './HallData.ts', './GameConst.ts', './gameproto.mjs_cjs=&original=.js', './CocosDevKit.ts', './UI_LobbyItemGame.ts', './EventReporter.ts', './RedHotData.ts', './LobbyItemProfile.ts', './WalletDepositPage.ts', './gameproto.js', './UITools.ts', './NetTypes.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, tween, sys, Event, HallProxy, ELobbyPage, MarkForNetEventListener, CustomFguiClass, MarkForDataBinder, HallData, EBANNER_TYPE, EBANNER_VIEW_ID, GameConst, UI_LobbyItemGame, EventReporter, RedHotData, LobbyItemProfile, WalletDepositPage, _cjsExports, UITools, NetTypes;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      sys = module.sys;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, function (module) {
      ELobbyPage = module.ELobbyPage;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
      MarkForDataBinder = module.MarkForDataBinder;
    }, function (module) {
      HallData = module.HallData;
      EBANNER_TYPE = module.EBANNER_TYPE;
      EBANNER_VIEW_ID = module.EBANNER_VIEW_ID;
    }, function (module) {
      GameConst = module.GameConst;
    }, null, null, function (module) {
      UI_LobbyItemGame = module.default;
    }, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      RedHotData = module.default;
    }, function (module) {
      LobbyItemProfile = module.LobbyItemProfile;
    }, function (module) {
      WalletDepositPage = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      UITools = module.UITools;
    }, function (module) {
      NetTypes = module.NetTypes;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2;
      cclegacy._RF.push({}, "32964I8DzVLkYkU7do1LlWP", "LobbyItemGame", undefined);
      var EGamePage = exports('EGamePage', /*#__PURE__*/function (EGamePage) {
        EGamePage[EGamePage["mygame"] = 0] = "mygame";
        EGamePage[EGamePage["hot"] = 1] = "hot";
        EGamePage[EGamePage["tgp"] = 2] = "tgp";
        EGamePage[EGamePage["cash"] = 3] = "cash";
        EGamePage[EGamePage["mtt"] = 4] = "mtt";
        return EGamePage;
      }({}));
      var LobbyItemGame = exports('LobbyItemGame', (_dec = MarkForNetEventListener(_cjsExports.hall.MsgGetHallInfoRsp.ProtocolID), _dec2 = MarkForDataBinder(), _dec3 = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttFreshInfoRsp.ProtocolID), _dec4 = MarkForNetEventListener(_cjsExports.mtt.MsgMttStatusCast.ProtocolID), _dec5 = MarkForDataBinder(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_LobbyItemGame) {
        _inheritsLoose(LobbyItemGame, _UI_LobbyItemGame);
        function LobbyItemGame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyItemGame.call.apply(_UI_LobbyItemGame, [this].concat(args)) || this;
          _this._tickClock = null;
          _this._inputParam = null;
          _this._pageCB = null;
          _this._inited = false;
          return _this;
        }
        var _proto = LobbyItemGame.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyItemGame.prototype.onConstruct.call(this);
          this.name = 'LobbyItemGame';
          UITools.optimizationScrollPane(this.m_RoomList.scrollPane);
          this.m_BannerList.setVirtualAndLoop();
          this.m_BannerList.itemRenderer = this.bannerItemRender.bind(this);
          this.m_BannerList.on(Event.TOUCH_BEGIN, this.onBannerTouchBegin.bind(this), this);
          this.m_BannerList.on(Event.TOUCH_END, this.onBannerTouchEnd.bind(this), this);
          this.m_BannerList.on(Event.CLICK_ITEM, this.onBannerItemClick.bind(this), this);
          this.m_BannerList.on(Event.SCROLL_END, this.startBannerScrollTick.bind(this), this);
          this.m_GameButtonList.on(Event.CLICK_ITEM, this.gameBtnItemRender.bind(this), this);
          this.m_RoomList.on(Event.SCROLL_END, this.onRoomListScrollEnd, this);
          this.m_RoomList.scrollPane.touchEffect = false;
          // this.m_RoomList.on(fgui.Event.PULL_DOWN_RELEASE, this.onLeftDownCB, this);
          // this.m_RoomList.on(fgui.Event.PULL_UP_RELEASE, this.onRightDownCB, this);
          this.m_GameControl.onChanged(this.onGamePageChange.bind(this), this);
          var touchcmpt = this.m_RoomTouch;
          touchcmpt.setScrollPanel(this.m_RoomRoot);
          touchcmpt.setList(this.m_RoomList);
        };
        _proto.onBannerTouchBegin = function onBannerTouchBegin() {
          if (this._tickClock) this._tickClock.stop();
        };
        _proto.onBannerTouchEnd = function onBannerTouchEnd() {
          this.startBannerScrollTick();
        };
        _proto.onLeftDownCB = function onLeftDownCB() {
          this._pageCB && this._pageCB({
            pid: ELobbyPage.home
          });
        };
        _proto.onRightDownCB = function onRightDownCB() {
          this._pageCB && this._pageCB({
            pid: ELobbyPage.profile
          });
        };
        _proto.initView = function initView(params, cb) {
          this._inputParam = params;
          this._pageCB = cb;
          var head = this.m_HeadGroup.component;
          head.initView();
          this.m_GameControl.selectedIndex = this._inputParam.ppid;
          this.onGameShow(); //第一次设置上不会主动调用pagechange的
        };

        _proto.onGamePageChange = function onGamePageChange() {
          HallData.inst.openGameppid = this.m_GameControl.selectedIndex;
          var idx = this.m_GameControl.selectedIndex;
          if (idx <= 1) {
            this.m_GameButtonList.scrollToView(0, true);
          }
          if (idx >= 3) {
            this.m_GameButtonList.scrollToView(this.m_GameButtonList.numItems - 1, true);
          }
        };
        _proto.gameBtnItemRender = function gameBtnItemRender(item) {
          this.m_GameControl.selectedIndex = Number(item.name);
        };
        _proto.onEnable = function onEnable() {
          _UI_LobbyItemGame.prototype.onEnable.call(this);
          this.startBannerScrollTick();
          if (this._inited) return;
          this._inited = true;
          for (var index = 0; index < GameConst.HALL_ROOM_INFO.length; index++) {
            var element = GameConst.HALL_ROOM_INFO[index];
            this.setRoomPageInfo(element.reqId, element.pageid);
            HallProxy.inst.getHallInfo(element.reqId);
          }
        };
        _proto.onGameShow = function onGameShow() {
          this.onGameChanged();
          this.setBannerView();
        };
        _proto.onRoomListScrollEnd = function onRoomListScrollEnd() {
          if (!this._inputParam) return;
          this._inputParam.ppid = this.m_GameControl.selectedIndex;
          // HallData.inst.setLobbyOpenViewInfo(this._inputParam);
          //获取对应页的房间信息
          var pageid = GameConst.HALL_ROOM_INFO[this._inputParam.ppid].reqId;
          HallProxy.inst.getHallInfo(pageid);
        };
        _proto.onGameChanged = function onGameChanged() {
          if (!this._inputParam) return;
          this._inputParam.ppid = this.m_GameControl.selectedIndex;
          // HallData.inst.setLobbyOpenViewInfo(this._inputParam);
          //获取对应页的房间信息
          var pageid = GameConst.HALL_ROOM_INFO[this._inputParam.ppid].reqId;
          HallProxy.inst.getHallInfo(pageid);
        };
        _proto.startBannerScrollTick = function startBannerScrollTick() {
          tween().to(1, {}, {
            easing: 'quadOut'
          });
          if (this._tickClock) this._tickClock.stop();
          this._tickClock = this.setTimeout(this.bannerScrollCallBack.bind(this), 3);
        };
        _proto.bannerScrollCallBack = function bannerScrollCallBack() {
          if (!this.m_BannerList.scrollPane.touchEffect) return;
          this.m_BannerList.scrollPane.scrollRight(1, true);
        };
        _proto.bannerItemRender = function bannerItemRender(index, item) {
          if (!HallData.inst.bannerInfo || HallData.inst.bannerInfo.length <= index) return;
          var info = HallData.inst.bannerInfo[index];
          item.m_cmpt.icon = info.pic;
          item.data = info;
        };
        _proto.onDisable = function onDisable() {
          if (this._tickClock) this._tickClock.stop();
          this._tickClock = undefined;
          _UI_LobbyItemGame.prototype.onDisable.call(this);
        };
        _proto.onBannerItemClick = function onBannerItemClick(item) {
          var info = item.data;
          if (info.act_type == EBANNER_TYPE.url) {
            if (!info.act_param || info.act_param == '') return;
            sys.openURL(info.act_param);
          } else if (info.act_type == EBANNER_TYPE.windows) {
            var viewidx = info.act_param;
            this.gotoView(viewidx);
          } else if (info.act_type == EBANNER_TYPE.MTT) ;
          EventReporter.emit(EventReporter.Event.mixpanel.BANNER_CLICK, {
            BannerID: item.id
          });
        };
        _proto.switchPPage = function switchPPage(ppid) {
          this.m_GameControl.selectedIndex = ppid;
        };
        _proto.gotoView = function gotoView(vid) {
          switch (parseInt(vid)) {
            case EBANNER_VIEW_ID.task:
            case EBANNER_VIEW_ID.club:
              break;
            case EBANNER_VIEW_ID.mtt:
              this.switchPPage(EGamePage.mtt);
              break;
            case EBANNER_VIEW_ID.nlh:
              this.switchPPage(EGamePage.tgp);
              break;
            case EBANNER_VIEW_ID.mygame:
              this.switchPPage(EGamePage.mygame);
              break;
            case EBANNER_VIEW_ID.ranking:
              //无排行榜
              break;
            case EBANNER_VIEW_ID.profile:
              // this._pageCB && this._pageCB({ pid: ELobbyPage.profile });
              LobbyItemProfile.create(this).showOn(this.grootInst);
              break;
            case EBANNER_VIEW_ID.wallet:
              WalletDepositPage.create(this).showOn(this.grootInst);
              break;
          }
        };
        _proto.setRoomPageInfo = function setRoomPageInfo(pageid, ppid) {
          var data = HallData.inst.getHallInfoByPid(pageid);
          if (!data) return;
          var view = this.m_RoomList.getChildAt(ppid);
          if (!view) return;
          view.setItem(ppid, data);
        };
        _proto.onMsgGetHallInfoRsp = function onMsgGetHallInfoRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.hall.MsgGetHallInfoRsp);
            HallData.inst.insertHallInfo(info.pageId, info);
            for (var i = 0; i < GameConst.HALL_ROOM_INFO.length; i++) {
              var element = GameConst.HALL_ROOM_INFO[i];
              if (element.reqId == info.pageId) {
                this.setRoomPageInfo(info.pageId, element.pageid);
                break;
              }
            }
          }
        };
        _proto.setBannerView = function setBannerView() {
          var info = HallData.inst.bannerInfo;
          if (!info) return;
          this.m_BannerList.numItems = info.length;
          this.m_BannerList.scrollPane.touchEffect = info.length > 1;
        };
        _proto.onMsgGetMttFreshInfoRsp = function onMsgGetMttFreshInfoRsp(netdata) {
          if (!this.node.active) return;
          if (netdata.isRetSuccess()) {
            for (var index = 0; index < GameConst.HALL_ROOM_INFO.length; index++) {
              var element = GameConst.HALL_ROOM_INFO[index];
              this.setRoomPageInfo(element.reqId, element.pageid);
              HallProxy.inst.getHallInfo(element.reqId);
            }
          }
        };
        _proto.setMyGameRedHot = function setMyGameRedHot() {
          var mygamenode = this.m_GameButtonList.getChildAt(0);
          if (mygamenode && mygamenode.node.active) {
            mygamenode.m_RedHotControl.selectedIndex = RedHotData.inst.mygameRedHot ? 1 : 0;
          }
        };
        _proto.onNetStateChange = function onNetStateChange(state) {
          switch (state) {
            case NetTypes.ENetNodeState.connected:
              {
                this.onGameShow();
              }
              break;
          }
        };
        return LobbyItemGame;
      }(UI_LobbyItemGame), (_applyDecoratedDescriptor(_class2.prototype, "onMsgGetHallInfoRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetHallInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setBannerView", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "setBannerView"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp", [_dec3, _dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setMyGameRedHot", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "setMyGameRedHot"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyItemHome.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_LobbyItemHome.ts', './GameConst.ts', './HallProxy.ts', './CocosDevKit.ts', './gameproto.mjs_cjs=&original=.js', './HallData.ts', './gameproto.js', './CDKDecorators.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, MarkForNetEventListener, CustomFguiClass, UI_LobbyItemHome, GameConst, HallProxy, HallData, _cjsExports, SafeHandler;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_LobbyItemHome = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, null, null, function (module) {
      HallData = module.HallData;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      SafeHandler = module.SafeHandler;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2;
      cclegacy._RF.push({}, "500e2beQFlHurOcX1aOpSTv", "LobbyItemHome", undefined);
      var LobbyItemHome = exports('LobbyItemHome', (_dec = MarkForNetEventListener(_cjsExports.hall.MsgGetHallInfoRsp.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttFreshInfoRsp.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.mtt.MsgMttStatusCast.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_LobbyItemHome) {
        _inheritsLoose(LobbyItemHome, _UI_LobbyItemHome);
        function LobbyItemHome() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyItemHome.call.apply(_UI_LobbyItemHome, [this].concat(args)) || this;
          _this._TGPFreeGoldView = null;
          _this._LobbyHomeGame = null;
          _this._LobbyHomeTask = null;
          _this._pageid = GameConst.EHALL_PAGE_TYPE.HOT;
          return _this;
        }
        var _proto = LobbyItemHome.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyItemHome.prototype.onConstruct.call(this);
          this.name = 'LobbyItemHome';
          this._TGPFreeGoldView = this.m_list.getChild('TGPFreeGoldView');
          this._TGPFreeGoldView.setHomeDelegate(this);
          this._LobbyHomeGame = this.m_list.getChild('LobbyHomeGame');
          this._LobbyHomeTask = this.m_list.getChild('LobbyHomeTask');
        };
        _proto.initView = function initView(params) {
          var head = this.m_HeadGroup.component;
          head.initView();
          this._TGPFreeGoldView.initView();
          this._LobbyHomeTask.initView();
          //获取推荐页的房间信息
          HallProxy.inst.getHallInfo(this._pageid, SafeHandler(this.onMsgGetHallInfoRsp, this));
        };
        _proto.onMsgGetHallInfoRsp = function onMsgGetHallInfoRsp(netdata) {
          if (netdata.isRetSuccess()) {
            this._LobbyHomeGame.initView();
          }
        };
        _proto.onMsgGetHallInfoRspCB = function onMsgGetHallInfoRspCB(netdata) {
          var info = netdata.getData(_cjsExports.hall.MsgGetHallInfoRsp);
          HallData.inst.insertHallInfo(info.pageId, info);
          if (info.pageId == GameConst.EHALL_PAGE_TYPE.HOT) {
            this._LobbyHomeGame.initView();
          }
        };
        _proto.onMsgGetMttFreshInfoRsp = function onMsgGetMttFreshInfoRsp(netdata) {
          if (!this.node.active) return;
          if (netdata.isRetSuccess()) {
            HallProxy.inst.getHallInfo(this._pageid, SafeHandler(this.onMsgGetHallInfoRsp, this));
          }
        };
        _proto.onMsgMttStatusCast = function onMsgMttStatusCast(netdata) {
          if (!this.node.active) return;
          if (netdata.isRetSuccess()) {
            HallProxy.inst.getHallInfo(this._pageid, SafeHandler(this.onMsgGetHallInfoRsp, this));
          }
        };
        _proto.scroll2Task = function scroll2Task() {
          var _this2 = this;
          this.setTimeout(function () {
            _this2.m_list.scrollToView(2, true);
          }, 0.01);
        };
        return LobbyItemHome;
      }(UI_LobbyItemHome), (_applyDecoratedDescriptor(_class2.prototype, "onMsgGetHallInfoRspCB", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetHallInfoRspCB"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgMttStatusCast", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgMttStatusCast"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyItemMarket.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LobbyPage.ts', './GameDecorators.ts', './UI_LobbyItemMarket.ts'], function (exports) {
  var _inheritsLoose, cclegacy, ELobbyPage, CustomFguiClass, UI_LobbyItemMarket;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ELobbyPage = module.ELobbyPage;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_LobbyItemMarket = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "6ba59zmPrRMjYUVvClrXNNa", "LobbyItemMarket", undefined);
      //市场界面页签
      var EMarket_Page_Index = exports('EMarket_Page_Index', /*#__PURE__*/function (EMarket_Page_Index) {
        EMarket_Page_Index[EMarket_Page_Index["buy"] = 0] = "buy";
        EMarket_Page_Index[EMarket_Page_Index["sell"] = 1] = "sell";
        EMarket_Page_Index[EMarket_Page_Index["myorder"] = 2] = "myorder";
        return EMarket_Page_Index;
      }({}));
      var LobbyItemMarket = exports('LobbyItemMarket', CustomFguiClass(_class = /*#__PURE__*/function (_UI_LobbyItemMarket) {
        _inheritsLoose(LobbyItemMarket, _UI_LobbyItemMarket);
        function LobbyItemMarket() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyItemMarket.call.apply(_UI_LobbyItemMarket, [this].concat(args)) || this;
          _this.inputParams = null;
          return _this;
        }
        var _proto = LobbyItemMarket.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyItemMarket.prototype.onConstruct.call(this);
          this.name = 'LobbyItemMarket';
          this.m_BtnBuy.onClick(this.onPageChanged.bind(this, {
            ppid: EMarket_Page_Index.buy
          }), this);
          this.m_BtnSell.onClick(this.onPageChanged.bind(this, {
            ppid: EMarket_Page_Index.sell
          }), this);
          this.m_BtnMyOrder.onClick(this.onPageChanged.bind(this, {
            ppid: EMarket_Page_Index.myorder
          }), this);
          this.m_pageControl.onChanged(this.onPageControlChanged.bind(this), this); //不通过切页签的方式 这样太慢了
        };

        _proto.initView = function initView(params) {
          this.inputParams = params;
          this.setDefaultPageIndex();
          var head = this.m_HeadGroup.component;
          head.initView(true);
          this.onPageControlChanged();
          this.onPageChanged();
        };
        _proto.setDefaultPageIndex = function setDefaultPageIndex() {
          if (!this.inputParams) {
            this.inputParams = {
              pid: ELobbyPage.market
            };
          }
          this.inputParams.ppid = this.inputParams.ppid || EMarket_Page_Index.buy;
        };
        _proto.onPageChanged = function onPageChanged() {
          var view = this.m_list.getChildAt(this.inputParams.ppid);
          view.initView();
        };
        _proto.onPageControlChanged = function onPageControlChanged() {
          this.inputParams.ppid = this.m_pageControl.selectedIndex;
        };
        return LobbyItemMarket;
      }(UI_LobbyItemMarket)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyItemProfile.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_LobbyItemProfile.ts', './fairygui.mjs', './ConfirmBox.ts', './LanguageManage.ts', './Utils.ts', './GameDecorators.ts', './HandCardReviewPage.ts', './ProfileLanguagePage.ts', './NativeDeviceBridge.ts', './GameConfig.ts', './GameWindowBase.ts', './RoleData.ts', './WalletDepositPage.ts', './WalletWithdrawPage.ts', './WalletHistoryPage.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, director, HorizontalTextAlignment, UI_LobbyItemProfile, Event, ConfirmBox, LanguageManager, Utils, MarkForDataBinder, HandCardReviewPage, ProfileLanguagePage, NativeDeviceBridge, GameConfig, EEnterType, GameWindowBase, RoleData, WalletDepositPage, WalletWithdrawPage, WalletHistoryPage;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      HorizontalTextAlignment = module.HorizontalTextAlignment;
    }, function (module) {
      UI_LobbyItemProfile = module.default;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      MarkForDataBinder = module.MarkForDataBinder;
    }, function (module) {
      HandCardReviewPage = module.HandCardReviewPage;
    }, function (module) {
      ProfileLanguagePage = module.ProfileLanguagePage;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      WalletDepositPage = module.default;
    }, function (module) {
      WalletWithdrawPage = module.default;
    }, function (module) {
      WalletHistoryPage = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "d5091SqZCtO44A7EYu5lhUb", "LobbyItemProfile", undefined);
      var PROFILE = /*#__PURE__*/function (PROFILE) {
        PROFILE[PROFILE["HandReview"] = 0] = "HandReview";
        PROFILE[PROFILE["Customer"] = 1] = "Customer";
        PROFILE[PROFILE["AboutUs"] = 2] = "AboutUs";
        PROFILE[PROFILE["Language"] = 3] = "Language";
        PROFILE[PROFILE["Settings"] = 4] = "Settings";
        PROFILE[PROFILE["Package"] = 5] = "Package";
        return PROFILE;
      }(PROFILE || {});
      var LobbyItemProfile = exports('LobbyItemProfile', (_dec = MarkForDataBinder(), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(LobbyItemProfile, _GameWindowBase);
        function LobbyItemProfile() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_LobbyItemProfile;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.horizontal;
          _this.pageName = 'LobbyItemProfile';
          _this._isInited = false;
          return _this;
        }
        LobbyItemProfile.create = function create(from) {
          return new LobbyItemProfile(from);
        };
        var _proto = LobbyItemProfile.prototype;
        _proto.onInit = /*#__PURE__*/function () {
          var _onInit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.name = 'LobbyItemProfile';
                  this.pane.m_debugArea.onClick(this.onDebugAreaClick, this);
                  this.initView();
                case 3:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onInit() {
            return _onInit.apply(this, arguments);
          }
          return onInit;
        }();
        _proto.initView = function initView() {
          if (this._isInited) return;
          this._isInited = true;
          this.pane.m_SettingItems.on(Event.CLICK_ITEM, this.onSettingItemClick, this);
          this.pane.m_BtnDeposit.onClick(this.onBtnDepositClick, this);
          this.pane.m_BtnWithDraw.onClick(this.onBtnWithDrawClick, this);
          this.pane.m_BtnHistory.onClick(this.onBtnHistoryClick, this);
        };
        _proto.onBtnDepositClick = function onBtnDepositClick() {
          WalletDepositPage.create(this).showOn(this.grootInst);
        };
        _proto.onBtnWithDrawClick = function onBtnWithDrawClick() {
          WalletWithdrawPage.create(this).showOn(this.grootInst);
        };
        _proto.onBtnHistoryClick = function onBtnHistoryClick() {
          WalletHistoryPage.create(this).showOn(this.grootInst);
        };
        _proto.onDebugAreaClick = function onDebugAreaClick() {
          if (Utils.getQuickClick('DebugArea', 500) == 5) {
            var btnNode = director.getScene().getChildByPath('Canvas/DebugButton');
            if (btnNode) {
              btnNode.active = !btnNode.active;
            }
          }
        };
        _proto.setWallet = function setWallet() {
          this.pane.m_TextWallet.text = Utils.toFormat(RoleData.inst.cash, 2, true);
        };
        _proto.onSettingItemClick = function onSettingItemClick(item) {
          var idx = this.pane.m_SettingItems.getChildIndex(item);
          switch (idx) {
            case PROFILE.HandReview:
              HandCardReviewPage.create(this).showOn(this.grootInst);
              break;
            case PROFILE.AboutUs:
              {
                var box = ConfirmBox.create(this);
                box.setInputParams({
                  title: LanguageManager.get('TOAST_INFO'),
                  content: "Version:" + (NativeDeviceBridge.Instance.appInfo.appversion || '0.0.0'),
                  clickOutsideClose: true,
                  buttonNum: 1,
                  align: HorizontalTextAlignment.CENTER,
                  enableContentClick: true
                });
                box.addHook({
                  onContent: function onContent() {
                    NativeDeviceBridge.Instance.openURL(GameConfig.curConfig.aboutUsUrl);
                  }
                });
                box.onClick(function () {
                  box.hide();
                }, this);
                box.showOn(this.grootInst);
              }
              break;
            case PROFILE.Customer:
              {
                var _box = ConfirmBox.create(this);
                _box.setInputParams({
                  title: LanguageManager.get('TOAST_INFO'),
                  content: LanguageManager.get('UP_1') + "\n[color=#1EFF80]" + GameConfig.serverChanelInfo.feedback_url + "[/color]",
                  clickOutsideClose: true,
                  buttonNum: 1,
                  align: HorizontalTextAlignment.CENTER,
                  enableContentClick: true
                });
                _box.addHook({
                  onContent: function onContent() {
                    NativeDeviceBridge.Instance.openURL(GameConfig.serverChanelInfo.feedback_url);
                  }
                });
                _box.onClick(function () {
                  _box.hide();
                }, this);
                _box.showOn(this.grootInst);
              }
              break;
            case PROFILE.Language:
              ProfileLanguagePage.create(this).showOn(this.grootInst);
              break;
          }
        };
        return LobbyItemProfile;
      }(GameWindowBase), _applyDecoratedDescriptor(_class.prototype, "setWallet", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "setWallet"), _class.prototype), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyMarketBuy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './CocosDevKit.ts', './TradeData.ts', './GameDecorators.ts', './TradeProxy.ts', './UI_LobbyMarketBuy.ts', './fairygui.mjs', './MarketBuyDialog.ts', './LanguageManage.ts', './UITools.ts', './gameproto.js'], function (exports) {
  var _inheritsLoose, cclegacy, ETradeBookSort, TradeData, ETradeBookType, CustomFguiClass, TradeProxy, UI_LobbyMarketBuy, Event, MarketBuyDialog, LanguageManager, UITools, _cjsExports;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      ETradeBookSort = module.ETradeBookSort;
      TradeData = module.TradeData;
      ETradeBookType = module.ETradeBookType;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      TradeProxy = module.TradeProxy;
    }, function (module) {
      UI_LobbyMarketBuy = module.default;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      MarketBuyDialog = module.MarketBuyDialog;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      UITools = module.UITools;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "73448HOFZ9GB596kAXLpwwM", "LobbyMarketBuy", undefined);
      var LobbyMarketBuy = exports('LobbyMarketBuy', CustomFguiClass(_class = /*#__PURE__*/function (_UI_LobbyMarketBuy) {
        _inheritsLoose(LobbyMarketBuy, _UI_LobbyMarketBuy);
        function LobbyMarketBuy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyMarketBuy.call.apply(_UI_LobbyMarketBuy, [this].concat(args)) || this;
          _this._sortType = ETradeBookSort.price;
          _this._fromId = '0';
          _this._TradeBookList = [];
          return _this;
        }
        var _proto = LobbyMarketBuy.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyMarketBuy.prototype.onConstruct.call(this);
          this.name = 'LobbyMarketBuy';
          this.onLanguageChange();
          this.m_list.setVirtual();
          UITools.optimizationScrollPane(this.m_list.scrollPane);
          this.m_list.itemRenderer = this.roomItemRender.bind(this);
          this.m_list.on(Event.CLICK_ITEM, this.onItemClick, this);
          this.m_BtnQuantity.onClick(this.onListSort.bind(this, ETradeBookSort.quantity), this);
          this.m_BtnPrice.onClick(this.onListSort.bind(this, ETradeBookSort.price), this);
          this.m_BtnTotal.onClick(this.onListSort.bind(this, ETradeBookSort.total), this);
          this.m_list.on(Event.PULL_UP_RELEASE, this.onPullUpToRefresh, this);
          this.m_list.on(Event.PULL_DOWN_RELEASE, this.onPullDownToRefresh, this);
          this.m_SortControl.selectedIndex = this._sortType;
        };
        _proto.onLanguageChange = function onLanguageChange() {
          this.m_BtnPriceTxt.text = LanguageManager.get('MARKET_PRICE') + "($)";
          this.m_BtnTotalTxt.text = LanguageManager.get('MARKET_TOTAL') + "($)";
        };
        _proto.onPullUpToRefresh = function onPullUpToRefresh() {
          this._fromId = TradeData.inst.getLastOrderId(ETradeBookType.buy, this._sortType);
          this.initView();
        };
        _proto.onPullDownToRefresh = function onPullDownToRefresh() {
          this._fromId = '0';
          this.initView();
        };
        _proto.initView = function initView() {
          TradeProxy.inst.getMarketInfo(ETradeBookType.buy, this._sortType, this._fromId, this.getMarketInfoCB.bind(this));
        };
        _proto.onListSort = function onListSort(sorttype) {
          this._sortType = sorttype;
          this.m_SortControl.selectedIndex = sorttype;
          this._fromId = '0';
          this.initView();
        };
        _proto.getMarketInfoCB = function getMarketInfoCB(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.trade.MsgTradeBookRsp);
            this._TradeBookList = TradeData.inst.getBuyOrder(info.sort);
            this._sortType = info.sort;
            this.m_list.numItems = this._TradeBookList.length;
            this.m_NoneGroup.visible = this._TradeBookList.length <= 0;
          }
        };
        _proto.roomItemRender = function roomItemRender(index, item) {
          if (index < 0 || index > this._TradeBookList.length) return;
          var data = this._TradeBookList[index];
          item.setData(data);
        };
        _proto.onItemClick = function onItemClick(item) {
          var _this2 = this;
          var view = MarketBuyDialog.create(this);
          view.addHook({
            onPageDestroy: function onPageDestroy() {
              _this2.initView();
            }
          });
          view.setInputParams(item._data);
          view.showOn(this.grootInst);
        };
        return LobbyMarketBuy;
      }(UI_LobbyMarketBuy)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyMarketMyOrder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './TradeData.ts', './GameDecorators.ts', './TradeProxy.ts', './UI_LobbyMarketMyOrder.ts', './MarketCreateOrderDialog.ts', './fairygui.mjs', './MarketBuyDetailDialog.ts', './MarketSellDetailDialog.ts', './LanguageManage.ts', './UITools.ts'], function (exports) {
  var _inheritsLoose, cclegacy, ETradeBookSort, TradeData, ETradeBookType, CustomFguiClass, TradeProxy, UI_LobbyMarketMyOrder, MarketCreateOrderDialog, Event, MarketBuyDetailDialog, MarketSellDetailDialog, LanguageManager, UITools;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      ETradeBookSort = module.ETradeBookSort;
      TradeData = module.TradeData;
      ETradeBookType = module.ETradeBookType;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      TradeProxy = module.TradeProxy;
    }, function (module) {
      UI_LobbyMarketMyOrder = module.default;
    }, function (module) {
      MarketCreateOrderDialog = module.MarketCreateOrderDialog;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      MarketBuyDetailDialog = module.MarketBuyDetailDialog;
    }, function (module) {
      MarketSellDetailDialog = module.MarketSellDetailDialog;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      UITools = module.UITools;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "55645McGLxDfKiWqP1dfw2T", "LobbyMarketMyOrder", undefined);
      var LobbyMarketMyOrder = exports('LobbyMarketMyOrder', CustomFguiClass(_class = /*#__PURE__*/function (_UI_LobbyMarketMyOrde) {
        _inheritsLoose(LobbyMarketMyOrder, _UI_LobbyMarketMyOrde);
        function LobbyMarketMyOrder() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyMarketMyOrde.call.apply(_UI_LobbyMarketMyOrde, [this].concat(args)) || this;
          _this._sortType = ETradeBookSort.nosort;
          _this._TradeBookList = [];
          return _this;
        }
        var _proto = LobbyMarketMyOrder.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyMarketMyOrde.prototype.onConstruct.call(this);
          this.name = 'LobbyMarketMyOrder';
          this.onLanguageChange();
          this.m_list.setVirtual();
          UITools.optimizationScrollPane(this.m_list.scrollPane);
          this.m_list.itemRenderer = this.roomItemRender.bind(this);
          this.m_list.on(Event.CLICK_ITEM, this.onItemClick, this);
          this.m_BtnCreateOrder.onClick(this.onCreateOrder.bind(this), this);

          // this.m_BtnQuantity.onClick(this.onListSort.bind(this, ETradeBookSort.quantity), this);
          // this.m_BtnPrice.onClick(this.onListSort.bind(this, ETradeBookSort.price), this);
          // this.m_BtnTotal.onClick(this.onListSort.bind(this, ETradeBookSort.total), this);

          this.m_SortControl.selectedIndex = this._sortType;
        };
        _proto.onLanguageChange = function onLanguageChange() {
          this.m_BtnPriceTxt.text = LanguageManager.get('MARKET_PRICE') + "($)";
          this.m_BtnTotalTxt.text = LanguageManager.get('MARKET_TOTAL') + "($)";
        };
        _proto.initView = function initView() {
          TradeProxy.inst.getMyOrders(this.getMyOrdersCB.bind(this));
        };
        _proto.onListSort = function onListSort(sorttype) {
          this._sortType = sorttype;
          this.m_SortControl.selectedIndex = sorttype;
          this.initView();
        };
        _proto.getMyOrdersCB = function getMyOrdersCB(netdata) {
          if (netdata.isRetSuccess()) {
            this._TradeBookList = TradeData.inst.MyOrders;
            this.m_list.numItems = this._TradeBookList.length;
            this.m_NoneGroup.visible = this._TradeBookList.length <= 0;
          }
        };
        _proto.roomItemRender = function roomItemRender(index, item) {
          if (index < 0 || index > this._TradeBookList.length) return;
          var data = this._TradeBookList[index];
          item.setData(index, data);
        };
        _proto.onCreateOrder = function onCreateOrder() {
          var _this2 = this;
          var view = MarketCreateOrderDialog.create(this);
          view.addHook({
            onPageDestroy: function onPageDestroy() {
              _this2.initView();
            }
          });
          view.showOn(this.grootInst);
        };
        _proto.onItemClick = function onItemClick(item) {
          var _this3 = this;
          var data = item._data;
          if (data.side == ETradeBookType.sell) {
            var view = MarketBuyDetailDialog.create(this);
            view.addHook({
              onPageDestroy: function onPageDestroy() {
                _this3.initView();
              }
            });
            view.setInputParams(item._data);
            view.showOn(this.grootInst);
          } else if (data.side == ETradeBookType.buy) {
            var _view = MarketSellDetailDialog.create(this);
            _view.addHook({
              onPageDestroy: function onPageDestroy() {
                _this3.initView();
              }
            });
            _view.setInputParams(item._data);
            _view.showOn(this.grootInst);
          }
        };
        return LobbyMarketMyOrder;
      }(UI_LobbyMarketMyOrder)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyMarketSell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './CocosDevKit.ts', './TradeData.ts', './GameDecorators.ts', './TradeProxy.ts', './UI_LobbyMarketSell.ts', './fairygui.mjs', './MarketSellDialog.ts', './LanguageManage.ts', './UITools.ts', './gameproto.js'], function (exports) {
  var _inheritsLoose, cclegacy, ETradeBookSort, TradeData, ETradeBookType, CustomFguiClass, TradeProxy, UI_LobbyMarketSell, Event, MarketSellDialog, LanguageManager, UITools, _cjsExports;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      ETradeBookSort = module.ETradeBookSort;
      TradeData = module.TradeData;
      ETradeBookType = module.ETradeBookType;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      TradeProxy = module.TradeProxy;
    }, function (module) {
      UI_LobbyMarketSell = module.default;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      MarketSellDialog = module.MarketSellDialog;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      UITools = module.UITools;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "82d2dez6OhFSpjlbKgBeuhV", "LobbyMarketSell", undefined);
      var LobbyMarketSell = exports('LobbyMarketSell', CustomFguiClass(_class = /*#__PURE__*/function (_UI_LobbyMarketSell) {
        _inheritsLoose(LobbyMarketSell, _UI_LobbyMarketSell);
        function LobbyMarketSell() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_LobbyMarketSell.call.apply(_UI_LobbyMarketSell, [this].concat(args)) || this;
          _this._sortType = ETradeBookSort.price;
          _this._fromId = '0';
          _this._TradeBookList = [];
          return _this;
        }
        var _proto = LobbyMarketSell.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_LobbyMarketSell.prototype.onConstruct.call(this);
          this.name = 'LobbyMarketSell';
          this.onLanguageChange();
          this.m_list.setVirtual();
          UITools.optimizationScrollPane(this.m_list.scrollPane);
          this.m_list.itemRenderer = this.roomItemRender.bind(this);
          this.m_list.on(Event.CLICK_ITEM, this.onItemClick, this);
          this.m_BtnQuantity.onClick(this.onListSort.bind(this, ETradeBookSort.quantity), this);
          this.m_BtnPrice.onClick(this.onListSort.bind(this, ETradeBookSort.price), this);
          this.m_BtnTotal.onClick(this.onListSort.bind(this, ETradeBookSort.total), this);
          this.m_list.on(Event.PULL_UP_RELEASE, this.onPullUpToRefresh, this);
          this.m_list.on(Event.PULL_DOWN_RELEASE, this.onPullDownToRefresh, this);
          this.m_SortControl.selectedIndex = this._sortType;
        };
        _proto.onLanguageChange = function onLanguageChange() {
          this.m_BtnPriceTxt.text = LanguageManager.get('MARKET_PRICE') + "($)";
          this.m_BtnTotalTxt.text = LanguageManager.get('MARKET_TOTAL') + "($)";
        };
        _proto.onPullUpToRefresh = function onPullUpToRefresh() {
          this._fromId = TradeData.inst.getLastOrderId(ETradeBookType.sell, this._sortType);
          this.initView();
        };
        _proto.onPullDownToRefresh = function onPullDownToRefresh() {
          this._fromId = '0';
          this.initView();
        };
        _proto.initView = function initView(fromId) {
          TradeProxy.inst.getMarketInfo(ETradeBookType.sell, this._sortType, this._fromId, this.getMarketInfoCB.bind(this));
        };
        _proto.onListSort = function onListSort(sorttype) {
          this._sortType = sorttype;
          this.m_SortControl.selectedIndex = sorttype;
          this._fromId = '0';
          this.initView();
        };
        _proto.getMarketInfoCB = function getMarketInfoCB(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.trade.MsgTradeBookRsp);
            this._TradeBookList = TradeData.inst.getSellOrder(info.sort);
            this._sortType = info.sort;
            this.m_list.numItems = this._TradeBookList.length;
            this.m_NoneGroup.visible = this._TradeBookList.length <= 0;
          }
        };
        _proto.roomItemRender = function roomItemRender(index, item) {
          if (index < 0 || index > this._TradeBookList.length) return;
          var data = this._TradeBookList[index];
          item.setData(data);
        };
        _proto.onItemClick = function onItemClick(item) {
          var _this2 = this;
          var view = MarketSellDialog.create(this);
          view.addHook({
            onPageDestroy: function onPageDestroy() {
              _this2.initView();
            }
          });
          view.setInputParams(item._data);
          view.showOn(this.grootInst);
        };
        return LobbyMarketSell;
      }(UI_LobbyMarketSell)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_LobbyPage.ts', './GameWindowBase.ts', './Logger.ts', './GameDecorators.ts', './PageEvent.ts', './gameproto.mjs_cjs=&original=.js', './CDKDecorators.ts', './TexasGamePage.ts', './HallProxy.ts', './LanguageManage.ts', './GameConst.ts', './TexasProxy.ts', './HallData.ts', './EventReporter.ts', './LobbyBoardLayer.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, sys, game, Game, UI_LobbyPage, EEnterType, GameWindowBase, Log, MarkForPageEventListener, EPageEvent, SafeTimeInterval, SafeHandler, TexasGamePage, HallProxy, LanguageManager, GameConst, TexasProxy, HallData, EventReporter, LobbyBoardLayer, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      game = module.game;
      Game = module.Game;
    }, function (module) {
      UI_LobbyPage = module.default;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      MarkForPageEventListener = module.MarkForPageEventListener;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, null, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
      SafeHandler = module.SafeHandler;
    }, function (module) {
      TexasGamePage = module.TexasGamePage;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      TexasProxy = module.TexasProxy;
    }, function (module) {
      HallData = module.HallData;
    }, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      LobbyBoardLayer = module.LobbyBoardLayer;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class;
      cclegacy._RF.push({}, "b6cf1ZKfzJIC5FmbX6+XJPM", "LobbyPage", undefined);
      var ELobbyPage = exports('ELobbyPage', /*#__PURE__*/function (ELobbyPage) {
        ELobbyPage[ELobbyPage["home"] = 0] = "home";
        ELobbyPage[ELobbyPage["game"] = 1] = "game";
        ELobbyPage[ELobbyPage["invite"] = 2] = "invite";
        ELobbyPage[ELobbyPage["market"] = 3] = "market";
        ELobbyPage[ELobbyPage["profile"] = 4] = "profile";
        return ELobbyPage;
      }({}));
      var LobbyPage = exports('LobbyPage', (_dec = MarkForPageEventListener(EPageEvent.LOGIN_PROCESS_COMPLETED), _dec2 = MarkForPageEventListener(EPageEvent.ROOM_LIST_ITEM_CLICK), _dec3 = SafeTimeInterval(1000), _dec4 = MarkForPageEventListener(EPageEvent.ENTER_MATCH), _dec5 = SafeTimeInterval(1000), _dec6 = MarkForPageEventListener(EPageEvent.JUMP_TO_LOBBY_PAGE), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(LobbyPage, _GameWindowBase);
        function LobbyPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          //列表bind
          _this.ArryLobbyPageItem = [];
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_LobbyPage;
          _this.removeUnderlyingWindow = true;
          _this.gestureCloseWindow = false;
          _this.enterType = EEnterType.none;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'LobbyPage';
          _this.enterGameLoading = void 0;
          return _this;
        }
        LobbyPage.create = function create(from) {
          return new LobbyPage(from);
        };
        var _proto = LobbyPage.prototype;
        _proto.setDefaultParam = function setDefaultParam(bcache) {
          if (!this.inputParams) {
            this.inputParams = {
              pid: ELobbyPage.home
            };
          }
          switch (this.inputParams.pid) {
            case ELobbyPage.home:
              if (!this.inputParams.ppid) this.inputParams.ppid = 1;
              break;
            case ELobbyPage.game:
              if (!this.inputParams.ppid) this.inputParams.ppid = HallData.inst.openGameppid;
              break;
            case ELobbyPage.market:
              if (!this.inputParams.ppid) this.inputParams.ppid = 0;
              //这里做个异常处理
              if (this.inputParams.ppid < 0 || this.inputParams.ppid > 2) this.inputParams.ppid = 0;
              break;
          }
        };
        _proto.onShown = function onShown() {
          _GameWindowBase.prototype.onShown.call(this);
          setTimeout(function () {
            if (!sys.isNative && window.__removeCustomLoadingView) {
              window.__removeCustomLoadingView();
            }
          }, 100);
        };
        _proto.onInit = function onInit() {
          Log.debug.log('LobbyPage', 'onInit');
          this.ArryLobbyPageItem = [{
            iPage: ELobbyPage.home,
            iClass: this.pane.getChild('LobbyItem0'),
            item: 'LobbyItemHome'
          }, {
            iPage: ELobbyPage.game,
            iClass: this.pane.getChild('LobbyItem1'),
            item: 'LobbyItemGame'
          }, {
            iPage: ELobbyPage.invite,
            iClass: this.pane.getChild('LobbyItem2'),
            item: 'LobbyInviteFriendLayer'
          }, {
            iPage: ELobbyPage.market,
            iClass: this.pane.getChild('LobbyItem3'),
            item: 'LobbyItemMarket'
          }];
          this.pane.m_BtnHome.onClick(this.onBtnPageChanged.bind(this, {
            pid: ELobbyPage.home
          }), this);
          this.pane.m_BtnInvitePage.onClick(this.onBtnPageChanged.bind(this, {
            pid: ELobbyPage.invite
          }), this);
          this.pane.m_BtnGame.onClick(this.onBtnPageChanged.bind(this, {
            pid: ELobbyPage.game
          }), this);
          this.pane.m_BtnMarket.onClick(this.onBtnPageChanged.bind(this, {
            pid: ELobbyPage.market
          }), this);
          game.on(Game.EVENT_SHOW, this.onPageChange.bind(this), this);
          var lastInfo = HallData.inst.lobbyOpenViewInfo;
          if (lastInfo) {
            this.inputParams = {
              pid: lastInfo.pid,
              ppid: lastInfo.ppid,
              clubid: lastInfo.clubid,
              data: lastInfo.data
            };
          } else {
            this.setDefaultParam();
          }
          this.onPageChange();
          this.enterGameLoading = this.grootInst.createLoadingItem(this);
        };
        _proto.onDestroy = function onDestroy() {
          HallData.inst.setLobbyOpenViewInfo(this.inputParams);
          _GameWindowBase.prototype.onDestroy.call(this);
        };
        _proto.onPageControlChanged = function onPageControlChanged() {
          var _this2 = this;
          this.ArryLobbyPageItem.forEach(function (item, index) {
            if (item.iPage == _this2.inputParams.pid) {
              item.iClass.initView(_this2.inputParams, _this2.onBtnPageChanged.bind(_this2));
              return;
            }
          });
        };
        _proto.onBtnPageChanged = function onBtnPageChanged(param) {
          this.inputParams.pid = param.pid;
          this.inputParams.ppid = null;
          this.setDefaultParam();
          this.onPageChange();
        };
        _proto.onPageChange = function onPageChange() {
          var To = 'unknown';
          switch (this.inputParams.pid) {
            case ELobbyPage.home:
              To = 'LobbyHomeTag';
              break;
            case ELobbyPage.game:
              To = 'LobbyGameTag';
              HallData.inst.openGameppid = this.inputParams.ppid;
              break;
            case ELobbyPage.profile:
              To = 'LobbyProfileTag';
              break;
            case ELobbyPage.invite:
              To = 'LobbyInviteTag';
              break;
            case ELobbyPage.market:
              To = 'LobbyMarketTag';
              break;
          }
          EventReporter.emit(EventReporter.Event.mixpanel.OPEN_PAGE, {
            From: 'LobbyPage',
            To: To
          });
          this.pane.m_LobbyPageControl.selectedIndex = this.inputParams.pid;
          this.onPageControlChanged();
        };
        _proto.onRoomListItemClick = function onRoomListItemClick(target, data, reportPage) {
          if (!data) return;
          if (data.roomType == GameConst.ERoomType.normal) {
            this.enterNormal(data, reportPage);
          } else {
            this.onMttItemClick(data, reportPage);
          }
        };
        _proto.enterNormal = function enterNormal(roomItemInfo, reportPage) {
          var _this3 = this;
          this.enterGameLoading.show();
          var itemData = roomItemInfo.normal;
          HallProxy.inst.getHallRoomId(itemData.gameId, SafeHandler(function (netdata) {
            if (netdata.isRetSuccess()) {
              var msgGetHallRoomIdRsp = netdata.getData(_cjsExports.hall.MsgGetHallRoomIdRsp);
              TexasProxy.inst.queryHallRoomInfo(msgGetHallRoomIdRsp.roomId, SafeHandler(function (netdata) {
                var msgQueryRoomInfoRsp = netdata.getData(_cjsExports.texas.MsgQueryRoomInfoRsp);
                var roomInfo = msgQueryRoomInfoRsp.info;
                if (msgQueryRoomInfoRsp.roomId == msgGetHallRoomIdRsp.roomId && roomInfo) {
                  EventReporter.emit(EventReporter.Event.mixpanel.ENTER_ROOM, {
                    GameID: itemData.gameId,
                    RoomID: roomInfo.roomId,
                    From: reportPage
                  });
                  var texasGamePage = TexasGamePage.create(_this3);
                  texasGamePage.setInputParams({
                    roomInfo: roomInfo
                  });
                  texasGamePage.showOn(_this3.grootInst);
                } else {
                  _this3.enterGameLoading.hide();
                }
              }, _this3));
            } else {
              _this3.enterGameLoading.hide();
              var txt = LanguageManager.getErrorText(netdata.getRetCode());
              if (txt && txt.length > 0) {
                _this3.grootInst.showCenterTip(txt);
              }
            }
          }, this));
        }

        /**
         * 打开赛前信息页面
         */;
        _proto.openMatchDetail = function openMatchDetail(mttinfo) {
          Log.debug.log('todo 打开赛前信息页面');
        };
        _proto.onMttItemClick = function onMttItemClick(roomItemInfo, reportPage) {
          console.log('onMttItemClick');
          var itemData = roomItemInfo.mtt;
          // const mttBtnState: GameConst.MATCH.EMttBtnStatus = itemData.buttonState;
          // const mttTIme = itemData.time;
          // if (!mttBtnState) return;
          // switch (mttBtnState) {
          //     case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_LOOKON:
          //         this._enterMtt(itemData, true);
          //         break;
          //     case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_WAITING:
          //         if (mttTIme.time == GameConst.MATCH.ETimeType.MATCH_BEGIN && mttTIme.days == GameConst.MATCH.ETimeDays.TIME_COUNT_DOWN) {
          //             // 倒计时提前进入
          //             this._enterMtt(itemData, false);
          //         } else {
          //             this.openMatchDetail(itemData);
          //         }
          //         break;
          //     case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_ENTER:
          //     case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_RE_ENTER:
          //     case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_DELAY_ENTER:
          //         //this._enterMtt(itemData, false);
          //         break;
          //     // case todo 其他需要打开赛前信息页面的情况
          //     default:
          //         if (mttBtnState > 0) {
          //             // self:onLookOnButtonClick_()
          //             this._enterMtt(itemData, true);
          //         } else {
          //             // todo 其他需要打开赛前信息页面的情况
          //             this.openMatchDetail(itemData);
          //         }
          //         break;
          // }

          var lobbyBoard = LobbyBoardLayer.create(this);
          lobbyBoard.setInputParams(itemData);
          lobbyBoard.showOn(this.grootInst);
        };
        _proto.enterMTT = function enterMTT(target, mttInfo, lookon, lookonRoom, lookonPlayer) {
          this._enterMtt(mttInfo, lookon, lookonRoom, lookonPlayer);
        };
        _proto._enterMtt = function _enterMtt(mttInfo, lookon, lookonRoom, lookonPlayer) {
          this.enterGameLoading.show();
          // let isHallMatch = (mttInfo.rule.clubid as number) > 0;
          var texasGamePage = TexasGamePage.create(this);
          texasGamePage.setInputParams({
            isMatch: true,
            isLookOn: lookon,
            lookonRoom: lookonRoom,
            lookonPlayer: lookonPlayer,
            mttInfo: mttInfo
          });
          texasGamePage.showOn(this.grootInst);
        };
        _proto.jumpToLobbyPage = function jumpToLobbyPage(target, jumpInfo) {
          if (!jumpInfo) return;
          var iPid = jumpInfo.pid;
          var iPPid = jumpInfo.ppid;
          this.inputParams = jumpInfo;
          this.setDefaultParam();
          this.onPageChange();
        };
        return LobbyPage;
      }(GameWindowBase), (_applyDecoratedDescriptor(_class.prototype, "onPageChange", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onPageChange"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onRoomListItemClick", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "onRoomListItemClick"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "enterNormal", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "enterNormal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "enterMTT", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "enterMTT"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_enterMtt", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "_enterMtt"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "jumpToLobbyPage", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "jumpToLobbyPage"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyPrizeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Prize_Item.ts', './Utils.ts', './LanguageManage.ts', './LobbyConst.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_Lobby_Prize_Item, Utils, LanguageManager, LobbyConst, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Prize_Item = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "51220gKqDhM+aAg5b81MyKO", "LobbyPrizeItem", undefined);
      var LobbyPrizeItem = exports('LobbyPrizeItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_Prize_Item) {
        _inheritsLoose(LobbyPrizeItem, _UI_Lobby_Prize_Item);
        function LobbyPrizeItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Prize_Item.call.apply(_UI_Lobby_Prize_Item, [this].concat(args)) || this;
          _this.ShopData = null;
          //奖励信息
          _this._prizeInfo = null;
          return _this;
        }
        var _proto = LobbyPrizeItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Prize_Item.prototype.onConstruct.call(this);
          this.name = 'LobbyEnterItem';
        };
        _proto.setItem = function setItem(index, arryData, itype, isTogether) {
          this._prizeInfo = arryData;
          if (this._prizeInfo == null) return;
          this.m_line.visible = index != 0;
          if (isTogether && index != this._prizeInfo.rank) {
            this.m_labelRank.text = Utils.formatStr('1-%d', this._prizeInfo.rank);
          } else {
            this.m_labelRank.text = this._prizeInfo.rank.toString();
          }
          this.m_prop_1.visible = false;
          this.m_prop_2.visible = false;
          this.m_bg.visible = false;
          //this.m_NetImage1.setScale(1, 1);
          //this.m_NetImage2.setScale(1, 1);

          if (this._prizeInfo.chips > 0) {
            //隐藏说明文字
            this.m_labelTip.visible = false;
            this.m_all_prop.visible = true;
            this.m_labelRank.visible = true;
            this.m_prop_1.visible = true;
            if (itype == LobbyConst.EnumGameType.GAME_CASH) {
              this.m_NetImage1.url = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY_U, LobbyConst.ENUMPOP_U_Type.TAG_U_36);
              this.m_hallLabelReward1.text = Utils.toFormat(this._prizeInfo.chips, 2, true); //Utils.getThousandShowNumber(this._prizeInfo.chips);
            } else {
              this.m_NetImage1.url = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY, LobbyConst.ENUMPOP_Money_Type.TAG_MONEY_36);
              this.m_hallLabelReward1.text = Utils.toFormat(this._prizeInfo.chips, 2, false);
            }
            if (this._prizeInfo.reward && this._prizeInfo.reward.propId > 0) {
              if (this._prizeInfo.reward.propId == LobbyConst.ENUMMoney_Type.TAG_MONEY_U) {
                this.m_NetImage2.url = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY_U, LobbyConst.ENUMPOP_U_Type.TAG_U_36);
                //this.m_NetImage2.setScale(0.3, 0.3);
                // let propIcon = this.m_NetImage2.component as NetImage;
                // propIcon.setContent(this._prizeInfo.reward.pic);
                this.m_prop_2.visible = true;
                this.m_hallLabelReward2.text = Utils.formatStr(' x$%d', this._prizeInfo.reward.num); // Utils.getThousandShowNumber(this._prizeInfo.reward.num as number);
              }
            }
          } else {
            if (this._prizeInfo.reward && this._prizeInfo.reward.propId > 0) {
              //隐藏说明文字
              this.m_labelTip.visible = false;
              this.m_all_prop.visible = true;
              this.m_labelRank.visible = true;
              this.m_prop_1.visible = true;
              if (this._prizeInfo.reward.propId == LobbyConst.ENUMMoney_Type.TAG_MONEY_U) {
                // let propIcon = this.m_NetImage1.component as NetImage;
                // propIcon.setContent(this._prizeInfo.reward.pic);
                this.m_NetImage1.url = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY_U, LobbyConst.ENUMPOP_U_Type.TAG_U_36);
                //this.m_NetImage1.setScale(0.3, 0.3);
                this.m_hallLabelReward1.text = Utils.formatStr(' x$%d', this._prizeInfo.reward.num); //Utils.getThousandShowNumber(this._prizeInfo.reward.num as number);
              }
            } else {
              //隐藏说明文字
              this.m_labelTip.visible = true;
              this.m_all_prop.visible = false;
              this.m_labelRank.visible = false;
              this.m_line.visible = false;
              this.m_labelTip.text = LanguageManager.get('TXT_800');
              this.m_bg.visible = true;
            }
          }
        };
        return LobbyPrizeItem;
      }(UI_Lobby_Prize_Item)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyPrizePanal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Prize_Panal.ts', './fairygui.mjs', './GameDecorators.ts', './MttProxy.ts', './CocosDevKit.ts', './gameproto.mjs_cjs=&original=.js', './MttData.ts', './LobbyBoardPayoutStructure.ts', './gameproto.js', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_Lobby_Prize_Panal, Event, MarkForNetEventListener, CustomFguiClass, MttProxy, MttData, LobbyBoardPayoutStructure, _cjsExports, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Prize_Panal = module.default;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, null, null, function (module) {
      MttData = module.MttData;
    }, function (module) {
      LobbyBoardPayoutStructure = module.LobbyBoardPayoutStructure;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "faa50Cqw/tEoq3U2A6k/8F5", "LobbyPrizePanal", undefined);
      var LobbyPrizePanal = exports('LobbyPrizePanal', (_dec = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttPropRewardInfoRsp.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_Lobby_Prize_Panal) {
        _inheritsLoose(LobbyPrizePanal, _UI_Lobby_Prize_Panal);
        function LobbyPrizePanal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Prize_Panal.call.apply(_UI_Lobby_Prize_Panal, [this].concat(args)) || this;
          _this._allPrizeList = [];
          return _this;
        }
        var _proto = LobbyPrizePanal.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Prize_Panal.prototype.onConstruct.call(this);
          this.name = 'LobbyPrizePanal';
          this.m_btn_prize_info.onClick(this.onBtnPrizeHelp.bind(this), this);
          this.m_prize_tableview.on(Event.CLICK_ITEM, this.onPrizeItemClick, this);
          this.m_prize_tableview.itemRenderer = this.itemRendererPrize.bind(this);
          this.m_prize_tableview.setVirtual();
          this.m_btn_prize_info.visible = !this.checkIsTogetherMtt();
        }

        //todo frank 展示奖励界面
        ;

        _proto.onBtnPrizeHelp = function onBtnPrizeHelp() {
          LobbyBoardPayoutStructure.create(this).showOn(this.grootInst);
        }

        //todo frank 展示奖励界面
        ;

        _proto.onPrizeItemClick = function onPrizeItemClick(item) {}

        //todo frank 展示奖励界面
        ;

        _proto.itemRendererPrize = function itemRendererPrize(index, node) {
          var _this$_allPrizeList$i, _MttData$inst$MttInfo;
          if (index < 0 || index >= this._allPrizeList.length) return;
          var classMttPropInfo = _cjsExports.mtt.MttPropRewardInfo.create();
          classMttPropInfo.reward = (_this$_allPrizeList$i = this._allPrizeList[index]) == null ? void 0 : _this$_allPrizeList$i.reward;
          classMttPropInfo.rank = this._allPrizeList[index].rank;
          classMttPropInfo.chips = this._allPrizeList[index].chips;
          var coinType = ((_MttData$inst$MttInfo = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo = _MttData$inst$MttInfo.rule) == null ? void 0 : _MttData$inst$MttInfo.coinType) || 0;
          node.setItem(index, classMttPropInfo, coinType, this.checkIsTogetherMtt());
        };
        _proto.getPrizePropInfoReq = function getPrizePropInfoReq() {
          if (MttData.inst.MttInfo) {
            var _MttData$inst$MttInfo2;
            var mttId = ((_MttData$inst$MttInfo2 = MttData.inst.MttInfo) == null ? void 0 : _MttData$inst$MttInfo2.mttid) || 0;
            MttProxy.inst.getMsgGetMttPropRewardInfo(mttId);
          }
        };
        _proto.onMsgGetMttPropRewardInfoRsp = function onMsgGetMttPropRewardInfoRsp(netdata) {
          if (netdata.isRetSuccess()) {
            Log.debug.log(this.name, 'onMsgGetMttPropRewardInfoRsp');
            var info = netdata.getData(_cjsExports.mtt.MsgGetMttPropRewardInfoRsp);
            //刷新item 信息
            if (info.mttid == MttData.inst.MttInfo.mttid) {
              if (this.checkIsTogetherMtt()) {
                var num = info.rewardList.length;
                this._allPrizeList = [];
                if (num > 0) {
                  this._allPrizeList.push(info.rewardList[0]);
                  this._allPrizeList[0].rank = num;
                }
              } else {
                this._allPrizeList = info.rewardList;
              }
              //塞入一个空的列表
              this._allPrizeList.push({
                rank: 0,
                reward: null,
                chips: 0
              });
              this.m_prize_tableview.numItems = this._allPrizeList.length;
            }
          }
        };
        _proto.checkIsTogetherMtt = function checkIsTogetherMtt() {
          var _MttData$inst$MttInfo3;
          var bRt = false;
          var isTogether = ((_MttData$inst$MttInfo3 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo3 = _MttData$inst$MttInfo3.rule) == null ? void 0 : _MttData$inst$MttInfo3.rewardMode) || 0;
          if (isTogether == 2) {
            bRt = true;
          }
          return bRt;
        };
        _proto.onDestroy = function onDestroy() {
          _UI_Lobby_Prize_Panal.prototype.onDestroy.call(this);
        };
        return LobbyPrizePanal;
      }(UI_Lobby_Prize_Panal), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttPropRewardInfoRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttPropRewardInfoRsp"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyTableItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Table_Item.ts', './Utils.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, Color, UI_Lobby_Table_Item, Utils, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      Color = module.Color;
    }, function (module) {
      UI_Lobby_Table_Item = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "971d7nGFZpNwb6I/wThASqa", "LobbyTableItem", undefined);
      var Color008000 = color(0, 0x80, 0);
      var LobbyTableItem = exports('LobbyTableItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_Lobby_Table_Item) {
        _inheritsLoose(LobbyTableItem, _UI_Lobby_Table_Item);
        function LobbyTableItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Table_Item.call.apply(_UI_Lobby_Table_Item, [this].concat(args)) || this;
          _this.ShopData = null;
          _this._tableBgColor = [new Color('#06C166'), new Color('28512D')];
          _this._tableInfo = null;
          return _this;
        }
        var _proto = LobbyTableItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Table_Item.prototype.onConstruct.call(this);
          this.name = 'LobbyTableItem';
        };
        _proto.setItem = function setItem(index, data, selfRoomId) {
          this._tableInfo = data;
          if (this._tableInfo != null) {
            this.m_line.visible = index != 0;
            this.m_labelIndex.text = Utils.formatStr('No.%d', index + 1);
            this.m_labelPlayerNum.text = this._tableInfo.memberCount.toString();
            this.m_labelChip.text = Utils.formatStr('%s/%s', Utils.getThousandShowNumber(this._tableInfo.chipMax), Utils.getThousandShowNumber(this._tableInfo.chipMin));
            if (this._tableInfo.roomId == selfRoomId && selfRoomId > 0) {
              //自己
              this.m_table_bg.color = this._tableBgColor[1].clone();
            } else {
              this.m_table_bg.color = this._tableBgColor[0].clone();
            }
          }
        };
        return LobbyTableItem;
      }(UI_Lobby_Table_Item)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyTablePanal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_Lobby_Table_Panal.ts', './fairygui.mjs', './GameDecorators.ts', './MttProxy.ts', './CocosDevKit.ts', './gameproto.mjs_cjs=&original=.js', './MttData.ts', './LobbyConst.ts', './GameConst.ts', './PageEvent.ts', './gameproto.js', './Logger.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_Lobby_Table_Panal, Event, MarkForNetEventListener, CustomFguiClass, MttProxy, MttData, LobbyConst, GameConst, EPageEvent, _cjsExports, Log, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_Lobby_Table_Panal = module.default;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, null, null, function (module) {
      MttData = module.MttData;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;
      cclegacy._RF.push({}, "ffd5b3qbPVCHrFJYSToj3eQ", "LobbyTablePanal", undefined);
      var LobbyTablePanal = exports('LobbyTablePanal', (_dec = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttRoomListRsp.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.mtt.MsgGetRoomStateRsp.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_Lobby_Table_Panal) {
        _inheritsLoose(LobbyTablePanal, _UI_Lobby_Table_Panal);
        function LobbyTablePanal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_Lobby_Table_Panal.call.apply(_UI_Lobby_Table_Panal, [this].concat(args)) || this;
          _this._allTableList = [];
          _this._selfRoomId = 0;
          _this._selfLook = false;
          return _this;
        }
        var _proto = LobbyTablePanal.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_Lobby_Table_Panal.prototype.onConstruct.call(this);
          this.name = 'LobbyTablePanal';
          this.m_table_tableview.on(Event.CLICK_ITEM, this.onTableItemClick, this);
          this.m_table_tableview.itemRenderer = this.itemRendererTable.bind(this);
          this.m_table_tableview.setVirtual();
          this.getTableInfoReq();
        }

        //todo frank 展示桌子table
        ;

        _proto.itemRendererTable = function itemRendererTable(index, node) {
          if (index < 0 || index >= this._allTableList.length) return;
          var item = this._allTableList[index];
          var classMttRoomInfo = _cjsExports.mtt.MttRoomInfo.create();
          classMttRoomInfo.chipMax = item.chipMax;
          classMttRoomInfo.chipMin = item.chipMin;
          classMttRoomInfo.memberCount = item.memberCount;
          classMttRoomInfo.mttid = item.mttid;
          classMttRoomInfo.roomId = item.roomId;
          node.setItem(index, classMttRoomInfo, this._selfRoomId);
        }

        //进入房间
        ;

        _proto.onEnterGame = function onEnterGame(lookOn, roomId, obPlayerId) {
          this.emitPageEvent(EPageEvent.ENTER_MATCH, MttData.inst.MttInfo, lookOn, roomId, obPlayerId);
        };
        _proto.getTableInfoReq = function getTableInfoReq() {
          if (MttData.inst.MttInfo) {
            var _MttData$inst$MttInfo;
            var mttId = ((_MttData$inst$MttInfo = MttData.inst.MttInfo) == null ? void 0 : _MttData$inst$MttInfo.mttid) || 0;
            MttProxy.inst.GetMsgGetMttRoomList(mttId);
          }
        }

        //todo frank 是自己的桌子 直接进入直播间
        ;

        _proto.onTableItemClick = function onTableItemClick(item) {
          // -- 自己参与的情况，只能进自己的
          if (this._selfRoomId > 0) {
            if (this._selfRoomId != item._tableInfo.roomId) {
              this.grootInst.showCenterTip('TXT_833');
            } else {
              this.onEnterGame(false);
            }
            return;
          }
          if (this._selfLook) {
            var mttId = MttData.inst.MttInfo.mttid || 0;
            var roomId = item._tableInfo.roomId;
            MttProxy.inst.getMsgGetRoomState(mttId, roomId);
          } else {
            this.grootInst.showCenterTip('TXT_849');
          }
        };
        _proto.onMsgGetMttRoomListRsp = function onMsgGetMttRoomListRsp(netdata) {
          if (netdata.isRetSuccess()) {
            Log.debug.log(this.name, 'MsgGetMttRoomListRsp');
            var info = netdata.getData(_cjsExports.mtt.MsgGetMttRoomListRsp);
            //刷新item 信息
            if (info.mttid == MttData.inst.MttInfo.mttid) {
              var _MttData$inst$MttInfo2;
              // 1=可以旁观 2=不能旁观)
              if (info.obstate == 1) {
                this._selfLook = true;
              }
              this._selfRoomId = info.myRoomid;
              this._allTableList = info.mttroominfo;

              // local mttroominfo = data.mttroominfo  --
              var status = MttData.inst.MttInfo.buttonState || 0;
              var startTime = MttData.inst.MttInfo.rule.startTime || 0;
              var timeType = ((_MttData$inst$MttInfo2 = MttData.inst.MttInfo) == null || (_MttData$inst$MttInfo2 = _MttData$inst$MttInfo2.time) == null ? void 0 : _MttData$inst$MttInfo2.type) || null; // 1=截止报名 2=比赛开始 3=延迟状态 4=已经开赛 5=比赛关闭 6=比赛结束

              var isShowRank = true;
              if (startTime > Utils.curServerTimeSecondstamp) {
                isShowRank = false;
              } else if (status == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE || status == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || status > 0 && (GameConst.MATCH.ETimeType.MATCH_CLOSED == timeType || GameConst.MATCH.ETimeType.MATCH_FINISHED == timeType)) {
                isShowRank = false;
              } else {
                isShowRank = true;
              }
              if (isShowRank) ;else {
                this._allTableList = [];
              }
              var tableNum = this._allTableList.length;
              this.m_labelNum.text = Utils.getThousandShowNumber(tableNum);
              this.m_table_tableview.numItems = tableNum;
            }
          }
        };
        _proto.onMsgGetRoomStateRsp = function onMsgGetRoomStateRsp(netdata) {
          if (netdata.isRetSuccess()) {
            Log.debug.log(this.name, 'onMsgGetRoomStateRsp');
            var info = netdata.getData(_cjsExports.mtt.MsgGetRoomStateRsp);
            if (info) {
              var iRoomId = info.roomId;
              var iOberPlayerId = info.obPlayerid;
              this.onEnterGame(true, iRoomId, iOberPlayerId);
            }
          }
        };
        _proto.onDestroy = function onDestroy() {
          _UI_Lobby_Table_Panal.prototype.onDestroy.call(this);
        };
        return LobbyTablePanal;
      }(UI_Lobby_Table_Panal), (_applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttRoomListRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttRoomListRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetRoomStateRsp", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetRoomStateRsp"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocalStorageTool.ts", ['cc', './CryptoTool.ts', './Logger.ts', './OnError.ts'], function (exports) {
  var cclegacy, sys, CryptoTool, Log, OnError;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      CryptoTool = module.CryptoTool;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      OnError = module.OnError;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ff874jTpSVEH4crM+A/LU9q", "LocalStorageTool", undefined);
      var LocalStorageTool = exports('LocalStorageTool', /*#__PURE__*/function () {
        function LocalStorageTool() {}
        LocalStorageTool.setJson = function setJson(key, json) {
          try {
            var jsonStr = JSON.stringify(json);
            if (jsonStr) {
              sys.localStorage.setItem(key, jsonStr);
            }
          } catch (error) {
            Log.debug.error('LocalStorageTool', 'setJson', error);
            if (error instanceof Error) {
              var newerr = new Error("LocalStorageTool setJson fail: " + error.message);
              newerr.stack = error.stack;
              error = newerr;
            }
            OnError.cache(error);
          }
        };
        LocalStorageTool.getJson = function getJson(key) {
          try {
            var jsonStr = sys.localStorage.getItem(key);
            if (jsonStr) {
              return JSON.parse(jsonStr);
            }
          } catch (error) {
            Log.debug.error('LocalStorageTool', 'getJson', error);
            if (error instanceof Error) {
              var newerr = new Error("LocalStorageTool getJson fail: " + error.message);
              newerr.stack = error.stack;
              error = newerr;
            }
            OnError.cache(error);
          }
        };
        LocalStorageTool.getStringWithAES = function getStringWithAES(key) {
          key = CryptoTool.aesEncryptString(this.storageEncryptKey, key);
          var strEncrypt = sys.localStorage.getItem(key);
          if (strEncrypt) {
            try {
              return CryptoTool.aesDecryptString(this.storageEncryptKey, strEncrypt);
            } catch (error) {
              Log.debug.error('LocalStorageTool', 'getStringWithAES', error);
              if (error instanceof Error) {
                var newerr = new Error("LocalStorageTool getStringWithAES fail: " + error.message);
                newerr.stack = error.stack;
                error = newerr;
              }
              OnError.cache(error);
            }
          }
        };
        LocalStorageTool.setStringWithAES = function setStringWithAES(key, str) {
          try {
            var encryptStr = CryptoTool.aesEncryptString(this.storageEncryptKey, str);
            var encryptKey = CryptoTool.aesEncryptString(this.storageEncryptKey, key);
            if (encryptStr && encryptKey) {
              sys.localStorage.setItem(encryptKey, encryptStr);
            }
          } catch (error) {
            Log.debug.error('LocalStorageTool', 'setStringWithAES', error);
            if (error instanceof Error) {
              var newerr = new Error("LocalStorageTool setStringWithAES fail: " + error.message);
              newerr.stack = error.stack;
              error = newerr;
            }
            OnError.cache(error);
          }
        };
        LocalStorageTool.setJsonWithAES = function setJsonWithAES(key, json) {
          try {
            var jsonStr = JSON.stringify(json);
            if (jsonStr) {
              this.setStringWithAES(key, jsonStr);
            }
          } catch (error) {
            Log.debug.error('LocalStorageTool', 'setJsonWithAES', error);
            if (error instanceof Error) {
              var newerr = new Error("LocalStorageTool setJsonWithAES fail: " + error.message);
              newerr.stack = error.stack;
              error = newerr;
            }
            OnError.cache(error);
          }
        };
        LocalStorageTool.getJsonWithAES = function getJsonWithAES(key) {
          try {
            var jsonStr = this.getStringWithAES(key);
            if (jsonStr) {
              return JSON.parse(jsonStr);
            }
          } catch (error) {
            Log.debug.error('LocalStorageTool', 'getJsonWithAES', error);
            if (error instanceof Error) {
              var newerr = new Error("LocalStorageTool getJsonWithAES fail: " + error.message);
              newerr.stack = error.stack;
              error = newerr;
            }
            OnError.cache(error);
          }
        };
        LocalStorageTool.removeItemWithAES = function removeItemWithAES(key) {
          try {
            var encryptKey = CryptoTool.aesEncryptString(this.storageEncryptKey, key);
            if (encryptKey) {
              sys.localStorage.removeItem(encryptKey);
            }
          } catch (error) {
            Log.debug.error('LocalStorageTool', 'removeItemWithAES', error);
            if (error instanceof Error) {
              var newerr = new Error("LocalStorageTool removeItemWithAES fail: " + error.message);
              newerr.stack = error.stack;
              error = newerr;
            }
            OnError.cache(error);
          }
        };
        LocalStorageTool.setString = function setString(key, value) {
          return sys.localStorage.setItem(key, value);
        };
        LocalStorageTool.getString = function getString(key) {
          return sys.localStorage.getItem(key);
        };
        LocalStorageTool.removeItem = function removeItem(key) {
          return sys.localStorage.removeItem(key);
        };
        return LocalStorageTool;
      }());
      LocalStorageTool.storageEncryptKey = '';
      LocalStorageTool.storageEncryptIV = '';
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Logger.ts", ['cc', './LocalStorageTool.ts'], function (exports) {
  var cclegacy, log, warn, error, LocalStorageTool;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      warn = module.warn;
      error = module.error;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6d2b7fcr6VIM5pE4ppEwp3w", "Logger", undefined);
      var LoggerStorage = {
        open: true,
        hotupdate: true,
        net: true,
        http: true,
        task: true,
        info: true,
        game: true,
        debug: true
        // clock: true,
      };

      var Logger = exports('Logger', /*#__PURE__*/function () {
        function Logger(tag) {
          this.tag = tag;
        }
        var _proto = Logger.prototype;
        _proto.getTag = function getTag() {
          return this.tag;
        };
        _proto.log = function log$1() {
          if (LoggerStorage.open && LoggerStorage[this.tag]) {
            for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
              params[_key] = arguments[_key];
            }
            log.apply(void 0, ["[" + this.tag + "]"].concat(params));
          }
        };
        _proto.warn = function warn$1() {
          for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            params[_key2] = arguments[_key2];
          }
          // warn 不作开关限制，一律显示
          warn.apply(void 0, ["[" + this.tag + "]"].concat(params));
        };
        _proto.error = function error$1() {
          for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            params[_key3] = arguments[_key3];
          }
          // error 不作开关限制，一律显示
          error.apply(void 0, ["[" + this.tag + "]"].concat(params));
        };
        _proto.getState = function getState() {
          return LoggerStorage.open && LoggerStorage[this.tag];
        };
        return Logger;
      }());
      var _log = {
        hotupdate: undefined,
        net: undefined,
        http: undefined,
        task: undefined,
        info: undefined,
        game: undefined,
        debug: undefined
      };
      var LogOption = exports('LogOption', /*#__PURE__*/function () {
        function LogOption() {}
        LogOption.addTag = function addTag(tags) {
          console.log('[Logger]', 'addTag', tags);
          for (var i = 0; i < tags.length; i++) {
            var _tag = tags[i];
            if (!LoggerStorage.hasOwnProperty(_tag)) {
              LoggerStorage[_tag] = true;
            }
          }
        };
        LogOption.loadTagOption = function loadTagOption() {
          console.log('[Logger]', 'loadTagOption');
          var loggerStorage = LocalStorageTool.getJson('LoggerTagOption');
          if (loggerStorage) {
            LoggerStorage = Object.assign(LoggerStorage, loggerStorage);
            LocalStorageTool.setJson('LoggerTagOption', LoggerStorage);
          } else {
            LocalStorageTool.setJson('LoggerTagOption', LoggerStorage);
          }
          for (var _tag2 in LoggerStorage) {
            if (Object.prototype.hasOwnProperty.call(LoggerStorage, _tag2)) {
              _log[_tag2] = new Logger(_tag2);
            }
          }
        };
        LogOption.setTagOption = function setTagOption(tag, open) {
          if (LoggerStorage.hasOwnProperty(tag)) {
            LoggerStorage[tag] = open;
          }
        };
        LogOption.saveTagOption = function saveTagOption() {
          LocalStorageTool.setJson('LoggerTagOption', LoggerStorage);
        };
        LogOption.getOpenState = function getOpenState() {
          return LoggerStorage.open == true;
        };
        return LogOption;
      }());
      var Log = exports('Log', _log);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NativeDeviceBridge.ts', './CocosDevKit.ts', './HttpLogin.ts', './gameproto.mjs_cjs=&original=.js', './GameNetProxyBase.ts', './GameDecorators.ts', './RoleData.ts', './PageEvent.ts', './GameStorage.ts', './GameConfig.ts', './TelegramDeviceBridge.ts', './ConfirmBox.ts', './gameproto.js', './Utils.ts', './NetTypes.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, NativeDeviceBridge, HttpLogin, GameNetProxyBase, MarkForNetEventListener, NetProxyClass, PrepareRequest, RoleData, EPageEvent, GameStorage, GameConfig, TelegramDeviceBridge, _cjsExports, Utils, NetTypes;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, null, function (module) {
      HttpLogin = module.HttpLogin;
    }, null, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      NetProxyClass = module.NetProxyClass;
      PrepareRequest = module.PrepareRequest;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      GameStorage = module.GameStorage;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, null, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      NetTypes = module.NetTypes;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _class3;
      cclegacy._RF.push({}, "80182uwYvpCYJ8BLZLaidKo", "LoginProxy", undefined);
      var LoginProxy = exports('LoginProxy', (_dec = NetProxyClass(), _dec2 = MarkForNetEventListener(_cjsExports.login.MsgkickCast.ProtocolID), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(LoginProxy, _GameNetProxyBase);
        function LoginProxy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameNetProxyBase.call.apply(_GameNetProxyBase, [this].concat(args)) || this;
          _this._password = void 0;
          _this._curLoginType = void 0;
          _this._httpLoginMsg = void 0;
          _this._loginReqMsg = void 0;
          _this._loginStatu = false;
          _this._reloginCount = 0;
          _this._loginRspMsg = void 0;
          return _this;
        }
        var _proto = LoginProxy.prototype;
        _proto.reset = function reset() {
          this._password = undefined;
          this._httpLoginMsg = undefined;
          this._loginReqMsg = undefined;
          this._loginStatu = false;
          this._curLoginType = undefined;
          this._loginRspMsg = undefined;
        };
        _proto.httpLoginProcess = function httpLoginProcess() {
          var _this2 = this;
          var appInfo = NativeDeviceBridge.Instance.appInfo;
          return HttpLogin.LoginRequest.create(this._curLoginType, this._httpLoginMsg).post(true).then(function (resp) {
            if (resp) {
              if (!_this2._loginReqMsg) {
                _this2._loginReqMsg = _cjsExports.login.MsgLogin.create();
              }
              _this2._loginReqMsg.addr = resp.data.addr;
              // this.loginReqMsg.clientid
              _this2._loginReqMsg.ip = resp.data.real_ip;
              _this2._loginReqMsg.model = appInfo.model;
              _this2._loginReqMsg.platform = appInfo.platform;
              _this2._loginReqMsg.playerid = resp.data.playerid;
              _this2._loginReqMsg.selectTab = 0;
              _this2._loginReqMsg.session = resp.data.session;
              _this2._loginReqMsg.token = resp.data.token;
              _this2._loginReqMsg.timestamp = resp.data.timestamp;
              RoleData.inst.setHttpLoginResult(resp.data);
              Utils.setServerTimestamp(resp.data.timestamp);
              var info = {
                account: _this2._httpLoginMsg.account,
                password: _this2._password,
                loginType: _this2._curLoginType
              };
              GameStorage.loginInfo = info;

              // resp.data.addr
              // do something
              var addr = resp.data.wss;
              if (!GameConfig.useWSS || !addr) {
                addr = resp.data.ws;
              }
              if (addr) {
                _this2.netNode.setConnectParams(addr);
                _this2.netNode.connect();
                _this2.netNode.onceNetOpen(_this2.reqLogin, _this2);
              } else {
                throw new Error("LoginProxy Http \u767B\u9646 resp \u7F3A\u5C11 ws \u53C2\u6570: " + JSON.stringify(_this2._loginReqMsg, undefined, 4));
              }
            }
          }, function (reason) {
            _this2.emitPageEventAllInst(EPageEvent.LOGIN_PROCESS_FAILED);
            // if (reason instanceof HttpError) {
            // } else {
            //     //TODO
            // }
            return Promise.reject(reason);
          });
        };
        _proto.startLoginProcess = function startLoginProcess(loginType, account, password) {
          this.netNode.forceClose();
          this._loginStatu = false;
          this._curLoginType = loginType;
          this._password = password;
          if (this._httpLoginMsg) {
            this._httpLoginMsg.account = account;
            this._httpLoginMsg.password = password;
          } else {
            this._httpLoginMsg = {
              appinfo: NativeDeviceBridge.Instance.appInfo,
              area: NativeDeviceBridge.Instance.countryCode,
              account: account,
              password: password,
              channel: GameConfig.channel
            };
            if (TelegramDeviceBridge.Instance.isTMA) {
              var _TelegramDeviceBridge;
              var iviteId = ((_TelegramDeviceBridge = TelegramDeviceBridge.Instance.startParam) == null ? void 0 : _TelegramDeviceBridge.playerid) || 0;
              this._httpLoginMsg.inviteId = iviteId.toString();
            }
            // console.log(this._httpLoginMsg);
          }

          this.emitPageEventAllInst(EPageEvent.LOGIN_PROCESS_START);
          return this.httpLoginProcess();
        };
        _proto.loginAgain = function loginAgain() {
          this.netNode.forceClose();
          this._loginStatu = false;
          this._reloginCount++;
          // if (this._loginStatu) return Promise.reject(new Error('LoginProxy loginAgain: 登录状态为成功'));
          if (!this._curLoginType) return Promise.reject(new Error('LoginProxy loginAgain: _curLoginType 缺失'));
          if (!this._httpLoginMsg) return Promise.reject(new Error('LoginProxy loginAgain: httpLoginMsg 缺失'));
          this.emitPageEventAllInst(EPageEvent.LOGIN_PROCESS_START);
          return this.httpLoginProcess();
        };
        _proto.reqLogin = function reqLogin() {
          console.log('LoginProxy', 'reqLogin');
          this.send(_cjsExports.login.MsgLogin.ProtocolID, _cjsExports.login.MsgLogin.encode(this._loginReqMsg).finish(), this.onMsgLoginRsp.bind(this));
        };
        _proto.onMsgLoginRsp = function onMsgLoginRsp(netdata) {
          var _this3 = this;
          var loginrsp = netdata.getData(_cjsExports.login.MsgLoginRsp);
          console.log('LoginProxy', 'onMsgLoginRsp', loginrsp);
          if (netdata.isRetSuccess()) {
            this._loginRspMsg = loginrsp;
            PrepareRequest().then(function () {
              _this3._loginStatu = true;
              _this3._reloginCount = 0;
              _this3.emitPageEventAllInst(EPageEvent.LOGIN_PROCESS_COMPLETED);
            }, function () {
              console.log('LoginProxy', 'PrepareRequest fail');
              _this3.netNode.forceClose();
              _this3.emitPageEventAllInst(EPageEvent.LOGIN_PROCESS_FAILED);
            });
          } else {
            console.error('LoginProxy', 'onMsgLoginRsp fail:', loginrsp.result);
            this.netNode.forceClose();
            this.emitPageEventAllInst(EPageEvent.LOGIN_PROCESS_FAILED);
          }
        };
        _proto.onMsgkickCast = function onMsgkickCast(netdata) {
          this._loginStatu = false;
        };
        _proto.onNetStateChange = function onNetStateChange(state) {
          switch (state) {
            case NetTypes.ENetNodeState.connected:
              // do something
              break;
            case NetTypes.ENetNodeState.connecting:
              break;
            case NetTypes.ENetNodeState.closed:
              // do something
              if (this._loginStatu) {
                this._loginStatu = false;
                this._reloginCount = 0;
                {
                  this.emitPageEventAllInst(EPageEvent.LOGIN_PROCESS_FAILED);
                }
              } else {
                this.emitPageEventAllInst(EPageEvent.LOGIN_PROCESS_FAILED);
              }
              break;
          }
        };
        _createClass(LoginProxy, [{
          key: "curLoginType",
          get: function get() {
            return this._curLoginType;
          }
        }, {
          key: "loginStatu",
          get: function get() {
            return this._loginStatu;
          }
        }, {
          key: "reloginCount",
          get: function get() {
            return this._reloginCount;
          }
        }, {
          key: "loginRspMsg",
          get: function get() {
            return this._loginRspMsg;
          }
        }], [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return LoginProxy;
      }(GameNetProxyBase), _class3._inst = void 0, _class3), _applyDecoratedDescriptor(_class2.prototype, "onMsgkickCast", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgkickCast"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./Launch.ts', './LaunchBgFix.ts', './DebugButton.ts', './DeviceBridgeBase.ts', './NativeDeviceBridge.ts', './NativeLaunchBridge.ts', './TelegramDeviceBridge.ts', './EventReporter.ts', './MixPanelBridge.ts', './fairygui.mjs', './CDKDecorators.ts', './Clock.ts', './CocosDevKit.ts', './CryptoTool.ts', './DataBinder.ts', './DataConvert.ts', './HotUpdate.ts', './HttpFormData.ts', './HttpProtoBase.ts', './HttpRequest.ts', './HttpTools.ts', './Loading.ts', './LocalStorageTool.ts', './Logger.ts', './mobx.ts', './NetData.ts', './NetData87.ts', './NetNode.ts', './NetNodeManager.ts', './NetNodeWs.ts', './NetProxyBase.ts', './NetTypes.ts', './NodePoolExtention.ts', './OnError.ts', './PokerParser.ts', './Task.ts', './UITools.ts', './Utils.ts', './XXTEA2.ts', './GameConfig.ts', './GameStorage.ts', './GameTypes.ts', './GateWayCheck.ts', './HttpBanner.ts', './HttpLogin.ts', './HttpPayment.ts', './HttpUserAct.ts', './OSSConfig.ts', './TelegramAPI.ts', './LanguageManage.ts', './LanguageTypes.ts', './MultiLanguageText.ts', './errorcode_config.ts', './multi_language_text.ts', './gameproto.mjs_cjs=&original=.js', './QRCode.ts', './QRCodeGenerator.ts', './BlindLevelInfo.ts', './GLoaderExtention.ts', './GameConst.ts', './GameDecorators.ts', './PageEvent.ts', './TexasPlayShareSpace.ts', './TexasChatData.ts', './TexasGameData.ts', './HallData.ts', './MttData.ts', './NoticeData.ts', './RedHotData.ts', './RoleData.ts', './ShopData.ts', './StatisticsData.ts', './TradeData.ts', './WalletData.ts', './GameNetProxyBase.ts', './GameChatProxy.ts', './GameMttProxy.ts', './GameRoomProxy.ts', './GameTexasProxy.ts', './HallProxy.ts', './LoginProxy.ts', './MttProxy.ts', './NoticeProxy.ts', './RoleProxy.ts', './ShopProxy.ts', './StatisticsProxy.ts', './TexasProxy.ts', './TradeProxy.ts', './AccountListItem.ts', './DebugPage1.ts', './DebugPage2.ts', './DebugPage3.ts', './GameDebugView.ts', './FGUIComponentBase.ts', './DebugBinder.ts', './UI_AccountListItem.ts', './UI_ComboBox1_popup.ts', './UI_DebugPage1.ts', './UI_DebugPage2.ts', './UI_DebugPage3.ts', './UI_DebugView.ts', './UI_ErrorListItem.ts', './GamePlayBinder.ts', './UI_Button1.ts', './UI_ButtonWithBg.ts', './UI_CardTypePowerDialog.ts', './UI_CardTypePowerItem.ts', './UI_GameButton2.ts', './UI_GameButtonCircle1.ts', './UI_GameButtonRabbitCamera.ts', './UI_GameButtonTimeBank.ts', './UI_GameExpressionDialog.ts', './UI_GameMenuItem.ts', './UI_GameOperatorButton.ts', './UI_GamePreOperatorButton.ts', './UI_LoadingLayer.ts', './UI_MttDialogValueItem.ts', './UI_TabbarButton.ts', './UI_TablePlayerTimeCountdown.ts', './UI_TableScoreCenter.ts', './UI_TableScoreLeft.ts', './UI_TableScoreRight.ts', './UI_TexasActionTag.ts', './UI_TexasBuyinDialog.ts', './UI_TexasCardTypeItem.ts', './UI_TexasCardTypeLayer.ts', './UI_TexasChatAtPlayerItem.ts', './UI_TexasChatBlockPlayerItem.ts', './UI_TexasChatLayer.ts', './UI_TexasChatMsgShortItem.ts', './UI_TexasChatMstItemOther.ts', './UI_TexasChatMstItemSelf.ts', './UI_TexasChipActionLayer.ts', './UI_TexasGameContent.ts', './UI_TexasGamePage.ts', './UI_TexasHandCardTip.ts', './UI_TexasMttAddonDialog.ts', './UI_TexasMttCountdown.ts', './UI_TexasMttInfoBlindsLayer.ts', './UI_TexasMttInfoBlindsLayerItem.ts', './UI_TexasMttInfoLayer.ts', './UI_TexasMttInfoObserverItem.ts', './UI_TexasMttInfoPrizesLayer.ts', './UI_TexasMttInfoPrizesLayerItem.ts', './UI_TexasMttInfoRankingLayer.ts', './UI_TexasMttInfoRankingLayerItem.ts', './UI_TexasMttInfoTablesLayer.ts', './UI_TexasMttInfoTablesLayerItem.ts', './UI_TexasMttRebuyDialog.ts', './UI_TexasMttResultDialog.ts', './UI_TexasMttResultRewardItem.ts', './UI_TexasMttTipBlindsUP.ts', './UI_TexasMttTipCommon.ts', './UI_TexasMttTipMoney.ts', './UI_TexasMttWaitStartItem.ts', './UI_TexasMttWaitTipLayer.ts', './UI_TexasOperatorContent.ts', './UI_TexasOperatorLayer.ts', './UI_TexasPlayerInfoLayer.ts', './UI_TexasPlayerItem.ts', './UI_TexasPlayerLayer.ts', './UI_TexasPlayerOpenCardItem.ts', './UI_TexasPlayerWinRateItem.ts', './UI_TexasPokerLayer.ts', './UI_TexasPopMenuLayer.ts', './UI_TexasPopupLayer.ts', './UI_TexasRetrospectBlankItem.ts', './UI_TexasRetrospectDetailInfo.ts', './UI_TexasRetrospectDetailLevel.ts', './UI_TexasRetrospectDetailOp.ts', './UI_TexasRetrospectDetailPlayer.ts', './UI_TexasRetrospectDetailShow.ts', './UI_TexasRetrospectDetailTop.ts', './UI_TexasRetrospectInfo.ts', './UI_TexasRetrospectInfoItem.ts', './UI_TexasRetrospectLayer.ts', './UI_TexasRetrospectPotsItem.ts', './UI_TexasRoomMenuLayer.ts', './UI_TexasTableInfoLayer.ts', './UI_TexasTableInfoLayerItem.ts', './UI_TexasTableLayer.ts', './UI_TexasTableMainPot.ts', './UI_TexasTableSidePot.ts', './UI_TexasTipLayer.ts', './UI_gameExpression.ts', './LaunchBinder.ts', './UI_UILaunch.ts', './LobbyBinder.ts', './UI_BannerButton.ts', './UI_BannerButtonCmpt.ts', './UI_Button4.ts', './UI_ButtonTGP.ts', './UI_ChangeNickDialog.ts', './UI_CoinGroup.ts', './UI_DayLoginBItem.ts', './UI_GameButton.ts', './UI_GameRoomPageItem.ts', './UI_HandCardDayItem.ts', './UI_HandCardItem.ts', './UI_HandCardReviewItem.ts', './UI_HandCardReviewPage.ts', './UI_HeadItem.ts', './UI_InviteContent.ts', './UI_LobbyDayLogin.ts', './UI_LobbyHeadGroup.ts', './UI_LobbyHomeGame.ts', './UI_LobbyHomeTask.ts', './UI_LobbyHomeTaskItem.ts', './UI_LobbyItemGame.ts', './UI_LobbyItemHome.ts', './UI_LobbyItemMarket.ts', './UI_LobbyItemProfile.ts', './UI_LobbyMarketBuy.ts', './UI_LobbyMarketMyOrder.ts', './UI_LobbyMarketSell.ts', './UI_LobbyPage.ts', './UI_Lobby_Board_BlindDialog.ts', './UI_Lobby_Board_BlindItem.ts', './UI_Lobby_Board_Layer.ts', './UI_Lobby_Detail_info_panal.ts', './UI_Lobby_Enter_Item.ts', './UI_Lobby_Enter_Rank_Item.ts', './UI_Lobby_Enter_Rank_Ko_Item.ts', './UI_Lobby_Entry_Panal.ts', './UI_Lobby_Invite_Friend_Item.ts', './UI_Lobby_Invite_Friend_layer.ts', './UI_Lobby_Prize_Item.ts', './UI_Lobby_Prize_Panal.ts', './UI_Lobby_Table_Item.ts', './UI_Lobby_Table_Panal.ts', './UI_Lobby_board_page_item.ts', './UI_Lobby_board_payout_structure.ts', './UI_MarketButton1.ts', './UI_MarketButton2.ts', './UI_MarketButton3.ts', './UI_MarketBuyDetailDialog.ts', './UI_MarketBuyDialog.ts', './UI_MarketBuyItem.ts', './UI_MarketCreateOrderDialog.ts', './UI_MarketOrderItem.ts', './UI_MarketSellDetailDialog.ts', './UI_MarketSellDialog.ts', './UI_MarketSellItem.ts', './UI_NoticeDetailPage.ts', './UI_NoticeItem.ts', './UI_NoticePage.ts', './UI_ProfileHeadGroup.ts', './UI_ProfileLanguagePage.ts', './UI_RoomButton.ts', './UI_RoomItemMTT.ts', './UI_RoomItemNLH.ts', './UI_RoomItemPlus.ts', './UI_SelectDefaultAvatarDialog.ts', './UI_TGPFreeGoldView.ts', './UI_TGPLevelDialog.ts', './UI_TGPLevelItem.ts', './UI_TouchCmpt.ts', './UI_WalletGroup.ts', './UI_button_Invite.ts', './PokerBinder.ts', './UI_PokerCmpt.ts', './PublicBinder.ts', './UI_Avatar.ts', './UI_AvatarContent.ts', './UI_Button1Component.ts', './UI_CalendarDayItem.ts', './UI_CalendarMonthItem.ts', './UI_CalendarPage.ts', './UI_CenterTipItem.ts', './UI_CenterTipLayer.ts', './UI_CircularProgress.ts', './UI_CommonButton1.ts', './UI_CommonButton2.ts', './UI_CommonButton4.ts', './UI_CommonButtonGreen1.ts', './UI_CommonButtonGreen2.ts', './UI_ConfirmBoxStyle1.ts', './UI_ConfirmBoxStyle2.ts', './UI_DialogFrame.ts', './UI_DialogFrame2.ts', './UI_DialogFrame3.ts', './UI_FSlider.ts', './UI_GetRewardItem.ts', './UI_GetRewardPage.ts', './UI_GoldComponent.ts', './UI_ListNoneComponent.ts', './UI_LoadingItem.ts', './UI_NetImage.ts', './UI_PageFrame1.ts', './UI_PublicLayer.ts', './UI_ServerMaintenanceDialoa.ts', './UI_WalletComponent.ts', './UI_CurrencySelectItem.ts', './UI_NetworkSelectItem.ts', './UI_WalletBlueButton.ts', './UI_WalletCopyButton.ts', './UI_WalletDepositPage.ts', './UI_WalletDetailsPage.ts', './UI_WalletHistoryItem.ts', './UI_WalletHistoryPage.ts', './UI_WalletSelectButton1.ts', './UI_WalletSelectButton2.ts', './UI_WalletSelectCurrencyDialog.ts', './UI_WalletSelectNetworkDialog.ts', './UI_WalletShortcutButton.ts', './UI_WalletWarnItem.ts', './UI_WalletWithdrawConfirmDialog.ts', './UI_WalletWithdrawItem.ts', './UI_WalletWithdrawPage.ts', './UI_WalletWithdrawSuccessPage.ts', './WalletBinder.ts', './Functions.ts', './GRootMultipleInstances.ts', './GRootSingleInstance.ts', './GameExpressionDialog.ts', './PopupLoadingManager.ts', './TablePlayerTimeCountdown.ts', './CardTypePowerDialog.ts', './CardTypePowerItem.ts', './TexasChatAtPlayerItem.ts', './TexasChatBlockPlayerItem.ts', './TexasChatLayer.ts', './TexasChatMsgShortItem.ts', './TexasChatMstItemOther.ts', './TexasChatMstItemSelf.ts', './TexasMttInfoBlindsLayer.ts', './TexasMttInfoBlindsLayerItem.ts', './TexasMttInfoLayer.ts', './TexasMttInfoObserverItem.ts', './TexasMttInfoPrizesLayer.ts', './TexasMttInfoPrizesLayerItem.ts', './TexasMttInfoRankingLayer.ts', './TexasMttInfoRankingLayerItem.ts', './TexasMttInfoTablesLayer.ts', './TexasMttInfoTablesLayerItem.ts', './TexasMttAddonDialog.ts', './TexasMttCountdown.ts', './TexasMttRebuyDialog.ts', './TexasMttResultDialog.ts', './TexasMttWaitStartItem.ts', './TexasRetrospectDetailInfo.ts', './TexasRetrospectDetailLevel.ts', './TexasRetrospectDetailOp.ts', './TexasRetrospectDetailPlayer.ts', './TexasRetrospectDetailShow.ts', './TexasRetrospectDetailTop.ts', './TexasRetrospectInfo.ts', './TexasRetrospectInfoItem.ts', './TexasRetrospectLayer.ts', './TexasRetrospectPotsItem.ts', './TexasBuyinDialog.ts', './TexasCardTypeItem.ts', './TexasCardTypeLayer.ts', './TexasPlayerInfoLayer.ts', './TexasPopMenuLayer.ts', './TexasTableInfoLayer.ts', './TexasTableInfoLayerItem.ts', './TexasActionTag.ts', './TexasChipActionLayer.ts', './TexasGamePage.ts', './TexasMttWaitTipLayer.ts', './TexasOperatorLayer.ts', './TexasPlayerItem.ts', './TexasPlayerLayer.ts', './TexasPlayerOpenCardItem.ts', './TexasPokerLayer.ts', './TexasPopupLayer.ts', './TexasPositionConst.ts', './TexasRoomMenuLayer.ts', './TexasTableLayer.ts', './TexasTipLayer.ts', './GameWindowBase.ts', './GrootEx.ts', './LaunchPage.ts', './LobbyBoardBlindDialog.ts', './LobbyBoardBlindItem.ts', './LobbyBoardLayer.ts', './LobbyBoardPageItem.ts', './LobbyBoardPayoutStructure.ts', './LobbyDetailInfoPanal.ts', './LobbyEnteRankItem.ts', './LobbyEnterItem.ts', './LobbyEnterRankKoItem.ts', './LobbyEntryPanal.ts', './LobbyPrizeItem.ts', './LobbyPrizePanal.ts', './LobbyTableItem.ts', './LobbyTablePanal.ts', './LobbyDayLogin.ts', './GameRoomPageItem.ts', './LobbyHomeGame.ts', './LobbyHomeTask.ts', './LobbyHomeTaskItem.ts', './RoomItemMTT.ts', './RoomItemNLH.ts', './RoomItemPlus.ts', './TGPFreeGoldView.ts', './TGPLevelDialog.ts', './TouchCmpt.ts', './LobbyConst.ts', './LobbyHeadGroup.ts', './LobbyItemGame.ts', './LobbyItemHome.ts', './LobbyItemMarket.ts', './LobbyItemProfile.ts', './LobbyPage.ts', './LobbyMarketBuy.ts', './LobbyMarketMyOrder.ts', './LobbyMarketSell.ts', './MarkSellItem.ts', './MarketBuyDetailDialog.ts', './MarketBuyDialog.ts', './MarketBuyItem.ts', './MarketCreateOrderDialog.ts', './MarketOrderItem.ts', './MarketSellDetailDialog.ts', './MarketSellDialog.ts', './NoticeDetailPage.ts', './NoticeItem.ts', './NoticePage.ts', './HandCardDayItem.ts', './HandCardItem.ts', './HandCardReviewItem.ts', './HandCardReviewPage.ts', './ProfileHeadGroup.ts', './ProfileLanguagePage.ts', './LobbyInviteFriendItem.ts', './LobbyInviteFriendLayer.ts', './ChangeNickDialog.ts', './CoinGroup.ts', './HeadItem.ts', './SelectDefaultAvatarDialog.ts', './PokerCmpt.ts', './Avatar.ts', './CalendarDayItem.ts', './CalendarMonthItem.ts', './CalendarPage.ts', './CircularProgress.ts', './ConfirmBox.ts', './FSlider.ts', './GetRewardPage.ts', './GoldComponent.ts', './LoadEncryImage.ts', './NetImage.ts', './PublicLayer.ts', './ServerMaintenancePage.ts', './WalletDepositPage.ts', './WalletDetailsPage.ts', './WalletHistoryItem.ts', './WalletHistoryPage.ts', './WalletSelectCurrencyDialog.ts', './WalletSelectNetworkDialog.ts', './WalletWithdrawConfirmDialog.ts', './WalletWithdrawPage.ts', './WalletWithdrawSuccessPage.ts', './AudioManager.ts', './debug-view-runtime-control.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/MarketBuyDetailDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_MarketBuyDetailDialog.ts', './LanguageManage.ts', './TradeData.ts', './TradeProxy.ts', './CocosDevKit.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, EEnterType, GameWindowBase, UI_MarketBuyDetailDialog, LanguageManager, ETradeBookType, EOrderStatus, OrderStausString, TradeProxy, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_MarketBuyDetailDialog = module.default;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      ETradeBookType = module.ETradeBookType;
      EOrderStatus = module.EOrderStatus;
      OrderStausString = module.OrderStausString;
    }, function (module) {
      TradeProxy = module.TradeProxy;
    }, null, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f508aNEdDlCYIpOLpi6N5qj", "MarketBuyDetailDialog", undefined);
      var MarketBuyDetailDialog = exports('MarketBuyDetailDialog', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(MarketBuyDetailDialog, _GameWindowBase);
        function MarketBuyDetailDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_MarketBuyDetailDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'MarketBuyDetailDialog';
          _this.inputParams = void 0;
          return _this;
        }
        MarketBuyDetailDialog.create = function create(from) {
          return new MarketBuyDetailDialog(from);
        };
        var _proto = MarketBuyDetailDialog.prototype;
        _proto.onInit = function onInit() {
          this.onLanguageChange();
          this.pane.m_TypeValue.color = this.inputParams.side == ETradeBookType.buy ? color('#D25148') : color('#35B898');
          this.pane.m_TGPQuantity.text = "" + this.inputParams.quantity;
          this.pane.m_PriceText.text = Utils.toFormat(parseFloat("" + this.inputParams.price.value / this.inputParams.price.scale), 99, true);
          this.pane.m_TotalText.text = Utils.toFormat(parseFloat("" + this.inputParams.totalPrice.value / this.inputParams.totalPrice.scale), 99, true);
          var dialog = this.pane.m_frame;
          if (this.inputParams.status == EOrderStatus.hang) {
            dialog.m_buttonNum.selectedIndex = 2;
            dialog.m_btnCancel.text = LanguageManager.get('MARKET_UNLIST');
            dialog.m_btnCancel.onClick(this.onCancelCallBack.bind(this), this);
            dialog.m_btnConfirm.onClick(this.onConfiremCallBack.bind(this), this);
          } else {
            dialog.m_buttonNum.selectedIndex = 1;
            dialog.m_btnConfirm.onClick(this.onConfiremCallBack.bind(this), this);
          }
        };
        _proto.onLanguageChange = function onLanguageChange() {
          var strtyype = this.inputParams.side == ETradeBookType.sell ? 'MARKET_BUY' : 'MARKET_SELL';
          this.pane.m_TypeValue.text = LanguageManager.get(strtyype) + " TGP";
          this.pane.m_StatusText.text = LanguageManager.get(OrderStausString[this.inputParams.status]);
        };
        _proto.onCancelCallBack = function onCancelCallBack() {
          var _this2 = this;
          TradeProxy.inst.cancelOrder(this.inputParams.id, function (netdata) {
            if (netdata.isRetSuccess()) {
              _this2.grootInst.showCenterTip('COMMON_SUCCESS');
              _this2.hide();
            }
          });
        };
        _proto.onConfiremCallBack = function onConfiremCallBack() {
          this.hide();
        };
        return MarketBuyDetailDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketBuyDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_MarketBuyDialog.ts', './Utils.ts', './TradeProxy.ts', './RoleData.ts', './LanguageManage.ts'], function (exports) {
  var _inheritsLoose, cclegacy, EEnterType, GameWindowBase, UI_MarketBuyDialog, Utils, TradeProxy, RoleData, LanguageManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_MarketBuyDialog = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      TradeProxy = module.TradeProxy;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      LanguageManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6ecb7XalcpCgrTFui0opIzT", "MarketBuyDialog", undefined);
      var MarketBuyDialog = exports('MarketBuyDialog', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(MarketBuyDialog, _GameWindowBase);
        function MarketBuyDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_MarketBuyDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'MarketBuyDialog';
          _this.inputParams = void 0;
          return _this;
        }
        MarketBuyDialog.create = function create(from) {
          return new MarketBuyDialog(from);
        };
        var _proto = MarketBuyDialog.prototype;
        _proto.onInit = function onInit() {
          var dialog = this.pane.m_frame;
          dialog.m_btnConfirm.onClick(this.onBtnConfirm.bind(this), this);
          this.initView();
        };
        _proto.initView = function initView() {
          this.pane.m_PriceText.text = Utils.toFormat(parseFloat("" + this.inputParams.price.value / this.inputParams.price.scale), 99, true);
          this.pane.m_TotalPriceText.text = Utils.toFormat(parseFloat("" + this.inputParams.totalPrice.value / this.inputParams.totalPrice.scale), 99, true);
          this.pane.m_QuantityText.text = Utils.toFormat(this.inputParams.quantity);
        };
        _proto.onBtnConfirm = function onBtnConfirm() {
          var _this2 = this;
          var data = this.inputParams;
          var total = parseFloat("" + data.price.value / data.price.scale);
          if (total > RoleData.inst.cash) {
            this.grootInst.showCenterTip('TXT_1222');
            return;
          }
          TradeProxy.inst.buy(this.inputParams.id, function (netdata) {
            if (netdata.isRetSuccess()) {
              _this2.grootInst.showCenterTip('TXT_176');
            } else if (netdata.getRetCode() == 15009 || netdata.getRetCode() == 15008) {
              _this2.grootInst.showCenterTip('TXT_1222');
            } else {
              _this2.grootInst.showCenterTip(Utils.formatStr(LanguageManager.get('MARKET_ERROR'), netdata.getRetCode()));
            }
          });
          this.hide();
        };
        return MarketBuyDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketBuyItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_MarketBuyItem.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, CustomFguiClass, UI_MarketBuyItem, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_MarketBuyItem = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "f61ba3Pup9JV51JM2mDEZme", "MarketBuyItem", undefined);
      var MarketBuyItem = exports('MarketBuyItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_MarketBuyItem) {
        _inheritsLoose(MarketBuyItem, _UI_MarketBuyItem);
        function MarketBuyItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_MarketBuyItem.call.apply(_UI_MarketBuyItem, [this].concat(args)) || this;
          _this._data = null;
          return _this;
        }
        var _proto = MarketBuyItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_MarketBuyItem.prototype.onConstruct.call(this);
          this.name = 'MarketBuyItem';
        };
        _proto.setData = function setData(data) {
          this._data = data;
          this.m_TgpValue.text = Utils.toFormat(data.quantity);
          this.m_PriceValue.text = Utils.toFormat(parseFloat("" + data.price.value / data.price.scale), 99, false);
          this.m_TotalValue.text = Utils.toFormat(parseFloat("" + data.totalPrice.value / data.totalPrice.scale), 99, false);
        };
        return MarketBuyItem;
      }(UI_MarketBuyItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketCreateOrderDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GameWindowBase.ts', './UI_MarketCreateOrderDialog.ts', './TradeData.ts', './Utils.ts', './RoleData.ts', './LanguageManage.ts', './TradeProxy.ts'], function (exports) {
  var _inheritsLoose, cclegacy, EditBox, Color, sys, UIObjectFactory, EEnterType, GameWindowBase, UI_MarketCreateOrderDialog, TradeData, ETradeBookType, Utils, RoleData, LanguageManager, TradeProxy;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      EditBox = module.EditBox;
      Color = module.Color;
      sys = module.sys;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_MarketCreateOrderDialog = module.default;
    }, function (module) {
      TradeData = module.TradeData;
      ETradeBookType = module.ETradeBookType;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      TradeProxy = module.TradeProxy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "28b1bwHDPZMno5a/3A5oEmw", "MarketCreateOrderDialog", undefined);
      var UI_MarketCreateOrderDialogEx = /*#__PURE__*/function (_UI_MarketCreateOrder) {
        _inheritsLoose(UI_MarketCreateOrderDialogEx, _UI_MarketCreateOrder);
        function UI_MarketCreateOrderDialogEx() {
          return _UI_MarketCreateOrder.apply(this, arguments) || this;
        }
        var _proto = UI_MarketCreateOrderDialogEx.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_MarketCreateOrder.prototype.onConstruct.call(this);
          if (sys.isBrowser && sys.os != sys.OS.IOS) {
            // @ts-ignore
            this.m_BuyInputPrice._editBox.useStyle = true;
            // @ts-ignore
            this.m_BuyInputQuantity._editBox.useStyle = true;
            // @ts-ignore
            this.m_SellInputPrice._editBox.useStyle = true;
            // @ts-ignore
            this.m_SellInputQuantity._editBox.useStyle = true;
          }
        };
        return UI_MarketCreateOrderDialogEx;
      }(UI_MarketCreateOrderDialog);
      var MarketCreateOrderDialog = exports('MarketCreateOrderDialog', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(MarketCreateOrderDialog, _GameWindowBase);
        function MarketCreateOrderDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_MarketCreateOrderDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'MarketCreateOrderDialog';
          _this.pageItemIdx = ETradeBookType.buy;
          return _this;
        }
        MarketCreateOrderDialog.create = function create(from) {
          UIObjectFactory.setExtension(UI_MarketCreateOrderDialogEx.URL, UI_MarketCreateOrderDialogEx);
          return new MarketCreateOrderDialog(from);
        };
        var _proto2 = MarketCreateOrderDialog.prototype;
        _proto2.onInit = function onInit() {
          //buy
          this.pane.m_BuyInputPrice.on(EditBox.EventType.EDITING_DID_ENDED, this.onBuyInputPrice.bind(this), this);
          this.pane.m_BuyInputQuantity.on(EditBox.EventType.EDITING_DID_ENDED, this.onBuyInputQuantity.bind(this), this);
          this.pane.m_BuyTotal.text = '$0';
          this.pane.m_BuyAvaliableText.text = '$0';
          this.pane.m_BuyErrTips.visible = false;
          this.pane.m_BuyAvaliableText.text = Utils.toFormat(RoleData.inst.cash, 2, true);

          //sell
          this.pane.m_SellInputPrice.on(EditBox.EventType.EDITING_DID_ENDED, this.onSellInputPrice.bind(this), this);
          this.pane.m_SellInputQuantity.on(EditBox.EventType.EDITING_DID_ENDED, this.onSellInputQuantity.bind(this), this);
          this.pane.m_SellTotalText.text = '$0';
          this.pane.m_SellAvaliableText.text = '$0';
          this.pane.m_SellAvaliableErrTips.visible = false;
          this.pane.m_FeeErrTps.visible = false;
          this.pane.m_SellAvaliableText.text = Utils.toFormat(RoleData.inst.chip);
          this.pane.m_FeeText.text = "$0" + TradeData.inst.rate + "%";
          this.pane.m_BtnConfirm.onClick(this.onBtnConfirm.bind(this), this);
          this.pane.m_OrderControl.onChanged(this.onOrderChangee.bind(this), this);
          this.pane.m_BtnConfirm.enabled = false;
        };
        _proto2.onOrderChangee = function onOrderChangee() {
          var index = this.pane.m_OrderControl.selectedIndex;
          if (index == 0) {
            this.pageItemIdx = ETradeBookType.buy;
            this.onBuyInputPrice();
            this.onBuyInputQuantity();
            // this.pane.m_BtnConfirm.m_iconbg.color = color('#383B4F');
            this.pane.m_BtnConfirm.title = LanguageManager.get('MARKET_BUY');
          } else if (index == 1) {
            this.pageItemIdx = ETradeBookType.sell;
            this.onSellInputPrice();
            this.onSellInputQuantity();
            // this.pane.m_BtnConfirm.m_iconbg.color = color('#EB4B6D');
            this.pane.m_BtnConfirm.title = LanguageManager.get('MARKET_SELL');
          }
        };
        _proto2.onBuyInputPrice = function onBuyInputPrice() {
          var strprice = this.pane.m_BuyInputPrice.text.trim();
          if (!strprice || strprice == '') {
            strprice = '0';
            this.checkTotalPrice(0, 0);
            return;
          }
          var strquantity = this.pane.m_BuyInputQuantity.text.trim();
          if (!strquantity || strquantity == '') {
            strquantity = '0';
            this.checkTotalPrice(0, 0);
            return;
          }
          this.checkTotalPrice(parseFloat(strprice), parseInt(strquantity));
          this.showErrBuyTips();
        };
        _proto2.onBuyInputQuantity = function onBuyInputQuantity() {
          var strquantity = this.pane.m_BuyInputQuantity.text.trim();
          if (!strquantity || strquantity == '') {
            strquantity = '0';
            this.checkTotalPrice(0, 0);
            return;
          }
          var strprice = this.pane.m_BuyInputPrice.text.trim();
          if (!strprice || strprice == '') {
            strprice = '0';
            this.checkTotalPrice(0, 0);
            return;
          }
          this.checkTotalPrice(parseFloat(strprice), parseInt(strquantity));
          this.showErrBuyTips();
        };
        _proto2.getTotalPrice = function getTotalPrice() {
          var strquantity = this.pane.m_BuyInputQuantity.text.trim();
          var strprice = this.pane.m_BuyInputPrice.text.trim();

          //js精度问题 这里去保留小数点位数
          var decimal = Utils.getDecimalPlaces(strprice) + Utils.getDecimalPlaces(strquantity);
          var total = parseFloat((Number(strprice) * Number(strquantity)).toFixed(decimal));
          return total;
        };
        _proto2.checkTotalPrice = function checkTotalPrice(price, quantity) {
          if (price == 0 || quantity == 0) {
            this.pane.m_BuyTotal.text = '$0';
          }
          this.pane.m_BuyErrTips.visible = false;
          this.pane.m_BtnConfirm.enabled = false;
          this.pane.m_BuyTotal.text = Utils.toFormat(this.getTotalPrice(), 99, true);
        };
        _proto2.showErrBuyTips = function showErrBuyTips() {
          this.pane.m_BuyErrTips.visible = true;
          this.pane.m_BtnConfirm.enabled = false;
          var total = this.getTotalPrice();
          if (total > RoleData.inst.cash) {
            this.pane.m_BuyErrTips.text = LanguageManager.get('TXT_1222');
            return;
          }
          if (total < 1) {
            this.pane.m_BuyTotal.text = '< $1';
            this.pane.m_BuyErrTips.text = LanguageManager.get('MARKET_TIPS3');
            return;
          }
          var b2deci = Utils.getDecimalPlaces(total.toString()) > 2;
          if (b2deci) {
            this.pane.m_BuyErrTips.text = LanguageManager.get('MARKET_TIPS2');
            return;
          }
          this.pane.m_BuyErrTips.visible = false;
          this.pane.m_BtnConfirm.enabled = true;
        }

        /****************sell */;
        _proto2.onSellInputPrice = function onSellInputPrice() {
          var strprice = this.pane.m_SellInputPrice.text.trim();
          if (!strprice || strprice == '') {
            strprice = '0';
            this.checkSellTotalPrice(0, 0);
            return;
          }
          var strquantity = this.pane.m_SellInputQuantity.text.trim();
          if (!strquantity || strquantity == '') {
            strquantity = '0';
            this.checkSellTotalPrice(0, 0);
            return;
          }
          this.checkSellTotalPrice(parseFloat(strprice), parseInt(strquantity));
          this.showErrSellTips();
        };
        _proto2.onSellInputQuantity = function onSellInputQuantity() {
          var strquantity = this.pane.m_SellInputQuantity.text.trim();
          if (!strquantity || strquantity == '') {
            strquantity = '0';
            this.checkSellTotalPrice(0, 0);
            return;
          }
          var strprice = this.pane.m_SellInputPrice.text.trim();
          if (!strprice || strprice == '') {
            strprice = '0';
            this.checkSellTotalPrice(0, 0);
            return;
          }
          this.checkSellTotalPrice(parseFloat(strprice), parseInt(strquantity));
          this.showErrSellTips();
        };
        _proto2.getSellTotalPrice = function getSellTotalPrice() {
          var strquantity = this.pane.m_SellInputQuantity.text.trim();
          var strprice = this.pane.m_SellInputPrice.text.trim();

          //js精度问题 这里去保留小数点位数
          var decimal = Utils.getDecimalPlaces(strprice) + Utils.getDecimalPlaces(strquantity);
          var total = parseFloat((Number(strprice) * Number(strquantity)).toFixed(decimal));
          return total;
        };
        _proto2.checkSellTotalPrice = function checkSellTotalPrice(price, quantity) {
          if (price == 0 || quantity == 0) {
            this.pane.m_SellTotalText.text = '$0';
          }
          this.pane.m_SellAvaliableErrTips.visible = false;
          this.pane.m_BtnConfirm.enabled = false;
          this.pane.m_SellTotalText.text = Utils.toFormat(this.getSellTotalPrice(), 99, true);
          var fee = Math.ceil(this.getSellTotalPrice() * TradeData.inst.rate) / 100;
          this.pane.m_FeeText.text = Utils.toFormat(fee, 99, true) + "(" + TradeData.inst.rate + "%)";
        };
        _proto2.showErrSellTips = function showErrSellTips() {
          this.pane.m_SellAvaliableErrTips.visible = true;
          this.pane.m_BtnConfirm.enabled = false;
          var strquantity = this.pane.m_SellInputQuantity.text.trim();
          if (Number(strquantity) > RoleData.inst.chip) {
            this.pane.m_SellInputQuantity.color = Color.RED.clone();
            this.pane.m_SellAvaliableErrTips.text = LanguageManager.get('TXT_1222');
            return;
          }
          var total = this.getSellTotalPrice();
          if (total < 1) {
            this.pane.m_SellTotalText.text = '< $1';
            this.pane.m_FeeText.text = '0';
            this.pane.m_SellAvaliableErrTips.text = LanguageManager.get('MARKET_TIPS3');
            return;
          }
          var b2deci = Utils.getDecimalPlaces(total.toString()) > 2;
          if (b2deci) {
            this.pane.m_FeeText.text = '0';
            this.pane.m_SellAvaliableErrTips.text = LanguageManager.get('MARKET_TIPS2');
            return;
          }
          this.pane.m_SellAvaliableErrTips.visible = false;
          this.pane.m_BtnConfirm.enabled = true;
          this.pane.m_SellInputQuantity.color = Color.WHITE.clone();
          // if (this.pageItemIdx == ETradeBookType.buy) {
          //     this.pane.m_BtnConfirm.m_iconbg.color = color('#EB4B6D');
          // } else if (this.pageItemIdx == ETradeBookType.sell) {
          //     this.pane.m_BtnConfirm.m_iconbg.color = color('#383B4F');
          // }
        }

        ///////////////////////////////////////////////
        ;

        _proto2.onBtnConfirm = function onBtnConfirm() {
          if (this.pageItemIdx == ETradeBookType.buy) {
            var strquantity = this.pane.m_BuyInputQuantity.text.trim();
            var strprice = this.pane.m_BuyInputPrice.text.trim();
            TradeProxy.inst.createOrder(ETradeBookType.sell, Number(strprice), Number(strquantity), this.onCreateOrderBuyCB.bind(this));
          } else if (this.pageItemIdx == ETradeBookType.sell) {
            var _strquantity = this.pane.m_SellInputQuantity.text.trim();
            var _strprice = this.pane.m_SellInputPrice.text.trim();
            TradeProxy.inst.createOrder(ETradeBookType.buy, Number(_strprice), Number(_strquantity), this.onCreateOrderBuyCB.bind(this));
          }
        };
        _proto2.onCreateOrderBuyCB = function onCreateOrderBuyCB(netdata) {
          if (netdata.isRetSuccess()) {
            this.grootInst.showCenterTip('TXT_1914');
            this.hide();
          } else if (netdata.getRetCode() == 15014) {
            this.grootInst.showCenterTip('MARKET_TIPS3');
          } else if (netdata.getRetCode() == 15009 || netdata.getRetCode() == 15008) {
            this.grootInst.showCenterTip('TXT_1222');
          } else {
            this.grootInst.showCenterTip(Utils.formatStr(LanguageManager.get('MARKET_ERROR'), netdata.getRetCode()));
          }
        };
        return MarketCreateOrderDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketOrderItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_MarketOrderItem.ts', './Utils.ts', './TradeData.ts', './LanguageManage.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, CustomFguiClass, UI_MarketOrderItem, Utils, ETradeBookType, OrderStausString, LanguageManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_MarketOrderItem = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      ETradeBookType = module.ETradeBookType;
      OrderStausString = module.OrderStausString;
    }, function (module) {
      LanguageManager = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "fdbf4SXcB1I1rgQxBc6sLjT", "MarketOrderItem", undefined);
      var MarketOrderItem = exports('MarketOrderItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_MarketOrderItem) {
        _inheritsLoose(MarketOrderItem, _UI_MarketOrderItem);
        function MarketOrderItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_MarketOrderItem.call.apply(_UI_MarketOrderItem, [this].concat(args)) || this;
          _this._data = null;
          return _this;
        }
        var _proto = MarketOrderItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_MarketOrderItem.prototype.onConstruct.call(this);
          this.name = 'MarketOrderItem';
        };
        _proto.setData = function setData(idx, data) {
          this._data = data;
          this.m_TgpValue.text = Utils.toFormat(data.quantity);
          this.m_PriceValue.text = Utils.toFormat(parseFloat("" + data.price.value / data.price.scale), 99, false);
          this.m_TotalValue.text = Utils.toFormat(parseFloat("" + data.totalPrice.value / data.totalPrice.scale), 99, false);
          this.onLanguageChange();
          this.m_OperateText.color = data.side == ETradeBookType.buy ? color('#DA3C3C') : color('#29AB5D');
          this.m_bg.color = color(idx % 2 == 0 ? '#212332' : '#1B1D29');
        };
        _proto.onLanguageChange = function onLanguageChange() {
          this.m_OperateText.text = LanguageManager.get(this._data.side == ETradeBookType.buy ? 'MARKET_SELL' : 'MARKET_BUY');
          this.m_OrderPlaced.text = LanguageManager.get(OrderStausString[this._data.status]);
        };
        return MarketOrderItem;
      }(UI_MarketOrderItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketSellDetailDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_MarketSellDetailDialog.ts', './TradeData.ts', './LanguageManage.ts', './Utils.ts', './TradeProxy.ts', './RoleData.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, EEnterType, GameWindowBase, UI_MarketSellDetailDialog, ETradeBookType, TradeData, EOrderStatus, OrderStausString, LanguageManager, Utils, TradeProxy, RoleData;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_MarketSellDetailDialog = module.default;
    }, function (module) {
      ETradeBookType = module.ETradeBookType;
      TradeData = module.TradeData;
      EOrderStatus = module.EOrderStatus;
      OrderStausString = module.OrderStausString;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      TradeProxy = module.TradeProxy;
    }, function (module) {
      RoleData = module.RoleData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e7a39kmZBpBNKuRLJMd4Bfe", "MarketSellDetailDialog", undefined);
      var MarketSellDetailDialog = exports('MarketSellDetailDialog', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(MarketSellDetailDialog, _GameWindowBase);
        function MarketSellDetailDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_MarketSellDetailDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'MarketSellDetailDialog';
          _this.inputParams = void 0;
          return _this;
        }
        MarketSellDetailDialog.create = function create(from) {
          return new MarketSellDetailDialog(from);
        };
        var _proto = MarketSellDetailDialog.prototype;
        _proto.onInit = function onInit() {
          this.onLanguageChange();
          this.pane.m_TypeVaule.color = this.inputParams.side == ETradeBookType.buy ? color('#D25148') : color('#35B898');
          this.pane.m_TGPQuantity.text = "" + this.inputParams.quantity;
          this.pane.m_PriceText.text = Utils.toFormat(parseFloat("" + this.inputParams.price.value / this.inputParams.price.scale), 99, true);
          this.pane.m_TotalText.text = Utils.toFormat(parseFloat("" + this.inputParams.totalPrice.value / this.inputParams.totalPrice.scale), 99, true);
          var fee = this.inputParams.feeNum.value / this.inputParams.feeNum.scale;
          this.pane.m_FeeText.text = Utils.toFormat(fee, 99, true) + "(" + TradeData.inst.rate + "%)";
          this.pane.m_AmountText.text = Utils.toFormat(RoleData.inst.cash, 2, true);
          var dialog = this.pane.m_frame;
          if (this.inputParams.status == EOrderStatus.hang) {
            dialog.m_buttonNum.selectedIndex = 2;
            dialog.m_btnCancel.text = LanguageManager.get('MARKET_UNLIST');
            dialog.m_btnCancel.onClick(this.onCancelCallBack.bind(this), this);
            dialog.m_btnConfirm.onClick(this.onConfiremCallBack.bind(this), this);
          } else {
            dialog.m_buttonNum.selectedIndex = 1;
            dialog.m_btnConfirm.onClick(this.onConfiremCallBack.bind(this), this);
          }
        };
        _proto.onLanguageChange = function onLanguageChange() {
          var strtyype = this.inputParams.side == ETradeBookType.sell ? 'MARKET_BUY' : 'MARKET_SELL';
          this.pane.m_TypeVaule.text = LanguageManager.get(strtyype) + " TGP";
          this.pane.m_StatusText.text = LanguageManager.get(OrderStausString[this.inputParams.status]);
        };
        _proto.onCancelCallBack = function onCancelCallBack() {
          var _this2 = this;
          TradeProxy.inst.cancelOrder(this.inputParams.id, function (netdata) {
            if (netdata.isRetSuccess()) {
              _this2.grootInst.showCenterTip('COMMON_SUCCESS');
              _this2.hide();
            }
          });
        };
        _proto.onConfiremCallBack = function onConfiremCallBack() {
          this.hide();
        };
        return MarketSellDetailDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketSellDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_MarketSellDialog.ts', './Utils.ts', './TradeProxy.ts', './LanguageManage.ts', './RoleData.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, EEnterType, GameWindowBase, UI_MarketSellDialog, Utils, TradeProxy, LanguageManager, RoleData;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_MarketSellDialog = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      TradeProxy = module.TradeProxy;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      RoleData = module.RoleData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c5ed3iZ55hMOZn1KiFwVi3D", "MarketSellDialog", undefined);
      var MarketSellDialog = exports('MarketSellDialog', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(MarketSellDialog, _GameWindowBase);
        function MarketSellDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_MarketSellDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'MarketSellDialog';
          _this.inputParams = void 0;
          return _this;
        }
        MarketSellDialog.create = function create(from) {
          return new MarketSellDialog(from);
        };
        var _proto = MarketSellDialog.prototype;
        _proto.onInit = function onInit() {
          var dialog = this.pane.m_frame;
          dialog.m_btnConfirm.onClick(this.onBtnConfirm.bind(this), this);
          dialog.m_btnConfirm.m_bg.color = color('#EB4B6D');
          this.initView();
        };
        _proto.onLanguageChange = function onLanguageChange() {
          this.pane.m_TotalTitle.text = LanguageManager.get('MARKET_TOTAL') + ": ";
          this.pane.m_FeeTitle.text = LanguageManager.get('WALLET_FEE') + ": ";
        };
        _proto.initView = function initView() {
          this.pane.m_PriceText.text = Utils.toFormat(parseFloat("" + this.inputParams.price.value / this.inputParams.price.scale), 99, true);
          this.onLanguageChange();
          var total = parseFloat("" + this.inputParams.totalPrice.value / this.inputParams.totalPrice.scale);
          var totalvalue = Utils.toFormat(total, 99, true);
          this.pane.m_TotalVaule.text = "" + totalvalue;
          var fee = parseFloat("" + this.inputParams.feeNum.value / this.inputParams.feeNum.scale);
          var feevalue = Utils.toFormat(fee, 99, true);
          this.pane.m_FeeValue.text = feevalue + " (" + this.inputParams.feeRate + "%)";
          this.pane.m_QuantityText.text = Utils.toFormat(this.inputParams.quantity);
          var decimal = Utils.getDecimalPlaces("" + total) + Utils.getDecimalPlaces("" + fee);
          this.pane.m_AmountText.text = Utils.toFormat(parseFloat((total - fee).toFixed(decimal)), 99, true);
        };
        _proto.onBtnConfirm = function onBtnConfirm() {
          var _this2 = this;
          var data = this.inputParams;
          var total = parseFloat("" + data.price.value / data.price.scale);
          if (total > RoleData.inst.chip) {
            this.grootInst.showCenterTip('TXT_1222');
            return;
          }
          TradeProxy.inst.sell(this.inputParams.id, function (netdata) {
            if (netdata.isRetSuccess()) {
              _this2.grootInst.showCenterTip('TXT_176');
            } else if (netdata.getRetCode() == 15009 || netdata.getRetCode() == 15008) {
              _this2.grootInst.showCenterTip('TXT_1222');
            } else {
              _this2.grootInst.showCenterTip(Utils.formatStr(LanguageManager.get('MARKET_ERROR'), netdata.getRetCode()));
            }
            _this2.hide();
          });
        };
        return MarketSellDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarkSellItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_MarketSellItem.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, CustomFguiClass, UI_MarketSellItem, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_MarketSellItem = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "5089d5rCiVL46yjVWlq1cl+", "MarkSellItem", undefined);
      var MarkSellItem = exports('MarkSellItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_MarketSellItem) {
        _inheritsLoose(MarkSellItem, _UI_MarketSellItem);
        function MarkSellItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_MarketSellItem.call.apply(_UI_MarketSellItem, [this].concat(args)) || this;
          _this._data = null;
          return _this;
        }
        var _proto = MarkSellItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_MarketSellItem.prototype.onConstruct.call(this);
          this.name = 'MarkSellItem';
        };
        _proto.setData = function setData(data) {
          this._data = data;
          this.m_TgpValue.text = Utils.toFormat(data.quantity);
          this.m_PriceValue.text = Utils.toFormat(parseFloat("" + data.price.value / data.price.scale), 99, false);
          this.m_TotalValue.text = Utils.toFormat(parseFloat("" + data.totalPrice.value / data.totalPrice.scale), 99, false);
        };
        return MarkSellItem;
      }(UI_MarketSellItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MixPanelBridge.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './mixpanel.cjs.mjs_cjs=&original=.js', './EventReporter.ts', './TelegramDeviceBridge.ts', './GameConfig.ts', './CocosDevKit.ts', './GameConst.ts', './mixpanel.cjs.js', './Logger.ts'], function (exports) {
  var _createClass, cclegacy, sys, EventReporter, TelegramDeviceBridge, GameConfig, GameConst, _cjsExports, Log;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, null, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "268ccg17IdJGZlKrmy9b7Sw", "MixPanelBridge", undefined);

      /**
       * @see https://docs.mixpanel.com/docs/what-is-mixpanel
       */
      var MixPanelBridge = exports('MixPanelBridge', /*#__PURE__*/function () {
        function MixPanelBridge() {
          this.inited = false;
        }
        var _proto = MixPanelBridge.prototype;
        _proto.init = function init() {
          if (this.inited) return;
          if (GameConfig.bundleName != GameConst.EBundleName.TGPoker) return;
          _cjsExports.init(GameConfig.curConfig.mixpanelToken, {
            debug: true,
            track_pageview: true,
            persistence: 'localStorage'
          });
          var events = EventReporter.Event.mixpanel;
          for (var eventName in events) {
            if (events.hasOwnProperty(eventName)) {
              EventReporter.ReportEventTarget.on(eventName, this.onReportEvent.bind(this, eventName), this);
            }
          }
          this.inited = true;
        };
        _proto.onReportEvent = function onReportEvent(eventName, data) {
          if (!data) {
            data = {};
          }
          switch (eventName) {
            case EventReporter.Event.mixpanel.LOGIN:
              data.TGVersion = TelegramDeviceBridge.Instance.version;
              if (TelegramDeviceBridge.Instance.isTMA) {
                if (TelegramDeviceBridge.Instance.userInfo) {
                  data.LanguageCode = TelegramDeviceBridge.Instance.userInfo.languageCode;
                } else {
                  data.LanguageCode = sys.languageCode;
                }
              } else {
                data.LanguageCode = sys.languageCode;
              }
              if (globalThis.navigator) {
                if (globalThis.navigator['connection']) {
                  var connection = globalThis.navigator['connection'];
                  data.NetType = (connection.type ? connection.type : 'unknown') + "_" + (connection.effectiveType ? connection.effectiveType : 'unknown');
                }
              }
              break;
          }
          Log.info.log('onReportEvent', eventName, data);
          return;
        };
        _proto.setPlayer = function setPlayer(playerID, nick) {
          _cjsExports.identify(playerID.toString());
          _cjsExports.people.set({
            name: nick,
            playerid: playerID.toString()
          });
        };
        _createClass(MixPanelBridge, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new MixPanelBridge();
            }
            return this._instance;
          }
        }]);
        return MixPanelBridge;
      }());
      MixPanelBridge._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mobx.ts", ['cc', './env'], function (exports) {
  var cclegacy, DEV;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DEV = module.DEV;
    }],
    execute: function () {
      exports({
        FlowCancellationError: FlowCancellationError,
        _allowStateChanges: allowStateChanges,
        _allowStateChangesInsideComputed: runInAction,
        _allowStateReadsEnd: allowStateReadsEnd,
        _allowStateReadsStart: allowStateReadsStart,
        _endAction: _endAction,
        _getAdministration: getAdministration,
        _getGlobalState: getGlobalState,
        _interceptReads: interceptReads,
        _isComputingDerivation: isComputingDerivation,
        _resetGlobalState: resetGlobalState,
        _startAction: _startAction,
        autorun: autorun,
        configure: configure,
        createAtom: createAtom,
        defineProperty: apiDefineProperty,
        entries: entries,
        extendObservable: extendObservable,
        flowResult: flowResult,
        get: get,
        getAtom: getAtom,
        getDebugName: getDebugName,
        getDependencyTree: getDependencyTree,
        getObserverTree: getObserverTree,
        has: has,
        intercept: intercept,
        isAction: isAction,
        isComputed: isComputed,
        isComputedProp: isComputedProp,
        isFlow: isFlow,
        isFlowCancellationError: isFlowCancellationError,
        isObservable: isObservable,
        isObservableArray: isObservableArray,
        isObservableObject: isObservableObject,
        isObservableProp: isObservableProp,
        keys: keys,
        makeAutoObservable: makeAutoObservable,
        makeObservable: makeObservable,
        observe: observe,
        onBecomeObserved: onBecomeObserved,
        onBecomeUnobserved: onBecomeUnobserved,
        onReactionError: onReactionError,
        ownKeys: apiOwnKeys,
        reaction: reaction,
        remove: remove,
        runInAction: runInAction,
        set: set,
        spy: spy,
        toJS: toJS,
        trace: trace,
        transaction: transaction,
        untracked: untracked,
        values: values,
        when: when
      });
      cclegacy._RF.push({}, "e92d4yWC/xJRYFZFUMjrVVY", "mobx", undefined);
      function die(error) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        throw new Error(typeof error === 'number' ? '[mobx] minified error nr: ' + error + (args.length ? ' ' + args.map(String).join(',') : '') + '. Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts' : '[mobx] ' + error);
      }
      var mockGlobal = {};
      function getGlobal() {
        if (typeof globalThis !== 'undefined') {
          return globalThis;
        }
        if (typeof window !== 'undefined') {
          return window;
        }
        if (typeof global !== 'undefined') {
          return global;
        }
        if (typeof self !== 'undefined') {
          return self;
        }
        return mockGlobal;
      }

      // We shorten anything used > 5 times
      var assign = Object.assign;
      var getDescriptor = Object.getOwnPropertyDescriptor;
      var defineProperty = Object.defineProperty;
      var objectPrototype = Object.prototype;
      var EMPTY_ARRAY = [];
      Object.freeze(EMPTY_ARRAY);
      var EMPTY_OBJECT = {};
      Object.freeze(EMPTY_OBJECT);
      var hasProxy = typeof Proxy !== 'undefined';
      var plainObjectString = /*#__PURE__*/Object.toString();
      function assertProxies() {
        if (!hasProxy) {
          die('Proxy not available');
        }
      }
      /**
       * Makes sure that the provided function is invoked at most once.
       */
      function once(func) {
        var invoked = false;
        return function () {
          if (invoked) {
            return;
          }
          invoked = true;
          return func.apply(this, arguments);
        };
      }
      var noop = function noop() {};
      function isFunction(fn) {
        return typeof fn === 'function';
      }
      function isStringish(value) {
        var t = typeof value;
        switch (t) {
          case 'string':
          case 'symbol':
          case 'number':
            return true;
        }
        return false;
      }
      function isObject(value) {
        return value !== null && typeof value === 'object';
      }
      function isPlainObject(value) {
        if (!isObject(value)) {
          return false;
        }
        var proto = Object.getPrototypeOf(value);
        if (proto == null) {
          return true;
        }
        var protoConstructor = Object.hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof protoConstructor === 'function' && protoConstructor.toString() === plainObjectString;
      }
      // https://stackoverflow.com/a/37865170
      function isGenerator(obj) {
        var constructor = obj == null ? void 0 : obj.constructor;
        if (!constructor) {
          return false;
        }
        if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) {
          return true;
        }
        return false;
      }
      function addHiddenProp(object, propName, value) {
        defineProperty(object, propName, {
          enumerable: false,
          writable: true,
          configurable: true,
          value: value
        });
      }
      function addHiddenFinalProp(object, propName, value) {
        defineProperty(object, propName, {
          enumerable: false,
          writable: false,
          configurable: true,
          value: value
        });
      }
      function createInstanceofPredicate(name, theClass) {
        var propName = 'isMobX' + name;
        theClass.prototype[propName] = true;
        return function (x) {
          return isObject(x) && x[propName] === true;
        };
      }
      function isES6Map(thing) {
        return thing instanceof Map;
      }
      function isES6Set(thing) {
        return thing instanceof Set;
      }
      var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== 'undefined';
      /**
       * Returns the following: own enumerable keys and symbols.
       */
      function getPlainObjectKeys(object) {
        var keys = Object.keys(object);
        // Not supported in IE, so there are not going to be symbol props anyway...
        if (!hasGetOwnPropertySymbols) {
          return keys;
        }
        var symbols = Object.getOwnPropertySymbols(object);
        if (!symbols.length) {
          return keys;
        }
        return [].concat(keys, symbols.filter(function (s) {
          return objectPrototype.propertyIsEnumerable.call(object, s);
        }));
      }
      // From Immer utils
      // Returns all own keys, including non-enumerable and symbolic
      var ownKeys = typeof Reflect !== 'undefined' && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {
        return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
      } : /* istanbul ignore next */Object.getOwnPropertyNames;
      function toPrimitive(value) {
        return value === null ? null : typeof value === 'object' ? '' + value : value;
      }
      function hasProp(target, prop) {
        return objectPrototype.hasOwnProperty.call(target, prop);
      }
      // From Immer utils
      var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {
        // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
        var res = {};
        // Note: without polyfill for ownKeys, symbols won't be picked up
        ownKeys(target).forEach(function (key) {
          res[key] = getDescriptor(target, key);
        });
        return res;
      };
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, 'prototype', {
          writable: false
        });
        return Constructor;
      }
      function _extends() {
        _extends = Object.assign ? Object.assign.bind() : function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };
        return _setPrototypeOf(o, p);
      }
      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === 'Object' && o.constructor) n = o.constructor.name;
        if (n === 'Map' || n === 'Set') return Array.from(o);
        if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function _createForOfIteratorHelperLoose(o, allowArrayLike) {
        var it = typeof Symbol !== 'undefined' && o[Symbol.iterator] || o['@@iterator'];
        if (it) return (it = it.call(o)).next.bind(it);
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === 'number') {
          if (it) o = it;
          var i = 0;
          return function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          };
        }
        throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== 'object' || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== undefined) {
          var res = prim.call(input, hint || 'default');
          if (typeof res !== 'object') return res;
          throw new TypeError('@@toPrimitive must return a primitive value.');
        }
        return (hint === 'string' ? String : Number)(input);
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, 'string');
        return typeof key === 'symbol' ? key : String(key);
      }
      var storedAnnotationsSymbol = /*#__PURE__*/Symbol('mobx-stored-annotations');
      /**
       * Creates a function that acts as
       * - decorator
       * - annotation object
       */
      function createDecoratorAnnotation(annotation) {
        function decorator(target, property) {
          if (is20223Decorator(property)) {
            return annotation.decorate_20223_(target, property);
          } else {
            storeAnnotation(target, property, annotation);
          }
        }
        return Object.assign(decorator, annotation);
      }
      /**
       * Stores annotation to prototype,
       * so it can be inspected later by `makeObservable` called from constructor
       */
      function storeAnnotation(prototype, key, annotation) {
        if (!hasProp(prototype, storedAnnotationsSymbol)) {
          addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
        }
        // Ignore override
        if (!isOverride(annotation)) {
          prototype[storedAnnotationsSymbol][key] = annotation;
        }
      }
      /**
       * Collects annotations from prototypes and stores them on target (instance)
       */
      function collectStoredAnnotations(target) {
        if (!hasProp(target, storedAnnotationsSymbol)) {
          // if (__DEV__ && !target[storedAnnotationsSymbol]) {
          //     die(
          //         `No annotations were passed to makeObservable, but no decorated members have been found either`
          //     )
          // }
          // We need a copy as we will remove annotation from the list once it's applied.
          addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
        }
        return target[storedAnnotationsSymbol];
      }
      function is20223Decorator(context) {
        return typeof context == 'object' && typeof context['kind'] == 'string';
      }
      var $mobx = exports('$mobx', /*#__PURE__*/Symbol('mobx administration'));
      var Atom = /*#__PURE__*/function () {
        // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

        /**
         * Create a new atom. For debugging purposes it is recommended to give it a name.
         * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
         */
        function Atom(name_) {
          if (name_ === void 0) {
            name_ = 'Atom';
          }
          this.name_ = void 0;
          this.isPendingUnobservation_ = false;
          this.isBeingObserved_ = false;
          this.observers_ = new Set();
          this.diffValue_ = 0;
          this.lastAccessedBy_ = 0;
          this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
          this.onBOL = void 0;
          this.onBUOL = void 0;
          this.name_ = name_;
        }
        // onBecomeObservedListeners
        var _proto = Atom.prototype;
        _proto.onBO = function onBO() {
          if (this.onBOL) {
            this.onBOL.forEach(function (listener) {
              return listener();
            });
          }
        };
        _proto.onBUO = function onBUO() {
          if (this.onBUOL) {
            this.onBUOL.forEach(function (listener) {
              return listener();
            });
          }
        };
        /**
         * Invoke this method to notify mobx that your atom has been used somehow.
         * Returns true if there is currently a reactive context.
         */
        _proto.reportObserved = function reportObserved$1() {
          return reportObserved(this);
        };
        /**
         * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
         */
        _proto.reportChanged = function reportChanged() {
          startBatch();
          propagateChanged(this);
          endBatch();
        };
        _proto.toString = function toString() {
          return this.name_;
        };
        return Atom;
      }();
      var isAtom = /*#__PURE__*/createInstanceofPredicate('Atom', Atom);
      function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
        if (onBecomeObservedHandler === void 0) {
          onBecomeObservedHandler = noop;
        }
        if (onBecomeUnobservedHandler === void 0) {
          onBecomeUnobservedHandler = noop;
        }
        var atom = new Atom(name);
        // default `noop` listener will not initialize the hook Set
        if (onBecomeObservedHandler !== noop) {
          onBecomeObserved(atom, onBecomeObservedHandler);
        }
        if (onBecomeUnobservedHandler !== noop) {
          onBecomeUnobserved(atom, onBecomeUnobservedHandler);
        }
        return atom;
      }
      function identityComparer(a, b) {
        return a === b;
      }
      function structuralComparer(a, b) {
        return deepEqual(a, b);
      }
      function shallowComparer(a, b) {
        return deepEqual(a, b, 1);
      }
      function defaultComparer(a, b) {
        if (Object.is) {
          return Object.is(a, b);
        }
        return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;
      }
      var comparer = exports('comparer', {
        identity: identityComparer,
        structural: structuralComparer,
        "default": defaultComparer,
        shallow: shallowComparer
      });
      function deepEnhancer(v, _, name) {
        // it is an observable already, done
        if (isObservable(v)) {
          return v;
        }
        // something that can be converted and mutated?
        if (Array.isArray(v)) {
          return observable.array(v, {
            name: name
          });
        }
        if (isPlainObject(v)) {
          return observable.object(v, undefined, {
            name: name
          });
        }
        if (isES6Map(v)) {
          return observable.map(v, {
            name: name
          });
        }
        if (isES6Set(v)) {
          return observable.set(v, {
            name: name
          });
        }
        if (typeof v === 'function' && !isAction(v) && !isFlow(v)) {
          if (isGenerator(v)) {
            return flow(v);
          } else {
            return autoAction(name, v);
          }
        }
        return v;
      }
      function shallowEnhancer(v, _, name) {
        if (v === undefined || v === null) {
          return v;
        }
        if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {
          return v;
        }
        if (Array.isArray(v)) {
          return observable.array(v, {
            name: name,
            deep: false
          });
        }
        if (isPlainObject(v)) {
          return observable.object(v, undefined, {
            name: name,
            deep: false
          });
        }
        if (isES6Map(v)) {
          return observable.map(v, {
            name: name,
            deep: false
          });
        }
        if (isES6Set(v)) {
          return observable.set(v, {
            name: name,
            deep: false
          });
        }
      }
      function referenceEnhancer(newValue) {
        // never turn into an observable
        return newValue;
      }
      function refStructEnhancer(v, oldValue) {
        if (deepEqual(v, oldValue)) {
          return oldValue;
        }
        return v;
      }
      var OVERRIDE = 'override';
      var override = exports('override', /*#__PURE__*/createDecoratorAnnotation({
        annotationType_: OVERRIDE,
        make_: make_,
        extend_: extend_,
        decorate_20223_: decorate_20223_
      }));
      function isOverride(annotation) {
        return annotation.annotationType_ === OVERRIDE;
      }
      function make_(adm, key) {
        return 0 /* MakeResult.Cancel */;
      }

      function extend_(adm, key, descriptor, proxyTrap) {
        die("'" + this.annotationType_ + "' can only be used with 'makeObservable'");
      }
      function decorate_20223_(desc, context) {
        console.warn("'" + this.annotationType_ + "' cannot be used with decorators - this is a no-op");
      }
      function createActionAnnotation(name, options) {
        return {
          annotationType_: name,
          options_: options,
          make_: make_$1,
          extend_: extend_$1,
          decorate_20223_: decorate_20223_$1
        };
      }
      function make_$1(adm, key, descriptor, source) {
        var _this$options_;
        // bound
        if ((_this$options_ = this.options_) != null && _this$options_.bound) {
          return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;
        }
        // own
        if (source === adm.target_) {
          return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;
        }
        // prototype
        if (isAction(descriptor.value)) {
          // A prototype could have been annotated already by other constructor,
          // rest of the proto chain must be annotated already
          return 1 /* MakeResult.Break */;
        }

        var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
        defineProperty(source, key, actionDescriptor);
        return 2 /* MakeResult.Continue */;
      }

      function extend_$1(adm, key, descriptor, proxyTrap) {
        var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
        return adm.defineProperty_(key, actionDescriptor, proxyTrap);
      }
      function decorate_20223_$1(mthd, context) {
        var kind = context.kind,
          name = context.name,
          addInitializer = context.addInitializer;
        var ann = this;
        var _createAction = function _createAction(m) {
          var _ann$options_$name, _ann$options_, _ann$options_$autoAct, _ann$options_2;
          return createAction((_ann$options_$name = (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.name) != null ? _ann$options_$name : name.toString(), m, (_ann$options_$autoAct = (_ann$options_2 = ann.options_) == null ? void 0 : _ann$options_2.autoAction) != null ? _ann$options_$autoAct : false);
        };
        // Backwards/Legacy behavior, expects makeObservable(this)
        if (kind == 'field') {
          addInitializer(function () {
            storeAnnotation(this, name, ann);
          });
          return;
        }
        if (kind == 'method') {
          var _this$options_2;
          if (!isAction(mthd)) {
            mthd = _createAction(mthd);
          }
          if ((_this$options_2 = this.options_) != null && _this$options_2.bound) {
            addInitializer(function () {
              var self = this;
              var bound = self[name].bind(self);
              bound.isMobxAction = true;
              self[name] = bound;
            });
          }
          return mthd;
        }
        die("Cannot apply '" + ann.annotationType_ + "' to '" + String(name) + "' (kind: " + kind + '):' + ("\n'" + ann.annotationType_ + "' can only be used on properties with a function value."));
      }
      function assertActionDescriptor(adm, _ref, key, _ref2) {
        var annotationType_ = _ref.annotationType_;
        var value = _ref2.value;
      }
      function createActionDescriptor(adm, annotation, key, descriptor,
      // provides ability to disable safeDescriptors for prototypes
      safeDescriptors) {
        var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
        if (safeDescriptors === void 0) {
          safeDescriptors = globalState.safeDescriptors;
        }
        assertActionDescriptor(adm, annotation, key, descriptor);
        var value = descriptor.value;
        if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
          var _adm$proxy_;
          value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
        }
        return {
          value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,
          // https://github.com/mobxjs/mobx/discussions/3140
          (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : undefined),
          // Non-configurable for classes
          // prevents accidental field redefinition in subclass
          configurable: safeDescriptors ? adm.isPlainObject_ : true,
          // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
          enumerable: false,
          // Non-obsevable, therefore non-writable
          // Also prevents rewriting in subclass constructor
          writable: safeDescriptors ? false : true
        };
      }
      function createFlowAnnotation(name, options) {
        return {
          annotationType_: name,
          options_: options,
          make_: make_$2,
          extend_: extend_$2,
          decorate_20223_: decorate_20223_$2
        };
      }
      function make_$2(adm, key, descriptor, source) {
        var _this$options_;
        // own
        if (source === adm.target_) {
          return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;
        }
        // prototype
        // bound - must annotate protos to support super.flow()
        if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
          if (this.extend_(adm, key, descriptor, false) === null) {
            return 0 /* MakeResult.Cancel */;
          }
        }

        if (isFlow(descriptor.value)) {
          // A prototype could have been annotated already by other constructor,
          // rest of the proto chain must be annotated already
          return 1 /* MakeResult.Break */;
        }

        var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
        defineProperty(source, key, flowDescriptor);
        return 2 /* MakeResult.Continue */;
      }

      function extend_$2(adm, key, descriptor, proxyTrap) {
        var _this$options_2;
        var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
        return adm.defineProperty_(key, flowDescriptor, proxyTrap);
      }
      function decorate_20223_$2(mthd, context) {
        var _this$options_3;
        var name = context.name,
          addInitializer = context.addInitializer;
        if (!isFlow(mthd)) {
          mthd = flow(mthd);
        }
        if ((_this$options_3 = this.options_) != null && _this$options_3.bound) {
          addInitializer(function () {
            var self = this;
            var bound = self[name].bind(self);
            bound.isMobXFlow = true;
            self[name] = bound;
          });
        }
        return mthd;
      }
      function assertFlowDescriptor(adm, _ref, key, _ref2) {
        var annotationType_ = _ref.annotationType_;
        var value = _ref2.value;
      }
      function createFlowDescriptor(adm, annotation, key, descriptor, bound,
      // provides ability to disable safeDescriptors for prototypes
      safeDescriptors) {
        if (safeDescriptors === void 0) {
          safeDescriptors = globalState.safeDescriptors;
        }
        assertFlowDescriptor(adm, annotation, key, descriptor);
        var value = descriptor.value;
        // In case of flow.bound, the descriptor can be from already annotated prototype
        if (!isFlow(value)) {
          value = flow(value);
        }
        if (bound) {
          var _adm$proxy_;
          // We do not keep original function around, so we bind the existing flow
          value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
          // This is normally set by `flow`, but `bind` returns new function...
          value.isMobXFlow = true;
        }
        return {
          value: value,
          // Non-configurable for classes
          // prevents accidental field redefinition in subclass
          configurable: safeDescriptors ? adm.isPlainObject_ : true,
          // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
          enumerable: false,
          // Non-obsevable, therefore non-writable
          // Also prevents rewriting in subclass constructor
          writable: safeDescriptors ? false : true
        };
      }
      function createComputedAnnotation(name, options) {
        return {
          annotationType_: name,
          options_: options,
          make_: make_$3,
          extend_: extend_$3,
          decorate_20223_: decorate_20223_$3
        };
      }
      function make_$3(adm, key, descriptor) {
        return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;
      }

      function extend_$3(adm, key, descriptor, proxyTrap) {
        assertComputedDescriptor(adm, this, key, descriptor);
        return adm.defineComputedProperty_(key, _extends({}, this.options_, {
          get: descriptor.get,
          set: descriptor.set
        }), proxyTrap);
      }
      function decorate_20223_$3(get, context) {
        var ann = this;
        var key = context.name,
          addInitializer = context.addInitializer;
        addInitializer(function () {
          var adm = asObservableObject(this)[$mobx];
          var options = _extends({}, ann.options_, {
            get: get,
            context: this
          });
          options.name || (options.name = 'ObservableObject.' + key.toString());
          adm.values_.set(key, new ComputedValue(options));
        });
        return function () {
          return this[$mobx].getObservablePropValue_(key);
        };
      }
      function assertComputedDescriptor(adm, _ref, key, _ref2) {
        var annotationType_ = _ref.annotationType_;
        var get = _ref2.get;
      }
      function createObservableAnnotation(name, options) {
        return {
          annotationType_: name,
          options_: options,
          make_: make_$4,
          extend_: extend_$4,
          decorate_20223_: decorate_20223_$4
        };
      }
      function make_$4(adm, key, descriptor) {
        return this.extend_(adm, key, descriptor, false) === null ? 0 /* MakeResult.Cancel */ : 1 /* MakeResult.Break */;
      }

      function extend_$4(adm, key, descriptor, proxyTrap) {
        var _this$options_$enhanc, _this$options_;
        assertObservableDescriptor(adm, this);
        return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
      }
      function decorate_20223_$4(desc, context) {
        var ann = this;
        var kind = context.kind,
          name = context.name;
        // The laziness here is not ideal... It's a workaround to how 2022.3 Decorators are implemented:
        //   `addInitializer` callbacks are executed _before_ any accessors are defined (instead of the ideal-for-us right after each).
        //   This means that, if we were to do our stuff in an `addInitializer`, we'd attempt to read a private slot
        //   before it has been initialized. The runtime doesn't like that and throws a `Cannot read private member
        //   from an object whose class did not declare it` error.
        // TODO: it seems that this will not be required anymore in the final version of the spec
        // See TODO: link
        var initializedObjects = new WeakSet();
        function initializeObservable(target, value) {
          var _ann$options_$enhance, _ann$options_;
          var adm = asObservableObject(target)[$mobx];
          var observable = new ObservableValue(value, (_ann$options_$enhance = (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.enhancer) != null ? _ann$options_$enhance : deepEnhancer, 'ObservableObject.' + name.toString(), false);
          adm.values_.set(name, observable);
          initializedObjects.add(target);
        }
        if (kind == 'accessor') {
          return {
            get: function get() {
              if (!initializedObjects.has(this)) {
                initializeObservable(this, desc.get.call(this));
              }
              return this[$mobx].getObservablePropValue_(name);
            },
            set: function set(value) {
              if (!initializedObjects.has(this)) {
                initializeObservable(this, value);
              }
              return this[$mobx].setObservablePropValue_(name, value);
            },
            init: function init(value) {
              if (!initializedObjects.has(this)) {
                initializeObservable(this, value);
              }
              return value;
            }
          };
        }
        return;
      }
      function assertObservableDescriptor(adm, _ref, key, descriptor) {
        var annotationType_ = _ref.annotationType_;
      }
      var AUTO = 'true';
      var autoAnnotation = /*#__PURE__*/createAutoAnnotation();
      function createAutoAnnotation(options) {
        return {
          annotationType_: AUTO,
          options_: options,
          make_: make_$5,
          extend_: extend_$5,
          decorate_20223_: decorate_20223_$5
        };
      }
      function make_$5(adm, key, descriptor, source) {
        var _this$options_3, _this$options_4;
        // getter -> computed
        if (descriptor.get) {
          return computed.make_(adm, key, descriptor, source);
        }
        // lone setter -> action setter
        if (descriptor.set) {
          // TODO make action applicable to setter and delegate to action.make_
          var _set = createAction(key.toString(), descriptor.set);
          // own
          if (source === adm.target_) {
            return adm.defineProperty_(key, {
              configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
              set: _set
            }) === null ? 0 /* MakeResult.Cancel */ : 2 /* MakeResult.Continue */;
          }
          // proto
          defineProperty(source, key, {
            configurable: true,
            set: _set
          });
          return 2 /* MakeResult.Continue */;
        }
        // function on proto -> autoAction/flow
        if (source !== adm.target_ && typeof descriptor.value === 'function') {
          var _this$options_2;
          if (isGenerator(descriptor.value)) {
            var _this$options_;
            var _flowAnnotation = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
            return _flowAnnotation.make_(adm, key, descriptor, source);
          }
          var _actionAnnotation = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
          return _actionAnnotation.make_(adm, key, descriptor, source);
        }
        // other -> observable
        // Copy props from proto as well, see test:
        // "decorate should work with Object.create"
        var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
        // if function respect autoBind option
        if (typeof descriptor.value === 'function' && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
          var _adm$proxy_;
          descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
        }
        return observableAnnotation.make_(adm, key, descriptor, source);
      }
      function extend_$5(adm, key, descriptor, proxyTrap) {
        var _this$options_5, _this$options_6;
        // getter -> computed
        if (descriptor.get) {
          return computed.extend_(adm, key, descriptor, proxyTrap);
        }
        // lone setter -> action setter
        if (descriptor.set) {
          // TODO make action applicable to setter and delegate to action.extend_
          return adm.defineProperty_(key, {
            configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
            set: createAction(key.toString(), descriptor.set)
          }, proxyTrap);
        }
        // other -> observable
        // if function respect autoBind option
        if (typeof descriptor.value === 'function' && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
          var _adm$proxy_2;
          descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
        }
        var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
        return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);
      }
      function decorate_20223_$5(desc, context) {
        die("'" + this.annotationType_ + "' cannot be used as a decorator");
      }
      var OBSERVABLE = 'observable';
      var OBSERVABLE_REF = 'observable.ref';
      var OBSERVABLE_SHALLOW = 'observable.shallow';
      var OBSERVABLE_STRUCT = 'observable.struct';
      // Predefined bags of create observable options, to avoid allocating temporarily option objects
      // in the majority of cases
      var defaultCreateObservableOptions = {
        deep: true,
        name: undefined,
        defaultDecorator: undefined,
        proxy: true
      };
      Object.freeze(defaultCreateObservableOptions);
      function asCreateObservableOptions(thing) {
        return thing || defaultCreateObservableOptions;
      }
      var observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);
      var observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {
        enhancer: referenceEnhancer
      });
      var observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {
        enhancer: shallowEnhancer
      });
      var observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {
        enhancer: refStructEnhancer
      });
      var observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);
      function getEnhancerFromOptions(options) {
        return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
      }
      function getAnnotationFromOptions(options) {
        var _options$defaultDecor;
        return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;
      }
      function getEnhancerFromAnnotation(annotation) {
        var _annotation$options_$, _annotation$options_;
        return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
      }
      /**
       * Turns an object, array or function into a reactive structure.
       * @param v the value which should become observable.
       */
      function createObservable(v, arg2, arg3) {
        // @observable someProp; (2022.3 Decorators)
        if (is20223Decorator(arg2)) {
          return observableAnnotation.decorate_20223_(v, arg2);
        }
        // @observable someProp;
        if (isStringish(arg2)) {
          storeAnnotation(v, arg2, observableAnnotation);
          return;
        }
        // already observable - ignore
        if (isObservable(v)) {
          return v;
        }
        // plain object
        if (isPlainObject(v)) {
          return observable.object(v, arg2, arg3);
        }
        // Array
        if (Array.isArray(v)) {
          return observable.array(v, arg2);
        }
        // Map
        if (isES6Map(v)) {
          return observable.map(v, arg2);
        }
        // Set
        if (isES6Set(v)) {
          return observable.set(v, arg2);
        }
        // other object - ignore
        if (typeof v === 'object' && v !== null) {
          return v;
        }
        // anything else
        return observable.box(v, arg2);
      }
      assign(createObservable, observableDecoratorAnnotation);
      var observableFactories = {
        box: function box(value, options) {
          var o = asCreateObservableOptions(options);
          return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
        },
        array: function array(initialValues, options) {
          var o = asCreateObservableOptions(options);
          return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
        },
        map: function map(initialValues, options) {
          var o = asCreateObservableOptions(options);
          return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
        },
        set: function set(initialValues, options) {
          var o = asCreateObservableOptions(options);
          return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
        },
        object: function object(props, decorators, options) {
          return initObservable(function () {
            return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
          });
        },
        ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),
        shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),
        deep: observableDecoratorAnnotation,
        struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)
      };
      // eslint-disable-next-line
      var observable = exports('observable', /*#__PURE__*/assign(createObservable, observableFactories));
      var COMPUTED = 'computed';
      var COMPUTED_STRUCT = 'computed.struct';
      var computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);
      var computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {
        equals: comparer.structural
      });
      /**
       * Decorator for class properties: @computed get value() { return expr; }.
       * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
       */
      var computed = exports('computed', function computed(arg1, arg2) {
        if (is20223Decorator(arg2)) {
          // @computed (2022.3 Decorators)
          return computedAnnotation.decorate_20223_(arg1, arg2);
        }
        if (isStringish(arg2)) {
          // @computed
          return storeAnnotation(arg1, arg2, computedAnnotation);
        }
        if (isPlainObject(arg1)) {
          // @computed({ options })
          return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
        }
        var opts = isPlainObject(arg2) ? arg2 : {};
        opts.get = arg1;
        opts.name || (opts.name = arg1.name || ''); /* for generated name */
        return new ComputedValue(opts);
      });
      Object.assign(computed, computedAnnotation);
      computed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);
      var _getDescriptor$config, _getDescriptor;
      // we don't use globalState for these in order to avoid possible issues with multiple
      // mobx versions
      var currentActionId = 0;
      var nextActionId = 1;
      var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, 'name')) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
      // we can safely recycle this object
      var tmpNameDescriptor = {
        value: 'action',
        configurable: true,
        writable: false,
        enumerable: false
      };
      function createAction(actionName, fn, autoAction, ref) {
        if (autoAction === void 0) {
          autoAction = false;
        }
        function res() {
          return executeAction(actionName, autoAction, fn, ref || this, arguments);
        }
        res.isMobxAction = true;
        res.toString = function () {
          return fn.toString();
        };
        if (isFunctionNameConfigurable) {
          tmpNameDescriptor.value = actionName;
          defineProperty(res, 'name', tmpNameDescriptor);
        }
        return res;
      }
      function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
        var runInfo = _startAction(actionName, canRunAsDerivation);
        try {
          return fn.apply(scope, args);
        } catch (err) {
          runInfo.error_ = err;
          throw err;
        } finally {
          _endAction(runInfo);
        }
      }
      function _startAction(actionName, canRunAsDerivation,
      // true for autoAction
      scope, args) {
        var notifySpy_ = DEV;
        var startTime_ = 0;
        var prevDerivation_ = globalState.trackingDerivation;
        var runAsAction = !canRunAsDerivation || !prevDerivation_;
        startBatch();
        var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow
        if (runAsAction) {
          untrackedStart();
          prevAllowStateChanges_ = allowStateChangesStart(true);
        }
        var prevAllowStateReads_ = allowStateReadsStart(true);
        var runInfo = {
          runAsAction_: runAsAction,
          prevDerivation_: prevDerivation_,
          prevAllowStateChanges_: prevAllowStateChanges_,
          prevAllowStateReads_: prevAllowStateReads_,
          notifySpy_: notifySpy_,
          startTime_: startTime_,
          actionId_: nextActionId++,
          parentActionId_: currentActionId
        };
        currentActionId = runInfo.actionId_;
        return runInfo;
      }
      function _endAction(runInfo) {
        if (currentActionId !== runInfo.actionId_) {
          die(30);
        }
        currentActionId = runInfo.parentActionId_;
        if (runInfo.error_ !== undefined) {
          globalState.suppressReactionErrors = true;
        }
        allowStateChangesEnd(runInfo.prevAllowStateChanges_);
        allowStateReadsEnd(runInfo.prevAllowStateReads_);
        endBatch();
        if (runInfo.runAsAction_) {
          untrackedEnd(runInfo.prevDerivation_);
        }
        globalState.suppressReactionErrors = false;
      }
      function allowStateChanges(allowStateChanges, func) {
        var prev = allowStateChangesStart(allowStateChanges);
        try {
          return func();
        } finally {
          allowStateChangesEnd(prev);
        }
      }
      function allowStateChangesStart(allowStateChanges) {
        var prev = globalState.allowStateChanges;
        globalState.allowStateChanges = allowStateChanges;
        return prev;
      }
      function allowStateChangesEnd(prev) {
        globalState.allowStateChanges = prev;
      }
      var _Symbol$toPrimitive;
      _Symbol$toPrimitive = Symbol.toPrimitive;
      var ObservableValue = /*#__PURE__*/function (_Atom) {
        _inheritsLoose(ObservableValue, _Atom);
        function ObservableValue(value, enhancer, name_, notifySpy, equals) {
          var _this;
          if (name_ === void 0) {
            name_ = 'ObservableValue';
          }
          if (equals === void 0) {
            equals = comparer['default'];
          }
          _this = _Atom.call(this, name_) || this;
          _this.enhancer = void 0;
          _this.name_ = void 0;
          _this.equals = void 0;
          _this.hasUnreportedChange_ = false;
          _this.interceptors_ = void 0;
          _this.changeListeners_ = void 0;
          _this.value_ = void 0;
          _this.dehancer = void 0;
          _this.enhancer = enhancer;
          _this.name_ = name_;
          _this.equals = equals;
          _this.value_ = enhancer(value, undefined, name_);
          return _this;
        }
        var _proto = ObservableValue.prototype;
        _proto.dehanceValue = function dehanceValue(value) {
          if (this.dehancer !== undefined) {
            return this.dehancer(value);
          }
          return value;
        };
        _proto.set = function set(newValue) {
          var oldValue = this.value_;
          newValue = this.prepareNewValue_(newValue);
          if (newValue !== globalState.UNCHANGED) {
            this.setNewValue_(newValue);
          }
        };
        _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
          if (hasInterceptors(this)) {
            var change = interceptChange(this, {
              object: this,
              type: UPDATE,
              newValue: newValue
            });
            if (!change) {
              return globalState.UNCHANGED;
            }
            newValue = change.newValue;
          }
          // apply modifier
          newValue = this.enhancer(newValue, this.value_, this.name_);
          return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
        };
        _proto.setNewValue_ = function setNewValue_(newValue) {
          var oldValue = this.value_;
          this.value_ = newValue;
          this.reportChanged();
          if (hasListeners(this)) {
            notifyListeners(this, {
              type: UPDATE,
              object: this,
              newValue: newValue,
              oldValue: oldValue
            });
          }
        };
        _proto.get = function get() {
          this.reportObserved();
          return this.dehanceValue(this.value_);
        };
        _proto.intercept_ = function intercept_(handler) {
          return registerInterceptor(this, handler);
        };
        _proto.observe_ = function observe_(listener, fireImmediately) {
          if (fireImmediately) {
            listener({
              observableKind: 'value',
              debugObjectName: this.name_,
              object: this,
              type: UPDATE,
              newValue: this.value_,
              oldValue: undefined
            });
          }
          return registerListener(this, listener);
        };
        _proto.raw = function raw() {
          // used by MST ot get undehanced value
          return this.value_;
        };
        _proto.toJSON = function toJSON() {
          return this.get();
        };
        _proto.toString = function toString() {
          return this.name_ + '[' + this.value_ + ']';
        };
        _proto.valueOf = function valueOf() {
          return toPrimitive(this.get());
        };
        _proto[_Symbol$toPrimitive] = function () {
          return this.valueOf();
        };
        return ObservableValue;
      }(Atom);
      var isObservableValue = exports('isBoxedObservable', /*#__PURE__*/createInstanceofPredicate('ObservableValue', ObservableValue));
      var _Symbol$toPrimitive$1;
      /**
       * A node in the state dependency root that observes other nodes, and can be observed itself.
       *
       * ComputedValue will remember the result of the computation for the duration of the batch, or
       * while being observed.
       *
       * During this time it will recompute only when one of its direct dependencies changed,
       * but only when it is being accessed with `ComputedValue.get()`.
       *
       * Implementation description:
       * 1. First time it's being accessed it will compute and remember result
       *    give back remembered result until 2. happens
       * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
       * 3. When it's being accessed, recompute if any shallow dependency changed.
       *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
       *    go to step 2. either way
       *
       * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
       */
      _Symbol$toPrimitive$1 = Symbol.toPrimitive;
      var ComputedValue = /*#__PURE__*/function () {
        // nodes we are looking at. Our value depends on these nodes
        // during tracking it's an array with new observed observers

        // to check for cycles

        // N.B: unminified as it is used by MST

        /**
         * Create a new computed value based on a function expression.
         *
         * The `name` property is for debug purposes only.
         *
         * The `equals` property specifies the comparer function to use to determine if a newly produced
         * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
         * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
         * Structural comparison can be convenient if you always produce a new aggregated object and
         * don't want to notify observers if it is structurally the same.
         * This is useful for working with vectors, mouse coordinates etc.
         */
        function ComputedValue(options) {
          this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
          this.observing_ = [];
          this.newObserving_ = null;
          this.isBeingObserved_ = false;
          this.isPendingUnobservation_ = false;
          this.observers_ = new Set();
          this.diffValue_ = 0;
          this.runId_ = 0;
          this.lastAccessedBy_ = 0;
          this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
          this.unboundDepsCount_ = 0;
          this.value_ = new CaughtException(null);
          this.name_ = void 0;
          this.triggeredBy_ = void 0;
          this.isComputing_ = false;
          this.isRunningSetter_ = false;
          this.derivation = void 0;
          this.setter_ = void 0;
          this.isTracing_ = TraceMode.NONE;
          this.scope_ = void 0;
          this.equals_ = void 0;
          this.requiresReaction_ = void 0;
          this.keepAlive_ = void 0;
          this.onBOL = void 0;
          this.onBUOL = void 0;
          if (!options.get) {
            die(31);
          }
          this.derivation = options.get;
          this.name_ = options.name || 'ComputedValue';
          if (options.set) {
            this.setter_ = createAction('ComputedValue-setter', options.set);
          }
          this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer['default']);
          this.scope_ = options.context;
          this.requiresReaction_ = options.requiresReaction;
          this.keepAlive_ = !!options.keepAlive;
        }
        var _proto = ComputedValue.prototype;
        _proto.onBecomeStale_ = function onBecomeStale_() {
          propagateMaybeChanged(this);
        };
        _proto.onBO = function onBO() {
          if (this.onBOL) {
            this.onBOL.forEach(function (listener) {
              return listener();
            });
          }
        };
        _proto.onBUO = function onBUO() {
          if (this.onBUOL) {
            this.onBUOL.forEach(function (listener) {
              return listener();
            });
          }
        };
        /**
         * Returns the current value of this computed value.
         * Will evaluate its computation first if needed.
         */
        _proto.get = function get() {
          if (this.isComputing_) {
            die(32, this.name_, this.derivation);
          }
          if (globalState.inBatch === 0 &&
          // !globalState.trackingDerivatpion &&
          this.observers_.size === 0 && !this.keepAlive_) {
            if (shouldCompute(this)) {
              this.warnAboutUntrackedRead_();
              startBatch(); // See perf test 'computed memoization'
              this.value_ = this.computeValue_(false);
              endBatch();
            }
          } else {
            reportObserved(this);
            if (shouldCompute(this)) {
              var prevTrackingContext = globalState.trackingContext;
              if (this.keepAlive_ && !prevTrackingContext) {
                globalState.trackingContext = this;
              }
              if (this.trackAndCompute()) {
                propagateChangeConfirmed(this);
              }
              globalState.trackingContext = prevTrackingContext;
            }
          }
          var result = this.value_;
          if (isCaughtException(result)) {
            throw result.cause;
          }
          return result;
        };
        _proto.set = function set(value) {
          if (this.setter_) {
            if (this.isRunningSetter_) {
              die(33, this.name_);
            }
            this.isRunningSetter_ = true;
            try {
              this.setter_.call(this.scope_, value);
            } finally {
              this.isRunningSetter_ = false;
            }
          } else {
            die(34, this.name_);
          }
        };
        _proto.trackAndCompute = function trackAndCompute() {
          // N.B: unminified as it is used by MST
          var oldValue = this.value_;
          var wasSuspended = /* see #1208 */this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
          var newValue = this.computeValue_(true);
          var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
          if (changed) {
            this.value_ = newValue;
          }
          return changed;
        };
        _proto.computeValue_ = function computeValue_(track) {
          this.isComputing_ = true;
          // don't allow state changes during computation
          var prev = allowStateChangesStart(false);
          var res;
          if (track) {
            res = trackDerivedFunction(this, this.derivation, this.scope_);
          } else {
            if (globalState.disableErrorBoundaries === true) {
              res = this.derivation.call(this.scope_);
            } else {
              try {
                res = this.derivation.call(this.scope_);
              } catch (e) {
                res = new CaughtException(e);
              }
            }
          }
          allowStateChangesEnd(prev);
          this.isComputing_ = false;
          return res;
        };
        _proto.suspend_ = function suspend_() {
          if (!this.keepAlive_) {
            clearObserving(this);
            this.value_ = undefined; // don't hold on to computed value!
          }
        };

        _proto.observe_ = function observe_(listener, fireImmediately) {
          var _this = this;
          var firstTime = true;
          var prevValue = undefined;
          return autorun(function () {
            // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place
            var newValue = _this.get();
            if (!firstTime || fireImmediately) {
              var prevU = untrackedStart();
              listener({
                observableKind: 'computed',
                debugObjectName: _this.name_,
                type: UPDATE,
                object: _this,
                newValue: newValue,
                oldValue: prevValue
              });
              untrackedEnd(prevU);
            }
            firstTime = false;
            prevValue = newValue;
          });
        };
        _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
          {
            return;
          }
        };
        _proto.toString = function toString() {
          return this.name_ + '[' + this.derivation.toString() + ']';
        };
        _proto.valueOf = function valueOf() {
          return toPrimitive(this.get());
        };
        _proto[_Symbol$toPrimitive$1] = function () {
          return this.valueOf();
        };
        return ComputedValue;
      }();
      var isComputedValue = /*#__PURE__*/createInstanceofPredicate('ComputedValue', ComputedValue);
      var IDerivationState_;
      (function (IDerivationState_) {
        // before being run or (outside batch and not being observed)
        // at this point derivation is not holding any data about dependency tree
        IDerivationState_[IDerivationState_['NOT_TRACKING_'] = -1] = 'NOT_TRACKING_';
        // no shallow dependency changed since last computation
        // won't recalculate derivation
        // this is what makes mobx fast
        IDerivationState_[IDerivationState_['UP_TO_DATE_'] = 0] = 'UP_TO_DATE_';
        // some deep dependency changed, but don't know if shallow dependency changed
        // will require to check first if UP_TO_DATE or POSSIBLY_STALE
        // currently only ComputedValue will propagate POSSIBLY_STALE
        //
        // having this state is second big optimization:
        // don't have to recompute on every dependency change, but only when it's needed
        IDerivationState_[IDerivationState_['POSSIBLY_STALE_'] = 1] = 'POSSIBLY_STALE_';
        // A shallow dependency has changed since last computation and the derivation
        // will need to recompute when it's needed next.
        IDerivationState_[IDerivationState_['STALE_'] = 2] = 'STALE_';
      })(IDerivationState_ || (IDerivationState_ = {}));
      var TraceMode;
      (function (TraceMode) {
        TraceMode[TraceMode['NONE'] = 0] = 'NONE';
        TraceMode[TraceMode['LOG'] = 1] = 'LOG';
        TraceMode[TraceMode['BREAK'] = 2] = 'BREAK';
      })(TraceMode || (TraceMode = {}));
      var CaughtException = function CaughtException(cause) {
        this.cause = void 0;
        this.cause = cause;
        // Empty
      };

      function isCaughtException(e) {
        return e instanceof CaughtException;
      }
      /**
       * Finds out whether any dependency of the derivation has actually changed.
       * If dependenciesState is 1 then it will recalculate dependencies,
       * if any dependency changed it will propagate it by changing dependenciesState to 2.
       *
       * By iterating over the dependencies in the same order that they were reported and
       * stopping on the first change, all the recalculations are only called for ComputedValues
       * that will be tracked by derivation. That is because we assume that if the first x
       * dependencies of the derivation doesn't change then the derivation should run the same way
       * up until accessing x-th dependency.
       */
      function shouldCompute(derivation) {
        switch (derivation.dependenciesState_) {
          case IDerivationState_.UP_TO_DATE_:
            return false;
          case IDerivationState_.NOT_TRACKING_:
          case IDerivationState_.STALE_:
            return true;
          case IDerivationState_.POSSIBLY_STALE_:
            {
              // state propagation can occur outside of action/reactive context #2195
              var prevAllowStateReads = allowStateReadsStart(true);
              var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
              var obs = derivation.observing_,
                l = obs.length;
              for (var i = 0; i < l; i++) {
                var obj = obs[i];
                if (isComputedValue(obj)) {
                  if (globalState.disableErrorBoundaries) {
                    obj.get();
                  } else {
                    try {
                      obj.get();
                    } catch (e) {
                      // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                      untrackedEnd(prevUntracked);
                      allowStateReadsEnd(prevAllowStateReads);
                      return true;
                    }
                  }
                  // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
                  // and `derivation` is an observer of `obj`
                  // invariantShouldCompute(derivation)
                  if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
                    untrackedEnd(prevUntracked);
                    allowStateReadsEnd(prevAllowStateReads);
                    return true;
                  }
                }
              }
              changeDependenciesStateTo0(derivation);
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return false;
            }
        }
      }
      function isComputingDerivation() {
        return globalState.trackingDerivation !== null; // filter out actions inside computations
      }

      function checkIfStateModificationsAreAllowed(atom) {
        {
          return;
        }
      }
      /**
       * Executes the provided function `f` and tracks which observables are being accessed.
       * The tracking information is stored on the `derivation` object and the derivation is registered
       * as observer of any of the accessed observables.
       */
      function trackDerivedFunction(derivation, f, context) {
        var prevAllowStateReads = allowStateReadsStart(true);
        // pre allocate array allocation + room for variation in deps
        // array will be trimmed by bindDependencies
        changeDependenciesStateTo0(derivation);
        derivation.newObserving_ = new Array(derivation.observing_.length + 100);
        derivation.unboundDepsCount_ = 0;
        derivation.runId_ = ++globalState.runId;
        var prevTracking = globalState.trackingDerivation;
        globalState.trackingDerivation = derivation;
        globalState.inBatch++;
        var result;
        if (globalState.disableErrorBoundaries === true) {
          result = f.call(context);
        } else {
          try {
            result = f.call(context);
          } catch (e) {
            result = new CaughtException(e);
          }
        }
        globalState.inBatch--;
        globalState.trackingDerivation = prevTracking;
        bindDependencies(derivation);
        allowStateReadsEnd(prevAllowStateReads);
        return result;
      }
      /**
       * diffs newObserving with observing.
       * update observing to be newObserving with unique observables
       * notify observers that become observed/unobserved
       */
      function bindDependencies(derivation) {
        // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
        var prevObserving = derivation.observing_;
        var observing = derivation.observing_ = derivation.newObserving_;
        var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
        // Go through all new observables and check diffValue: (this list can contain duplicates):
        //   0: first occurrence, change to 1 and keep it
        //   1: extra occurrence, drop it
        var i0 = 0,
          l = derivation.unboundDepsCount_;
        for (var i = 0; i < l; i++) {
          var dep = observing[i];
          if (dep.diffValue_ === 0) {
            dep.diffValue_ = 1;
            if (i0 !== i) {
              observing[i0] = dep;
            }
            i0++;
          }
          // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
          // not hitting the condition
          if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
            lowestNewObservingDerivationState = dep.dependenciesState_;
          }
        }
        observing.length = i0;
        derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
        // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
        //   0: it's not in new observables, unobserve it
        //   1: it keeps being observed, don't want to notify it. change to 0
        l = prevObserving.length;
        while (l--) {
          var _dep = prevObserving[l];
          if (_dep.diffValue_ === 0) {
            removeObserver(_dep, derivation);
          }
          _dep.diffValue_ = 0;
        }
        // Go through all new observables and check diffValue: (now it should be unique)
        //   0: it was set to 0 in last loop. don't need to do anything.
        //   1: it wasn't observed, let's observe it. set back to 0
        while (i0--) {
          var _dep2 = observing[i0];
          if (_dep2.diffValue_ === 1) {
            _dep2.diffValue_ = 0;
            addObserver(_dep2, derivation);
          }
        }
        // Some new observed derivations may become stale during this derivation computation
        // so they have had no chance to propagate staleness (#916)
        if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
          derivation.dependenciesState_ = lowestNewObservingDerivationState;
          derivation.onBecomeStale_();
        }
      }
      function clearObserving(derivation) {
        // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
        var obs = derivation.observing_;
        derivation.observing_ = [];
        var i = obs.length;
        while (i--) {
          removeObserver(obs[i], derivation);
        }
        derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
      }
      function untracked(action) {
        var prev = untrackedStart();
        try {
          return action();
        } finally {
          untrackedEnd(prev);
        }
      }
      function untrackedStart() {
        var prev = globalState.trackingDerivation;
        globalState.trackingDerivation = null;
        return prev;
      }
      function untrackedEnd(prev) {
        globalState.trackingDerivation = prev;
      }
      function allowStateReadsStart(allowStateReads) {
        var prev = globalState.allowStateReads;
        globalState.allowStateReads = allowStateReads;
        return prev;
      }
      function allowStateReadsEnd(prev) {
        globalState.allowStateReads = prev;
      }
      /**
       * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
       *
       */
      function changeDependenciesStateTo0(derivation) {
        if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
          return;
        }
        derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
        var obs = derivation.observing_;
        var i = obs.length;
        while (i--) {
          obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
        }
      }

      /**
       * These values will persist if global state is reset
       */
      var persistentKeys = ['mobxGuid', 'spyListeners', 'enforceActions', 'computedRequiresReaction', 'reactionRequiresObservable', 'observableRequiresReaction', 'allowStateReads', 'disableErrorBoundaries', 'runId', 'UNCHANGED', 'useProxies'];
      var MobXGlobals = function MobXGlobals() {
        this.version = 6;
        this.UNCHANGED = {};
        this.trackingDerivation = null;
        this.trackingContext = null;
        this.runId = 0;
        this.mobxGuid = 0;
        this.inBatch = 0;
        this.pendingUnobservations = [];
        this.pendingReactions = [];
        this.isRunningReactions = false;
        this.allowStateChanges = false;
        this.allowStateReads = true;
        this.enforceActions = true;
        this.spyListeners = [];
        this.globalReactionErrorHandlers = [];
        this.computedRequiresReaction = false;
        this.reactionRequiresObservable = false;
        this.observableRequiresReaction = false;
        this.disableErrorBoundaries = false;
        this.suppressReactionErrors = false;
        this.useProxies = true;
        this.verifyProxies = false;
        this.safeDescriptors = true;
      };
      var canMergeGlobalState = true;
      var isolateCalled = false;
      var globalState = /*#__PURE__*/function () {
        var global = /*#__PURE__*/getGlobal();
        if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {
          canMergeGlobalState = false;
        }
        if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {
          canMergeGlobalState = false;
        }
        if (!canMergeGlobalState) {
          // Because this is a IIFE we need to let isolateCalled a chance to change
          // so we run it after the event loop completed at least 1 iteration
          setTimeout(function () {
            if (!isolateCalled) {
              die(35);
            }
          }, 1);
          return new MobXGlobals();
        } else if (global.__mobxGlobals) {
          global.__mobxInstanceCount += 1;
          if (!global.__mobxGlobals.UNCHANGED) {
            global.__mobxGlobals.UNCHANGED = {};
          } // make merge backward compatible
          return global.__mobxGlobals;
        } else {
          global.__mobxInstanceCount = 1;
          return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();
        }
      }();
      function isolateGlobalState() {
        if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {
          die(36);
        }
        isolateCalled = true;
        if (canMergeGlobalState) {
          var _global = getGlobal();
          if (--_global.__mobxInstanceCount === 0) {
            _global.__mobxGlobals = undefined;
          }
          globalState = new MobXGlobals();
        }
      }
      function getGlobalState() {
        return globalState;
      }
      /**
       * For testing purposes only; this will break the internal state of existing observables,
       * but can be used to get back at a stable state after throwing errors
       */
      function resetGlobalState() {
        var defaultGlobals = new MobXGlobals();
        for (var key in defaultGlobals) {
          if (persistentKeys.indexOf(key) === -1) {
            globalState[key] = defaultGlobals[key];
          }
        }
        globalState.allowStateChanges = !globalState.enforceActions;
      }
      function hasObservers(observable) {
        return observable.observers_ && observable.observers_.size > 0;
      }
      function getObservers(observable) {
        return observable.observers_;
      }
      // function invariantObservers(observable: IObservable) {
      //     const list = observable.observers
      //     const map = observable.observersIndexes
      //     const l = list.length
      //     for (let i = 0; i < l; i++) {
      //         const id = list[i].__mapid
      //         if (i) {
      //             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
      //         } else {
      //             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
      //         }
      //     }
      //     invariant(
      //         list.length === 0 || Object.keys(map).length === list.length - 1,
      //         "INTERNAL ERROR there is no junk in map"
      //     )
      // }
      function addObserver(observable, node) {
        // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
        // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
        // invariantObservers(observable);
        observable.observers_.add(node);
        if (observable.lowestObserverState_ > node.dependenciesState_) {
          observable.lowestObserverState_ = node.dependenciesState_;
        }
        // invariantObservers(observable);
        // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
      }

      function removeObserver(observable, node) {
        // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
        // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
        // invariantObservers(observable);
        observable.observers_['delete'](node);
        if (observable.observers_.size === 0) {
          // deleting last observer
          queueForUnobservation(observable);
        }
        // invariantObservers(observable);
        // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
      }

      function queueForUnobservation(observable) {
        if (observable.isPendingUnobservation_ === false) {
          // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
          observable.isPendingUnobservation_ = true;
          globalState.pendingUnobservations.push(observable);
        }
      }
      /**
       * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
       * During a batch `onBecomeUnobserved` will be called at most once per observable.
       * Avoids unnecessary recalculations.
       */
      function startBatch() {
        globalState.inBatch++;
      }
      function endBatch() {
        if (--globalState.inBatch === 0) {
          runReactions();
          // the batch is actually about to finish, all unobserving should happen here.
          var list = globalState.pendingUnobservations;
          for (var i = 0; i < list.length; i++) {
            var _observable2 = list[i];
            _observable2.isPendingUnobservation_ = false;
            if (_observable2.observers_.size === 0) {
              if (_observable2.isBeingObserved_) {
                // if this observable had reactive observers, trigger the hooks
                _observable2.isBeingObserved_ = false;
                _observable2.onBUO();
              }
              if (_observable2 instanceof ComputedValue) {
                // computed values are automatically teared down when the last observer leaves
                // this process happens recursively, this computed might be the last observabe of another, etc..
                _observable2.suspend_();
              }
            }
          }
          globalState.pendingUnobservations = [];
        }
      }
      function reportObserved(observable) {
        var derivation = globalState.trackingDerivation;
        if (derivation !== null) {
          /**
           * Simple optimization, give each derivation run an unique id (runId)
           * Check if last time this observable was accessed the same runId is used
           * if this is the case, the relation is already known
           */
          if (derivation.runId_ !== observable.lastAccessedBy_) {
            observable.lastAccessedBy_ = derivation.runId_;
            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
            derivation.newObserving_[derivation.unboundDepsCount_++] = observable;
            if (!observable.isBeingObserved_ && globalState.trackingContext) {
              observable.isBeingObserved_ = true;
              observable.onBO();
            }
          }
          return observable.isBeingObserved_;
        } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {
          queueForUnobservation(observable);
        }
        return false;
      }
      // function invariantLOS(observable: IObservable, msg: string) {
      //     // it's expensive so better not run it in produciton. but temporarily helpful for testing
      //     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
      //     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
      //     throw new Error(
      //         "lowestObserverState is wrong for " +
      //             msg +
      //             " because " +
      //             min +
      //             " < " +
      //             observable.lowestObserverState
      //     )
      // }
      /**
       * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
       * It will propagate changes to observers from previous run
       * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
       * Hopefully self reruning autoruns aren't a feature people should depend on
       * Also most basic use cases should be ok
       */
      // Called by Atom when its value changes
      function propagateChanged(observable) {
        // invariantLOS(observable, "changed start");
        if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
          return;
        }
        observable.lowestObserverState_ = IDerivationState_.STALE_;
        // Ideally we use for..of here, but the downcompiled version is really slow...
        observable.observers_.forEach(function (d) {
          if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
            d.onBecomeStale_();
          }
          d.dependenciesState_ = IDerivationState_.STALE_;
        });
        // invariantLOS(observable, "changed end");
      }
      // Called by ComputedValue when it recalculate and its value changed
      function propagateChangeConfirmed(observable) {
        // invariantLOS(observable, "confirmed start");
        if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
          return;
        }
        observable.lowestObserverState_ = IDerivationState_.STALE_;
        observable.observers_.forEach(function (d) {
          if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
            d.dependenciesState_ = IDerivationState_.STALE_;
          } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.
          ) {
            observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
          }
        });
        // invariantLOS(observable, "confirmed end");
      }
      // Used by computed when its dependency changed, but we don't wan't to immediately recompute.
      function propagateMaybeChanged(observable) {
        // invariantLOS(observable, "maybe start");
        if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
          return;
        }
        observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
        observable.observers_.forEach(function (d) {
          if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
            d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
            d.onBecomeStale_();
          }
        });
        // invariantLOS(observable, "maybe end");
      }

      var Reaction = exports('Reaction', /*#__PURE__*/function () {
        // nodes we are looking at. Our value depends on these nodes

        function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {
          if (name_ === void 0) {
            name_ = 'Reaction';
          }
          this.name_ = void 0;
          this.onInvalidate_ = void 0;
          this.errorHandler_ = void 0;
          this.requiresObservable_ = void 0;
          this.observing_ = [];
          this.newObserving_ = [];
          this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
          this.diffValue_ = 0;
          this.runId_ = 0;
          this.unboundDepsCount_ = 0;
          this.isDisposed_ = false;
          this.isScheduled_ = false;
          this.isTrackPending_ = false;
          this.isRunning_ = false;
          this.isTracing_ = TraceMode.NONE;
          this.name_ = name_;
          this.onInvalidate_ = onInvalidate_;
          this.errorHandler_ = errorHandler_;
          this.requiresObservable_ = requiresObservable_;
        }
        var _proto = Reaction.prototype;
        _proto.onBecomeStale_ = function onBecomeStale_() {
          this.schedule_();
        };
        _proto.schedule_ = function schedule_() {
          if (!this.isScheduled_) {
            this.isScheduled_ = true;
            globalState.pendingReactions.push(this);
            runReactions();
          }
        };
        _proto.isScheduled = function isScheduled() {
          return this.isScheduled_;
        };
        /**
         * internal, use schedule() if you intend to kick off a reaction
         */
        _proto.runReaction_ = function runReaction_() {
          if (!this.isDisposed_) {
            startBatch();
            this.isScheduled_ = false;
            var prev = globalState.trackingContext;
            globalState.trackingContext = this;
            if (shouldCompute(this)) {
              this.isTrackPending_ = true;
              try {
                this.onInvalidate_();
                if (DEV && this.isTrackPending_ && isSpyEnabled()) ;
              } catch (e) {
                this.reportExceptionInDerivation_(e);
              }
            }
            globalState.trackingContext = prev;
            endBatch();
          }
        };
        _proto.track = function track(fn) {
          if (this.isDisposed_) {
            return;
            // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
          }

          startBatch();
          this.isRunning_ = true;
          var prevReaction = globalState.trackingContext; // reactions could create reactions...
          globalState.trackingContext = this;
          var result = trackDerivedFunction(this, fn, undefined);
          globalState.trackingContext = prevReaction;
          this.isRunning_ = false;
          this.isTrackPending_ = false;
          if (this.isDisposed_) {
            // disposed during last run. Clean up everything that was bound after the dispose call.
            clearObserving(this);
          }
          if (isCaughtException(result)) {
            this.reportExceptionInDerivation_(result.cause);
          }
          endBatch();
        };
        _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
          var _this = this;
          if (this.errorHandler_) {
            this.errorHandler_(error, this);
            return;
          }
          if (globalState.disableErrorBoundaries) {
            throw error;
          }
          var message = "[mobx] uncaught error in '" + this + "'";
          if (!globalState.suppressReactionErrors) {
            console.error(message, error);
            /** If debugging brought you here, please, read the above message :-). Tnx! */
          } // prettier-ignore
          globalState.globalReactionErrorHandlers.forEach(function (f) {
            return f(error, _this);
          });
        };
        _proto.dispose = function dispose() {
          if (!this.isDisposed_) {
            this.isDisposed_ = true;
            if (!this.isRunning_) {
              // if disposed while running, clean up later. Maybe not optimal, but rare case
              startBatch();
              clearObserving(this);
              endBatch();
            }
          }
        };
        _proto.getDisposer_ = function getDisposer_(abortSignal) {
          var _this2 = this;
          var dispose = function dispose() {
            _this2.dispose();
            abortSignal == null ? void 0 : abortSignal.removeEventListener == null ? void 0 : abortSignal.removeEventListener('abort', dispose);
          };
          abortSignal == null ? void 0 : abortSignal.addEventListener == null ? void 0 : abortSignal.addEventListener('abort', dispose);
          dispose[$mobx] = this;
          return dispose;
        };
        _proto.toString = function toString() {
          return 'Reaction[' + this.name_ + ']';
        };
        _proto.trace = function trace$1(enterBreakPoint) {};
        return Reaction;
      }());
      function onReactionError(handler) {
        globalState.globalReactionErrorHandlers.push(handler);
        return function () {
          var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
          if (idx >= 0) {
            globalState.globalReactionErrorHandlers.splice(idx, 1);
          }
        };
      }
      /**
       * Magic number alert!
       * Defines within how many times a reaction is allowed to re-trigger itself
       * until it is assumed that this is gonna be a never ending loop...
       */
      var MAX_REACTION_ITERATIONS = 100;
      var reactionScheduler = function reactionScheduler(f) {
        return f();
      };
      function runReactions() {
        // Trampolining, if runReactions are already running, new reactions will be picked up
        if (globalState.inBatch > 0 || globalState.isRunningReactions) {
          return;
        }
        reactionScheduler(runReactionsHelper);
      }
      function runReactionsHelper() {
        globalState.isRunningReactions = true;
        var allReactions = globalState.pendingReactions;
        var iterations = 0;
        // While running reactions, new reactions might be triggered.
        // Hence we work with two variables and check whether
        // we converge to no remaining reactions after a while.
        while (allReactions.length > 0) {
          if (++iterations === MAX_REACTION_ITERATIONS) {
            console.error('[mobx] cycle in reaction: ' + allReactions[0]);
            allReactions.splice(0); // clear reactions
          }

          var remainingReactions = allReactions.splice(0);
          for (var i = 0, l = remainingReactions.length; i < l; i++) {
            remainingReactions[i].runReaction_();
          }
        }
        globalState.isRunningReactions = false;
      }
      var isReaction = /*#__PURE__*/createInstanceofPredicate('Reaction', Reaction);
      function setReactionScheduler(fn) {
        var baseScheduler = reactionScheduler;
        reactionScheduler = function reactionScheduler(f) {
          return fn(function () {
            return baseScheduler(f);
          });
        };
      }
      function isSpyEnabled() {
        return DEV;
      }
      function spyReport(event) {
        {
          return;
        } // dead code elimination can do the rest
      }

      function spyReportStart(event) {
        {
          return;
        }
      }
      function spyReportEnd(change) {
        {
          return;
        }
      }
      function spy(listener) {
        {
          console.warn('[mobx.spy] Is a no-op in production builds');
          return function () {};
        }
      }
      var ACTION = 'action';
      var ACTION_BOUND = 'action.bound';
      var AUTOACTION = 'autoAction';
      var AUTOACTION_BOUND = 'autoAction.bound';
      var DEFAULT_ACTION_NAME = '<unnamed action>';
      var actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);
      var actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {
        bound: true
      });
      var autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {
        autoAction: true
      });
      var autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {
        autoAction: true,
        bound: true
      });
      function createActionFactory(autoAction) {
        var res = function action(arg1, arg2) {
          // action(fn() {})
          if (isFunction(arg1)) {
            return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction);
          }
          // action("name", fn() {})
          if (isFunction(arg2)) {
            return createAction(arg1, arg2, autoAction);
          }
          // @action (2022.3 Decorators)
          if (is20223Decorator(arg2)) {
            return (autoAction ? autoActionAnnotation : actionAnnotation).decorate_20223_(arg1, arg2);
          }
          // @action
          if (isStringish(arg2)) {
            return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);
          }
          // action("name") & @action("name")
          if (isStringish(arg1)) {
            return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {
              name: arg1,
              autoAction: autoAction
            }));
          }
        };
        return res;
      }
      var action = exports('action', /*#__PURE__*/createActionFactory(false));
      Object.assign(action, actionAnnotation);
      var autoAction = exports('_autoAction', /*#__PURE__*/createActionFactory(true));
      Object.assign(autoAction, autoActionAnnotation);
      action.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);
      autoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);
      function runInAction(fn) {
        return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);
      }
      function isAction(thing) {
        return isFunction(thing) && thing.isMobxAction === true;
      }

      /**
       * Creates a named reactive view and keeps it alive, so that the view is always
       * updated if one of the dependencies changes, even when the view is not further used by something else.
       * @param view The reactive view
       * @returns disposer function, which can be used to stop the view from being updated in the future.
       */
      function autorun(view, opts) {
        var _opts$name, _opts, _opts2, _opts2$signal, _opts3;
        if (opts === void 0) {
          opts = EMPTY_OBJECT;
        }
        var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name : 'Autorun';
        var runSync = !opts.scheduler && !opts.delay;
        var reaction;
        if (runSync) {
          // normal autorun
          reaction = new Reaction(name, function () {
            this.track(reactionRunner);
          }, opts.onError, opts.requiresObservable);
        } else {
          var scheduler = createSchedulerFromOptions(opts);
          // debounced autorun
          var isScheduled = false;
          reaction = new Reaction(name, function () {
            if (!isScheduled) {
              isScheduled = true;
              scheduler(function () {
                isScheduled = false;
                if (!reaction.isDisposed_) {
                  reaction.track(reactionRunner);
                }
              });
            }
          }, opts.onError, opts.requiresObservable);
        }
        function reactionRunner() {
          view(reaction);
        }
        if (!((_opts2 = opts) != null && (_opts2$signal = _opts2.signal) != null && _opts2$signal.aborted)) {
          reaction.schedule_();
        }
        return reaction.getDisposer_((_opts3 = opts) == null ? void 0 : _opts3.signal);
      }
      var run = function run(f) {
        return f();
      };
      function createSchedulerFromOptions(opts) {
        return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {
          return setTimeout(f, opts.delay);
        } : run;
      }
      function reaction(expression, effect, opts) {
        var _opts$name2, _opts4, _opts4$signal, _opts5;
        if (opts === void 0) {
          opts = EMPTY_OBJECT;
        }
        var name = (_opts$name2 = opts.name) != null ? _opts$name2 : 'Reaction';
        var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
        var runSync = !opts.scheduler && !opts.delay;
        var scheduler = createSchedulerFromOptions(opts);
        var firstTime = true;
        var isScheduled = false;
        var value;
        var oldValue;
        var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer['default'];
        var r = new Reaction(name, function () {
          if (firstTime || runSync) {
            reactionRunner();
          } else if (!isScheduled) {
            isScheduled = true;
            scheduler(reactionRunner);
          }
        }, opts.onError, opts.requiresObservable);
        function reactionRunner() {
          isScheduled = false;
          if (r.isDisposed_) {
            return;
          }
          var changed = false;
          r.track(function () {
            var nextValue = allowStateChanges(false, function () {
              return expression(r);
            });
            changed = firstTime || !equals(value, nextValue);
            oldValue = value;
            value = nextValue;
          });
          if (firstTime && opts.fireImmediately) {
            effectAction(value, oldValue, r);
          } else if (!firstTime && changed) {
            effectAction(value, oldValue, r);
          }
          firstTime = false;
        }
        if (!((_opts4 = opts) != null && (_opts4$signal = _opts4.signal) != null && _opts4$signal.aborted)) {
          r.schedule_();
        }
        return r.getDisposer_((_opts5 = opts) == null ? void 0 : _opts5.signal);
      }
      function wrapErrorHandler(errorHandler, baseFn) {
        return function () {
          try {
            return baseFn.apply(this, arguments);
          } catch (e) {
            errorHandler.call(this, e);
          }
        };
      }
      var ON_BECOME_OBSERVED = 'onBO';
      var ON_BECOME_UNOBSERVED = 'onBUO';
      function onBecomeObserved(thing, arg2, arg3) {
        return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
      }
      function onBecomeUnobserved(thing, arg2, arg3) {
        return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
      }
      function interceptHook(hook, thing, arg2, arg3) {
        var atom = typeof arg3 === 'function' ? getAtom(thing, arg2) : getAtom(thing);
        var cb = isFunction(arg3) ? arg3 : arg2;
        var listenersKey = hook + 'L';
        if (atom[listenersKey]) {
          atom[listenersKey].add(cb);
        } else {
          atom[listenersKey] = new Set([cb]);
        }
        return function () {
          var hookListeners = atom[listenersKey];
          if (hookListeners) {
            hookListeners['delete'](cb);
            if (hookListeners.size === 0) {
              delete atom[listenersKey];
            }
          }
        };
      }
      var NEVER = 'never';
      var ALWAYS = 'always';
      var OBSERVED = 'observed';
      // const IF_AVAILABLE = "ifavailable"
      function configure(options) {
        if (options.isolateGlobalState === true) {
          isolateGlobalState();
        }
        var useProxies = options.useProxies,
          enforceActions = options.enforceActions;
        if (useProxies !== undefined) {
          globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== 'undefined';
        }
        if (useProxies === 'ifavailable') {
          globalState.verifyProxies = true;
        }
        if (enforceActions !== undefined) {
          var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
          globalState.enforceActions = ea;
          globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
        }
        ['computedRequiresReaction', 'reactionRequiresObservable', 'observableRequiresReaction', 'disableErrorBoundaries', 'safeDescriptors'].forEach(function (key) {
          if (key in options) {
            globalState[key] = !!options[key];
          }
        });
        globalState.allowStateReads = !globalState.observableRequiresReaction;
        if (options.reactionScheduler) {
          setReactionScheduler(options.reactionScheduler);
        }
      }
      function extendObservable(target, properties, annotations, options) {
        // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)
        var descriptors = getOwnPropertyDescriptors(properties);
        initObservable(function () {
          var adm = asObservableObject(target, options)[$mobx];
          ownKeys(descriptors).forEach(function (key) {
            adm.extend_(key, descriptors[key],
            // must pass "undefined" for { key: undefined }
            !annotations ? true : key in annotations ? annotations[key] : true);
          });
        });
        return target;
      }
      function getDependencyTree(thing, property) {
        return nodeToDependencyTree(getAtom(thing, property));
      }
      function nodeToDependencyTree(node) {
        var result = {
          name: node.name_
        };
        if (node.observing_ && node.observing_.length > 0) {
          result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
        }
        return result;
      }
      function getObserverTree(thing, property) {
        return nodeToObserverTree(getAtom(thing, property));
      }
      function nodeToObserverTree(node) {
        var result = {
          name: node.name_
        };
        if (hasObservers(node)) {
          result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
        }
        return result;
      }
      function unique(list) {
        return Array.from(new Set(list));
      }
      var generatorId = 0;
      function FlowCancellationError() {
        this.message = 'FLOW_CANCELLED';
      }
      FlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);
      function isFlowCancellationError(error) {
        return error instanceof FlowCancellationError;
      }
      var flowAnnotation = /*#__PURE__*/createFlowAnnotation('flow');
      var flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation('flow.bound', {
        bound: true
      });
      var flow = exports('flow', /*#__PURE__*/Object.assign(function flow(arg1, arg2) {
        // @flow (2022.3 Decorators)
        if (is20223Decorator(arg2)) {
          return flowAnnotation.decorate_20223_(arg1, arg2);
        }
        // @flow
        if (isStringish(arg2)) {
          return storeAnnotation(arg1, arg2, flowAnnotation);
        }
        var generator = arg1;
        var name = generator.name || '<unnamed flow>';
        // Implementation based on https://github.com/tj/co/blob/master/index.js
        var res = function res() {
          var ctx = this;
          var args = arguments;
          var runId = ++generatorId;
          var gen = action(name + ' - runid: ' + runId + ' - init', generator).apply(ctx, args);
          var rejector;
          var pendingPromise = undefined;
          var promise = new Promise(function (resolve, reject) {
            var stepId = 0;
            rejector = reject;
            function onFulfilled(res) {
              pendingPromise = undefined;
              var ret;
              try {
                ret = action(name + ' - runid: ' + runId + ' - yield ' + stepId++, gen.next).call(gen, res);
              } catch (e) {
                return reject(e);
              }
              next(ret);
            }
            function onRejected(err) {
              pendingPromise = undefined;
              var ret;
              try {
                ret = action(name + ' - runid: ' + runId + ' - yield ' + stepId++, gen['throw']).call(gen, err);
              } catch (e) {
                return reject(e);
              }
              next(ret);
            }
            function next(ret) {
              if (isFunction(ret == null ? void 0 : ret.then)) {
                // an async iterator
                ret.then(next, reject);
                return;
              }
              if (ret.done) {
                return resolve(ret.value);
              }
              pendingPromise = Promise.resolve(ret.value);
              return pendingPromise.then(onFulfilled, onRejected);
            }
            onFulfilled(undefined); // kick off the process
          });

          promise.cancel = action(name + ' - runid: ' + runId + ' - cancel', function () {
            try {
              if (pendingPromise) {
                cancelPromise(pendingPromise);
              }
              // Finally block can return (or yield) stuff..
              var _res = gen['return'](undefined);
              // eat anything that promise would do, it's cancelled!
              var yieldedPromise = Promise.resolve(_res.value);
              yieldedPromise.then(noop, noop);
              cancelPromise(yieldedPromise); // maybe it can be cancelled :)
              // reject our original promise
              rejector(new FlowCancellationError());
            } catch (e) {
              rejector(e); // there could be a throwing finally block
            }
          });

          return promise;
        };
        res.isMobXFlow = true;
        return res;
      }, flowAnnotation));
      flow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);
      function cancelPromise(promise) {
        if (isFunction(promise.cancel)) {
          promise.cancel();
        }
      }
      function flowResult(result) {
        return result; // just tricking TypeScript :)
      }

      function isFlow(fn) {
        return (fn == null ? void 0 : fn.isMobXFlow) === true;
      }
      function interceptReads(thing, propOrHandler, handler) {
        var target;
        if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
          target = getAdministration(thing);
        } else if (isObservableObject(thing)) {
          target = getAdministration(thing, propOrHandler);
        } else ;
        target.dehancer = typeof propOrHandler === 'function' ? propOrHandler : handler;
        return function () {
          target.dehancer = undefined;
        };
      }
      function intercept(thing, propOrHandler, handler) {
        if (isFunction(handler)) {
          return interceptProperty(thing, propOrHandler, handler);
        } else {
          return interceptInterceptable(thing, propOrHandler);
        }
      }
      function interceptInterceptable(thing, handler) {
        return getAdministration(thing).intercept_(handler);
      }
      function interceptProperty(thing, property, handler) {
        return getAdministration(thing, property).intercept_(handler);
      }
      function _isComputed(value, property) {
        if (property === undefined) {
          return isComputedValue(value);
        }
        if (isObservableObject(value) === false) {
          return false;
        }
        if (!value[$mobx].values_.has(property)) {
          return false;
        }
        var atom = getAtom(value, property);
        return isComputedValue(atom);
      }
      function isComputed(value) {
        return _isComputed(value);
      }
      function isComputedProp(value, propName) {
        return _isComputed(value, propName);
      }
      function _isObservable(value, property) {
        if (!value) {
          return false;
        }
        if (property !== undefined) {
          if (isObservableObject(value)) {
            return value[$mobx].values_.has(property);
          }
          return false;
        }
        // For first check, see #701
        return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
      }
      function isObservable(value) {
        return _isObservable(value);
      }
      function isObservableProp(value, propName) {
        return _isObservable(value, propName);
      }
      function keys(obj) {
        if (isObservableObject(obj)) {
          return obj[$mobx].keys_();
        }
        if (isObservableMap(obj) || isObservableSet(obj)) {
          return Array.from(obj.keys());
        }
        if (isObservableArray(obj)) {
          return obj.map(function (_, index) {
            return index;
          });
        }
        die(5);
      }
      function values(obj) {
        if (isObservableObject(obj)) {
          return keys(obj).map(function (key) {
            return obj[key];
          });
        }
        if (isObservableMap(obj)) {
          return keys(obj).map(function (key) {
            return obj.get(key);
          });
        }
        if (isObservableSet(obj)) {
          return Array.from(obj.values());
        }
        if (isObservableArray(obj)) {
          return obj.slice();
        }
        die(6);
      }
      function entries(obj) {
        if (isObservableObject(obj)) {
          return keys(obj).map(function (key) {
            return [key, obj[key]];
          });
        }
        if (isObservableMap(obj)) {
          return keys(obj).map(function (key) {
            return [key, obj.get(key)];
          });
        }
        if (isObservableSet(obj)) {
          return Array.from(obj.entries());
        }
        if (isObservableArray(obj)) {
          return obj.map(function (key, index) {
            return [index, key];
          });
        }
        die(7);
      }
      function set(obj, key, value) {
        if (arguments.length === 2 && !isObservableSet(obj)) {
          startBatch();
          var _values = key;
          try {
            for (var _key in _values) {
              set(obj, _key, _values[_key]);
            }
          } finally {
            endBatch();
          }
          return;
        }
        if (isObservableObject(obj)) {
          obj[$mobx].set_(key, value);
        } else if (isObservableMap(obj)) {
          obj.set(key, value);
        } else if (isObservableSet(obj)) {
          obj.add(key);
        } else if (isObservableArray(obj)) {
          if (typeof key !== 'number') {
            key = parseInt(key, 10);
          }
          if (key < 0) {
            die("Invalid index: '" + key + "'");
          }
          startBatch();
          if (key >= obj.length) {
            obj.length = key + 1;
          }
          obj[key] = value;
          endBatch();
        } else {
          die(8);
        }
      }
      function remove(obj, key) {
        if (isObservableObject(obj)) {
          obj[$mobx].delete_(key);
        } else if (isObservableMap(obj)) {
          obj['delete'](key);
        } else if (isObservableSet(obj)) {
          obj['delete'](key);
        } else if (isObservableArray(obj)) {
          if (typeof key !== 'number') {
            key = parseInt(key, 10);
          }
          obj.splice(key, 1);
        } else {
          die(9);
        }
      }
      function has(obj, key) {
        if (isObservableObject(obj)) {
          return obj[$mobx].has_(key);
        } else if (isObservableMap(obj)) {
          return obj.has(key);
        } else if (isObservableSet(obj)) {
          return obj.has(key);
        } else if (isObservableArray(obj)) {
          return key >= 0 && key < obj.length;
        }
        die(10);
      }
      function get(obj, key) {
        if (!has(obj, key)) {
          return undefined;
        }
        if (isObservableObject(obj)) {
          return obj[$mobx].get_(key);
        } else if (isObservableMap(obj)) {
          return obj.get(key);
        } else if (isObservableArray(obj)) {
          return obj[key];
        }
        die(11);
      }
      function apiDefineProperty(obj, key, descriptor) {
        if (isObservableObject(obj)) {
          return obj[$mobx].defineProperty_(key, descriptor);
        }
        die(39);
      }
      function apiOwnKeys(obj) {
        if (isObservableObject(obj)) {
          return obj[$mobx].ownKeys_();
        }
        die(38);
      }
      function observe(thing, propOrCb, cbOrFire, fireImmediately) {
        if (isFunction(cbOrFire)) {
          return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);
        } else {
          return observeObservable(thing, propOrCb, cbOrFire);
        }
      }
      function observeObservable(thing, listener, fireImmediately) {
        return getAdministration(thing).observe_(listener, fireImmediately);
      }
      function observeObservableProperty(thing, property, listener, fireImmediately) {
        return getAdministration(thing, property).observe_(listener, fireImmediately);
      }
      function cache(map, key, value) {
        map.set(key, value);
        return value;
      }
      function toJSHelper(source, __alreadySeen) {
        if (source == null || typeof source !== 'object' || source instanceof Date || !isObservable(source)) {
          return source;
        }
        if (isObservableValue(source) || isComputedValue(source)) {
          return toJSHelper(source.get(), __alreadySeen);
        }
        if (__alreadySeen.has(source)) {
          return __alreadySeen.get(source);
        }
        if (isObservableArray(source)) {
          var res = cache(__alreadySeen, source, new Array(source.length));
          source.forEach(function (value, idx) {
            res[idx] = toJSHelper(value, __alreadySeen);
          });
          return res;
        }
        if (isObservableSet(source)) {
          var _res = cache(__alreadySeen, source, new Set());
          source.forEach(function (value) {
            _res.add(toJSHelper(value, __alreadySeen));
          });
          return _res;
        }
        if (isObservableMap(source)) {
          var _res2 = cache(__alreadySeen, source, new Map());
          source.forEach(function (value, key) {
            _res2.set(key, toJSHelper(value, __alreadySeen));
          });
          return _res2;
        } else {
          // must be observable object
          var _res3 = cache(__alreadySeen, source, {});
          apiOwnKeys(source).forEach(function (key) {
            if (objectPrototype.propertyIsEnumerable.call(source, key)) {
              _res3[key] = toJSHelper(source[key], __alreadySeen);
            }
          });
          return _res3;
        }
      }
      /**
       * Recursively converts an observable to it's non-observable native counterpart.
       * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.
       * Computed and other non-enumerable properties are completely ignored.
       * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.
       */
      function toJS(source, options) {
        return toJSHelper(source, new Map());
      }
      function trace() {
        {
          return;
        }
      }

      /**
       * During a transaction no views are updated until the end of the transaction.
       * The transaction will be run synchronously nonetheless.
       *
       * @param action a function that updates some reactive state
       * @returns any value that was returned by the 'action' parameter.
       */
      function transaction(action, thisArg) {
        if (thisArg === void 0) {
          thisArg = undefined;
        }
        startBatch();
        try {
          return action.apply(thisArg);
        } finally {
          endBatch();
        }
      }
      function when(predicate, arg1, arg2) {
        if (arguments.length === 1 || arg1 && typeof arg1 === 'object') {
          return whenPromise(predicate, arg1);
        }
        return _when(predicate, arg1, arg2 || {});
      }
      function _when(predicate, effect, opts) {
        var timeoutHandle;
        if (typeof opts.timeout === 'number') {
          var error = new Error('WHEN_TIMEOUT');
          timeoutHandle = setTimeout(function () {
            if (!disposer[$mobx].isDisposed_) {
              disposer();
              if (opts.onError) {
                opts.onError(error);
              } else {
                throw error;
              }
            }
          }, opts.timeout);
        }
        opts.name = 'When';
        var effectAction = createAction('When-effect', effect);
        // eslint-disable-next-line
        var disposer = autorun(function (r) {
          // predicate should not change state
          var cond = allowStateChanges(false, predicate);
          if (cond) {
            r.dispose();
            if (timeoutHandle) {
              clearTimeout(timeoutHandle);
            }
            effectAction();
          }
        }, opts);
        return disposer;
      }
      function whenPromise(predicate, opts) {
        var _opts$signal;
        if (opts != null && (_opts$signal = opts.signal) != null && _opts$signal.aborted) {
          return Object.assign(Promise.reject(new Error('WHEN_ABORTED')), {
            cancel: function cancel() {
              return null;
            }
          });
        }
        var cancel;
        var abort;
        var res = new Promise(function (resolve, reject) {
          var _opts$signal2;
          var disposer = _when(predicate, resolve, _extends({}, opts, {
            onError: reject
          }));
          cancel = function cancel() {
            disposer();
            reject(new Error('WHEN_CANCELLED'));
          };
          abort = function abort() {
            disposer();
            reject(new Error('WHEN_ABORTED'));
          };
          opts == null ? void 0 : (_opts$signal2 = opts.signal) == null ? void 0 : _opts$signal2.addEventListener == null ? void 0 : _opts$signal2.addEventListener('abort', abort);
        })['finally'](function () {
          var _opts$signal3;
          return opts == null ? void 0 : (_opts$signal3 = opts.signal) == null ? void 0 : _opts$signal3.removeEventListener == null ? void 0 : _opts$signal3.removeEventListener('abort', abort);
        });
        res.cancel = cancel;
        return res;
      }
      function getAdm(target) {
        return target[$mobx];
      }
      // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
      // and skip either the internal values map, or the base object with its property descriptors!
      var objectProxyTraps = {
        has: function has(target, name) {
          return getAdm(target).has_(name);
        },
        get: function get(target, name) {
          return getAdm(target).get_(name);
        },
        set: function set(target, name, value) {
          var _getAdm$set_;
          if (!isStringish(name)) {
            return false;
          }
          // null (intercepted) -> true (success)
          return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
        },
        deleteProperty: function deleteProperty(target, name) {
          var _getAdm$delete_;
          if (!isStringish(name)) {
            return false;
          }
          // null (intercepted) -> true (success)
          return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
        },
        defineProperty: function defineProperty(target, name, descriptor) {
          var _getAdm$definePropert;
          // null (intercepted) -> true (success)
          return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
        },
        ownKeys: function ownKeys(target) {
          return getAdm(target).ownKeys_();
        },
        preventExtensions: function preventExtensions(target) {
          die(13);
        }
      };
      function asDynamicObservableObject(target, options) {
        var _target$$mobx, _target$$mobx$proxy_;
        assertProxies();
        target = asObservableObject(target, options);
        return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
      }
      function hasInterceptors(interceptable) {
        return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;
      }
      function registerInterceptor(interceptable, handler) {
        var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
        interceptors.push(handler);
        return once(function () {
          var idx = interceptors.indexOf(handler);
          if (idx !== -1) {
            interceptors.splice(idx, 1);
          }
        });
      }
      function interceptChange(interceptable, change) {
        var prevU = untrackedStart();
        try {
          // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
          var interceptors = [].concat(interceptable.interceptors_ || []);
          for (var i = 0, l = interceptors.length; i < l; i++) {
            change = interceptors[i](change);
            if (change && !change.type) {
              die(14);
            }
            if (!change) {
              break;
            }
          }
          return change;
        } finally {
          untrackedEnd(prevU);
        }
      }
      function hasListeners(listenable) {
        return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;
      }
      function registerListener(listenable, handler) {
        var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
        listeners.push(handler);
        return once(function () {
          var idx = listeners.indexOf(handler);
          if (idx !== -1) {
            listeners.splice(idx, 1);
          }
        });
      }
      function notifyListeners(listenable, change) {
        var prevU = untrackedStart();
        var listeners = listenable.changeListeners_;
        if (!listeners) {
          return;
        }
        listeners = listeners.slice();
        for (var i = 0, l = listeners.length; i < l; i++) {
          listeners[i](change);
        }
        untrackedEnd(prevU);
      }
      function makeObservable(target, annotations, options) {
        initObservable(function () {
          var _annotations;
          var adm = asObservableObject(target, options)[$mobx];
          if (DEV && annotations && target[storedAnnotationsSymbol]) ;
          // Default to decorators
          (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);
          // Annotate
          ownKeys(annotations).forEach(function (key) {
            return adm.make_(key, annotations[key]);
          });
        });
        return target;
      }
      // proto[keysSymbol] = new Set<PropertyKey>()
      var keysSymbol = /*#__PURE__*/Symbol('mobx-keys');
      function makeAutoObservable(target, overrides, options) {
        // Optimization: avoid visiting protos
        // Assumes that annotation.make_/.extend_ works the same for plain objects
        if (isPlainObject(target)) {
          return extendObservable(target, target, overrides, options);
        }
        initObservable(function () {
          var adm = asObservableObject(target, options)[$mobx];
          // Optimization: cache keys on proto
          // Assumes makeAutoObservable can be called only once per object and can't be used in subclass
          if (!target[keysSymbol]) {
            var proto = Object.getPrototypeOf(target);
            var _keys = new Set([].concat(ownKeys(target), ownKeys(proto)));
            _keys['delete']('constructor');
            _keys['delete']($mobx);
            addHiddenProp(proto, keysSymbol, _keys);
          }
          target[keysSymbol].forEach(function (key) {
            return adm.make_(key,
            // must pass "undefined" for { key: undefined }
            !overrides ? true : key in overrides ? overrides[key] : true);
          });
        });
        return target;
      }
      var SPLICE = 'splice';
      var UPDATE = 'update';
      var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
      var arrayTraps = {
        get: function get(target, name) {
          var adm = target[$mobx];
          if (name === $mobx) {
            return adm;
          }
          if (name === 'length') {
            return adm.getArrayLength_();
          }
          if (typeof name === 'string' && !isNaN(name)) {
            return adm.get_(parseInt(name));
          }
          if (hasProp(arrayExtensions, name)) {
            return arrayExtensions[name];
          }
          return target[name];
        },
        set: function set(target, name, value) {
          var adm = target[$mobx];
          if (name === 'length') {
            adm.setArrayLength_(value);
          }
          if (typeof name === 'symbol' || isNaN(name)) {
            target[name] = value;
          } else {
            // numeric string
            adm.set_(parseInt(name), value);
          }
          return true;
        },
        preventExtensions: function preventExtensions() {
          die(15);
        }
      };
      var ObservableArrayAdministration = /*#__PURE__*/function () {
        // this is the prop that gets proxied, so can't replace it!

        function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {
          if (name === void 0) {
            name = 'ObservableArray';
          }
          this.owned_ = void 0;
          this.legacyMode_ = void 0;
          this.atom_ = void 0;
          this.values_ = [];
          this.interceptors_ = void 0;
          this.changeListeners_ = void 0;
          this.enhancer_ = void 0;
          this.dehancer = void 0;
          this.proxy_ = void 0;
          this.lastKnownLength_ = 0;
          this.owned_ = owned_;
          this.legacyMode_ = legacyMode_;
          this.atom_ = new Atom(name);
          this.enhancer_ = function (newV, oldV) {
            return enhancer(newV, oldV, 'ObservableArray[..]');
          };
        }
        var _proto = ObservableArrayAdministration.prototype;
        _proto.dehanceValue_ = function dehanceValue_(value) {
          if (this.dehancer !== undefined) {
            return this.dehancer(value);
          }
          return value;
        };
        _proto.dehanceValues_ = function dehanceValues_(values) {
          if (this.dehancer !== undefined && values.length > 0) {
            return values.map(this.dehancer);
          }
          return values;
        };
        _proto.intercept_ = function intercept_(handler) {
          return registerInterceptor(this, handler);
        };
        _proto.observe_ = function observe_(listener, fireImmediately) {
          if (fireImmediately === void 0) {
            fireImmediately = false;
          }
          if (fireImmediately) {
            listener({
              observableKind: 'array',
              object: this.proxy_,
              debugObjectName: this.atom_.name_,
              type: 'splice',
              index: 0,
              added: this.values_.slice(),
              addedCount: this.values_.length,
              removed: [],
              removedCount: 0
            });
          }
          return registerListener(this, listener);
        };
        _proto.getArrayLength_ = function getArrayLength_() {
          this.atom_.reportObserved();
          return this.values_.length;
        };
        _proto.setArrayLength_ = function setArrayLength_(newLength) {
          if (typeof newLength !== 'number' || isNaN(newLength) || newLength < 0) {
            die('Out of range: ' + newLength);
          }
          var currentLength = this.values_.length;
          if (newLength === currentLength) {
            return;
          } else if (newLength > currentLength) {
            var newItems = new Array(newLength - currentLength);
            for (var i = 0; i < newLength - currentLength; i++) {
              newItems[i] = undefined;
            } // No Array.fill everywhere...
            this.spliceWithArray_(currentLength, 0, newItems);
          } else {
            this.spliceWithArray_(newLength, currentLength - newLength);
          }
        };
        _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
          if (oldLength !== this.lastKnownLength_) {
            die(16);
          }
          this.lastKnownLength_ += delta;
          if (this.legacyMode_ && delta > 0) {
            reserveArrayBuffer(oldLength + delta + 1);
          }
        };
        _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
          var _this = this;
          checkIfStateModificationsAreAllowed(this.atom_);
          var length = this.values_.length;
          if (index === undefined) {
            index = 0;
          } else if (index > length) {
            index = length;
          } else if (index < 0) {
            index = Math.max(0, length + index);
          }
          if (arguments.length === 1) {
            deleteCount = length - index;
          } else if (deleteCount === undefined || deleteCount === null) {
            deleteCount = 0;
          } else {
            deleteCount = Math.max(0, Math.min(deleteCount, length - index));
          }
          if (newItems === undefined) {
            newItems = EMPTY_ARRAY;
          }
          if (hasInterceptors(this)) {
            var change = interceptChange(this, {
              object: this.proxy_,
              type: SPLICE,
              index: index,
              removedCount: deleteCount,
              added: newItems
            });
            if (!change) {
              return EMPTY_ARRAY;
            }
            deleteCount = change.removedCount;
            newItems = change.added;
          }
          newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {
            return _this.enhancer_(v, undefined);
          });
          if (this.legacyMode_ || DEV) {
            var lengthDelta = newItems.length - deleteCount;
            this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified
          }

          var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
          if (deleteCount !== 0 || newItems.length !== 0) {
            this.notifyArraySplice_(index, newItems, res);
          }
          return this.dehanceValues_(res);
        };
        _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
          if (newItems.length < MAX_SPLICE_SIZE) {
            var _this$values_;
            return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
          } else {
            // The items removed by the splice
            var res = this.values_.slice(index, index + deleteCount);
            // The items that that should remain at the end of the array
            var oldItems = this.values_.slice(index + deleteCount);
            // New length is the previous length + addition count - deletion count
            this.values_.length += newItems.length - deleteCount;
            for (var i = 0; i < newItems.length; i++) {
              this.values_[index + i] = newItems[i];
            }
            for (var _i = 0; _i < oldItems.length; _i++) {
              this.values_[index + newItems.length + _i] = oldItems[_i];
            }
            return res;
          }
        };
        _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
          var notifySpy = !this.owned_ && isSpyEnabled();
          var notify = hasListeners(this);
          var change = notify || notifySpy ? {
            observableKind: 'array',
            object: this.proxy_,
            type: UPDATE,
            debugObjectName: this.atom_.name_,
            index: index,
            newValue: newValue,
            oldValue: oldValue
          } : null;
          this.atom_.reportChanged();
          if (notify) {
            notifyListeners(this, change);
          }
        };
        _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
          var notifySpy = !this.owned_ && isSpyEnabled();
          var notify = hasListeners(this);
          var change = notify || notifySpy ? {
            observableKind: 'array',
            object: this.proxy_,
            debugObjectName: this.atom_.name_,
            type: SPLICE,
            index: index,
            removed: removed,
            added: added,
            removedCount: removed.length,
            addedCount: added.length
          } : null;
          this.atom_.reportChanged();
          // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
          if (notify) {
            notifyListeners(this, change);
          }
        };
        _proto.get_ = function get_(index) {
          if (this.legacyMode_ && index >= this.values_.length) {
            console.warn('[mobx] Out of bounds read: ' + index);
            return undefined;
          }
          this.atom_.reportObserved();
          return this.dehanceValue_(this.values_[index]);
        };
        _proto.set_ = function set_(index, newValue) {
          var values = this.values_;
          if (this.legacyMode_ && index > values.length) {
            // out of bounds
            die(17, index, values.length);
          }
          if (index < values.length) {
            // update at index in range
            checkIfStateModificationsAreAllowed(this.atom_);
            var oldValue = values[index];
            if (hasInterceptors(this)) {
              var change = interceptChange(this, {
                type: UPDATE,
                object: this.proxy_,
                index: index,
                newValue: newValue
              });
              if (!change) {
                return;
              }
              newValue = change.newValue;
            }
            newValue = this.enhancer_(newValue, oldValue);
            var changed = newValue !== oldValue;
            if (changed) {
              values[index] = newValue;
              this.notifyArrayChildUpdate_(index, newValue, oldValue);
            }
          } else {
            // For out of bound index, we don't create an actual sparse array,
            // but rather fill the holes with undefined (same as setArrayLength_).
            // This could be considered a bug.
            var newItems = new Array(index + 1 - values.length);
            for (var i = 0; i < newItems.length - 1; i++) {
              newItems[i] = undefined;
            } // No Array.fill everywhere...
            newItems[newItems.length - 1] = newValue;
            this.spliceWithArray_(values.length, 0, newItems);
          }
        };
        return ObservableArrayAdministration;
      }();
      function createObservableArray(initialValues, enhancer, name, owned) {
        if (name === void 0) {
          name = 'ObservableArray';
        }
        if (owned === void 0) {
          owned = false;
        }
        assertProxies();
        return initObservable(function () {
          var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
          addHiddenFinalProp(adm.values_, $mobx, adm);
          var proxy = new Proxy(adm.values_, arrayTraps);
          adm.proxy_ = proxy;
          if (initialValues && initialValues.length) {
            adm.spliceWithArray_(0, 0, initialValues);
          }
          return proxy;
        });
      }
      // eslint-disable-next-line
      var arrayExtensions = {
        clear: function clear() {
          return this.splice(0);
        },
        replace: function replace(newItems) {
          var adm = this[$mobx];
          return adm.spliceWithArray_(0, adm.values_.length, newItems);
        },
        // Used by JSON.stringify
        toJSON: function toJSON() {
          return this.slice();
        },
        /*
         * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
         * since these functions alter the inner structure of the array, the have side effects.
         * Because the have side effects, they should not be used in computed function,
         * and for that reason the do not call dependencyState.notifyObserved
         */
        splice: function splice(index, deleteCount) {
          for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            newItems[_key - 2] = arguments[_key];
          }
          var adm = this[$mobx];
          switch (arguments.length) {
            case 0:
              return [];
            case 1:
              return adm.spliceWithArray_(index);
            case 2:
              return adm.spliceWithArray_(index, deleteCount);
          }
          return adm.spliceWithArray_(index, deleteCount, newItems);
        },
        spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
          return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
        },
        push: function push() {
          var adm = this[$mobx];
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          adm.spliceWithArray_(adm.values_.length, 0, items);
          return adm.values_.length;
        },
        pop: function pop() {
          return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
        },
        shift: function shift() {
          return this.splice(0, 1)[0];
        },
        unshift: function unshift() {
          var adm = this[$mobx];
          for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            items[_key3] = arguments[_key3];
          }
          adm.spliceWithArray_(0, 0, items);
          return adm.values_.length;
        },
        reverse: function reverse() {
          // reverse by default mutates in place before returning the result
          // which makes it both a 'derivation' and a 'mutation'.
          if (globalState.trackingDerivation) {
            die(37, 'reverse');
          }
          this.replace(this.slice().reverse());
          return this;
        },
        sort: function sort() {
          // sort by default mutates in place before returning the result
          // which goes against all good practices. Let's not change the array in place!
          if (globalState.trackingDerivation) {
            die(37, 'sort');
          }
          var copy = this.slice();
          copy.sort.apply(copy, arguments);
          this.replace(copy);
          return this;
        },
        remove: function remove(value) {
          var adm = this[$mobx];
          var idx = adm.dehanceValues_(adm.values_).indexOf(value);
          if (idx > -1) {
            this.splice(idx, 1);
            return true;
          }
          return false;
        }
      };
      /**
       * Wrap function from prototype
       * Without this, everything works as well, but this works
       * faster as everything works on unproxied values
       */
      addArrayExtension('at', simpleFunc);
      addArrayExtension('concat', simpleFunc);
      addArrayExtension('flat', simpleFunc);
      addArrayExtension('includes', simpleFunc);
      addArrayExtension('indexOf', simpleFunc);
      addArrayExtension('join', simpleFunc);
      addArrayExtension('lastIndexOf', simpleFunc);
      addArrayExtension('slice', simpleFunc);
      addArrayExtension('toString', simpleFunc);
      addArrayExtension('toLocaleString', simpleFunc);
      addArrayExtension('toSorted', simpleFunc);
      addArrayExtension('toSpliced', simpleFunc);
      addArrayExtension('with', simpleFunc);
      // map
      addArrayExtension('every', mapLikeFunc);
      addArrayExtension('filter', mapLikeFunc);
      addArrayExtension('find', mapLikeFunc);
      addArrayExtension('findIndex', mapLikeFunc);
      addArrayExtension('findLast', mapLikeFunc);
      addArrayExtension('findLastIndex', mapLikeFunc);
      addArrayExtension('flatMap', mapLikeFunc);
      addArrayExtension('forEach', mapLikeFunc);
      addArrayExtension('map', mapLikeFunc);
      addArrayExtension('some', mapLikeFunc);
      addArrayExtension('toReversed', mapLikeFunc);
      // reduce
      addArrayExtension('reduce', reduceLikeFunc);
      addArrayExtension('reduceRight', reduceLikeFunc);
      function addArrayExtension(funcName, funcFactory) {
        if (typeof Array.prototype[funcName] === 'function') {
          arrayExtensions[funcName] = funcFactory(funcName);
        }
      }
      // Report and delegate to dehanced array
      function simpleFunc(funcName) {
        return function () {
          var adm = this[$mobx];
          adm.atom_.reportObserved();
          var dehancedValues = adm.dehanceValues_(adm.values_);
          return dehancedValues[funcName].apply(dehancedValues, arguments);
        };
      }
      // Make sure callbacks recieve correct array arg #2326
      function mapLikeFunc(funcName) {
        return function (callback, thisArg) {
          var _this2 = this;
          var adm = this[$mobx];
          adm.atom_.reportObserved();
          var dehancedValues = adm.dehanceValues_(adm.values_);
          return dehancedValues[funcName](function (element, index) {
            return callback.call(thisArg, element, index, _this2);
          });
        };
      }
      // Make sure callbacks recieve correct array arg #2326
      function reduceLikeFunc(funcName) {
        return function () {
          var _this3 = this;
          var adm = this[$mobx];
          adm.atom_.reportObserved();
          var dehancedValues = adm.dehanceValues_(adm.values_);
          // #2432 - reduce behavior depends on arguments.length
          var callback = arguments[0];
          arguments[0] = function (accumulator, currentValue, index) {
            return callback(accumulator, currentValue, index, _this3);
          };
          return dehancedValues[funcName].apply(dehancedValues, arguments);
        };
      }
      var isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate('ObservableArrayAdministration', ObservableArrayAdministration);
      function isObservableArray(thing) {
        return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
      }
      var _Symbol$iterator, _Symbol$toStringTag;
      var ObservableMapMarker = {};
      var ADD = 'add';
      var DELETE = 'delete';
      // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
      // But: https://github.com/mobxjs/mobx/issues/1556
      _Symbol$iterator = Symbol.iterator;
      _Symbol$toStringTag = Symbol.toStringTag;
      var ObservableMap = exports('ObservableMap', /*#__PURE__*/function () {
        // hasMap, not hashMap >-).

        function ObservableMap(initialData, enhancer_, name_) {
          var _this = this;
          if (enhancer_ === void 0) {
            enhancer_ = deepEnhancer;
          }
          if (name_ === void 0) {
            name_ = 'ObservableMap';
          }
          this.enhancer_ = void 0;
          this.name_ = void 0;
          this[$mobx] = ObservableMapMarker;
          this.data_ = void 0;
          this.hasMap_ = void 0;
          this.keysAtom_ = void 0;
          this.interceptors_ = void 0;
          this.changeListeners_ = void 0;
          this.dehancer = void 0;
          this.enhancer_ = enhancer_;
          this.name_ = name_;
          if (!isFunction(Map)) {
            die(18);
          }
          initObservable(function () {
            _this.keysAtom_ = createAtom(DEV ? _this.name_ + '.keys()' : 'ObservableMap.keys()');
            _this.data_ = new Map();
            _this.hasMap_ = new Map();
            if (initialData) {
              _this.merge(initialData);
            }
          });
        }
        var _proto = ObservableMap.prototype;
        _proto.has_ = function has_(key) {
          return this.data_.has(key);
        };
        _proto.has = function has(key) {
          var _this2 = this;
          if (!globalState.trackingDerivation) {
            return this.has_(key);
          }
          var entry = this.hasMap_.get(key);
          if (!entry) {
            var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer, 'ObservableMap.key?', false);
            this.hasMap_.set(key, newEntry);
            onBecomeUnobserved(newEntry, function () {
              return _this2.hasMap_['delete'](key);
            });
          }
          return entry.get();
        };
        _proto.set = function set(key, value) {
          var hasKey = this.has_(key);
          if (hasInterceptors(this)) {
            var change = interceptChange(this, {
              type: hasKey ? UPDATE : ADD,
              object: this,
              newValue: value,
              name: key
            });
            if (!change) {
              return this;
            }
            value = change.newValue;
          }
          if (hasKey) {
            this.updateValue_(key, value);
          } else {
            this.addValue_(key, value);
          }
          return this;
        };
        _proto['delete'] = function _delete(key) {
          var _this3 = this;
          checkIfStateModificationsAreAllowed(this.keysAtom_);
          if (hasInterceptors(this)) {
            var change = interceptChange(this, {
              type: DELETE,
              object: this,
              name: key
            });
            if (!change) {
              return false;
            }
          }
          if (this.has_(key)) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var _change = notify || notifySpy ? {
              observableKind: 'map',
              debugObjectName: this.name_,
              type: DELETE,
              object: this,
              oldValue: this.data_.get(key).value_,
              name: key
            } : null;
            transaction(function () {
              var _this3$hasMap_$get;
              _this3.keysAtom_.reportChanged();
              (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);
              var observable = _this3.data_.get(key);
              observable.setNewValue_(undefined);
              _this3.data_['delete'](key);
            });
            if (notify) {
              notifyListeners(this, _change);
            }
            return true;
          }
          return false;
        };
        _proto.updateValue_ = function updateValue_(key, newValue) {
          var observable = this.data_.get(key);
          newValue = observable.prepareNewValue_(newValue);
          if (newValue !== globalState.UNCHANGED) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
              observableKind: 'map',
              debugObjectName: this.name_,
              type: UPDATE,
              object: this,
              oldValue: observable.value_,
              name: key,
              newValue: newValue
            } : null;
            observable.setNewValue_(newValue);
            if (notify) {
              notifyListeners(this, change);
            }
          }
        };
        _proto.addValue_ = function addValue_(key, newValue) {
          var _this4 = this;
          checkIfStateModificationsAreAllowed(this.keysAtom_);
          transaction(function () {
            var _this4$hasMap_$get;
            var observable = new ObservableValue(newValue, _this4.enhancer_, 'ObservableMap.key', false);
            _this4.data_.set(key, observable);
            newValue = observable.value_; // value might have been changed
            (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);
            _this4.keysAtom_.reportChanged();
          });
          var notifySpy = isSpyEnabled();
          var notify = hasListeners(this);
          var change = notify || notifySpy ? {
            observableKind: 'map',
            debugObjectName: this.name_,
            type: ADD,
            object: this,
            name: key,
            newValue: newValue
          } : null;
          if (notify) {
            notifyListeners(this, change);
          }
        };
        _proto.get = function get(key) {
          if (this.has(key)) {
            return this.dehanceValue_(this.data_.get(key).get());
          }
          return this.dehanceValue_(undefined);
        };
        _proto.dehanceValue_ = function dehanceValue_(value) {
          if (this.dehancer !== undefined) {
            return this.dehancer(value);
          }
          return value;
        };
        _proto.keys = function keys() {
          this.keysAtom_.reportObserved();
          return this.data_.keys();
        };
        _proto.values = function values() {
          var self = this;
          var keys = this.keys();
          return makeIterable({
            next: function next() {
              var _keys$next = keys.next(),
                done = _keys$next.done,
                value = _keys$next.value;
              return {
                done: done,
                value: done ? undefined : self.get(value)
              };
            }
          });
        };
        _proto.entries = function entries() {
          var self = this;
          var keys = this.keys();
          return makeIterable({
            next: function next() {
              var _keys$next2 = keys.next(),
                done = _keys$next2.done,
                value = _keys$next2.value;
              return {
                done: done,
                value: done ? undefined : [value, self.get(value)]
              };
            }
          });
        };
        _proto[_Symbol$iterator] = function () {
          return this.entries();
        };
        _proto.forEach = function forEach(callback, thisArg) {
          for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {
            var _step$value = _step.value,
              key = _step$value[0],
              value = _step$value[1];
            callback.call(thisArg, value, key, this);
          }
        };
        /** Merge another object into this object, returns this. */
        _proto.merge = function merge(other) {
          var _this5 = this;
          if (isObservableMap(other)) {
            other = new Map(other);
          }
          transaction(function () {
            if (isPlainObject(other)) {
              getPlainObjectKeys(other).forEach(function (key) {
                return _this5.set(key, other[key]);
              });
            } else if (Array.isArray(other)) {
              other.forEach(function (_ref) {
                var key = _ref[0],
                  value = _ref[1];
                return _this5.set(key, value);
              });
            } else if (isES6Map(other)) {
              if (other.constructor !== Map) {
                die(19, other);
              }
              other.forEach(function (value, key) {
                return _this5.set(key, value);
              });
            } else if (other !== null && other !== undefined) {
              die(20, other);
            }
          });
          return this;
        };
        _proto.clear = function clear() {
          var _this6 = this;
          transaction(function () {
            untracked(function () {
              for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done;) {
                var key = _step2.value;
                _this6['delete'](key);
              }
            });
          });
        };
        _proto.replace = function replace(values) {
          var _this7 = this;
          // Implementation requirements:
          // - respect ordering of replacement map
          // - allow interceptors to run and potentially prevent individual operations
          // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
          // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
          // - note that result map may differ from replacement map due to the interceptors
          transaction(function () {
            // Convert to map so we can do quick key lookups
            var replacementMap = convertToMap(values);
            var orderedData = new Map();
            // Used for optimization
            var keysReportChangedCalled = false;
            // Delete keys that don't exist in replacement map
            // if the key deletion is prevented by interceptor
            // add entry at the beginning of the result map
            for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {
              var key = _step3.value;
              // Concurrently iterating/deleting keys
              // iterator should handle this correctly
              if (!replacementMap.has(key)) {
                var deleted = _this7['delete'](key);
                // Was the key removed?
                if (deleted) {
                  // _keysAtom.reportChanged() was already called
                  keysReportChangedCalled = true;
                } else {
                  // Delete prevented by interceptor
                  var value = _this7.data_.get(key);
                  orderedData.set(key, value);
                }
              }
            }
            // Merge entries
            for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {
              var _step4$value = _step4.value,
                _key = _step4$value[0],
                _value = _step4$value[1];
              // We will want to know whether a new key is added
              var keyExisted = _this7.data_.has(_key);
              // Add or update value
              _this7.set(_key, _value);
              // The addition could have been prevent by interceptor
              if (_this7.data_.has(_key)) {
                // The update could have been prevented by interceptor
                // and also we want to preserve existing values
                // so use value from _data map (instead of replacement map)
                var _value2 = _this7.data_.get(_key);
                orderedData.set(_key, _value2);
                // Was a new key added?
                if (!keyExisted) {
                  // _keysAtom.reportChanged() was already called
                  keysReportChangedCalled = true;
                }
              }
            }
            // Check for possible key order change
            if (!keysReportChangedCalled) {
              if (_this7.data_.size !== orderedData.size) {
                // If size differs, keys are definitely modified
                _this7.keysAtom_.reportChanged();
              } else {
                var iter1 = _this7.data_.keys();
                var iter2 = orderedData.keys();
                var next1 = iter1.next();
                var next2 = iter2.next();
                while (!next1.done) {
                  if (next1.value !== next2.value) {
                    _this7.keysAtom_.reportChanged();
                    break;
                  }
                  next1 = iter1.next();
                  next2 = iter2.next();
                }
              }
            }
            // Use correctly ordered map
            _this7.data_ = orderedData;
          });
          return this;
        };
        _proto.toString = function toString() {
          return '[object ObservableMap]';
        };
        _proto.toJSON = function toJSON() {
          return Array.from(this);
        };
        /**
         * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
         * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
         * for callback details
         */
        _proto.observe_ = function observe_(listener, fireImmediately) {
          return registerListener(this, listener);
        };
        _proto.intercept_ = function intercept_(handler) {
          return registerInterceptor(this, handler);
        };
        _createClass(ObservableMap, [{
          key: 'size',
          get: function get() {
            this.keysAtom_.reportObserved();
            return this.data_.size;
          }
        }, {
          key: _Symbol$toStringTag,
          get: function get() {
            return 'Map';
          }
        }]);
        return ObservableMap;
      }());
      // eslint-disable-next-line
      var isObservableMap = exports('isObservableMap', /*#__PURE__*/createInstanceofPredicate('ObservableMap', ObservableMap));
      function convertToMap(dataStructure) {
        if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
          return dataStructure;
        } else if (Array.isArray(dataStructure)) {
          return new Map(dataStructure);
        } else if (isPlainObject(dataStructure)) {
          var map = new Map();
          for (var key in dataStructure) {
            map.set(key, dataStructure[key]);
          }
          return map;
        } else {
          return die(21, dataStructure);
        }
      }
      var _Symbol$iterator$1, _Symbol$toStringTag$1;
      var ObservableSetMarker = {};
      _Symbol$iterator$1 = Symbol.iterator;
      _Symbol$toStringTag$1 = Symbol.toStringTag;
      var ObservableSet = exports('ObservableSet', /*#__PURE__*/function () {
        function ObservableSet(initialData, enhancer, name_) {
          var _this = this;
          if (enhancer === void 0) {
            enhancer = deepEnhancer;
          }
          if (name_ === void 0) {
            name_ = 'ObservableSet';
          }
          this.name_ = void 0;
          this[$mobx] = ObservableSetMarker;
          this.data_ = new Set();
          this.atom_ = void 0;
          this.changeListeners_ = void 0;
          this.interceptors_ = void 0;
          this.dehancer = void 0;
          this.enhancer_ = void 0;
          this.name_ = name_;
          if (!isFunction(Set)) {
            die(22);
          }
          this.enhancer_ = function (newV, oldV) {
            return enhancer(newV, oldV, name_);
          };
          initObservable(function () {
            _this.atom_ = createAtom(_this.name_);
            if (initialData) {
              _this.replace(initialData);
            }
          });
        }
        var _proto = ObservableSet.prototype;
        _proto.dehanceValue_ = function dehanceValue_(value) {
          if (this.dehancer !== undefined) {
            return this.dehancer(value);
          }
          return value;
        };
        _proto.clear = function clear() {
          var _this2 = this;
          transaction(function () {
            untracked(function () {
              for (var _iterator = _createForOfIteratorHelperLoose(_this2.data_.values()), _step; !(_step = _iterator()).done;) {
                var value = _step.value;
                _this2['delete'](value);
              }
            });
          });
        };
        _proto.forEach = function forEach(callbackFn, thisArg) {
          for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {
            var value = _step2.value;
            callbackFn.call(thisArg, value, value, this);
          }
        };
        _proto.add = function add(value) {
          var _this3 = this;
          checkIfStateModificationsAreAllowed(this.atom_);
          if (hasInterceptors(this)) {
            var change = interceptChange(this, {
              type: ADD,
              object: this,
              newValue: value
            });
            if (!change) {
              return this;
            }
            // ideally, value = change.value would be done here, so that values can be
            // changed by interceptor. Same applies for other Set and Map api's.
          }

          if (!this.has(value)) {
            transaction(function () {
              _this3.data_.add(_this3.enhancer_(value, undefined));
              _this3.atom_.reportChanged();
            });
            var notifySpy = DEV;
            var notify = hasListeners(this);
            var _change = notify || notifySpy ? {
              observableKind: 'set',
              debugObjectName: this.name_,
              type: ADD,
              object: this,
              newValue: value
            } : null;
            if (notify) {
              notifyListeners(this, _change);
            }
          }
          return this;
        };
        _proto['delete'] = function _delete(value) {
          var _this4 = this;
          if (hasInterceptors(this)) {
            var change = interceptChange(this, {
              type: DELETE,
              object: this,
              oldValue: value
            });
            if (!change) {
              return false;
            }
          }
          if (this.has(value)) {
            var notifySpy = DEV;
            var notify = hasListeners(this);
            var _change2 = notify || notifySpy ? {
              observableKind: 'set',
              debugObjectName: this.name_,
              type: DELETE,
              object: this,
              oldValue: value
            } : null;
            transaction(function () {
              _this4.atom_.reportChanged();
              _this4.data_['delete'](value);
            });
            if (notify) {
              notifyListeners(this, _change2);
            }
            return true;
          }
          return false;
        };
        _proto.has = function has(value) {
          this.atom_.reportObserved();
          return this.data_.has(this.dehanceValue_(value));
        };
        _proto.entries = function entries() {
          var nextIndex = 0;
          var keys = Array.from(this.keys());
          var values = Array.from(this.values());
          return makeIterable({
            next: function next() {
              var index = nextIndex;
              nextIndex += 1;
              return index < values.length ? {
                value: [keys[index], values[index]],
                done: false
              } : {
                done: true
              };
            }
          });
        };
        _proto.keys = function keys() {
          return this.values();
        };
        _proto.values = function values() {
          this.atom_.reportObserved();
          var self = this;
          var nextIndex = 0;
          var observableValues = Array.from(this.data_.values());
          return makeIterable({
            next: function next() {
              return nextIndex < observableValues.length ? {
                value: self.dehanceValue_(observableValues[nextIndex++]),
                done: false
              } : {
                done: true
              };
            }
          });
        };
        _proto.replace = function replace(other) {
          var _this5 = this;
          if (isObservableSet(other)) {
            other = new Set(other);
          }
          transaction(function () {
            if (Array.isArray(other)) {
              _this5.clear();
              other.forEach(function (value) {
                return _this5.add(value);
              });
            } else if (isES6Set(other)) {
              _this5.clear();
              other.forEach(function (value) {
                return _this5.add(value);
              });
            } else if (other !== null && other !== undefined) {
              die('Cannot initialize set from ' + other);
            }
          });
          return this;
        };
        _proto.observe_ = function observe_(listener, fireImmediately) {
          return registerListener(this, listener);
        };
        _proto.intercept_ = function intercept_(handler) {
          return registerInterceptor(this, handler);
        };
        _proto.toJSON = function toJSON() {
          return Array.from(this);
        };
        _proto.toString = function toString() {
          return '[object ObservableSet]';
        };
        _proto[_Symbol$iterator$1] = function () {
          return this.values();
        };
        _createClass(ObservableSet, [{
          key: 'size',
          get: function get() {
            this.atom_.reportObserved();
            return this.data_.size;
          }
        }, {
          key: _Symbol$toStringTag$1,
          get: function get() {
            return 'Set';
          }
        }]);
        return ObservableSet;
      }());
      // eslint-disable-next-line
      var isObservableSet = exports('isObservableSet', /*#__PURE__*/createInstanceofPredicate('ObservableSet', ObservableSet));
      var descriptorCache = /*#__PURE__*/Object.create(null);
      var REMOVE = 'remove';
      var ObservableObjectAdministration = /*#__PURE__*/function () {
        function ObservableObjectAdministration(target_, values_, name_,
        // Used anytime annotation is not explicitely provided
        defaultAnnotation_) {
          if (values_ === void 0) {
            values_ = new Map();
          }
          if (defaultAnnotation_ === void 0) {
            defaultAnnotation_ = autoAnnotation;
          }
          this.target_ = void 0;
          this.values_ = void 0;
          this.name_ = void 0;
          this.defaultAnnotation_ = void 0;
          this.keysAtom_ = void 0;
          this.changeListeners_ = void 0;
          this.interceptors_ = void 0;
          this.proxy_ = void 0;
          this.isPlainObject_ = void 0;
          this.appliedAnnotations_ = void 0;
          this.pendingKeys_ = void 0;
          this.target_ = target_;
          this.values_ = values_;
          this.name_ = name_;
          this.defaultAnnotation_ = defaultAnnotation_;
          this.keysAtom_ = new Atom('ObservableObject.keys');
          // Optimization: we use this frequently
          this.isPlainObject_ = isPlainObject(this.target_);
        }
        var _proto = ObservableObjectAdministration.prototype;
        _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
          return this.values_.get(key).get();
        };
        _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
          var observable = this.values_.get(key);
          if (observable instanceof ComputedValue) {
            observable.set(newValue);
            return true;
          }
          // intercept
          if (hasInterceptors(this)) {
            var change = interceptChange(this, {
              type: UPDATE,
              object: this.proxy_ || this.target_,
              name: key,
              newValue: newValue
            });
            if (!change) {
              return null;
            }
            newValue = change.newValue;
          }
          newValue = observable.prepareNewValue_(newValue);
          // notify spy & observers
          if (newValue !== globalState.UNCHANGED) {
            var notify = hasListeners(this);
            var notifySpy = DEV;
            var _change = notify || notifySpy ? {
              type: UPDATE,
              observableKind: 'object',
              debugObjectName: this.name_,
              object: this.proxy_ || this.target_,
              oldValue: observable.value_,
              name: key,
              newValue: newValue
            } : null;
            observable.setNewValue_(newValue);
            if (notify) {
              notifyListeners(this, _change);
            }
          }
          return true;
        };
        _proto.get_ = function get_(key) {
          if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
            // Key doesn't exist yet, subscribe for it in case it's added later
            this.has_(key);
          }
          return this.target_[key];
        };
        /**
         * @param {PropertyKey} key
         * @param {any} value
         * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
         * @param {boolean} proxyTrap whether it's called from proxy trap
         * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
         */
        _proto.set_ = function set_(key, value, proxyTrap) {
          if (proxyTrap === void 0) {
            proxyTrap = false;
          }
          // Don't use .has(key) - we care about own
          if (hasProp(this.target_, key)) {
            // Existing prop
            if (this.values_.has(key)) {
              // Observable (can be intercepted)
              return this.setObservablePropValue_(key, value);
            } else if (proxyTrap) {
              // Non-observable - proxy
              return Reflect.set(this.target_, key, value);
            } else {
              // Non-observable
              this.target_[key] = value;
              return true;
            }
          } else {
            // New prop
            return this.extend_(key, {
              value: value,
              enumerable: true,
              writable: true,
              configurable: true
            }, this.defaultAnnotation_, proxyTrap);
          }
        };
        // Trap for "in"
        _proto.has_ = function has_(key) {
          if (!globalState.trackingDerivation) {
            // Skip key subscription outside derivation
            return key in this.target_;
          }
          this.pendingKeys_ || (this.pendingKeys_ = new Map());
          var entry = this.pendingKeys_.get(key);
          if (!entry) {
            entry = new ObservableValue(key in this.target_, referenceEnhancer, 'ObservableObject.key?', false);
            this.pendingKeys_.set(key, entry);
          }
          return entry.get();
        };
        /**
         * @param {PropertyKey} key
         * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop
         */
        _proto.make_ = function make_(key, annotation) {
          if (annotation === true) {
            annotation = this.defaultAnnotation_;
          }
          if (annotation === false) {
            return;
          }
          if (!(key in this.target_)) {
            var _this$target_$storedA;
            // Throw on missing key, except for decorators:
            // Decorator annotations are collected from whole prototype chain.
            // When called from super() some props may not exist yet.
            // However we don't have to worry about missing prop,
            // because the decorator must have been applied to something.
            if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
              return; // will be annotated by subclass constructor
            } else {
              die(1, annotation.annotationType_, this.name_ + '.' + key.toString());
            }
          }
          var source = this.target_;
          while (source && source !== objectPrototype) {
            var descriptor = getDescriptor(source, key);
            if (descriptor) {
              var outcome = annotation.make_(this, key, descriptor, source);
              if (outcome === 0 /* MakeResult.Cancel */) {
                return;
              }
              if (outcome === 1 /* MakeResult.Break */) {
                break;
              }
            }
            source = Object.getPrototypeOf(source);
          }
          recordAnnotationApplied(this, annotation, key);
        };
        /**
         * @param {PropertyKey} key
         * @param {PropertyDescriptor} descriptor
         * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
         * @param {boolean} proxyTrap whether it's called from proxy trap
         * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
         */
        _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
          if (proxyTrap === void 0) {
            proxyTrap = false;
          }
          if (annotation === true) {
            annotation = this.defaultAnnotation_;
          }
          if (annotation === false) {
            return this.defineProperty_(key, descriptor, proxyTrap);
          }
          var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
          if (outcome) {
            recordAnnotationApplied(this, annotation, key);
          }
          return outcome;
        };
        /**
         * @param {PropertyKey} key
         * @param {PropertyDescriptor} descriptor
         * @param {boolean} proxyTrap whether it's called from proxy trap
         * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
         */
        _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
          if (proxyTrap === void 0) {
            proxyTrap = false;
          }
          checkIfStateModificationsAreAllowed(this.keysAtom_);
          try {
            startBatch();
            // Delete
            var deleteOutcome = this.delete_(key);
            if (!deleteOutcome) {
              // Failure or intercepted
              return deleteOutcome;
            }
            // ADD interceptor
            if (hasInterceptors(this)) {
              var change = interceptChange(this, {
                object: this.proxy_ || this.target_,
                name: key,
                type: ADD,
                newValue: descriptor.value
              });
              if (!change) {
                return null;
              }
              var newValue = change.newValue;
              if (descriptor.value !== newValue) {
                descriptor = _extends({}, descriptor, {
                  value: newValue
                });
              }
            }
            // Define
            if (proxyTrap) {
              if (!Reflect.defineProperty(this.target_, key, descriptor)) {
                return false;
              }
            } else {
              defineProperty(this.target_, key, descriptor);
            }
            // Notify
            this.notifyPropertyAddition_(key, descriptor.value);
          } finally {
            endBatch();
          }
          return true;
        };
        // If original descriptor becomes relevant, move this to annotation directly
        _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
          if (proxyTrap === void 0) {
            proxyTrap = false;
          }
          checkIfStateModificationsAreAllowed(this.keysAtom_);
          try {
            startBatch();
            // Delete
            var deleteOutcome = this.delete_(key);
            if (!deleteOutcome) {
              // Failure or intercepted
              return deleteOutcome;
            }
            // ADD interceptor
            if (hasInterceptors(this)) {
              var change = interceptChange(this, {
                object: this.proxy_ || this.target_,
                name: key,
                type: ADD,
                newValue: value
              });
              if (!change) {
                return null;
              }
              value = change.newValue;
            }
            var cachedDescriptor = getCachedObservablePropDescriptor(key);
            var descriptor = {
              configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
              enumerable: true,
              get: cachedDescriptor.get,
              set: cachedDescriptor.set
            };
            // Define
            if (proxyTrap) {
              if (!Reflect.defineProperty(this.target_, key, descriptor)) {
                return false;
              }
            } else {
              defineProperty(this.target_, key, descriptor);
            }
            var _observable3 = new ObservableValue(value, enhancer, DEV ? this.name_ + '.' + key.toString() : 'ObservableObject.key', false);
            this.values_.set(key, _observable3);
            // Notify (value possibly changed by ObservableValue)
            this.notifyPropertyAddition_(key, _observable3.value_);
          } finally {
            endBatch();
          }
          return true;
        };
        // If original descriptor becomes relevant, move this to annotation directly
        _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
          if (proxyTrap === void 0) {
            proxyTrap = false;
          }
          checkIfStateModificationsAreAllowed(this.keysAtom_);
          try {
            startBatch();
            // Delete
            var deleteOutcome = this.delete_(key);
            if (!deleteOutcome) {
              // Failure or intercepted
              return deleteOutcome;
            }
            // ADD interceptor
            if (hasInterceptors(this)) {
              var change = interceptChange(this, {
                object: this.proxy_ || this.target_,
                name: key,
                type: ADD,
                newValue: undefined
              });
              if (!change) {
                return null;
              }
            }
            options.name || (options.name = DEV ? this.name_ + '.' + key.toString() : 'ObservableObject.key');
            options.context = this.proxy_ || this.target_;
            var cachedDescriptor = getCachedObservablePropDescriptor(key);
            var descriptor = {
              configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
              enumerable: false,
              get: cachedDescriptor.get,
              set: cachedDescriptor.set
            };
            // Define
            if (proxyTrap) {
              if (!Reflect.defineProperty(this.target_, key, descriptor)) {
                return false;
              }
            } else {
              defineProperty(this.target_, key, descriptor);
            }
            this.values_.set(key, new ComputedValue(options));
            // Notify
            this.notifyPropertyAddition_(key, undefined);
          } finally {
            endBatch();
          }
          return true;
        };
        /**
         * @param {PropertyKey} key
         * @param {PropertyDescriptor} descriptor
         * @param {boolean} proxyTrap whether it's called from proxy trap
         * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
         */
        _proto.delete_ = function delete_(key, proxyTrap) {
          if (proxyTrap === void 0) {
            proxyTrap = false;
          }
          checkIfStateModificationsAreAllowed(this.keysAtom_);
          // No such prop
          if (!hasProp(this.target_, key)) {
            return true;
          }
          // Intercept
          if (hasInterceptors(this)) {
            var change = interceptChange(this, {
              object: this.proxy_ || this.target_,
              name: key,
              type: REMOVE
            });
            // Cancelled
            if (!change) {
              return null;
            }
          }
          // Delete
          try {
            var _this$pendingKeys_, _this$pendingKeys_$ge;
            startBatch();
            var notify = hasListeners(this);
            var notifySpy = DEV && isSpyEnabled();
            var _observable4 = this.values_.get(key);
            // Value needed for spies/listeners
            var value = undefined;
            // Optimization: don't pull the value unless we will need it
            if (!_observable4 && (notify || notifySpy)) {
              var _getDescriptor2;
              value = (_getDescriptor2 = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor2.value;
            }
            // delete prop (do first, may fail)
            if (proxyTrap) {
              if (!Reflect.deleteProperty(this.target_, key)) {
                return false;
              }
            } else {
              delete this.target_[key];
            }
            // Allow re-annotating this field
            if (DEV) ;
            // Clear observable
            if (_observable4) {
              this.values_['delete'](key);
              // for computed, value is undefined
              if (_observable4 instanceof ObservableValue) {
                value = _observable4.value_;
              }
              // Notify: autorun(() => obj[key]), see #1796
              propagateChanged(_observable4);
            }
            // Notify "keys/entries/values" observers
            this.keysAtom_.reportChanged();
            // Notify "has" observers
            // "in" as it may still exist in proto
            (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);
            // Notify spies/listeners
            if (notify || notifySpy) {
              var _change2 = {
                type: REMOVE,
                observableKind: 'object',
                object: this.proxy_ || this.target_,
                debugObjectName: this.name_,
                oldValue: value,
                name: key
              };
              if (DEV && notifySpy) ;
              if (notify) {
                notifyListeners(this, _change2);
              }
              if (DEV && notifySpy) ;
            }
          } finally {
            endBatch();
          }
          return true;
        };
        /**
         * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
         * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
         * for callback details
         */
        _proto.observe_ = function observe_(callback, fireImmediately) {
          return registerListener(this, callback);
        };
        _proto.intercept_ = function intercept_(handler) {
          return registerInterceptor(this, handler);
        };
        _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
          var _this$pendingKeys_2, _this$pendingKeys_2$g;
          var notify = hasListeners(this);
          var notifySpy = DEV;
          if (notify || notifySpy) {
            var change = notify || notifySpy ? {
              type: ADD,
              observableKind: 'object',
              debugObjectName: this.name_,
              object: this.proxy_ || this.target_,
              name: key,
              newValue: value
            } : null;
            if (notify) {
              notifyListeners(this, change);
            }
          }
          (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);
          // Notify "keys/entries/values" observers
          this.keysAtom_.reportChanged();
        };
        _proto.ownKeys_ = function ownKeys_() {
          this.keysAtom_.reportObserved();
          return ownKeys(this.target_);
        };
        _proto.keys_ = function keys_() {
          // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.
          // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.
          // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)
          // We choose to over-report in Object.keys(object), because:
          // - typically it's used with simple data objects
          // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected
          this.keysAtom_.reportObserved();
          return Object.keys(this.target_);
        };
        return ObservableObjectAdministration;
      }();
      function asObservableObject(target, options) {
        var _options$name;
        if (hasProp(target, $mobx)) {
          return target;
        }
        var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name : 'ObservableObject';
        var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));
        addHiddenProp(target, $mobx, adm);
        return target;
      }
      var isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate('ObservableObjectAdministration', ObservableObjectAdministration);
      function getCachedObservablePropDescriptor(key) {
        return descriptorCache[key] || (descriptorCache[key] = {
          get: function get() {
            return this[$mobx].getObservablePropValue_(key);
          },
          set: function set(value) {
            return this[$mobx].setObservablePropValue_(key, value);
          }
        });
      }
      function isObservableObject(thing) {
        if (isObject(thing)) {
          return isObservableObjectAdministration(thing[$mobx]);
        }
        return false;
      }
      function recordAnnotationApplied(adm, annotation, key) {
        var _adm$target_$storedAn;
        // Remove applied decorator annotation so we don't try to apply it again in subclass constructor
        (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
      }

      // Bug in safari 9.* (or iOS 9 safari mobile). See #364
      var ENTRY_0 = /*#__PURE__*/createArrayEntryDescriptor(0);
      var safariPrototypeSetterInheritanceBug = /*#__PURE__*/function () {
        var v = false;
        var p = {};
        Object.defineProperty(p, '0', {
          set: function set() {
            v = true;
          }
        });
        /*#__PURE__*/
        Object.create(p)['0'] = 1;
        return v === false;
      }();
      /**
       * This array buffer contains two lists of properties, so that all arrays
       * can recycle their property definitions, which significantly improves performance of creating
       * properties on the fly.
       */
      var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
      // Typescript workaround to make sure ObservableArray extends Array
      var StubArray = function StubArray() {};
      function inherit(ctor, proto) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(ctor.prototype, proto);
        } else if (ctor.prototype.__proto__ !== undefined) {
          ctor.prototype.__proto__ = proto;
        } else {
          ctor.prototype = proto;
        }
      }
      inherit(StubArray, Array.prototype);
      // Weex proto freeze protection was here,
      // but it is unclear why the hack is need as MobX never changed the prototype
      // anyway, so removed it in V6
      var LegacyObservableArray = /*#__PURE__*/function (_StubArray, _Symbol$toStringTag, _Symbol$iterator) {
        _inheritsLoose(LegacyObservableArray, _StubArray);
        function LegacyObservableArray(initialValues, enhancer, name, owned) {
          var _this;
          if (name === void 0) {
            name = 'ObservableArray';
          }
          if (owned === void 0) {
            owned = false;
          }
          _this = _StubArray.call(this) || this;
          initObservable(function () {
            var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
            adm.proxy_ = _assertThisInitialized(_this);
            addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);
            if (initialValues && initialValues.length) {
              // @ts-ignore
              _this.spliceWithArray(0, 0, initialValues);
            }
            if (safariPrototypeSetterInheritanceBug) {
              // Seems that Safari won't use numeric prototype setter untill any * numeric property is
              // defined on the instance. After that it works fine, even if this property is deleted.
              Object.defineProperty(_assertThisInitialized(_this), '0', ENTRY_0);
            }
          });
          return _this;
        }
        var _proto = LegacyObservableArray.prototype;
        _proto.concat = function concat() {
          this[$mobx].atom_.reportObserved();
          for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
            arrays[_key] = arguments[_key];
          }
          return Array.prototype.concat.apply(this.slice(),
          //@ts-ignore
          arrays.map(function (a) {
            return isObservableArray(a) ? a.slice() : a;
          }));
        };
        _proto[_Symbol$iterator] = function () {
          var self = this;
          var nextIndex = 0;
          return makeIterable({
            next: function next() {
              return nextIndex < self.length ? {
                value: self[nextIndex++],
                done: false
              } : {
                done: true,
                value: undefined
              };
            }
          });
        };
        _createClass(LegacyObservableArray, [{
          key: 'length',
          get: function get() {
            return this[$mobx].getArrayLength_();
          },
          set: function set(newLength) {
            this[$mobx].setArrayLength_(newLength);
          }
        }, {
          key: _Symbol$toStringTag,
          get: function get() {
            return 'Array';
          }
        }]);
        return LegacyObservableArray;
      }(StubArray, Symbol.toStringTag, Symbol.iterator);
      Object.entries(arrayExtensions).forEach(function (_ref) {
        var prop = _ref[0],
          fn = _ref[1];
        if (prop !== 'concat') {
          addHiddenProp(LegacyObservableArray.prototype, prop, fn);
        }
      });
      function createArrayEntryDescriptor(index) {
        return {
          enumerable: false,
          configurable: true,
          get: function get() {
            return this[$mobx].get_(index);
          },
          set: function set(value) {
            this[$mobx].set_(index, value);
          }
        };
      }
      function createArrayBufferItem(index) {
        defineProperty(LegacyObservableArray.prototype, '' + index, createArrayEntryDescriptor(index));
      }
      function reserveArrayBuffer(max) {
        if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
          for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
            createArrayBufferItem(index);
          }
          OBSERVABLE_ARRAY_BUFFER_SIZE = max;
        }
      }
      reserveArrayBuffer(1000);
      function createLegacyArray(initialValues, enhancer, name) {
        return new LegacyObservableArray(initialValues, enhancer, name);
      }
      function getAtom(thing, property) {
        if (typeof thing === 'object' && thing !== null) {
          if (isObservableArray(thing)) {
            if (property !== undefined) {
              die(23);
            }
            return thing[$mobx].atom_;
          }
          if (isObservableSet(thing)) {
            return thing.atom_;
          }
          if (isObservableMap(thing)) {
            if (property === undefined) {
              return thing.keysAtom_;
            }
            var _observable5 = thing.data_.get(property) || thing.hasMap_.get(property);
            if (!_observable5) {
              die(25, property, getDebugName(thing));
            }
            return _observable5;
          }
          if (isObservableObject(thing)) {
            if (!property) {
              return die(26);
            }
            var _observable = thing[$mobx].values_.get(property);
            if (!_observable) {
              die(27, property, getDebugName(thing));
            }
            return _observable;
          }
          if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
            return thing;
          }
        } else if (isFunction(thing)) {
          if (isReaction(thing[$mobx])) {
            // disposer function
            return thing[$mobx];
          }
        }
        die(28);
      }
      function getAdministration(thing, property) {
        if (!thing) {
          die(29);
        }
        if (property !== undefined) {
          return getAdministration(getAtom(thing, property));
        }
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
          return thing;
        }
        if (isObservableMap(thing) || isObservableSet(thing)) {
          return thing;
        }
        if (thing[$mobx]) {
          return thing[$mobx];
        }
        die(24, thing);
      }
      function getDebugName(thing, property) {
        var named;
        if (property !== undefined) {
          named = getAtom(thing, property);
        } else if (isAction(thing)) {
          return thing.name;
        } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
          named = getAdministration(thing);
        } else {
          // valid for arrays as well
          named = getAtom(thing);
        }
        return named.name_;
      }
      /**
       * Helper function for initializing observable structures, it applies:
       * 1. allowStateChanges so we don't violate enforceActions.
       * 2. untracked so we don't accidentaly subscribe to anything observable accessed during init in case the observable is created inside derivation.
       * 3. batch to avoid state version updates
       */
      function initObservable(cb) {
        var derivation = untrackedStart();
        var allowStateChanges = allowStateChangesStart(true);
        startBatch();
        try {
          return cb();
        } finally {
          endBatch();
          allowStateChangesEnd(allowStateChanges);
          untrackedEnd(derivation);
        }
      }
      var toString = objectPrototype.toString;
      function deepEqual(a, b, depth) {
        if (depth === void 0) {
          depth = -1;
        }
        return eq(a, b, depth);
      }
      // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
      // Internal recursive comparison function for `isEqual`.
      function eq(a, b, depth, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) {
          return a !== 0 || 1 / a === 1 / b;
        }
        // `null` or `undefined` only equal to itself (strict comparison).
        if (a == null || b == null) {
          return false;
        }
        // `NaN`s are equivalent, but non-reflexive.
        if (a !== a) {
          return b !== b;
        }
        // Exhaust primitive checks
        var type = typeof a;
        if (type !== 'function' && type !== 'object' && typeof b != 'object') {
          return false;
        }
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className !== toString.call(b)) {
          return false;
        }
        switch (className) {
          // Strings, numbers, regular expressions, dates, and booleans are compared by value.
          case '[object RegExp]':
          // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
          case '[object String]':
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return '' + a === '' + b;
          case '[object Number]':
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN.
            if (+a !== +a) {
              return +b !== +b;
            }
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
          case '[object Date]':
          case '[object Boolean]':
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
          case '[object Symbol]':
            return typeof Symbol !== 'undefined' && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);
          case '[object Map]':
          case '[object Set]':
            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
            // Hide this extra level by increasing the depth.
            if (depth >= 0) {
              depth++;
            }
            break;
        }
        // Unwrap any wrapped objects.
        a = unwrap(a);
        b = unwrap(b);
        var areArrays = className === '[object Array]';
        if (!areArrays) {
          if (typeof a != 'object' || typeof b != 'object') {
            return false;
          }
          // Objects with different constructors are not equivalent, but `Object`s or `Array`s
          // from different frames are.
          var aCtor = a.constructor,
            bCtor = b.constructor;
          if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {
            return false;
          }
        }
        if (depth === 0) {
          return false;
        } else if (depth < 0) {
          depth = -1;
        }
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        // Initializing stack of traversed objects.
        // It's done here since we only need them for objects and arrays comparison.
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] === a) {
            return bStack[length] === b;
          }
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        // Recursively compare objects and arrays.
        if (areArrays) {
          // Compare array lengths to determine if a deep comparison is necessary.
          length = a.length;
          if (length !== b.length) {
            return false;
          }
          // Deep compare the contents, ignoring non-numeric properties.
          while (length--) {
            if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {
              return false;
            }
          }
        } else {
          // Deep compare objects.
          var _keys2 = Object.keys(a);
          var key;
          length = _keys2.length;
          // Ensure that both objects contain the same number of properties before comparing deep equality.
          if (Object.keys(b).length !== length) {
            return false;
          }
          while (length--) {
            // Deep compare each member
            key = _keys2[length];
            if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {
              return false;
            }
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return true;
      }
      function unwrap(a) {
        if (isObservableArray(a)) {
          return a.slice();
        }
        if (isES6Map(a) || isObservableMap(a)) {
          return Array.from(a.entries());
        }
        if (isES6Set(a) || isObservableSet(a)) {
          return Array.from(a.entries());
        }
        return a;
      }
      function makeIterable(iterator) {
        iterator[Symbol.iterator] = getSelf;
        return iterator;
      }
      function getSelf() {
        return this;
      }

      /**
       * (c) Michel Weststrate 2015 - 2020
       * MIT Licensed
       *
       * Welcome to the mobx sources! To get a global overview of how MobX internally works,
       * this is a good place to start:
       * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
       *
       * Source folders:
       * ===============
       *
       * - api/     Most of the public static methods exposed by the module can be found here.
       * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
       * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
       * - utils/   Utility stuff.
       *
       */
      ['Symbol', 'Map', 'Set'].forEach(function (m) {
        var g = getGlobal();
        if (typeof g[m] === 'undefined') {
          die("MobX requires global '" + m + "' to be available or polyfilled");
        }
      });
      if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === 'object') {
        // See: https://github.com/andykog/mobx-devtools/
        __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
          spy: spy,
          extras: {
            getDebugName: getDebugName
          },
          $mobx: $mobx
        });
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MttData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameDecorators.ts', './GameConst.ts', './mobx.ts', './Utils.ts'], function (exports) {
  var _createClass, cclegacy, GameDataClass, GameConst, makeAutoObservable, Utils;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameDataClass = module.GameDataClass;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      makeAutoObservable = module.makeAutoObservable;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class, _class2;
      cclegacy._RF.push({}, "49f56VMYppPWKyeIMWZBiAD", "MttData", undefined);
      var MttData = exports('MttData', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function MttData() {
          //刷新次数
          this._MttInfoFreshCount = 0;
          //mtt 比赛信息
          this._IMttInfo = null;
          makeAutoObservable(this);
        }
        var _proto = MttData.prototype;
        _proto.reset = function reset() {
          this._IMttInfo = null;
        };
        _proto.initMttIdInfo = function initMttIdInfo(mttInfo) {
          this._IMttInfo = mttInfo;
        }

        //当前的mttid
        ;

        MttData.GetNowMttId = function GetNowMttId(mtt) {
          var mttId = 0;
          if (mtt != null) {
            mttId = mtt.mttid;
          }
          return mttId;
        };
        //比赛实时刷新信息
        _proto.setMttFreshInfo = function setMttFreshInfo(info) {
          if (info != null && this._IMttInfo != null) {
            if (this._IMttInfo.mttid != info.mttid) {
              return;
            }
            this._IMttInfo.num = info.num;
            this._IMttInfo.rule.startTime = info.startTime; //比赛开始时间
            this._IMttInfo.buttonState = info.buttonState; //button状态
            this._IMttInfo.time = info.time; //。。。没用
            this._IMttInfo.isEntranceClose = info.isEntranceClose; //是否关闭报名入口
            this._IMttInfo.memberrank.isMoney = info.isMoney; //是否进去钱圈

            ++this._MttInfoFreshCount;
          }
        }

        //设置当前mtt 信息的比赛人数变化
        ;

        _proto.setMsgEntryPlayerNumChangeCast = function setMsgEntryPlayerNumChangeCast(info) {
          if (info != null && this._IMttInfo != null) {
            if (this._IMttInfo.mttid != info.mttid) {
              return;
            }
            this._IMttInfo.num = info.num; //报名比赛人数
            ++this._MttInfoFreshCount;
          }
        };
        MttData.isMatchPlaying = function isMatchPlaying(info) {
          if (!info) return false;
          var status = info.buttonState;
          var startTime = info.rule.startTime;
          var timeInfo = info.time;
          var timeType = timeInfo.type;
          // --比赛非进行中(未开赛 或 已结束)
          if (status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE || timeType == GameConst.MATCH.ETimeType.MATCH_CLOSED || timeType == GameConst.MATCH.ETimeType.MATCH_FINISHED || startTime >= Utils.curServerTimeSecondstamp) {
            return false;
          } else {
            return true;
          }
        };
        MttData.getBlindLvByMttInfo = function getBlindLvByMttInfo(info) {
          if (!info) return 1;
          var status = info.buttonState;
          var startTime = info.rule.startTime;
          var timeInfo = info.time;
          var timeType = timeInfo ? timeInfo.type : null; //--1=截止报名 2 = 比赛开始 3 = 延迟状态 4 = 已经开赛 5 = 比赛关闭 6 = 比赛结束
          var blindInfo = info.gameinfo;
          var blindround = blindInfo ? blindInfo.blindround : 1; //-- 当前盲注级别
          if (startTime > Utils.curServerTimeSecondstamp) {
            blindround = 1;
          } else if (status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH || status > 0 && (GameConst.MATCH.ETimeType.MATCH_CLOSED == timeType || GameConst.MATCH.ETimeType.MATCH_FINISHED == timeType)) {
            blindround = 1;
          }
          return blindround;
        };
        _createClass(MttData, [{
          key: "FreshCount",
          get: function get() {
            return this._MttInfoFreshCount;
          }
        }, {
          key: "MttInfo",
          get: function get() {
            return this._IMttInfo;
          },
          set:
          //当前MTT数据
          function set(mttInfo) {
            if (mttInfo != null && this._IMttInfo != null) {
              if (this._IMttInfo.mttid != mttInfo.mttid) {
                return;
              }
              this._IMttInfo = mttInfo;
              ++this._MttInfoFreshCount;
            }
          }
        }], [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return MttData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MttProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './MttData.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, MarkForNetEventListener, NetProxyClass, GameNetProxyBase, MttData, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      NetProxyClass = module.NetProxyClass;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, function (module) {
      MttData = module.MttData;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _class3;
      cclegacy._RF.push({}, "fb165hDk4BLkIzZIGTq/Psh", "MttProxy", undefined);
      var MttProxy = exports('MttProxy', (_dec = NetProxyClass(), _dec2 = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttFreshInfoRsp.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.mtt.MsgEntryPlayerNumChangeCast.ProtocolID), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(MttProxy, _GameNetProxyBase);
        function MttProxy() {
          return _GameNetProxyBase.apply(this, arguments) || this;
        }
        var _proto = MttProxy.prototype;
        //获取指定mtt的信息
        _proto.getMttInfo = function getMttInfo(mttid, onRsp) {
          var msg = _cjsExports.mtt.MsgGetMttInfo.create();
          msg.mttid = mttid;
          this.send(_cjsExports.mtt.MsgGetMttInfo.ProtocolID, _cjsExports.mtt.MsgGetMttInfo.encode(msg).finish(), onRsp);
        }

        //服务器 主动推送mtt的状态变化后，客户端根据变动主动同步mtt的信息 eg：mtt到点涨盲， 钱圈等
        ;

        _proto.getMttFreshInfo = function getMttFreshInfo(mttid, onRsp) {
          var msg = _cjsExports.mtt.MsgGetMttFreshInfo.create();
          msg.mttid = mttid;
          this.send(_cjsExports.mtt.MsgGetMttFreshInfo.ProtocolID, _cjsExports.mtt.MsgGetMttFreshInfo.encode(msg).finish(), onRsp);
        };
        _proto.onMsgGetMttFreshInfoRsp = function onMsgGetMttFreshInfoRsp(netdata) {
          var info = netdata.getData(_cjsExports.mtt.MsgGetMttFreshInfoRsp);
          if (info != null) {
            MttData.inst.setMttFreshInfo(info);
          }
        }

        //服务器 其他玩家报名触发推送 比赛人数变化的监听
        ;

        _proto.onMsgEntryPlayerNumChangeCast = function onMsgEntryPlayerNumChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.mtt.MsgEntryPlayerNumChangeCast);
          if (info != null) {
            MttData.inst.setMsgEntryPlayerNumChangeCast(info);
          }
        }
        /**
         * @param mttid
         * @param iType
         * @param applyType
         *
         * applytype  1：报名 2：重构
         * {
         *  applytype：1 {type： 1  报名  2：取消}
         *  applytype：2 {type： 1： 接受申请rebuy   2：不接受申请rebuy  3:主动点击rebuy按键}
         * }
         */
        //取消报名 iType = 1 报名  2取消报名
        ;

        _proto.sendQuitMttReq = function sendQuitMttReq(applyType, iType, mttid, onResponse) {
          var msg = _cjsExports.mtt.MsgApply.create();
          msg.applytype = applyType;
          msg.mttid = mttid;
          msg.type = iType;
          this.send(_cjsExports.mtt.MsgApply.ProtocolID, _cjsExports.mtt.MsgApply.encode(msg).finish(), onResponse);
        }

        //获取比赛的奖励信息
        ;

        _proto.getMsgGetMttPropRewardInfo = function getMsgGetMttPropRewardInfo(mttid) {
          var msg = _cjsExports.mtt.MsgGetMttPropRewardInfo.create();
          msg.mttid = mttid;
          this.send(_cjsExports.mtt.MsgGetMttPropRewardInfo.ProtocolID, _cjsExports.mtt.MsgGetMttPropRewardInfo.encode(msg).finish());
        }

        //获取比赛的状态
        ;

        _proto.getMsgGetRoomState = function getMsgGetRoomState(mttid, roomId) {
          var msg = _cjsExports.mtt.MsgGetRoomState.create();
          msg.mttid = mttid;
          msg.roomId = roomId;
          this.send(_cjsExports.mtt.MsgGetRoomState.ProtocolID, _cjsExports.mtt.MsgGetRoomState.encode(msg).finish());
        }

        //获取玩家排名信息
        ;

        _proto.getMsgGetMttRankInfo = function getMsgGetMttRankInfo(mttid) {
          var msg = _cjsExports.mtt.MsgGetMttRankInfo.create();
          msg.mttid = mttid;
          this.send(_cjsExports.mtt.MsgGetMttRankInfo.ProtocolID, _cjsExports.mtt.MsgGetMttRankInfo.encode(msg).finish());
        }

        //获取桌子信息
        ;

        _proto.GetMsgGetMttRoomList = function GetMsgGetMttRoomList(mttid) {
          var msg = _cjsExports.mtt.MsgGetMttRoomList.create();
          msg.mttid = mttid;
          this.send(_cjsExports.mtt.MsgGetMttRoomList.ProtocolID, _cjsExports.mtt.MsgGetMttRoomList.encode(msg).finish());
        };
        _createClass(MttProxy, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return MttProxy;
      }(GameNetProxyBase), _class3._inst = void 0, _class3), (_applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgEntryPlayerNumChangeCast", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgEntryPlayerNumChangeCast"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/multi_language_text.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "18df4Yn4/tCUohBFzvwRelU", "multi_language_text", undefined);
      var multi_language_text = exports('default', {
        "CCS_TXT_292": ["表情符號", "表情符号", "All Emojis", "Все смайлики"],
        "MSG_AT_TIP": ["點擊@指定接受消息的玩家", "点击@指定接受信息的玩家", "Press @ to tag a player in message", ""],
        "CCS_TXT_352": ["等級", "等级", "Level", "Уровень"],
        "CCS_TXT_485": ["盲注", "盲注", "Blinds", "Блайнды"],
        "TXT_1264": ["前注", "前注", "Antes", "Анте"],
        "TXT_801": ["我的排名", "我的排名", "My Position", "Моя позиция"],
        "TXT_786": ["參賽", "参赛", "Entries", "Входы"],
        "CCS_TXT_348": ["獎池", "奖池", "Prize Pool", "Призовой фонд"],
        "TXT_792": ["延遲報名", "延迟报名", "Late Reg", "Поздняя регистрация"],
        "MTT_NextBreak": ["下次休息", "下次休息", "Next Break", "След. перерыв"],
        "TXT_802": ["進行中", "进行中", "Running", "Активные"],
        "TXT_754": ["漲盲時間", "涨盲时间", "Blinds Up", "Блайнды вверх"],
        "TXT_804": ["平均籌碼", "平均筹码", "Average Stack", "Ср. стек"],
        "TXT_562": ["總買入", "总买入", "Total Buy-ins", "Все покупки"],
        "TXT_806": ["最小籌碼數", "最小筹码数", "Smallest Stack", "Мин. cтек"],
        "TXT_807": ["重購人數", "重购人数", "Rebuys", "ебаи"],
        "TXT_808": ["Add-on人數", "Add-on人数", "Add-ons", "Адд-оны"],
        "TXT_805": ["最大籌碼數", "最大筹码数", "Largest Stack", "Макс. стек"],
        "TXT_504": ["排行", "排行", "Ranking", "Рейтинг"],
        "TXT_788": ["獎品", "奖品", "Prize", "Призы"],
        "TXT_787": ["桌子", "桌子", "Tables", "Столы"],
        "TXT_800": ["獎品以最終獎池為准", "奖品以最终奖池为准", "Prizes are based on the final prize pool", "Призы зависят от финального призового фонда"],
        "TXT_809": ["籌碼", "筹码", "Stack", "Стек"],
        "TXT_753": ["Add-on", "Add-on", "Add-on", "Адд-он"],
        "CCS_TXT_32": ["買入", "买入", "Buy-in", "Бай-ин"],
        "ROOM_MYBALANCE": ["我的餘額", "我的余额", "My Balance", "Мойбаланс"],
        "CCS_TXT_264": ["籌碼", "筹码", "Chips", "Фишки"],
        "MTT_SUREADDON": ["確定add_on嗎？", "确定add_on吗?", "Are you sure you want to add_on?", "Вы уверены, что хотите сделать аддон?"],
        "CCS_TXT_252": ["重購", "重购", "Rebuy", "Ребай"],
        "MTT_SUREREBUY": ["確定rebuy嗎？", "确定rebuy吗?", "Are you sure you want to rebuy?", "Вы уверены, что хотите сделать ребай?"],
        "MTT_WON": ["贏得", "赢得", "YOU WON", ""],
        "TOAST_MTTHANDSTART": ["發牌倒計時%s。", "发牌倒计时%s。", "Hand will start in %s.", "Рука начнётся через %s."],
        "TOAST_BLINDSUP": ["漲盲", "涨盲", "Blinds Up", "Блайнды растут"],
        "TOAST_INFO": ["提示", "提示", "Info", "Инфо"],
        "MTT_INMONEY": ["進入錢圈", "进入钱圈", "In The Money", "Впризах"],
        "ROOM_MUCK": ["蓋牌", "盖牌", "Muck", "скрыть"],
        "CCS_TXT_443": ["棄牌", "弃牌", "Fold", "Пас"],
        "TXT_1255": ["攤牌", "摊牌", "Showndown", "Раскрыть карты"],
        "TXT_1256": ["翻牌前", "翻牌前", "Preflop", "Префлоп"],
        "TXT_1157": ["手牌回顧", "手牌回顾", "Hand Review", "История раздач"],
        "TXT_STAKES": ["賭注", "赌注", "Stakes", ""],
        "TXT_1260": ["手牌結果", "手牌结果", "Hand Summary", "Результат рук"],
        "TXT_1261": ["手牌詳情", "手牌详情", "Hand Details", "Сведения рук"],
        "NO_HAND_HISTORY": ["無可用手牌記錄", "无可用手牌记录", "No hand history available", ""],
        "TXT_1003": ["底池", "底池", "Pot", "Банк"],
        "CCS_TXT_125": ["補充籌碼", "补充筹码", "Top Up Your Chips", "Пополнить фишки"],
        "CCS_TXT_436": ["買入", "买入", "Buy In", "Бай-ин"],
        "TXT_892": ["餘額: ", "余额: ", "Balance: ", "Баланс: "],
        "ROOM_TOUPTO": ["補充至", "补充至", "Top-up to", "Пополнитьдо"],
        "CARD_TYPES": ["牌型列表", "牌型列表", "Card Types", "Типы карт"],
        "CCS_TXT_311": ["入池率", "入池率", "VPIP", "VPIP"],
        "TXT_618": ["總手數", "总手数", "Total Hands", "Всего раздач"],
        "TXT_619": ["遊戲總數", "游戏总数", "Total Games", "Всего игр"],
        "WALLET_NAMW": ["錢包", "钱包", "Wallet", "Кошелек"],
        "CCS_TXT_101": ["站起", "站起", "Stand Up", "Встать"],
        "TXT_1636": ["開啟留座離桌", "开启留座离桌", "Step Away", "Отойти"],
        "TXT_1160": ["切換牌桌", "切换牌桌", "Switch Table", "Изменить стол"],
        "CCS_TXT_15": ["牌型大小", "牌型大小", "Hand Rankings", "Комбинации"],
        "SEATING_RULE": ["托管規則", "托管规则", "Hosting rules", "Правила размещения"],
        "CCS_TXT_235": ["退出遊戲", "退出游戏", "Exit Game", "Выйти из игры"],
        "CCS_TXT_236": ["玩家", "玩家", "Players", "Игроки"],
        "CCS_TXT_176": ["盈虧", "盈亏", "Winnings", "Выигрыш"],
        "NO_PLAYERS_TABLE": ["沒有玩家在桌子上", "没有玩家在桌子上", "No players on the table", ""],
        "ROOM_PLAYERS_DATA_TIP": ["只顯示當前坐下玩家數據", "只显示当前坐下玩家数据", "Stats only for current seated players", ""],
        "CCS_TXT_239": ["過牌", "过牌", "Check", "Чек"],
        "TXT_491": ["下注", "下注", "Bet", "Бет"],
        "TXT_70": ["跟注", "跟注", "Call", "Колл"],
        "CCS_TXT_231": ["加注", "加注", "Raise", "Рейз"],
        "CCS_TXT_208": ["全押", "全押", "All In", "All In"],
        "TXT_1009": ["棄牌/看牌", "弃牌/看牌", "Fold/Check", "Пас/Чек"],
        "TXT_1008": ["自動看牌", "自动看牌", "Auto Check", "Автоколл"],
        "TXT_1010": ["跟任何注", "跟任何注", "CallAny", "Колл любую"],
        "TXT_1007": ["看牌", "看牌", "Check", "Чек"],
        "CCS_TXT_376": ["返回牌桌", "返回牌桌", "I'm back", "Я снова здесь"],
        "CCS_TXT_33": ["強交大盲注", "强交大盲注", "Post Big Blind", "Поставить ББ"],
        "CCS_TXT_4": ["正在加載...", "正在加载...", "Loading...", "Загрузка..."],
        "TXT_1901": ["版本: %s", "版本: %s", "Version: %s", "версия: %s"],
        "TXT_757": ["盲注結構", "盲注结构", "Blind Structure", "Структура блайнда"],
        "CCS_TXT_66": ["前注", "前注", "Ante", "Первая ставка"],
        "TXT_785": ["詳情", "详情", "Details", "Сведения"],
        "TXT_97": ["报名", "报名", "Register", "Регистрация"],
        "TXT_803": ["當前盲注級別", "当前盲注级别", "Current Blind Level", "Текущий уровень"],
        "TXT_571": ["買入: ", "买入: ", "Buy-in: ", "Бай-ин: "],
        "CCS_TXT_364": ["重購: ", "重购: ", "Rebuy: ", "Ребай: "],
        "TXT_793": ["Add-on: ", "Add-on: ", "Add-on: ", "Адд-он: "],
        "CCS_TXT_333": ["起始籌碼: ", "起始筹码: ", "Starting Chips: ", "Стартовые фишки: "],
        "TXT_794": ["平均籌碼數: ", "平均筹码数: ", "Avg.Stacks: ", "Ср. стеки: "],
        "TXT_795": ["參賽人數範圍: ", "参赛人数范围: ", "Entry Range: ", "Диапазон входа: "],
        "TXT_1376": ["累加賞金: ", "累加赏金: ", "Progressive Bounty: ", "Прогрессивный баунти: "],
        "UP_5": ["參賽: ", "参赛: ", "Entries: ", "Входы: "],
        "TXT_796": ["休息: ", "休息: ", "Break: ", "Перерыв: "],
        "TXT_797": ["5分鐘/55分鐘", "5分钟/55分钟", "5 mins/55 mins", "5/55 мин"],
        "TXT_105": ["進行中", "进行中", "Processing", "Обработка"],
        "CCS_TXT_419": ["昵稱", "昵称", "Nickname", "Никнейм"],
        "TXT_1377": ["K.O.", "K.O.", "K.O.", "Охота"],
        "TXT_789": ["已報名: ", "已报名: ", "Enrolled: ", "Участники: "],
        "TXT_5116": ["僅顯示100人的報名訊息", "仅显示100人的报名信息", "Only registration information for 100 people is displayed", ""],
        "TXT_798": ["剩下的桌子數量: ", "剩下的桌子数量: ", "Table Left: ", "Осталось столов: "],
        "TXT_1144": ["獎池结构", "奖池结构", "Payout Structure", "Распределение призового фонда"],
        "TASK_DAILYREWARD": ["每日獎勵", "每日奖励", "Daily reward", "Ежедневная награда"],
        "CCS_TXT_267": ["确定", "确定", "OK", "OK"],
        "TXT_1167": ["第一天", "第一天", "Day 1", "1-й день"],
        "TXT_1168": ["第二天", "第二天", "Day 2", "2-й день"],
        "TXT_1169": ["第三天", "第三天", "Day 3", "3-й день"],
        "TXT_1170": ["第四天", "第四天", "Day 4", "4-й день"],
        "TXT_1171": ["第五天", "第五天", "Day 5", "5-й день"],
        "TXT_1172": ["第六天", "第六天", "Day 6", "6-й день"],
        "TXT_1173": ["第七天", "第七天", "Day 7", "7-й день"],
        "CCS_TXT_225": ["個人資訊", "个人信息", "Personal information", "Персональные данные"],
        "TXT_1014": ["確認", "确认", "Confirm", "Подтвердить"],
        "TXT_515": ["第一次免費更改", "第一次免费更改", "First Change free", "Первый обмен бесплатно"],
        "TXT_1408": ["默認", "默认", "Default", "По умолчанию"],
        "TXT_970": ["取消", "取消", "Canceled", "Отменено"],
        "TXT_1032": ["6+", "6+", "6+", "6+"],
        "CCS_TXT_432": ["遊戲", "游戏", "Game", "Игра"],
        "HOME_MORE": ["更多", "更多", "More", "Ещё"],
        "TASK_DAILY": ["每日任務", "每日任务", "Daily tasks", "Ежедневные задачи"],
        "TASK_CHALLENGE": ["挑戰任務", "挑战任务", "Challenge tasks", "Задачи челленджа"],
        "CCS_TXT_369": ["盲注: ", "盲注: ", "Blinds:", "Блайнды:"],
        "HOME_CLICK": ["點擊賺錢", "点击赚钱", "Click to earn", "Заработай!"],
        "TASK_TITLE": ["任務", "任务", "Missions", "Миссии"],
        "CCS_TXT_198": ["邀請", "邀请", "Invite", "Пригласить"],
        "LV_DETAILSTITLE": ["成長指引", "成长指引", "Growth Guide", "Руководство по развитию"],
        "LV_PERTAB": ["每次點擊", "每次点击", "Per tab", "На вкладку"],
        "LV_ENERGYLIMIT": ["能量上限", "能量上限", "Energy limit", "Лимит энергии"],
        "LV_REGEN": ["能量恢復/分鐘", "能量恢复/分钟", "Energy Regen/Min", "Восст./Мин"],
        "LV_NODE": ["減半節點", "减半节点", "Halving node", "Точка халвинга"],
        "LV_DETAILS1": ["1.現金桌中贏得$%s=%sXP", "1.现金桌中赢得$%s=%sXP；", "1.Win $%s in ring game = %sXP ;", "1. Выигрыш в %s долларов США в ринг-игре = %sXP ;"],
        "LV_DETAILS2": ["2.常規桌中贏得%sTGP=%sXP", "2.常规桌中赢得%sTGP=%sXP；", "2.Win %sTGP in ring game = %sXP;", "2. Выигрыш в %sTGP в ринг-игре = %sXP;"],
        "LV_DETAILS3": ["3.減半節點：當每日消耗的能量值達到減半節點後，單次點擊消耗的能量值不變，獲得的TGP數量減半。", "3.减半减半节点：当每日消耗的能量值达到减半节点后，单次点击消耗的能量值不变，获得的TGP数量减半。", "3.Halving Node: When the daily energy consumption reaches the halving node, the energy consumed per click remains unchanged, but the amount of TGP earned per click is halved.", "3. Точка халвинга: Когда ежедневное потребление энергии достигает точки халвинга, энергия, потребляемая за клик, остается неизменной, но количество TGP, зарабатываемое за клик, сокращается вдвое."],
        "TXT_936": ["我的遊戲", "我的游戏", "My Games", "Мои игры"],
        "BUTTON_RECOMMEND": ["推薦", "推荐", "Hot", "Хит"],
        "GAMELIST_PRACTICE": ["$TGP", "$TGP", "$TGP", "$TGP"],
        "GAMELIST_CASH": ["$USDT", "$USDT", "$USDT", "$USDT"],
        "CCS_TXT_199": ["MTT", "MTT", "MTT", "МTT"],
        "MARKET_BUY": ["買", "买", "Buy", "Купить"],
        "MARKET_SELL": ["賣", "卖", "Sell", "Продать"],
        "MARKET_MYORDERS": ["我的訂單", "我的订单", "My orders", "Мои заказы"],
        "TXT_558": ["簡介", "简介", "Profile", "Профиль"],
        "WALLET_TATLAMOUNT": ["總數", "总数", "Total amount", "Общая сумма"],
        "WALLET_DEPOSIT": ["充值", "充值", "Deposit", "Пополнение"],
        "WALLET_WITHDRAW": ["提現", "提现", "Withdraw", "Вывод"],
        "CCS_TXT_299": ["記錄", "记录", "Record", "Запись"],
        "TXT_85": ["客服", "客服", "Customer Service", "Служба поддержки"],
        "CCS_TXT_29": ["關於我們", "关于我们", "About Us", "О нас"],
        "CCS_TXT_97": ["語言", "语言", "Language", "Язык"],
        "HOME_NAME": ["主頁", "主页", "Home", "Главная"],
        "MARKET_MARKET": ["市場", "市场", "Market", "Рынок"],
        "MARKET_QUANTITY": ["數量", "数量", "Quantity", "Количество"],
        "MARKET_PRICE": ["價格", "价格", "Price", "Цена"],
        "MARKET_TOTAL": ["總價", "总价", "Total", "Всего"],
        "TXT_658": ["交易", "交易", "Trade", "Фишки"],
        "TXT_875": ["沒有數據", "没有数据", "No Data Yet", "Нет данных"],
        "MARKET_STATUS": ["狀態", "状态", "Status", "Статус"],
        "MARKET_CREATEORDER": ["創建訂單", "创建订单", "Create Order", "Создать заказ"],
        "CCS_TXT_427": ["確認", "确认", "Confirm", "Подтвердить"],
        "MARKET_TYPE": ["類型", "类型", "Type", "Тип"],
        "MARKET_AVALIABLE": ["可用餘額", "可用余额", "Avaliable", "Доступно"],
        "MARKET_COIN": ["代幣", "代币", "Coin", "Монета"],
        "WALLET_FEE": ["手續費", "手续费", "Fee", "Комиссия"],
        "CCS_TXT_404": ["取消", "取消", "Cancel", "Отмена"],
        "WALLET_CREDITED": ["實際到賬", "实际到账", "Credited Amount", "Зачисленная сумма"],
        "CCS_TXT_344": ["消息詳情", "消息详情", "Message Details", "Сообщение сведений"],
        "CCS_TXT_324": ["刪除", "删除", "Delete", "Удалить"],
        "CCS_TXT_360": ["消息", "消息", "Message", "Сообщение"],
        "TXT_1042": ["沒有消息", "没有消息", "No message", "Нет сообщений"],
        "CCS_TXT_295": ["消息將在 30 天後刪除", "消息将在 30 天后删除", "Messages will be deleted after 30 days", "Сообщения будут удалены через 30 дней"],
        "TXT_707": ["%s秒後重新發送", "%s秒后重新发送", "Resend after %ss", "Повторить через %sс"],
        "TXT_1193": ["我的手牌數", "我的手牌数", "My Hands", "Мои руки"],
        "CCS_TXT_190": ["收藏", "收藏", "Collection", "Избранное"],
        "TXT_1163": ["生涯", "生涯", "Career", "Карьера"],
        "INVITE_TITLE": ["邀請好友", "邀请好友", "Invient Friends", "Приглашенные друзья"],
        "INVITE_REWARD": ["邀請獎勵", "邀请奖励", "Invite Reward", "Награда за приглашение"],
        "INVITE_8": ["%s 你和你的好友均可獲得", "%s你和你的好友均可获得", "%s for you and your friend", "%s для вас и вашего друга"],
        "INVITE_7": ["邀請一個好友", "邀请一个好友", "Invient a friend", "Пригласите друга"],
        "INVITE_4": ["好友每日玩%s手牌", "好友每日玩%s手牌", "Friends play %s hands daily.", "Друзья играют %s рук в день."],
        "INVITE_6": ["每日玩牌", "每日玩牌", "Daily play", "Ежедневная игра"],
        "INVITE_3": ["獲得好友抽水的%s%", "获得好友抽水的%s%", "Earn %s% of your friend's rake", "Получите %s% рэйка от друга"],
        "INVITE_TASKTITLE1": ["加入常規桌", "加入常规桌", "Join ring game", "Присоединиться к кэш-игре"],
        "INVITE_RECORD": ["獎勵記錄", "奖励记录", "Reward Record", "Записи наград"],
        "INVITE_NORECORD": ["暫無邀請記錄", "暂无邀请记录", "No invitation records.", "Нет данных о приглашениях."],
        "CCS_TXT_165": ["日", "日", "SUN", "ВС"],
        "CCS_TXT_96": ["一", "一", "MON", "ПН"],
        "CCS_TXT_164": ["二", "二", "TUE", "ВТ"],
        "CCS_TXT_57": ["三", "三", "WED", "СР"],
        "CCS_TXT_266": ["四", "四", "THU", "ЧТ"],
        "CCS_TXT_336": ["五", "五", "FRI", "ПТ"],
        "CCS_TXT_152": ["六", "六", "SAT", "СУБ"],
        "NO_GAME_ON_TABLE": ["您還沒有報名任何比賽", "您还没有报名任何比赛", "You have not registered for any tournaments yet", "Вы еще не зарегистрировались ни на один турнир"],
        "POP_CONGRA": ["恭喜獲得", "恭喜获得", "CONGRATULATIONS", "ПОЗДРАВЛЕНИЯ"],
        "CONG_TXT": ["您已獲得金幣", "您已获得金币", "You have recived gold coins", "Вы получили золотые монеты"],
        "CCS_TXT_68": ["公告", "公告", "Announcement", "Объявление"],
        "CCS_TXT_416": ["開始時間: ", "开始时间: ", "Start Time: ", "Время начала: "],
        "CCS_TXT_462": ["結束時間", "结束时间", "End Time", "Окончание"],
        "WALLET_CURRENCY": ["貨幣", "货币", "Currency", "Валюта"],
        "WALLET_NET": ["網絡", "网络", "Network", "Сеть"],
        "WALLET_DEPADD": ["充值地址", "充值地址", "Deposit Address", "Адрес депозита"],
        "WALLET_TRANDETAILS": ["交易詳情", "交易详情", "Transaction Details", "Детали транзакции"],
        "TXT_586": ["時間", "时间", "Time", "Время"],
        "WALLET_HASH": ["交易哈希", "交易哈希", "Hash", "Хэш"],
        "WALLET_EVENT": ["行為", "行为", "Event", "Событие"],
        "WALLET_SUCCESSFUL": ["成功", "成功", "Successful", "Успешно"],
        "WALLET_FAILURE": ["失敗", "失败", "Failure", "Сбой"],
        "WALLET_PENDDING": ["支付中", "支付中", "Pending", "В ожидании"],
        "TXT_1019": ["提示", "提示", "Tips", "Советы"],
        "WALLET_POP1": ["實際到賬數量", "实际到账数量", "Amount Received", "Полученная сумма"],
        "WALLET_WITHDRAWAMOU": ["提現數量", "提现数量", "Withdraw Amount", "Сумма вывода"],
        "WALLET_WITHDRAWADD": ["提現地址", "提现地址", "Withdraw Address", "Адрес вывода"],
        "WALLET_AVALIABLE": ["可提現", "可提现", "Avaliable", "Доступно"],
        "WALLET_TITLE": ["我的錢包", "我的钱包", "My Wallet", "Мой кошелек"],
        "WALLET_REQSUB_DETAILS": ["產看詳情", "查看详情", "View Details", "Детали"],
        "WALLET_REQSUB": ["已提交申請", "已提交申请", "Request Submitted", "Запрос отправлен"],
        "CCS_TXT_1": ["高牌", "高牌", "High Card", "Старшая карта"],
        "CCS_TXT_430": ["一對", "一对", "One Pair", "Пара"],
        "CCS_TXT_340": ["兩對", "两对", "Two Pair", "Две пары"],
        "CCS_TXT_212": ["三條", "三条", "Three Of A Kind", "Тройка"],
        "CCS_TXT_399": ["順子", "顺子", "Straight", "Стрит"],
        "TXT_399": ["成功取消了牌局的收藏", "成功取消了牌局的收藏", "Successfully cancelled the hand archive. ", "Коллекция игры отменена."],
        "CCS_TXT_159": ["同花", "同花", "Flush", "Флеш"],
        "CCS_TXT_406": ["葫蘆", "葫芦", "Full House", "Фулл-хаус"],
        "CCS_TXT_147": ["四條", "四条", "Four Of A Kind", "Каре"],
        "TXT_147": ["最大攜帶必須不小於最小攜帶", "最大携带必须不小于最小携带", "The maximum carry must not be less than the minimum carry.", "Максимальное каре не должно быть меньше минимального."],
        "CCS_TXT_458": ["同花順", "同花顺", "Straight Flush", "Стрит-флеш"],
        "TXT_458": ["您已離開俱樂部 %s(id: %d)。您的 %.02f 俱樂部籌碼已歸還俱樂部。", "您已离开俱乐部 %s(id: %d)。您的 %.02f 俱乐部筹码已归还俱乐部。", "You have left the Club %s(id:%d). Your %.02f Club Chips have been reclaimed to the club.", "Вы покинули клуб %s (ID: %d). Ваши клубные фишки %.02f возвращены клубу."],
        "CCS_TXT_467": ["皇家同花順", "皇家同花顺", "Royal Flush", "Флеш-рояль"],
        "TXT_1196": ["大廳", "大厅", "LOBBY", "ЛОББИ"],
        "CCS_TXT_36": ["NLH", "NLH", "NLH", "NLH"],
        "TXT_36": ["俱樂部名稱只能包含字母和數字，請您重新輸入", "俱乐部名称只能包含字母和数字，请您重新输入", "The club name can only contain letters and numbers, please re-enter.", "Имя клуба должно содержать только буквы и цифры. Введите повторно."],
        "CCS_TXT_274": ["6+", "6+", "6+", "6+"],
        "TXT_274": ["請輸入數量", "请输入数量", "Please enter the amount", "Введите сумму"],
        "TXT_877": ["PLO4", "PLO4", "PLO4", "PLO4"],
        "TXT_878": ["PLO5", "PLO5", "PLO5", "PLO5"],
        "TXT_879": ["PLO6", "PLO6", "PLO6", "PLO6"],
        "TXT_1675": ["OFC", "OFC", "OFC", "OFC"],
        "TXT_1872": ["Color Game", "Color Game", "Color Game", "Игры цветов"],
        "TXT_1030": ["NLH", "NLH", "NLH", "NLH"],
        "TXT_734": ["驗證碼不正確", "验证码不正确", "Incorrect Verification Code", "Некорректный код подтверждения"],
        "TXT_735": ["電子郵件已被使用", "电子邮件已被使用", "Email already in use", "Этот адрес эл. почты уже использовался"],
        "TXT_737": ["電子郵件帳戶或密碼不正確", "电子邮件帐户或密码不正确", "Incorrect email account or password", "Некорректный аккаунт адреса эл. почты или пароль"],
        "TXT_740": ["達到最大註冊數", "达到最大注册数", "Max.registrations reached", "Достигнуто макс. количество регистраций"],
        "TXT_741": ["驗證碼請求過於頻繁", "验证码请求过于频繁", "Verification code requests are too frequent", "Слишком частые запросы кода подтверждения"],
        "TXT_742": ["未找到電子郵件", "未找到电子邮件", "The email was not found", "Адрес эл. почты не найден"],
        "CCS_TXT_332": ["比賽結束", "比赛结束", "End of Tournament", "Матч завершен"],
        "TXT_332": ["房間號", "房间号", "Room ID", "ID комнаты"],
        "TXT_1211": ["房間已經關閉", "房间已经关闭", "This game has ended", "Игра закончилась"],
        "TXT_1914": ["操作成功", "操作成功", "Post successfully", "Опубликовать успешно"],
        "TXT_1101": ["保護您免受斷開連接", "保护您免受断开连接", "Protecting you from a disconnect", "Защита от отключения"],
        "TXT_1222": ["餘額不足，無法購買", "余额不足，无法购买", "Insufficient balance to buy in", "Недостаточный баланс. Покупка недоступна."],
        "TXT_937": ["帶入的籌碼超過上限", "带入的筹码超过上限", "Chips brought in exceed the maximum limit", "Количество внесенных фишек превышает максимум"],
        "UP_3": ["%s使用特權查看公共牌", "%s使用特权查看公共牌", "%s pays to rabbit", "%s платит за докрутку"],
        "TXT_855": ["這手牌之後可以Addon", "这手牌之后可以Addon", "Addon after this hand", "Адд-он после этой руки"],
        "TXT_856": ["這手牌之後的休息時間", "这手牌之后的休息时间", "break time after this hand", "перерыв после этой руки"],
        "TOAST_MTTFIN": ["比賽已結束", "比赛已结束", "Tournament finished", "Турнирзавершён"],
        "TXT_240": ["比賽關閉", "比赛关闭", "Match Closed", "Матч закрыт"],
        "UP_33": ["比賽“%s”已關閉。您的註冊和服務費總計 %s 金幣，已退還到您的帳戶。", "比赛“%s”已关闭。您的注册和服务费总计 %s 金币，已退还到您的帐户。", "The match \"%s\" has been closed. Your registration and service fee totaling %s coins have been refunded to your account.", "Матч \"%s\" был закрыт. Ваша регистрация и сервисный сбор на сумму %s монет были возвращены на ваш счет."],
        "UP_34": ["%s %s 比賽已關閉，報名票已退還至您的帳戶，請注意。", "%s %s 比赛已关闭，报名票已退还至您的账户，请注意。", "The %s %s match has been closed, and the registration ticket has been refunded to your account. Please take note.", "Матч %s %s был закрыт, и регистрационный билет был возвращен на ваш счет. Пожалуйста, обратите внимание."],
        "UP_35": ["%s 比賽已關閉，報名費%s已退還到您的帳戶，請注意。", "%s 比赛已关闭，报名费%s已退还到您的帐户，请注意。", "The %s match has been closed, and the registration fee of %s has been refunded to your account. Please take note.", "Матч %s был закрыт, и регистрационный взнос в размере %s был возвращен на ваш счет. Пожалуйста, обратите внимание."],
        "TXT_1158": ["金幣", "金币", "Gold", "Золото"],
        "UP_48": ["排行榜獎勵", "排行榜奖励", "Ranking Awards", ""],
        "UP_52": ["您在大廳盈利排行榜獲得第%d名，獲得獎勵%s，請在背包查看", "您在大厅盈利排行榜获得第%d名，获得奖励%s，请在背包查看", "You ranked %dst on the Hall Profit Leaderboard and received a reward of %s. Please check your backpack", ""],
        "UP_53": ["您在大廳MTT盈利排行榜獲得第%d名，獲得獎勵%s，請在背包查看", "您在大厅MTT盈利排行榜获得第%d名，获得奖励%s，请在背包查看", "You ranked %dst on the Hall MTT Profit Leaderboard and received a reward of %s. Please check your backpack.", ""],
        "UP_54": ["您在大廳資產排行榜獲得第%d名，獲得獎勵%s，請在背包查看", "您在大厅资产排行榜获得第%d名，获得奖励%s，请在背包查看", "You ranked %dst on the Hall Assets Leaderboard and received a reward of %s. Please check your backpack.", ""],
        "UP_49": ["您在大廳盈利排行榜獲得第%d名，獲得獎勵%s", "您在大厅盈利排行榜获得第%d名，获得奖励%s", "You ranked %dst on the Hall Profit Leaderboard and received a reward of %s", ""],
        "UP_50": ["您在大廳MTT盈利排行榜獲得第%d名，獲得獎勵%s", "您在大厅MTT盈利排行榜获得第%d名，获得奖励%s", "You ranked %dst on the Hall MTT Profit Leaderboard and received a reward of %s", ""],
        "UP_51": ["您在大廳資產排行榜獲得第%d名，獲得獎勵%s", "您在大厅资产排行榜获得第%d名，获得奖励%s", "You ranked %dst on the Hall Assets Leaderboard and received a reward of %s", ""],
        "MARKET_PLACED": ["掛單中", "挂单中", "Listing", "Листинг"],
        "MARKET_COMPLETE": ["已完成", "已完成", "Completed", "Выполнено"],
        "MARKET_DELISTED": ["已下架", "已下架", "Dlisted", "Снято"],
        "TXT_541": ["補充的籌碼將在下一手牌生效", "补充的筹码将在下一手牌生效", "The reloaded chips will be available the next hand", "Дополнительные фишки будут активированы в следующей руке"],
        "TXT_630": ["房間裏沒有其他玩家", "房间里没有其他玩家", "No other players in the room", "В комнате нет других игроков"],
        "TXT_631": ["阻止 %s 聊天", "阻止 %s 聊天", "Block %s from chatting", "Заблокировать %s в чате"],
        "TXT_633": ["取消阻止 %s 聊天", "取消阻止 %s 聊天", "Unblock %s to chat", "Разблокируйте %s, чтобы общаться"],
        "TXT_632": ["等待 %d秒", "等待 %d秒", "wait %ds", "подождите %dс"],
        "UP_24": ["獎池中每 %s 金幣將生成一張門票", "奖池中每 %s 金币将生成一张门票", "One ticket will be generated for every %s gold in the prize pool", ""],
        "TXT_236": ["火箭", "火箭", "Rocket", "Ракета"],
        "TXT_1330": ["旁觀", "旁观", "Spectator", "Наблюдатель"],
        "TXT_833": ["玩遊戲時無法查看其他牌桌", "玩游戏时无法查看其他牌桌", "Cannot view other tables while playing", "Невозможно просматривать другие столы во время игры"],
        "TXT_327": ["您已在該房間", "您已在该房间", "You are already in the room.", "Вы уже в комнате."],
        "TXT_849": ["無法進入當前牌桌", "无法进入当前牌桌", "Cannot enter current table", "Невозможно указать текущий стол"],
        "TXT_817": ["您現在有 %s 籌碼，addon可以增加 %s 籌碼，是否花費 %s 俱樂部籌碼進行addon？%s", "您现在有 %s 筹码，addon可以增加 %s 筹码，是否花费 %s 俱乐部筹码进行addon？%s", "You have %s chips now, add-on %s chips with %s club chips?%s", "Сейчас у Вас %s фишек, выполнить адд-он %s фишек за счет %s клубных фишек?%s"],
        "MTT_ADDONDETAIL": ["您現在有 %s 籌碼，addon可以增加 %s 籌碼，是否花費 %s 進行addon？%s", "您现在有 %s 筹码，addon可以增加 %s 筹码，是否花费 %s 进行addon？%s", "You have %s chips now, add-on %s chips with %s ?%s", ""],
        "TXT_850": ["Add-on成功", "Add-on成功", "Add-on Succeeded", "Выполнен адд-он"],
        "TXT_819": ["花費 %s 俱樂部籌碼 購買 %s 籌碼？%s", "花费 %s 俱乐部筹码 购买 %s 筹码？%s", "Spend %s club chips on %s chips?%s", "Потратить %s клубных фишек на %s фишек?%s"],
        "MTT_REBUYDETAIL": ["花費 %s 購買 %s 籌碼？%s", "花费 %s 购买 %s 筹码？%s", "Spend %s on %s chips?%s", ""],
        "TXT_494": ["等待下一手生效", "等待下一手生效", "Waiting for the next hand to take effect", "Дождитесь активации следующей руки"],
        "TXT_1702": ["您已退出遊戲，可以重新購買以再次進入遊戲。", "您已退出游戏，可以重新购买以再次进入游戏。", "You have been withdrawn from the game, you can rebuy to enter the game again", "Вы были выведены из игры, вы можете сделать ребай, чтобы снова войти в игру"],
        "TXT_873": ["沒有桌子可以圍觀", "没有桌子可以围观", "No tables to observe", "Нет столов для просмотра"],
        "TXT_1257": ["翻牌", "翻牌", "Flop", "Терновер"],
        "TXT_1258": ["轉牌", "转牌", "Turn", "Терн"],
        "TXT_1259": ["河牌", "河牌", "River", "Ривер"],
        "TXT_621": ["ITM", "ITM", "ITM", "ITM"],
        "TXT_1541": ["冠軍", "冠军", "Champion", "чемпион"],
        "TXT_311": ["取消收藏", "取消收藏", "Cancel Collection", "Удалить из Избранного"],
        "TXT_616": ["如果您選擇在這手牌結束前直接退出，您將放棄底池。", "如果您选择在这手牌结束前直接退出，您将放弃底池。", "You'll give up the pot if you choose to exit directly before this hand ends.", "Вы откажетесь от банка, если решите выйти до окончания этой руки."],
        "TXT_603": ["確定要退出牌桌嗎？", "确定要退出牌桌吗？", "Are you sure you want to exit the table?", "Покинуть стол?"],
        "TXT_1397": ["如果你選擇在這手牌結束之前離開座位，您將放棄底池。", "如果你选择在这手牌结束之前离开座位，您将放弃底池。", "You'll give up the pot if you choose to stand up before this hand ends.", "Вы откажетесь от банка, если решите встать до окончания этой руки."],
        "SEATING_RULE_DESC": ["在比賽中，如果您留座離桌後，當系統幫您託管%d次後，您將被自動全押。", "在比赛中，如果您留座离桌后，当系统帮您托管%d次后，你将被自动全押。", "In the match, if you sit out and leave the room, after the system has taken over %d times, you will be automatically all-in.", "В матче, если вы в ситауте и покинете комнату, после того как система возьмет управление %d раз, вы автоматически пойдете ва-банк."],
        "TXT_239": ["順子", "顺子", "STRAIGHT", "СТРИТ"],
        "TXT_208": ["All-In", "All-In", "All-In", "Олл-ин"],
        "TXT_348": ["延時", "延时", "Delay", "Задержка"],
        "TXT_267": ["房間人數已滿，請進入其他房間", "房间人数已满，请进入其它房间", "The room is full, please enter another room.", "Комната заполнена, укажите другую."],
        "TXT_224": ["等待", "等待", "Waiting", "Ожидание"],
        "TXT_1649": ["等待其他玩家加入", "等待其他玩家加入", "Wait for balancing table", "Ожидание балансировки стола"],
        "TXT_453": ["等待同步發牌", "等待同步发牌", "Waiting for\nsynchronization", "Waiting for\nsynchronization"],
        "TXT_133": ["您可以選擇看牌，仍然確定棄牌嗎？", "您可以选择看牌，仍然确定弃牌吗？", "Check available, still confirm to fold?", "Можно посмотреть на карты. По-прежнему хотите выполнить пас?"],
        "TXT_1001": ["1/2底池", "1/2底池", "1/2Pot", "1/2Банк"],
        "TXT_1002": ["2/3底池", "2/3底池", "2/3Pot", "2/3Банк"],
        "TXT_201": ["伺服器關閉了您的連接", "服务器关闭了您的连接", "The Server disconnect you", "Подключение прекращено сервером"],
        "UP_2": ["您的帳戶已被刪除", "您的帐户已被删除", "Your account has been deleted", "Ваш аккаунт был удален"],
        "TXT_1309": ["您的帳號在另外設備登錄！", "您的账号在另外设备登录！", "Log in with your account on another device!", "Войдите через Ваш аккаунт на другом устройстве!"],
        "TXT_552": ["您的網路連接可能有問題，請檢查並重試", "您的网络连接可能有问题，请检查并重试", "There may be a problem with your network connection, please check and try again", "Возможно, у Вас возникла проблема с сетью. Проверьте и повторите попытку. "],
        "TXT_553": ["此應用程式在您所在的地區不可用。帶來不便敬請諒解。", "此应用程序在您所在的地区不可用。带来不便敬请谅解。", "This application is not available in your region. Sorry for the inconvenience.", "Это приложение недоступно в Вашем регионе. Приносим извинения за доставленные неудобства."],
        "TXT_545": ["退出", "退出", "Exit", "Выйти"],
        "TXT_826": ["已取消報名", "已取消报名", "Registration Cancelled", "Регистрация отменена"],
        "TXT_827": ["買入已退還至您的帳戶", "买入已退还至您的账户", "Buy-in has been refunded to your account", "Сумма покупки возвращена в Ваш аккаунт"],
        "TXT_1715": ["三個時間分別為，截止報名前升盲時間/截止報名後升盲時間/決勝桌升盲時間。", "三个时间分别为，截止报名前升盲时间/截止报名后升盲时间/决胜桌升盲时间。", "These three time periods refer to the different Blind Level time lengths: \nBefore Late Reg. Ends / After Late Reg. Ends / Final Table.", "Эти три числа относятся к различным временным отрезкам размера блайндов:\nдо окончания поздней рег. / после окончания поздней рег. / финальный стол."],
        "TXT_323": ["免費", "免费", "Free", "Бесплатно"],
        "TXT_832": ["級別 %s", "级别 %s", "Level %s", "уровень %s"],
        "TXT_901": ["無限", "无限", "Unlimited", "Нет ограничений"],
        "TXT_257": ["已關閉", "已关闭", "Closed", "Закрыто"],
        "TXT_368": ["分鐘", "分钟", "mins", "мин"],
        "TXT_759": ["標準", "标准", "Standard", "Стандарт"],
        "TXT_760": ["快速", "快速", "Turbo", "Турбо"],
        "TXT_761": ["深籌", "深筹", "Deep Stack", "Дип стек"],
        "MTT_Ended": ["已結束", "已结束", "Ended", "Завершено"],
        "MTT_COUNTDOWN": ["開賽倒計時 ", "开赛倒计时 ", "Countdown to Start ", "Счетчик "],
        "MTT_RUNNING": ["已進行", "已进行", "Runging", "В процессе"],
        "MTT_RegClosed": ["已截止報名", "已截止报名", "Registration closed", "Регистрация закрыта"],
        "MTT_RegCloseTime2": ["報名截止", "报名截止", "Registration closes in", "акрытие через"],
        "INVITE_MINUTE": ["分鐘", "分钟", "minutes", "минут"],
        "TASK_999": ["連續登錄獎勵", "连续登录奖励", "Consecutive Login", "Последовательный вход"],
        "CCS_TXT_342": ["關閉", "关闭", "Close", "Закрыть"],
        "TXT_342": ["申請重購成功，等待管理員確認", "申请重购成功，等待管理员确认", "rebuy request successful, waiting for admin confirmation", "Дождитесь активации следующей руки"],
        "INVITE_2": ["您收到了1份邀請獎勵", "您收到了1份邀请奖励", "You have received an invitation reward", "Вы получили награду за приглашение"],
        "INVITE_1": ["您的好友為您準備了一份見面禮", "您的好友为您准备了一份见面礼", "Your friend has prepared a welcome gift for you", "Ваш друг подготовил для вас приветственный подарок"],
        "HOME_WELCOMEGIFT": ["TGPoker送您一份新人見面禮", "TGPoker送您一份新人见面礼", "TGPoker has a welcome gift for you.", "У TGPoker есть для вас приветственный подарок."],
        "UP_31": ["免費", "免费", "Freeroll", "Фриролл"],
        "CCS_TXT_228": ["排名 %s", "排名 %s", "Rank %s", "Рейтинг %s"],
        "CCS_TXT_17": ["旁觀", "旁观", "Observe", "Наблюдать"],
        "TXT_17": ["鬆開刷新", "松开刷新", "Release To Refresh", "Отпустите, чтобы обновить"],
        "TXT_47": ["進入", "进入", "Enter", "Ввод"],
        "BUTTON_ENROLLED": ["已報名", "已报名", "Enrolled", "Зарегистрирован"],
        "TXT_252": ["請輸入俱樂部名稱", "请输入俱乐部名称", "Please enter the club name", "Введите имя клуба"],
        "UP_1": ["請聯繫客戶服務", "请联系客户服务", "Please contact customer service", "Свяжитесь с службой поддержки"],
        "MARKET_UNLIST": ["下架", "下架", "Cancel listing", "Отменить листинг"],
        "COMMON_SUCCESS": ["成功", "成功", "Success", "Успех"],
        "TXT_176": ["購買成功", "购买成功", "Purchase Successful", "Покупка выполнена"],
        "MARKET_ERROR": ["訂單異常%s", "订单异常%s", "Order Exception %s", "Исключение заказа %s"],
        "MARKET_TIPS3": ["總價值不可小於$1", "总价值不可小于$1", "The total value cannot be less than $1", "Общая стоимость не может быть меньше 1 доллара США"],
        "MARKET_TIPS2": ["掛單總價最多支持小數點後2位", "挂单总价最多支持小数点后2位", "The total order price can have at most two decimal places.", "Общая стоимость заказа может иметь не более двух десятичных знаков."],
        "TXT_37": ["刪除成功", "删除成功", "Successfully Deleted", "Удалено"],
        "TXT_639": ["保存到收藏中", "保存到收藏中", "Saved into archive", "Сохранено в коллекцию"],
        "TXT_140": ["複製成功", "复制成功", "Copy Success", "Скопировано"],
        "INVITE_9": ["被邀請獎勵", "被邀请奖励", "Referral reward", "Реферальная награда"],
        "INVITE_YEAR": ["年", "年", "years", "лет"],
        "INVITE_AGO": ["前", "前", "ago", "назад"],
        "INVITE_MONTH": ["月", "月", "months", "месяцев"],
        "INVITE_DAY": ["天", "天", "days", "дней"],
        "INVITE_HOUR": ["小時", "小时", "hours", "часов"],
        "INVITE_SECOND": ["秒", "秒", "seconds", "секунд"],
        "INVITE_SHARETXT": ["Click to earn ,Play to win ", "Click to earn ,Play to win ", "Click to earn ,Play to win ", "Click to earn ,Play to win "],
        "TXT_248": ["修改昵稱需要花費%d鑽石", "修改昵称需要花费%d钻石", "It takes %d diamonds to change the nickname", "Бриллианты к оплате для изменения никнейма: %d"],
        "TXT_76": ["帳號名不能為空", "账号名不能为空", "Account name cannot be empty", "Имя аккаунта не может быть пустым"],
        "LAB_NICKNAME_TIP": ["昵稱長度應為4-16位字元。", "昵称长度应为4-16位字符。", "Length of nickname should be within 4-16 characters.", "Ник должен содержать от 4 до 16 символов."],
        "TXT_13": ["鑽石不足去商店購買", "钻石不足去商店购买", "Insufficient Diamonds, Please Reload", "Недостаточно бриллиантов. Перейдите в магазин для покупки."],
        "TXT_316": ["系統維護中，暫時不能修改頭像", "系统维护中，暂时不能修改头像", "System under maintenance, avatar cannot be modified temporarily. ", "Аватар нельзя изменить во время обслуживания системы."],
        "TXT_65": ["修改成功", "修改成功", "Successfully modified", "Изменено"],
        "TXT_452": ["範圍應在 %s 天內", "范围应在 %s 天内", "The range should be within %s days", "Диапазон – %s дней"],
        "TXT_374": ["停服維護中，請您耐心等待開服。", "停服维护中，请您耐心等待开服。", "Out of service for maintenance, please wait patiently for now. ", "Сервер находится на обслуживании. Дождитесь его перезагрузки."],
        "WALLET_MINDEP": ["最低充值", "最低充值", "Minimum Deposit", "Минимальный депозит"],
        "TXT_138": ["操作失敗", "操作失败", "Operation Failed", "Сбой выполнения"],
        "WALLET_MINIMUM": ["最小限額", "最小限额", "Minimum", "Минимум"],
        "WALLET_ADRESSEMPTY": ["請輸入正確地址", "请输入正确地址", "Please enter your adress.", "Пожалуйста, введите ваш адрес."],
        "WALLET_ERROTIPS1": ["提現地址不可和充值地址相同", "提现地址不可和充值地址相同", "The withdraw address can not be the same as the deposit address.", "Адрес вывода не может совпадать с адресом депозита."],
        "WALLET_AMOUNTEMPTY": ["請輸入數量", "请输入数量", "Please enter your amount.", "Пожалуйста, введите вашу сумму."],
        "WALLET_ERROTIPS4": ["轉出數量不可低於%d USD", "转出数量不可低于%d USD", "The withdrawal amount cannot be less than %d USD.", "Сумма вывода не может быть меньше %d долларов США."],
        "PROP_101": ["銀卡7天", "银卡7天", "Silver VIP Card 7 Days", "Серебряная VIP-карта на 7 дней"],
        "PROP_102": ["銀卡30天", "银卡30天", "Silver VIP Card 30 Days", "Серебряная VIP-карта на 30 дней"],
        "PROP_103": ["銀卡90天", "银卡90天", "Silver VIP Card 90 Days", "Серебряная VIP-карта на 90 дней"],
        "PROP_104": ["銀卡天", "银卡天", "Silver VIP Card  Days", "Серебряная VIP-карта на  дней"],
        "PROP_105": ["黑卡7天", "黑卡7天", "Black VIP Card 7 Days", "Черная VIP-карта на 7 дней"],
        "PROP_106": ["黑卡30天", "黑卡30天", "Black VIP Card 30 Days", "Черная VIP-карта на 30 дней"],
        "PROP_107": ["黑卡90天", "黑卡90天", "Black VIP Card 90 Days", "Черная VIP-карта на 90 дней"],
        "PROP_108": ["黑卡365天", "黑卡365天", "Black VIP Card 365 Days", "Черная VIP-карта на 365 дней"],
        "PROP_109": ["鉑金卡7天", "铂金卡7天", "Platinum VIP Card 7 Days", "Платиновая VIP-карта на 7 дней"],
        "PROP_110": ["鉑金卡30天", "铂金卡30天", "Platinum VIP Card 30 Days", "Платиновая VIP-карта на 30 дней"],
        "PROP_111": ["鉑金卡90天", "铂金卡90天", "Platinum VIP Card 90 Days", "Платиновая VIP-карта на 90 дней"],
        "PROP_112": ["鉑金卡365天", "铂金卡365天", "Platinum VIP Card 365 Days", "Платиновая VIP-карта на 365 дней"],
        "PROP_113": ["時間銀行", "时间银行", "Time Bank", "Тайм банк"],
        "PROP_114": ["看公共牌", "看公共牌", "Rabbit Camera", "Rabbit Camera"],
        "PROP_1001": ["金幣", "金币", "Gold", "Золото"],
        "PROP_1002": ["鑽石", "钻石", "Diamond", "Бриллиант"],
        "PROP_2001": ["1美元", "1美元", "$1", "1 доллар США"],
        "PROP_2002": ["2美元", "2美元", "$2", "2 доллара США"],
        "PROP_2003": ["3美元", "3美元", "$3", "3 доллара США"],
        "PROP_2004": ["4美元", "4美元", "$4", "4 доллара США"],
        "PROP_2005": ["iPhone15", "iPhone15", "iPhone15", "iPhone15"],
        "PROP_2006": ["5美元", "5美元", "$5", "5 долларов США"],
        "PROP_3001": ["$50門票", "$50门票", "$50 Ticket", "Билет на 50 долларов США"],
        "TASK_CLAIM": ["領取", "领取", "Claim", "Получить"],
        "TASK_CLAIMED": ["已領取", "已领取", "Claimed", "Получено"],
        "TASK_GO": ["前往", "前往", "Go", "Перейти"],
        "TASK_1006": ["非MTT的任意牌局獲勝10局", "非MTT的任意牌局获胜10局", "Win 10 hands in any non-MTT games", "Выиграйте 10 рук в любых играх, не относящихся к MTT"],
        "TASK_1095": ["在MTT中獲得前10名%s次", "在MTT中获得前10名%s次", "Place in the top 10 in MTT %s times", "Займите топ-10 в MTT %s раз"],
        "TASK_1008": ["累計贏得1,000,000金幣", "累计赢得1,000,000金币", "Accumulate 1,000,000 gold coins", "Накопите 1 000 000 золотых монет"],
        "TASK_1009": ["累計贏得%s金幣", "累计赢得%s金币", "Accumulate %s gold coins", "Накопите %s золотых монет"],
        "TASK_1011": ["常規局贏三條或以上5次", "常规局赢三条或以上5次", "Win 5 times with trips+ in ring games", "Выиграйте 5 раз с комбинацией \"трипс\" или выше в ринг-играх"],
        "TG_TASK_1": ["加入我們的Telegram Channel", "加入我们的Telegram Channel", "Join our Telegram channel", "Вступайте в наш Telegram-канал"],
        "TG_TASK_2": ["邀請%s個好友", "邀请%s个好友", "Invite %s friends", "Пригласить %s друзей"],
        "TG_TASK_3": ["常規桌中贏得%s TGP", "常规桌中赢得%s TGP", "Win %s TGP in ring game", "Выиграть %s TGP в ринг-игре"],
        "TG_TASK_4": ["玩%s手牌", "玩%s手牌", "Play %s hands", "Сыграть %s рук"],
        "TG_TASK_5": ["獲得同花以上牌型", "获得同花以上牌型", "Get a flush or better", "Соберите флеш или выше"],
        "TG_TASK_6": ["現金桌中贏得$%s", "现金桌中赢得$%s", "Win $%s in ring game", "Выиграть $%s в ринг-игре"],
        "TG_TASK_7": ["每日獲勝%s次", "每日获胜%s次", "Win %s times daily", "Выигрывайте %s раз в день"],
        "TG_TASK_8": ["完成一筆充值", "完成一笔充值", "Complete a deposit", "Завершите пополнение"],
        "TASK_MTT10": ["錦標賽獲得前10名", "锦标赛获得前10名", "Finish in the Top 10 in a Tournament", "Занять место в десятке на турнире"],
        "TASK_TOAST_1": ["當前為您的操作回合，暫時無法查看任務窗口", "当前为您的操作回合，暂时无法查看任务窗口", "It is currently your turn to act. You cannot view the mission window at this time.", "Сейчас ваша очередь действовать. Вы не можете просматривать окно миссий в данный момент."],
        "MTT_RegCloseTime": ["報名將在%d分鐘後截止", "报名将在%d分钟后截止", "Registration closes in %d min(s)", "Регистрация заканчивается через %d мин"],
        "PROP_113_detail": ["延長思考時間", "延长思考时间", "Extend Thinking Time", "Продлить время на обдумывание"],
        "PROP_114_detail": ["查看當前輪次的所有公共牌", "查看当前轮次的所有公共牌", "View all community cards in the current round.", "Просмотреть все общие карты в текущем раунде."],
        "PROP_2003_detail": ["可聯繫客服兌換3美元", "可联系客服兑换3美元", "Contact customer service to exchange $3.", "Свяжитесь со службой поддержки для обмена 3 долларов США."],
        "PROP_2004_detail": ["可聯繫客服兌換4美元", "可联系客服兑换4美元", "Contact customer service to exchange $4.", "Свяжитесь со службой поддержки для обмена 4 долларов США."],
        "PROP_2006_detail": ["可聯繫客服兌換5美元", "可联系客服兑换5美元", "Contact customer service to exchange $5.", "Свяжитесь со службой поддержки для обмена 5 долларов США."],
        "PROP_2001_detail": ["可聯繫客服兌換1美元", "可联系客服兑换1美元", "Contact customer service to exchange $1.", "Свяжитесь со службой поддержки для обмена 1 доллара США."],
        "PROP_2002_detail": ["可聯繫客服兌換2美元", "可联系客服兑换2美元", "Contact customer service to exchange $2.", "Свяжитесь со службой поддержки для обмена 2 долларов США."],
        "PROP_3001_detail": ["用於比賽報名", "用于比赛报名", "Used for tournament registration.", "Используется для регистрации на турнир."],
        "ACTIVATE": ["激活", "激活", "Activate", "Активировать"],
        "BIND_UPLINE": ["綁定上線", "绑定上线", "Bind to Upline", "Привязка к верхнему уровню"],
        "REBATE_LIMIT_AGENT": ["該俱樂部啟用了無限代理返利功能，不再支持手動設置用戶角色為代理或超級代理！", "该俱乐部开启了无限代理返利功能，不再支持主动设置用户角色为代理或超级代理！", "The club has enabled unlimited proxy rebate functionality and no longer supports manually setting user roles as agents or super agents!", "Клуб активировал функцию неограниченного возврата через прокси и больше не поддерживает ручное назначение ролей пользователей в качестве агентов или супер-агентов!"],
        "WALLET_ERROTIPS2": ["地址錯誤", "地址错误", "Invalid address", "Неверный адрес"],
        "WALLET_ERROTIPS3": ["超出餘額上限", "超出余额上限", "Insufficient Balance", "Недостаточный баланс"],
        "WALLET_EMPTY": ["提現地址/提現金額不可為空", "提现地址/提现金额不可为空", "Withdrawal address/amount cannot be empty.", "Адрес/сумма вывода не могут быть пустыми."],
        "RANK_DEFAULT": ["敬請期待", "敬请期待", "Look forward to it", "Ожидайте"],
        "INVITE_5": ["一個好友每日玩%s手牌即可獲得獎勵", "一个好友每日玩%s手牌即可获得奖励", "One friend playing %s hands daily will earn a reward.", "Один друг, играющий %s рук в день, получит вознаграждение."],
        "SPINUP_MULTIPLIER": ["乘數", "乘数", "Multiplier", "Множитель"],
        "SPINUP_PERCENT": ["百分比", "百分比", "Percentage", "Процент"],
        "CHAT_FAST_1": ["大家好！", "你好，大家！", "Hello, everyone!", "Всем привет!"],
        "CHAT_FAST_2": ["祝好運！", "祝好运！", "Good luck!", "Удачи!"],
        "CHAT_FAST_3": ["加油！", "加油！", "Go for it!", "Вперед!"],
        "CHAT_FAST_4": ["很棒！", "很棒！", "Nice hand!", "Хорошая рука!"],
        "CHAT_FAST_5": ["做得好！", "决定太棒了！", "Great decision!", "Отличное решение!"],
        "CHAT_FAST_6": ["我贏了！", "我赢了！", "I won!", "Я выиграл!"],
        "CHAT_FAST_7": ["真倒楣！", "运气太差了！", "Such bad luck!", "Вот невезуха!"],
        "CHAT_FAST_8": ["你有什麼牌？", "你有什么牌？", "What cards do you have?", "Какие у тебя карты?"],
        "CHAT_FAST_9": ["恭喜！", "祝贺你！", "Congratulations!", "Поздравляю!"],
        "CHAT_FAST_10": ["今天是你的幸運日嗎？", "今天是你的幸运日吗？", "Is it your lucky day?", "Удачный день?"],
        "MARKET_TIPS1": ["確認取消掛單嗎？", "确认取消挂单吗？", "Are you sure you want to cancel the order?", "Вы уверены, что хотите отменить заказ?"],
        "INVITE_PMTITLE": ["", "合伙人计划", "Partner Program", "Партнёрская программа"],
        "INVITE_PMCONTACTTIP": ["", "如果你拥有媒体资源并能邀请大量用户，我们将为你提供独家优惠，奖励金额将超过此处列出的标准。请联系 %s。", "If you have access to media resources and can bring in a significant number of users, we'll provide you with an exclusive offer featuring rewards higher than those listed here.", "Если у вас есть медиа-ресурсы и вы можете привлечь значительное количество пользователей, мы предложим вам эксклюзивное предложение с вознаграждениями выше, чем указаны здесь.Пожалуйста, свяжитесь с %s."],
        "UP_30": ["報名截止", "报名截止", "Reg. ends in", "Reg. acaba"],
        "CHAT_NODATA": ["今天這裡太安靜了!", "今天这里太安静了！", "It's too quiet in here today!", "Здесь сегодня слишком тихо!"],
        "MTT_SUREREG": ["確定報名嗎？", "确定报名吗?", "Are you sure you want to register?", "Вы уверены, что хотите зарегистрироваться?"],
        "MTT_THAJOIN": ["謝謝參與", "谢谢参与", "THANKS FOR PLAYING", ""],
        "LOBBY_MINBUY": ["最小買入", "最小买入", "Min Buy-in", ""],
        "LOBBY_PLAYING": ["在線", "在线", "Playing", "Игроки"],
        "MTT_STARTSIN": ["開賽計時", "开赛计时", "Starts in", "Начало через"],
        "MTT_REGEND": ["報名截止", "报名截止", "Reg Ends in", "До конца регистрации"],
        "ROOM_TOUP": ["補充籌碼", "补充筹码", "Top-up", "Пополнить"],
        "ROOM_BALANCE": ["餘額", "余额", "Balance", "Баланс"],
        "ROOM_TOUPTIP": ["您需要補充更多籌碼以便繼續遊戲。", "您需要补充更多筹码以便继续游戏。", "You need to add more chips to the table in order to continue.", "Вамнужнодобавитьфишкидляпродолжения."],
        "ROOM_LEAVESEAT": ["離座", "离座", "Leave seat", "Покинутьместо"],
        "ROOM_LEAVETIP": ["確定離開座位嗎？", "确定要离开座位吗？", "Are you sure you want to leave your seat?", "Выуверены,чтохотитепокинутьместо?"],
        "ROOM_FOLDTIP": ["您當前可過牌，確定要棄牌嗎？", "您当前可过牌，确定要弃牌吗？", "You have an option to check.Are you sure you want to fold?", "Можночекать.Выуверены,чтохотитесбросить?"],
        "ROOM_NORECORD": ["無手牌記錄", "无手牌记录", "No Hand History Available", "Историярукнедоступна"],
        "CHAT_ATTIPS": ["點擊@可選擇玩家發送消息", "点击@可选择玩家发送消息", "Press @ to tag a player in messsage", "Нажмите@,чтобыотметитьигрокавсообщении"],
        "CHAT_ME": ["我", "我", "You", "Вы"],
        "TOAST_MTTBUBBLE": ["泡沫時間", "泡沫时间", "Prize Bubble", "Призовойпузырь"],
        "TOAST_MTTHANDING": ["對戰進行中", "对战进行中", "Hand for Hand", "Раздача рук поочередно"],
        "TXT_TOTAL_POT": ["總獎池", "总奖池", "Total Pot", ""],
        "TXT_HAND_ID": ["牌局ID", "牌局ID", "Hand ID", ""],
        "TXT_INPUT_CLICK": ["點擊此處…", "点击此处...", "Type here...", ""],
        "MTT_BREAK": ["休息時刻", "休息时刻", "BREAK", "Перерыв"],
        "SIGN_PHONE": ["手機號", "手机号", "Phone number", "Номер телефона"],
        "SIGN_PHONETIP": ["請輸入您的手機號", "请输入您的手机号", "Please enter your phone number", "Пожалуйста, введите номер телефона"],
        "SIGN_PHONEERROR": ["請輸入正確的手機號", "请输入正确的手机号", "Please enter a valid phone number", "Пожалуйста, введите действительный номер телефона."],
        "SIGN_PASSWORDERROR": ["賬號或密碼錯誤", "账号或密码错误", "Incorrect account or password", "Неверный аккаунт или пароль"],
        "SIGN_PHONEUSED": ["手機號已被使用", "手机号已被使用", "Phone number is already in use", "Номер телефона уже используется"],
        "PROFILE_LINKPHONE": ["綁定手機", "绑定手机", "Link Your Phone", ""],
        "PROFILE_UNLINKPHONE": ["解綁手機", "解绑手机", "Unlink Your Phone", ""],
        "PHONE_LOGIN_TIP": ["您可以使用綁定的手機號和密碼登錄。", "您可以使用绑定的手机号和密码登录。", "You can use your linked phone and password to log in.", ""],
        "MOBLIE_LOGIN": ["手机号登录", "手机号登录", "Mobile login", ""],
        "TO_BIND_PHONE_TIP": ["您可以綁定您的手機號，以增強您帳戶的未來安全性和可恢復性。", "您可以绑定您的手机号，以增强您帐户的未来安全性和可恢复性。", "You can link your phone to enhance the security and recoverability of your account.", ""],
        "REBATE_RULE": ["返利規則", "返利规则", "Rebate Rules", ""],
        "REBATE_RULE_DESC": ["沒有自動綁定上線代理，需要在這裡手動綁定。\n用戶邀請人數：3-29（直屬返利30%、次直屬返利10%），30-299（直屬返利60%、次直屬返利10%），300+（直屬返利80%、次直屬返利0%）", "没有自动绑定上线代理，需要在这里手动绑定。\n用户邀请人数，3-29(直属返利30%、次直属返利10%)、30-299(直属返利60%、次直属返利10%)、300+(直属返利80%、次直属返利0%)", "No automatic binding to an upstream agent; it needs to be manually bound here.\nNumber of invited users: 3-29 (direct rebate 30%, indirect rebate 10%), 30-299 (direct rebate 60%, indirect rebate 10%), 300+ (direct rebate 80%, indirect rebate 0%).", ""],
        "SHARE_CLUB_GUIDE": ["拉好友、賺佣金。提現在管理員-返利，界面查看", "拉好友、赚佣金。提现在管理员-返利，界面查看", "Invite friends and earn commissions. Withdrawals can be viewed in the Admin - Rebate section.", ""],
        "APP_VERSION": ["{color:255_255_255}遊戲版本號: %s", "{color:255_255_255}游戏版本号: %s", "{color:255_255_255}App Version: %s", ""],
        "unknow09211": ["", "余额不足，是否需要立即补充？", "Your balance is insufficient. Would you like to deposit now?", ""],
        "SHARE_CLUB_PAY": ["充值、提現請點擊", "充值、提现请点击", "Please click here for recharge and withdrawal.", ""],
        "GUEST_PLAY": ["體驗場", "体验场", "Experience", ""]
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MultiLanguageText.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageManage.ts', './CocosDevKit.ts', './OnError.ts', './Logger.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, _decorator, CCString, Label, Node, Component, LanguageManager, OnError, Log, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Label = module.Label;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      LanguageManager = module.default;
    }, null, function (module) {
      OnError = module.OnError;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2;
      cclegacy._RF.push({}, "d288aqr0jlPb5SPhOX/V0ps", "MultiLanguageText", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MultiLanguageText = exports('MultiLanguageText', (_dec = ccclass('MultiLanguageText'), _dec2 = property(CCString), _dec3 = property(Label), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MultiLanguageText, _Component);
        function MultiLanguageText() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._textKey = '';
          _this._label = void 0;
          _this._textInput = void 0;
          _this.formatFunction = undefined;
          _this.formatParams = [];
          return _this;
        }
        var _proto = MultiLanguageText.prototype;
        _proto.onLoad = function onLoad() {
          if (!this.textInput && !this.label) {
            this.label = this.getComponent(Label);
          }
          LanguageManager.on(this.onLanguageChange, this);
          this.updateString();
        };
        _proto.onDestroy = function onDestroy() {
          LanguageManager.off(this);
        };
        _proto.onLanguageChange = function onLanguageChange() {
          this.updateString();
        };
        _proto.updateString = function updateString() {
          var str = undefined;
          if (this.formatFunction) {
            try {
              str = this.formatFunction();
            } catch (error) {
              Log.debug.error('MultiLanguageText updateString fail:', error);
              if (error instanceof Error) {
                var newerr = new Error("MultiLanguageText updateString fail: " + error.message);
                newerr.stack = error.stack;
                error = newerr;
              }
              OnError.cache(error);
            }
          }
          if (!str) {
            if (!this._textKey || this._textKey == '') {
              return;
            }
          }
          if (this.label) {
            if (str) {
              // @ts-ignore
              this.label._string = str;
            } else if (this.formatParams.length > 0) {
              var _str = Utils.formatStr.apply(Utils, [LanguageManager.get(this._textKey)].concat(this.formatParams));
              // @ts-ignore
              this.label._string = _str;
            } else {
              var _str2 = LanguageManager.get(this._textKey);
              // @ts-ignore
              this.label._string = _str2;
            }
            // @ts-ignore
            this.label.markForUpdateRenderData();
            this.label.node.emit(Node.EventType.SIZE_CHANGED, this.label.node);
          } else if (this.textInput) {
            // @ts-ignore
            this.textInput._promptText = this._textKey;
            this.textInput.updatePromptText();
            var displayStr = this.textInput._editBox.placeholderLabel.string;
            if (str) {
              this.textInput._editBox.placeholderLabel.string = str;
            } else if (this.formatParams.length > 0) {
              this.textInput._editBox.placeholderLabel.string = Utils.formatStr.apply(Utils, [LanguageManager.get(displayStr)].concat(this.formatParams));
            } else {
              this.textInput._editBox.placeholderLabel.string = LanguageManager.get(displayStr);
            }
          }
        };
        _proto.setFormatParams = function setFormatParams() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          this.formatParams = args;
          this.updateString();
        };
        _proto.setFormatFunction = function setFormatFunction(func) {
          this.formatFunction = func;
          this.updateString();
        };
        _createClass(MultiLanguageText, [{
          key: "textKey",
          get: function get() {
            return this._textKey;
          },
          set: function set(v) {
            if (v && v.length > 0 && v != this._textKey) {
              this._textKey = v;
              this.updateString();
            }
          }
        }, {
          key: "label",
          get: function get() {
            return this._label;
          },
          set: function set(v) {
            var _this2 = this;
            if (v && this._label == undefined) {
              this._label = v;
              Object.defineProperty(this._label, 'string', {
                enumerable: true,
                configurable: true,
                get: function get() {
                  // @ts-ignore
                  return _this2._label._string;
                },
                set: function set(newVal) {
                  if (newVal === null || newVal === undefined) {
                    newVal = '';
                  } else {
                    newVal = newVal.toString();
                  }
                  if (_this2.textKey === newVal) {
                    return;
                  }
                  _this2.textKey = newVal;
                }
              });
              this._label.string = this._label.string;
            }
          }
        }, {
          key: "textInput",
          get: function get() {
            return this._textInput;
          },
          set: function set(v) {
            var _this3 = this;
            if (v && this._textInput == undefined) {
              this._textInput = v;
              Object.defineProperty(this._textInput, 'promptText', {
                enumerable: true,
                configurable: true,
                get: function get() {
                  // @ts-ignore
                  return _this3._textInput._promptText;
                },
                set: function set(newVal) {
                  if (newVal === null || newVal === undefined) {
                    newVal = '';
                  } else {
                    newVal = newVal.toString();
                  }
                  if (_this3.textKey === newVal) {
                    return;
                  }
                  _this3.textKey = newVal;
                }
              });
              this._textInput.promptText = this._textInput.promptText;
            }
          }
        }]);
        return MultiLanguageText;
      }(Component), (_applyDecoratedDescriptor(_class2.prototype, "textKey", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "textKey"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "label"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "textInput", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "textInput"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NativeDeviceBridge.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DeviceBridgeBase.ts', './CocosDevKit.ts', './TelegramDeviceBridge.ts', './OnError.ts', './NoSleep.min.mjs_cjs=&original=.js', './LocalStorageTool.ts', './Utils.ts', './Logger.ts', './HotUpdate.ts', './NoSleep.min.js'], function (exports) {
  var _inheritsLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, sys, native, settings, game, DeviceBridgeBase, TelegramDeviceBridge, OnError, LocalStorageTool, Utils, Log, HotUpdateConfig, _cjsExports;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      native = module.native;
      settings = module.settings;
      game = module.game;
    }, function (module) {
      DeviceBridgeBase = module.DeviceBridgeBase;
    }, null, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      OnError = module.OnError;
    }, null, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      HotUpdateConfig = module.HotUpdateConfig;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b5a28KPUIpKNK7cFul3tB9x", "NativeDeviceBridge", undefined);
      var NativeDeviceBridge = exports('NativeDeviceBridge', /*#__PURE__*/function (_DeviceBridgeBase) {
        _inheritsLoose(NativeDeviceBridge, _DeviceBridgeBase);
        function NativeDeviceBridge() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _DeviceBridgeBase.call.apply(_DeviceBridgeBase, [this].concat(args)) || this;
          _this.sdkPath = 'com.cocos.game.sdk.NativeDeviceBridge';
          _this._countryCode = void 0;
          _this._appInfo = void 0;
          _this._launchParam = void 0;
          return _this;
        }
        var _proto = NativeDeviceBridge.prototype;
        _proto.initDeviceInfo = /*#__PURE__*/function () {
          var _initDeviceInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.getCountryCode();
                case 2:
                  this._countryCode = _context.sent;
                  _context.next = 5;
                  return this.getAppInfo();
                case 5:
                  this._appInfo = _context.sent;
                case 6:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function initDeviceInfo() {
            return _initDeviceInfo.apply(this, arguments);
          }
          return initDeviceInfo;
        }();
        NativeDeviceBridge.keepScreenWake = function keepScreenWake(keep) {
          // 保持屏幕常亮
          if ('wakeLock' in navigator) {
            var requestWakeLock = /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.prev = 0;
                      _context2.next = 3;
                      return navigator.wakeLock.request('screen');
                    case 3:
                      _context2.sent;
                      console.log('屏幕常亮已开启wakeLock');
                      _context2.next = 10;
                      break;
                    case 7:
                      _context2.prev = 7;
                      _context2.t0 = _context2["catch"](0);
                      console.error('屏幕常亮错误：', _context2.t0);
                    case 10:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2, null, [[0, 7]]);
              }));
              return function requestWakeLock() {
                return _ref.apply(this, arguments);
              };
            }();
            requestWakeLock();
          } else {
            game.canvas.addEventListener('touchstart', function enableNoSleepCB() {
              game.canvas.removeEventListener('touchstart', enableNoSleepCB, false);
              var noSleep = new _cjsExports();
              noSleep.enable();
              console.log('neween', '屏幕常亮已开启nosleep');
            }, false);
          }
        };
        _proto.test = function test(params) {
          if (sys.isNative) {
            return this.callNativeWithPromise('test', params);
          } else {
            return Promise.resolve('Hello, this browser');
          }
        };
        _proto.getLaunchParam = function getLaunchParam() {
          if (sys.isNative) {
            return {};
          } else {
            var params = {};
            var urlObj = new URL(globalThis.location.href);
            var str = urlObj.searchParams.get('roomid');
            if (str && str.length > 0) {
              var roomid = parseInt(urlObj.searchParams.get('roomid'));
              if (!isNaN(roomid) && roomid != undefined && roomid != null && roomid > 0) {
                params.roomid = roomid;
              }
            }
            str = urlObj.searchParams.get('mttid');
            if (str && str.length > 0) {
              var mttid = parseInt(urlObj.searchParams.get('mttid'));
              if (!isNaN(mttid) && mttid != undefined && mttid != null && mttid > 0) {
                params.mttid = mttid;
              }
            }
            return params;
          }
        };
        _proto.getCountryCode = function getCountryCode() {
          if (sys.isNative) {
            return this.callNativeWithPromise('getCountryCode');
          } else {
            return Promise.resolve(globalThis.navigator.language);
          }
        };
        _proto.getDeviceId = function getDeviceId() {
          if (sys.isNative) {
            return this.callNativeWithPromise('getDeviceId');
          } else {
            var deviceID = LocalStorageTool.getStringWithAES('DEVICE_ID');
            if (!deviceID) {
              deviceID = Utils.createUUID().replace('-', '');
            }
            LocalStorageTool.setStringWithAES('DEVICE_ID', deviceID);
            return Promise.resolve(deviceID);
          }
        };
        _proto.getSystemVersion = function getSystemVersion() {
          if (sys.isNative) {
            return this.callNativeWithPromise('getSystemVersion');
          } else {
            return Promise.resolve(sys.osVersion);
          }
        };
        _proto.getAndroidReleaseVersion = function getAndroidReleaseVersion() {
          if (sys.isNative) {
            return this.callNativeWithPromise('getAndroidReleaseVersion');
          } else {
            return Promise.resolve('');
          }
        };
        _proto.isEmulator = function isEmulator() {
          if (sys.isNative) {
            return this.callNativeWithPromise('isEmulator').then(function (str) {
              return str == 'true';
            });
          } else {
            return Promise.resolve(false);
          }
        }

        /**
         *  拷贝文本到剪切板
         */;
        _proto.copyTextToClipboard = function copyTextToClipboard(text) {
          var _this2 = this;
          if (sys.isNative) {
            return Promise.resolve(native.copyTextToClipboard(text));
          } else {
            if (globalThis.navigator.clipboard) {
              try {
                document.body.focus({
                  preventScroll: false
                });
                return navigator.clipboard.writeText(text).then(function () {
                  return Promise.resolve(true);
                }, function () {
                  return _this2.web_copyTextToClipboard(text);
                });
              } catch (error) {
                return this.web_copyTextToClipboard(text);
              }
            } else {
              return this.web_copyTextToClipboard(text);
            }
          }
        };
        _proto.web_copyTextToClipboard = function web_copyTextToClipboard(text) {
          if (sys.isNative) return Promise.resolve(false);
          try {
            var input = text;
            var el = document.createElement('textarea');
            el.value = input;
            el.setAttribute('readonly', '');
            el.style.contain = 'strict';
            el.style.position = 'absolute';
            el.style.left = '-9999px';
            el.style.fontSize = '12pt'; // Prevent zooming on iOS

            var selection = getSelection();
            var originalRange = undefined;
            if (selection.rangeCount > 0) {
              originalRange = selection.getRangeAt(0);
            }
            document.body.appendChild(el);
            el.select();
            el.selectionStart = 0;
            el.selectionEnd = input.length;
            var success = false;
            document.body.focus({
              preventScroll: false
            });
            el.focus({
              preventScroll: false
            });
            success = document.execCommand('copy');
            document.body.removeChild(el);
            if (originalRange) {
              selection.removeAllRanges();
              selection.addRange(originalRange);
            }
            return Promise.resolve(success);
          } catch (err) {
            Log.debug.error('NativeDeviceBridge web_copyTextToClipboard fail:', err);
            if (err instanceof Error) {
              var newerr = new Error("NativeDeviceBridge web_copyTextToClipboard fail: " + err.message);
              newerr.stack = err.stack;
              err = newerr;
            }
            OnError.cache(err);
            return Promise.resolve(false);
          }
        };
        _proto.getEmulatorCheckReport = function getEmulatorCheckReport() {
          if (sys.isNative) {
            return this.callNativeWithPromise('getEmulatorCheckReport');
          } else {
            return Promise.resolve(false);
          }
        };
        _proto.getVersionNum = function getVersionNum() {
          if (sys.isNative) {
            var hotupdateConfig = new HotUpdateConfig();
            return hotupdateConfig.getLocalVersion();
          } else if (TelegramDeviceBridge.Instance.isTMA) {
            return settings.querySettings('CustomSettings', 'version') || '0.0.0';
          }
          return '1.0.1';
        };
        _proto.getAppInfo = /*#__PURE__*/function () {
          var _getAppInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.t0 = sys.platform;
                  _context3.t1 = this.getVersionNum();
                  _context3.t2 = this.getVersionNum();
                  _context3.next = 5;
                  return this.getSystemVersion();
                case 5:
                  _context3.t3 = _context3.sent;
                  _context3.t4 = sys.os;
                  _context3.next = 9;
                  return this.isEmulator();
                case 9:
                  _context3.t5 = _context3.sent;
                  _context3.next = 12;
                  return this.getDeviceId();
                case 12:
                  _context3.t6 = _context3.sent;
                  return _context3.abrupt("return", {
                    platform: _context3.t0,
                    appbuild: _context3.t1,
                    appversion: _context3.t2,
                    model: _context3.t3,
                    system: _context3.t4,
                    launchInfo: '',
                    isSimulator: _context3.t5,
                    deviceId: _context3.t6
                  });
                case 14:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function getAppInfo() {
            return _getAppInfo.apply(this, arguments);
          }
          return getAppInfo;
        }();
        _proto.shortVibrate = function shortVibrate(level) {
          if (TelegramDeviceBridge.Instance.isTMA) {
            TelegramDeviceBridge.Instance.shortVibrate(level);
          }
        };
        _proto.warnVibrate = function warnVibrate() {
          if (TelegramDeviceBridge.Instance.isTMA) {
            TelegramDeviceBridge.Instance.warnVibrate();
          }
        };
        _proto.openURL = function openURL(url) {
          if (TelegramDeviceBridge.Instance.isTMA) {
            TelegramDeviceBridge.Instance.openLink(url);
          } else {
            sys.openURL(url);
          }
        };
        _createClass(NativeDeviceBridge, [{
          key: "countryCode",
          get: function get() {
            return this._countryCode;
          }
        }, {
          key: "appInfo",
          get: function get() {
            return this._appInfo;
          }
        }, {
          key: "launchParam",
          get: function get() {
            return this._launchParam;
          }
        }], [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new NativeDeviceBridge();
            }
            return this._instance;
          }
        }]);
        return NativeDeviceBridge;
      }(DeviceBridgeBase));
      NativeDeviceBridge._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NativeLaunchBridge.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DeviceBridgeBase.ts', './CryptoTool.ts'], function (exports) {
  var _inheritsLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, sys, log, DeviceBridgeBase, CryptoTool;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
    }, function (module) {
      DeviceBridgeBase = module.DeviceBridgeBase;
    }, function (module) {
      CryptoTool = module.CryptoTool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e50e3mrvGxMn6Xsje9dGrFB", "NativeLaunchBridge", undefined);
      var NativeLaunchBridge = exports('NativeLaunchBridge', /*#__PURE__*/function (_DeviceBridgeBase) {
        _inheritsLoose(NativeLaunchBridge, _DeviceBridgeBase);
        function NativeLaunchBridge() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _DeviceBridgeBase.call.apply(_DeviceBridgeBase, [this].concat(args)) || this;
          _this.sdkPath = 'com.cocos.game.sdk.NativeLaunchBridge';
          _this.channel = void 0;
          _this.channel_club_id = void 0;
          return _this;
        }
        var _proto = NativeLaunchBridge.prototype;
        _proto.test = function test(params) {
          if (sys.isNative) {
            return this.callNativeWithPromise('test', params);
          } else {
            return Promise.resolve('Hello, this browser');
          }
        };
        _proto.init = /*#__PURE__*/function () {
          var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var openParam, param, result;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.getOpenParam();
                case 2:
                  openParam = _context.sent;
                  if (openParam.startsWith('{') && openParam.endsWith('}')) {
                    param = JSON.parse(openParam);
                  } else {
                    result = openParam.split(',');
                    if (result && result.length > 0) {
                      openParam = result[0];
                    }
                    if (openParam.includes('%%')) {
                      openParam = decodeURIComponent(openParam);
                      openParam = CryptoTool.XXTEA.decryptFromBase64(openParam, '');
                    }
                    param = JSON.parse(openParam);
                  }
                  log('openparam====', JSON.stringify(param));
                  this.channel = param.channel;
                  this.channel_club_id = param.clubId;
                case 7:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function init() {
            return _init.apply(this, arguments);
          }
          return init;
        }();
        _proto.getOpenParam = function getOpenParam() {
          if (sys.isNative) {
            // return this.callNativeWithPromise('getOpenParam');
            return Promise.resolve(JSON.stringify({
              channel: '',
              clubId: ''
            }));
          } else {
            return Promise.resolve(JSON.stringify({
              channel: '',
              clubId: ''
            }));
          }
        };
        _createClass(NativeLaunchBridge, [{
          key: "Channel",
          get: function get() {
            return this.channel;
          }
        }, {
          key: "ChannelClubID",
          get: function get() {
            return this.channel_club_id;
          }
        }], [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new NativeLaunchBridge();
            }
            return this._instance;
          }
        }]);
        return NativeLaunchBridge;
      }(DeviceBridgeBase));
      NativeLaunchBridge._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Logger.ts', './NetTypes.ts'], function (exports) {
  var _createClass, cclegacy, Log, NetTypes;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      NetTypes = module.NetTypes;
    }],
    execute: function () {
      cclegacy._RF.push({}, "95560jNeU5MTrvnHWoTn1ED", "NetData", undefined);
      var LogTag = '[NetData]';
      var NetData = exports('NetData', /*#__PURE__*/function () {
        var _proto = NetData.prototype;
        _proto.bufferToData = function bufferToData(buffer) {
          return;
        };
        _proto.dataToBuffer = function dataToBuffer(head, data) {
          return;
        }

        // public
        ;

        function NetData() {
          this.data = void 0;
          this._state = void 0;
          this._buffer = void 0;
          this._databuffer = void 0;
          this._head = void 0;
          this._state = NetTypes.ENetDataState.empty;
        }

        /**
         * 使用服务端下行 buffer 初始化 NetData
         * @param buffer 服务端下行的原始数据
         */
        _proto.initWithBuffer = function initWithBuffer(buffer) {
          switch (this._state) {
            case NetTypes.ENetDataState.empty:
              {
                this.bufferToData(buffer);
              }
              break;
            case NetTypes.ENetDataState.valid:
              {
                Log.net.error(LogTag, 'initWithBuffer', ' can not init NetData, the state is normal');
              }
              break;
            case NetTypes.ENetDataState.broken:
              {
                Log.net.error(LogTag, 'initWithBuffer', ' can not init NetData, the state is broken');
              }
              break;
          }
        };
        _proto.initWithData = function initWithData(head, databuffer) {
          switch (this._state) {
            case NetTypes.ENetDataState.empty:
              {
                this.dataToBuffer(head, databuffer);
              }
              break;
            case NetTypes.ENetDataState.valid:
              {
                Log.net.error(LogTag, 'initWithData', ' can not init NetData, the state is normal');
              }
              break;
            case NetTypes.ENetDataState.broken:
              {
                Log.net.error(LogTag, 'initWithData', ' can not init NetData, the state is broken');
              }
              break;
          }
        };
        _proto.interpret = function interpret() {
          return false;
        };
        _proto.getData = function getData(a) {
          if (this.data) {
            return this.data;
          } else {
            return null;
          }
        };
        _createClass(NetData, [{
          key: "state",
          get: function get() {
            return this._state;
          }
        }, {
          key: "buffer",
          get: function get() {
            return this._buffer;
          }
        }, {
          key: "databuffer",
          get: function get() {
            return this._databuffer;
          }
        }, {
          key: "head",
          get: function get() {
            return this._head;
          }
        }]);
        return NetData;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetData87.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './Logger.ts', './NetData.ts', './NetTypes.ts', './OnError.ts', './gameproto.js'], function (exports) {
  var _inheritsLoose, cclegacy, Log, NetData, NetTypes, OnError, _cjsExports;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      Log = module.Log;
    }, function (module) {
      NetData = module.NetData;
    }, function (module) {
      NetTypes = module.NetTypes;
    }, function (module) {
      OnError = module.OnError;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1fab2YYhBdGHIxKa+L4oqP2", "NetData87", undefined);
      var LogTag = '[NetDataCustom]';

      /**
       * 实现加解密，包头解析
       */
      var NetData87 = exports('NetData87', /*#__PURE__*/function (_NetData) {
        _inheritsLoose(NetData87, _NetData);
        function NetData87() {
          return _NetData.apply(this, arguments) || this;
        }
        var _proto = NetData87.prototype;
        _proto.bufferToData = function bufferToData(buffer) {
          Log.net.log(LogTag, 'bufferToData', 'buffer.byteLength', buffer.byteLength);
          this._buffer = buffer;
          // 包头数据
          var head = NetTypes.BufferToHead(buffer);
          Log.net.log(LogTag, 'bufferToData', 'head', head);
          var databuffer = buffer.subarray(NetTypes.DownlinkHeadSize, buffer.byteLength);
          this._head = head;
          this._databuffer = databuffer;
          this._state = NetTypes.ENetDataState.valid;
        };
        _proto.dataToBuffer = function dataToBuffer(head, databuffer) {
          if (databuffer) {
            head.wPacketSize = NetTypes.UplinkHeadSize + databuffer.byteLength - 2;
            var headBuffer = NetTypes.HeadToBuffer(head);
            Log.net.log(LogTag, 'dataToBuffer', 'headBuffer', headBuffer);
            this._head = head;
            this._databuffer = databuffer;
            this._buffer = NetTypes.ConcatenateBuffer(headBuffer, databuffer);
            this._state = NetTypes.ENetDataState.valid;
          } else {
            head.wPacketSize = NetTypes.UplinkHeadSize - 2;
            var _headBuffer = NetTypes.HeadToBuffer(head);
            Log.net.log(LogTag, 'dataToBuffer', 'headBuffer', _headBuffer);
            this._head = head;
            this._databuffer = databuffer;
            this._buffer = _headBuffer;
            this._state = NetTypes.ENetDataState.valid;
          }
        };
        _proto.interpret = function interpret() {
          if (NetData87.protocol_map.hasOwnProperty(this._head.iProtoId)) {
            if (this._databuffer) {
              var protoclass = NetData87.protocol_map[this._head.iProtoId];
              try {
                this.data = protoclass.decode(this._databuffer);
              } catch (err) {
                var errmsg = LogTag + " interpret decode fail,\nHead: " + JSON.stringify(this._head) + ",\nDataLength: " + this._buffer.byteLength + ",\nErrMessage: " + err.message;
                Log.net.error(LogTag, errmsg);
                if (err instanceof Error) {
                  var newerr = new Error(errmsg);
                  newerr.stack = err.stack;
                  err = newerr;
                }
                OnError.cache(err);
                return false;
              }
            } else {
              Log.net.warn(LogTag, 'interpert', 'databuffer is null');
            }
            return true;
          } else {
            Log.net.error(LogTag, 'interpret', 'unknow protoid:', this.head.iProtoId);
            OnError.cache(new Error(LogTag + " interpret decode fail: unknow protoid: " + this.head.iProtoId));
            return false;
          }
        };
        _proto.isPingMsg = function isPingMsg() {
          return this._head.iProtoId === NetData87.pingMsg.ProtocolID;
        };
        _proto.isPongMsg = function isPongMsg() {
          return this._head.iProtoId === NetData87.pongMsg.ProtocolID;
        };
        _proto.emitImmediately = function emitImmediately() {
          return this._head.iProtoId === _cjsExports.login.MsgkickCast.ProtocolID;
        }

        /**
         * 获取返回码
         * @description 返回数据中的 result 或者 ec 字段，如果都没有就是 undefined
         * @returns
         */;
        _proto.getRetCode = function getRetCode() {
          var data = this.getData(undefined);
          var ret = data.result != undefined && data.result != null ? data.result : data.ec;
          return ret;
        }

        /**
         * 基于返回码判断是否为成功
         * @returns
         */;
        _proto.isRetSuccess = function isRetSuccess() {
          var ret = this.getRetCode();
          return ret == undefined || ret == null || ret == 0;
        };
        return NetData87;
      }(NetData));
      NetData87.pingMsg = _cjsExports.ping.MsgPing;
      NetData87.pongMsg = _cjsExports.ping.MsgPingRsp;
      NetData87.protocol_map = _cjsExports['gameproto_map'];
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetImage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './CocosDevKit.ts', './UI_NetImage.ts', './GameConfig.ts', './CryptoTool.ts', './OnError.ts', './GameDecorators.ts', './Utils.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, sys, path, native, assetManager, SpriteFrame, Texture2D, ImageAsset, UIPackage, UI_NetImage, GameConfig, CryptoTool, OnError, CustomFguiClass, Utils, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      path = module.path;
      native = module.native;
      assetManager = module.assetManager;
      SpriteFrame = module.SpriteFrame;
      Texture2D = module.Texture2D;
      ImageAsset = module.ImageAsset;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, null, function (module) {
      UI_NetImage = module.default;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      CryptoTool = module.CryptoTool;
    }, function (module) {
      OnError = module.OnError;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "41e0fwkWfxJuothMExyn1rK", "NetImage", undefined);
      var NetImageCache = [];
      function ReleaseNetImageResources() {
        if (NetImageCache.length >= 80) {
          for (var i = NetImageCache.length - 1; i > 40; i--) {
            var url = NetImageCache[i];
            var asset = assetManager.assets.get(url);
            if (asset) {
              assetManager.releaseAsset(asset);
            }
            NetImageCache.splice(i, 1);
          }
        }
      }
      function CacheNetImageResources(urlOrPath) {
        var idx = NetImageCache.indexOf(urlOrPath);
        if (idx == -1) {
          NetImageCache.unshift(urlOrPath);
        } else {
          NetImageCache.splice(idx, 1);
          NetImageCache.unshift(urlOrPath);
        }
      }

      /**
       * 网络图片组件，使用方法和头像一样
       */
      var NetImage = exports('NetImage', CustomFguiClass(_class = /*#__PURE__*/function (_UI_NetImage) {
        _inheritsLoose(NetImage, _UI_NetImage);
        function NetImage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_NetImage.call.apply(_UI_NetImage, [this].concat(args)) || this;
          _this._default_resources = void 0;
          _this._netimage_url = void 0;
          return _this;
        }
        var _proto = NetImage.prototype;
        _proto.setContent = function setContent(url) {
          if (url.startsWith('/')) {
            url = "" + GameConfig.curConfig.netImgPreAddr + url;
          }
          if (sys.isNative) {
            this.setContentNative(url);
          } else {
            this.setContentWeb(url);
          }
        };
        _proto.setContentNative = function setContentNative(url) {
          var _this2 = this;
          var md5 = CryptoTool.hex_md5(url);
          var extname = path.extname(url);
          var DirRemoteImageCache = path.join(native.fileUtils.getWritablePath(), 'RemoteImageCache');
          if (!native.fileUtils.isDirectoryExist(DirRemoteImageCache)) {
            native.fileUtils.createDirectory(DirRemoteImageCache);
          }
          var fullCacheFilePath = path.join(DirRemoteImageCache, "" + md5 + extname);
          if (native.fileUtils.isFileExist(fullCacheFilePath)) {
            CacheNetImageResources(fullCacheFilePath);
            this._netimage_url = fullCacheFilePath;
            this.m_content.url = fullCacheFilePath;
          } else {
            this._netimage_url = url;
            assetManager.downloader.download(Utils.curLocalTimestamp.toString(), url, path.extname(url), {}, function (err, filePath) {
              if (err) {
                Log.debug.error('网络图片下载失败:', 'url:', url, err);
                OnError.cache(err);
                if (!_this2.node || !_this2.node.isValid) return;
                _this2.setDefaultContent();
              } else if (native.fileUtils.isFileExist(filePath)) {
                if (native.fileUtils.renameFile(filePath, fullCacheFilePath)) {
                  if (_this2._netimage_url == url) {
                    if (!_this2.node || !_this2.node.isValid) return;
                    CacheNetImageResources(fullCacheFilePath);
                    _this2.m_content.url = fullCacheFilePath;
                  }
                } else {
                  OnError.cache(new Error('NetImage 网络图片下载失败 renameFile fail'));
                }
              } else {
                OnError.cache(new Error("NetImage \u7F51\u7EDC\u56FE\u7247\u4E0B\u8F7D\u5931\u8D25 \u6587\u4EF6\u4E0D\u5B58\u5728\uFF1A" + filePath));
              }
            });
          }
        };
        _proto.setContentWeb = function setContentWeb(url) {
          var _this3 = this;
          if (this._netimage_url != url) {
            this._netimage_url = url;
            assetManager.loadRemote(url, {}, function (err, asset) {
              if (!_this3.node || !_this3.node.isValid) return;
              if (err || !asset) {
                Log.debug.error('网络图片加载失败:', 'url:', url, err);
                OnError.cache(err);
                _this3.setDefaultContent();
              } else {
                if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('/')) {
                  CacheNetImageResources(url);
                }
                if (_this3._netimage_url == url) {
                  if (asset instanceof SpriteFrame) _this3.m_content.texture = asset;else if (asset instanceof Texture2D) {
                    var sf = new SpriteFrame();
                    sf.texture = asset;
                    _this3.m_content.texture = sf;
                  } else if (asset instanceof ImageAsset) {
                    var texture = new Texture2D();
                    texture.image = asset;
                    var _sf = new SpriteFrame();
                    _sf.texture = texture;
                    _this3.m_content.texture = _sf;
                  } else {
                    _this3.setDefaultContent();
                  }
                }
              }
            });
          }
        };
        _proto.setDefaultResources = function setDefaultResources(defaultResources) {
          this._default_resources = defaultResources;
        };
        _proto.setDefaultContent = function setDefaultContent() {
          if (this._default_resources && this._default_resources.length > 0) {
            var defaultItem = UIPackage.getItemByURL(this._default_resources);
            if (defaultItem && defaultItem.asset && defaultItem.asset instanceof SpriteFrame) {
              this.m_content.texture = defaultItem.asset;
              return;
            }
          }
          this.m_content.texture = undefined;
        };
        _proto.onDestroy = function onDestroy() {
          _UI_NetImage.prototype.onDestroy.call(this);
          ReleaseNetImageResources();
        };
        return NetImage;
      }(UI_NetImage)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NetTypes.ts', './NetData87.ts', './Logger.ts', './Utils.ts', './gameproto.mjs_cjs=&original=.js', './OnError.ts', './gameproto.js'], function (exports) {
  var _createClass, cclegacy, director, game, sys, EventTarget, Game, NetTypes, NetData87, Log, Utils, OnError, _cjsExports;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      game = module.game;
      sys = module.sys;
      EventTarget = module.EventTarget;
      Game = module.Game;
    }, function (module) {
      NetTypes = module.NetTypes;
    }, function (module) {
      NetData87 = module.NetData87;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }, null, function (module) {
      OnError = module.OnError;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "46fc0Oy+8lInbJuLBBVeLvX", "NetNode", undefined);
      var LogTag = '[NetNode]';
      var EClockTag = /*#__PURE__*/function (EClockTag) {
        EClockTag["MSG_TIMEOUT"] = "MSG_TIMEOUT";
        EClockTag["PINGPONG_TIMEOUT"] = "PINGPONG_TIMEOUT";
        EClockTag["CONNECT_TIMEOUT"] = "CONNECT_TIMEOUT";
        return EClockTag;
      }(EClockTag || {});
      var lastHideTimestamp = null;
      var TimeoutConfig = {
        MsgTimeout: 8000,
        pingpongTimeout: 1000,
        weaklyTimeLimit: 2000,
        connectTimeOut: 10000,
        pingpongMaxCount: 10,
        gameHideTimeOut: 5000 // 后台停留超过这个时间就重连
        // maxReconnectCount: 3,
      };

      var NetNode = exports('NetNode', /*#__PURE__*/function () {
        var _proto = NetNode.prototype;
        _proto.startConnect = function startConnect() {
          Log.net.log(LogTag, this.cachekey, 'createConnect', this.parameters);
          if (!this.socketObject) {
            try {
              this._isPause = false;
              this._sendArray.length = 0;
              this._receiveArray.length = 0;
              this.pDataByte = new Uint8Array([]);
              this.socketObject = this.createSocketObject();
              this.socketObject.onopen = this.onOpen.bind(this);
              this.socketObject.onclose = this.onClose.bind(this);
              this.socketObject.onmessage = this.onMessage.bind(this);
              this.socketObject.onerror = this.onError.bind(this);
              this.startClock(EClockTag.CONNECT_TIMEOUT);
            } catch (error) {
              OnError.cache(error);
              this.onClose(error);
            }
          } else {
            Log.net.error(LogTag, '请先清理旧的连接');
          }
        };
        _proto.clearConnect = function clearConnect() {
          director.getScheduler().unscheduleAllForTarget(this);
          this._sendArray.length = 0;
          this._receiveArray.length = 0;
          if (this.socketObject) {
            this.socketObject.onmessage = undefined;
            this.socketObject.onopen = undefined;
            this.socketObject.onclose = undefined;
            if (!this.socketObject.CLOSED) {
              this.socketObject.close();
            }
          }
          this.socketObject = undefined;
        };
        _proto.clearClock = function clearClock(timerTag) {
          Log.net.log(LogTag, this.cachekey, 'clearClock', timerTag);
          var scheduler = director.getScheduler();
          switch (timerTag) {
            case EClockTag.MSG_TIMEOUT:
              {
                scheduler.unschedule(this.onMsgTimeout, this);
              }
              break;
            case EClockTag.PINGPONG_TIMEOUT:
              {
                scheduler.unschedule(this.onPingpongTimeout, this);
              }
              break;
            case EClockTag.CONNECT_TIMEOUT:
              {
                scheduler.unschedule(this.onConnectTimeout, this);
              }
              break;
          }
        };
        _proto.startClock = function startClock(timerTag) {
          Log.net.log(LogTag, this.cachekey, 'startClock', timerTag);
          var scheduler = director.getScheduler();
          switch (timerTag) {
            case EClockTag.MSG_TIMEOUT:
              {
                if (scheduler.isScheduled(this.onMsgTimeout, this)) {
                  scheduler.unschedule(this.onMsgTimeout, this);
                }
                scheduler.schedule(this.onMsgTimeout, this, TimeoutConfig.MsgTimeout / 1000, 1, 0, false);
              }
              break;
            case EClockTag.PINGPONG_TIMEOUT:
              {
                if (scheduler.isScheduled(this.onPingpongTimeout, this)) {
                  scheduler.unschedule(this.onPingpongTimeout, this);
                }
                scheduler.schedule(this.onPingpongTimeout, this, TimeoutConfig.pingpongTimeout / 1000, TimeoutConfig.pingpongMaxCount, 0, false);
              }
              break;
            case EClockTag.CONNECT_TIMEOUT:
              {
                if (scheduler.isScheduled(this.onConnectTimeout, this)) {
                  scheduler.unschedule(this.onConnectTimeout, this);
                }
                scheduler.schedule(this.onConnectTimeout, this, TimeoutConfig.connectTimeOut / 1000, 1, 0, false);
              }
              break;
          }
        };
        _proto.onMsgTimeout = function onMsgTimeout() {
          Log.net.log(LogTag, this.cachekey, '*****', 'onMsgTimeout');
          this.ping();
        };
        _proto.onPingpongTimeout = function onPingpongTimeout() {
          this._pingpongCount++;
          Log.net.log(LogTag, this.cachekey, 'onPingpongTimeout', this._pingpongCount);
          this.state = NetTypes.ENetNodeState.weakly;
          if (this._pingpongCount >= TimeoutConfig.pingpongMaxCount) {
            this.clearClock(EClockTag.PINGPONG_TIMEOUT);
            this.state = NetTypes.ENetNodeState.closed;
            // this._reconnectCount++;
            // if (this._reconnectCount > 3) {
            // } else {
            //     this.reconnect();
            // }
          } else {
            this.state = NetTypes.ENetNodeState.weakly;
          }
        };
        _proto.onConnectTimeout = function onConnectTimeout() {
          Log.net.log(LogTag, this.cachekey, 'onConnectTimeout');
          this.clearConnect();
          this.state = NetTypes.ENetNodeState.closed;
        };
        _proto.connect = function connect() {
          if (!this._state || this._state == NetTypes.ENetNodeState.closed) {
            // this._reconnectCount = 0;
            this.startConnect();
            this.state = NetTypes.ENetNodeState.connecting;
          } else {
            Log.net.warn(LogTag, this.cachekey, 'connect', '当前连接状态正常');
          }
        }

        // /**
        //  * 内部机制触发的重连
        //  */
        // private reconnect() {
        //     Log.net.log(LogTag, this.cachekey, 'reconnect', this._reconnectCount);
        //     this.clearConnect();
        //     this.startConnect();
        //     this.state = NetTypes.ENetNodeState.connecting;
        // }
        ;

        _proto.ping = function ping() {
          if (game.isPaused()) {
            return;
          }
          this.lastpingTime = Utils.curLocalTimestamp;
          Log.net.log(LogTag, this.cachekey, 'ping', this.lastpingTime);
          this.send(NetData87.pingMsg.ProtocolID);
          this._pingpongCount = 0;
          this.startClock(EClockTag.PINGPONG_TIMEOUT);
        }

        // private _serverTimeDiff: number;
        ;

        _proto.pong = function pong(msg) {
          this.clearClock(EClockTag.PINGPONG_TIMEOUT);
          // this._reconnectCount = 0;
          var curtime = Utils.curLocalTimestamp;
          Log.net.log(LogTag, this.cachekey, 'pong', 'LocalTimestamp:', curtime, 'ServerTimestamp:', msg.timestamp);
          var diff = curtime - this.lastpingTime;
          if (diff > TimeoutConfig.weaklyTimeLimit) {
            this.state = NetTypes.ENetNodeState.weakly;
            this.ping();
          } else {
            Utils.setServerTimestamp(msg.timestamp);
            this.state = NetTypes.ENetNodeState.connected;
            this.startClock(EClockTag.MSG_TIMEOUT);
          }
        };
        _proto.onGameHide = function onGameHide() {
          lastHideTimestamp = sys.now();
          Log.net.log(LogTag, this.cachekey, 'onGameHide', lastHideTimestamp);
        };
        _proto.onGameShow = function onGameShow() {
          Log.net.log(LogTag, this.cachekey, 'onGameShow');
          game.resume();
          if (lastHideTimestamp == null) return;
          if (!this.socketObject) return;
          var now = sys.now();
          Log.net.log(LogTag, this.cachekey, 'onGameShow', 'last', lastHideTimestamp);
          Log.net.log(LogTag, this.cachekey, 'onGameShow', 'now', now);
          var diff = now - lastHideTimestamp;
          Log.net.log(LogTag, this.cachekey, 'onGameShow', 'diff', diff);
          lastHideTimestamp = null;
          var timeout = diff > TimeoutConfig.gameHideTimeOut;
          if (timeout) {
            this.forceClose();
            this.state = NetTypes.ENetNodeState.closed;
          } else {
            if (this.socketObject.readyState == WebSocket.CLOSED) {
              this.clearConnect();
              this.state = NetTypes.ENetNodeState.closed;
            }
          }
        }

        // /**
        //  * 主动重连，仅提供给外部调用
        //  */
        // public activeReconnection(parameters?: NetTypes.IConnectParam[]) {
        //     if (game.isPaused()) { return; }
        //     if (this.state != NetTypes.ENetNodeState.closed) {
        //         Logger.warn(LogTag, this.cachekey, 'activeReconnection', '当前连接正常，不必重连');
        //     }
        //     Logger.net(LogTag, this.cachekey, 'activeReconnection');
        //     this.clearConnect();
        //     this.startConnect();
        //     this.state = NetTypes.ENetNodeState.connecting;
        // }

        /**
         * 强制切断socket连接
         */;
        _proto.forceClose = function forceClose() {
          this.clearConnect();
          this._state = undefined; // 直接设置 this._state，避免在 set 方法中处理状态变化
          this.pDataByte = undefined; // 数据缓冲区
          this._sendArray.length = 0;
          this._receiveArray.length = 0;
          this._state = undefined;
          this._pingpongCount = 0;
          // this._reconnectCount = 0;
          this.parameters = undefined;
          this.lastpingTime = undefined;
        };
        _proto.testClose = function testClose() {
          if (this.socketObject) {
            this.socketObject.close();
          }
        };
        _proto.__update_handler = function __update_handler() {
          if (this._sendArray) {
            // handler send
            // 粘包
            // let arr: Uint8Array[] = [];
            while (this._sendArray.length > 0) {
              var netData = this._sendArray.shift();
              // Logger.socket(LogTag, this.cachekey, '粘包', JSON.stringify(netData.head, undefined, 4));

              // if (!netData.isPingMsg()) {
              //     this.clearClock(EClockTag.MSG_TIMEOUT);
              //     Logger.socket(LogTag, this.cachekey, '*****', 'start MSG_TIMEOUT Clock', netData.head.iProtoId, netData.head.iSession);
              //     this.startClock(EClockTag.MSG_TIMEOUT);
              // }

              var buffer = netData.buffer;
              // if (arr.length == 0) arr.push(new Uint8Array(0));
              // do {
              //     let last = arr[arr.length - 1];
              //     let diff = this.packLengthLimit - last.byteLength;
              //     if (diff > 0) {
              //         arr[arr.length - 1] = NetTypes.ConcatenateBuffer(last, buffer.subarray(0, diff));
              //         buffer = buffer.subarray(diff, buffer.byteLength);
              //         // assert(arr[arr.length - 1].byteLength <= this.packLengthLimit);
              //     } else {
              //         arr.push(buffer.subarray(0, this.packLengthLimit));
              //         buffer = buffer.subarray(this.packLengthLimit, buffer.byteLength);
              //     }
              // } while (buffer.byteLength > 0);
              var gameproto_map = _cjsExports['gameproto_map'];
              var protoclass = gameproto_map[netData.head.iProtoId];
              if (protoclass) {
                Log.info.log(LogTag, this.cachekey, '>>>>', 'protoname:', protoclass.name, ', head:', JSON.stringify(netData.head), ', byteLength:', buffer.byteLength);
                this.socketObject.send(buffer);
              } else {
                Log.net.error(LogTag, this.cachekey, '>>>>', 'unknow protoid:', netData.head.iProtoId);
              }
            }
            // for (let i = 0, len = arr.length; i < len; i++) {
            //     Log.net.log(LogTag, this.cachekey, 'real send with byteLength ', arr[i].byteLength, arr[i]);
            //     this.socketObject.send(arr[i]);
            // }
          }

          if (this._receiveArray) {
            var len = this._receiveArray.length;
            if (len > 0) {
              for (var i = 0; i < len; i++) {
                // let len = this.receiveArray.length;
                // let lenMin = Math.min(len, 25);
                // for (let i = 0; i < lenMin; i++) {
                var _netData = this._receiveArray.shift();
                this.emitNetMsg(_netData);
              }
            }
          }
        };
        _proto.update = function update(dt) {
          switch (this.state) {
            case NetTypes.ENetNodeState.connected:
            case NetTypes.ENetNodeState.weakly:
              {
                this.__update_handler();
                // try {
                // } catch (err) {
                //     Log.net.error(LogTag, this.cachekey, 'catch error:');
                //     // @ts-ignore
                //     Log.net.error(LogTag, this.cachekey, 'name:', err.name ? err.name : 'unknown error name');
                //     // @ts-ignore
                //     Log.net.error(LogTag, this.cachekey, 'message:', err.message ? err.message : 'unknown error message');
                //     // @ts-ignore
                //     if (err.stack) {
                //         // @ts-ignore
                //         Log.net.error(LogTag, this.cachekey, 'stack:', err.stack);
                //     }
                // }
              }

              break;
          }
        };
        _proto.unshiftSendArray = function unshiftSendArray(netData) {
          Log.net.log(LogTag, this.cachekey, 'unshiftSendArray', 'head:', JSON.stringify(netData.head));
          this._sendArray.unshift(netData);
        };
        _proto.onOpen = function onOpen() {
          Log.net.log(LogTag, this.cachekey, 'onOpen');
          this.state = NetTypes.ENetNodeState.connected;
          var scheduler = director.getScheduler();
          scheduler.unscheduleAllForTarget(this);
          scheduler.scheduleUpdate(this, 0, false);
          this.ping();
          this.eventTarget.emit('on_socket_open');
        };
        _proto.onError = function onError(ev) {
          Log.net.error(LogTag, this.cachekey, 'onError', ev);
        };
        _proto.onClose = function onClose(ev) {
          Log.net.warn(LogTag, this.cachekey, 'onClose', 'state', this.state, 'code:', ev.code, 'reason:', ev.reason);
          if (!game.isPaused()) {
            this.clearConnect();
            this.state = NetTypes.ENetNodeState.closed;
          }
        };
        _proto.onMessage = function onMessage(msg) {
          Log.net.log(LogTag, this.cachekey, 'onMessage', 'state', this.state);
          var pBuffer = new Uint8Array(msg.data);

          // 将收到的数据并入缓冲区
          this.pDataByte = NetTypes.ConcatenateBuffer(this.pDataByte, pBuffer);
          var nDataSize = this.pDataByte.byteLength;
          // 拆包
          while (nDataSize >= NetTypes.DownlinkHeadSize) {
            var pHead = NetTypes.BufferToHead(this.pDataByte);
            var wCurSize = pHead.wPacketSize + 4;

            // 长度效验，小于包头 或者 大于当前数据总长度, 说明只接收了一半数据，跳出处理
            if (wCurSize < NetTypes.DownlinkHeadSize || wCurSize > nDataSize) {
              break;
            }

            // 将数据从缓冲区中剪切出来
            var pBufferData = this.pDataByte.subarray(0, wCurSize);
            nDataSize -= wCurSize;
            this.pDataByte = this.pDataByte.subarray(wCurSize, nDataSize);
            var netData = new NetData87();
            netData.initWithBuffer(pBufferData);
            if (netData.state == NetTypes.ENetDataState.valid) {
              var gameproto_map = _cjsExports['gameproto_map'];
              var protoclass = gameproto_map[netData.head.iProtoId];
              if (protoclass) {
                Log.info.log(LogTag, this.cachekey, '<<<<', 'protoname:', protoclass.name, ', head:', JSON.stringify(netData.head), ', byteLength:', netData.buffer.byteLength);
                // Logger.net(LogTag, this.cachekey, '拆包', JSON.stringify(netData.head, undefined, 4));
                if (netData.isPongMsg()) {
                  // Log.net.log(LogTag, this.cachekey, 'onMessage', 'isPongMsg');
                  netData.interpret();
                  this.pong(netData.getData(NetData87.pongMsg));
                } else if (netData.emitImmediately()) {
                  this.emitNetMsg(netData);
                } else {
                  // Log.net.log(LogTag, this.cachekey, '*****', 'clear MSG_TIMEOUT Clock');
                  this._receiveArray.push(netData);
                }
              } else {
                Log.net.error(LogTag, this.cachekey, 'onMessage', '匹配不到协议👌', 'iProtoId:', pHead.iProtoId, 'iSession:', pHead.iSession, 'wPacketSize: ', pHead.wPacketSize);
              }
            } else {
              Log.net.error(LogTag, this.cachekey, 'onMessage', '数据验证错误', 'iProtoId:', pHead.iProtoId, 'iSession:', pHead.iSession, 'wPacketSize: ', pHead.wPacketSize);
            }

            // 跳出判断
            if (nDataSize < NetTypes.DownlinkHeadSize) break;
          }
        }

        // protected
        ;

        _proto.createSocketObject = function createSocketObject() {
          return new WebSocket(this.parameters);
        }

        // public
        ;

        function NetNode(cachekey) {
          this._id = Utils.createUUID();
          this.packLengthLimit = 10240;
          this.pDataByte = void 0;
          // 数据缓冲区
          this.socketObject = void 0;
          this._sendArray = [];
          this._receiveArray = [];
          this._state = void 0;
          this._pingpongCount = 0;
          // private _reconnectCount = 0;
          this.parameters = void 0;
          this.lastpingTime = void 0;
          this.eventTarget = void 0;
          this.cachekey = void 0;
          this._isPause = false;
          this._session = 0;
          this.cachekey = cachekey;
          this.eventTarget = new EventTarget();
          if (!game.hasEventListener(Game.EVENT_HIDE, this.onGameHide, this)) {
            game.on(Game.EVENT_HIDE, this.onGameHide, this);
          }
          if (!game.hasEventListener(Game.EVENT_SHOW, this.onGameShow, this)) {
            game.on(Game.EVENT_SHOW, this.onGameShow, this);
          }
        }
        _proto.setConnectParams = function setConnectParams(params) {
          this.parameters = params;
        };
        _proto.emitNetMsg = function emitNetMsg(netData) {
          if (this.eventTarget && netData && netData.interpret()) {
            this.eventTarget.emit('' + netData.head.iProtoId, netData);
            this.eventTarget.emit('net_session_' + netData.head.iSession, netData);
          }
        };
        _proto.onNetSession = function onNetSession(session, callbackFunction, thisArg) {
          if (this.eventTarget) {
            var eventName = 'net_session_' + session;
            if (this.eventTarget.hasEventListener(eventName, callbackFunction, thisArg)) {
              this.eventTarget.off(eventName, callbackFunction, thisArg);
            }
            this.eventTarget.once(eventName, callbackFunction, thisArg);
          }
        };
        _proto.onNetMsg = function onNetMsg(protoID, callbackFunction, thisArg) {
          if (this.eventTarget) {
            var eventName = '' + protoID;
            if (!this.eventTarget.hasEventListener(eventName, callbackFunction, thisArg)) {
              this.eventTarget.on(eventName, callbackFunction, thisArg);
            }
          }
        };
        _proto.onNetState = function onNetState(callbackFunction, thisArg) {
          if (this.eventTarget) {
            if (!this.eventTarget.hasEventListener(NetTypes.ENetNodeEvent.NET_STATE_CHANGED, callbackFunction, thisArg)) {
              this.eventTarget.on(NetTypes.ENetNodeEvent.NET_STATE_CHANGED, callbackFunction, thisArg);
            }
          }
        };
        _proto.onceNetOpen = function onceNetOpen(callback, target) {
          var eventName = 'on_socket_open';
          if (this.eventTarget) {
            if (target) {
              if (this.eventTarget.hasEventListener(eventName, callback, target)) {
                this.eventTarget.off(eventName, callback, target);
              }
            } else {
              if (this.eventTarget.hasEventListener(eventName, callback)) {
                this.eventTarget.off(eventName, callback);
              }
            }
            this.eventTarget.once('on_socket_open', callback, target);
          }
        };
        _proto.targetOff = function targetOff(target) {
          if (this.eventTarget) {
            this.eventTarget.targetOff(target);
          }
        };
        _proto.send = function send(protoId, databuffer) {
          if (game.isPaused()) return -1;
          if (this.state == NetTypes.ENetNodeState.closed) return -1;
          this._session++;
          if (this._session > Number.MAX_VALUE - 1000) {
            this._session = 1;
          }
          Log.net.log(LogTag, this.cachekey, 'send', protoId, this._session);
          var head = new NetTypes.MsgHead();
          head.iProtoId = protoId;
          head.iSession = this._session;
          var netData = new NetData87();
          netData.initWithData(head, databuffer);
          if (netData.state == NetTypes.ENetDataState.valid) {
            if (netData.isPingMsg()) {
              this.unshiftSendArray(netData);
            } else {
              Log.net.log(LogTag, this.cachekey, 'push to send array.');
              this._sendArray.push(netData);
            }
            return head.iSession;
          } else {
            Log.net.error(LogTag, this.cachekey, 'send', 'send fail, the NetData state is not normal');
            return -1;
          }
        };
        _proto.forceUpdate = function forceUpdate() {
          // 立即调用update更新收发队列
          this.update(0);
        };
        _proto.pause = function pause() {
          if (!this.isPause()) {
            Log.net.log(LogTag, this.cachekey, 'pause');
            this._isPause = true;
            director.getScheduler().unscheduleUpdate(this);
          }
        };
        _proto.resume = function resume() {
          if (this.isPause()) {
            Log.net.log(LogTag, this.cachekey, 'resume');
            this._isPause = false;
            director.getScheduler().scheduleUpdate(this, 0, false);
          }
        };
        _proto.isPause = function isPause() {
          return this._isPause;
        };
        _proto.getState = function getState() {
          return this.state;
        };
        _proto.getCachekey = function getCachekey() {
          return this.cachekey;
        };
        _createClass(NetNode, [{
          key: "uuid",
          get: function get() {
            return this._id;
          }
        }, {
          key: "state",
          get: function get() {
            return this._state;
          },
          set: function set(v) {
            if (v != this._state) {
              this._state = v;
              if (v == NetTypes.ENetNodeState.closed) {
                this.clearConnect();
              }
              Log.info.log(LogTag, this.cachekey, "NetNode state change from " + this._state + " to " + v);
              if (game.isPaused()) return;
              this.eventTarget.emit(NetTypes.ENetNodeEvent.NET_STATE_CHANGED, v);
            }
          }
        }]);
        return NetNode;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetNodeManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NetNodeWs.ts'], function (exports) {
  var _createClass, cclegacy, NetNodeWithWS;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      NetNodeWithWS = module.NetNodeWithWS;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a3f12kxHAhIjLbAkt18l6IO", "NetNodeManager", undefined);
      var NetNodeManager = exports('NetNodeManager', /*#__PURE__*/function () {
        function NetNodeManager() {
          this.cache = void 0;
          this.cache = {};
        }
        var _proto = NetNodeManager.prototype;
        _proto.getNetNode = function getNetNode(cachekey) {
          if (this.cache[cachekey]) {
            return this.cache[cachekey];
          } else {
            this.cache[cachekey] = new NetNodeWithWS(cachekey);
            return this.cache[cachekey];
          }
        };
        _proto.getDefaultNetNode = function getDefaultNetNode() {
          return this.getNetNode('default');
        };
        _createClass(NetNodeManager, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new NetNodeManager();
            }
            return this._instance;
          }
        }]);
        return NetNodeManager;
      }());
      NetNodeManager._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetNodeWs.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NetNode.ts'], function (exports) {
  var _inheritsLoose, cclegacy, NetNode;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      NetNode = module.NetNode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2d3ddgqGldD3o4GWD4TUelh", "NetNodeWs", undefined);
      var NetNodeWithWS = exports('NetNodeWithWS', /*#__PURE__*/function (_NetNode) {
        _inheritsLoose(NetNodeWithWS, _NetNode);
        function NetNodeWithWS() {
          return _NetNode.apply(this, arguments) || this;
        }
        var _proto = NetNodeWithWS.prototype;
        // protected
        _proto.createSocketObject = function createSocketObject() {
          var obj = new WebSocket(this.parameters);
          obj.binaryType = 'arraybuffer';
          return obj;
        };
        return NetNodeWithWS;
      }(NetNode));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetProxyBase.ts", ['cc', './Logger.ts', './NetNodeManager.ts'], function (exports) {
  var cclegacy, Log, NetNodeManager;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      NetNodeManager = module.NetNodeManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "24f5cwcP+xG05gRXvuopAC+", "NetProxyBase", undefined);
      var NetProxyBase = exports('NetProxyBase', /*#__PURE__*/function () {
        function NetProxyBase() {
          /**
           * 网络节点实例
           */
          this.netNode = void 0;
          this._decoratorsInfoInitCompleted = false;
        }
        var _proto = NetProxyBase.prototype;
        _proto.init = function init() {
          if (!this.netNode) {
            this.netNode = NetNodeManager.Instance.getDefaultNetNode();
            this.registerEventListener();
          }
        };
        _proto.reset = function reset() {};
        _proto.prepareRequest = function prepareRequest() {
          return Promise.resolve();
        };
        _proto.registerEventListener = function registerEventListener() {
          if (this.netNode) {
            if (!this._decoratorsInfoInitCompleted) {
              this.netNode.onNetState(this.onNetStateChange, this);
              var dataNetEventListenerMark = this._NetEventListenerMark_;
              if (dataNetEventListenerMark) {
                for (var i = 0; i < dataNetEventListenerMark.length; i++) {
                  var _dataNetEventListener = dataNetEventListenerMark[i],
                    propertyKey = _dataNetEventListener.propertyKey,
                    protoID = _dataNetEventListener.protoID;
                  this.onNetMsg(protoID, this[propertyKey]);
                }
              }
              this._decoratorsInfoInitCompleted = true;
            }
          } else {
            Log.net.error('NetProxyBase', 'registerEventListener', "netNode is " + this.netNode);
          }
        };
        _proto.removeEventListener = function removeEventListener() {
          if (this.netNode) {
            this.netNode.targetOff(this);
          }
        }

        /**
         * 网络节点状态变化
         * @param state
         */;
        _proto.onNetStateChange = function onNetStateChange(state) {
          // // example
          // switch (this.netNode.state) {
          //     case NetTypes.ENetNodeState.connected: {
          //         // do something
          //     } break;
          // }
        }

        /**
         * 发送网络消息
         * @param protoID 协议ID
         * @param msg 消息内容
         * @param onResponse 相应下行消息的回调，这个回调时基于上行的 session 进行的回调，所以不用单心多次上行相互干扰
         * @returns
         */;
        _proto.send = function send(protoID, msg, onResponse) {
          if (this.netNode) {
            var session = this.netNode.send(protoID, msg);
            if (onResponse) {
              if (session >= 0) {
                this.netNode.onNetSession(session, onResponse, this);
              } else {
                Log.net.error('NetProxyBase', 'send', "session \u65E0\u6548 " + session);
              }
            }
            return session;
          } else {
            Log.net.error('NetProxyBase', 'send', "netNode is " + this.netNode);
            return -1;
          }
        }

        /**
         * 监听网络消息，仅在 proxy 类的内部使用
         * @param protoID
         * @param onResponse
         */;
        _proto.onNetMsg = function onNetMsg(protoID, onResponse) {
          if (this.netNode) {
            this.netNode.onNetMsg(protoID, onResponse, this);
          } else {
            Log.net.error('NetProxyBase', 'onNetMsg', "netNode is " + this.netNode);
          }
        };
        return NetProxyBase;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetTypes.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('NetTypes', void 0);
      cclegacy._RF.push({}, "61ac8HdM5ZAcaalVCc6PP79", "NetTypes", undefined);
      var NetTypes;
      (function (_NetTypes) {
        var ENetDataState = /*#__PURE__*/function (ENetDataState) {
          ENetDataState[ENetDataState["empty"] = 0] = "empty";
          ENetDataState[ENetDataState["broken"] = 1] = "broken";
          ENetDataState[ENetDataState["valid"] = 2] = "valid";
          return ENetDataState;
        }({});
        _NetTypes.ENetDataState = ENetDataState;
        var MsgHead = function MsgHead() {
          this.wPacketSize = 0;
          // 出去这个字段本身的长度外的包体长度
          this.iSession = 0;
          this.iProtoId = 0;
        };
        _NetTypes.MsgHead = MsgHead;
        var ENetNodeState = /*#__PURE__*/function (ENetNodeState) {
          ENetNodeState["connecting"] = "connecting";
          ENetNodeState["connected"] = "connected";
          ENetNodeState["weakly"] = "weakly";
          ENetNodeState["closed"] = "closed";
          return ENetNodeState;
        }({});
        _NetTypes.ENetNodeState = ENetNodeState;
        var ENetNodeEvent = /*#__PURE__*/function (ENetNodeEvent) {
          ENetNodeEvent["NET_STATE_CHANGED"] = "NET_STATE_CHANGED";
          return ENetNodeEvent;
        }({});
        _NetTypes.ENetNodeEvent = ENetNodeEvent;
        var UplinkHeadSize = _NetTypes.UplinkHeadSize = 10;
        var DownlinkHeadSize = _NetTypes.DownlinkHeadSize = 12;
        var LittleEndian = _NetTypes.LittleEndian = false;
        function BufferToHead(buffer) {
          var head = new MsgHead();
          var dataView = new DataView(buffer.subarray(0, DownlinkHeadSize).buffer);
          // 下行消息 wPacketSize 占 4 个字节
          head.wPacketSize = dataView.getUint32(0, LittleEndian);
          head.iSession = dataView.getUint32(4, LittleEndian);
          head.iProtoId = dataView.getUint32(8, LittleEndian);
          return head;
        }
        _NetTypes.BufferToHead = BufferToHead;
        function HeadToBuffer(head) {
          var headArrayBuffer = new ArrayBuffer(UplinkHeadSize);
          var headDataView = new DataView(headArrayBuffer);
          headDataView.setUint16(0, head.wPacketSize, LittleEndian);
          headDataView.setUint32(2, head.iSession, LittleEndian);
          headDataView.setUint32(6, head.iProtoId, LittleEndian);
          return new Uint8Array(headArrayBuffer);
        }
        _NetTypes.HeadToBuffer = HeadToBuffer;
        function ConcatenateBuffer() {
          var totalLength = 0;
          for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
          }
          for (var _i = 0, _params = params; _i < _params.length; _i++) {
            var _buffer = _params[_i];
            totalLength += _buffer.length;
          }
          var result = new Uint8Array(totalLength);
          var offset = 0;
          for (var _i2 = 0, _params2 = params; _i2 < _params2.length; _i2++) {
            var _buffer2 = _params2[_i2];
            result.set(_buffer2, offset);
            offset += _buffer2.length;
          }
          return result;
        }
        _NetTypes.ConcatenateBuffer = ConcatenateBuffer;
      })(NetTypes || (NetTypes = exports('NetTypes', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolExtention.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UITools.ts'], function (exports) {
  var _createClass, cclegacy, Node, NodePool, UITools;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      NodePool = module.NodePool;
    }, function (module) {
      UITools = module.UITools;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1804cmfWHhGp6S19STllpJm", "NodePoolExtention", undefined);
      var CCNodePoolEx = exports('CCNodePoolEx', /*#__PURE__*/function () {
        function CCNodePoolEx(createObject, initCount, poolHandlerComp) {
          this._pool = void 0;
          this._createObject = void 0;
          this._poolHandlerComp = void 0;
          this._poolHandlerComp = poolHandlerComp;
          this._pool = new NodePool(poolHandlerComp);
          this._createObject = createObject;
          if (initCount && initCount > 0) {
            for (var i = 0; i < initCount; i++) {
              this.putObj(this._createObject());
            }
          }
        }
        var _proto = CCNodePoolEx.prototype;
        _proto.getObj = function getObj() {
          var node;
          if (this.size > 0) {
            node = this._pool.get();
            if (this._poolHandlerComp) {
              return node.getComponent(this._poolHandlerComp);
            } else {
              return node;
            }
          } else {
            return this._createObject();
          }
        };
        _proto.putObj = function putObj(obj) {
          if (obj instanceof Node) {
            this._pool.put(obj);
          } else {
            this._pool.put(obj.node);
          }
        };
        _proto.clear = function clear() {
          this._pool.clear();
        };
        _createClass(CCNodePoolEx, [{
          key: "size",
          get: function get() {
            return this._pool.size();
          }
        }]);
        return CCNodePoolEx;
      }());
      var GObjectPoolEx = exports('GObjectPoolEx', /*#__PURE__*/function () {
        function GObjectPoolEx(createObject, initCount) {
          this._pool = void 0;
          this._size = 0;
          this._createObject = void 0;
          this._pool = [];
          this._createObject = createObject;
          if (initCount && initCount > 0) {
            for (var i = 0; i < initCount; i++) {
              this.putObj(this._createObject());
            }
          }
        }
        var _proto2 = GObjectPoolEx.prototype;
        _proto2.getObj = function getObj() {
          if (this._pool && this._pool.length) {
            this._size--;
            return this._pool.shift();
          }
          var child = this._createObject();
          return child;
        };
        _proto2.putObj = function putObj(obj) {
          if (this._pool == null) {
            this._pool = [];
          }
          this._size++;
          // alpha 为 0 回收后再取用会有 alpha 设置无法生效的问题
          obj.alpha = 1;
          if (obj.parent) {
            UITools.stopActionsRecursion(obj);
            obj.removeFromParent();
          }
          this._pool.push(obj);
        };
        _proto2.clear = function clear() {
          var cnt = this._pool.length;
          for (var i = 0; i < cnt; i++) this._pool[i].dispose();
          this._pool = [];
          this._size = 0;
        };
        _createClass(GObjectPoolEx, [{
          key: "size",
          get: function get() {
            return this._size;
          }
        }]);
        return GObjectPoolEx;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoticeData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameDecorators.ts', './LanguageManage.ts', './LanguageTypes.ts', './GameConst.ts', './RedHotData.ts', './Utils.ts', './mobx.ts'], function (exports) {
  var _createClass, cclegacy, GameDataClass, LanguageManager, LanguageTypes, GameConst, RedHotData, Utils, makeAutoObservable;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameDataClass = module.GameDataClass;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      LanguageTypes = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      RedHotData = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      makeAutoObservable = module.makeAutoObservable;
    }],
    execute: function () {
      var _class, _class2;
      cclegacy._RF.push({}, "ca21999lHlLkYNajhwNWCUG", "NoticeData", undefined);
      var NoticeData = exports('default', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function NoticeData() {
          this.sss = void 0;
          this._clubMsgs = new Map();
          // 俱乐部消息
          this._systemMsgs = [];
          makeAutoObservable(this);
        }
        var _proto = NoticeData.prototype;
        // 系统消息
        //解析消息
        _proto.parseMsg = function parseMsg(msg) {
          var msgtype = msg.getType;
          var clubid = msg.clubid;
          var msglist = msg.noticelist;
          if (msgtype == GameConst.Notice.type.NOTICE_TYPE_SYSTEM) {
            this._systemMsgs = msglist;
          } else if (msgtype == GameConst.Notice.type.NOTICE_TYPE_CLUB) {
            this._clubMsgs.set(Number(clubid), msglist);
          }
          RedHotData.inst.checkNoticeCnt();
        }

        //读消息
        ;

        _proto.readMsg = function readMsg(type, clubid, nid) {
          if (type == GameConst.Notice.type.NOTICE_TYPE_SYSTEM) {
            this.getSysMsgList().forEach(function (msg) {
              if (msg.noticeId == nid) {
                msg.isRead = 1;
                return;
              }
            });
          } else if (type == GameConst.Notice.type.NOTICE_TYPE_CLUB) {
            this.getClubMsgListBycid(clubid).forEach(function (msg) {
              if (msg.noticeId == nid) {
                msg.isRead = 1;
                return;
              }
            });
          }
          RedHotData.inst.checkNoticeCnt();
        }

        //删除消息
        ;

        _proto.delMsg = function delMsg(type, clubid, nid) {
          if (type == GameConst.Notice.type.NOTICE_TYPE_SYSTEM) {
            if (nid == '') {
              var arrlist = this.getSysMsgList();
              for (var i = arrlist.length - 1; i >= 0; i--) {
                if (arrlist[i].isRead === 1) {
                  arrlist.splice(i, 1); // 删除当前元素
                }
              }
            } else {
              var index = this.getSysMsgList().findIndex(function (msg) {
                return msg.noticeId == nid;
              });
              if (index !== -1) {
                this.getSysMsgList().splice(index, 1);
              }
            }
          } else if (type == GameConst.Notice.type.NOTICE_TYPE_CLUB) {
            if (nid == '') {
              var _arrlist = this.getClubMsgListBycid(clubid);
              for (var _i = _arrlist.length - 1; _i >= 0; _i--) {
                if (_arrlist[_i].isRead === 1) {
                  _arrlist.splice(_i, 1); // 删除当前元素
                }
              }
            } else {
              var _index = this.getClubMsgListBycid(clubid).findIndex(function (msg) {
                return msg.noticeId == nid;
              });
              if (_index !== -1) {
                this.getClubMsgListBycid(clubid).splice(_index, 1);
              }
            }
          }
          RedHotData.inst.checkNoticeCnt();
        };
        _proto.getSysMsgList = function getSysMsgList() {
          return this._systemMsgs || [];
        };
        _proto.getClubMsgListBycid = function getClubMsgListBycid(clubid) {
          return this._clubMsgs.get(clubid);
        }

        //这里不能放外面，不然翻译默认都成英语了
        ;

        _proto.getMsgContent = function getMsgContent(type, subtype) {
          var _GameConst$Notice$NOT, _GameConst$Notice$typ, _SUB_TYPE_CONFIG;
          //消息结构体
          var SUB_TYPE_CONFIG = (_SUB_TYPE_CONFIG = {}, _SUB_TYPE_CONFIG[GameConst.Notice.type.NOTICE_TYPE_SYSTEM] = (_GameConst$Notice$typ = {}, _GameConst$Notice$typ[GameConst.Notice.NOTICE_SUB_TYPE_MATCH_CANNEL] = {
            title: LanguageManager.get('TXT_240'),
            desc: function desc(msg) {
              var content = msg.content;
              if (typeof content === 'string') {
                content = JSON.parse(content);
              }
              //-- 兼容旧的
              if (content.serverFee) {
                return Utils.formatStr(LanguageManager.get('UP_33'), content.name, content.serverFee + content.joinFee);
              } else {
                //-- 用票了
                if (content.use_ticket) {
                  Utils.formatStr(LanguageManager.get('UP_34'), Utils.getFormatMonthDateByStamp2(content.start_time), content.name);
                } else {
                  var buyin = content.buyin || 0;
                  if (buyin > 0) {
                    return Utils.formatStr(LanguageManager.get('UP_35'), Utils.getFormatMonthDateByStamp2(content.start_time), content.name, "(" + Utils.getDisplayNumber(buyin) + " " + LanguageManager.get('TXT_1158') + ")");
                  } else {
                    return Utils.formatStr(LanguageManager.get('UP_35'), Utils.getFormatMonthDateByStamp2(content.start_time), content.name, '');
                  }
                }
              }
            }
          }, _GameConst$Notice$typ[GameConst.Notice.NOTICE_SUB_HALL_RANK_REWARD] = (_GameConst$Notice$NOT = {
            //--非实物奖励
            title: LanguageManager.get('UP_48'),
            desc: function desc(msg) {
              var content = msg.content;
              if (typeof content === 'string') {
                content = JSON.parse(content);
              }
              msg.content = content;
              var prop_id = msg.content.reward.prop_id;
              if (prop_id) {
                //-- 新消息结构
                var prop_type = msg.content.reward.prop_type;
                var name = msg.content.reward.name;
                var num = msg.content.reward.num;
                var iType = msg.content.type || 0;
                var iRank = msg.content.rank || 0;
                if (iType == 0 || iRank == 0) return;
                var iTempItemId = prop_id || 0;
                var localName = LanguageManager.getByLanguage(Utils.formatStr('PROP_%d', iTempItemId), LanguageTypes.ELanguage.en);
                name = LanguageManager.get(Utils.formatStr('PROP_%d', iTempItemId));
                var isSToBackpack = prop_type == GameConst.EPropMainType.GIFT || prop_type == GameConst.EPropMainType.TICKET;
                var awardInfo = Utils.formatStr(' %s x %s', name, num);
                if (iType == 1) {
                  return Utils.formatStr(isSToBackpack ? LanguageManager.get('UP_52') : LanguageManager.get('UP_49'), iRank, awardInfo);
                } else if (iType == 2) {
                  return Utils.formatStr(isSToBackpack ? LanguageManager.get('UP_53') : LanguageManager.get('UP_50'), iRank, awardInfo);
                } else if (iType == 3) {
                  return Utils.formatStr(isSToBackpack ? LanguageManager.get('UP_54') : LanguageManager.get('UP_51'), iRank, awardInfo);
                } else {
                  //-- 兼容旧消息
                  var itemId = msg.content.reward.item_id;
                  var iNum = msg.content.reward.num;
                  var iVipDay = msg.content.reward.vip_day;
                  var _iType = msg.content.type || 0;
                  var _iRank = msg.content.rank || 0;
                  if (_iType == 0 || _iRank == 0) return;
                  var _awardInfo = {};
                  var PropName = Utils.formatStr('PROP_%d', itemId);
                  if (itemId == 101 || itemId == 102 || itemId == 103) {
                    var propInfo = Utils.formatStr(LanguageManager.get(PropName), iVipDay);
                    _awardInfo = Utils.formatStr('%d %s', iNum, propInfo) || '';
                  } else {
                    _awardInfo = Utils.formatStr('%d %s', iNum, LanguageManager.get(PropName)) || '';
                  }
                  if (_iType == 1) {
                    return Utils.formatStr(LanguageManager.get('UP_49'), _iRank, _awardInfo);
                  } else if (_iType == 2) {
                    return Utils.formatStr(LanguageManager.get('UP_50'), _iRank, _awardInfo);
                  } else if (_iType == 3) {
                    return Utils.formatStr(LanguageManager.get('UP_51'), _iRank, _awardInfo);
                  }
                }
                return msg.content;
              }
            }
          }, _GameConst$Notice$NOT[GameConst.Notice.NOTICE_SUB_HALL_RANK_REWARD_GIFT] = {
            //--实物奖励
            title: LanguageManager.get('UP_48'),
            desc: function desc(msg) {
              var content = msg.content;
              if (typeof content === 'string') {
                content = JSON.parse(content);
              }
              var itemId = msg.content.reward.item_id;
              var iNum = msg.content.reward.num;
              var iType = msg.content.type || 0;
              var iRank = msg.content.rank || 0;
              if (iType == 0 || iRank == 0) return;
              var PropName = Utils.formatStr('PROP_%d', itemId);
              var awardInfo = Utils.formatStr('%d %s', iNum, LanguageManager.get(PropName)) || '';
              if (iType == 1) {
                return Utils.formatStr(LanguageManager.get('UP_52'), iRank, awardInfo);
              } else if (iType == 2) {
                return Utils.formatStr(LanguageManager.get('UP_53'), iRank, awardInfo);
              } else if (iType == 3) {
                return Utils.formatStr(LanguageManager.get('UP_54'), iRank, awardInfo);
              }
              return msg.content;
            }
          }, _GameConst$Notice$NOT), _GameConst$Notice$typ), _SUB_TYPE_CONFIG);
          return SUB_TYPE_CONFIG[type][subtype];
        };
        _createClass(NoticeData, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return NoticeData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoticeDetailPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_NoticeDetailPage.ts', './GameWindowBase.ts', './gameproto.mjs_cjs=&original=.js', './NoticeData.ts', './Utils.ts', './GameDecorators.ts', './NoticeProxy.ts', './GameConst.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_NoticeDetailPage, EEnterType, GameWindowBase, NoticeData, Utils, MarkForNetEventListener, NoticeProxy, GameConst, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_NoticeDetailPage = module.default;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, null, function (module) {
      NoticeData = module.default;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      NoticeProxy = module.NoticeProxy;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "c5e68se6Z9Lu6+HWK0H0Yie", "NoticeDetailPage", undefined);
      var NoticeDetailPage = exports('default', (_dec = MarkForNetEventListener(_cjsExports.notice.MsgDelMessageRsp.ProtocolID), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(NoticeDetailPage, _GameWindowBase);
        function NoticeDetailPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_NoticeDetailPage;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'NoticeDetailPage';
          _this._msgInfo = null;
          return _this;
        }
        NoticeDetailPage.create = function create(from) {
          return new NoticeDetailPage(from);
        };
        var _proto = NoticeDetailPage.prototype;
        _proto.onInit = function onInit() {
          var info = this.inputParams;
          this._msgInfo = info;
          var msginfo = NoticeData.inst.getMsgContent(info.type, info.subType);
          this.pane.m_MsgTitle.text = msginfo.title;
          this.pane.m_MsgData.text = Utils.formatDateWithTime(info.time * 1000, true).slice(0, 10);
          this.pane.m_MsgTime.text = Utils.formatDateWithTime(info.time * 1000, true).slice(11);
          this.pane.m_MsgContent.text = msginfo.desc(info);
          var frame = this.pane.m_frame;
          frame.m_btnConfirm.onClick(this.onBtnDeleteClick, this);
        };
        _proto.onBtnDeleteClick = function onBtnDeleteClick() {
          NoticeProxy.inst.onMsgDelMessage(GameConst.Notice.deleteType.single, this._msgInfo.noticeId, this._msgInfo.type, Number(this._msgInfo.clubid));
        };
        _proto.onMsgDelMessageRsp = function onMsgDelMessageRsp(netdata) {
          var info = netdata.getData(_cjsExports.notice.MsgReadMessageRsp);
          if (netdata.isRetSuccess()) {
            this.hide();
          }
        };
        return NoticeDetailPage;
      }(GameWindowBase), _applyDecoratedDescriptor(_class.prototype, "onMsgDelMessageRsp", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgDelMessageRsp"), _class.prototype), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoticeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_NoticeItem.ts', './gameproto.mjs_cjs=&original=.js', './Utils.ts', './NoticeData.ts', './GameDecorators.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_NoticeItem, Utils, NoticeData, MarkForNetEventListener, CustomFguiClass, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_NoticeItem = module.default;
    }, null, function (module) {
      Utils = module.Utils;
    }, function (module) {
      NoticeData = module.default;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "cfd817IfRlMbqXkjpwMddWD", "NoticeItem", undefined);
      var NoticeItem = exports('NoticeItem', (_dec = MarkForNetEventListener(_cjsExports.notice.MsgReadMessageRsp.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_NoticeItem) {
        _inheritsLoose(NoticeItem, _UI_NoticeItem);
        function NoticeItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_NoticeItem.call.apply(_UI_NoticeItem, [this].concat(args)) || this;
          _this.msgInfo = null;
          return _this;
        }
        var _proto = NoticeItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_NoticeItem.prototype.onConstruct.call(this);
          this.name = 'NoticeItem';
        };
        _proto.setItem = function setItem(index, info) {
          this.msgInfo = info;
          this.m_TextData.text = Utils.formatDateWithTime(info.time * 1000, true).slice(0, 10);
          this.m_TextTime.text = Utils.formatDateWithTime(info.time * 1000, true).slice(11);
          this.m_MsgDesc.text = NoticeData.inst.getMsgContent(info.type, info.subType).title;
          this.m_ReadControl.selectedIndex = info.isRead ? 1 : 0;
        };
        _proto.onMsgReadMessageRsp = function onMsgReadMessageRsp(netdata) {
          var info = netdata.getData(_cjsExports.notice.MsgReadMessageRsp);
          if (netdata.isRetSuccess()) {
            if (this.msgInfo.noticeId != info.noticeId) return;
            this.msgInfo.isRead = 1;
            this.m_ReadControl.selectedIndex = this.msgInfo.isRead ? 1 : 0;
          }
        };
        return NoticeItem;
      }(UI_NoticeItem), _applyDecoratedDescriptor(_class2.prototype, "onMsgReadMessageRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgReadMessageRsp"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoticePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GameWindowBase.ts', './CocosDevKit.ts', './UI_NoticePage.ts', './GameConst.ts', './gameproto.mjs_cjs=&original=.js', './NoticeData.ts', './NoticeProxy.ts', './GameDecorators.ts', './NoticeDetailPage.ts', './gameproto.js', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, Event, EEnterType, GameWindowBase, UI_NoticePage, GameConst, NoticeData, NoticeProxy, MarkForNetEventListener, NoticeDetailPage, _cjsExports, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, null, function (module) {
      UI_NoticePage = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, null, function (module) {
      NoticeData = module.default;
    }, function (module) {
      NoticeProxy = module.NoticeProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      NoticeDetailPage = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "2656esjMctBDrXR8eSPv/L8", "NoticePage", undefined);
      var NoticePage = exports('default', (_dec = MarkForNetEventListener(_cjsExports.notice.MsgReadMessageRsp.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.notice.MsgDelMessageRsp.ProtocolID), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(NoticePage, _GameWindowBase);
        function NoticePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_NoticePage;
          _this.coverUnderlyingWindow = true;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.enterType = EEnterType.horizontal;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'NoticePage';
          _this._msgInfos = null;
          return _this;
        }
        NoticePage.create = function create(from) {
          return new NoticePage(from);
        };
        var _proto = NoticePage.prototype;
        _proto.onInit = function onInit() {
          Log.debug.log('NoticePage', 'onInit');
          this.pane.m_MsgList.on(Event.CLICK_ITEM, this.onItemClick, this);
          this.pane.m_MsgList.itemRenderer = this.renderListItem.bind(this);
          this.pane.m_MsgList.setVirtual();
          this.pane.m_BtnDelete.onClick(this.onBtnDeleteAllClick.bind(this), this);
          this.setTableList();
        };
        _proto.onBtnDeleteAllClick = function onBtnDeleteAllClick() {
          NoticeProxy.inst.onMsgDelMessage(GameConst.Notice.deleteType.all, '', this.inputParams.msgtype, Number(this.inputParams.clubid));
        };
        _proto.setTableList = function setTableList() {
          // this.pane.m_MsgList.removeChildren();
          if (this.inputParams.msgtype == GameConst.Notice.type.NOTICE_TYPE_SYSTEM) {
            this._msgInfos = NoticeData.inst.getSysMsgList();
          } else {
            this._msgInfos = NoticeData.inst.getClubMsgListBycid(this.inputParams.clubid);
          }
          this.pane.m_MsgNone.visible = this._msgInfos.length <= 0;
          this.pane.m_grayDelControl.selectedIndex = this._msgInfos.length <= 0 ? 0 : 1;
          this.pane.m_BtnDelete.touchable = this._msgInfos.length > 0;
          this.pane.m_MsgList.numItems = this._msgInfos.length;
        };
        _proto.renderListItem = function renderListItem(index, item) {
          item.setItem(index, this._msgInfos[index]);
        };
        _proto.onItemClick = function onItemClick(target) {
          if (target && target.msgInfo) {
            if (!target.msgInfo.isRead) {
              NoticeProxy.inst.onMsgReadMessage(target.msgInfo.noticeId);
            }
            var view = NoticeDetailPage.create(this);
            view.setInputParams(target.msgInfo);
            view.showOn(this.grootInst);
          }
        };
        _proto.onMsgReadMessageRsp = function onMsgReadMessageRsp(netdata) {
          var info = netdata.getData(_cjsExports.notice.MsgReadMessageRsp);
          if (netdata.isRetSuccess()) {
            NoticeData.inst.readMsg(this.inputParams.msgtype, Number(this.inputParams.clubid), info.noticeId);
          }
        };
        _proto.onMsgDelMessageRsp = function onMsgDelMessageRsp(netdata) {
          var info = netdata.getData(_cjsExports.notice.MsgReadMessageRsp);
          if (netdata.isRetSuccess()) {
            this.grootInst.showCenterTip('TXT_37');
            NoticeData.inst.delMsg(this.inputParams.msgtype, Number(this.inputParams.clubid), info.noticeId);
            this.setTableList();
          }
        };
        return NoticePage;
      }(GameWindowBase), (_applyDecoratedDescriptor(_class.prototype, "onMsgReadMessageRsp", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgReadMessageRsp"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onMsgDelMessageRsp", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgDelMessageRsp"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoticeProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './GameConst.ts', './NoticeData.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, NetProxyClass, MarkForNetEventListener, GameNetProxyBase, GameConst, NoticeData, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      NetProxyClass = module.NetProxyClass;
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      NoticeData = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _class3;
      cclegacy._RF.push({}, "182167trJtF8pa5Pk0wOszh", "NoticeProxy", undefined);
      var NoticeProxy = exports('NoticeProxy', (_dec = NetProxyClass(), _dec2 = MarkForNetEventListener(_cjsExports.notice.MsgNewMessageCast.ProtocolID), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(NoticeProxy, _GameNetProxyBase);
        function NoticeProxy() {
          return _GameNetProxyBase.apply(this, arguments) || this;
        }
        var _proto = NoticeProxy.prototype;
        _proto.prepareRequest = function prepareRequest() {
          return Promise.all([
          //目前只有系统消息
          this.getMsgGetMessageList(GameConst.Notice.type.NOTICE_TYPE_SYSTEM, 0, null)]);
        }

        /**
         * 获取消息列表
         */;
        _proto.getMsgGetMessageList = function getMsgGetMessageList(type, clubid, cb) {
          var _this = this;
          return new Promise(function (resolve) {
            _this.send(_cjsExports.notice.MsgGetMessageList.ProtocolID, _cjsExports.notice.MsgGetMessageList.encode({
              getType: type,
              clubid: clubid,
              limit: GameConst.Notice.EACH_TIMES_REQUEST_MSG_COUNT
            }).finish(), function (netdate) {
              var info = netdate.getData(_cjsExports.notice.MsgGetMessageListRsp);
              if (netdate.isRetSuccess()) {
                NoticeData.inst.parseMsg(info);
                cb && cb(netdate);
              }
              resolve(0);
            });
          });
        }

        //读消息
        ;

        _proto.onMsgReadMessage = function onMsgReadMessage(noticeid) {
          this.send(_cjsExports.notice.MsgReadMessage.ProtocolID, _cjsExports.notice.MsgReadMessage.encode({
            noticeId: noticeid
          }).finish());
        }

        //删除消息
        ;

        _proto.onMsgDelMessage = function onMsgDelMessage(type, nid, gettype, clubid) {
          this.send(_cjsExports.notice.MsgDelMessage.ProtocolID, _cjsExports.notice.MsgDelMessage.encode({
            type: type,
            getType: gettype,
            clubid: clubid,
            noticeId: nid
          }).finish());
        };
        _proto.onMsgNewMessageCast = function onMsgNewMessageCast(netdate) {
          if (netdate.isRetSuccess()) {
            this.getMsgGetMessageList(GameConst.Notice.type.NOTICE_TYPE_SYSTEM, 0, null);
          }
        };
        _createClass(NoticeProxy, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return NoticeProxy;
      }(GameNetProxyBase), _class3._inst = void 0, _class3), _applyDecoratedDescriptor(_class2.prototype, "onMsgNewMessageCast", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgNewMessageCast"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OnError.ts", ['cc', './CocosDevKit.ts', './GameConfig.ts', './TelegramDeviceBridge.ts'], function (exports) {
  var cclegacy, sys;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, null, null, null],
    execute: function () {
      exports('OnError', void 0);
      cclegacy._RF.push({}, "be94evMk0dDuYa+/fbZLfqT", "OnError", undefined);
      var OnError;
      (function (_OnError) {
        var _inited = false;
        var cacheList = _OnError.cacheList = [];
        function cache(error) {
          if (!error || !(error instanceof Error) || typeof error != 'string') {
            if (!error) {
              return;
            }
            // @ts-ignore
            if (!error.message || typeof error.message != 'string') {
              return;
            }
          }
          cacheList.push({
            time: sys.now(),
            error: error
          });
          if (cacheList.length > 150) {
            cacheList.shift();
          }
          return;
        }
        _OnError.cache = cache;
        function onerror(event, source, lineno, colno, error) {
          cache(error);
        }
        function onUnhandledrejectionEvent(event) {
          cache(event.reason);
        }
        function init() {
          if (_inited) return;
          if (sys.isNative) {
            if (jsb.onError) {
              jsb.onError(function (location, message, stack) {
                var err = new Error(message);
                err.stack = stack;
                cache(err);
              });
            }
          } else {
            if (!globalThis.onerror) {
              globalThis.onerror = onerror;
            }
            if (globalThis.addEventListener) {
              globalThis.addEventListener('unhandledrejection', onUnhandledrejectionEvent);
            }
          }
          _inited = true;
        }
        _OnError.init = init;
      })(OnError || (OnError = exports('OnError', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OSSConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameConfig.ts', './HttpProtoBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameConfig, HttpProtoBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      HttpProtoBase = module.HttpProtoBase;
    }],
    execute: function () {
      exports('OSSConfig', void 0);
      cclegacy._RF.push({}, "6cec5Omj4hAqrjpw6cdNr/U", "OSSConfig", undefined);
      var OSSConfig;
      (function (_OSSConfig) {
        var OSSConfigRequest = /*#__PURE__*/function (_HttpProtoBase) {
          _inheritsLoose(OSSConfigRequest, _HttpProtoBase);
          function OSSConfigRequest() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            _this = _HttpProtoBase.call.apply(_HttpProtoBase, [this].concat(args)) || this;
            _this.encryptEnable = false;
            _this.requestUrl = GameConfig.curConfig.ossconfig;
            return _this;
          }
          OSSConfigRequest.create = function create() {
            return new OSSConfigRequest();
          };
          return OSSConfigRequest;
        }(HttpProtoBase);
        _OSSConfig.OSSConfigRequest = OSSConfigRequest;
      })(OSSConfig || (OSSConfig = exports('OSSConfig', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PageEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "74e4d1ov2xG/JpItBzDVb33", "PageEvent", undefined);
      var EPageEvent = exports('EPageEvent', /*#__PURE__*/function (EPageEvent) {
        EPageEvent["DEBUG_LOGIN"] = "DEBUG_LOGIN";
        EPageEvent["LOGIN_PROCESS_START"] = "LOGIN_PROCESS_START";
        EPageEvent["LOGIN_PROCESS_COMPLETED"] = "LOGIN_PROCESS_COMPLETED";
        EPageEvent["LOGIN_PROCESS_FAILED"] = "LOGIN_PROCESS_FAILED";
        EPageEvent["ROOM_LIST_ITEM_CLICK"] = "ROOM_LIST_ITEM_CLICK";
        EPageEvent["JUMP_TO_LOBBY_PAGE"] = "JUMP_TO_LOBBY_PAGE";
        EPageEvent["ENTER_MATCH"] = "ENTER_MATCH";
        return EPageEvent;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PokerBinder.ts", ['cc', './UI_PokerCmpt.ts', './fairygui.mjs'], function (exports) {
  var cclegacy, UI_PokerCmpt, UIObjectFactory;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_PokerCmpt = module.default;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6cda7kxPHtJsrCKsvy1aI1r", "PokerBinder", undefined);
      var PokerBinder = exports('default', /*#__PURE__*/function () {
        function PokerBinder() {}
        PokerBinder.bindAll = function bindAll() {
          UIObjectFactory.setExtension(UI_PokerCmpt.URL, UI_PokerCmpt);
        };
        return PokerBinder;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PokerCmpt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PokerParser.ts', './UI_PokerCmpt.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, PokerParser, UI_PokerCmpt, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      PokerParser = module.PokerParser;
    }, function (module) {
      UI_PokerCmpt = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "e0ff340g4JN47Ez4XBZeDzl", "PokerCmpt", undefined);
      var PokerCmpt = exports('PokerCmpt', CustomFguiClass(_class = /*#__PURE__*/function (_UI_PokerCmpt) {
        _inheritsLoose(PokerCmpt, _UI_PokerCmpt);
        function PokerCmpt() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_PokerCmpt.call.apply(_UI_PokerCmpt, [this].concat(args)) || this;
          _this._sign = void 0;
          _this._num = void 0;
          _this._code = void 0;
          return _this;
        }
        var _proto = PokerCmpt.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_PokerCmpt.prototype.onConstruct.call(this);
          this.name = 'PokerCmpt';
        };
        _proto.updataPoker = function updataPoker() {
          if (!this._code || this._code == 0 || this._code == 0xff) {
            this.m_BgControl.selectedIndex = 0;
            return;
          }
          var _PokerParser$decodeCa = PokerParser.decodeCard(this._code),
            sign = _PokerParser$decodeCa[0],
            num = _PokerParser$decodeCa[1];
          this._sign = sign;
          this._num = num;
          if (this._num == 14) {
            this.m_pokerFont.url = "ui://Poker/poker_style1_" + this._sign + "_1";
          } else {
            var value = Math.max(Math.min(this._num, 13), 1);
            this.m_pokerFont.url = "ui://Poker/poker_style1_" + this._sign + "_" + value;
          }
        };
        _createClass(PokerCmpt, [{
          key: "sign",
          get: function get() {
            return this._sign;
          }
        }, {
          key: "num",
          get: function get() {
            return this._num;
          }
        }, {
          key: "code",
          get: function get() {
            return this._code;
          },
          set: function set(v) {
            if (this._code == v) return;
            this._code = v;
            this.updataPoker();
          }
        }, {
          key: "front",
          get: function get() {
            return this.m_BgControl.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_BgControl.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "hightLight",
          get: function get() {
            return this.m_light.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_light.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "gray",
          get: function get() {
            return this.m_gray.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_gray.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "showEye",
          get: function get() {
            return this.m_showEye.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_showEye.selectedIndex = v ? 1 : 0;
          }
        }]);
        return PokerCmpt;
      }(UI_PokerCmpt)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PokerParser.ts", ['cc', './GameConst.ts'], function (exports) {
  var cclegacy, assert, GameConst;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      assert = module.assert;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      exports('PokerParser', void 0);
      cclegacy._RF.push({}, "b9ab6t1gJNIhrY9sej1v1Wf", "PokerParser", undefined);
      var PokerParser;
      (function (_PokerParser, _poker_type_weight_ta) {
        var EParserMode = /*#__PURE__*/function (EParserMode) {
          EParserMode[EParserMode["NORMAL"] = 1] = "NORMAL";
          EParserMode[EParserMode["SIX_PLUS"] = 2] = "SIX_PLUS";
          EParserMode[EParserMode["PLO4"] = 4] = "PLO4";
          EParserMode[EParserMode["PLO5"] = 5] = "PLO5";
          EParserMode[EParserMode["PLO6"] = 6] = "PLO6";
          return EParserMode;
        }({});
        _PokerParser.EParserMode = EParserMode;
        var straightList = [14, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
        // // 扑克信息
        // const pokerInfos = [
        //     // 2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14
        //     0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a,
        //     0x2b, 0x2c, 0x2d, 0x2e, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x42, 0x43, 0x44, 0x45, 0x46,
        //     0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e
        // ];
        var sixStraightList = [14, 6, 7, 8, 9, 10, 11, 12, 13, 14];
        // const sixPlusPokerInfos = [
        //     // 6+局的扑克信息(1、6、7、8、9为顺子)
        //     // 6,    7,    8,    9,   10,   11,   12,   13,   14
        //     0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x36, 0x37, 0x38, 0x39,
        //     0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e
        // ];

        // 扑克类型权值表
        var poker_type_weight_tables = (_poker_type_weight_ta = {}, _poker_type_weight_ta[1] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], _poker_type_weight_ta[2] = [0, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10], _poker_type_weight_ta[3] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], _poker_type_weight_ta);
        var ECardType = /*#__PURE__*/function (ECardType) {
          ECardType[ECardType["NONE_TYPE"] = 0] = "NONE_TYPE";
          ECardType[ECardType["HIGHT_CARD_TYPE"] = 1] = "HIGHT_CARD_TYPE";
          ECardType[ECardType["ONE_PARIS_TYPE"] = 2] = "ONE_PARIS_TYPE";
          ECardType[ECardType["TWO_PAIRS_TYPE"] = 3] = "TWO_PAIRS_TYPE";
          ECardType[ECardType["THREE_KIND_TYPE"] = 4] = "THREE_KIND_TYPE";
          ECardType[ECardType["STRAIGHT_TYPE"] = 5] = "STRAIGHT_TYPE";
          ECardType[ECardType["FLUSH_TYPE"] = 6] = "FLUSH_TYPE";
          ECardType[ECardType["FULL_HOUSE_TYPE"] = 7] = "FULL_HOUSE_TYPE";
          ECardType[ECardType["FOUR_KIND_TYPE"] = 8] = "FOUR_KIND_TYPE";
          ECardType[ECardType["STRAIGHT_FLUSH_TYPE"] = 9] = "STRAIGHT_FLUSH_TYPE";
          ECardType[ECardType["A_STRAIGHT_FLUSH_TYPE"] = 10] = "A_STRAIGHT_FLUSH_TYPE";
          return ECardType;
        }({});
        _PokerParser.ECardType = ECardType;
        var POS_TYPEs = _PokerParser.POS_TYPEs = [[''], [''], [GameConst.GAME_TYPE_POS_BB, GameConst.GAME_TYPE_POS_BTN], [GameConst.GAME_TYPE_POS_BB, GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'MP2', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB]];
        var POS_TYPEs_EMPTYBTN = _PokerParser.POS_TYPEs_EMPTYBTN = [
        // 走了一个，空庄的情况下
        [''], [''], [GameConst.GAME_TYPE_POS_BB, GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'CO', GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'HJ', 'CO', GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'HJ', 'CO', GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'HJ', 'CO', GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'MP2', 'HJ', 'CO', GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'MP2', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB]];
        var POS_TYPEs_EMPTYSB = _PokerParser.POS_TYPEs_EMPTYSB = [
        // 走了一个，空小盲
        [''], [''], [GameConst.GAME_TYPE_POS_BB, GameConst.GAME_TYPE_POS_BTN], [GameConst.GAME_TYPE_POS_BB, 'UTG', GameConst.GAME_TYPE_POS_BTN], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'CO', GameConst.GAME_TYPE_POS_BTN], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'MP2', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'MP2', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB]];
        var POS_TYPEs_EMPTYBTNANDSB = _PokerParser.POS_TYPEs_EMPTYBTNANDSB = [
        // 走了两个个，同时空庄和空小盲
        [''], [''], [GameConst.GAME_TYPE_POS_BB, 'UTG'], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'CO'], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'HJ', 'CO'], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'HJ', 'CO'], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'HJ', 'CO'], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'MP2', 'HJ', 'CO'], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB], [GameConst.GAME_TYPE_POS_BB, 'UTG', 'UTG+1', 'MP1', 'MP2', 'HJ', 'CO', GameConst.GAME_TYPE_POS_BTN, GameConst.GAME_TYPE_POS_SB]];
        var CardTypeStrMap = _PokerParser.CardTypeStrMap = new Map();
        CardTypeStrMap.set(ECardType.NONE_TYPE, 'UNKNOW');
        CardTypeStrMap.set(ECardType.HIGHT_CARD_TYPE, 'CCS_TXT_1');
        CardTypeStrMap.set(ECardType.ONE_PARIS_TYPE, 'CCS_TXT_430');
        CardTypeStrMap.set(ECardType.TWO_PAIRS_TYPE, 'CCS_TXT_340');
        CardTypeStrMap.set(ECardType.THREE_KIND_TYPE, 'CCS_TXT_212');
        CardTypeStrMap.set(ECardType.STRAIGHT_TYPE, 'CCS_TXT_399');
        CardTypeStrMap.set(ECardType.FLUSH_TYPE, 'CCS_TXT_159');
        CardTypeStrMap.set(ECardType.FULL_HOUSE_TYPE, 'CCS_TXT_406');
        CardTypeStrMap.set(ECardType.FOUR_KIND_TYPE, 'CCS_TXT_147');
        CardTypeStrMap.set(ECardType.STRAIGHT_FLUSH_TYPE, 'CCS_TXT_458');
        CardTypeStrMap.set(ECardType.A_STRAIGHT_FLUSH_TYPE, 'CCS_TXT_467');
        function decodeCard(code) {
          return [Math.floor(code / 16), Math.floor(code % 16)];
        }
        _PokerParser.decodeCard = decodeCard;
        function encodeCard(sign, num) {
          return sign * 16 + num;
        }
        _PokerParser.encodeCard = encodeCard;
        var ParserCardInfo = /*#__PURE__*/function () {
          function ParserCardInfo() {
            /**
             * 这是用来比牌的牌值，要获取用来显示的牌值请用 getNum
             */
            this.num = void 0;
            this.sign = void 0;
          }
          ParserCardInfo.fromCode = function fromCode(code, parserMode) {
            if (parserMode === void 0) {
              parserMode = EParserMode.NORMAL;
            }
            var _decodeCard = decodeCard(code),
              sign = _decodeCard[0],
              num = _decodeCard[1];
            if (num == 1) {
              num = 0xe;
            }
            if (parserMode && parserMode == EParserMode.SIX_PLUS) {
              if (num == 5) {
                num = 0xe;
              }
            }
            var info = new ParserCardInfo();
            info.sign = sign;
            info.num = num;
            return info;
          };
          ParserCardInfo.fromCodeList = function fromCodeList(list) {
            var ret = [];
            if (list.length > 0) {
              for (var i = 0; i < list.length; i++) {
                ret.push(this.fromCode(list[i]));
              }
            }
            return ret;
          };
          ParserCardInfo.fromCardInfoList = function fromCardInfoList(list) {
            var ret = [];
            for (var i = 0; i < list.length; i++) {
              ret.push(list[i].clone());
            }
            return ret;
          };
          ParserCardInfo.fromValue = function fromValue(sign, num, parserMode) {
            if (parserMode === void 0) {
              parserMode = EParserMode.NORMAL;
            }
            if (num == 1) {
              num = 0xe;
            }
            if (parserMode && parserMode == EParserMode.SIX_PLUS) {
              if (num == 5) {
                num = 0xe;
              }
            }
            var info = new ParserCardInfo();
            info.sign = sign;
            info.num = num;
            return info;
          };
          var _proto = ParserCardInfo.prototype;
          _proto.equal = function equal(info) {
            return this.sign == info.sign && this.num == info.num;
          };
          _proto.clone = function clone() {
            var info = new ParserCardInfo();
            info.sign = this.sign;
            info.num = this.num;
            return info;
          };
          return ParserCardInfo;
        }();
        function get_poker_type_weight(game_type, poker_type) {
          // 1 德州
          // 2 6+
          assert(game_type == 1 || game_type == 2 || game_type == 3);
          return poker_type_weight_tables[game_type][poker_type];
        }
        function sort_card(card_a, card_b) {
          if (card_b.num != card_a.num) {
            return card_b.num - card_a.num;
          } else if (card_b.num == card_a.num) {
            return card_b.sign - card_a.sign;
          }
        }

        /**
         * 扑克牌解析
         */
        var PokerParserTool = /*#__PURE__*/function () {
          function PokerParserTool() {}
          // public static build_cards_with_code(cards: number[], parserMode: EParserMode): ParserCardInfo[] {
          //     let arr: ParserCardInfo[] = [];
          //     for (let i = 0; i < cards.length; i++) {
          //         const cardCode = cards[i];
          //         arr.push(ParserCardInfo.fromCode(cardCode, parserMode));
          //     }
          //     return arr;
          // }
          /**
           * 获取顺子信息
           * @param cardMap 扑克牌表格
           * @param isSixPlus 是否是6+局
           * @returns
           */
          PokerParserTool.getStraightInfo = function getStraightInfo(cardMap, isSixPlus) {
            var count = 0; // 当前连续的个数
            var list = isSixPlus ? sixStraightList : straightList;
            for (var idx = list.length - 1; idx >= 0; idx--) {
              var _num = list[idx];
              if (cardMap[_num]) {
                count += 1;
                if (count >= 5) {
                  var nums = [];
                  for (var i = idx; i <= idx + 4; i++) {
                    nums[nums.length] = list[i];
                  }
                  return nums;
                }
              } else {
                count = 0;
              }
            }
          }

          /**
           * 获取高牌信息
           * @param cardInfos
           * @param infos
           * @returns
           */;
          PokerParserTool.getHighCardInfo = function getHighCardInfo(cardInfos, infos) {
            if (!infos) infos = [];
            var list = [];
            for (var i = 0; i < cardInfos.length; i++) {
              var cardInfo = cardInfos[i];
              var isAppend = false;
              for (var j = 0; j < infos.length; j++) {
                var info = infos[j];
                if (cardInfo.equal(info)) {
                  isAppend = true;
                }
              }
              if (!isAppend) {
                var orderIdx = list.length;
                for (var idx = 0; idx < list.length; idx++) {
                  var _info = list[idx];
                  if (cardInfo.num > _info.num) {
                    orderIdx = idx;
                    break;
                  }
                }
                list.splice(orderIdx, 0, cardInfo);
              }
            }
            for (var _idx = 0; _idx < list.length; _idx++) {
              if (infos.length >= 5) break;
              infos.push(list[_idx].clone());
            }
            return infos;
          }

          /**
           * 获取最大牌型组合
           * @param cardInfos 扑克牌信息
           * @param isSixPlus 是否是6+局
           * 皇家同花顺(royal flush)  -> 由AKQJ10五张组成，并且这5张牌花色相同
           * 同花顺(straight flush)  -> 由五张连张同花色的牌组成
           * 4条(four of a kind)     -> 4张同点值的牌加上一张其他任何牌
           * 葫芦(full house)        -> 3张同点值加上另外一对
           * 同花(flush)             -> 5张牌花色相同，但是不成顺子
           * 顺子(straight)          -> 五张牌连张，至少一张花色不同
           * 3条(three of a kind)    -> 三张牌点值相同，其他两张各异
           * 两对(two pairs)         -> 两对加上一个杂牌
           * 一对(one pair)          -> 一对加上3张杂牌
           * 高牌(high card)         -> 其它
           */;
          PokerParserTool.getBiggestCardCombination = function getBiggestCardCombination(cardInfos, isSixPlus) {
            var signInfos = {};
            var numInfos = {};
            for (var i = 0; i < cardInfos.length; i++) {
              var cardInfo = cardInfos[i];
              var _sign = cardInfo.sign;
              var _num2 = cardInfo.num;
              // 花色
              var map = signInfos[_sign] ? signInfos[_sign] : {
                count: 0
              };
              map[_num2] = _sign;
              map.count = map.count + 1;
              signInfos[_sign] = map;
              // 牌值
              var list = numInfos[_num2] ? numInfos[_num2] : [];
              list.push(_sign);
              numInfos[_num2] = list;
            }
            var signInfo = null;
            for (var key in signInfos) {
              if (signInfos.hasOwnProperty(key)) {
                var _map = signInfos[key];
                var _sign2 = parseInt(key);
                if (_map.count >= 5) {
                  signInfo = {
                    sign: _sign2,
                    map: _map
                  };
                  break;
                }
              }
            }
            if (signInfo && signInfo.map) {
              var nums = this.getStraightInfo(signInfo.map, isSixPlus);
              if (nums) {
                var isHasTen = false;
                var infos = [];
                for (var idx = 0; idx < nums.length; idx++) {
                  var _num3 = nums[idx];
                  infos.push(ParserCardInfo.fromValue(signInfo.sign, _num3));
                  if (0 == idx && 10 == _num3) {
                    isHasTen = true;
                  }
                }
                // [10-14] -> 皇家同花顺    其它 -> 同花顺
                return [isHasTen ? ECardType.A_STRAIGHT_FLUSH_TYPE : ECardType.STRAIGHT_FLUSH_TYPE, infos];
              }
            }
            var countInfos = {};
            for (var _num4 = 14; _num4 >= 2; _num4--) {
              var _list = numInfos[_num4];
              if (_list) {
                var _count = _list.length;
                var countInfo = countInfos[_count] ? countInfos[_count] : [];
                countInfo.push({
                  num: _num4,
                  list: _list
                }); // 数值, 花色列表
                countInfos[_count] = countInfo;
              }
            }

            // 四条
            var c2Info = countInfos[2];
            var c3Info = countInfos[3];
            var c4Info = countInfos[4];
            if (c4Info && c4Info.length > 0) {
              var _infos = [];
              for (var _i = 0; _i < c4Info[0].list.length; _i++) {
                // 从大到小排序,所以第一个就是最大的
                var _sign3 = c4Info[0].list[_i];
                _infos.push(ParserCardInfo.fromValue(_sign3, c4Info[0].num));
              }
              return [ECardType.FOUR_KIND_TYPE, this.getHighCardInfo(cardInfos, _infos)];
            }
            if (isSixPlus) {
              // 同花
              if (signInfo && signInfo.map) {
                var _infos2 = [];
                for (var _num5 = 14; _num5 >= 2; _num5--) {
                  // 从大到小
                  if (signInfo.map[_num5]) {
                    _infos2.push(ParserCardInfo.fromValue(signInfo.sign, _num5));
                    if (_infos2.length >= 5) break;
                  }
                }
                return [ECardType.FLUSH_TYPE, _infos2];
              }

              // 葫芦(两个三条也是葫芦)
              var temp = null;
              if (c3Info && c3Info.length > 1) {
                // 两个三条也是葫芦
                if (c2Info && c2Info[0].num > c3Info[1].num) {
                  temp = [c3Info[0], c2Info[0]];
                } else {
                  temp = [c3Info[0], c3Info[1]];
                }
              } else if (c2Info && c3Info && c2Info.length > 0 && c3Info.length > 0) {
                temp = [c3Info[0], c2Info[0]];
              }
              if (temp) {
                var _infos3 = [];
                for (var _i2 = 0; _i2 < temp.length; _i2++) {
                  var tt = temp[_i2];
                  for (var j = 0; j < tt.list.length; j++) {
                    // 从大到小排序,所以第一个就是最大的
                    var _sign4 = tt.list[j];
                    _infos3.push(ParserCardInfo.fromValue(_sign4, tt.num));
                    if (_infos3.length >= 5) break;
                  }
                }
                return [ECardType.FULL_HOUSE_TYPE, _infos3];
              }

              // 顺子
              var _nums = this.getStraightInfo(numInfos, isSixPlus);
              if (_nums) {
                var _infos4 = [];
                for (var _i3 = 0; _i3 < _nums.length; _i3++) {
                  var _num6 = _nums[_i3];
                  _infos4.push(ParserCardInfo.fromValue(numInfos[_num6][0], _num6));
                }
                return [ECardType.STRAIGHT_TYPE, _infos4];
              }

              // 三条
              if (c3Info && c3Info.length > 0) {
                var _infos5 = [];
                for (var _i4 = 0; _i4 < c3Info[0].list.length; _i4++) {
                  // 从大到小排序,所以第一个就是最大的
                  var _sign5 = c3Info[0].list[_i4];
                  _infos5.push(ParserCardInfo.fromValue(_sign5, c3Info[0].num));
                }
                return [ECardType.THREE_KIND_TYPE, this.getHighCardInfo(cardInfos, _infos5)];
              }
            } else {
              // 葫芦(两个三条也是葫芦)
              var _temp = null;
              if (c3Info && c3Info.length > 1) {
                // 两个三条也是葫芦
                if (c2Info && c2Info[0].num > c3Info[1].num) {
                  _temp = [c3Info[0], c2Info[0]];
                } else {
                  _temp = [c3Info[0], c3Info[1]];
                }
              } else if (c2Info && c3Info && c2Info.length > 0 && c3Info.length > 0) {
                _temp = [c3Info[0], c2Info[0]];
              }
              if (_temp) {
                var _infos6 = [];
                for (var _i5 = 0; _i5 < _temp.length; _i5++) {
                  var _tt = _temp[_i5];
                  for (var _j = 0; _j < _tt.list.length; _j++) {
                    // 从大到小排序,所以第一个就是最大的
                    var _sign6 = _tt.list[_j];
                    _infos6.push(ParserCardInfo.fromValue(_sign6, _tt.num));
                    if (_infos6.length >= 5) break;
                  }
                }
                return [ECardType.FULL_HOUSE_TYPE, _infos6];
              }
              // 同花
              if (signInfo && signInfo.map) {
                var _infos7 = [];
                for (var _num7 = 14; _num7 >= 2; _num7--) {
                  // 从大到小
                  if (signInfo.map[_num7]) {
                    _infos7.push(ParserCardInfo.fromValue(signInfo.sign, _num7));
                    if (_infos7.length >= 5) break;
                  }
                }
                return [ECardType.FLUSH_TYPE, _infos7];
              }

              // 顺子
              var _nums2 = this.getStraightInfo(numInfos, isSixPlus);
              if (_nums2) {
                var _infos8 = [];
                for (var _i6 = 0; _i6 < _nums2.length; _i6++) {
                  var _num8 = _nums2[_i6];
                  _infos8.push(ParserCardInfo.fromValue(numInfos[_num8][0], _num8));
                }
                return [ECardType.STRAIGHT_TYPE, _infos8];
              }

              // 三条
              if (c3Info && c3Info.length > 0) {
                var _infos9 = [];
                for (var _i7 = 0; _i7 < c3Info[0].list.length; _i7++) {
                  // 从大到小排序,所以第一个就是最大的
                  var _sign7 = c3Info[0].list[_i7];
                  _infos9.push(ParserCardInfo.fromValue(_sign7, c3Info[0].num));
                }
                return [ECardType.THREE_KIND_TYPE, this.getHighCardInfo(cardInfos, _infos9)];
              }
            }
            // 两对
            if (c2Info && c2Info.length > 1) {
              var _infos10 = [];
              for (var _idx2 = 0; _idx2 < 2; _idx2++) {
                for (var _j2 = 0; _j2 < c2Info[_idx2].list.length; _j2++) {
                  var _sign8 = c2Info[_idx2].list[_j2];
                  _infos10.push(ParserCardInfo.fromValue(_sign8, c2Info[_idx2].num));
                }
              }
              return [ECardType.TWO_PAIRS_TYPE, this.getHighCardInfo(cardInfos, _infos10)];
            }
            // 一对
            if (c2Info && c2Info.length > 0) {
              var _infos11 = [];
              for (var _i8 = 0; _i8 < c2Info[0].list.length; _i8++) {
                var _sign9 = c2Info[0].list[_i8];
                _infos11.push(ParserCardInfo.fromValue(_sign9, c2Info[0].num));
              }
              return [ECardType.ONE_PARIS_TYPE, this.getHighCardInfo(cardInfos, _infos11)];
            }
            return [ECardType.HIGHT_CARD_TYPE, this.getHighCardInfo(cardInfos)];
          };
          PokerParserTool.getBiggestCardCombinationPLO = function getBiggestCardCombinationPLO(hand_cards, public_cards, poker_cards) {
            var MIN_HAND_CARD = 2;
            var MIN_PUBLIC_CARD = 3;
            var MAX_CARD_VALUE = 14;
            var MIN_CARD_VALUE = 2;
            var FLUSH_COUNT = 4;
            var STRAIGHT_SIZE = 5;

            // 同花牌型
            var flush_color = 0;
            var hand_card_count = [];
            var public_card_count = [];
            var all_has_value = [];
            var hand_has_value = [];
            var public_has_value = [];
            for (var i = 0; i < MAX_CARD_VALUE; i++) {
              hand_card_count.push(0);
              public_card_count.push(0);
              all_has_value.push(0);
              hand_has_value.push(0);
              public_has_value.push(0);
            }
            if (hand_cards.length < MIN_HAND_CARD || public_cards.length < MIN_PUBLIC_CARD) {
              return [ECardType.NONE_TYPE, 0];
            }
            hand_cards = hand_cards.sort(sort_card);
            public_cards = public_cards.sort(sort_card);

            // 生成牌型的权值
            function build_weight_plo(poker_type, value1, value2, value3, value4, value5) {
              var poker_type_weight = get_poker_type_weight(1, poker_type);
              value1 = value1 ? value1 : 0;
              value2 = value2 ? value2 : 0;
              value3 = value3 ? value3 : 0;
              value4 = value4 ? value4 : 0;
              value5 = value5 ? value5 : 0;
              var values = [poker_type_weight << 20 & 0xf00000, value1 << 16 & 0x0f0000, value2 << 12 & 0x00f000, value3 << 8 & 0x000f00, value4 << 4 & 0x0000f0, value5 & 0x00000f];
              var value = 0;
              for (var _i9 = 0; _i9 < values.length; _i9++) {
                var v = values[_i9];
                value = value | v;
              }
              return value;
            }
            function select_max_cards(t_cards, num, ex_cards) {
              var cards = [];
              var count = 0;
              for (var _i10 = 0; _i10 < t_cards.length; _i10++) {
                var card = t_cards[_i10];
                if (ex_cards) {
                  if (ex_cards.indexOf(card) == -1) {
                    cards.push(card);
                    count++;
                  }
                } else {
                  cards.push(card);
                  count++;
                }
                if (count >= num) break;
              }
              return cards;
            }
            function find_card_by_value(t_cards, org_value) {
              var cards = [];
              if (org_value == 1) {
                org_value = 14;
              }
              for (var _i11 = 0; _i11 < t_cards.length; _i11++) {
                var card = t_cards[_i11];
                if (card.num == org_value) {
                  cards.push(card);
                }
              }
              assert(cards.length > 0, 'find cards by value error');
              return cards;
            }
            function pre_build_cards_plo() {
              var colors = [0, 0, 0, 0];
              for (var _i12 = 0; _i12 < public_cards.length; _i12++) {
                var card = public_cards[_i12];
                if (public_card_count[card.num] < MIN_PUBLIC_CARD) {
                  public_card_count[card.num]++;
                }
                all_has_value[card.num] = 1;
                public_has_value[card.num] = 1;
                if (card.num == 14) {
                  all_has_value[1] = 1;
                  public_has_value[1] = 1;
                }
                colors[card.sign]++;
              }
              for (var _i13 = 0; _i13 < FLUSH_COUNT - 1; _i13++) {
                if (colors[_i13] >= MIN_PUBLIC_CARD) {
                  flush_color = _i13;
                  break;
                }
              }
              var color_count = 0;
              for (var _i14 = 0; _i14 < hand_cards.length; _i14++) {
                var _card = hand_cards[_i14];
                if (hand_card_count[_card.num] < MIN_HAND_CARD) {
                  hand_card_count[_card.num]++;
                }
                all_has_value[_card.num] = 1;
                hand_has_value[_card.num] = 1;
                if (_card.num == 14) {
                  all_has_value[1] = 1;
                  hand_has_value[1] = 1;
                }
                if (flush_color == _card.sign) {
                  color_count++;
                }
              }
              if (color_count < MIN_HAND_CARD) {
                flush_color = 0;
              }
            }

            //  同花顺
            function straight_flush_plo() {
              if (flush_color <= 0) return [undefined, undefined];
              var all_values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              var is_hand = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (var _i16 = 0; _i16 < hand_cards.length; _i16++) {
                var card = hand_cards[_i16];
                if (card.sign == flush_color) {
                  all_values[card.num] = 1;
                  is_hand[card.num] = 1;
                  if (card.num == 14) {
                    all_values[1] = 1;
                    is_hand[1] = 1;
                  }
                }
              }
              for (var _i17 = 0; _i17 < public_cards.length; _i17++) {
                var _card2 = public_cards[_i17];
                if (_card2.sign == flush_color) {
                  all_values[_card2.num] = 1;
                  if (_card2.num == 14) {
                    all_values[1] = 1;
                  }
                }
              }

              // 可能有问题
              for (var start_value = MAX_CARD_VALUE; start_value >= STRAIGHT_SIZE; start_value--) {
                var straight_value = 0;
                var hand_straight_value = 0;
                for (var card_index = 1; card_index <= STRAIGHT_SIZE; card_index++) {
                  straight_value = straight_value + all_values[start_value - card_index + 1];
                  hand_straight_value = hand_straight_value + is_hand[start_value - card_index + 1];
                }
                if (straight_value >= STRAIGHT_SIZE && hand_straight_value == MIN_HAND_CARD) {
                  for (var _card_index = 1; _card_index <= STRAIGHT_SIZE; _card_index++) {
                    poker_cards.push(ParserCardInfo.fromValue(flush_color, start_value - _card_index + 1));
                  }
                  if (start_value == MAX_CARD_VALUE) {
                    return [ECardType.A_STRAIGHT_FLUSH_TYPE, build_weight_plo(ECardType.A_STRAIGHT_FLUSH_TYPE, start_value)];
                  }
                  return [ECardType.STRAIGHT_FLUSH_TYPE, build_weight_plo(ECardType.STRAIGHT_FLUSH_TYPE, start_value)];
                }
              }
              return [undefined, undefined];
            }

            // 四条
            function four_kind_plo() {
              for (var value = MAX_CARD_VALUE; value >= MIN_CARD_VALUE; value--) {
                if (hand_card_count[value] + public_card_count[value] >= 4) {
                  for (var _i18 = 1; _i18 <= FLUSH_COUNT; _i18++) {
                    poker_cards.push(ParserCardInfo.fromValue(_i18, value));
                  }
                  var other_card = void 0;
                  if (hand_card_count[value] >= 2) {
                    other_card = select_max_cards(public_cards, 1, poker_cards);
                  } else {
                    other_card = select_max_cards(hand_cards, 1, poker_cards);
                  }
                  poker_cards.push(other_card[1]);
                  return [ECardType.FOUR_KIND_TYPE, build_weight_plo(ECardType.FOUR_KIND_TYPE, value, other_card[1].num)];
                }
              }
              return [undefined, undefined];
            }

            //  葫芦
            function full_house_plo() {
              for (var three_value = MAX_CARD_VALUE; three_value >= MIN_CARD_VALUE; three_value--) {
                if (hand_card_count[three_value] + public_card_count[three_value] >= 3) {
                  for (var two_value = MAX_CARD_VALUE; two_value >= MIN_CARD_VALUE; two_value--) {
                    if (two_value != three_value) {
                      var min_hand = Math.min(MIN_HAND_CARD - hand_card_count[three_value], hand_card_count[two_value]);
                      var min_public = Math.min(MIN_PUBLIC_CARD - public_card_count[three_value], public_card_count[two_value]);
                      if (min_hand + min_public >= 2) {
                        if (hand_card_count[three_value] > 0) {
                          var cards = find_card_by_value(hand_cards, three_value);
                          for (var _i19 = 0; _i19 < hand_card_count[three_value]; _i19++) {
                            poker_cards.push(cards[_i19]);
                          }
                        }
                        if (public_card_count[three_value] > 0) {
                          var _cards = find_card_by_value(public_cards, three_value);
                          for (var _i20 = 0; _i20 < public_card_count[three_value]; _i20++) {
                            poker_cards.push(_cards[_i20]);
                          }
                        }
                        if (min_hand > 0) {
                          var _cards2 = find_card_by_value(hand_cards, two_value);
                          for (var _i21 = 0; _i21 < min_hand; _i21++) {
                            poker_cards.push(_cards2[_i21]);
                          }
                        }
                        if (min_public > 0) {
                          var _cards3 = find_card_by_value(public_cards, two_value);
                          for (var _i22 = 0; _i22 < min_public; _i22++) {
                            poker_cards.push(_cards3[_i22]);
                          }
                        }
                        return [ECardType.FULL_HOUSE_TYPE, build_weight_plo(ECardType.FULL_HOUSE_TYPE, three_value, two_value)];
                      }
                    }
                  }
                }
              }
              return [undefined, undefined];
            }

            // 同花
            function flush_plo() {
              if (flush_color <= 0) return [undefined, undefined];
              var color_cards = [];
              var hand_count = 0;
              for (var _i23 = 0; _i23 < hand_cards.length; _i23++) {
                var card = hand_cards[_i23];
                if (flush_color == card.sign) {
                  color_cards.push(card);
                  poker_cards.push(card);
                  hand_count++;
                  if (hand_count >= MIN_HAND_CARD) break;
                }
              }
              var public_count = 0;
              for (var _i24 = 0; _i24 < public_cards.length; _i24++) {
                var _card3 = public_cards[_i24];
                if (flush_color == _card3.sign) {
                  color_cards.push(_card3);
                  poker_cards.push(_card3);
                  public_count++;
                  if (public_count >= MIN_PUBLIC_CARD) break;
                }
              }
              assert(color_cards.length == 5, 'straight_flush_plo get card count error');
              color_cards = color_cards.sort(sort_card);
              return [ECardType.FLUSH_TYPE, build_weight_plo(ECardType.FLUSH_TYPE, color_cards[0].num, color_cards[1].num, color_cards[2].num, color_cards[3].num, color_cards[4].num)];
            }

            // 顺子
            function straight_plo() {
              for (var start_index = MAX_CARD_VALUE; start_index >= STRAIGHT_SIZE; start_index--) {
                var hand_cards_count = 0;
                var public_cards_count = 0;
                var all_cards_count = 0;
                for (var _i25 = 1; _i25 <= STRAIGHT_SIZE; _i25++) {
                  if (all_has_value[start_index - _i25 + 1] > 0) {
                    all_cards_count++;
                  }
                  if (hand_has_value[start_index - _i25 + 1] > 0) {
                    hand_cards_count++;
                  }
                  if (public_has_value[start_index - _i25 + 1] > 0) {
                    public_cards_count++;
                  }
                }
                if (all_cards_count == STRAIGHT_SIZE && hand_cards_count >= MIN_HAND_CARD && public_cards_count >= MIN_PUBLIC_CARD) {
                  var hand_use = 0;
                  var public_use = 0;
                  var both_has_value = [];
                  for (var _i26 = 1; _i26 <= STRAIGHT_SIZE; _i26++) {
                    if (hand_has_value[start_index - _i26 + 1] > 0 && public_has_value[start_index - _i26 + 1] > 0) {
                      both_has_value.push(start_index - _i26 + 1);
                    } else if (hand_has_value[start_index - _i26 + 1] > 0) {
                      hand_use++;
                      var cards = find_card_by_value(hand_cards, start_index - _i26 + 1);
                      poker_cards.push(cards[0]);
                    } else if (public_has_value[start_index - _i26 + 1] > 0) {
                      public_use++;
                      var _cards4 = find_card_by_value(public_cards, start_index - _i26 + 1);
                      poker_cards.push(_cards4[0]);
                    }
                  }
                  if (MIN_HAND_CARD - hand_use > 0) {
                    for (var _i27 = 1; _i27 <= MIN_HAND_CARD - hand_use; _i27++) {
                      var value = both_has_value.shift();
                      var _cards5 = find_card_by_value(hand_cards, value);
                      poker_cards.push(_cards5[0]);
                    }
                  }
                  if (MIN_PUBLIC_CARD - public_use > 0) {
                    for (var _i28 = 1; _i28 <= MIN_PUBLIC_CARD - public_use; _i28++) {
                      var _value = both_has_value.shift();
                      var _cards6 = find_card_by_value(public_cards, _value);
                      poker_cards.push(_cards6[0]);
                    }
                  }
                  assert(poker_cards.length == 5, 'straight_plo get poker cards error');
                  return [ECardType.STRAIGHT_TYPE, build_weight_plo(ECardType.STRAIGHT_TYPE, start_index)];
                }
              }
              return [undefined, undefined];
            }

            // 三条
            function three_kind_plo() {
              var other_cards = [];
              for (var three_value = MAX_CARD_VALUE; three_value >= MIN_CARD_VALUE; three_value--) {
                if (hand_card_count[three_value] + public_card_count[three_value] >= 3) {
                  if (hand_card_count[three_value] > 0) {
                    var cards = find_card_by_value(hand_cards, three_value);
                    for (var _i29 = 0; _i29 < hand_card_count[three_value]; _i29++) {
                      poker_cards.push(cards[_i29]);
                    }
                  }
                  if (MIN_HAND_CARD - hand_card_count[three_value] > 0) {
                    var max_cards = select_max_cards(hand_cards, MIN_HAND_CARD - hand_card_count[three_value], poker_cards);
                    for (var _i30 = 0; _i30 < max_cards.length; _i30++) {
                      var card = max_cards[_i30];
                      other_cards.push(card);
                      poker_cards.push(card);
                    }
                  }
                  if (public_card_count[three_value] > 0) {
                    var _cards7 = find_card_by_value(public_cards, three_value);
                    for (var _i31 = 0; _i31 < public_card_count[three_value]; _i31++) {
                      poker_cards.push(_cards7[_i31]);
                    }
                  }
                  if (MIN_PUBLIC_CARD - public_card_count[three_value] > 0) {
                    var _max_cards = select_max_cards(public_cards, MIN_PUBLIC_CARD - public_card_count[three_value], poker_cards);
                    for (var _i32 = 0; _i32 < _max_cards.length; _i32++) {
                      var _card4 = _max_cards[_i32];
                      other_cards.push(_card4);
                      poker_cards.push(_card4);
                    }
                  }
                  assert(other_cards.length == 2, 'three_kind_plo get other cards error');
                  other_cards = other_cards.sort(sort_card);
                  return [ECardType.THREE_KIND_TYPE, build_weight_plo(ECardType.THREE_KIND_TYPE, three_value, other_cards[0].num, other_cards[1].num)];
                }
              }
              return [undefined, undefined];
            }

            // 两对
            function two_pairs_plo() {
              for (var two_value = MAX_CARD_VALUE; two_value >= MIN_CARD_VALUE; two_value--) {
                if (hand_card_count[two_value] + public_card_count[two_value] >= 2) {
                  for (var new_two_value = MAX_CARD_VALUE; new_two_value >= MIN_CARD_VALUE; new_two_value--) {
                    if (new_two_value != two_value) {
                      var min_hand = Math.min(MIN_HAND_CARD - hand_card_count[two_value], hand_card_count[new_two_value]);
                      var min_public = Math.min(MIN_PUBLIC_CARD - public_card_count[two_value], public_card_count[new_two_value]);
                      if (min_hand + min_public >= 2) {
                        var other_cards = [];
                        if (hand_card_count[two_value] > 0) {
                          var cards = find_card_by_value(hand_cards, two_value);
                          for (var _i33 = 0; _i33 < hand_card_count[two_value]; _i33++) {
                            poker_cards.push(cards[_i33]);
                          }
                        }
                        if (min_hand > 0) {
                          var _cards8 = find_card_by_value(hand_cards, new_two_value);
                          for (var _i34 = 0; _i34 < min_hand; _i34++) {
                            poker_cards.push(_cards8[_i34]);
                          }
                        }
                        var left_hand_count = MIN_HAND_CARD - hand_card_count[two_value] - min_hand;
                        if (left_hand_count > 0) {
                          var max_cards = select_max_cards(hand_cards, left_hand_count, poker_cards);
                          for (var _i35 = 0; _i35 < max_cards.length; _i35++) {
                            var card = max_cards[_i35];
                            other_cards.push(card);
                            poker_cards.push(card);
                          }
                        }
                        if (public_card_count[two_value] > 0) {
                          var _cards9 = find_card_by_value(public_cards, two_value);
                          for (var _i36 = 0; _i36 < public_card_count[two_value]; _i36++) {
                            poker_cards.push(_cards9[_i36]);
                          }
                        }
                        if (min_public > 0) {
                          var _cards10 = find_card_by_value(public_cards, new_two_value);
                          for (var _i37 = 0; _i37 < min_public; _i37++) {
                            poker_cards.push(_cards10[_i37]);
                          }
                        }
                        var left_public_count = MIN_PUBLIC_CARD - public_card_count[two_value] - min_public;
                        if (left_public_count > 0) {
                          var _max_cards2 = select_max_cards(public_cards, left_public_count, poker_cards);
                          for (var _i38 = 0; _i38 < _max_cards2.length; _i38++) {
                            var _card5 = _max_cards2[_i38];
                            other_cards.push(_card5);
                            poker_cards.push(_card5);
                          }
                        }
                        assert(other_cards.length == 1, 'two_pairs_plo get other cards error');
                        return [ECardType.TWO_PAIRS_TYPE, build_weight_plo(ECardType.TWO_PAIRS_TYPE, two_value, new_two_value, other_cards[0].num)];
                      }
                    }
                  }
                }
              }
              return [undefined, undefined];
            }

            // 一对
            function one_pairs_plo() {
              var other_cards = [];
              for (var two_value = MAX_CARD_VALUE; two_value >= MIN_CARD_VALUE; two_value--) {
                if (hand_card_count[two_value] + public_card_count[two_value] >= 2) {
                  if (hand_card_count[two_value] > 0) {
                    var cards = find_card_by_value(hand_cards, two_value);
                    for (var _i39 = 0; _i39 < hand_card_count[two_value]; _i39++) {
                      poker_cards.push(cards[_i39]);
                    }
                  }
                  if (MIN_HAND_CARD - hand_card_count[two_value] > 0) {
                    var max_cards = select_max_cards(hand_cards, MIN_HAND_CARD - hand_card_count[two_value], poker_cards);
                    for (var _i40 = 0; _i40 < max_cards.length; _i40++) {
                      var card = max_cards[_i40];
                      other_cards.push(card);
                      poker_cards.push(card);
                    }
                  }
                  if (public_card_count[two_value] > 0) {
                    var _cards11 = find_card_by_value(public_cards, two_value);
                    for (var _i41 = 0; _i41 < public_card_count[two_value]; _i41++) {
                      poker_cards.push(_cards11[_i41]);
                    }
                  }
                  if (MIN_PUBLIC_CARD - public_card_count[two_value] > 0) {
                    var _max_cards3 = select_max_cards(public_cards, MIN_PUBLIC_CARD - public_card_count[two_value], poker_cards);
                    for (var _i42 = 0; _i42 < _max_cards3.length; _i42++) {
                      var _card6 = _max_cards3[_i42];
                      other_cards.push(_card6);
                      poker_cards.push(_card6);
                    }
                  }
                  assert(other_cards.length == 3, 'one_pairs_plo get other cards error');
                  other_cards = other_cards.sort(sort_card);
                  return [ECardType.ONE_PARIS_TYPE, build_weight_plo(ECardType.ONE_PARIS_TYPE, two_value, other_cards[0].num, other_cards[1].num, other_cards[2].num)];
                }
              }
              return [undefined, undefined];
            }
            pre_build_cards_plo();
            var cb = [
            // 同花顺
            straight_flush_plo,
            // 四条
            four_kind_plo,
            // 葫芦
            full_house_plo,
            // 同花
            flush_plo,
            // 顺子
            straight_plo,
            // 三条
            three_kind_plo,
            // 两对
            two_pairs_plo,
            // 一对
            one_pairs_plo];
            for (var _i43 = 0; _i43 < cb.length; _i43++) {
              var func = cb[_i43];
              var _func = func(),
                poke_type = _func[0],
                value = _func[1];
              if (poke_type) {
                if (poker_cards) {
                  assert(poker_cards.length == 5, 'parser error');
                }
                return [poke_type, value];
              }
            }
            var other_hand = select_max_cards(hand_cards, 2);
            var other_pub = select_max_cards(public_cards, 3);
            var ret_cards = [];
            for (var _i44 = 0; _i44 < other_hand.length; _i44++) {
              ret_cards.push(other_hand[_i44].clone());
            }
            for (var _i45 = 0; _i45 < other_pub.length; _i45++) {
              ret_cards.push(other_pub[_i45].clone());
            }
            ret_cards = ret_cards.sort(sort_card);
            return [ECardType.HIGHT_CARD_TYPE, build_weight_plo(ECardType.HIGHT_CARD_TYPE, ret_cards[0].num, ret_cards[1].num, ret_cards[2].num, ret_cards[3].num, ret_cards[0].num)];
          }

          /**
           * 组合扑克信息
           * @param privateCardInfos
           * @param publicCardInfos
           * @returns
           */;
          PokerParserTool.combinationCardInfos = function combinationCardInfos(privateCardInfos, publicCardInfos) {
            var cardInfos = [];
            if (privateCardInfos) {
              for (var i = 0; i < privateCardInfos.length; i++) {
                cardInfos.push(privateCardInfos[i]);
              }
            }
            if (publicCardInfos) {
              for (var _i46 = 0; _i46 < publicCardInfos.length; _i46++) {
                cardInfos.push(publicCardInfos[_i46]);
              }
            }
            return cardInfos;
          }

          /**
           * 获取扑克组成的牌型
           * @param handCards
           * @param publicCards
           * @param parserMode
           * @returns
           */;
          PokerParserTool.getCardType = function getCardType(handCards, publicCards, parserMode) {
            // PLO处理
            if (parserMode >= EParserMode.PLO4 && parserMode <= EParserMode.PLO6) {
              var cards = [];
              // handCards = ParserCardInfo.fromCardInfoList(handCards);
              // publicCards = ParserCardInfo.fromCardInfoList(publicCards);
              // Logger.default("handCards:", handCards);
              // Logger.default("publicCards:", publicCards);
              var _this$getBiggestCardC = this.getBiggestCardCombinationPLO(handCards, publicCards, cards),
                typed = _this$getBiggestCardC[0],
                _ = _this$getBiggestCardC[1];
              return [typed, cards];
            } else {
              var isSix = parserMode == EParserMode.SIX_PLUS;
              var cardInfos = this.combinationCardInfos(handCards, publicCards);
              if (!cardInfos || cardInfos.length == 0) return [ECardType.NONE_TYPE, []];
              var _this$getBiggestCardC2 = this.getBiggestCardCombination(cardInfos, isSix),
                _typed = _this$getBiggestCardC2[0],
                infos = _this$getBiggestCardC2[1];
              return [_typed, infos];
            }
          }

          // /**
          //  * 根据牌型获取牌型提示文本
          //  * @param typed
          //  * @returns
          //  */
          // private static getCardTypeTipsByType(typed: ECardType) {
          //     let str: string;
          //     switch (typed) {
          //         case ECardType.HIGHT_CARD_TYPE: {
          //             str = 'HIGHT_CARD_TYPE';
          //         } break;
          //         case ECardType.ONE_PARIS_TYPE: {
          //             str = 'ONE_PARIS_TYPE';
          //         } break;
          //         case ECardType.TWO_PAIRS_TYPE: {
          //             str = 'TWO_PAIRS_TYPE';
          //         } break;
          //         case ECardType.THREE_KIND_TYPE: {
          //             str = 'THREE_KIND_TYPE';
          //         } break;
          //         case ECardType.STRAIGHT_TYPE: {
          //             str = 'STRAIGHT_TYPE';
          //         } break;
          //         case ECardType.FLUSH_TYPE: {
          //             str = 'FLUSH_TYPE';
          //         } break;
          //         case ECardType.FULL_HOUSE_TYPE: {
          //             str = 'FULL_HOUSE_TYPE';
          //         } break;
          //         case ECardType.FOUR_KIND_TYPE: {
          //             str = 'FOUR_KIND_TYPE';
          //         } break;
          //         case ECardType.STRAIGHT_FLUSH_TYPE: {
          //             str = 'STRAIGHT_FLUSH_TYPE';
          //         } break;
          //         case ECardType.A_STRAIGHT_FLUSH_TYPE: {
          //             str = 'A_STRAIGHT_FLUSH_TYPE';
          //         } break;
          //         default: {
          //             str = 'HIGHT_CARD_TYPE';
          //         } break;
          //     }
          //     return str;
          // }

          // /**
          //  * 获取牌型提示文本
          //  * @param handCards
          //  * @param publicCards
          //  * @param parserMode
          //  * @returns
          //  */
          // public static getCardTypeTips(handCards: ParserCardInfo[], publicCards: ParserCardInfo[], parserMode: EParserMode): [string, ParserCardInfo[]] {
          //     let [typed, cards] = this.getCardType(handCards, publicCards, parserMode);
          //     return [this.getCardTypeTipsByType(typed), cards];
          // }

          // /**
          //  * 列表中是否有某张牌
          //  * @param sign
          //  * @param num
          //  * @param list
          //  * @returns
          //  */
          // public static isHasCard(sign: number, num: number, list: ParserCardInfo[]): number {
          //     if (list) {
          //         for (let idx = 0, len = list.length; idx < len; idx++) {
          //             const info = list[idx];
          //             if ((info.sign == sign) && (info.num == num)) {
          //                 return idx;
          //             }
          //         }
          //     }
          //     return -1;
          // }
          ;

          return PokerParserTool;
        }();
        /**
         * 解析牌型和组牌结果
         * @param handCards 手牌
         * @param publicCards 公共牌
         * @param parserMode 解析模式
         * @returns
         */
        function parseCardType(handCards, publicCards, parserMode) {
          var _PokerParserTool$getC = PokerParserTool.getCardType(ParserCardInfo.fromCodeList(handCards), ParserCardInfo.fromCodeList(publicCards), parserMode),
            typed = _PokerParserTool$getC[0],
            cards = _PokerParserTool$getC[1];
          var cardCodes = [];
          for (var i = 0; i < cards.length; i++) {
            var cardInfo = cards[i];
            cardCodes.push(encodeCard(cardInfo.sign, cardInfo.num));
          }
          return [typed, cardCodes];
        }
        _PokerParser.parseCardType = parseCardType;
      })(PokerParser || (PokerParser = exports('PokerParser', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupLoadingManager.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "67d16TlBuVK4LmrDELTRUbS", "PopupLoadingManager", undefined);
      var PopupLoadingManager = exports('PopupLoadingManager', /*#__PURE__*/function () {
        function PopupLoadingManager(loading) {
          this.m_loadingLayer = void 0;
          this.m_loadingLayer = loading;
        }
        var _proto = PopupLoadingManager.prototype;
        _proto.show = function show() {
          this.showLoading(true);
        };
        _proto.hide = function hide() {
          this.showLoading(false);
        };
        _proto.showLoading = function showLoading(visible) {
          if (visible) {
            this.m_loadingLayer.m_tans1.play(null, -1);
            this.m_loadingLayer.m_tans0.play(null, -1);
          } else {
            this.m_loadingLayer.m_tans0.stop(false);
            this.m_loadingLayer.m_tans1.stop(false);
          }
        };
        return PopupLoadingManager;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ProfileHeadGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_ProfileHeadGroup.ts', './NativeDeviceBridge.ts', './RoleData.ts', './GameDecorators.ts', './ChangeNickDialog.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_ProfileHeadGroup, NativeDeviceBridge, RoleData, CustomFguiClass, MarkForDataBinder, ChangeNickDialog;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_ProfileHeadGroup = module.default;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
      MarkForDataBinder = module.MarkForDataBinder;
    }, function (module) {
      ChangeNickDialog = module.ChangeNickDialog;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;
      cclegacy._RF.push({}, "17cdbzqD4FHPb7U583X8l4S", "ProfileHeadGroup", undefined);
      var ProfileHeadGroup = exports('ProfileHeadGroup', (_dec = MarkForDataBinder(), _dec2 = MarkForDataBinder(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_ProfileHeadGroup) {
        _inheritsLoose(ProfileHeadGroup, _UI_ProfileHeadGroup);
        function ProfileHeadGroup() {
          return _UI_ProfileHeadGroup.apply(this, arguments) || this;
        }
        var _proto = ProfileHeadGroup.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_ProfileHeadGroup.prototype.onConstruct.call(this);
          this.name = 'ProfileHeadGroup';
          this.m_UserName.text = RoleData.inst.nick;
          this.m_UserId.text = 'ID:' + RoleData.inst.playerID;

          // this.setAvatar();
          // this.setUserNick();

          this.m_BtnCopy.onClick(this.onCopyListener, this);
          var avatar = this.m_HeadGroup.component;
          avatar.onClick(this.onBtnHeadClick, this);
        };
        _proto.onBtnHeadClick = function onBtnHeadClick() {
          ChangeNickDialog.create(this).showOn(this.grootInst);
        };
        _proto.onCopyListener = function onCopyListener() {
          var _this = this;
          NativeDeviceBridge.Instance.copyTextToClipboard(RoleData.inst.playerID + '').then(function (success) {
            if (success) {
              _this.grootInst.showCenterTip('TXT_140');
            }
          });
        };
        _proto.setAvatar = function setAvatar() {
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(RoleData.inst.avatar);
        };
        _proto.setUserNick = function setUserNick() {
          this.m_UserName.text = RoleData.inst.nick;
        };
        return ProfileHeadGroup;
      }(UI_ProfileHeadGroup), (_applyDecoratedDescriptor(_class2.prototype, "setAvatar", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "setAvatar"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setUserNick", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "setUserNick"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ProfileLanguagePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_ProfileLanguagePage.ts', './GameWindowBase.ts', './LanguageManage.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Event, UI_ProfileLanguagePage, EEnterType, GameWindowBase, LanguageManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      UI_ProfileLanguagePage = module.default;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      LanguageManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "935e4RT/xVPYIJG8jQpIU/+", "ProfileLanguagePage", undefined);
      var ProfileLanguagePage = exports('ProfileLanguagePage', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(ProfileLanguagePage, _GameWindowBase);
        function ProfileLanguagePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_ProfileLanguagePage;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'ProfileLanguagePage';
          _this._SwitchNodeList = [];
          return _this;
        }
        ProfileLanguagePage.create = function create(from) {
          return new ProfileLanguagePage(from);
        };
        var _proto = ProfileLanguagePage.prototype;
        _proto.onInit = function onInit() {
          this.pane.m_ExchangeControl.selectedIndex = LanguageManager.language;
          this.pane.m_ExchangeControl.on(Event.STATUS_CHANGED, this.onExchangeCB, this);
          var cmpt = this.pane.m_frame;
          cmpt.m_btnConfirm.onClick(this.onBtnSwitchLanguage, this);
          this._SwitchNodeList.push(this.pane.m_BtnTC);
          this._SwitchNodeList.push(this.pane.m_BtnSC);
          this._SwitchNodeList.push(this.pane.m_BtnEnglish);
          this._SwitchNodeList.push(this.pane.m_BtnRu);
          this.onExchangeCB();
        };
        _proto.onExchangeCB = function onExchangeCB() {
          var curid = this.pane.m_ExchangeControl.selectedIndex;
          for (var idx = 0; idx < this._SwitchNodeList.length; idx++) {
            var node = this._SwitchNodeList[idx];
            node.m_SwitchControl.selectedIndex = curid == idx ? 0 : 1;
          }
          this.onBtnSwitchLanguage();
        };
        _proto.onBtnSwitchLanguage = function onBtnSwitchLanguage() {
          LanguageManager.language = this.pane.m_ExchangeControl.selectedIndex;
          this.hide();
        };
        return ProfileLanguagePage;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PublicBinder.ts", ['cc', './UI_DialogFrame3.ts', './UI_ConfirmBoxStyle2.ts', './UI_CalendarPage.ts', './UI_CalendarDayItem.ts', './UI_CalendarMonthItem.ts', './UI_CircularProgress.ts', './UI_LoadingItem.ts', './UI_PageFrame1.ts', './UI_CommonButton1.ts', './UI_WalletComponent.ts', './UI_CommonButtonGreen2.ts', './UI_Avatar.ts', './UI_AvatarContent.ts', './UI_CommonButton2.ts', './UI_DialogFrame.ts', './UI_ConfirmBoxStyle1.ts', './UI_DialogFrame2.ts', './UI_CommonButton4.ts', './UI_GoldComponent.ts', './UI_FSlider.ts', './UI_NetImage.ts', './UI_GetRewardPage.ts', './UI_Button1Component.ts', './UI_CenterTipItem.ts', './UI_CenterTipLayer.ts', './UI_PublicLayer.ts', './UI_CommonButtonGreen1.ts', './UI_GetRewardItem.ts', './UI_ServerMaintenanceDialoa.ts', './UI_ListNoneComponent.ts', './fairygui.mjs'], function (exports) {
  var cclegacy, UI_DialogFrame3, UI_ConfirmBoxStyle2, UI_CalendarPage, UI_CalendarDayItem, UI_CalendarMonthItem, UI_CircularProgress, UI_LoadingItem, UI_PageFrame1, UI_CommonButton1, UI_WalletComponent, UI_CommonButtonGreen2, UI_Avatar, UI_AvatarContent, UI_CommonButton2, UI_DialogFrame, UI_ConfirmBoxStyle1, UI_DialogFrame2, UI_CommonButton4, UI_GoldComponent, UI_FSlider, UI_NetImage, UI_GetRewardPage, UI_Button1Component, UI_CenterTipItem, UI_CenterTipLayer, UI_PublicLayer, UI_CommonButtonGreen1, UI_GetRewardItem, UI_ServerMaintenanceDialoa, UI_ListNoneComponent, UIObjectFactory;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_DialogFrame3 = module.default;
    }, function (module) {
      UI_ConfirmBoxStyle2 = module.default;
    }, function (module) {
      UI_CalendarPage = module.default;
    }, function (module) {
      UI_CalendarDayItem = module.default;
    }, function (module) {
      UI_CalendarMonthItem = module.default;
    }, function (module) {
      UI_CircularProgress = module.default;
    }, function (module) {
      UI_LoadingItem = module.default;
    }, function (module) {
      UI_PageFrame1 = module.default;
    }, function (module) {
      UI_CommonButton1 = module.default;
    }, function (module) {
      UI_WalletComponent = module.default;
    }, function (module) {
      UI_CommonButtonGreen2 = module.default;
    }, function (module) {
      UI_Avatar = module.default;
    }, function (module) {
      UI_AvatarContent = module.default;
    }, function (module) {
      UI_CommonButton2 = module.default;
    }, function (module) {
      UI_DialogFrame = module.default;
    }, function (module) {
      UI_ConfirmBoxStyle1 = module.default;
    }, function (module) {
      UI_DialogFrame2 = module.default;
    }, function (module) {
      UI_CommonButton4 = module.default;
    }, function (module) {
      UI_GoldComponent = module.default;
    }, function (module) {
      UI_FSlider = module.default;
    }, function (module) {
      UI_NetImage = module.default;
    }, function (module) {
      UI_GetRewardPage = module.default;
    }, function (module) {
      UI_Button1Component = module.default;
    }, function (module) {
      UI_CenterTipItem = module.default;
    }, function (module) {
      UI_CenterTipLayer = module.default;
    }, function (module) {
      UI_PublicLayer = module.default;
    }, function (module) {
      UI_CommonButtonGreen1 = module.default;
    }, function (module) {
      UI_GetRewardItem = module.default;
    }, function (module) {
      UI_ServerMaintenanceDialoa = module.default;
    }, function (module) {
      UI_ListNoneComponent = module.default;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a0ba1M1CwRIxbHm9bYKA5f+", "PublicBinder", undefined);
      var PublicBinder = exports('default', /*#__PURE__*/function () {
        function PublicBinder() {}
        PublicBinder.bindAll = function bindAll() {
          UIObjectFactory.setExtension(UI_DialogFrame3.URL, UI_DialogFrame3);
          UIObjectFactory.setExtension(UI_ConfirmBoxStyle2.URL, UI_ConfirmBoxStyle2);
          UIObjectFactory.setExtension(UI_CalendarPage.URL, UI_CalendarPage);
          UIObjectFactory.setExtension(UI_CalendarDayItem.URL, UI_CalendarDayItem);
          UIObjectFactory.setExtension(UI_CalendarMonthItem.URL, UI_CalendarMonthItem);
          UIObjectFactory.setExtension(UI_CircularProgress.URL, UI_CircularProgress);
          UIObjectFactory.setExtension(UI_LoadingItem.URL, UI_LoadingItem);
          UIObjectFactory.setExtension(UI_PageFrame1.URL, UI_PageFrame1);
          UIObjectFactory.setExtension(UI_CommonButton1.URL, UI_CommonButton1);
          UIObjectFactory.setExtension(UI_WalletComponent.URL, UI_WalletComponent);
          UIObjectFactory.setExtension(UI_CommonButtonGreen2.URL, UI_CommonButtonGreen2);
          UIObjectFactory.setExtension(UI_Avatar.URL, UI_Avatar);
          UIObjectFactory.setExtension(UI_AvatarContent.URL, UI_AvatarContent);
          UIObjectFactory.setExtension(UI_CommonButton2.URL, UI_CommonButton2);
          UIObjectFactory.setExtension(UI_DialogFrame.URL, UI_DialogFrame);
          UIObjectFactory.setExtension(UI_ConfirmBoxStyle1.URL, UI_ConfirmBoxStyle1);
          UIObjectFactory.setExtension(UI_DialogFrame2.URL, UI_DialogFrame2);
          UIObjectFactory.setExtension(UI_CommonButton4.URL, UI_CommonButton4);
          UIObjectFactory.setExtension(UI_GoldComponent.URL, UI_GoldComponent);
          UIObjectFactory.setExtension(UI_FSlider.URL, UI_FSlider);
          UIObjectFactory.setExtension(UI_NetImage.URL, UI_NetImage);
          UIObjectFactory.setExtension(UI_GetRewardPage.URL, UI_GetRewardPage);
          UIObjectFactory.setExtension(UI_Button1Component.URL, UI_Button1Component);
          UIObjectFactory.setExtension(UI_CenterTipItem.URL, UI_CenterTipItem);
          UIObjectFactory.setExtension(UI_CenterTipLayer.URL, UI_CenterTipLayer);
          UIObjectFactory.setExtension(UI_PublicLayer.URL, UI_PublicLayer);
          UIObjectFactory.setExtension(UI_CommonButtonGreen1.URL, UI_CommonButtonGreen1);
          UIObjectFactory.setExtension(UI_GetRewardItem.URL, UI_GetRewardItem);
          UIObjectFactory.setExtension(UI_ServerMaintenanceDialoa.URL, UI_ServerMaintenanceDialoa);
          UIObjectFactory.setExtension(UI_ListNoneComponent.URL, UI_ListNoneComponent);
        };
        return PublicBinder;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PublicLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_PublicLayer.ts', './CocosDevKit.ts', './MultiLanguageText.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Node, UITransform, GameWindowBase, UI_PublicLayer, MultiLanguageText, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      UITransform = module.UITransform;
    }, function (module) {
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_PublicLayer = module.default;
    }, null, function (module) {
      MultiLanguageText = module.MultiLanguageText;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "81c47jqDidJdJke9aX1ig4j", "PublicLayer", undefined);
      var PublicLayer = exports('PublicLayer', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(PublicLayer, _GameWindowBase);
        function PublicLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = [];
          _this.stayPage = true;
          _this.paneClass = UI_PublicLayer;
          _this.coverUnderlyingWindow = false;
          _this.showBlackMask = false;
          _this.clickOutsideHide = false;
          _this.gestureCloseWindow = false;
          _this.pageOrder = 1002;
          _this.pageName = 'PublicLayer';
          return _this;
        }
        PublicLayer.create = function create(from) {
          return new PublicLayer(from);
        };
        var _proto = PublicLayer.prototype;
        _proto.onInit = function onInit() {
          Log.debug.log('PublicLayer', 'onInit');
          // this.pane.m_centerTipLayer.visible = false;
          this.pane.m_loadingItem.visible = false;
          this.node.off(Node.EventType.TOUCH_START);
          this.node.off(Node.EventType.TOUCH_MOVE);
          this.node.off(Node.EventType.TOUCH_END);
          this.node.off(Node.EventType.TOUCH_CANCEL);
        };
        _proto._showCenterTip = function _showCenterTip(type, content) {
          var component = this.pane.m_centerTipLayer.node.getComponent(UITransform);
          component.unscheduleAllCallbacks();
          var titleTextField = this.pane.m_centerTipLayer.m_item.getChild('title');
          var tipIcon = this.pane.m_centerTipLayer.m_item.getChild('tipIcon');
          this.pane.m_centerTipLayer.m_item.title = content;
          for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }
          if (args && args.length > 0) {
            var multiLanguageText = titleTextField.node.getComponent(MultiLanguageText);
            if (multiLanguageText) {
              multiLanguageText.setFormatParams.apply(multiLanguageText, args);
            }
          }
          this.pane.m_centerTipLayer.m_item.m_TipsTypeControl.selectedIndex = type;
          // UITools.forceUpdateRecursion(this.pane.m_centerTipLayer.node);
          titleTextField._label.updateRenderData();
          var trans_show = this.pane.m_centerTipLayer.m_show;
          var trans_hide = this.pane.m_centerTipLayer.m_hide;
          trans_hide.stop(false, false);
          trans_show.stop(false, false);
          component.unscheduleAllCallbacks();
          var title = this.pane.m_centerTipLayer.m_item.getChild('title');
          var lines = Math.ceil((title.height - 18.14) / 39);
          var delayTimes = 2 + (lines - 1);
          trans_show.play(function () {
            component.scheduleOnce(function () {
              trans_hide.play();
            }, delayTimes);
          });
        }

        //普通
        ;

        _proto.showCenterTip = function showCenterTip(content) {
          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }
          this._showCenterTip(0, content, args);
        }
        //成功
        ;

        _proto.showCenterTipSuccess = function showCenterTipSuccess(content) {
          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            args[_key4 - 1] = arguments[_key4];
          }
          this._showCenterTip(1, content, args);
        }
        //失败
        ;

        _proto.showCenterTipFailed = function showCenterTipFailed(content) {
          for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
            args[_key5 - 1] = arguments[_key5];
          }
          this._showCenterTip(2, content, args);
        }
        //警告
        ;

        _proto.showCenterTipWarn = function showCenterTipWarn(content) {
          for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
            args[_key6 - 1] = arguments[_key6];
          }
          this._showCenterTip(3, content, args);
        };
        _proto.setLoading = function setLoading(visible) {
          if (visible) {
            this.pane.m_loadingItem.m_tans1.play(null, -1);
            this.pane.m_loadingItem.m_tans0.play(null, -1);
          } else {
            this.pane.m_loadingItem.m_tans0.stop(false);
            this.pane.m_loadingItem.m_tans1.stop(false);
          }
          this.pane.m_loadingItem.visible = visible;
        };
        return PublicLayer;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/QRCode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6e35bAaesZA2aVsrmaqSrf0", "QRCode", undefined);
      //---------------------------------------------------------------------
      // QRMode
      //---------------------------------------------------------------------

      var QRMode = exports('QRMode', /*#__PURE__*/function (QRMode) {
        QRMode[QRMode["MODE_NUMBER"] = 1] = "MODE_NUMBER";
        QRMode[QRMode["MODE_ALPHA_NUM"] = 2] = "MODE_ALPHA_NUM";
        QRMode[QRMode["MODE_8BIT_BYTE"] = 4] = "MODE_8BIT_BYTE";
        QRMode[QRMode["MODE_KANJI"] = 8] = "MODE_KANJI";
        return QRMode;
      }({}));

      //---------------------------------------------------------------------
      // QRErrorCorrectLevel
      //---------------------------------------------------------------------

      // 二维码纠错级别 以便在部分二维码被损坏或遮挡的情况下仍能读取
      var QRErrorCorrectLevel = exports('QRErrorCorrectLevel', /*#__PURE__*/function (QRErrorCorrectLevel) {
        QRErrorCorrectLevel[QRErrorCorrectLevel["L"] = 1] = "L";
        QRErrorCorrectLevel[QRErrorCorrectLevel["M"] = 0] = "M";
        QRErrorCorrectLevel[QRErrorCorrectLevel["Q"] = 3] = "Q";
        QRErrorCorrectLevel[QRErrorCorrectLevel["H"] = 2] = "H";
        return QRErrorCorrectLevel;
      }({}));

      //---------------------------------------------------------------------
      // QRMaskPattern
      //---------------------------------------------------------------------

      var QRMaskPattern = exports('QRMaskPattern', /*#__PURE__*/function (QRMaskPattern) {
        QRMaskPattern[QRMaskPattern["PATTERN000"] = 0] = "PATTERN000";
        QRMaskPattern[QRMaskPattern["PATTERN001"] = 1] = "PATTERN001";
        QRMaskPattern[QRMaskPattern["PATTERN010"] = 2] = "PATTERN010";
        QRMaskPattern[QRMaskPattern["PATTERN011"] = 3] = "PATTERN011";
        QRMaskPattern[QRMaskPattern["PATTERN100"] = 4] = "PATTERN100";
        QRMaskPattern[QRMaskPattern["PATTERN101"] = 5] = "PATTERN101";
        QRMaskPattern[QRMaskPattern["PATTERN110"] = 6] = "PATTERN110";
        QRMaskPattern[QRMaskPattern["PATTERN111"] = 7] = "PATTERN111";
        return QRMaskPattern;
      }({}));
      var QR8bitByte = /*#__PURE__*/function () {
        function QR8bitByte(data) {
          this.mode = void 0;
          this.data = void 0;
          this.mode = QRMode.MODE_8BIT_BYTE;
          this.data = data;
        }
        var _proto = QR8bitByte.prototype;
        _proto.getLength = function getLength(buffer) {
          return this.data.length;
        };
        _proto.write = function write(buffer) {
          for (var i = 0; i < this.data.length; i++) {
            // not JIS ...
            buffer.put(this.data.charCodeAt(i), 8);
          }
        };
        return QR8bitByte;
      }(); //---------------------------------------------------------------------
      // QRCode
      //---------------------------------------------------------------------
      var QRCode = exports('default', /*#__PURE__*/function () {
        function QRCode(typeNumber, errorCorrectLevel) {
          this.typeNumber = void 0;
          this.errorCorrectLevel = void 0;
          this.modules = void 0;
          this.moduleCount = void 0;
          this.dataCache = void 0;
          this.dataList = void 0;
          this.typeNumber = typeNumber;
          this.errorCorrectLevel = errorCorrectLevel;
          this.modules = [];
          this.moduleCount = 0;
          this.dataCache = null;
          this.dataList = [];
        }
        var _proto2 = QRCode.prototype;
        _proto2.addData = function addData(data) {
          var newData = new QR8bitByte(data);
          this.dataList.push(newData);
          this.dataCache = null;
        };
        _proto2.isDark = function isDark(row, col) {
          if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
            throw new Error(row + "," + col);
          }
          return this.modules[row][col];
        };
        _proto2.getModuleCount = function getModuleCount() {
          return this.moduleCount;
        };
        _proto2.make = function make() {
          // Calculate automatically typeNumber if provided is < 1
          if (this.typeNumber < 1) {
            var typeNumber = 1;
            for (typeNumber = 1; typeNumber < 40; typeNumber++) {
              var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
              var buffer = new QRBitBuffer();
              var totalDataCount = 0;
              for (var _iterator = _createForOfIteratorHelperLoose(rsBlocks), _step; !(_step = _iterator()).done;) {
                var rsBlock = _step.value;
                totalDataCount += rsBlock.dataCount;
              }
              for (var _iterator2 = _createForOfIteratorHelperLoose(this.dataList), _step2; !(_step2 = _iterator2()).done;) {
                var data = _step2.value;
                buffer.put(data.mode, 4);
                buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));
                data.write(buffer);
              }
              if (buffer.getLengthInBits() <= totalDataCount * 8) break;
            }
            this.typeNumber = typeNumber;
          }
          this.makeImpl(false, this.getBestMaskPattern());
        };
        _proto2.makeImpl = function makeImpl(test, maskPattern) {
          var _this = this;
          this.moduleCount = this.typeNumber * 4 + 17;
          this.modules = Array.from({
            length: this.moduleCount
          }, function () {
            return Array(_this.moduleCount).fill(null);
          });
          this.setupPositionProbePattern(0, 0);
          this.setupPositionProbePattern(this.moduleCount - 7, 0);
          this.setupPositionProbePattern(0, this.moduleCount - 7);
          this.setupPositionAdjustPattern();
          this.setupTimingPattern();
          this.setupTypeInfo(test, maskPattern);
          if (this.typeNumber >= 7) {
            this.setupTypeNumber(test);
          }
          if (this.dataCache == null) {
            this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
          }
          this.mapData(this.dataCache, maskPattern);
        };
        _proto2.setupPositionProbePattern = function setupPositionProbePattern(row, col) {
          for (var r = -1; r <= 7; r++) {
            if (row + r <= -1 || this.moduleCount <= row + r) continue;
            for (var c = -1; c <= 7; c++) {
              if (col + c <= -1 || this.moduleCount <= col + c) continue;
              if (0 <= r && r <= 6 && (c === 0 || c === 6) || 0 <= c && c <= 6 && (r === 0 || r === 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {
                this.modules[row + r][col + c] = true;
              } else {
                this.modules[row + r][col + c] = false;
              }
            }
          }
        };
        _proto2.getBestMaskPattern = function getBestMaskPattern() {
          var minLostPoint = 0;
          var pattern = 0;
          for (var i = 0; i < 8; i++) {
            this.makeImpl(true, i);
            var lostPoint = QRUtil.getLostPoint(this);
            if (i === 0 || minLostPoint > lostPoint) {
              minLostPoint = lostPoint;
              pattern = i;
            }
          }
          return pattern;
        };
        _proto2.createMovieClip = function createMovieClip(target_mc, instance_name, depth) {
          var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
          var cs = 1;
          this.make();
          for (var row = 0; row < this.modules.length; row++) {
            var y = row * cs;
            for (var col = 0; col < this.modules[row].length; col++) {
              var x = col * cs;
              var dark = this.modules[row][col];
              if (dark) {
                qr_mc.beginFill(0, 100);
                qr_mc.moveTo(x, y);
                qr_mc.lineTo(x + cs, y);
                qr_mc.lineTo(x + cs, y + cs);
                qr_mc.lineTo(x, y + cs);
                qr_mc.endFill();
              }
            }
          }
          return qr_mc;
        };
        _proto2.setupTimingPattern = function setupTimingPattern() {
          for (var r = 8; r < this.moduleCount - 8; r++) {
            if (this.modules[r][6] != null) continue;
            this.modules[r][6] = r % 2 === 0;
          }
          for (var c = 8; c < this.moduleCount - 8; c++) {
            if (this.modules[6][c] != null) continue;
            this.modules[6][c] = c % 2 === 0;
          }
        };
        _proto2.setupPositionAdjustPattern = function setupPositionAdjustPattern() {
          var pos = QRUtil.getPatternPosition(this.typeNumber);
          for (var _iterator3 = _createForOfIteratorHelperLoose(pos), _step3; !(_step3 = _iterator3()).done;) {
            var row = _step3.value;
            for (var _iterator4 = _createForOfIteratorHelperLoose(pos), _step4; !(_step4 = _iterator4()).done;) {
              var col = _step4.value;
              if (this.modules[row][col] != null) continue;
              for (var r = -2; r <= 2; r++) {
                for (var c = -2; c <= 2; c++) {
                  if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {
                    this.modules[row + r][col + c] = true;
                  } else {
                    this.modules[row + r][col + c] = false;
                  }
                }
              }
            }
          }
        };
        _proto2.setupTypeNumber = function setupTypeNumber(test) {
          var bits = QRUtil.getBCHTypeNumber(this.typeNumber);
          for (var i = 0; i < 18; i++) {
            var mod = !test && (bits >> i & 1) === 1;
            this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
          }
          for (var _i = 0; _i < 18; _i++) {
            var _mod = !test && (bits >> _i & 1) === 1;
            this.modules[_i % 3 + this.moduleCount - 8 - 3][Math.floor(_i / 3)] = _mod;
          }
        };
        _proto2.setupTypeInfo = function setupTypeInfo(test, maskPattern) {
          var data = this.errorCorrectLevel << 3 | maskPattern;
          var bits = QRUtil.getBCHTypeInfo(data);

          // vertical
          for (var i = 0; i < 15; i++) {
            var mod = !test && (bits >> i & 1) === 1;
            if (i < 6) {
              this.modules[i][8] = mod;
            } else if (i < 8) {
              this.modules[i + 1][8] = mod;
            } else {
              this.modules[this.moduleCount - 15 + i][8] = mod;
            }
          }

          // horizontal
          for (var _i2 = 0; _i2 < 15; _i2++) {
            var _mod2 = !test && (bits >> _i2 & 1) === 1;
            if (_i2 < 8) {
              this.modules[8][this.moduleCount - _i2 - 1] = _mod2;
            } else if (_i2 < 9) {
              this.modules[8][15 - _i2 - 1 + 1] = _mod2;
            } else {
              this.modules[8][15 - _i2 - 1] = _mod2;
            }
          }

          // fixed module
          this.modules[this.moduleCount - 8][8] = !test;
        };
        _proto2.mapData = function mapData(data, maskPattern) {
          var inc = -1;
          var row = this.moduleCount - 1;
          var bitIndex = 7;
          var byteIndex = 0;
          for (var col = this.moduleCount - 1; col > 0; col -= 2) {
            if (col === 6) col--;
            while (true) {
              for (var c = 0; c < 2; c++) {
                if (this.modules[row][col - c] == null) {
                  var dark = byteIndex < data.length ? (data[byteIndex] >>> bitIndex & 1) === 1 : false;
                  var mask = QRUtil.getMask(maskPattern, row, col - c);
                  if (mask) {
                    dark = !dark;
                  }
                  this.modules[row][col - c] = dark;
                  bitIndex--;
                  if (bitIndex === -1) {
                    byteIndex++;
                    bitIndex = 7;
                  }
                }
              }
              row += inc;
              if (row < 0 || this.moduleCount <= row) {
                row -= inc;
                inc = -inc;
                break;
              }
            }
          }
        };
        QRCode.createData = function createData(typeNumber, errorCorrectLevel, dataList) {
          var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
          var buffer = new QRBitBuffer();
          for (var _iterator5 = _createForOfIteratorHelperLoose(dataList), _step5; !(_step5 = _iterator5()).done;) {
            var data = _step5.value;
            buffer.put(data.mode, 4);
            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));
            data.write(buffer);
          }

          // Calculate max data
          var totalDataCount = 0;
          for (var _iterator6 = _createForOfIteratorHelperLoose(rsBlocks), _step6; !(_step6 = _iterator6()).done;) {
            var rsBlock = _step6.value;
            totalDataCount += rsBlock.dataCount;
          }
          if (buffer.getLengthInBits() > totalDataCount * 8) {
            throw new Error("code length overflow. (" + buffer.getLengthInBits() + " > " + totalDataCount * 8 + ")");
          }

          // End code
          if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
            buffer.put(0, 4);
          }

          // Padding
          while (buffer.getLengthInBits() % 8 !== 0) {
            buffer.putBit(false);
          }

          // Padding
          while (true) {
            if (buffer.getLengthInBits() >= totalDataCount * 8) break;
            buffer.put(QRCode.PAD0, 8);
            if (buffer.getLengthInBits() >= totalDataCount * 8) break;
            buffer.put(QRCode.PAD1, 8);
          }
          return QRCode.createBytes(buffer, rsBlocks);
        };
        QRCode.createBytes = function createBytes(buffer, rsBlocks) {
          var offset = 0;
          var maxDcCount = 0;
          var maxEcCount = 0;
          var dcdata = [];
          var ecdata = [];
          for (var _iterator7 = _createForOfIteratorHelperLoose(rsBlocks), _step7; !(_step7 = _iterator7()).done;) {
            var rsBlock = _step7.value;
            var dcCount = rsBlock.dataCount;
            var ecCount = rsBlock.totalCount - dcCount;
            maxDcCount = Math.max(maxDcCount, dcCount);
            maxEcCount = Math.max(maxEcCount, ecCount);
            dcdata.push(new Array(dcCount));
            for (var _i4 = 0; _i4 < dcdata[dcdata.length - 1].length; _i4++) {
              dcdata[dcdata.length - 1][_i4] = 0xff & buffer.buffer[_i4 + offset];
            }
            offset += dcCount;
            var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
            var rawPoly = new QRPolynomial(dcdata[dcdata.length - 1], rsPoly.getLength() - 1);
            var modPoly = rawPoly.mod(rsPoly);
            ecdata.push(new Array(rsPoly.getLength() - 1));
            for (var _i5 = 0; _i5 < ecdata[ecdata.length - 1].length; _i5++) {
              var modIndex = _i5 + modPoly.getLength() - ecdata[ecdata.length - 1].length;
              ecdata[ecdata.length - 1][_i5] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
            }
          }
          var totalCodeCount = rsBlocks.reduce(function (sum, rsBlock) {
            return sum + rsBlock.totalCount;
          }, 0);
          var data = [];
          var index = 0;
          for (var i = 0; i < maxDcCount; i++) {
            for (var _iterator8 = _createForOfIteratorHelperLoose(dcdata), _step8; !(_step8 = _iterator8()).done;) {
              var dc = _step8.value;
              if (i < dc.length) {
                data[index++] = dc[i];
              }
            }
          }
          for (var _i3 = 0; _i3 < maxEcCount; _i3++) {
            for (var _iterator9 = _createForOfIteratorHelperLoose(ecdata), _step9; !(_step9 = _iterator9()).done;) {
              var ec = _step9.value;
              if (_i3 < ec.length) {
                data[index++] = ec[_i3];
              }
            }
          }
          return data;
        };
        return QRCode;
      }()); //---------------------------------------------------------------------
      // QRUtil
      //---------------------------------------------------------------------
      QRCode.PAD0 = 0xec;
      QRCode.PAD1 = 0x11;
      var QRUtil = /*#__PURE__*/function () {
        function QRUtil() {}
        QRUtil.getBCHTypeInfo = function getBCHTypeInfo(data) {
          var d = data << 10;
          while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
            d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);
          }
          return (data << 10 | d) ^ QRUtil.G15_MASK;
        };
        QRUtil.getBCHTypeNumber = function getBCHTypeNumber(data) {
          var d = data << 12;
          while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
            d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);
          }
          return data << 12 | d;
        };
        QRUtil.getBCHDigit = function getBCHDigit(data) {
          var digit = 0;
          while (data !== 0) {
            digit++;
            data >>>= 1;
          }
          return digit;
        };
        QRUtil.getPatternPosition = function getPatternPosition(typeNumber) {
          return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
        };
        QRUtil.getMask = function getMask(maskPattern, i, j) {
          switch (maskPattern) {
            case QRMaskPattern.PATTERN000:
              return (i + j) % 2 === 0;
            case QRMaskPattern.PATTERN001:
              return i % 2 === 0;
            case QRMaskPattern.PATTERN010:
              return j % 3 === 0;
            case QRMaskPattern.PATTERN011:
              return (i + j) % 3 === 0;
            case QRMaskPattern.PATTERN100:
              return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;
            case QRMaskPattern.PATTERN101:
              return i * j % 2 + i * j % 3 === 0;
            case QRMaskPattern.PATTERN110:
              return (i * j % 2 + i * j % 3) % 2 === 0;
            case QRMaskPattern.PATTERN111:
              return (i * j % 3 + (i + j) % 2) % 2 === 0;
            default:
              throw new Error("bad maskPattern: " + maskPattern);
          }
        };
        QRUtil.getErrorCorrectPolynomial = function getErrorCorrectPolynomial(errorCorrectLength) {
          var a = new QRPolynomial([1], 0);
          for (var i = 0; i < errorCorrectLength; i++) {
            a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));
          }
          return a;
        };
        QRUtil.getLengthInBits = function getLengthInBits(mode, type) {
          if (1 <= type && type < 10) {
            switch (mode) {
              case QRMode.MODE_NUMBER:
                return 10;
              case QRMode.MODE_ALPHA_NUM:
                return 9;
              case QRMode.MODE_8BIT_BYTE:
                return 8;
              case QRMode.MODE_KANJI:
                return 8;
              default:
                throw new Error("mode: " + mode);
            }
          } else if (type < 27) {
            switch (mode) {
              case QRMode.MODE_NUMBER:
                return 12;
              case QRMode.MODE_ALPHA_NUM:
                return 11;
              case QRMode.MODE_8BIT_BYTE:
                return 16;
              case QRMode.MODE_KANJI:
                return 10;
              default:
                throw new Error("mode: " + mode);
            }
          } else if (type < 41) {
            switch (mode) {
              case QRMode.MODE_NUMBER:
                return 14;
              case QRMode.MODE_ALPHA_NUM:
                return 13;
              case QRMode.MODE_8BIT_BYTE:
                return 16;
              case QRMode.MODE_KANJI:
                return 12;
              default:
                throw new Error("mode: " + mode);
            }
          } else {
            throw new Error("type: " + type);
          }
        };
        QRUtil.getLostPoint = function getLostPoint(qrCode) {
          var moduleCount = qrCode.getModuleCount();
          var lostPoint = 0;

          // LEVEL1
          for (var row = 0; row < moduleCount; row++) {
            for (var col = 0; col < moduleCount; col++) {
              var sameCount = 0;
              var dark = qrCode.isDark(row, col);
              for (var r = -1; r <= 1; r++) {
                if (row + r < 0 || moduleCount <= row + r) continue;
                for (var c = -1; c <= 1; c++) {
                  if (col + c < 0 || moduleCount <= col + c) continue;
                  if (r === 0 && c === 0) continue;
                  if (dark === qrCode.isDark(row + r, col + c)) {
                    sameCount++;
                  }
                }
              }
              if (sameCount > 5) {
                lostPoint += 3 + sameCount - 5;
              }
            }
          }

          // LEVEL2
          for (var _row = 0; _row < moduleCount - 1; _row++) {
            for (var _col = 0; _col < moduleCount - 1; _col++) {
              var count = 0;
              if (qrCode.isDark(_row, _col)) count++;
              if (qrCode.isDark(_row + 1, _col)) count++;
              if (qrCode.isDark(_row, _col + 1)) count++;
              if (qrCode.isDark(_row + 1, _col + 1)) count++;
              if (count === 0 || count === 4) {
                lostPoint += 3;
              }
            }
          }

          // LEVEL3
          for (var _row2 = 0; _row2 < moduleCount; _row2++) {
            for (var _col2 = 0; _col2 < moduleCount - 6; _col2++) {
              if (qrCode.isDark(_row2, _col2) && !qrCode.isDark(_row2, _col2 + 1) && qrCode.isDark(_row2, _col2 + 2) && qrCode.isDark(_row2, _col2 + 3) && qrCode.isDark(_row2, _col2 + 4) && !qrCode.isDark(_row2, _col2 + 5) && qrCode.isDark(_row2, _col2 + 6)) {
                lostPoint += 40;
              }
            }
          }
          for (var _col3 = 0; _col3 < moduleCount; _col3++) {
            for (var _row3 = 0; _row3 < moduleCount - 6; _row3++) {
              if (qrCode.isDark(_row3, _col3) && !qrCode.isDark(_row3 + 1, _col3) && qrCode.isDark(_row3 + 2, _col3) && qrCode.isDark(_row3 + 3, _col3) && qrCode.isDark(_row3 + 4, _col3) && !qrCode.isDark(_row3 + 5, _col3) && qrCode.isDark(_row3 + 6, _col3)) {
                lostPoint += 40;
              }
            }
          }

          // LEVEL4
          var darkCount = 0;
          for (var _col4 = 0; _col4 < moduleCount; _col4++) {
            for (var _row4 = 0; _row4 < moduleCount; _row4++) {
              if (qrCode.isDark(_row4, _col4)) {
                darkCount++;
              }
            }
          }
          var ratio = Math.abs(100 * darkCount / (moduleCount * moduleCount) - 50) / 5;
          lostPoint += ratio * 10;
          return lostPoint;
        };
        return QRUtil;
      }(); //---------------------------------------------------------------------
      // QRMath
      //---------------------------------------------------------------------
      QRUtil.PATTERN_POSITION_TABLE = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]];
      QRUtil.G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
      QRUtil.G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
      QRUtil.G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
      var QRMath = /*#__PURE__*/function () {
        function QRMath() {}
        QRMath.glog = function glog(n) {
          if (n < 1) {
            throw new Error("glog(" + n + ")");
          }
          return QRMath.LOG_TABLE[n];
        };
        QRMath.gexp = function gexp(n) {
          while (n < 0) {
            n += 255;
          }
          while (n >= 256) {
            n -= 255;
          }
          return QRMath.EXP_TABLE[n];
        };
        return QRMath;
      }(); // Initialize EXP_TABLE and LOG_TABLE
      QRMath.EXP_TABLE = new Array(256);
      QRMath.LOG_TABLE = new Array(256);
      for (var i = 0; i < 8; i++) {
        QRMath.EXP_TABLE[i] = 1 << i;
      }
      for (var _i6 = 8; _i6 < 256; _i6++) {
        QRMath.EXP_TABLE[_i6] = QRMath.EXP_TABLE[_i6 - 4] ^ QRMath.EXP_TABLE[_i6 - 5] ^ QRMath.EXP_TABLE[_i6 - 6] ^ QRMath.EXP_TABLE[_i6 - 8];
      }
      for (var _i7 = 0; _i7 < 255; _i7++) {
        QRMath.LOG_TABLE[QRMath.EXP_TABLE[_i7]] = _i7;
      }

      //---------------------------------------------------------------------
      // QRPolynomial
      //---------------------------------------------------------------------
      var QRPolynomial = /*#__PURE__*/function () {
        function QRPolynomial(num, shift) {
          this.num = void 0;
          if (num.length === undefined) {
            throw new Error(num.length + "/" + shift);
          }
          var offset = 0;
          while (offset < num.length && num[offset] === 0) {
            offset++;
          }
          this.num = new Array(num.length - offset + shift);
          for (var _i8 = 0; _i8 < num.length - offset; _i8++) {
            this.num[_i8] = num[_i8 + offset];
          }
        }
        var _proto3 = QRPolynomial.prototype;
        _proto3.get = function get(index) {
          return this.num[index];
        };
        _proto3.getLength = function getLength() {
          return this.num.length;
        };
        _proto3.multiply = function multiply(e) {
          var num = new Array(this.getLength() + e.getLength() - 1);
          for (var _i9 = 0; _i9 < this.getLength(); _i9++) {
            for (var j = 0; j < e.getLength(); j++) {
              num[_i9 + j] ^= QRMath.gexp(QRMath.glog(this.get(_i9)) + QRMath.glog(e.get(j)));
            }
          }
          return new QRPolynomial(num, 0);
        };
        _proto3.mod = function mod(e) {
          if (this.getLength() - e.getLength() < 0) {
            return this;
          }
          var ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));
          var num = new Array(this.getLength());
          for (var _i10 = 0; _i10 < this.getLength(); _i10++) {
            num[_i10] = this.get(_i10);
          }
          for (var _i11 = 0; _i11 < e.getLength(); _i11++) {
            num[_i11] ^= QRMath.gexp(QRMath.glog(e.get(_i11)) + ratio);
          }

          // recursive call
          return new QRPolynomial(num, 0).mod(e);
        };
        return QRPolynomial;
      }(); //---------------------------------------------------------------------
      // QRRSBlock
      //---------------------------------------------------------------------
      var QRRSBlock = /*#__PURE__*/function () {
        function QRRSBlock(totalCount, dataCount) {
          this.totalCount = void 0;
          this.dataCount = void 0;
          this.totalCount = totalCount;
          this.dataCount = dataCount;
        }
        QRRSBlock.getRSBlocks = function getRSBlocks(typeNumber, errorCorrectLevel) {
          var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
          if (!rsBlock) {
            throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
          }
          var length = rsBlock.length / 3;
          var list = [];
          for (var _i12 = 0; _i12 < length; _i12++) {
            var count = rsBlock[_i12 * 3 + 0];
            var totalCount = rsBlock[_i12 * 3 + 1];
            var dataCount = rsBlock[_i12 * 3 + 2];
            for (var j = 0; j < count; j++) {
              list.push(new QRRSBlock(totalCount, dataCount));
            }
          }
          return list;
        };
        QRRSBlock.getRsBlockTable = function getRsBlockTable(typeNumber, errorCorrectLevel) {
          switch (errorCorrectLevel) {
            case QRErrorCorrectLevel.L:
              return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
            case QRErrorCorrectLevel.M:
              return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
            case QRErrorCorrectLevel.Q:
              return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
            case QRErrorCorrectLevel.H:
              return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
            default:
              return undefined;
          }
        };
        return QRRSBlock;
      }(); //---------------------------------------------------------------------
      // QRBitBuffer
      //---------------------------------------------------------------------
      QRRSBlock.RS_BLOCK_TABLE = [
      // L
      // M
      // Q
      // H
      [1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];
      var QRBitBuffer = /*#__PURE__*/function () {
        function QRBitBuffer() {
          this.buffer = void 0;
          this.length = void 0;
          this.buffer = [];
          this.length = 0;
        }
        var _proto4 = QRBitBuffer.prototype;
        _proto4.get = function get(index) {
          var bufIndex = Math.floor(index / 8);
          return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
        };
        _proto4.put = function put(num, length) {
          for (var _i13 = 0; _i13 < length; _i13++) {
            this.putBit((num >>> length - _i13 - 1 & 1) === 1);
          }
        };
        _proto4.getLengthInBits = function getLengthInBits() {
          return this.length;
        };
        _proto4.putBit = function putBit(bit) {
          var bufIndex = Math.floor(this.length / 8);
          if (this.buffer.length <= bufIndex) {
            this.buffer.push(0);
          }
          if (bit) {
            this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
          }
          this.length++;
        };
        return QRBitBuffer;
      }();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/QRCodeGenerator.ts", ['cc', './QRCode.ts'], function (exports) {
  var cclegacy, Color, QRCode;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
    }, function (module) {
      QRCode = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "18a47GDIbRCKIFVKnCg60VW", "QRCodeGenerator", undefined);
      var QRCodeGenerator = exports('QRCodeGenerator', /*#__PURE__*/function () {
        function QRCodeGenerator(view, size, errorCorrectLevel) {
          this.qr = void 0;
          this.view = view;
          this.size = size;
          this.qr = new QRCode(-1, errorCorrectLevel);
          this.view = view;
          this.size = size;
        }
        QRCodeGenerator.create = function create(view, size, errorCorrectLevel) {
          return new QRCodeGenerator(view, size, errorCorrectLevel);
        };
        var _proto = QRCodeGenerator.prototype;
        _proto.generateQRCode = function generateQRCode(data) {
          this.qr.addData(data);
          this.qr.make();
          var moduleCount = this.qr.getModuleCount();
          var tileSize = this.size / moduleCount;

          // 清除之前的图形
          this.view.clearGraphics();

          // 设置轴心
          this.view.setPivot(0, 1);

          // 绘制白色背景
          this.view._content.fillColor = Color.WHITE.clone();
          this.view._content.rect(0, 0, this.size, this.size);
          this.view._content.fill();

          // 绘制二维码
          for (var row = 0; row < moduleCount; row++) {
            for (var col = 0; col < moduleCount; col++) {
              if (this.qr.isDark(row, col)) {
                var x = col * tileSize;
                var y = row * tileSize;
                this.view._content.fillColor = Color.BLACK.clone();
                this.view._content.rect(x, y, tileSize, tileSize);
                this.view._content.fill();
              }
            }
          }
        };
        return QRCodeGenerator;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RedHotData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataBinder.ts', './GameConst.ts', './GameDecorators.ts', './HallData.ts', './NoticeData.ts', './mobx.ts'], function (exports) {
  var _createClass, cclegacy, GameConst, GameDataClass, HallData, NoticeData, makeAutoObservable;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      GameDataClass = module.GameDataClass;
    }, function (module) {
      HallData = module.HallData;
    }, function (module) {
      NoticeData = module.default;
    }, function (module) {
      makeAutoObservable = module.makeAutoObservable;
    }],
    execute: function () {
      var _class, _class2;
      cclegacy._RF.push({}, "4d0cb35IixKtJ4Z92KPXlse", "RedHotData", undefined);
      var RedHotData = exports('default', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function RedHotData() {
          //邮件红点
          this._noticeCnt = 0;
          //我的游戏红点
          this._bMyGameRedHot = false;
          makeAutoObservable(this);
        }
        var _proto = RedHotData.prototype;
        _proto.checkNoticeCnt = function checkNoticeCnt() {
          var cnt = 0;
          var _systemMsgs = NoticeData.inst.getSysMsgList();
          for (var idx = 0; idx < _systemMsgs.length; idx++) {
            var msg = _systemMsgs[idx];
            if (!msg.isRead) {
              cnt += 1;
            }
          }
          var clubid = 0; //目前没有俱乐部
          var _clubMsgs = NoticeData.inst.getClubMsgListBycid(clubid);
          _clubMsgs && _clubMsgs.forEach(function (msg, key) {
            if (msg.isRead) {
              cnt += 1;
            }
          });
          if (cnt != this._noticeCnt) {
            this._noticeCnt = cnt;
          }
        };
        _proto.checkMyGameRedHot = function checkMyGameRedHot() {
          var data = HallData.inst.getHallInfoByPid(GameConst.EHALL_PAGE_TYPE.MY_GAGES);
          var roomlist = data.roomList;
          if (!roomlist || roomlist.length <= 0) this._bMyGameRedHot = false;
          for (var idx = 0; idx < data.roomList.length; idx++) {
            var roomitem = data.roomList[idx];
            if (roomitem.roomType == GameConst.ERoomType.mtt && roomitem.mtt && roomitem.mtt.isEntrance == 1) {
              var status = roomitem.mtt.buttonState;
              var timeInfo = roomitem.mtt.time;
              if (status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_ENTER || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_RE_ENTER || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_DELAY_ENTER || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_WAITING && timeInfo.type == 2 && timeInfo.days == 3) {
                this._bMyGameRedHot = true;
                break;
              }
            }
          }
        };
        _createClass(RedHotData, [{
          key: "noticeCnt",
          get: function get() {
            return this._noticeCnt;
          }
        }, {
          key: "mygameRedHot",
          get: function get() {
            return this._bMyGameRedHot;
          }
        }], [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return RedHotData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoleData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameConst.ts', './GameDecorators.ts', './HallData.ts', './Utils.ts', './mobx.ts'], function (exports) {
  var _createClass, cclegacy, GameConst, GameDataClass, HallData, Utils, makeAutoObservable;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      GameDataClass = module.GameDataClass;
    }, function (module) {
      HallData = module.HallData;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      makeAutoObservable = module.makeAutoObservable;
    }],
    execute: function () {
      var _class, _class2;
      cclegacy._RF.push({}, "b7316PUqPhF0JstZxr76kFr", "RoleData", undefined);

      // vip等级（0无,1银，2黑，3紫）
      var VIP_LEVEL = exports('VIP_LEVEL', /*#__PURE__*/function (VIP_LEVEL) {
        VIP_LEVEL[VIP_LEVEL["none"] = 0] = "none";
        VIP_LEVEL[VIP_LEVEL["silver"] = 1] = "silver";
        VIP_LEVEL[VIP_LEVEL["black"] = 2] = "black";
        VIP_LEVEL[VIP_LEVEL["purple"] = 3] = "purple";
        return VIP_LEVEL;
      }({}));
      var RoleData = exports('RoleData', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function RoleData() {
          this.playerID = void 0;
          this.sessionkey = void 0;
          this.realIP = void 0;
          this.bindEmail = void 0;
          this.nick = void 0;
          this.avatar = void 0;
          this.vip = void 0;
          this.vipExprie = void 0;
          this.chip = void 0;
          this.diamonds = void 0;
          this.signature = void 0;
          this.province = void 0;
          this.email = void 0;
          this.sex = void 0;
          this.firstModifyName = void 0;
          this.guide = void 0;
          this.regBonus = void 0;
          this.itemList = void 0;
          this.vipProp = void 0;
          this.vipTimeBank = void 0;
          this.createdClub = void 0;
          this.report = void 0;
          this.usedHeads = void 0;
          this.hideProfit = void 0;
          this.autoBuyin = void 0;
          this.vipDays = void 0;
          this.cash = void 0;
          this.timeBankNum = void 0;
          this.rabbitHuntingNum = void 0;
          this.clubFreeCount = void 0;
          this.clubCreateDiamond = void 0;
          this.diamondToChip = void 0;
          this.changeNick = void 0;
          this.roomProp = void 0;
          this.dataexportClubdata = void 0;
          this.dataexportTransaction = void 0;
          this.dataexportDiamond = void 0;
          this.feeMttDiamond = void 0;
          this.level = void 0;
          this.exp = void 0;
          // 自定义数据
          this.myClubCount = 0;
          // 我的俱乐部个数
          this.myJoinedClubCount = 0;
          // 我加入的俱乐部个数
          this.regBonusDiamond = 0;
          // 注册奖励领取到的钻石数
          this.regBonusChips = 0;
          // 注册奖励领取到的金币数
          this.hallBackpackExist = false;
          makeAutoObservable(this);
        }
        var _proto = RoleData.prototype;
        _proto.setHttpLoginResult = function setHttpLoginResult(params) {
          this.playerID = params.playerid;
          this.sessionkey = params.sessionkey;
          this.realIP = params.real_ip;
          this.bindEmail = params.bind_email;
        };
        _proto.setRoleInfo = function setRoleInfo(params) {
          this.playerID = params.role.playerid;
          this.nick = params.role.nick;
          this.avatar = params.role.avatar;
          this.vip = params.role.vip;
          this.vipExprie = params.role.vipExprie;
          this.chip = Utils.formatDoubleValue(params.role.chip);
          this.diamonds = params.role.diamonds;
          this.signature = params.role.signature;
          this.province = params.role.province;
          this.email = params.role.email;
          this.sex = params.role.sex;
          this.firstModifyName = params.role.firstModifyName;
          this.guide = params.role.guide;
          this.regBonus = params.role.regBonus;
          this.itemList = params.role.itemList;
          this.vipProp = params.role.vipProp;
          this.vipTimeBank = params.role.vipTimeBank;
          this.createdClub = params.role.createdClub;
          this.report = params.role.report;
          this.usedHeads = params.role.usedHeads; // 历史头像
          this.hideProfit = params.role.hideProfit;
          this.autoBuyin = params.role.autoBuyin;
          this.cash = params.role.cash / 100;
          this.exp = params.role.exp;
          this.level = params.role.level || 1;
          this.updateVipDays();
          this.updateProp(this.itemList);
        };
        _proto.setGameConfig = function setGameConfig(params) {
          this.clubFreeCount = params.clubFreeCount;
          this.clubCreateDiamond = params.clubCreateDiamond;
          this.diamondToChip = params.diamondToChip;
          this.changeNick = params.changeNick;
          this.roomProp = params.roomProp;
          this.dataexportClubdata = params.dataexportClubdata;
          this.dataexportTransaction = params.dataexportTransaction;
          this.dataexportDiamond = params.dataexportDiamond;
          this.feeMttDiamond = params.feeMttDiamond;
        };
        _proto.setVipExpire = function setVipExpire(value) {
          this.vipExprie = value;
          this.updateVipDays();
        };
        _proto.updateVipDays = function updateVipDays() {
          this.vipDays = Math.max(Math.ceil((this.vipExprie - Utils.curServerTimestamp / 1000 - 5) / GameConst.SECONDS_OF_DAY), 0);
        };
        _proto.updateProp = function updateProp(data) {
          if (Array.isArray(data)) {
            for (var i = 0; i < data.length; i++) {
              var item = data[i];
              if (item.itemid == GameConst.EPropItemID.TIEM_BANK_ITEM_ID) {
                this.timeBankNum = item.num;
              } else if (item.itemid == GameConst.EPropItemID.RABBIT_HUNTING_ITEM_ID) {
                this.rabbitHuntingNum = item.num;
              }
            }
          } else {
            if (data.itemid == GameConst.EPropItemID.TIEM_BANK_ITEM_ID) {
              this.timeBankNum = data.num;
            } else if (data.itemid == GameConst.EPropItemID.RABBIT_HUNTING_ITEM_ID) {
              this.rabbitHuntingNum = data.num;
            }
          }
        };
        _proto.setNick = function setNick(name) {
          this.nick = name;
        };
        _proto.setAvatar = function setAvatar(avatar) {
          this.avatar = avatar;
        };
        _proto.setVip = function setVip(vip) {
          this.vip = vip;
        };
        _proto.isVip = function isVip(vip, ignoreExpired) {
          if (vip === void 0) {
            vip = 1;
          }
          if (ignoreExpired === void 0) {
            ignoreExpired = false;
          }
          if (!this.vip) return false;
          if (ignoreExpired) {
            return this.vip >= vip;
          } else {
            return this.vip >= vip && this.vipExprie * 1000 > Utils.curServerTimestamp;
          }
        };
        _proto.setChip = function setChip(chip) {
          this.chip = Utils.formatDoubleValue(chip);
        };
        _proto.setCash = function setCash(cash) {
          this.cash = Utils.formatDoubleValue(cash) / 100;
        };
        _proto.setDiamonds = function setDiamonds(diamonds) {
          this.diamonds = diamonds;
        };
        _proto.setSex = function setSex(sex) {
          this.sex = sex;
        };
        _proto.setEmail = function setEmail(email) {
          this.email = email;
        };
        _proto.setProvince = function setProvince(province) {
          this.province = province;
        };
        _proto.setSignature = function setSignature(signature) {
          this.signature = signature;
        };
        _proto.isFirstChangeName = function isFirstChangeName() {
          return this.firstModifyName == 0;
        };
        _proto.setRegBonus = function setRegBonus(enable) {
          if (enable) {
            this.regBonus = 0;
          } else {
            this.regBonus = 1;
          }
        };
        _proto.isRegBonusEnabled = function isRegBonusEnabled() {
          return this.regBonus == 0;
        };
        _proto.setAutoBuyin = function setAutoBuyin(obj) {
          this.autoBuyin = obj;
        };
        _proto.setVipProp = function setVipProp(vipProp) {
          this.vipProp = vipProp;
        };
        _proto.setVipTimeBank = function setVipTimeBank(vipTimeBank) {
          this.vipTimeBank = vipTimeBank;
        };
        _proto.setExp = function setExp(exp) {
          this.exp = exp;
        };
        _proto.setLevel = function setLevel(level) {
          this.level = level;
          HallData.inst.updataCurTGPConfigByLevel(this.level);
        };
        // 大厅背包是否有东西
        _proto.setMyClubCount = function setMyClubCount(count) {
          this.myClubCount = count;
          if (count > 0) {
            this.createdClub = 1;
          }
        };
        _proto.setMyJoinedClubCount = function setMyJoinedClubCount(count) {
          this.myJoinedClubCount = count;
        };
        _proto.hasJoinedClub = function hasJoinedClub() {
          return this.myJoinedClubCount > 0;
        };
        _proto.setRegBonusValue = function setRegBonusValue(diamond, chip) {
          this.regBonusDiamond = diamond;
          this.regBonusChips = chip;
        };
        _proto.setHallBackpackExist = function setHallBackpackExist(exist) {
          this.hallBackpackExist = exist;
        };
        _proto.reset = function reset() {};
        _createClass(RoleData, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return RoleData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoleProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './CocosDevKit.ts', './GameDecorators.ts', './GameNetProxyBase.ts', './RoleData.ts', './EventReporter.ts', './GameConfig.ts', './gameproto.js', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, NetProxyClass, MarkForNetEventListener, GameNetProxyBase, RoleData, EventReporter, GameConfig, _cjsExports, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      NetProxyClass = module.NetProxyClass;
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _class3;
      cclegacy._RF.push({}, "e135egUaTRDjboAIJntd00Q", "RoleProxy", undefined);
      var RoleProxy = exports('RoleProxy', (_dec = NetProxyClass(9), _dec2 = MarkForNetEventListener(_cjsExports.role.MsgRoleCashChangeCast.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.role.MsgRoleChipChangeCast.ProtocolID), _dec4 = MarkForNetEventListener(_cjsExports.role.MsgRoleDiamondChangeCast.ProtocolID), _dec5 = MarkForNetEventListener(_cjsExports.role.MsgRoleExpLevelChangeCast.ProtocolID), _dec6 = MarkForNetEventListener(_cjsExports.role.MsgBackPackCast.ProtocolID), _dec7 = MarkForNetEventListener(_cjsExports.role.MsgVipFreeChangeCast.ProtocolID), _dec8 = MarkForNetEventListener(_cjsExports.role.MsgItemsChangeCast.ProtocolID), _dec9 = MarkForNetEventListener(_cjsExports.role.MsgRoleVipLevelChangeCast.ProtocolID), _dec10 = MarkForNetEventListener(_cjsExports.role.MsgVipStateChangeCast.ProtocolID), _dec11 = MarkForNetEventListener(_cjsExports.role.MsgRegBonusCast.ProtocolID), _dec12 = MarkForNetEventListener(_cjsExports.role.MsgClubTableCountCast.ProtocolID), _dec13 = MarkForNetEventListener(_cjsExports.role.MsgRoleInfoRsp.ProtocolID), _dec14 = MarkForNetEventListener(_cjsExports.role.MsgGetGameConfigRsp.ProtocolID), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(RoleProxy, _GameNetProxyBase);
        function RoleProxy() {
          return _GameNetProxyBase.apply(this, arguments) || this;
        }
        var _proto = RoleProxy.prototype;
        _proto.prepareRequest = function prepareRequest() {
          Log.info.log('RoleProxy', 'prepareRequest');
          return Promise.all([this.prepareRoleInfo(), this.prepareGameConfig()]);
        }

        /**
         * 玩家现金变动通知
         * @param netdata
         */;
        _proto.onMsgRoleCashChangeCast = function onMsgRoleCashChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgRoleCashChangeCast);
          if (RoleData.inst.playerID == info.playerid) {
            RoleData.inst.setCash(info.cash);
          }
        }

        /**
         * 金币、筹码变化通知
         * @param netdata
         */;
        _proto.onMsgRoleChipChangeCast = function onMsgRoleChipChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgRoleChipChangeCast);
          if (RoleData.inst.playerID == info.playerid) {
            var clubID = info.clubid;
            if (clubID && clubID > 0) ;else {
              RoleData.inst.setChip(info.chip);
            }
          }
        }

        /**
         * 钻石变化通知
         * @param netdata
         */;
        _proto.onMsgRoleDiamondChangeCast = function onMsgRoleDiamondChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgRoleDiamondChangeCast);
          if (RoleData.inst.playerID == info.playerid) {
            RoleData.inst.setDiamonds(info.diamond);
          }
        }

        /**
         * 玩家经验等级变动通知
         * @param netdata
         */;
        _proto.onMsgRoleExpLevelChangeCast = function onMsgRoleExpLevelChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgRoleExpLevelChangeCast);
          if (RoleData.inst.playerID == info.playerid) {
            RoleData.inst.setExp(info.exp);
            RoleData.inst.setLevel(info.level);
          }
        }

        /**
         * 玩家大厅背包变动(广播)
         * @param netdata
         */;
        _proto.onMsgBackPackCast = function onMsgBackPackCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgBackPackCast);
          RoleData.inst.setHallBackpackExist(info.ifHave);
        }

        /**
         * VIP免费道具变化
         * @param netdata
         */;
        _proto.onMsgVipFreeChangeCast = function onMsgVipFreeChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgVipFreeChangeCast);
          RoleData.inst.setVipProp(info.vipProp);
          RoleData.inst.setVipTimeBank(info.vipTimeBank);
        }

        /**
         * 道具数量变化
         * @param netdata
         */;
        _proto.onMsgItemsChangeCast = function onMsgItemsChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgItemsChangeCast);
          RoleData.inst.updateProp(info);
        }

        /**
         * 玩家VIP等级变动(广播)
         * @param netdata
         */;
        _proto.onMsgRoleVipLevelChangeCast = function onMsgRoleVipLevelChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgRoleVipLevelChangeCast);
          if (RoleData.inst.playerID == info.playerid) {
            RoleData.inst.setVip(info.vip);
          }
        }

        /**
         * 玩家VIP状态变动(广播)
         * @param netdata
         */;
        _proto.onMsgVipStateChangeCast = function onMsgVipStateChangeCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgVipStateChangeCast);
          if (info.vipLevel) {
            RoleData.inst.setVip(info.vipLevel);
          }
          if (info.vipExprie) {
            RoleData.inst.setVipExpire(info.vipExprie);
          }
        }

        /**
         * 注册奖励
         * @param netdata
         */;
        _proto.onMsgRegBonusCast = function onMsgRegBonusCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgRegBonusCast);
          RoleData.inst.setRegBonusValue(info.diamond, info.chips);
        }

        /**
         * 玩家俱乐部手数变化
         * @param netdata
         */;
        _proto.MsgClubTableCountCast = function MsgClubTableCountCast(netdata) {
          var info = netdata.getData(_cjsExports.role.MsgClubTableCountCast);
          if (RoleData.inst.playerID == info.playerid) ;
        };
        _proto.prepareRoleInfo = function prepareRoleInfo() {
          var _this = this;
          Log.debug.log('RoleProxy', 'prepareRoleInfo');
          return new Promise(function (resolve) {
            _this.send(_cjsExports.role.MsgRoleInfo.ProtocolID, _cjsExports.role.MsgRoleInfo.encode({
              playerid: 0
            }).finish(), resolve);
          });
        };
        _proto.reqRoleInfo = function reqRoleInfo(playerID) {
          Log.info.log('RoleProxy', 'reqRoleInfo', RoleData.inst.playerID);
          if (RoleData.inst.playerID == playerID) {
            // 如果是查询当前玩家的信息必须要传 0
            playerID = 0;
          }
          this.send(_cjsExports.role.MsgRoleInfo.ProtocolID, _cjsExports.role.MsgRoleInfo.encode({
            playerid: playerID
          }).finish());
        };
        _proto.onRoleInfoRsp = function onRoleInfoRsp(netdata) {
          var msg = netdata.getData(_cjsExports.role.MsgRoleInfoRsp);
          Log.info.log('RoleProxy', 'onRoleInfoRsp', msg);
          if (msg.playerid == 0 || msg.playerid == RoleData.inst.playerID) {
            // RoleData 只存当前玩家的信息，playerid 为 0 表示请求的是当前玩家的信息
            RoleData.inst.setRoleInfo(msg);
            EventReporter.setPlayer(msg.role.playerid, msg.role.nick);
          }
        };
        _proto.prepareGameConfig = function prepareGameConfig() {
          var _this2 = this;
          Log.debug.log('RoleProxy', 'prepareGameConfig');
          return new Promise(function (resolve) {
            _this2.send(_cjsExports.role.MsgGetGameConfig.ProtocolID, undefined, resolve);
          });
        };
        _proto.onGetGameConfigRsp = function onGetGameConfigRsp(netdata) {
          var msg = netdata.getData(_cjsExports.role.MsgGetGameConfigRsp);
          Log.info.log('RoleProxy', 'onGetGameConfigRsp', msg);
          RoleData.inst.setGameConfig(msg);
          // this.countloginRoleRsp();
        };

        _proto.onMsgSetRoleInfo = function onMsgSetRoleInfo(name, icon) {
          var info = {
            avatar: icon,
            email: RoleData.inst.email,
            sex: RoleData.inst.sex,
            name: name,
            province: RoleData.inst.province,
            signature: RoleData.inst.signature,
            channel: GameConfig.channel
          };
          this.send(_cjsExports.role.MsgSetRoleInfo.ProtocolID, _cjsExports.role.MsgSetRoleInfo.encode(info).finish(), this.onMsgSetRoleInfoRsp.bind(this, name, icon));
        };
        _proto.onMsgSetRoleInfoRsp = function onMsgSetRoleInfoRsp(name, icon, netdata) {
          var msg = netdata.getData(_cjsExports.role.MsgSetRoleInfoRsp);
          Log.info.log('RoleProxy', 'onMsgSetRoleInfoRsp', msg);
          if (msg.result == 0) {
            RoleData.inst.setNick(name);
            RoleData.inst.setAvatar(icon);
          }
        }

        //获取玩家头像开关
        ;

        _proto.getMsgChangeAvatarSwitch = function getMsgChangeAvatarSwitch() {
          this.send(_cjsExports.role.MsgChangeAvatarSwitch.ProtocolID, undefined);
        };
        _createClass(RoleProxy, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return RoleProxy;
      }(GameNetProxyBase), _class3._inst = void 0, _class3), (_applyDecoratedDescriptor(_class2.prototype, "onMsgRoleCashChangeCast", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgRoleCashChangeCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgRoleChipChangeCast", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgRoleChipChangeCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgRoleDiamondChangeCast", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgRoleDiamondChangeCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgRoleExpLevelChangeCast", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgRoleExpLevelChangeCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgBackPackCast", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgBackPackCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgVipFreeChangeCast", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgVipFreeChangeCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgItemsChangeCast", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgItemsChangeCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgRoleVipLevelChangeCast", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgRoleVipLevelChangeCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgVipStateChangeCast", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgVipStateChangeCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgRegBonusCast", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgRegBonusCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "MsgClubTableCountCast", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "MsgClubTableCountCast"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRoleInfoRsp", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "onRoleInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onGetGameConfigRsp", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "onGetGameConfigRsp"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoomItemMTT.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameConst.ts', './Utils.ts', './LanguageManage.ts', './LobbyConst.ts', './MttData.ts', './MttProxy.ts', './GameDecorators.ts', './CocosDevKit.ts', './PageEvent.ts', './UI_RoomItemMTT.ts', './gameproto.js', './NetNodeManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, color, Node, director, GameConst, Utils, LanguageManager, LobbyConst, MttData, MttProxy, MarkForNetEventListener, CustomFguiClass, EPageEvent, UI_RoomItemMTT, _cjsExports, NetNodeManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      Node = module.Node;
      director = module.director;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      MttData = module.MttData;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      UI_RoomItemMTT = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      NetNodeManager = module.NetNodeManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;
      cclegacy._RF.push({}, "c4d60M+Hc9IDbIkoxc4P/Xn", "RoomItemMTT", undefined);
      var Color128438 = color('#128438');
      var Color8F6721 = color(0x8f, 0x67, 0x21);
      var Color666666 = color('#425471');
      var Color944816 = color(0x94, 0x48, 0x16);

      //[框颜色,框字体颜色，按钮颜色，按钮字体颜色]
      var actionBtnBgColor = [[color('#383B4F'), color('#7A808E'), color('#383B4F'), color('#7A808E')],
      //旁观黑色
      [color('#BA433B'), color('#D25148'), color('#BA433B'), color('#F3F7F8')],
      //进入暗红色
      [color('#BB6426'), color('#BB6426'), color('#A6571D'), color('#F3F7F8')],
      //橙色
      [color('#2F65BC'), color('#2F65BC'), color('#2F65BC'), color('#F3F7F8')],
      //暗蓝色
      [color('#35B898'), color('#35B898'), color('#219075'), color('#F3F7F8')] //暗绿色
      ];

      var RoomItemMTT = exports('RoomItemMTT', (_dec = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttFreshInfoRsp.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.mtt.MsgEntryPlayerNumChangeCast.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_RoomItemMTT) {
        _inheritsLoose(RoomItemMTT, _UI_RoomItemMTT);
        function RoomItemMTT() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_RoomItemMTT.call.apply(_UI_RoomItemMTT, [this].concat(args)) || this;
          _this.itemIndex = void 0;
          _this.itemData = void 0;
          _this._listCB = void 0;
          _this._itemChange = void 0;
          _this.isLateRegTime = false;
          _this.isCountDownStatus = false;
          return _this;
        }
        var _proto = RoomItemMTT.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_RoomItemMTT.prototype.onConstruct.call(this);
          this.name = 'RoomItem';
          this.on(Node.EventType.NODE_DESTROYED, this.onNodeDestroy, this);
          this.m_BtnAction.onClick(this.onBtnAction.bind(this), this);
        };
        _proto.onIndexChanged = function onIndexChanged() {
          this.m_TextStartTime.ensureSizeCorrect();
          this.m_layerTimeBg.ensureSizeCorrect();
        };
        _proto.setItem = function setItem(data, idx, cb, itemChange) {
          this._listCB = cb;
          this._itemChange = itemChange;
          this.itemData = data;
          this.itemIndex = idx;
          if (data.roomType == GameConst.ERoomType.normal) {
            this.setLobbyItemInfo(data.normal, data.costType == GameConst.EGameCostType.cash);
          } else {
            this.setMatchItemInfo(data.mtt);
          }
        };
        _proto.onEnable = function onEnable() {
          _UI_RoomItemMTT.prototype.onEnable.call(this);
          this.resume();
        };
        _proto.onDisable = function onDisable() {
          _UI_RoomItemMTT.prototype.onDisable.call(this);
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          netNode.targetOff(this);
          this.pause();
        };
        _proto.onNodeDestroy = function onNodeDestroy(node) {
          this.stop();
        }
        //设置常规桌
        ;

        _proto.setLobbyItemInfo = function setLobbyItemInfo(info, cointype) {
          this.stop();
          this.m_BtnAction.title = LanguageManager.get('CCS_TXT_32');
          this.m_BtnAction.data = 'buy-in';
          this.m_BtnAction.m_iconbg.color = Color128438.clone();
          var str = Utils.cashBlindExchange(info.smallBlind, cointype) + "/" + Utils.cashBlindExchange(2 * info.smallBlind, cointype);
          if (info.ante && info.ante > 0) {
            str = str + "(" + Utils.toFormat(info.ante) + ")";
          }
          this.m_TextBet.text = str;
          var num = info.num;
          if (info.gameType == GameConst.ERoomType.normal && num < 15) {
            num = 10 + Math.floor(Math.random() * 10) % 5;
          }
          this.m_TextPlayerCnt.text = num + '';
          this.m_TextGameType.text = GameConst.getGameTypeDesc(info.gameType);
          this.m_TextBetArea.text = Utils.toFormat(info.minBuyin, 2, cointype) + "-" + Utils.toFormat(info.maxBuyin, 2, cointype);
        }

        //设置比赛信息
        ;

        _proto.setMatchItemInfo = function setMatchItemInfo(itemInfo) {
          var name = itemInfo.rule.name || ''; //-- 比赛名称
          var buyin = itemInfo.rule.buyin || 0; //-- 报名费
          var fee = Number(buyin * itemInfo.rule.fee / 100 * 100) / 100; //-- 服务费
          var isRebuy = 0 < itemInfo.rule.reBuyNum && itemInfo.rule.endJoinTime > 0; //-- 是否能重构
          var num = itemInfo.num || 0; //-- 报名人数
          var startTime = itemInfo.rule.startTime; //-- 开赛时间
          var gameType = itemInfo.rule.gameType;
          this.m_TextBet.text = name;
          this.m_TextGameType.text = "MTT-" + GameConst.getGameTypeDesc(gameType);

          // this.m_ImgDeskBg.url = 'ui://Lobby/lobby_home_desktop_1';

          this.m_TextGameType.color = Color8F6721.clone();
          this.setCostInfo(buyin, fee, itemInfo.rule && this.itemData.costType == GameConst.EGameCostType.cash); //-- 费用

          //-- 报名人数
          var isplaying = MttData.isMatchPlaying(itemInfo);
          if (isplaying) {
            var rankinfo = itemInfo ? itemInfo.memberrank : null;
            var number = rankinfo ? rankinfo.num : 0;
            if (number == 0) {
              this.m_TextPlayerCnt.text = '0';
            } else {
              this.m_TextPlayerCnt.text = number + "/" + num;
            }
          } else {
            this.m_TextPlayerCnt.text = num + '';
          }

          //RAS
          this.m_RTag.visible = itemInfo.rule.reBuyNum > 0;
          this.m_ATag.visible = itemInfo.rule.AddOnTimes > 0;
          this.m_STag.visible = itemInfo.rule.mttType == GameConst.MATCH.EMttType.MTT_TYPE_SATELLITE;

          //ko || pko
          if (itemInfo.rule.koBounty && itemInfo.rule.koBounty.isOpen) {
            this.m_ImgKo.url = itemInfo.rule.koBounty.type == 1 ? 'ui://Lobby/lobby_icon_pko' : 'ui://Lobby/lobby_icon_ko';
          } else {
            this.m_ImgKo.visible = false;
          }
          this.refreshDateInfoByCurrentData(itemInfo);
          //btn
          this.refreshActionButtonStatusByMatchInfo(itemInfo);
        };
        _proto.setCostInfo = function setCostInfo(buyin, fee, bcash) {
          if (bcash === void 0) {
            bcash = false;
          }
          var tRate = 1;
          if (buyin <= 0) {
            this.m_TextRegesit.text = LanguageManager.get('UP_31');
            this.m_CoinTypeControl.selectedIndex = 2;
          } else {
            //mark 获取俱乐部汇率
            this.m_TextRegesit.text = Utils.toFormat(Number(buyin * tRate * 100) / 100, 99, bcash);
            if (this.itemData.costType == GameConst.EGameCostType.cash) {
              this.m_CoinTypeControl.selectedIndex = 1;
            } else {
              this.m_CoinTypeControl.selectedIndex = 0;
            }
          }
          var result = Utils.toFormat(tRate * Math.max(Number(this.itemData.mtt.prizePool.toFixed(2)), this.itemData.mtt.rule.gtdPrizeSize), 20, this.itemData.mtt.rule.coinType == GameConst.EGameCostType.cash);
          this.m_TextBetArea.text = result;
        };
        _proto.onLanguageChange = function onLanguageChange() {
          if (this.itemData.roomType == GameConst.ERoomType.normal) {
            this.setLobbyItemInfo(this.itemData.normal, this.itemData.costType == GameConst.EGameCostType.cash);
          } else {
            this.setMatchItemInfo(this.itemData.mtt);
          }
        };
        _proto.refreshActionButtonStatusByMatchInfo = function refreshActionButtonStatusByMatchInfo(mttInfo) {
          if (mttInfo != null) {
            var titleStr = '';
            var coloridx = 4;
            var buttonStatus = mttInfo.buttonState; //按键状态
            if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE) {
              titleStr = LanguageManager.get('TXT_240'); //比赛关闭
              coloridx = 0;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
              titleStr = LanguageManager.get('TXT_224');
              coloridx = 3;
            } else if (buttonStatus > LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
              //当前排名信息 buttonStatus 大于0 表示当前的排名值
              // titleStr = Utils.formatStr(LanguageManager.get('CCS_TXT_228'), Utils.formatStr('%d', buttonStatus));
              titleStr = LanguageManager.get('CCS_TXT_17');
              coloridx = 3;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REGISTER) {
              titleStr = LanguageManager.get('TXT_97'); //tag 不考虑战队赛  报名
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_APPLYING) ;else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_WAITING) {
              var timeInfo = mttInfo.time;
              if (timeInfo && timeInfo.type == GameConst.MATCH.ETimeType.MATCH_BEGIN && timeInfo.days == GameConst.MATCH.ETimeDays.TIME_COUNT_DOWN) {
                // 倒计时提前进入
                coloridx = 3;
                titleStr = LanguageManager.get('TXT_47'); //进入
              } else {
                titleStr = LanguageManager.get('BUTTON_ENROLLED');
                coloridx = 0;
              }
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_RE_ENTER) {
              titleStr = LanguageManager.get('TXT_47'); //进入
              coloridx = 1;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_DELAY_ENTER) {
              titleStr = LanguageManager.get('TXT_47'); //进入
              coloridx = 1;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_LOOKON) {
              //--旁观
              titleStr = LanguageManager.get('CCS_TXT_17'); //旁观
              coloridx = 3;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REBUY) {
              //--复购
              titleStr = LanguageManager.get('CCS_TXT_252'); //rebuy
            }

            if (this.isLateRegTime && mttInfo.isEntrance != 1) {
              coloridx = 2;
            }
            var btnAction = this.m_BtnAction;
            btnAction.title = titleStr;
            btnAction.m_iconbg.color = actionBtnBgColor[coloridx][2].clone();
            var labelTitle = btnAction.getChild('title');
            if (labelTitle) {
              labelTitle.color = actionBtnBgColor[coloridx][3].clone();
            }
            this.m_layerTimeBg.color = actionBtnBgColor[coloridx][1].clone();
            this.m_TextStartTime.color = actionBtnBgColor[coloridx][0].clone();
          }
        };
        _proto.refreshDateInfoByCurrentData = function refreshDateInfoByCurrentData(info) {
          this.isLateRegTime = false;
          this.isCountDownStatus = false;
          var timeType = info.time.type;
          var timeStr = Utils.formatDateWithTime(info.rule.startTime * 1000, false, '-').slice(5);
          this.m_TextStartTime.color = Color666666;
          if (timeType == GameConst.MATCH.ETimeType.MATCH_CLOSED) ;else if (timeType == GameConst.MATCH.ETimeType.MATCH_FINISHED) ;else if (info.rule.startTime < Utils.curServerTimeSecondstamp) {
            var curBlindLv = this.getBlindLvByMttInfo(info);
            var rebuyFinishIdx = info.rule.endJoinTime || 0;
            if (rebuyFinishIdx >= curBlindLv) {
              var endTime = info.rule.startTime + rebuyFinishIdx * info.rule.raiseBlindTime;
              var remainTime = endTime - Utils.curServerTimeSecondstamp;
              var rankInfo = info ? info.memberrank : null;
              var isMoney = info ? rankInfo.isMoney == 1 : false;
              if (info.rule.AddOnTimes > 0) {
                remainTime = remainTime + GameConst.MTT_ADDON_TIME_MIN * 60;
              }
              var isRegisterEnd = false;
              if (remainTime < 0 || isMoney) {
                if (info.isEntranceClose) {
                  // 报名结束了
                  isRegisterEnd = true;
                } else {
                  // 报名即将结束
                  // 有几秒的时间差，也认为结束了吧
                  isRegisterEnd = true;
                }
              }
              if (!isRegisterEnd) {
                this.isCountDownStatus = true;
                this.startTick();
                this.isLateRegTime = true;
                var leftHour = Math.floor(remainTime / 3600);
                var leftMin = Math.floor(remainTime % 3600 / 60);
                timeStr = Utils.formatStr('%s %s', LanguageManager.get('MTT_RegCloseTime2'), leftHour > 0 ? Utils.formatStr('%02d:%02d:%02d', leftHour, leftMin, remainTime % 60) : Utils.formatStr('%02d:%02d', leftMin, remainTime % 60));
              }
            }
          } else {
            var leftTime = info.rule.startTime - Utils.curServerTimeSecondstamp;
            var _leftHour = Math.floor(leftTime / 3600);
            // print("剩余开始时间:", leftHour)
            if (leftTime <= 3600 && leftTime >= 0) {
              this.isCountDownStatus = true;
              var _leftMin = Math.floor(leftTime % 3600 / 60);
              timeStr = Utils.formatStr('%s %s', LanguageManager.get('MTT_COUNTDOWN'), _leftHour > 0 ? Utils.formatStr('%02d:%02d:%02d', _leftHour, _leftMin, leftTime % 60) : Utils.formatStr('%02d:%02d', _leftMin, leftTime % 60));
            }
            if (leftTime < 3600 * 2) {
              this.startTick();
            }
          }
          // this.layerBeginTimeBg.visible(this.isLateRegTime)
          this.m_TextStartTime.text = timeStr;
          if (this.isLateRegTime) {
            this.m_TextStartTime.color = Color944816;
          }
          // this.m_layerTimeBg.visible = this.isLateRegTime;
        };

        _proto.onApplyRsp = function onApplyRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.mtt.MsgApplyRsp);
            if (info != null && this.itemData.roomType == GameConst.ERoomType.mtt) {
              if (info.mttid == this.itemData.mtt.mttid) {
                MttProxy.inst.getMttFreshInfo(this.itemData.mtt.mttid);
                if (info.type == 3) {
                  // 主动申请rebuy 进入比赛
                  this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
                } else if (info.type == 1 && info.applytype == 1) {
                  // 延迟报名 进入比赛
                  if (MttData.isMatchPlaying(this.itemData.mtt)) {
                    this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
                  }
                }
              }
            }
          } else {
            this.grootInst.showCenterTip(LanguageManager.getErrorText(netdata.getRetCode().toString()));
          }
        };
        _proto.getBlindLvByMttInfo = function getBlindLvByMttInfo(mtt) {
          var status = mtt.buttonState ? mtt.buttonState : null;
          var timeInfo = mtt.time ? mtt.time : null;
          var timeType = timeInfo ? timeInfo.type : null; // 1=截止报名 2=比赛开始 3=延迟状态 4=已经开赛 5=比赛关闭 6=比赛结束
          var blindinfo = mtt.gameinfo;
          var blindround = blindinfo.blindround ? blindinfo.blindround : 1;
          var starttime = mtt.rule.startTime || 0;
          if (starttime > Utils.curServerTimeSecondstamp) {
            blindround = 1;
          } else if (status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH || status > 0 && (GameConst.MATCH.ETimeType.MATCH_CLOSED == timeType || GameConst.MATCH.ETimeType.MATCH_FINISHED == timeType)) {
            blindround = 1;
          }
          return blindround;
        };
        _proto.onBtnAction = function onBtnAction(event) {
          if (!this.itemData) return;
          if (this.itemData.roomType == GameConst.ERoomType.mtt) {
            event.propagationStopped = true;
          } else {
            // 走点击普通游戏
            return;
          }
          var info = this.itemData.mtt;
          var buttonStatus = info == null ? void 0 : info.buttonState;
          if (info == null || buttonStatus == null) return;
          var mttId = MttData.GetNowMttId(info);
          if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_LOOKON || buttonStatus > LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
            //旁观
            this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, true);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REBUY) {
            //重构
            MttProxy.inst.sendQuitMttReq(2, 3, mttId, this.onApplyRsp.bind(this));
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_DELAY_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_RE_ENTER) {
            //进入游戏
            // this._listCB && this._listCB(this.itemData);
            this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_WAITING) {
            var timeInfo = this.itemData.mtt.time;
            if (timeInfo && timeInfo.type == GameConst.MATCH.ETimeType.MATCH_BEGIN && timeInfo.days == GameConst.MATCH.ETimeDays.TIME_COUNT_DOWN) {
              // 倒计时提前进入
              this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
            }
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REGISTER) {
            //tag 不做账号游戏绑定判定
            //报名
            MttProxy.inst.sendQuitMttReq(1, 1, mttId, this.onApplyRsp.bind(this));
            // let iType: number;
            // if (info.isEntrance == 1) {
            //     //已报名时  发送取消报名
            //     iType = 2;
            // } else {
            //     //未报名时  发送报名信息
            //     iType = 1;
            //     MttProxy.inst.sendQuitMttReq(1, iType, mttId);
            // }
            // MttProxy.inst.getMttFreshInfo(mttId);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE) ;else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) ;
        }
        //tmp
        ;

        _proto.onMsgGetMttFreshInfoRsp = function onMsgGetMttFreshInfoRsp(netdata) {
          if (!this.node.active) return;
          var info = netdata.getData(_cjsExports.mtt.MsgGetMttFreshInfoRsp);
          if (info != null && this.itemData && this.itemData.roomType == GameConst.ERoomType.mtt && info.mttid == this.itemData.mtt.mttid) {
            this.itemData.mtt.buttonState = info.buttonState;
            this.itemData.mtt.time = info.time;
            this.itemData.mtt.isEntranceClose = info.isEntranceClose;
            this.itemData.mtt.waitBalanceStart = info.waitBalanceStart;
            this.setMatchItemInfo(this.itemData.mtt);
            if (this._itemChange) {
              this._itemChange(this.itemData);
            }
          }
        };
        _proto.onMsgEntryPlayerNumChangeCast = function onMsgEntryPlayerNumChangeCast(netdata) {
          if (!this.node.active) return;
          if (!this.itemData) return;
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.mtt.MsgEntryPlayerNumChangeCast);
            if (this.itemData.roomType == GameConst.ERoomType.mtt && info.mttid == this.itemData.mtt.mttid) {
              this.itemData.mtt.num = info.num;
              this.itemData.mtt.memberrank.num = info.inNum;
              this.setItem(this.itemData, this.itemIndex, this._listCB, this._itemChange);
              if (this._itemChange) {
                this._itemChange(this.itemData);
              }
            }
          }
        };
        _proto.update = function update() {
          if (this.itemData.roomType != GameConst.ERoomType.mtt) {
            return;
          }
          if (!this.isCountDownStatus) {
            return;
          }
          var flag = this.isLateRegTime;
          this.refreshDateInfoByCurrentData(this.itemData.mtt);
          if (flag != self.isLateRegTime) {
            this.refreshActionButtonStatusByMatchInfo(this.itemData.mtt);
          }
        };
        _proto.startTick = function startTick() {
          var scheduler = director.getScheduler();
          if (!scheduler.isScheduled(this.update, this)) {
            scheduler.scheduleUpdate(this, 0, false);
          }
        };
        _proto.stop = function stop() {
          director.getScheduler().unscheduleAllForTarget(this);
        };
        _proto.pause = function pause() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (!scheduler.isTargetPaused(this)) {
              scheduler.pauseTarget(this);
            }
          }
        };
        _proto.resume = function resume() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (scheduler.isTargetPaused(this)) {
              scheduler.resumeTarget(this);
            }
          }
        };
        return RoomItemMTT;
      }(UI_RoomItemMTT), (_applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgEntryPlayerNumChangeCast", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgEntryPlayerNumChangeCast"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoomItemNLH.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameConst.ts', './Utils.ts', './LanguageManage.ts', './LobbyConst.ts', './MttData.ts', './MttProxy.ts', './GameDecorators.ts', './CocosDevKit.ts', './PageEvent.ts', './UI_RoomItemNLH.ts', './gameproto.js', './NetNodeManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, color, Node, director, GameConst, Utils, LanguageManager, LobbyConst, MttData, MttProxy, MarkForNetEventListener, CustomFguiClass, EPageEvent, UI_RoomItemNLH, _cjsExports, NetNodeManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      Node = module.Node;
      director = module.director;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      MttData = module.MttData;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      UI_RoomItemNLH = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      NetNodeManager = module.NetNodeManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;
      cclegacy._RF.push({}, "bc006cSkEpByZeYK1rqUVG5", "RoomItemNLH", undefined);
      var Color128438 = color('#128438');
      var Color55C370 = color(0x55, 0xc3, 0x70);
      var Color0C7426 = color(0x0c, 0x74, 0x26);
      var Color8F6721 = color(0x8f, 0x67, 0x21);
      var Color9E7636 = color(0x9e, 0x76, 0x36);
      var Color844EB1 = color(0x84, 0x4e, 0xb1);
      var Color5D19A3 = color(0x5d, 0x19, 0xa3);
      var Color3267D3 = color(0x32, 0x67, 0xd3);
      var Color1957A3 = color(0x19, 0x57, 0xa3);
      var Color666666 = color(0x66, 0x66, 0x66);
      var Color944816 = color(0x94, 0x48, 0x16);
      var actionBtnBgColor = [color('#121215'),
      //黑色
      color('#611D26'),
      //暗红色
      color('#8C4014'),
      //暗黄色
      color('#0D405B'),
      //暗蓝色
      color('#128438') //暗绿色、
      ];

      var RoomItemNLH = exports('RoomItemNLH', (_dec = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttFreshInfoRsp.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.mtt.MsgEntryPlayerNumChangeCast.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_RoomItemNLH) {
        _inheritsLoose(RoomItemNLH, _UI_RoomItemNLH);
        function RoomItemNLH() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_RoomItemNLH.call.apply(_UI_RoomItemNLH, [this].concat(args)) || this;
          _this.itemIndex = void 0;
          _this.itemData = void 0;
          _this._listCB = void 0;
          _this._itemChange = void 0;
          _this.isLateRegTime = false;
          _this.isCountDownStatus = false;
          return _this;
        }
        var _proto = RoomItemNLH.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_RoomItemNLH.prototype.onConstruct.call(this);
          this.name = 'RoomItem';
          this.on(Node.EventType.NODE_DESTROYED, this.onNodeDestroy, this);
          this.m_BtnAction.onClick(this.onBtnAction.bind(this), this);
          this.m_GameTypeControl.onChanged(this.onIndexChanged.bind(this), this);
        };
        _proto.onIndexChanged = function onIndexChanged() {
          this.m_TextStartTime.ensureSizeCorrect();
          this.m_layerTimeBg.ensureSizeCorrect();
        };
        _proto.setItem = function setItem(data, idx, cb, itemChange) {
          this._listCB = cb;
          this._itemChange = itemChange;
          this.itemData = data;
          this.itemIndex = idx;
          if (data.roomType == GameConst.ERoomType.normal) {
            this.m_GameTypeControl.selectedIndex = 0;
            this.setLobbyItemInfo(data.normal, data.costType == GameConst.EGameCostType.cash);
          } else {
            this.m_GameTypeControl.selectedIndex = 1;
            this.setMatchItemInfo(data.mtt);
          }
          this.m_CoinTypeControl.selectedIndex = data.costType == GameConst.EGameCostType.cash ? 1 : 0;
        };
        _proto.onEnable = function onEnable() {
          _UI_RoomItemNLH.prototype.onEnable.call(this);
          this.resume();
        };
        _proto.onDisable = function onDisable() {
          _UI_RoomItemNLH.prototype.onDisable.call(this);
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          netNode.targetOff(this);
          this.pause();
        };
        _proto.onNodeDestroy = function onNodeDestroy(node) {
          this.stop();
        };
        _proto.onLanguageChange = function onLanguageChange() {
          if (this.itemData.roomType == GameConst.ERoomType.normal) {
            this.setLobbyItemInfo(this.itemData.normal, this.itemData.costType == GameConst.EGameCostType.cash);
          } else {
            this.setMatchItemInfo(this.itemData.mtt);
          }
        }
        //设置常规桌
        ;

        _proto.setLobbyItemInfo = function setLobbyItemInfo(info, cointype) {
          this.stop();
          this.m_BtnAction.title = LanguageManager.get('CCS_TXT_32');
          this.m_BtnAction.data = 'buy-in';
          this.m_BtnAction.m_iconbg.color = color('#219075');
          this.m_BtnAction.titleColor = color('#F3F7F8');
          var str = Utils.cashBlindExchange(info.smallBlind, cointype) + "/" + Utils.cashBlindExchange(2 * info.smallBlind, cointype);
          if (info.ante && info.ante > 0) {
            str = str + "(" + Utils.toFormat(info.ante) + ")";
          }
          this.m_TextBet.text = str;
          var num = info.num;
          if (info.gameType == GameConst.ERoomType.normal && num < 15) {
            num = 10 + Math.floor(Math.random() * 10) % 5;
          }
          this.m_TextPlayerCnt.text = num + '';
          this.m_TextGameType.text = GameConst.getGameTypeDesc(info.gameType);
          this.m_TextBetArea.text = Utils.toFormat(info.minBuyin, 2, cointype) + "-" + Utils.toFormat(info.maxBuyin, 2, cointype);
          var deskbgs = [];
          deskbgs[GameConst.TexasPlay.EGameType.NLH] = 'ui://Lobby/lobby_home_desktop_0';
          deskbgs[GameConst.TexasPlay.EGameType.MTT] = 'ui://Lobby/lobby_home_desktop_1';
          deskbgs[GameConst.TexasPlay.EGameType.PLO4] = 'ui://Lobby/lobby_home_desktop_4';
          deskbgs[GameConst.TexasPlay.EGameType.SixPlus] = 'ui://Lobby/lobby_home_desktop_3';
          this.m_ImgDeskBg.url = deskbgs[info.gameType];
          this.m_BtnAction.visible = true;
          switch (info.gameType) {
            case GameConst.TexasPlay.EGameType.NLH:
              this.m_TextGameType.color = Color0C7426.clone();
              break;
            case GameConst.TexasPlay.EGameType.MTT:
              this.m_TextGameType.color = Color8F6721.clone();
              break;
            case GameConst.TexasPlay.EGameType.SixPlus:
              this.m_TextGameType.color = Color844EB1.clone();
              break;
            case GameConst.TexasPlay.EGameType.PLO4:
              this.m_TextGameType.color = Color3267D3.clone();
              break;
          }
        }

        //设置比赛信息
        ;

        _proto.setMatchItemInfo = function setMatchItemInfo(itemInfo) {
          var name = itemInfo.rule.name || ''; //-- 比赛名称
          var buyin = itemInfo.rule.buyin || 0; //-- 报名费
          var fee = Number(buyin * itemInfo.rule.fee / 100 * 100) / 100; //-- 服务费
          var isRebuy = 0 < itemInfo.rule.reBuyNum && itemInfo.rule.endJoinTime > 0; //-- 是否能重构
          var num = itemInfo.num || 0; //-- 报名人数
          var startTime = itemInfo.rule.startTime; //-- 开赛时间
          var gameType = itemInfo.rule.gameType;
          this.m_TextBet.text = name;
          this.m_TextGameType.text = "MTT-" + GameConst.getGameTypeDesc(gameType);
          this.m_ImgDeskBg.url = 'ui://Lobby/lobby_home_desktop_1';
          this.m_TextGameType.color = Color8F6721.clone();
          this.setCostInfo(buyin, fee, itemInfo.rule && this.itemData.costType == GameConst.EGameCostType.cash); //-- 费用

          //-- 报名人数
          var isplaying = MttData.isMatchPlaying(itemInfo);
          if (isplaying) {
            var rankinfo = itemInfo ? itemInfo.memberrank : null;
            var number = rankinfo ? rankinfo.num : 0;
            if (number == 0) {
              this.m_TextPlayerCnt.text = '0';
            } else {
              this.m_TextPlayerCnt.text = number + "/" + num;
            }
          } else {
            this.m_TextPlayerCnt.text = num + '';
          }

          //RAS
          this.m_RTag.visible = itemInfo.rule.reBuyNum > 0;
          this.m_ATag.visible = itemInfo.rule.AddOnTimes > 0;
          this.m_STag.visible = itemInfo.rule.mttType == GameConst.MATCH.EMttType.MTT_TYPE_SATELLITE;
          this.refreshDateInfoByCurrentData(itemInfo);
          //btn
          this.refreshActionButtonStatusByMatchInfo(itemInfo);
        };
        _proto.setCostInfo = function setCostInfo(buyin, fee, bcash) {
          if (bcash === void 0) {
            bcash = false;
          }
          if (buyin <= 0) {
            this.m_TextBetArea.text = LanguageManager.get('UP_31');
          } else {
            //mark 获取俱乐部汇率
            var tRate = 1;
            this.m_TextBetArea.text = Utils.toFormat(Number(buyin * tRate * 100) / 100, 99, bcash);
          }
        };
        _proto.refreshActionButtonStatusByMatchInfo = function refreshActionButtonStatusByMatchInfo(mttInfo) {
          if (mttInfo != null) {
            var colortitle = color('#EEEEEE');
            var colorS;
            var titleStr = '';
            var buttonStatus = mttInfo.buttonState; //按键状态
            colorS = actionBtnBgColor[4];
            if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE) {
              titleStr = LanguageManager.get('TXT_240'); //比赛关闭
              colorS = actionBtnBgColor[0];
              colortitle = color('#959595');
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
              titleStr = LanguageManager.get('TXT_224');
              colorS = actionBtnBgColor[3];
            } else if (buttonStatus > LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
              //当前排名信息 buttonStatus 大于0 表示当前的排名值
              // titleStr = Utils.formatStr(LanguageManager.get('CCS_TXT_228'), Utils.formatStr('%d', buttonStatus));
              titleStr = LanguageManager.get('CCS_TXT_17');
              colorS = actionBtnBgColor[3];
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REGISTER) {
              titleStr = LanguageManager.get('TXT_97'); //tag 不考虑战队赛  报名
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_APPLYING) ;else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_WAITING) {
              var timeInfo = mttInfo.time;
              if (timeInfo && timeInfo.type == GameConst.MATCH.ETimeType.MATCH_BEGIN && timeInfo.days == GameConst.MATCH.ETimeDays.TIME_COUNT_DOWN) {
                // 倒计时提前进入
                colorS = actionBtnBgColor[1];
                titleStr = LanguageManager.get('TXT_47'); //进入
              } else {
                colorS = actionBtnBgColor[0];
                titleStr = LanguageManager.get('BUTTON_ENROLLED');
                colortitle = color('#959595');
              }
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_RE_ENTER) {
              titleStr = LanguageManager.get('TXT_47'); //进入
              colorS = actionBtnBgColor[1];
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_DELAY_ENTER) {
              titleStr = LanguageManager.get('TXT_47'); //进入
              colorS = actionBtnBgColor[1];
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_LOOKON) {
              //--旁观
              titleStr = LanguageManager.get('CCS_TXT_17'); //旁观
              colorS = actionBtnBgColor[3];
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REBUY) {
              //--复购
              titleStr = LanguageManager.get('CCS_TXT_252'); //rebuy
            }

            if (this.isLateRegTime && mttInfo.isEntrance != 1) {
              colorS = actionBtnBgColor[2];
            }
            var btnAction = this.m_BtnAction;
            btnAction.title = titleStr;
            btnAction.m_iconbg.color = colorS.clone();
            var labelTitle = btnAction.getChild('title');
            if (labelTitle) {
              labelTitle.color = colortitle;
            }
          }
        };
        _proto.refreshDateInfoByCurrentData = function refreshDateInfoByCurrentData(info) {
          this.isLateRegTime = false;
          this.isCountDownStatus = false;
          var timeType = info.time.type;
          var timeStr = Utils.formatDateWithTime(info.rule.startTime * 1000, false, '-').slice(5);
          this.m_TextStartTime.color = Color666666;
          if (timeType == GameConst.MATCH.ETimeType.MATCH_CLOSED) ;else if (timeType == GameConst.MATCH.ETimeType.MATCH_FINISHED) ;else if (info.rule.startTime < Utils.curServerTimeSecondstamp) {
            var curBlindLv = this.getBlindLvByMttInfo(info);
            var rebuyFinishIdx = info.rule.endJoinTime || 0;
            if (rebuyFinishIdx >= curBlindLv) {
              var endTime = info.rule.startTime + rebuyFinishIdx * info.rule.raiseBlindTime;
              var remainTime = endTime - Utils.curServerTimeSecondstamp;
              var rankInfo = info ? info.memberrank : null;
              var isMoney = info ? rankInfo.isMoney == 1 : false;
              if (info.rule.AddOnTimes > 0) {
                remainTime = remainTime + GameConst.MTT_ADDON_TIME_MIN * 60;
              }
              var isRegisterEnd = false;
              if (remainTime < 0 || isMoney) {
                if (info.isEntranceClose) {
                  // 报名结束了
                  isRegisterEnd = true;
                } else {
                  // 报名即将结束
                  // 有几秒的时间差，也认为结束了吧
                  isRegisterEnd = true;
                }
              }
              if (!isRegisterEnd) {
                this.isCountDownStatus = true;
                this.startTick();
                this.isLateRegTime = true;
                var leftHour = Math.floor(remainTime / 3600);
                var leftMin = Math.floor(remainTime % 3600 / 60);
                timeStr = Utils.formatStr('%s %s', LanguageManager.get('MTT_RegCloseTime2'), leftHour > 0 ? Utils.formatStr('%02d:%02d:%02d', leftHour, leftMin, remainTime % 60) : Utils.formatStr('%02d:%02d', leftMin, remainTime % 60));
              }
            }
          } else {
            var leftTime = info.rule.startTime - Utils.curServerTimeSecondstamp;
            var _leftHour = Math.floor(leftTime / 3600);
            // print("剩余开始时间:", leftHour)
            if (leftTime <= 3600 && leftTime >= 0) {
              this.isCountDownStatus = true;
              var _leftMin = Math.floor(leftTime % 3600 / 60);
              timeStr = Utils.formatStr('%s %s', LanguageManager.get('MTT_COUNTDOWN'), _leftHour > 0 ? Utils.formatStr('%02d:%02d:%02d', _leftHour, _leftMin, leftTime % 60) : Utils.formatStr('%02d:%02d', _leftMin, leftTime % 60));
            }
            if (leftTime < 3600 * 2) {
              this.startTick();
            }
          }
          // this.layerBeginTimeBg.visible(this.isLateRegTime)
          this.m_TextStartTime.text = timeStr;
          if (this.isLateRegTime) {
            this.m_TextStartTime.color = Color944816;
          }
          this.m_layerTimeBg.visible = this.isLateRegTime;
        };
        _proto.onApplyRsp = function onApplyRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.mtt.MsgApplyRsp);
            if (info != null && this.itemData.roomType == GameConst.ERoomType.mtt) {
              if (info.mttid == this.itemData.mtt.mttid) {
                MttProxy.inst.getMttFreshInfo(this.itemData.mtt.mttid);
                if (info.type == 3) {
                  // 主动申请rebuy 进入比赛
                  this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
                } else if (info.type == 1 && info.applytype == 1) {
                  // 延迟报名 进入比赛
                  if (MttData.isMatchPlaying(this.itemData.mtt)) {
                    this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
                  }
                }
              }
            }
          } else {
            this.grootInst.showCenterTip(LanguageManager.getErrorText(netdata.getRetCode().toString()));
          }
        };
        _proto.getBlindLvByMttInfo = function getBlindLvByMttInfo(mtt) {
          var status = mtt.buttonState ? mtt.buttonState : null;
          var timeInfo = mtt.time ? mtt.time : null;
          var timeType = timeInfo ? timeInfo.type : null; // 1=截止报名 2=比赛开始 3=延迟状态 4=已经开赛 5=比赛关闭 6=比赛结束
          var blindinfo = mtt.gameinfo;
          var blindround = blindinfo.blindround ? blindinfo.blindround : 1;
          var starttime = mtt.rule.startTime || 0;
          if (starttime > Utils.curServerTimeSecondstamp) {
            blindround = 1;
          } else if (status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH || status > 0 && (GameConst.MATCH.ETimeType.MATCH_CLOSED == timeType || GameConst.MATCH.ETimeType.MATCH_FINISHED == timeType)) {
            blindround = 1;
          }
          return blindround;
        };
        _proto.onBtnAction = function onBtnAction(event) {
          if (!this.itemData) return;
          if (this.itemData.roomType == GameConst.ERoomType.mtt) {
            event.propagationStopped = true;
          } else {
            // 走点击普通游戏
            return;
          }
          var info = this.itemData.mtt;
          var buttonStatus = info == null ? void 0 : info.buttonState;
          if (info == null || buttonStatus == null) return;
          var mttId = MttData.GetNowMttId(info);
          if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_LOOKON || buttonStatus > LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
            //旁观
            this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, true);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REBUY) {
            //重构
            MttProxy.inst.sendQuitMttReq(2, 3, mttId, this.onApplyRsp.bind(this));
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_DELAY_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_RE_ENTER) {
            //进入游戏
            // this._listCB && this._listCB(this.itemData);
            this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_WAITING) {
            var timeInfo = this.itemData.mtt.time;
            if (timeInfo && timeInfo.type == GameConst.MATCH.ETimeType.MATCH_BEGIN && timeInfo.days == GameConst.MATCH.ETimeDays.TIME_COUNT_DOWN) {
              // 倒计时提前进入
              this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
            }
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REGISTER) {
            //tag 不做账号游戏绑定判定
            //报名
            MttProxy.inst.sendQuitMttReq(1, 1, mttId, this.onApplyRsp.bind(this));
            // let iType: number;
            // if (info.isEntrance == 1) {
            //     //已报名时  发送取消报名
            //     iType = 2;
            // } else {
            //     //未报名时  发送报名信息
            //     iType = 1;
            //     MttProxy.inst.sendQuitMttReq(1, iType, mttId);
            // }
            // MttProxy.inst.getMttFreshInfo(mttId);
          } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE) ;else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) ;
        }
        //tmp
        ;

        _proto.onMsgGetMttFreshInfoRsp = function onMsgGetMttFreshInfoRsp(netdata) {
          if (!this.node.active) return;
          var info = netdata.getData(_cjsExports.mtt.MsgGetMttFreshInfoRsp);
          if (info != null && this.itemData && this.itemData.roomType == GameConst.ERoomType.mtt && info.mttid == this.itemData.mtt.mttid) {
            this.itemData.mtt.buttonState = info.buttonState;
            this.itemData.mtt.time = info.time;
            this.itemData.mtt.isEntranceClose = info.isEntranceClose;
            this.itemData.mtt.waitBalanceStart = info.waitBalanceStart;
            this.m_GameTypeControl.selectedIndex = 1;
            this.setMatchItemInfo(this.itemData.mtt);
            if (this._itemChange) {
              this._itemChange(this.itemData);
            }
          }
        };
        _proto.onMsgEntryPlayerNumChangeCast = function onMsgEntryPlayerNumChangeCast(netdata) {
          if (!this.node.active) return;
          if (!this.itemData) return;
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.mtt.MsgEntryPlayerNumChangeCast);
            if (this.itemData.roomType == GameConst.ERoomType.mtt && info.mttid == this.itemData.mtt.mttid) {
              this.itemData.mtt.num = info.num;
              this.itemData.mtt.memberrank.num = info.inNum;
              this.setItem(this.itemData, this.itemIndex, this._listCB, this._itemChange);
              if (this._itemChange) {
                this._itemChange(this.itemData);
              }
            }
          }
        };
        _proto.update = function update() {
          if (this.itemData.roomType != GameConst.ERoomType.mtt) {
            return;
          }
          if (!this.isCountDownStatus) {
            return;
          }
          var flag = this.isLateRegTime;
          this.refreshDateInfoByCurrentData(this.itemData.mtt);
          if (flag != self.isLateRegTime) {
            this.refreshActionButtonStatusByMatchInfo(this.itemData.mtt);
          }
        };
        _proto.startTick = function startTick() {
          var scheduler = director.getScheduler();
          if (!scheduler.isScheduled(this.update, this)) {
            scheduler.scheduleUpdate(this, 0, false);
          }
        };
        _proto.stop = function stop() {
          director.getScheduler().unscheduleAllForTarget(this);
        };
        _proto.pause = function pause() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (!scheduler.isTargetPaused(this)) {
              scheduler.pauseTarget(this);
            }
          }
        };
        _proto.resume = function resume() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (scheduler.isTargetPaused(this)) {
              scheduler.resumeTarget(this);
            }
          }
        };
        return RoomItemNLH;
      }(UI_RoomItemNLH), (_applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgEntryPlayerNumChangeCast", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgEntryPlayerNumChangeCast"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoomItemPlus.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameConst.ts', './Utils.ts', './LanguageManage.ts', './LobbyConst.ts', './MttData.ts', './MttProxy.ts', './GameDecorators.ts', './CocosDevKit.ts', './PageEvent.ts', './UI_RoomItemPlus.ts', './gameproto.js', './NetNodeManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, color, Node, director, GameConst, Utils, LanguageManager, LobbyConst, MttData, MttProxy, MarkForNetEventListener, CustomFguiClass, EPageEvent, UI_RoomItemPlus, _cjsExports, NetNodeManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      Node = module.Node;
      director = module.director;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }, function (module) {
      MttData = module.MttData;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      UI_RoomItemPlus = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      NetNodeManager = module.NetNodeManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;
      cclegacy._RF.push({}, "88b285OGkRD/aFrW0F7lDcC", "RoomItemPlus", undefined);
      var Color666666 = color(0x66, 0x66, 0x66);
      var Color944816 = color(0x94, 0x48, 0x16);

      //[框颜色,框字体颜色，按钮颜色，按钮字体颜色]
      var actionBtnBgColor = [[color('#383B4F'), color('#7A808E'), color('#383B4F'), color('#7A808E')],
      //旁观黑色
      [color('#BA433B'), color('#D25148'), color('#BA433B'), color('#F3F7F8')],
      //进入暗红色
      [color('#BB6426'), color('#BB6426'), color('#A6571D'), color('#F3F7F8')],
      //橙色
      [color('#2F65BC'), color('#2F65BC'), color('#2F65BC'), color('#F3F7F8')],
      //暗蓝色
      [color('#35B898'), color('#35B898'), color('#219075'), color('#F3F7F8')] //暗绿色
      ];

      var RoomItemPlus = exports('RoomItemPlus', (_dec = MarkForNetEventListener(_cjsExports.mtt.MsgGetMttFreshInfoRsp.ProtocolID), _dec2 = MarkForNetEventListener(_cjsExports.mtt.MsgEntryPlayerNumChangeCast.ProtocolID), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_RoomItemPlus) {
        _inheritsLoose(RoomItemPlus, _UI_RoomItemPlus);
        function RoomItemPlus() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_RoomItemPlus.call.apply(_UI_RoomItemPlus, [this].concat(args)) || this;
          _this.itemIndex = void 0;
          _this.itemData = void 0;
          _this._listCB = void 0;
          _this._itemChange = void 0;
          _this.isLateRegTime = false;
          _this.isCountDownStatus = false;
          return _this;
        }
        var _proto = RoomItemPlus.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_RoomItemPlus.prototype.onConstruct.call(this);
          this.name = 'RoomItemPlus';
          this.on(Node.EventType.NODE_DESTROYED, this.onNodeDestroy, this);
          this.m_GameTypeControl.onChanged(this.onIndexChanged.bind(this), this);
        };
        _proto.onIndexChanged = function onIndexChanged() {
          this.m_TextStartTime.ensureSizeCorrect();
          this.m_layerTimeBg.ensureSizeCorrect();
        };
        _proto.setItem = function setItem(data, idx, cb, itemChange) {
          if (cb === void 0) {
            cb = null;
          }
          if (itemChange === void 0) {
            itemChange = null;
          }
          this._listCB = cb;
          this._itemChange = itemChange;
          this.itemData = data;
          this.itemIndex = idx;
          this.m_GameTypeControl.selectedIndex = this.itemData.roomType == GameConst.ERoomType.normal ? 0 : 1;
          this.onLanguageChange();
        };
        _proto.onEnable = function onEnable() {
          _UI_RoomItemPlus.prototype.onEnable.call(this);
          this.resume();
        };
        _proto.onLanguageChange = function onLanguageChange() {
          if (this.itemData.roomType == GameConst.ERoomType.normal) {
            this.setLobbyItemInfo(this.itemData.normal, this.itemData.costType == GameConst.EGameCostType.cash);
          } else {
            this.setMatchItemInfo(this.itemData.mtt);
          }
          this.m_CoinTypeControl.selectedIndex = this.itemData.costType == GameConst.EGameCostType.cash ? 1 : 0;
        };
        _proto.onDisable = function onDisable() {
          _UI_RoomItemPlus.prototype.onDisable.call(this);
          var netNode = NetNodeManager.Instance.getDefaultNetNode();
          netNode.targetOff(this);
          this.pause();
        };
        _proto.onNodeDestroy = function onNodeDestroy(node) {
          this.stop();
        }
        //设置常规桌
        ;

        _proto.setLobbyItemInfo = function setLobbyItemInfo(info, cointype) {
          this.stop();
          var str = Utils.cashBlindExchange(info.smallBlind, cointype) + "/" + Utils.cashBlindExchange(2 * info.smallBlind, cointype);
          if (info.ante && info.ante > 0) {
            str = str + "(" + Utils.toFormat(info.ante) + ")";
          }
          this.m_TextBet.text = str;
          var num = info.num;
          if (info.gameType == GameConst.ERoomType.normal && num < 15) {
            num = 10 + Math.floor(Math.random() * 10) % 5;
          }
          this.m_TextPlayerCnt.text = num + '';
          this.m_TextGameType.text = GameConst.getGameTypeDesc(info.gameType);
          this.m_TextBetArea.text = Utils.toFormat(info.minBuyin, 2, cointype) + "-" + Utils.toFormat(info.maxBuyin, 2, cointype);
          var deskbgs = [];
          deskbgs[GameConst.TexasPlay.EGameType.NLH] = 'ui://Lobby/lobby_home_desktop_0';
          deskbgs[GameConst.TexasPlay.EGameType.MTT] = 'ui://Lobby/lobby_home_desktop_1';
          deskbgs[GameConst.TexasPlay.EGameType.PLO4] = 'ui://Lobby/lobby_home_desktop_4';
          deskbgs[GameConst.TexasPlay.EGameType.SixPlus] = 'ui://Lobby/lobby_home_desktop_3';
          this.m_BtnAction.visible = true;
          switch (info.gameType) {
            case GameConst.TexasPlay.EGameType.NLH:
              this.m_TextGameType.color = color('#29AB5D');
              break;
            case GameConst.TexasPlay.EGameType.MTT:
              this.m_TextGameType.color = color('#E2AB20');
              break;
            case GameConst.TexasPlay.EGameType.SixPlus:
              this.m_TextGameType.color = color('#29AB5D');
              break;
            case GameConst.TexasPlay.EGameType.PLO4:
              this.m_TextGameType.color = color('#29AB5D');
              break;
          }
        }

        //设置比赛信息
        ;

        _proto.setMatchItemInfo = function setMatchItemInfo(itemInfo) {
          var name = itemInfo.rule.name || ''; //-- 比赛名称
          var buyin = itemInfo.rule.buyin || 0; //-- 报名费
          var fee = Number(buyin * itemInfo.rule.fee / 100 * 100) / 100; //-- 服务费
          var isRebuy = 0 < itemInfo.rule.reBuyNum && itemInfo.rule.endJoinTime > 0; //-- 是否能重构
          var num = itemInfo.num || 0; //-- 报名人数
          var startTime = itemInfo.rule.startTime; //-- 开赛时间
          var gameType = itemInfo.rule.gameType;
          this.m_TextMTTName.text = name;
          this.m_TextGameType.text = "MTT-" + GameConst.getGameTypeDesc(gameType);
          this.m_TextGameType.color = color('#E2AB20');

          // this.setCostInfo(buyin, fee, itemInfo.rule && this.itemData.costType == GameConst.EGameCostType.cash); //-- 费用

          //-- 报名人数
          var isplaying = MttData.isMatchPlaying(itemInfo);
          if (isplaying) {
            var rankinfo = itemInfo ? itemInfo.memberrank : null;
            var number = rankinfo ? rankinfo.num : 0;
            if (number == 0) {
              this.m_TextPlayerCnt.text = '0';
            } else {
              this.m_TextPlayerCnt.text = number + "/" + num;
            }
          } else {
            this.m_TextPlayerCnt.text = num + '';
          }

          //RAS
          this.m_RTag.visible = itemInfo.rule.reBuyNum > 0;
          this.m_ATag.visible = itemInfo.rule.AddOnTimes > 0;
          this.m_STag.visible = itemInfo.rule.mttType == GameConst.MATCH.EMttType.MTT_TYPE_SATELLITE;

          //ko || pko
          if (itemInfo.rule.koBounty && itemInfo.rule.koBounty.isOpen) {
            this.m_ImgKo.url = itemInfo.rule.koBounty.type == 1 ? 'ui://Lobby/lobby_icon_pko' : 'ui://Lobby/lobby_icon_ko';
          } else {
            this.m_ImgKo.visible = false;
          }
          this.refreshDateInfoByCurrentData(itemInfo);
          //btn
          this.refreshActionButtonStatusByMatchInfo(itemInfo);
        };
        _proto.refreshActionButtonStatusByMatchInfo = function refreshActionButtonStatusByMatchInfo(mttInfo) {
          if (mttInfo != null) {
            var coloridx = 4;
            var buttonStatus = mttInfo.buttonState; //按键状态
            if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_CLOSE) {
              LanguageManager.get('TXT_240'); //比赛关闭
              coloridx = 0;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_FINISH || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
              LanguageManager.get('TXT_224');
              coloridx = 3;
            } else if (buttonStatus > LobbyConst.ENUMBordSignUpType.MATCH_STATUS_NO_RANK) {
              //当前排名信息 buttonStatus 大于0 表示当前的排名值
              // titleStr = Utils.formatStr(LanguageManager.get('CCS_TXT_228'), Utils.formatStr('%d', buttonStatus));
              LanguageManager.get('CCS_TXT_17');
              coloridx = 3;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REGISTER) {
              LanguageManager.get('TXT_97'); //tag 不考虑战队赛  报名
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_APPLYING) ;else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_WAITING) {
              var timeInfo = mttInfo.time;
              if (timeInfo && timeInfo.type == GameConst.MATCH.ETimeType.MATCH_BEGIN && timeInfo.days == GameConst.MATCH.ETimeDays.TIME_COUNT_DOWN) {
                // 倒计时提前进入
                coloridx = 3;
                LanguageManager.get('TXT_47'); //进入
              } else {
                LanguageManager.get('BUTTON_ENROLLED');
                coloridx = 0;
              }
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_ENTER || buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_RE_ENTER) {
              LanguageManager.get('TXT_47'); //进入
              coloridx = 1;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_DELAY_ENTER) {
              LanguageManager.get('TXT_47'); //进入
              coloridx = 1;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_LOOKON) {
              //--旁观
              LanguageManager.get('CCS_TXT_17'); //旁观
              coloridx = 3;
            } else if (buttonStatus == LobbyConst.ENUMBordSignUpType.MATCH_STATUS_REBUY) {
              //--复购
              LanguageManager.get('CCS_TXT_252'); //rebuy
            }

            if (this.isLateRegTime && mttInfo.isEntrance != 1) {
              coloridx = 2;
            }
            this.m_layerTimeBg.color = actionBtnBgColor[coloridx][1].clone();
            this.m_TextStartTime.color = actionBtnBgColor[coloridx][0].clone();
            this.onIndexChanged();
          }
        };
        _proto.setCostInfo = function setCostInfo(buyin, fee, bcash) {
          if (bcash === void 0) {
            bcash = false;
          }
          var tRate = 1;
          if (buyin <= 0) {
            this.m_TextBetArea.text = LanguageManager.get('UP_31');
            this.m_CoinTypeControl.selectedIndex = 2;
            return;
          } else {
            //mark 获取俱乐部汇率
            this.m_TextBetArea.text = Utils.toFormat(Number(buyin * tRate * 100) / 100, 99, bcash);
            if (this.itemData.costType == GameConst.EGameCostType.cash) {
              this.m_CoinTypeControl.selectedIndex = 1;
            } else {
              this.m_CoinTypeControl.selectedIndex = 0;
            }
          }
          this.m_TextBetArea.text = Utils.toFormat(tRate * Math.max(this.itemData.mtt.prizePool, this.itemData.mtt.rule.gtdPrizeSize), 20, this.itemData.mtt.rule.coinType == GameConst.EGameCostType.cash);
        };
        _proto.refreshDateInfoByCurrentData = function refreshDateInfoByCurrentData(info) {
          this.isLateRegTime = false;
          this.isCountDownStatus = false;
          var timeType = info.time.type;
          var timeStr = Utils.formatDateWithTime(info.rule.startTime * 1000, false, '-').slice(5);
          this.m_TextStartTime.color = Color666666;
          if (timeType == GameConst.MATCH.ETimeType.MATCH_CLOSED) ;else if (timeType == GameConst.MATCH.ETimeType.MATCH_FINISHED) ;else if (info.rule.startTime < Utils.curServerTimeSecondstamp) {
            var curBlindLv = this.getBlindLvByMttInfo(info);
            var rebuyFinishIdx = info.rule.endJoinTime || 0;
            if (rebuyFinishIdx >= curBlindLv) {
              var endTime = info.rule.startTime + rebuyFinishIdx * info.rule.raiseBlindTime;
              var remainTime = endTime - Utils.curServerTimeSecondstamp;
              var rankInfo = info ? info.memberrank : null;
              var isMoney = info ? rankInfo.isMoney == 1 : false;
              if (info.rule.AddOnTimes > 0) {
                remainTime = remainTime + GameConst.MTT_ADDON_TIME_MIN * 60;
              }
              var isRegisterEnd = false;
              if (remainTime < 0 || isMoney) {
                if (info.isEntranceClose) {
                  // 报名结束了
                  isRegisterEnd = true;
                } else {
                  // 报名即将结束
                  // 有几秒的时间差，也认为结束了吧
                  isRegisterEnd = true;
                }
              }
              if (!isRegisterEnd) {
                this.isCountDownStatus = true;
                this.startTick();
                this.isLateRegTime = true;
                var leftHour = Math.floor(remainTime / 3600);
                var leftMin = Math.floor(remainTime % 3600 / 60);
                timeStr = Utils.formatStr('%s %s', LanguageManager.get('MTT_RegCloseTime2'), leftHour > 0 ? Utils.formatStr('%02d:%02d:%02d', leftHour, leftMin, remainTime % 60) : Utils.formatStr('%02d:%02d', leftMin, remainTime % 60));
              }
            }
          } else {
            var leftTime = info.rule.startTime - Utils.curServerTimeSecondstamp;
            var _leftHour = Math.floor(leftTime / 3600);
            // print("剩余开始时间:", leftHour)
            if (leftTime <= 3600 && leftTime >= 0) {
              this.isCountDownStatus = true;
              var _leftMin = Math.floor(leftTime % 3600 / 60);
              timeStr = Utils.formatStr('%s %s', LanguageManager.get('MTT_COUNTDOWN'), _leftHour > 0 ? Utils.formatStr('%02d:%02d:%02d', _leftHour, _leftMin, leftTime % 60) : Utils.formatStr('%02d:%02d', _leftMin, leftTime % 60));
            }
            if (leftTime < 3600 * 2) {
              this.startTick();
            }
          }
          // this.layerBeginTimeBg.visible(this.isLateRegTime)
          this.m_TextStartTime.text = timeStr;
          if (this.isLateRegTime) {
            this.m_TextStartTime.color = Color944816;
          }
          this.onIndexChanged();
          // this.m_layerTimeBg.visible = this.isLateRegTime;
        };

        _proto.onApplyRsp = function onApplyRsp(netdata) {
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.mtt.MsgApplyRsp);
            if (info != null && this.itemData.roomType == GameConst.ERoomType.mtt) {
              if (info.mttid == this.itemData.mtt.mttid) {
                MttProxy.inst.getMttFreshInfo(this.itemData.mtt.mttid);
                if (info.type == 3) {
                  // 主动申请rebuy 进入比赛
                  this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
                } else if (info.type == 1 && info.applytype == 1) {
                  // 延迟报名 进入比赛
                  if (MttData.isMatchPlaying(this.itemData.mtt)) {
                    this.emitPageEvent(EPageEvent.ENTER_MATCH, this.itemData.mtt, false);
                  }
                }
              }
            }
          } else {
            this.grootInst.showCenterTip(LanguageManager.getErrorText(netdata.getRetCode().toString()));
          }
        };
        _proto.getBlindLvByMttInfo = function getBlindLvByMttInfo(mtt) {
          var status = mtt.buttonState ? mtt.buttonState : null;
          var timeInfo = mtt.time ? mtt.time : null;
          var timeType = timeInfo ? timeInfo.type : null; // 1=截止报名 2=比赛开始 3=延迟状态 4=已经开赛 5=比赛关闭 6=比赛结束
          var blindinfo = mtt.gameinfo;
          var blindround = blindinfo.blindround ? blindinfo.blindround : 1;
          var starttime = mtt.rule.startTime || 0;
          if (starttime > Utils.curServerTimeSecondstamp) {
            blindround = 1;
          } else if (status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH || status > 0 && (GameConst.MATCH.ETimeType.MATCH_CLOSED == timeType || GameConst.MATCH.ETimeType.MATCH_FINISHED == timeType)) {
            blindround = 1;
          }
          return blindround;
        };
        _proto.onMsgGetMttFreshInfoRsp = function onMsgGetMttFreshInfoRsp(netdata) {
          if (!this.node.active) return;
          var info = netdata.getData(_cjsExports.mtt.MsgGetMttFreshInfoRsp);
          if (info != null && this.itemData && this.itemData.roomType == GameConst.ERoomType.mtt && info.mttid == this.itemData.mtt.mttid) {
            this.itemData.mtt.buttonState = info.buttonState;
            this.itemData.mtt.time = info.time;
            this.itemData.mtt.isEntranceClose = info.isEntranceClose;
            this.itemData.mtt.waitBalanceStart = info.waitBalanceStart;
            this.m_GameTypeControl.selectedIndex = 1;
            this.setMatchItemInfo(this.itemData.mtt);
            if (this._itemChange) {
              this._itemChange(this.itemData);
            }
          }
        };
        _proto.onMsgEntryPlayerNumChangeCast = function onMsgEntryPlayerNumChangeCast(netdata) {
          if (!this.node.active) return;
          if (!this.itemData) return;
          if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.mtt.MsgEntryPlayerNumChangeCast);
            if (this.itemData.roomType == GameConst.ERoomType.mtt && info.mttid == this.itemData.mtt.mttid) {
              this.itemData.mtt.num = info.num;
              this.itemData.mtt.memberrank.num = info.inNum;
              this.setItem(this.itemData, this.itemIndex, this._listCB, this._itemChange);
              if (this._itemChange) {
                this._itemChange(this.itemData);
              }
            }
          }
        };
        _proto.update = function update() {
          if (this.itemData.roomType != GameConst.ERoomType.mtt) {
            return;
          }
          if (!this.isCountDownStatus) {
            return;
          }
          var flag = this.isLateRegTime;
          this.refreshDateInfoByCurrentData(this.itemData.mtt);
          if (flag != self.isLateRegTime) {
            this.refreshActionButtonStatusByMatchInfo(this.itemData.mtt);
          }
        };
        _proto.startTick = function startTick() {
          var scheduler = director.getScheduler();
          if (!scheduler.isScheduled(this.update, this)) {
            scheduler.scheduleUpdate(this, 0, false);
          }
        };
        _proto.stop = function stop() {
          director.getScheduler().unscheduleAllForTarget(this);
        };
        _proto.pause = function pause() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (!scheduler.isTargetPaused(this)) {
              scheduler.pauseTarget(this);
            }
          }
        };
        _proto.resume = function resume() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (scheduler.isTargetPaused(this)) {
              scheduler.resumeTarget(this);
            }
          }
        };
        return RoomItemPlus;
      }(UI_RoomItemPlus), (_applyDecoratedDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetMttFreshInfoRsp"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgEntryPlayerNumChangeCast", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgEntryPlayerNumChangeCast"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SelectDefaultAvatarDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './gameproto.mjs_cjs=&original=.js', './GameWindowBase.ts', './UI_SelectDefaultAvatarDialog.ts', './RoleData.ts', './RoleProxy.ts', './GameDecorators.ts', './gameproto.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, Event, EEnterType, GameWindowBase, UI_SelectDefaultAvatarDialog, RoleData, RoleProxy, MarkForNetEventListener, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, null, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_SelectDefaultAvatarDialog = module.default;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      RoleProxy = module.RoleProxy;
    }, function (module) {
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "fa72biLLQVHHrYLFL7RaDjq", "SelectDefaultAvatarDialog", undefined);
      var SelectDefaultAvatarDialog = exports('SelectDefaultAvatarDialog', (_dec = MarkForNetEventListener(_cjsExports.role.MsgSetRoleInfoRsp.ProtocolID), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(SelectDefaultAvatarDialog, _GameWindowBase);
        function SelectDefaultAvatarDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_SelectDefaultAvatarDialog;
          _this.gestureCloseWindow = false;
          _this.coverUnderlyingWindow = false;
          _this.showBlackMask = true;
          _this.clickOutsideHide = true;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.vertical;
          _this.reportOpenPage = true;
          _this.pageName = 'SelectDefaultAvatarDialog';
          _this.hookList = [];
          _this._curSelectedImg = '';
          _this._defaultHeadImgs = ['/heads/telegram/female_1.jpg', '/heads/telegram/female_2.jpg', '/heads/telegram/female_3.jpg', '/heads/telegram/female_4.jpg', '/heads/telegram/female_5.jpg', '/heads/telegram/female_6.jpg', '/heads/telegram/female_7.jpg', '/heads/telegram/female_8.jpg', '/heads/telegram/female_9.jpg', '/heads/telegram/female_10.jpg'];
          return _this;
        }
        SelectDefaultAvatarDialog.create = function create(from) {
          return new SelectDefaultAvatarDialog(from);
        };
        var _proto = SelectDefaultAvatarDialog.prototype;
        _proto.onInit = function onInit() {
          this.pane.m_TableList.itemRenderer = this.renderListItem.bind(this);
          this.pane.m_TableList.on(Event.CLICK_ITEM, this.onItemClick, this);
          var frame = this.pane.m_frame;
          frame.m_btnCancel.onClick(this.hide, this);
          frame.m_btnConfirm.onClick(this.onBtnConfirmClick, this);
          this._curSelectedImg = RoleData.inst.avatar;
          var userHeads = RoleData.inst.usedHeads || [];
          var uniDefaultImg = new Set([].concat(this._defaultHeadImgs, userHeads));
          this._defaultHeadImgs = Array.from(uniDefaultImg);
          this.initTable();
        };
        _proto.addHook = function addHook(hook) {
          _GameWindowBase.prototype.addHook.call(this, hook);
        };
        _proto.renderListItem = function renderListItem(index, node) {
          if (index < 0 || index >= this._defaultHeadImgs.length) return;
          var imgUrl = this._defaultHeadImgs[index];
          if (!imgUrl || imgUrl == '') return;
          node.setItem(index, imgUrl);
        };
        _proto.initTable = function initTable() {
          this.pane.m_TableList.numItems = this._defaultHeadImgs.length;
        };
        _proto.onItemClick = function onItemClick(target) {
          this._curSelectedImg = target.imgUrl;
          this.resetItemStatus();
          target.setSelectStatus(true);
        };
        _proto.resetItemStatus = function resetItemStatus() {
          this.pane.m_TableList._children.forEach(function (target) {
            target.setSelectStatus(false);
          });
        };
        _proto.onBtnConfirmClick = function onBtnConfirmClick() {
          if (this._curSelectedImg == RoleData.inst.avatar) {
            for (var i = 0; i < this.hookList.length; i++) {
              var hook = this.hookList[i];
              if (hook.onSelectAvatarComplete) {
                hook.onSelectAvatarComplete();
              }
            }
            this.hide();
            return;
          }
          RoleProxy.inst.onMsgSetRoleInfo(RoleData.inst.nick, this._curSelectedImg);
        };
        _proto.onMsgSetRoleInfoRsp = function onMsgSetRoleInfoRsp() {
          for (var i = 0; i < this.hookList.length; i++) {
            var hook = this.hookList[i];
            if (hook.onSelectAvatarComplete) {
              hook.onSelectAvatarComplete();
            }
          }
          this.hide();
          this.grootInst.showCenterTip('TXT_65');
        };
        return SelectDefaultAvatarDialog;
      }(GameWindowBase), _applyDecoratedDescriptor(_class.prototype, "onMsgSetRoleInfoRsp", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onMsgSetRoleInfoRsp"), _class.prototype), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ServerMaintenancePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_ServerMaintenanceDialoa.ts', './GameWindowBase.ts', './LanguageManage.ts'], function (exports) {
  var _inheritsLoose, cclegacy, game, UI_ServerMaintenanceDialoa, GameWindowBase, LanguageManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
    }, function (module) {
      UI_ServerMaintenanceDialoa = module.default;
    }, function (module) {
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      LanguageManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "92f49ong4NG6b8bimz/o8/V", "ServerMaintenancePage", undefined);
      var ServerMaintenancePage = exports('ServerMaintenancePage', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(ServerMaintenancePage, _GameWindowBase);
        function ServerMaintenancePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Public'];
          _this.paneClass = UI_ServerMaintenanceDialoa;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = false;
          _this.showBlackMask = true;
          _this.clickOutsideHide = false;
          _this.coverUnderlyingWindow = false;
          _this.pageName = 'ServerMaintenancePage';
          return _this;
        }
        ServerMaintenancePage.create = function create(from) {
          return new ServerMaintenancePage(from);
        };
        var _proto = ServerMaintenancePage.prototype;
        // todo 指示 params 类型
        _proto.setInputParams = function setInputParams(params) {
          _GameWindowBase.prototype.setInputParams.call(this, params);
        };
        _proto.onInit = function onInit() {
          if (!this.inputParams) {
            this.hide();
            return;
          }
          var frame = this.pane.m_frame;
          frame.m_btnConfirm.onClick(function () {
            game.emit('do_restart_game');
          }, this);
          var starttime = this.inputParams.start_time;
          var endtime = this.inputParams.end_time;
          var content = this.inputParams.content;
          var msg = this.inputParams && this.inputParams.stopServerBulletin ? this.inputParams.stopServerBulletin : '';
          this.pane.m_frame.title = this.inputParams.title;

          // let zone = Intl.DateTimeFormat().resolvedOptions().timeZone;
          this.pane.m_TextStart.text = new Date(starttime * 1000).toUTCString();
          this.pane.m_TextEnd.text = new Date(endtime * 1000).toUTCString();
          if (msg != '') {
            this.pane.m_TextContent.text = msg;
          } else {
            this.pane.m_TextContent.text = content ? content : LanguageManager.get('TXT_374');
          }
        };
        _proto.onHide = function onHide() {
          _GameWindowBase.prototype.onHide.call(this);
          game.emit('do_restart_game');
        };
        return ServerMaintenancePage;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShopData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameDecorators.ts', './mobx.ts'], function (exports) {
  var _createClass, cclegacy, GameDataClass, makeAutoObservable;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameDataClass = module.GameDataClass;
    }, function (module) {
      makeAutoObservable = module.makeAutoObservable;
    }],
    execute: function () {
      var _SHOP_TYPE_2_PAGE_ID, _class, _class2;
      cclegacy._RF.push({}, "23346fuEnJEeY/UZFqw4c5b", "ShopData", undefined);
      /**
       * 1筹码  2钻石  4道具  不传值表示获取所有类型
       */
      var SHOP_ITEM = exports('SHOP_ITEM', /*#__PURE__*/function (SHOP_ITEM) {
        SHOP_ITEM[SHOP_ITEM["none"] = 0] = "none";
        SHOP_ITEM[SHOP_ITEM["gold"] = 1] = "gold";
        SHOP_ITEM[SHOP_ITEM["diamind"] = 2] = "diamind";
        SHOP_ITEM[SHOP_ITEM["props"] = 4] = "props";
        return SHOP_ITEM;
      }({}));
      var SHOP_TYPE_2_PAGE_ID = exports('SHOP_TYPE_2_PAGE_ID', (_SHOP_TYPE_2_PAGE_ID = {}, _SHOP_TYPE_2_PAGE_ID[SHOP_ITEM.gold] = 0, _SHOP_TYPE_2_PAGE_ID[SHOP_ITEM.diamind] = 1, _SHOP_TYPE_2_PAGE_ID[SHOP_ITEM.props] = 2, _SHOP_TYPE_2_PAGE_ID));
      var ShopData = exports('ShopData', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function ShopData() {
          // ========== 获取产品列表返回 ==========
          this._MsgProductListRsp = null;
          // ========== 获取支付记录 =================
          this._MsgGetPaySuccRecordRsp = null;
          // 获取VIP特权配置
          this._MsgGetVipPrivilegeConfigRsp = null;
          // 使用钻石购买商品
          this._MsgUseDiamondPayRsp = null;
          // 赠送道具
          this._MsgSendUserItemRsp = null;
          //==============广播支付成功 ==============================
          this._MsgPaySuccCast = null;
          // ========= 网络链列表 =================================
          this._chainList = [];
          // ========= 网络 Key =================================
          this._chainKey = void 0;
          // ========= 支付网络地址 =================================
          this._chainAddress = void 0;
          makeAutoObservable(this);
        }
        var _proto = ShopData.prototype;
        //获取制定类型产品列表
        _proto.getProdoctsByType = function getProdoctsByType(type) {
          var retlist = [];
          if (this._MsgProductListRsp == null) return retlist;
          if (type == SHOP_ITEM.none) return this._MsgProductListRsp.list;
          for (var idx = 0; idx < this._MsgProductListRsp.list.length; idx++) {
            var item = this._MsgProductListRsp.list[idx];
            if (item.type == type) {
              retlist.push(item);
            }
          }
          retlist.sort(function (a, b) {
            if (a.propId != b.propId) {
              return a.propId - b.propId;
            } else {
              return a.cost - b.cost;
            }
          });
          return retlist;
        }

        //根据商品id和天数获取商品信息
        ;

        _proto.getProductByIdAndDay = function getProductByIdAndDay(id, day) {
          if (!this._MsgProductListRsp || !this._MsgProductListRsp.list || this._MsgProductListRsp.list.length <= 0) return null;
          for (var idx = 0; idx < this._MsgProductListRsp.list.length; idx++) {
            var item = this._MsgProductListRsp.list[idx];
            if (item.propId == id && item.effectiveDay == day) {
              return item;
            }
          }
          return null;
        }

        //获取vip权限信息
        ;

        _proto.getVipPrivilegeConfigByVip = function getVipPrivilegeConfigByVip(vip) {
          var ret = [];
          if (!this._MsgGetVipPrivilegeConfigRsp || !this._MsgGetVipPrivilegeConfigRsp.list || this._MsgGetVipPrivilegeConfigRsp.list.length <= 0) return;
          for (var idx = 0; idx < this._MsgGetVipPrivilegeConfigRsp.list.length; idx++) {
            var item = this._MsgGetVipPrivilegeConfigRsp.list[idx];
            if (item.level == vip) {
              ret.push(item);
            }
          }
          return ret;
        };
        _proto.getVipPrivilegeInfoByDay = function getVipPrivilegeInfoByDay(day, data) {
          if (!data) return;
          for (var i = 0; i < data.length; i++) {
            var info = data[i];
            if (info.validDay == day) {
              return info;
            }
          }
        };
        _createClass(ShopData, [{
          key: "MsgProductListRsp",
          get: function get() {
            return this._MsgProductListRsp;
          },
          set: function set(msg) {
            this._MsgProductListRsp = msg;
          }
        }, {
          key: "MsgGetPaySuccRecordRsp",
          get: function get() {
            return this._MsgGetPaySuccRecordRsp;
          },
          set: function set(msg) {
            this._MsgGetPaySuccRecordRsp = msg;
          }
        }, {
          key: "MsgGetVipPrivilegeConfigRsp",
          get: function get() {
            return this._MsgGetVipPrivilegeConfigRsp;
          },
          set: function set(msg) {
            this._MsgGetVipPrivilegeConfigRsp = msg;
          }
        }, {
          key: "MsgUseDiamondPayRsp",
          get: function get() {
            return this._MsgUseDiamondPayRsp;
          },
          set: function set(msg) {
            this._MsgUseDiamondPayRsp = msg;
          }
        }, {
          key: "MsgSendUserItemRsp",
          get: function get() {
            return this._MsgSendUserItemRsp;
          },
          set: function set(msg) {
            this._MsgSendUserItemRsp = msg;
          }
        }, {
          key: "MsgPaySuccCast",
          get: function get() {
            return this._MsgPaySuccCast;
          },
          set: function set(msg) {
            this._MsgPaySuccCast = msg;
          }
        }, {
          key: "chainList",
          get: function get() {
            return this._chainList;
          },
          set: function set(list) {
            this._chainList = list;
          }
        }, {
          key: "chainKey",
          get: function get() {
            return this._chainKey;
          },
          set: function set(key) {
            this._chainKey = key;
          }
        }, {
          key: "chainAddress",
          get: function get() {
            return this._chainAddress;
          },
          set: function set(address) {
            this._chainAddress = address;
          }
        }], [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return ShopData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShopProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './CocosDevKit.ts', './ShopData.ts', './gameproto.js', './Logger.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, NetProxyClass, MarkForNetEventListener, GameNetProxyBase, ShopData, _cjsExports, Log, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      NetProxyClass = module.NetProxyClass;
      MarkForNetEventListener = module.MarkForNetEventListener;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, null, function (module) {
      ShopData = module.ShopData;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _class3;
      cclegacy._RF.push({}, "ec066XkgjFBtKQffyeK9zI2", "ShopProxy", undefined);
      var ShopProxy = exports('ShopProxy', (_dec = NetProxyClass(), _dec2 = MarkForNetEventListener(_cjsExports.store.MsgProductListRsp.ProtocolID), _dec3 = MarkForNetEventListener(_cjsExports.store.MsgGetVipPrivilegeConfigRsp.ProtocolID), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(ShopProxy, _GameNetProxyBase);
        function ShopProxy() {
          return _GameNetProxyBase.apply(this, arguments) || this;
        }
        var _proto = ShopProxy.prototype;
        _proto.prepareRequest = function prepareRequest() {
          Log.info.log('ShopProxy', 'prepareRequest');
          return Promise.all([this.getMsgProductList(), this.getMsgGetVipPrivilegeConfig()]);
        }

        /**
         * 获取产品列表
         */;
        _proto.getMsgProductList = function getMsgProductList() {
          var _this = this;
          if (ShopData.inst.MsgProductListRsp) return Promise.resolve();
          return new Promise(function (resolve) {
            _this.send(_cjsExports.store.MsgProductList.ProtocolID, _cjsExports.store.MsgProductList.encode({}).finish(), resolve);
          });
        };
        _proto.onMsgProductList = function onMsgProductList(netdata) {
          var info = netdata.getData(_cjsExports.store.MsgProductListRsp);
          ShopData.inst.MsgProductListRsp = info;
        }

        /**
         * 获取购买记录
         */;
        _proto.getPaySuccRecord = function getPaySuccRecord(type) {
          this.send(_cjsExports.store.MsgGetPaySuccRecord.ProtocolID, _cjsExports.store.MsgGetPaySuccRecord.encode({
            type: type
          }).finish(), this.onMsgGetPaySuccRecordRsp.bind(this));
        };
        _proto.onMsgGetPaySuccRecordRsp = function onMsgGetPaySuccRecordRsp(netdata) {
          var info = netdata.getData(_cjsExports.store.MsgGetPaySuccRecordRsp);
          Log.debug.log('proxy', info.list);
          ShopData.inst.MsgGetPaySuccRecordRsp = info;
        }

        /**
         * 使用钻石购买商品
         */;
        _proto.onMsgUseDiamondPay = function onMsgUseDiamondPay(shopid) {
          this.send(_cjsExports.store.MsgUseDiamondPay.ProtocolID, _cjsExports.store.MsgUseDiamondPay.encode({
            id: shopid
          }).finish(), this.onMsgUseDiamondPayRsp.bind(this));
        };
        _proto.onMsgUseDiamondPayRsp = function onMsgUseDiamondPayRsp(netdata) {
          var info = netdata.getData(_cjsExports.store.MsgUseDiamondPayRsp);
          if (netdata.isRetSuccess()) ;
        }

        /**
         * 购买产品
         */;
        _proto.buyGoods = /*#__PURE__*/
        function () {
          var _buyGoods = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(shopid) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.checkUnfinishedOrder().then(function () {
                    return Promise.resolve('true');
                  });
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function buyGoods(_x) {
            return _buyGoods.apply(this, arguments);
          }
          return buyGoods;
        }();
        _proto.checkUnfinishedOrder = /*#__PURE__*/function () {
          var _checkUnfinishedOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise(function (resolve) {
                    //调用sdk支付 mark
                    // return resolve(true);
                  }));
                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function checkUnfinishedOrder() {
            return _checkUnfinishedOrder.apply(this, arguments);
          }
          return checkUnfinishedOrder;
        }() //获取vip配置信息
        ;

        _proto.getMsgGetVipPrivilegeConfig = function getMsgGetVipPrivilegeConfig() {
          var _this2 = this;
          if (ShopData.inst.MsgGetVipPrivilegeConfigRsp) return Promise.resolve();
          return new Promise(function (resolve) {
            var msg = _cjsExports.store.MsgGetVipPrivilegeConfig.create();
            if (ShopData.inst.MsgGetVipPrivilegeConfigRsp) {
              msg.md5 = ShopData.inst.MsgGetVipPrivilegeConfigRsp.md5;
            } else {
              msg.md5 = Utils.curLocalTimestamp.toString();
            }
            _this2.send(_cjsExports.store.MsgGetVipPrivilegeConfig.ProtocolID, _cjsExports.store.MsgGetVipPrivilegeConfig.encode(msg).finish(), resolve);
          });
        };
        _proto.onMsgGetVipPrivilegeConfigRsp = function onMsgGetVipPrivilegeConfigRsp(netdata) {
          var info = netdata.getData(_cjsExports.store.MsgGetVipPrivilegeConfigRsp);
          if (info.list && info.list.length > 0) {
            ShopData.inst.MsgGetVipPrivilegeConfigRsp = info;
          }
        };
        _createClass(ShopProxy, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return ShopProxy;
      }(GameNetProxyBase), _class3._inst = void 0, _class3), (_applyDecoratedDescriptor(_class2.prototype, "onMsgProductList", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgProductList"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMsgGetVipPrivilegeConfigRsp", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onMsgGetVipPrivilegeConfigRsp"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StatisticsData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameDecorators.ts', './Utils.ts', './mobx.ts'], function (exports) {
  var _createClass, cclegacy, GameDataClass, Utils, makeAutoObservable;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameDataClass = module.GameDataClass;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      makeAutoObservable = module.makeAutoObservable;
    }],
    execute: function () {
      var _class, _class2;
      cclegacy._RF.push({}, "70a07Yb7nFIyZs6VN46XEmc", "StatisticsData", undefined);
      var StatisticsData = exports('StatisticsData', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function StatisticsData() {
          // =========获取每手牌信息===========
          this._MsgGetPlayerHandsRecordRsp = null;
          // =========获取收藏牌局信息===========
          this._MsgGetCollectRecordRsp = null;
          makeAutoObservable(this);
        }
        var _proto = StatisticsData.prototype;
        //获取每手牌信息
        _proto.getPlayerHandsRecord = function getPlayerHandsRecord() {
          return this._MsgGetPlayerHandsRecordRsp ? this._MsgGetPlayerHandsRecordRsp.list : [];
        }

        //获取收藏牌局信息
        ;

        _proto.getCollectRecord = function getCollectRecord() {
          return this._MsgGetCollectRecordRsp ? this._MsgGetCollectRecordRsp.list : [];
        }

        //根据日期排序手牌信息
        ;

        _proto.getPlayerHandsRecordSortData = function getPlayerHandsRecordSortData() {
          return this.getRecordSortData(this.getPlayerHandsRecord());
        }

        //根据日期排序收藏牌局信息
        ;

        _proto.getCollectRecordSortData = function getCollectRecordSortData() {
          var retlist = [];
          this.getPlayerHandsRecord().forEach(function (item) {
            if (item.collected) {
              retlist.push(item);
            }
          });
          return this.getRecordSortData(retlist);
        }
        //修改手牌中收藏信息
        ;

        _proto.modifyPlayerHandsRecodeByCollectId = function modifyPlayerHandsRecodeByCollectId(collectid, bCollect) {
          this.getPlayerHandsRecord().forEach(function (item) {
            if (item.collectId == collectid) {
              item.collected = bCollect;
            }
          });
        };
        _proto.getRecordSortData = function getRecordSortData(list) {
          var retlist = new Map();
          if (list.length <= 0) return retlist;
          list.sort(function (a, b) {
            return b.cTime - a.cTime;
          }).forEach(function (item) {
            var data = Utils.formatDate(item.cTime * 1000, '/');
            if (!retlist.get(data)) {
              retlist.set(data, []);
            }
            retlist.get(data).push(item);
          });
          return retlist;
        };
        _createClass(StatisticsData, [{
          key: "MsgGetPlayerHandsRecordRsp",
          get: function get() {
            return this._MsgGetPlayerHandsRecordRsp;
          },
          set: function set(msg) {
            this._MsgGetPlayerHandsRecordRsp = msg;
          }
        }, {
          key: "MsgGetCollectRecordRsp",
          get: function get() {
            return this._MsgGetCollectRecordRsp;
          },
          set: function set(msg) {
            this._MsgGetCollectRecordRsp = msg;
          }
        }], [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return StatisticsData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StatisticsProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './StatisticsData.ts', './gameproto.js'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, NetProxyClass, GameNetProxyBase, StatisticsData, _cjsExports;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      NetProxyClass = module.NetProxyClass;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, function (module) {
      StatisticsData = module.StatisticsData;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "ab773FTchtHeYgwBlws9BmT", "StatisticsProxy", undefined);
      var StatisticsProxy = exports('StatisticsProxy', (_dec = NetProxyClass(), _dec(_class = (_class2 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(StatisticsProxy, _GameNetProxyBase);
        function StatisticsProxy() {
          return _GameNetProxyBase.apply(this, arguments) || this;
        }
        var _proto = StatisticsProxy.prototype;
        /**
         * 获取玩家手牌数据
         */
        _proto.onMsgGetPlayerHandsRecord = function onMsgGetPlayerHandsRecord(cb) {
          var _this = this;
          this.send(_cjsExports.statistics.MsgGetPlayerHandsRecord.ProtocolID, _cjsExports.statistics.MsgGetPlayerHandsRecord.encode({}).finish(), function (netdata) {
            _this.onMsgGetPlayerHandsRecordRsp(netdata);
            cb && cb(netdata);
          });
        };
        _proto.onMsgGetPlayerHandsRecordRsp = function onMsgGetPlayerHandsRecordRsp(netdata) {
          var info = netdata.getData(_cjsExports.statistics.MsgGetPlayerHandsRecordRsp);
          if (netdata.isRetSuccess()) {
            StatisticsData.inst.MsgGetPlayerHandsRecordRsp = info;
          }
        }

        /**
         * 获取收藏的牌局(优化弃用，直接从手牌信息中筛除收藏数据)
         */;
        _proto.onMsgGetCollectRecord = function onMsgGetCollectRecord() {
          this.send(_cjsExports.statistics.MsgGetCollectRecord.ProtocolID, _cjsExports.statistics.MsgGetCollectRecord.encode({}).finish(), this.onMsgGetCollectRecordRsp.bind(this));
        };
        _proto.onMsgGetCollectRecordRsp = function onMsgGetCollectRecordRsp(netdata) {
          var info = netdata.getData(_cjsExports.statistics.MsgGetPlayerHandsRecordRsp);
          if (netdata.isRetSuccess()) {
            StatisticsData.inst.MsgGetPlayerHandsRecordRsp = info;
          }
        }

        /**
         * 收藏牌局
         */;
        _proto.onMsgCollectRecordAdd = function onMsgCollectRecordAdd(collectid) {
          this.send(_cjsExports.statistics.MsgCollectRecordAdd.ProtocolID, _cjsExports.statistics.MsgCollectRecordAdd.encode({
            collectId: collectid
          }).finish(), null);
        }

        /**
         * 取消收藏牌局
         */;
        _proto.onMsgCollectRecordDel = function onMsgCollectRecordDel(collectid) {
          this.send(_cjsExports.statistics.MsgCollectRecordDel.ProtocolID, _cjsExports.statistics.MsgCollectRecordDel.encode({
            collectId: collectid
          }).finish(), null);
        };
        _createClass(StatisticsProxy, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return StatisticsProxy;
      }(GameNetProxyBase), _class2._inst = void 0, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TablePlayerTimeCountdown.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_TablePlayerTimeCountdown.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, math, CustomFguiClass, UI_TablePlayerTimeCountdown;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TablePlayerTimeCountdown = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "0a5432wlk1M0YexMSKqdu0u", "TablePlayerTimeCountdown", undefined);

      /**
       * 圆形进度条组件，最好方放到 GLoader 中使用
       */
      var TablePlayerTimeCountdown = exports('TablePlayerTimeCountdown', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TablePlayerTimeCo) {
        _inheritsLoose(TablePlayerTimeCountdown, _UI_TablePlayerTimeCo);
        function TablePlayerTimeCountdown() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TablePlayerTimeCo.call.apply(_UI_TablePlayerTimeCo, [this].concat(args)) || this;
          _this._progress = void 0;
          return _this;
        }
        var _proto = TablePlayerTimeCountdown.prototype;
        /**
         * 跟新圆点位置
         */
        _proto.updatePointPosition = function updatePointPosition() {
          if (!this.m_point.visible) return;
          var centerGlobal = this.m_content.localToGlobal(0, 0);
          var center = this.globalToLocal(centerGlobal.x, centerGlobal.y);
          var radius = this.m_content.width / 2 - 3;
          var startPosition = center.clone().subtract2f(0, radius);
          var vec = startPosition.clone().subtract(center.clone());
          vec = vec.rotate(math.toRadian(360 * this._progress));
          var pos = vec.add(center.clone());
          this.m_point.x = pos.x;
          this.m_point.y = pos.y;
        };
        _proto.setTextTime = function setTextTime(str) {
          this.m_textTime.text = str;
        };
        _createClass(TablePlayerTimeCountdown, [{
          key: "progress",
          get:
          /**
           * 进度值
           */
          function get() {
            return this._progress;
          },
          set: function set(v) {
            this._progress = Math.max(Math.min(v, 1), 0);
            this.m_content.fillAmount = this._progress;
            this.updatePointPosition();
          }
        }]);
        return TablePlayerTimeCountdown;
      }(UI_TablePlayerTimeCountdown)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Task.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Logger.ts'], function (exports) {
  var _createClass, cclegacy, sys, Log;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "57483NnLfVO0YrHqsWriUmg", "Task", undefined);

      /**
       * js Array 的 sort 方法会采用快速排序，会导致排序结果不稳定，因此使用插入排序
       * @param arr
       * @param comparefn
       */
      function TaskSort(arr, comparefn) {
        for (var i = 1; i < arr.length; i++) {
          var temp = arr[i];
          var j = i - 1;
          while (j >= 0 && comparefn(arr[j], temp)) {
            arr[j + 1] = arr[j];
            j--;
          }
          arr[j + 1] = temp;
        }
      }
      var Task = exports('Task', /*#__PURE__*/function () {
        Task.create = function create(tag, taskName, handlerFunction) {
          for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
            params[_key - 3] = arguments[_key];
          }
          return new Task(tag, taskName, handlerFunction, params);
        };
        function Task(_tag, _taskName, handlerFunction, argArray) {
          this.LogTag = void 0;
          this._handlerFunction = void 0;
          this.addTime = void 0;
          this.running = false;
          this.finish = false;
          this._tag = _tag;
          this._taskName = _taskName;
          this.argArray = argArray;
          this.LogTag = "[Task_" + _tag + "_" + _taskName + "]";
          this._handlerFunction = handlerFunction;
        }
        var _proto = Task.prototype;
        _proto.execute = function execute(delegate) {
          var _this = this;
          Log.task.log(this.LogTag, 'execute');
          this.running = true;
          if (this._handlerFunction) {
            return this._handlerFunction.apply(this, this.argArray).then(function () {
              _this.finish = true;
            });
          } else if (delegate) {
            return delegate.executeTask.apply(delegate, [this.tag, this.taskName].concat(this.argArray)).then(function () {
              _this.finish = true;
            });
          } else {
            Log.task.warn("Have no task execute delegate. module: " + this.tag + ", taskName: " + this.taskName);
            return Promise.resolve();
          }
        };
        _createClass(Task, [{
          key: "tag",
          get: function get() {
            return this._tag;
          }
        }, {
          key: "taskName",
          get: function get() {
            return this._taskName;
          }
        }]);
        return Task;
      }());
      var TaskManager = exports('TaskManager', /*#__PURE__*/function () {
        TaskManager.getTaskManager = function getTaskManager(tag) {
          if (!this.cache.has(tag)) {
            this.cache.set(tag, new TaskManager(tag));
          }
          return this.cache.get(tag);
        };
        function TaskManager(tag) {
          this.LogTag = void 0;
          this._pause = true;
          this.queue = [];
          this.taskExecuteDelegate = void 0;
          this.tag = tag;
          this.LogTag = "[TaskManager_" + tag + "]";
        }
        var _proto2 = TaskManager.prototype;
        _proto2.setExecuteDelegate = function setExecuteDelegate(delegate) {
          this.taskExecuteDelegate = delegate;
        };
        _proto2.add = function add(task, startRun) {
          if (startRun === void 0) {
            startRun = false;
          }
          Log.task.log(this.LogTag, 'add', task.taskName);
          task.addTime = sys.now();
          this.queue.push(task);
          if (startRun) {
            this.execute();
          }
        };
        _proto2.removeByIndex = function removeByIndex(index) {
          Log.task.log(this.LogTag, 'removeByIndex', index);
          var len = this.queue.length;
          if (index < len && index > 0) {
            if (!this.queue[index].running) {
              this.queue.splice(index, 1);
            } else {
              var task = this.queue[index];
              Log.task.warn(this.LogTag, 'remove', "Cannot remove the running task: " + task.taskName);
            }
          } else {
            Log.task.warn(this.LogTag, 'remove', "The index '" + index + "' is out of range, cur size is " + len);
          }
        };
        _proto2.removeByTag = function removeByTag(tag) {
          Log.task.log(this.LogTag, 'removeByTag', tag);
          for (var len = this.queue.length, i = len - 1; i >= 0; i--) {
            var task = this.queue[i];
            if (task.tag == tag && !task.running) {
              this.queue.splice(i, 1);
            }
          }
        };
        _proto2.removeByTaskName = function removeByTaskName(taskName) {
          Log.task.log(this.LogTag, 'removeByTaskName', taskName);
          for (var len = this.queue.length, i = len - 1; i >= 0; i--) {
            var task = this.queue[i];
            if (task.taskName == taskName && !task.running) {
              this.queue.splice(i, 1);
            }
          }
        };
        _proto2.removeAll = function removeAll() {
          Log.task.log(this.LogTag, 'removeAll');
          for (var len = this.queue.length, i = len - 1; i >= 0; i--) {
            if (i == 0) {
              if (!this.queue[i].running) {
                this.queue.splice(i, 1);
              }
            } else {
              this.queue.splice(i, 1);
            }
          }
        };
        _proto2.sort = function sort(comparefn) {
          TaskSort(this.queue, comparefn);
        };
        _proto2.execute = function execute() {
          var _this2 = this;
          if (this._pause) return;
          Log.task.log(this.LogTag, 'execute');
          if (this.queue.length > 0) {
            if (!this.queue[0].running) {
              this.queue[0].execute(this.taskExecuteDelegate).then(function () {
                _this2.queue.shift();
                _this2.execute();
              });
            } else {
              Log.task.warn(this.LogTag, 'execute', "The task queue is running.");
            }
          } else {
            Log.task.log(this.LogTag, 'execute', "Finish, the task queue is empty.");
          }
        };
        _proto2.pause = function pause() {
          Log.task.log(this.LogTag, 'pause');
          if (!this._pause) {
            this._pause = true;
          }
        };
        _proto2.run = function run() {
          Log.task.log(this.LogTag, 'run');
          this._pause = false;
          if (this.queue.length > 0) {
            this.execute();
          }
        };
        return TaskManager;
      }());
      TaskManager.cache = new Map();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TelegramAPI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './LoginProxy.ts', './RoleData.ts', './GameConfig.ts', './TelegramDeviceBridge.ts', './HttpProtoBase.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, _inheritsLoose, cclegacy, director, LoginProxy, RoleData, GameConfig, TelegramDeviceBridge, HttpProtoBase;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
    }, null, function (module) {
      LoginProxy = module.LoginProxy;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      TelegramDeviceBridge = module.TelegramDeviceBridge;
    }, function (module) {
      HttpProtoBase = module.HttpProtoBase;
    }],
    execute: function () {
      exports('TelegramAPI', void 0);
      cclegacy._RF.push({}, "2f3d0SqGctNCINIvrRP2vmS", "TelegramAPI", undefined);

      /**
       * @see https://core.telegram.org/bots/api
       */
      var TelegramAPI;
      (function (_TelegramAPI) {
        function getReportBotBase() {
          var token = GameConfig.curConfig.telegramReportBotToken;
          return "https://api.telegram.org/bot" + token;
        }
        var SendReportMessage = /*#__PURE__*/function (_HttpProtoBase2) {
          _inheritsLoose(SendReportMessage, _HttpProtoBase2);
          function SendReportMessage() {
            var _this2;
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            _this2 = _HttpProtoBase2.call.apply(_HttpProtoBase2, [this].concat(args)) || this;
            _this2.encryptEnable = false;
            _this2.postFormData = false;
            _this2.requestUrl = getReportBotBase() + "/sendMessage";
            return _this2;
          }
          SendReportMessage.create = function create(chat_id, text) {
            return new SendReportMessage({
              chat_id: chat_id,
              text: text
            });
          };
          return SendReportMessage;
        }(HttpProtoBase);
        function report(_x) {
          return _report.apply(this, arguments);
        }
        function _report() {
          _report = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(content) {
            var str;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (TelegramDeviceBridge.Instance.isTMA) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return");
                case 2:
                  str = content + "\nClientInfo:";
                  str = str + "\n    loginStatu: " + (LoginProxy.inst ? LoginProxy.inst.loginStatu : 'undefined');
                  str = str + "\n    playerID: " + (RoleData.inst ? RoleData.inst.playerID : 'undefined');
                  SendReportMessage.create(GameConfig.curConfig.telegramReportChatID, str).post();
                case 6:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          return _report.apply(this, arguments);
        }
        _TelegramAPI.report = report;
        director.on('ReportErrorMessage', report);
      })(TelegramAPI || (TelegramAPI = exports('TelegramAPI', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TelegramDeviceBridge.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './index2.js', './CocosDevKit.ts', './CryptoTool.ts', './OnError.ts', './GameConfig.ts', './Logger.ts'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, settings, sys, Cs, A, as, ms, vt, cs, is, ns, gs, CryptoTool, OnError, GameConfig, Log;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      settings = module.settings;
      sys = module.sys;
    }, function (module) {
      Cs = module.isTMA;
      A = module.postEvent;
      as = module.initHapticFeedback;
      ms = module.initUtils;
      vt = module.retrieveLaunchParams;
      cs = module.initInitData;
      is = module.initClosingBehavior;
      ns = module.initBackButton;
      gs = module.initSwipeBehavior;
    }, null, function (module) {
      CryptoTool = module.CryptoTool;
    }, function (module) {
      OnError = module.OnError;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c0336obFhlInrAtybxnuwNi", "TelegramDeviceBridge", undefined);
      /**
       * Telegram Mini Apps SDK documentation.
       * @see https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk
       */
      var TelegramDeviceBridge = exports('TelegramDeviceBridge', /*#__PURE__*/function () {
        function TelegramDeviceBridge() {
          this._queryParamKey = 'startapp';
          this._encryptkey = void 0;
          this._encryptEnable = true;
          this._isTMA = false;
          this._userInfo = void 0;
          this._initDataRaw = void 0;
          this._utils = void 0;
          this._haptic = void 0;
          this._version = void 0;
          this._startParam = void 0;
          this._backButton = void 0;
          this.backTargetList = [];
          this.hookName = 'onDeviceBackButtonClick';
        }
        var _proto = TelegramDeviceBridge.prototype;
        _proto.initDeviceInfo = /*#__PURE__*/function () {
          var _initDeviceInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(encryptkey) {
            var tgMiniApp;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  // Log.game.log('TelegramDeviceBridge', 'initDeviceInfo');
                  console.log('TelegramDeviceBridge', 'initDeviceInfo');
                  if (!sys.isNative) {
                    _context.next = 6;
                    break;
                  }
                  console.log('TelegramDeviceBridge', 'initDeviceInfo', 'is Native');
                  this._isTMA = false;
                  _context.next = 20;
                  break;
                case 6:
                  console.log('TelegramDeviceBridge', 'initDeviceInfo', 'not Native');
                  this._isTMA = false;
                  _context.next = 20;
                  break;
                case 11:
                  tgMiniApp = settings.querySettings('CustomSettings', 'tgMiniApp');
                  console.log('TelegramDeviceBridge', 'initDeviceInfo', 'tgMiniApp', tgMiniApp);
                  if (!tgMiniApp) {
                    _context.next = 19;
                    break;
                  }
                  _context.next = 16;
                  return this.callIsTMA();
                case 16:
                  this._isTMA = _context.sent;
                  _context.next = 20;
                  break;
                case 19:
                  this._isTMA = false;
                case 20:
                  this._encryptkey = encryptkey;
                  this.initTelegram();
                  this.initStartParam();
                  this.initMiniAppInfo();
                  this.initClosingBehavior();
                  this.initBackButton();
                  this.initSwipeBehavior();
                case 27:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function initDeviceInfo(_x) {
            return _initDeviceInfo.apply(this, arguments);
          }
          return initDeviceInfo;
        }();
        _proto.callIsTMA = function callIsTMA() {
          console.log('TelegramDeviceBridge', 'callIsTMA');
          return Cs().then(function (val) {
            console.log('TelegramDeviceBridge', 'callIsTMA', 'return', val);
            return Promise.resolve(val);
          }, function (err) {
            Log.debug.error('TelegramDeviceBridge', 'callIsTMA', 'err:', err);
            console.log('TelegramDeviceBridge', 'callIsTMA', 'return', false);
            return Promise.resolve(false);
          });
        };
        _proto.initTelegram = function initTelegram() {
          if (!this._isTMA) return;
          try {
            console.log('TelegramDeviceBridge', 'initTelegram');
            A('web_app_ready');
            A('web_app_expand');
            this._haptic = as();
            this._utils = ms();
          } catch (error) {
            this._isTMA = false;
            Log.debug.error('TelegramDeviceBridge initTelegram fail:', error);
            // if (error instanceof Error) {
            //     let newerr = new Error(`TelegramDeviceBridge initTelegram fail: ${error.message}`);
            //     newerr.stack = error.stack;
            //     error = newerr;
            // }
            // OnError.cache(error);
          }
        };

        _proto.initMiniAppInfo = function initMiniAppInfo() {
          if (!this._isTMA) return;
          try {
            console.log('TelegramDeviceBridge', 'initMiniAppInfo');
            var _TelegramSDK$retrieve = vt(),
              initDataRaw = _TelegramSDK$retrieve.initDataRaw,
              version = _TelegramSDK$retrieve.version;
            this._initDataRaw = initDataRaw;
            console.log('TelegramDeviceBridge', 'initMiniAppInfo', 'initDataRaw', initDataRaw);
            this._version = version;
            console.log('TelegramDeviceBridge', 'initMiniAppInfo', 'version', version);
            var _TelegramSDK$initInit = cs(),
              user = _TelegramSDK$initInit.user;
            this._userInfo = user;
            console.log('TelegramDeviceBridge', 'initMiniAppInfo', 'user', user);
          } catch (error) {
            this._isTMA = false;
            Log.debug.error('TelegramDeviceBridge initMiniAppInfo fail:', error);
            // if (error instanceof Error) {
            //     let newerr = new Error(`TelegramDeviceBridge initMiniAppInfo fail: ${error.message}`);
            //     newerr.stack = error.stack;
            //     error = newerr;
            // }
            // OnError.cache(error);
          }
        };

        _proto.initStartParam = function initStartParam() {
          if (!this._isTMA) return;
          try {
            console.log('TelegramDeviceBridge', 'initStartParam');
            var _TelegramSDK$retrieve2 = vt(),
              startParam = _TelegramSDK$retrieve2.startParam;
            console.log('TelegramDeviceBridge', '密文 startParam:', startParam);
            if (startParam) {
              this._startParam = JSON.parse(CryptoTool.aesDecryptString(this._encryptkey, startParam, true));
              console.log('TelegramDeviceBridge', '明文 startParam:', this._startParam);
            }
          } catch (error) {
            this._isTMA = false;
            Log.debug.error('TelegramDeviceBridge initStartParam fail:', error);
            // if (error instanceof Error) {
            //     let newerr = new Error(`TelegramDeviceBridge initStartParam fail: ${error.message}`);
            //     newerr.stack = error.stack;
            //     error = newerr;
            // }
            // OnError.cache(error);
          }
        };

        _proto.initClosingBehavior = function initClosingBehavior() {
          if (!this._isTMA) return;
          try {
            console.log('TelegramDeviceBridge', 'initClosingBehavior', 'closingBehavior');
            // 关闭小程序时启用确认对话框
            var _TelegramSDK$initClos = is(),
              closingBehavior = _TelegramSDK$initClos[0];
            closingBehavior.enableConfirmation();
            console.log('TelegramDeviceBridge', 'initClosingBehavior', 'closingBehavior', 'success');
          } catch (error) {
            Log.debug.error('TelegramDeviceBridge initClosingBehavior fail:', error);
            // if (error instanceof Error) {
            //     let newerr = new Error(`TelegramDeviceBridge initClosingBehavior fail: ${error.message}`);
            //     newerr.stack = error.stack;
            //     error = newerr;
            // }
            // OnError.cache(error);
          }
        };

        _proto.initBackButton = function initBackButton() {
          if (!this._isTMA) return;
          try {
            console.log('TelegramDeviceBridge', 'initClosingBehavior', 'initBackButton');
            // 关闭小程序时启用确认对话框
            var _TelegramSDK$initBack = ns(),
              backButton = _TelegramSDK$initBack[0];
            backButton.on('click', this.onBackButtonClick.bind(this), false);
            this._backButton = backButton;
            console.log('TelegramDeviceBridge', 'initClosingBehavior', 'initBackButton', 'success');
          } catch (error) {
            Log.debug.error('TelegramDeviceBridge initBackButton fail:', error);
            // if (error instanceof Error) {
            //     let newerr = new Error(`TelegramDeviceBridge initClosingBehavior fail: ${error.message}`);
            //     newerr.stack = error.stack;
            //     error = newerr;
            // }
            // OnError.cache(error);
          }
        };

        _proto.initSwipeBehavior = function initSwipeBehavior() {
          if (!this._isTMA) return;
          try {
            console.log('TelegramDeviceBridge', 'initSwipeBehavior', 'swipeBehavior');
            // 禁用垂直滑动
            var _TelegramSDK$initSwip = gs(),
              swipeBehavior = _TelegramSDK$initSwip[0];
            swipeBehavior.disableVerticalSwipe();
            console.log('TelegramDeviceBridge', 'initSwipeBehavior', 'swipeBehavior', 'success');
          } catch (error) {
            Log.debug.error('TelegramDeviceBridge initSwipeBehavior fail:', error);
            // if (error instanceof Error) {
            //     let newerr = new Error(`TelegramDeviceBridge initSwipeBehavior fail: ${error.message}`);
            //     newerr.stack = error.stack;
            //     error = newerr;
            // }
            // OnError.cache(error);
          }
        };

        _proto.shareURL = function shareURL(_ref) {
          var url = _ref.url,
            params = _ref.params,
            text = _ref.text;
          if (!this._isTMA) return;
          try {
            var urlTemp = url;
            if (!urlTemp) {
              urlTemp = GameConfig.curConfig.telegramShareLink;
            }
            var paramsStr;
            if (params) {
              paramsStr = this._queryParamKey + '=';
              var paramsJSON = JSON.stringify(params);
              if (this._encryptEnable) {
                paramsStr += CryptoTool.aesEncryptString(this._encryptkey, paramsJSON, true);
                Log.game.log('TelegramDeviceBridge', '密文', paramsStr);
                Log.game.log('TelegramDeviceBridge', '明文', params);
              } else {
                paramsStr += paramsJSON;
                Log.game.log('TelegramDeviceBridge', '明文', paramsStr);
              }
            }
            var shareLink = urlTemp + "?" + paramsStr;
            Log.game.log('TelegramDeviceBridge', 'shareLink:', shareLink);
            this._utils.shareURL(shareLink, text);
          } catch (error) {
            Log.debug.error('TelegramDeviceBridge shareURL fail:', error);
            if (error instanceof Error) {
              var newerr = new Error("TelegramDeviceBridge shareURL fail: " + error.message);
              newerr.stack = error.stack;
              error = newerr;
            }
            OnError.cache(error);
          }
        };
        _proto.shortVibrate = function shortVibrate(level) {
          if (!this._isTMA) return;
          switch (level) {
            case 1:
              this._haptic.impactOccurred('light');
              break;
            case 2:
              this._haptic.impactOccurred('medium');
              break;
            case 3:
              this._haptic.impactOccurred('heavy');
              break;
          }
        };
        _proto.warnVibrate = function warnVibrate() {
          if (!this._isTMA) return;
          this._haptic.notificationOccurred('warning');
        };
        _proto.openTelegramLink = function openTelegramLink(url) {
          if (!this._isTMA) return;
          var urlTemp = url;
          if (!urlTemp) {
            urlTemp = GameConfig.curConfig.telegramChannelLink;
          }
          this._utils.openTelegramLink(urlTemp);
        };
        _proto.openLink = function openLink(url) {
          if (!this._isTMA) return;
          this._utils.openLink(url);
        };
        _proto.getShareUrl = function getShareUrl(_ref2) {
          var url = _ref2.url,
            params = _ref2.params,
            text = _ref2.text;
          //if (!this._isTMA) return '';
          var urlTemp = url;
          if (!urlTemp) {
            urlTemp = GameConfig.curConfig.telegramShareLink;
          }
          var paramsStr;
          if (params) {
            paramsStr = this._queryParamKey + '=';
            var paramsJSON = JSON.stringify(params);
            if (this._encryptEnable) {
              paramsStr += CryptoTool.aesEncryptString(this._encryptkey, paramsJSON, true);
              Log.game.log('TelegramDeviceBridge', '密文', paramsStr);
              Log.game.log('TelegramDeviceBridge', '明文', params);
            } else {
              paramsStr += paramsJSON;
              Log.game.log('TelegramDeviceBridge', '明文', paramsStr);
            }
          }
          var shareLink = urlTemp + "?" + paramsStr;
          Log.game.log('TelegramDeviceBridge', 'shareLink:', shareLink);
          return shareLink;
        };
        _proto.pushBackTarget = function pushBackTarget(target) {
          if (!this._isTMA) return;
          var idx = this.backTargetList.indexOf(target);
          if (idx == -1) {
            this.backTargetList.push(target);
          } else {
            this.backTargetList.splice(idx, 1);
            this.backTargetList.push(target);
          }
          // console.log('TelegramDeviceBridge', 'pushBackTarget', target);
          if (!this._backButton.isVisible) {
            this._backButton.show();
          }
        };
        _proto.removeBackTarget = function removeBackTarget(target) {
          if (!this._isTMA) return;
          // console.log('TelegramDeviceBridge', 'removeBackTarget', target);
          if (this.backTargetList.length > 0) {
            var idx = this.backTargetList.indexOf(target);
            if (idx != -1) {
              this.backTargetList.splice(idx, 1);
            }
          }
          var showBack = this.backTargetList.length > 0;
          if (showBack) {
            if (!this._backButton.isVisible) {
              this._backButton.show();
            }
          } else {
            if (this._backButton.isVisible) {
              this._backButton.hide();
            }
          }
        };
        _proto.onBackButtonClick = function onBackButtonClick() {
          // console.log('TelegramDeviceBridge', 'onBackButtonClick -----');
          if (!this._isTMA) return;
          var loadingManager = globalThis.__loadingManager;
          if (!loadingManager) return;
          if (loadingManager.isLoading) return;
          var target;
          if (this.backTargetList.length == 0) return;
          target = this.backTargetList[this.backTargetList.length - 1];
          if (!target) return;
          // console.log('TelegramDeviceBridge', 'onBackButtonClick', target);
          var hook = target[this.hookName];
          if (hook && typeof hook == 'function') {
            try {
              hook.call(target);
            } catch (error) {
              OnError.cache(error);
              this.removeBackTarget(target);
            }
          } else {
            this.removeBackTarget(target);
          }
        };
        _createClass(TelegramDeviceBridge, [{
          key: "isTMA",
          get: function get() {
            return this._isTMA;
          }
        }, {
          key: "initDataRaw",
          get: function get() {
            return this._initDataRaw;
          }
        }, {
          key: "userInfo",
          get: function get() {
            return this._userInfo;
          }
        }, {
          key: "queryParamKey",
          get: function get() {
            return this._queryParamKey;
          }
        }, {
          key: "version",
          get: function get() {
            return this._version;
          }
        }, {
          key: "startParam",
          get: function get() {
            return this._startParam;
          }
        }], [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new TelegramDeviceBridge();
            }
            return this._instance;
          }
        }]);
        return TelegramDeviceBridge;
      }());
      TelegramDeviceBridge._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasActionTag.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageManage.ts', './GameDecorators.ts', './UI_TexasActionTag.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, LanguageManager, CustomFguiClass, UI_TexasActionTag;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasActionTag = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "6f50czGJTxGm5OrJI5zkq7N", "TexasActionTag", undefined);
      var TexasActionTag = exports('TexasActionTag', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasActionTag) {
        _inheritsLoose(TexasActionTag, _UI_TexasActionTag);
        function TexasActionTag() {
          return _UI_TexasActionTag.apply(this, arguments) || this;
        }
        _createClass(TexasActionTag, [{
          key: "action",
          get:
          // protected onConstruct(): void {
          //     super.onConstruct();
          // }

          // private _action: string

          function get() {
            return this.m_action.selectedPage;
          },
          set: function set(v) {
            this.m_action.selectedPage = v;
            switch (v) {
              case 'check':
                this.m_textContent.text = LanguageManager.get('CCS_TXT_239');
                break;
              case 'fold':
                this.m_textContent.text = LanguageManager.get('CCS_TXT_443');
                break;
              case 'call':
                this.m_textContent.text = LanguageManager.get('TXT_70');
                break;
              case 'raise':
                this.m_textContent.text = LanguageManager.get('CCS_TXT_231');
                break;
              case 'allin':
                this.m_textContent.text = LanguageManager.get('CCS_TXT_208');
                break;
              case 'bet':
                this.m_textContent.text = LanguageManager.get('TXT_491');
                break;
              case 'delay':
                this.m_textContent.text = LanguageManager.get('TXT_348');
                break;
              case 'muck':
                this.m_textContent.text = LanguageManager.get('ROOM_MUCK');
                break;
            }
            this.forceUpdateRecursion();
            this.width = 100 + Math.max(0, this.m_textContent.width - 84);
            this.forceUpdateRecursion();
          }
        }]);
        return TexasActionTag;
      }(UI_TexasActionTag)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasBuyinDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './UI_TexasBuyinDialog.ts', './FSlider.ts', './GameDecorators.ts', './RoleData.ts', './GameConst.ts', './CDKDecorators.ts', './Clock.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, color, UI_TexasBuyinDialog, FSlider, CustomFguiClass, RoleData, GameConst, SafeTimeInterval, Clock, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, null, function (module) {
      UI_TexasBuyinDialog = module.default;
    }, function (module) {
      FSlider = module.FSlider;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Clock = module.Clock;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;
      cclegacy._RF.push({}, "85019V0rjNMCLvPHaQKwYek", "TexasBuyinDialog", undefined);
      var BuyinTotalTime = 60;
      var TimeProgressColor = color('#FFB406');
      var TexasBuyinDialog = exports('TexasBuyinDialog', (_dec = SafeTimeInterval(), _dec2 = SafeTimeInterval(400), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasBuyinDialog) {
        _inheritsLoose(TexasBuyinDialog, _UI_TexasBuyinDialog);
        function TexasBuyinDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasBuyinDialog.call.apply(_UI_TexasBuyinDialog, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.applyNum = void 0;
          _this.timeCountDown = void 0;
          _this.endTime = void 0;
          _this.clock = void 0;
          return _this;
        }
        var _proto = TexasBuyinDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasBuyinDialog.prototype.onConstruct.call(this);
          var frame = this.m_frame;
          frame.m_closeButton.onClick(this.onCloseButtonClick, this);
          this.slider.on(FSlider.EVENT_SLIDER_PERCENT, this.onSliderPercent, this);
          this.m_btnBuyin.onClick(this.onBtnBuyInClick, this);
          this.timeProgress.pointVisible = false;
          this.timeProgress.contentColor = TimeProgressColor;
          this.clock = Clock.create(this);
          this.clock.on(this.onClock, this);
          this.m_btn1.onClick(this.onBtn1Click, this);
          this.m_btn2.onClick(this.onBtn2Click, this);
          this.m_btn3.onClick(this.onBtn3Click, this);
        };
        _proto.closeView = function closeView() {
          this.disenableDeviceBackButtonHandler();
          this.clock.stop();
          this.shareSpace.texasGamePage.popupLayer.m_buyinControler.selectedIndex = 0;
        };
        _proto.openView = function openView(timeCountDown, endTime) {
          if (endTime <= Utils.curServerTimeSecondstamp) {
            return;
          }
          this.shareSpace.texasGamePage.popupLayer.m_buyinControler.selectedIndex = 1;
          this.timeCountDown = timeCountDown;
          this.endTime = endTime;
          this.slider.percent = 1; //默认最大值
          this.updateDialog();
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.closeView();
        };
        _proto.init = function init(shareSpace) {
          this.name = 'TexasBuyinDialog';
          this.shareSpace = shareSpace;
        };
        _proto.onCloseButtonClick = function onCloseButtonClick() {
          this.closeView();
          if (this.timeCountDown) {
            this.shareSpace.roomProxy.standup();
          }
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onCloseButtonClick();
          }
        };
        _proto.onSliderPercent = function onSliderPercent() {
          this._updateDialog();
        };
        _proto.setLeftTime = function setLeftTime(leftTime) {
          leftTime = Math.max(Math.min(leftTime, 60), 0);
          this.clock.run(60, 60 - leftTime);
        };
        _proto.onClock = function onClock() {
          this.m_textProgress.text = '' + Math.floor(this.clock.leftTime);
          this.m_textProgress._label.updateRenderData();
          this.timeProgress.progress = this.clock.leftTime / this.clock.allTime;
          if (this.clock.over) {
            this.closeView();
            if (this.timeCountDown) {
              this.shareSpace.roomProxy.standup();
            }
          }
        };
        _proto.getApplyNum = function getApplyNum(percent) {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          var stepNum = this.shareSpace.texasGameData.bbNum;
          var chipMax = tableInfo.rule.chipMax;
          var chipMin = tableInfo.rule.chipMin;
          var bbNum = this.shareSpace.texasGameData.bbNum;
          var roleChip;
          if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.gold) {
            roleChip = RoleData.inst.chip;
            if (tableInfo.needTimes) {
              stepNum *= 100;
              chipMax *= 100;
              chipMin *= 100;
              roleChip *= 100;
              bbNum *= 100;
            }
          } else if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.cash) {
            roleChip = RoleData.inst.cash;
            if (tableInfo.needTimes) {
              stepNum *= 100;
              chipMax *= 100;
              chipMin *= 100;
              roleChip *= 100;
              bbNum *= 100;
            }
          }
          if (curPlayerInfo.chip > 0) {
            if (chipMin > curPlayerInfo.chip) {
              chipMin = chipMin;
            } else {
              chipMin = curPlayerInfo.chip + bbNum;
            }
          }
          // let maxApply = chipMax; //Math.min(chipMax - curPlayerInfo.chip, roleChip);
          var maxApply = Math.min(curPlayerInfo.chip + roleChip, chipMax);
          var minApply = chipMin; //Math.max(chipMin - curPlayerInfo.chip, 0);

          var applyNum = percent * (maxApply - minApply) + minApply;
          if (applyNum > minApply && applyNum < maxApply) {
            applyNum = Math.round(applyNum / stepNum) * stepNum;
            applyNum = Math.max(Math.min(applyNum, maxApply), minApply);
          }
          return applyNum;
        };
        _proto.updateDialog = function updateDialog() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (!tableInfo) return;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (!curPlayerInfo) return;
          if (this.timeCountDown) {
            this.m_textProgress.visible = true;
            this.timeProgress.visible = true;
            var leftTime = Math.max(Math.min(this.endTime - Utils.curServerTimeSecondstamp, BuyinTotalTime), 0);
            this.clock.run(60, 60 - leftTime);
          } else {
            this.m_textProgress.visible = false;
            this.timeProgress.visible = false;
            this.clock.stop();
          }
          this._updateDialog();
        };
        _proto._updateDialog = function _updateDialog() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (!tableInfo) return;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (!curPlayerInfo) return;
          var flag = this.shareSpace.texasGameData.costType == GameConst.EGameCostType.cash;
          var sb = Utils.toFormat(this.shareSpace.texasGameData.sbNum, 2, flag);
          var bb = Utils.toFormat(this.shareSpace.texasGameData.bbNum, 2, flag);
          this.m_frame.text = "" + tableInfo.rule.name;
          var roleChip;
          if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.gold) {
            roleChip = RoleData.inst.chip;
            if (tableInfo.needTimes) {
              roleChip *= 100;
            }
            this.m_totalScore.text = Utils.toFormat(RoleData.inst.chip);
          } else if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.cash) {
            roleChip = RoleData.inst.cash;
            if (tableInfo.needTimes) {
              roleChip *= 100;
            }
            this.m_totalScore.text = Utils.toFormat(RoleData.inst.cash, 2, true, false);
          }
          this.applyNum = this.getApplyNum(this.slider.percent);
          var score = this.applyNum;
          var enough = score <= roleChip;
          if (tableInfo.needTimes) {
            score /= 100;
          }
          this.m_score.text = Utils.toFormat(score);
          if (curPlayerInfo.chip > 0) {
            enough = this.applyNum - curPlayerInfo.chip <= roleChip;
          }
          this.m_btnBuyin.enabled = score > 0 && enough;
          var apply1 = this.getApplyNum(0);
          enough = apply1 - curPlayerInfo.chip <= roleChip;
          if (tableInfo.needTimes) {
            apply1 /= 100;
          }
          this.m_btn1.title = Utils.toFormat(apply1);
          this.m_btn1.enabled = apply1 > 0 && enough;
          var apply2 = this.getApplyNum(0.5);
          enough = apply2 - curPlayerInfo.chip <= roleChip;
          if (tableInfo.needTimes) {
            apply2 /= 100;
          }
          this.m_btn2.title = Utils.toFormat(apply2);
          this.m_btn2.enabled = apply2 > 0 && enough;
          this.m_btn2.visible = curPlayerInfo.chip <= 0;
          var apply3 = this.getApplyNum(1);
          enough = apply3 - curPlayerInfo.chip <= roleChip;
          if (tableInfo.needTimes) {
            apply3 /= 100;
          }
          this.m_btn3.title = Utils.toFormat(apply3);
          this.m_btn3.enabled = apply3 > 0 && enough;
          this.m_score._label.updateRenderData();
          this.m_totalScore._label.updateRenderData();
          this.forceUpdateRecursion();
        };
        _proto.onBtn1Click = function onBtn1Click() {
          this.slider.percent = 0;
          this._updateDialog();
        };
        _proto.onBtn2Click = function onBtn2Click() {
          this.slider.percent = 0.5;
          this._updateDialog();
        };
        _proto.onBtn3Click = function onBtn3Click() {
          this.slider.percent = 1;
          this._updateDialog();
        };
        _proto.onBtnBuyInClick = function onBtnBuyInClick() {
          this.closeView();
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          this.shareSpace.roomProxy.addChip(this.applyNum - curPlayerInfo.chip);
        };
        _createClass(TexasBuyinDialog, [{
          key: "slider",
          get: function get() {
            return this.m_slider;
          }
        }, {
          key: "timeProgress",
          get: function get() {
            return this.m_timeProgress.component;
          }
        }, {
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_buyinControler.selectedIndex == 1;
          }
        }]);
        return TexasBuyinDialog;
      }(UI_TexasBuyinDialog), (_applyDecoratedDescriptor(_class2.prototype, "onCloseButtonClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onCloseButtonClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnBuyInClick", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnBuyInClick"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasCardTypeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasCardTypeItem.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasCardTypeItem, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasCardTypeItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "decfdT90TFPI72A/DN7J2pi", "TexasCardTypeItem", undefined);
      var TexasCardTypeItem = exports('TexasCardTypeItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasCardTypeItem) {
        _inheritsLoose(TexasCardTypeItem, _UI_TexasCardTypeItem);
        function TexasCardTypeItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasCardTypeItem.call.apply(_UI_TexasCardTypeItem, [this].concat(args)) || this;
          _this._curPlayerHandPoker = [];
          return _this;
        }
        var _proto = TexasCardTypeItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasCardTypeItem.prototype.onConstruct.call(this);
          this.name = 'TexasCardTypeItem';
          this._curPlayerHandPoker.push(this.m_card1);
          this._curPlayerHandPoker.push(this.m_card2);
          this._curPlayerHandPoker.push(this.m_card3);
          this._curPlayerHandPoker.push(this.m_card4);
          this._curPlayerHandPoker.push(this.m_card5);
        };
        _proto.setData = function setData(carCodes, title) {
          this.m_lbType.text = title;
          for (var i = 0; i < 5; i++) {
            var pokerLoader = this._curPlayerHandPoker[i];
            pokerLoader.visible = true;
            if (pokerLoader.visible) {
              var poker = carCodes[i];
              var sign = poker[0];
              var code = poker[1];
              var gray = poker[2];
              var pokerCode = 16 * sign + code;
              var dark = gray == 0;
              var pokerCmpt = pokerLoader.component;
              pokerCmpt.gray = dark;
              pokerCmpt.front = true;
              pokerCmpt.hightLight = false;
              pokerCmpt.showEye = false;
              pokerCmpt.code = pokerCode;
            }
          }
        };
        return TexasCardTypeItem;
      }(UI_TexasCardTypeItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasCardTypeLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageManage.ts', './GameConst.ts', './UI_TexasCardTypeLayer.ts', './CocosDevKit.ts', './GameDecorators.ts', './CDKDecorators.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, LanguageManager, GameConst, UI_TexasCardTypeLayer, CustomFguiClass, SafeTimeInterval;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      UI_TexasCardTypeLayer = module.default;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "9a83aJc1r5MXZYiXiVuVmMN", "TexasCardTypeLayer", undefined);
      var TexasCardTypeLayer = exports('TexasCardTypeLayer', (_dec = SafeTimeInterval(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasCardTypeLaye) {
        _inheritsLoose(TexasCardTypeLayer, _UI_TexasCardTypeLaye);
        function TexasCardTypeLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasCardTypeLaye.call.apply(_UI_TexasCardTypeLaye, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this._dataList = [];
          _this.m_type = 0;
          _this.m_gameType = 0;
          return _this;
        }
        var _proto = TexasCardTypeLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasCardTypeLaye.prototype.onConstruct.call(this);
          this.onClick(this.onSelfClick, this);
        };
        _proto.closeView = function closeView() {
          this.shareSpace.texasGamePage.popupLayer.m_cardTypeController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView() {
          this.shareSpace.texasGamePage.popupLayer.m_cardTypeController.selectedIndex = 1;
          if (this._dataList.length == 0) {
            this.initCards();
          }
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.closeView();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasCardTypeLayer';
          this.m_gameType = this.shareSpace.texasGameData.gameType;
        };
        _proto.onSelfClick = function onSelfClick() {
          this.closeView();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onSelfClick();
          }
        };
        _proto.initCards = function initCards() {
          var titles = ['CCS_TXT_1', 'CCS_TXT_430', 'CCS_TXT_340', 'CCS_TXT_212', 'CCS_TXT_399', 'CCS_TXT_159', 'CCS_TXT_406', 'CCS_TXT_147', 'CCS_TXT_458', 'CCS_TXT_467'];
          var cards = [[[3, 13, 1], [4, 12, 1], [1, 11, 1], [4, 7, 1], [3, 6, 1]], [[4, 13, 1], [3, 13, 1], [3, 9, 0], [3, 8, 0], [4, 7, 0]], [[4, 7, 1], [3, 7, 1], [4, 6, 1], [3, 6, 1], [3, 8, 0]], [[3, 12, 1], [2, 12, 1], [1, 12, 1], [1, 11, 0], [1, 6, 0]], [[4, 13, 1], [4, 12, 1], [3, 11, 1], [1, 10, 1], [1, 9, 1]], [[4, 13, 1], [4, 12, 1], [4, 10, 1], [4, 9, 1], [4, 7, 1]], [[4, 12, 1], [2, 12, 1], [4, 8, 1], [3, 8, 1], [1, 8, 1]], [[4, 11, 1], [3, 11, 1], [2, 11, 1], [1, 11, 1], [3, 8, 0]], [[2, 10, 1], [2, 9, 1], [2, 8, 1], [2, 7, 1], [2, 6, 1]], [[1, 14, 1], [1, 13, 1], [1, 12, 1], [1, 11, 1], [1, 10, 1]]];
          this.m_list.itemProvider = this.getListItemResource.bind(this);
          this.m_list.setVirtual();
          this.m_list.itemRenderer = this.renderListItem.bind(this);
          this.m_list.enabled = false;
          var indexs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
          if (this.m_gameType == GameConst.TexasPlay.EGameType.SixPlus) {
            // 6+
            indexs = [1, 2, 3, 4, 5, 7, 6, 8, 9, 10];
          }
          for (var i = 9; i >= 0; i--) {
            var index = indexs[i] - 1;
            var selected = index == this.m_type - 1;
            var title = LanguageManager.get(titles[index]);
            var card = {
              selected: selected,
              title: title,
              cards: cards[index]
            };
            this._dataList.push(card);
          }
          this.m_list.numItems = this._dataList.length;
        };
        _proto.getListItemResource = function getListItemResource(index) {
          return 'ui://GamePlay/TexasCardTypeItem';
        };
        _proto.renderListItem = function renderListItem(index, item) {
          var msg = this._dataList[index];
          item.setData(msg.cards, msg.title);
        };
        _createClass(TexasCardTypeLayer, [{
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_cardTypeController.selectedIndex == 1;
          }
        }]);
        return TexasCardTypeLayer;
      }(UI_TexasCardTypeLayer), _applyDecoratedDescriptor(_class2.prototype, "onSelfClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onSelfClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasChatAtPlayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasChatAtPlayerItem.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasChatAtPlayerItem, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasChatAtPlayerItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "e09f2bW20BCL7Dsv6x6r8eJ", "TexasChatAtPlayerItem", undefined);
      var TexasChatAtPlayerItem = exports('TexasChatAtPlayerItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasChatAtPlayer) {
        _inheritsLoose(TexasChatAtPlayerItem, _UI_TexasChatAtPlayer);
        function TexasChatAtPlayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasChatAtPlayer.call.apply(_UI_TexasChatAtPlayer, [this].concat(args)) || this;
          _this.playerData = void 0;
          return _this;
        }
        var _proto = TexasChatAtPlayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasChatAtPlayer.prototype.onConstruct.call(this);
          this.name = 'TexasChatAtPlayerItem';
        };
        _proto.setData = function setData(datas, hideLine) {
          this.playerData = datas;
          this.m_UserName.text = datas.name;
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(datas.icon);
          this.m_line.visible = !hideLine;
        };
        _proto.getData = function getData() {
          return this.playerData;
        };
        return TexasChatAtPlayerItem;
      }(UI_TexasChatAtPlayerItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasChatBlockPlayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasChatBlockPlayerItem.ts', './GameDecorators.ts', './CocosDevKit.ts', './CDKDecorators.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_TexasChatBlockPlayerItem, CustomFguiClass, SafeTimeInterval;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasChatBlockPlayerItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "d1b917BFfpOCYNG2qIAIbqP", "TexasChatBlockPlayerItem", undefined);
      var TexasChatBlockPlayerItem = exports('TexasChatBlockPlayerItem', (_dec = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasChatBlockPla) {
        _inheritsLoose(TexasChatBlockPlayerItem, _UI_TexasChatBlockPla);
        function TexasChatBlockPlayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasChatBlockPla.call.apply(_UI_TexasChatBlockPla, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.playerData = void 0;
          return _this;
        }
        var _proto = TexasChatBlockPlayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasChatBlockPla.prototype.onConstruct.call(this);
          this.name = 'TexasChatBlockPlayerItem';
          this.m_btnBlock.onClick(this.onBtnBlockClick, this);
        };
        _proto.reset = function reset() {};
        _proto.setData = function setData(datas, shareSpace) {
          this.shareSpace = shareSpace;
          this.playerData = datas;
          this.m_UserName.text = datas.name;
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(datas.icon);
          this.m_UserId.text = 'ID: ' + datas.playerid;
          var blck = datas.ban;
          this.m_blockCtrl.selectedIndex = blck ? 1 : 0;
        };
        _proto.onBtnBlockClick = function onBtnBlockClick() {
          this.shareSpace.texasGamePage.popupLayer.chatLayer.blockPlayer(this.playerData);
        };
        return TexasChatBlockPlayerItem;
      }(UI_TexasChatBlockPlayerItem), _applyDecoratedDescriptor(_class2.prototype, "onBtnBlockClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnBlockClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasChatData.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "75904eFIQJMbJ0kw6tAd1n+", "TexasChatData", undefined);
      var TexasChatData = exports('TexasChatData', /*#__PURE__*/function () {
        function TexasChatData() {
          this.msgList = [];
        }
        var _proto = TexasChatData.prototype;
        _proto.init = function init() {
          // do something
        };
        _proto.reset = function reset() {
          // do something
        };
        _proto.setMsgList = function setMsgList(list) {
          this.msgList = list;
        };
        _proto.addMsg = function addMsg(msg) {
          this.msgList.push(msg);
        };
        _proto.clearMsg = function clearMsg() {
          this.msgList.length = 0;
        };
        return TexasChatData;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasChatLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageManage.ts', './UI_TexasChatLayer.ts', './CocosDevKit.ts', './GameDecorators.ts', './RoleData.ts', './fairygui.mjs', './PopupLoadingManager.ts', './CDKDecorators.ts', './Utils.ts', './LocalStorageTool.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, color, sys, EditBox, Tween, tween, Color, LanguageManager, UI_TexasChatLayer, CustomFguiClass, RoleData, Event, GearXY, PopupLoadingManager, SafeTimeInterval, Utils, LocalStorageTool;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      sys = module.sys;
      EditBox = module.EditBox;
      Tween = module.Tween;
      tween = module.tween;
      Color = module.Color;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      UI_TexasChatLayer = module.default;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      Event = module.Event;
      GearXY = module.GearXY;
    }, function (module) {
      PopupLoadingManager = module.PopupLoadingManager;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2;
      cclegacy._RF.push({}, "7819aPwOnNFOoKuEN1tBDDT", "TexasChatLayer", undefined);
      var ColorF7931A = color('#F7931A');
      var Color06C166 = color('#06C166');
      var NAME_COLOR = [color('#FF3D23'), ColorF7931A, color('#EED500'), Color06C166, color('#BB4EFD'), color('#2D7CFF'), color('#FF46C0'), color('#FF7979'), color('#2FC1FF'), color('#94A9BC')];
      var TexasChatLayer = exports('TexasChatLayer', (_dec = SafeTimeInterval(400), _dec2 = SafeTimeInterval(400), _dec3 = SafeTimeInterval(400), _dec4 = SafeTimeInterval(400), _dec5 = SafeTimeInterval(400), _dec6 = SafeTimeInterval(400), _dec7 = SafeTimeInterval(400), _dec8 = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasChatLayer) {
        _inheritsLoose(TexasChatLayer, _UI_TexasChatLayer);
        function TexasChatLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasChatLayer.call.apply(_UI_TexasChatLayer, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.infoList = void 0;
          _this.shortCutMsgList = [];
          _this.playersList = [];
          _this.atIds = new Map();
          _this.firstAtMsgIndex = -1;
          _this.loadingManager = void 0;
          _this.canLoadData = false;
          _this._bInputTouch = false;
          return _this;
        }
        var _proto = TexasChatLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasChatLayer.prototype.onConstruct.call(this);
          this.name = 'TexasChatLayer';
          this.m_btnToVoice.visible = false;
          this.m_groupAtTips.visible = false;
          this.m_bgMask.onClick(this.onBtnCloseClick, this);
          this.m_list.itemProvider = this.getListItemResource.bind(this);
          this.m_list.setVirtual();
          this.m_list.itemRenderer = this.renderListItem.bind(this);
          this.m_list.on(Event.CLICK_ITEM, this.onClickMsgItem, this);
          this.m_shotList.setVirtual();
          this.m_shotList.itemRenderer = this.renderShortListItem.bind(this);
          this.m_shotList.on(Event.CLICK_ITEM, this.onSelectShotCutItem, this);
          this.m_playerList.setVirtual();
          this.m_playerList.itemRenderer = this.renderBlockPlayerListItem.bind(this);
          this.m_atPlayerList.setVirtual();
          this.m_atPlayerList.itemRenderer = this.renderAtPlayerListItem.bind(this);
          this.m_atPlayerList.on(Event.CLICK_ITEM, this.onClickAtItem, this);
          this.m_atPlayerList.alpha = 0;
          this.m_atPlayerListBg.alpha = 0;
          this.m_btnCancelAt.alpha = 0;
          this.m_btnSend.onClick(this.onBtnSendClick, this);
          this.m_btnAt.onClick(this.onBtnATClick, this);
          if (sys.isBrowser && sys.os != sys.OS.IOS) {
            // @ts-ignore
            this.m_inputMsg._editBox.useStyle = true;
          }
          this.m_inputMsg.on(EditBox.EventType.EDITING_DID_ENDED, this.onInputMsgTouchEnd, this);
          this.m_inputMsg.on(EditBox.EventType.EDITING_DID_BEGAN, this.onInputTouchBegin, this);
          this.m_inputMsg.on(EditBox.EventType.TEXT_CHANGED, this.onInputMsglFocusOut, this);
          if (sys.isMobile) {
            this.m_inputMsg.on(EditBox.EventType.EDITING_RETURN, this.onInputSendMsg, this);
            this.m_inputMsg._editBox.returnType = EditBox.KeyboardReturnType.SEND;
          }
          this.m_btnShortMsg.onClick(this.onBtnShortCutClick, this);
          this.m_btnBlockPlayer.onClick(this.onBtnBlockPlayerClick, this);
          this.m_btnAtTipClose.onClick(this.onBtnCloseTipClick, this);
          this.m_atTipBg.onClick(this.onAtTipClick, this);
          this.m_msgMask.onClick(this.closeAllDialog, this);
          this.m_btnCancelAt.onClick(this.closeAtLayer, this);
          this.m_emptyCtrl.selectedIndex = 2;
          this.loadingManager = new PopupLoadingManager(this.m_loadingLayer);
        };
        _proto.onInputTouchBegin = function onInputTouchBegin() {
          this._bInputTouch = true;
        };
        _proto.onInputMsgTouchEnd = function onInputMsgTouchEnd() {
          var _this2 = this;
          setTimeout(function () {
            _this2._bInputTouch = false;
          }, 200);
        };
        _proto.closeView = function closeView() {
          this.canLoadData = false;
          this.loadingManager.hide();
          this.shareSpace.texasGamePage.popupLayer.m_msgDialogController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView() {
          if (this.m_emptyCtrl.selectedIndex == 2) {
            this.loadingManager.show();
          }
          this.shareSpace.texasGamePage.popupLayer.m_msgDialogController.selectedIndex = 1;
          this.m_groupAtTips.visible = false;
          this.closeAllDialog();
          this.getChatMsgList();
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          Tween.stopAllByTarget(this.m_groupBlockTip.node);
          this.m_groupBlockTip.visible = false;
          this.infoList = null;
          this.playersList = [];
          this.atIds = new Map();
          this.m_list.numItems = 0;
          this.m_list.refreshVirtualList();
          this.m_atPlayerList.numItems = 0;
          this.m_atPlayerList.refreshVirtualList();
          this.m_playerList.numItems = 0;
          this.m_playerList.refreshVirtualList();
          this.m_inputMsg.text = null;
          this.m_emptyCtrl.selectedIndex = 2;
          this.canLoadData = false;
          this.closeAllDialog();
          this.closeView();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          for (var index = 3; index < 11; index++) {
            var msg = 'CHAT_FAST_' + index;
            this.shortCutMsgList.push(msg);
          }
          this.m_shotList.numItems = this.shortCutMsgList.length;
          this.m_shotList.refreshVirtualList();
          this.shareSpace.texasGamePage.popupLayer.m_msgDialogController.on(Event.GEAR_STOP, this.onGearStop, this);
        };
        _proto.showMsgPop = function showMsgPop(ctrl) {
          var ctrls = [this.m_shortCutCtrl, this.m_blockPlayerCtrl, this.m_atPlayerCtrl];
          for (var index = 0; index < ctrls.length; index++) {
            var element = ctrls[index];
            if (element != ctrl) {
              element.selectedIndex = 0;
            }
          }
          ctrl.selectedIndex = ctrl.selectedIndex == 0 ? 1 : 0;
          this.m_msgMaskCtrl.selectedIndex = ctrl.selectedIndex;
          if (ctrl != this.m_atPlayerCtrl) {
            this.refreshShowAtLayer(false);
          } else {
            this.refreshShowAtLayer(true);
          }
        };
        _proto.refreshShowAtLayer = function refreshShowAtLayer(show) {
          var showY = this.m_layerBg.height - this.m_atPlayerList.height - 23 - this.m_btnCancelAt.height;
          var closeY = this.m_layerBg.height;
          var duration = 0.2;
          if (show) {
            var t1 = tween(this.m_atPlayerList).set({
              y: closeY
            }).to(duration, {
              y: showY
            }, {
              easing: 'quadOut'
            });
            var t2 = tween(this.m_atPlayerList).set({
              alpha: 0
            }).to(duration, {
              alpha: 1
            });
            tween(this.m_atPlayerList).parallel(t1, t2).call(function () {}).start();
            tween(this.m_btnCancelAt).set({
              alpha: 0
            }).to(duration, {
              alpha: 1
            }).call(function () {}).start();
            tween(this.m_atPlayerListBg).set({
              alpha: 0
            }).to(duration, {
              alpha: 1
            }).call(function () {}).start();
          } else {
            var _t = tween(this.m_atPlayerList).to(duration, {
              y: closeY
            }, {
              easing: 'quadOut'
            });
            var _t2 = tween(this.m_atPlayerList).to(duration, {
              alpha: 0
            });
            tween(this.m_atPlayerList).parallel(_t, _t2).call(function () {}).start();
            tween(this.m_btnCancelAt).to(duration, {
              alpha: 0
            }).call(function () {}).start();
            tween(this.m_atPlayerListBg).to(duration, {
              alpha: 0
            }).call(function () {}).start();
          }
        };
        _proto.onInputSendMsg = function onInputSendMsg() {
          var _this3 = this;
          setTimeout(function () {
            _this3._bInputTouch = false;
          }, 200);
          var txt = this.m_inputMsg.text ? this.m_inputMsg.text : '';
          txt = txt.trim();
          if (txt && txt.length > 0) {
            this.onBtnSendClick();
          }
        };
        _proto.onInputMsglFocusOut = function onInputMsglFocusOut() {
          var txt = this.m_inputMsg.text ? this.m_inputMsg.text : '';
          txt = txt.trim();
          if (txt && txt.length > 0) {
            this.m_sendTextCtrl.selectedIndex = 1;
          } else {
            this.m_sendTextCtrl.selectedIndex = 0;
          }
          if (this.m_msgMaskCtrl.selectedIndex == 1) {
            this.closeAllDialog();
          }
        };
        _proto.closeAtLayer = function closeAtLayer() {
          this.m_atPlayerCtrl.selectedIndex = 0;
          this.refreshShowAtLayer(false);
        };
        _proto.onBtnSendClick = function onBtnSendClick() {
          var _this4 = this;
          var txt = this.m_inputMsg.text ? this.m_inputMsg.text : '';
          txt = txt.trim();
          if (txt && txt.length > 0) {
            var atIDs = {};
            for (var _iterator = _createForOfIteratorHelperLoose(this.atIds.keys()), _step; !(_step = _iterator()).done;) {
              var _key2 = _step.value;
              var value = this.atIds.get(_key2);
              atIDs[_key2 + ''] = value;
            }
            if (txt.length > 26) {
              txt = Utils.getMsgMyLength(txt, 26);
            }
            var jsonTb = {
              text: txt,
              atIDs: atIDs
            };
            var msg = {
              type: 1,
              content: JSON.stringify(jsonTb)
            };
            this.shareSpace.roomProxy.sendMsg(msg, function (msgs) {
              if (msgs != null) {
                //
                _this4.m_inputMsg.text = null;
                _this4.m_sendTextCtrl.selectedIndex = 0;
              }
            });
          }
          this.atIds.clear();
          this.onBtnCloseClick();
        };
        _proto.getSendTxtByLength = function getSendTxtByLength(str, length) {
          var num = 0;
          var result = '';
          for (var index = 0; index < str.length; index++) {
            var element = str[index];
            if (/[\u3400-\u4DBF\u4E00-\u9FFF]/.test(element)) {
              num += 1;
            } else if (/^[\u4e00-\u9fa5]+$/.test(element)) {
              num += 1;
            } else {
              num += 0.5;
            }
            if (num < length) {
              result = result + element;
            }
          }
          return result;
        };
        _proto.closeAllDialog = function closeAllDialog() {
          this.m_shortCutCtrl.selectedIndex = 0;
          this.m_blockPlayerCtrl.selectedIndex = 0;
          this.m_atPlayerCtrl.selectedIndex = 0;
          this.m_msgMaskCtrl.selectedIndex = 0;
          this.refreshShowAtLayer(false);
        };
        _proto.onBtnCloseTipClick = function onBtnCloseTipClick() {
          this.m_groupAtTips.visible = false;
          this.saveKeyTime();
        };
        _proto.onAtTipClick = function onAtTipClick() {
          this.m_list.scrollToView(this.firstAtMsgIndex);
          this.onBtnCloseTipClick();
        };
        _proto.onBtnShortCutClick = function onBtnShortCutClick() {
          this.showMsgPop(this.m_shortCutCtrl);
        };
        _proto.onBtnBlockPlayerClick = function onBtnBlockPlayerClick() {
          var _this5 = this;
          this.shareSpace.roomProxy.getRoomPlayerList(function (datas) {
            if (datas != null) {
              var infos = [];
              var list = datas.list ? datas.list : [];
              if (list) {
                for (var index = 0; index < list.length; index++) {
                  var item = list[index];
                  if (item.playerid != RoleData.inst.playerID) {
                    infos.push(item);
                  }
                }
              }
              if (infos.length > 0) {
                _this5.playersList = infos;
                _this5.m_playerList.numItems = infos.length;
                _this5.m_playerList.refreshVirtualList();
                _this5.showMsgPop(_this5.m_blockPlayerCtrl);
              } else {
                _this5.grootInst.showCenterTip('TXT_630');
              }
            }
          });
        };
        _proto.onBtnATClick = function onBtnATClick() {
          var _this6 = this;
          this.shareSpace.roomProxy.getRoomPlayerList(function (datas) {
            if (datas != null) {
              var infos = [];
              var list = datas.list ? datas.list : [];
              if (list) {
                for (var index = 0; index < list.length; index++) {
                  var item = list[index];
                  if (item.playerid != RoleData.inst.playerID) {
                    infos.push(item);
                  }
                }
              }
              if (infos.length > 0) {
                _this6.playersList = infos;
                var itemHeight = 140;
                var height = infos.length * itemHeight;
                height = height < 1000 ? height : 1120;
                _this6.m_atPlayerList.height = height;
                _this6.m_atPlayerList.ensureSizeCorrect();
                _this6.m_atPlayerList.ensureBoundsCorrect();
                _this6.m_atPlayerList.y = _this6.m_layerBg.height;
                _this6.m_GroupAt.ensureSizeCorrect();
                _this6.showMsgPop(_this6.m_atPlayerCtrl);
                _this6.m_atPlayerList.numItems = infos.length;
                _this6.m_atPlayerList.refreshVirtualList();
              } else {
                _this6.grootInst.showCenterTip('TXT_630');
              }
            }
          });
        };
        _proto.onGearStop = function onGearStop(target, controller, gear) {
          if (target == this && controller == this.shareSpace.texasGamePage.popupLayer.m_msgDialogController && gear instanceof GearXY) {
            if (controller.selectedIndex == 1) {
              this.canLoadData = true;
              this.setChatEnable();
              this.reFreshUI();
            }
          }
        };
        _proto.reFreshUI = function reFreshUI() {
          if (!this.canLoadData || this.infoList == null) {
            return;
          }
          this.loadingManager.hide();
          this.m_emptyCtrl.selectedIndex = this.infoList.length == 0 ? 1 : 0;
          this.m_list.numItems = this.infoList.length;
          this.m_list.refreshVirtualList();
          this.refreshAtTips();
          this.m_list.scrollToView(this.infoList.length - 1);
        };
        _proto.blockPlayer = function blockPlayer(playerData) {
          var _this7 = this;
          if (!this.checkBlockKeyTime(playerData.playerid)) {
            return;
          }
          this.shareSpace.roomProxy.setChatBanPlayerOpt(playerData.playerid, !playerData.ban, function (datas) {
            if (datas != null) {
              if (datas.playerid == playerData.playerid) {
                playerData.ban = datas.type == 1;
                for (var index = 0; index < _this7.playersList.length; index++) {
                  var element = _this7.playersList[index];
                  if (element.playerid == datas.playerid) {
                    element.ban = datas.type == 1;
                  }
                }
                _this7.m_playerList.refreshVirtualList();
                var msg = '';
                var type = 0;
                if (datas.type == 1) {
                  msg = Utils.formatStr(LanguageManager.get('TXT_631'), playerData.name);
                  type = 1;
                } else {
                  type = 3;
                  msg = Utils.formatStr(LanguageManager.get('TXT_633'), playerData.name);
                }
                _this7.showBlockTip(msg, type);
                _this7.getChatMsgList();
              }
            }
          });
          this.saveBlockKeyTime(playerData.playerid);
        };
        _proto.checkBlockKeyTime = function checkBlockKeyTime(playerid) {
          var CONTROL_TIEM = 10;
          var time = this.getBlockKeyTime(playerid);
          var gapTime = sys.now() - time;
          if (gapTime / 1000 >= CONTROL_TIEM) {
            return true;
          } else {
            this.showBlockTip(Utils.formatStr(LanguageManager.get('TXT_632'), Math.ceil(CONTROL_TIEM - gapTime / 1000)), 2);
          }
          return false;
        }

        // type 1成功block 2等待 3成功unblock
        ;

        _proto.showBlockTip = function showBlockTip(tip, type) {
          var _this8 = this;
          var color;
          if (type == 1) {
            color = ColorF7931A;
          } else if (type == 2) {
            color = Color.WHITE.clone();
          } else {
            color = Color06C166.clone();
          }
          this.m_labelBlickTip.text = tip;
          this.m_labelBlickTip.color = color;
          this.m_groupBlockTip.visible = true;
          Utils.delayCall(2, function () {
            _this8.m_groupBlockTip.visible = false;
          }, this.m_groupBlockTip.node);
        };
        _proto.setChatEnable = function setChatEnable() {
          var playerInfo = this.shareSpace.texasGameData.getChairPlayerInfoByPlayerID(RoleData.inst.playerID);
          var enable = playerInfo != null;
          this.m_btnAt.enabled = enable;
          this.m_inputMsg.enabled = enable;
          this.m_btnBlockPlayer.enabled = enable;
          this.m_btnShortMsg.enabled = enable;
          this.m_btnSend.enabled = enable;
          this.m_btnAt.alpha = enable ? 1 : 0.3;
          this.m_inputMsg.alpha = enable ? 1 : 0.3;
          this.m_btnBlockPlayer.alpha = enable ? 1 : 0.3;
          this.m_btnShortMsg.alpha = enable ? 1 : 0.3;
          this.m_btnSend.alpha = enable ? 1 : 0.3;
        };
        _proto.onNewMsg = function onNewMsg(msg) {
          var data = this.parseMsg(msg);
          if (msg && this.isOpen) {
            if (data && data.type == 1) {
              if (this.infoList == null) {
                this.infoList = [];
              }
              this.infoList.push(data);
              this.m_list.numItems = this.infoList.length;
              this.m_list.refreshVirtualList();
              this.refreshAtTips();
            }
            this.m_layerEmpty.visible = this.infoList.length == 0;
          }
          if (data && data.type == 1) {
            if (data.playerId) {
              var item = this.shareSpace.texasGamePage.playerLayer.getItemByPlayerID(data.playerId);
              if (item) {
                item.showChatMsg(data.content, data.contentTb.atIDs);
              }
            }
          }
        };
        _proto.refreshAtTips = function refreshAtTips() {
          var time = this.getKeyTime();
          var isTiped = true;
          var atMeMsgs = [];
          var selfId = RoleData.inst.playerID;
          var firstAtMsgIndex = -1;
          for (var index = 0; index < this.infoList.length; index++) {
            var msg = this.infoList[index];
            if (msg.playerId != selfId && msg.time > time) {
              if (msg.contentTb) {
                var atIDs = msg.contentTb.atIDs;
                if (atIDs) {
                  var data = atIDs[selfId + ''];
                  if (data) {
                    atMeMsgs.push(msg);
                    if (firstAtMsgIndex < 0) {
                      firstAtMsgIndex = index;
                    }
                    isTiped = false;
                    break;
                  }
                }
              }
            }
            if (!isTiped) {
              break;
            }
          }
          this.m_groupAtTips.visible = atMeMsgs.length > 0 && !isTiped;
          if (this.m_groupAtTips.visible) {
            var _msg = atMeMsgs[0];
            this.m_labelAtTip.text = Utils.formatStr('%s@you', _msg.name);
            this.m_atTipBg.setSize(this.m_labelAtTip.width + 95, this.m_atTipBg.height);
            this.firstAtMsgIndex = firstAtMsgIndex;
          }
        };
        _proto.getKeyTime = function getKeyTime() {
          var value = LocalStorageTool.getJson('KEY_AT_TIP_TIME_ROOM');
          if (!value || !(value instanceof Array)) {
            value = [];
          }
          for (var index = value.length - 1; index >= 0; index--) {
            var element = value[index];
            if (element.roomid == this.shareSpace.texasGameData.roomId) {
              return element.value;
            }
          }
          return 0;
        };
        _proto.saveKeyTime = function saveKeyTime() {
          if (this.infoList && this.infoList.length > 0) {
            var lastMsg = this.infoList[this.infoList.length - 1];
            var value = LocalStorageTool.getJson('KEY_AT_TIP_TIME_ROOM');
            if (!value || !(value instanceof Array)) {
              value = [];
            }
            var valueTmp = [];
            for (var index = 0; index < value.length; index++) {
              var element = value[index];
              if (sys.now() - element.time < 24 * 60 * 60 * 1000 && element.roomid == this.shareSpace.texasGameData.roomId) {
                valueTmp.push(element);
              }
            }
            value = valueTmp;
            if (value.length > 100) {
              value.shift();
            }
            var data = {
              time: sys.now(),
              roomid: this.shareSpace.texasGameData.roomId,
              value: lastMsg.time
            };
            value.push(data);
            LocalStorageTool.setJson('KEY_AT_TIP_TIME_ROOM', value);
          }
        };
        _proto.getBlockKeyTime = function getBlockKeyTime(playerid) {
          var value = LocalStorageTool.getJson('KEY_FORBID_ITEM_PLAYER');
          if (!value || !(value instanceof Array)) {
            value = [];
          }
          for (var index = value.length - 1; index >= 0; index--) {
            var element = value[index];
            if (element.roomid == this.shareSpace.texasGameData.roomId && playerid == element.playerid) {
              return element.time;
            }
          }
          return 0;
        };
        _proto.saveBlockKeyTime = function saveBlockKeyTime(playerid) {
          var value = LocalStorageTool.getJson('KEY_FORBID_ITEM_PLAYER');
          if (!value || !(value instanceof Array)) {
            value = [];
          }
          var valueTmp = [];
          for (var index = 0; index < value.length; index++) {
            var element = value[index];
            if (sys.now() - element.time < 24 * 60 * 60 * 1000 && element.roomid == this.shareSpace.texasGameData.roomId) {
              valueTmp.push(element);
            }
          }
          value = valueTmp;
          if (value.length > 100) {
            value.shift();
          }
          var data = {
            time: sys.now(),
            roomid: this.shareSpace.texasGameData.roomId,
            playerid: playerid
          };
          value.push(data);
          LocalStorageTool.setJson('KEY_FORBID_ITEM_PLAYER', value);
        };
        _proto.getChatMsgList = function getChatMsgList() {
          var _this9 = this;
          this.shareSpace.roomProxy.getChatMsgList(function (msgs) {
            if (msgs) {
              var infos = [];
              var list = msgs.list;
              for (var index = 0; index < list.length; index++) {
                var item = list[index];
                var data = _this9.parseMsg(item);
                if (data) {
                  infos.push(data);
                }
              }
              var infoTmpList = [];
              if (_this9.infoList == null) {
                _this9.infoList = [];
              }
              for (var _index = 0; _index < infos.length; _index++) {
                var element = infos[_index];
                if (element.type == 1) {
                  for (var i = 0; i < _this9.infoList.length; i++) {
                    var iinfo = _this9.infoList[i];
                    if (iinfo.type == 1 && element.playerId == iinfo.playerId && iinfo.time == element.time && iinfo.content == element.content) {
                      element.msgHeight = iinfo.msgHeight;
                      element.msgWidth = iinfo.msgWidth;
                      break;
                    }
                  }
                  infoTmpList.push(element);
                }
              }
              _this9.infoList = infoTmpList;
            } else {
              _this9.infoList = [];
            }
            _this9.reFreshUI();
          });
        };
        _proto.parseMsg = function parseMsg(item) {
          var element = item.content;
          if (element) {
            var type = item.type ? item.type : 1;
            var msg = JSON.parse(element);
            var contentTb = msg;
            var content = element;
            var time = item.time;
            var playerid = item.player.playerid;
            var icon = item.player.icon;
            var name = item.player.name;
            if (msg) {
              if (msg.text) {
                content = msg.text;
              }
            }
            // if (content.length > 26) {
            // content = Utils.getMsgMyLength(content, 26)
            // }
            var atIDs = contentTb.atIDs;
            var showContent = '';
            if (content.includes('@') && atIDs && Object.keys(atIDs).length > 0) {
              showContent = Utils.changeAtStrColor(content, atIDs);
              // let arrysTMp: string[] = content.split(' ');
              // for (let index = 0; index < arrysTMp.length; index++) {
              //     if (showContent.length > 0) {
              //         showContent = showContent + ' ';
              //     }
              //     const strTmp = arrysTMp[index];
              //     let arrys = strTmp.split('@');
              //     if (arrys.length > 2) {
              //         let headStr = '';
              //         for (let i = 1; i < arrys.length - 1; i++) {
              //             const str = arrys[i];
              //             headStr = headStr + str;
              //         }
              //         let atStr = '@' + arrys[arrys.length - 1];
              //         let find = false;
              //         for (let key in atIDs) {
              //             let value = atIDs[key];
              //             if (value.includes(atStr) || atStr.includes(value)) {
              //                 atStr = Utils.formatStr('[color=#e8a804]%s[/color]', atStr);
              //                 find = true;
              //                 break;
              //             }
              //         }
              //         showContent = showContent + headStr + atStr;
              //     } else if (arrys.length == 2) {
              //         let atStr = '@' + arrys[1];
              //         let find = false;
              //         for (let key in atIDs) {
              //             let value = atIDs[key];
              //             if (value.includes(atStr) || atStr.includes(value)) {
              //                 atStr = Utils.formatStr('[color=#e8a804]%s[/color]', atStr);
              //                 find = true;
              //                 break;
              //             }
              //         }
              //         showContent = showContent + atStr;
              //     } else {
              //         showContent = showContent + strTmp;
              //     }
              // }
            } else {
              showContent = content;
            }
            var colorINdex = this.hashStrToRange(name ? name : '', NAME_COLOR.length);
            var data = {
              type: type,
              time: time,
              content: content,
              showContent: showContent,
              contentTb: contentTb,
              playerId: playerid ? playerid : 0,
              icon: icon ? icon : '',
              name: name ? name : '',
              msgWidth: null,
              msgHeight: null,
              color: NAME_COLOR[colorINdex]
            };
            return data;
          }
        };
        _proto.hashStrToRange = function hashStrToRange(str, range) {
          var hash = 0;
          var len = str.length;
          for (var index = 0; index < len; index++) {
            var element = str.charCodeAt(index);
            hash = (hash + element) % range;
          }
          return hash;
        };
        _proto.getListItemResource = function getListItemResource(index) {
          var msg = this.infoList[index];
          var isSelf = msg.playerId == RoleData.inst.playerID;
          if (isSelf) return 'ui://GamePlay/TexasChatMstItemSelf';else {
            return 'ui://GamePlay/TexasChatMstItemOther';
          }
        };
        _proto.onClickMsgItem = function onClickMsgItem(item) {
          console.error('4444444', this._bInputTouch);
          if (this._bInputTouch) return;
          var msg;
          if (item.name == 'TexasChatMstItemSelf') {
            var itemNode = item;
            msg = itemNode.getData();
          } else if (item.name == 'TexasChatMstItemOther') {
            var _itemNode = item;
            msg = _itemNode.getData();
          }
          var txt = msg.content;
          if (txt.length > 26) {
            txt = Utils.getMsgMyLength(txt, 26);
          }
          this.m_inputMsg.text = txt;
          if (msg.contentTb) {
            var atIDs = msg.contentTb.atIDs;
            if (atIDs) {
              for (var _key3 in atIDs) {
                if (atIDs.hasOwnProperty(_key3)) {
                  // 确保属性是对象自身的而不是从原型链继承的
                  this.atIds.set(parseInt(_key3), atIDs[_key3]);
                }
              }
            }
          }
          this.closeAllDialog();
          this.onInputMsglFocusOut();
        };
        _proto.onSelectShotCutItem = function onSelectShotCutItem(item) {
          this.closeAllDialog();
          var itemNode = item;
          var txt = itemNode.getMsg();
          if (txt) {
            txt = LanguageManager.get(txt);
            var atIDs = [];
            var jsonTb = {
              text: txt,
              atIDs: atIDs
            };
            var msg = {
              type: 1,
              content: JSON.stringify(jsonTb)
            };
            this.shareSpace.roomProxy.sendMsg(msg, function (msgs) {});
          }
          this.atIds.clear();
          this.onBtnCloseClick();
        };
        _proto.onClickAtItem = function onClickAtItem(item) {
          this.closeAllDialog();
          var itemNode = item;
          var playerData = itemNode.getData();
          if (playerData) {
            var name = playerData.name;
            if (name) {
              var atStr = '@' + name + ' ';
              this.atIds.set(playerData.playerid, atStr);
              var text = this.m_inputMsg.text ? this.m_inputMsg.text : '';
              if (!text.includes(atStr)) {
                text = text + atStr;
              }
              this.m_inputMsg.text = text;
            }
          }
          this.onInputMsglFocusOut();
          if (sys.isMobile) {
            // @ts-ignore
            this.m_inputMsg._editBox.openKeyboard();
          }
        };
        _proto.renderListItem = function renderListItem(index, item) {
          var msg = this.infoList[index];
          var isSelf = msg.playerId == RoleData.inst.playerID;
          if (isSelf) {
            var itemNode = item;
            var height = itemNode.setData(msg);
            itemNode.setSize(this.m_list.width, height);
          } else {
            var _itemNode2 = item;
            var _height = _itemNode2.setData(msg);
            _itemNode2.setSize(this.m_list.width, _height);
          }
        };
        _proto.renderShortListItem = function renderShortListItem(index, item) {
          var msg = this.shortCutMsgList[index];
          var itemNode = item;
          itemNode.setData(msg);
        };
        _proto.renderBlockPlayerListItem = function renderBlockPlayerListItem(index, item) {
          var msg = this.playersList[index];
          var itemNode = item;
          itemNode.setData(msg, this.shareSpace);
        };
        _proto.renderAtPlayerListItem = function renderAtPlayerListItem(index, item) {
          var msg = this.playersList[index];
          var itemNode = item;
          itemNode.setData(msg, index == this.playersList.length - 1);
        };
        _proto.onBtnCloseClick = function onBtnCloseClick() {
          this.closeView();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onBtnCloseClick();
          }
        };
        _createClass(TexasChatLayer, [{
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_msgDialogController.selectedIndex == 1;
          }
        }]);
        return TexasChatLayer;
      }(UI_TexasChatLayer), (_applyDecoratedDescriptor(_class2.prototype, "closeAtLayer", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "closeAtLayer"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnSendClick", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnSendClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnCloseTipClick", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCloseTipClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAtTipClick", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onAtTipClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnShortCutClick", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnShortCutClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnBlockPlayerClick", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnBlockPlayerClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnATClick", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnATClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnCloseClick", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCloseClick"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasChatMsgShortItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasChatMsgShortItem.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasChatMsgShortItem, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasChatMsgShortItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "a2e90Gy8WVOFZ0UssYicxsm", "TexasChatMsgShortItem", undefined);
      var TexasChatMsgShortItem = exports('TexasChatMsgShortItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasChatMsgShort) {
        _inheritsLoose(TexasChatMsgShortItem, _UI_TexasChatMsgShort);
        function TexasChatMsgShortItem() {
          return _UI_TexasChatMsgShort.apply(this, arguments) || this;
        }
        var _proto = TexasChatMsgShortItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasChatMsgShort.prototype.onConstruct.call(this);
          this.name = 'TexasChatMsgShortItem';
        };
        _proto.setData = function setData(datas) {
          this.m_labelMsg.text = datas;
        };
        _proto.getMsg = function getMsg() {
          return this.m_labelMsg.text;
        };
        return TexasChatMsgShortItem;
      }(UI_TexasChatMsgShortItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasChatMstItemOther.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasChatMstItemOther.ts', './GameDecorators.ts', './CocosDevKit.ts', './Clock.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, _assertThisInitialized, cclegacy, color, UI_TexasChatMstItemOther, CustomFguiClass, Clock, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      UI_TexasChatMstItemOther = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      Clock = module.Clock;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "f3cb9YjavBPW6CSDeRlT1i5", "TexasChatMstItemOther", undefined);
      var Color2D7CFF = color('#2D7CFF');
      var TexasChatMstItemOther = exports('TexasChatMstItemOther', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasChatMstItemO) {
        _inheritsLoose(TexasChatMstItemOther, _UI_TexasChatMstItemO);
        function TexasChatMstItemOther() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasChatMstItemO.call.apply(_UI_TexasChatMstItemO, [this].concat(args)) || this;
          _this.m_msg = void 0;
          _this.m_playAnim = void 0;
          _this.clock = new Clock(_assertThisInitialized(_this));
          _this.minMsgWidh = 304;
          _this.cellHeight = 258;
          _this.marginRight = 41;
          return _this;
        }
        var _proto = TexasChatMstItemOther.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasChatMstItemO.prototype.onConstruct.call(this);
          this.name = 'TexasChatMstItemOther';
          this.m_labelMsg.maxWidth = 617;
          this.m_btnPlay.onClick(this.playVoice, this);
          this.clock.on(this.onClock, this);
        };
        _proto.reset = function reset() {
          this.m_playAnim = false;
          this.clock.stop();
        };
        _proto.getData = function getData() {
          return this.m_msg;
        };
        _proto.setData = function setData(datas) {
          this.reset();
          this.m_msg = datas;
          this.m_UserName.text = datas.name;
          this.m_UserName.color = datas.color ? datas.color.clone() : Color2D7CFF;
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(datas.icon);
          var bgWidth = 370;
          var cellHeight = this.cellHeight;
          var nameMaxx = this.m_UserName.width + this.m_UserName.x + this.marginRight;
          if (datas.type == 1) {
            this.m_typeCtrl.selectedIndex = 0;
            this.refreshMsg(datas.content, datas.showContent);
            var labelWidth = this.m_labelMsg.width;
            var maxWidth = this.m_labelMsg.x + labelWidth + 30;
            maxWidth = maxWidth > nameMaxx ? maxWidth : nameMaxx;
            var minWidth = this.m_layerBg.x + bgWidth;
            if (maxWidth > minWidth) {
              bgWidth = maxWidth - this.m_layerBg.x;
            }
            datas.msgWidth = labelWidth;
            datas.msgHeight = this.m_labelMsg.height;
            // this.m_layerBg.setSize(bgWidth, this.m_layerBg.height)
            this.m_layerBg.width = bgWidth;
            cellHeight = this.m_labelMsg.height + 204;
          } else {
            this.m_typeCtrl.selectedIndex = 1;
            var voiceTimeNum = Math.ceil(datas.contentTb.time);
            this.m_labelDuration.text = Utils.formatStr('%d.%02d', Math.floor(voiceTimeNum / 60), voiceTimeNum % 60);
          }
          this.refreshTime(datas.time);
          return cellHeight;
        };
        _proto.refreshMsg = function refreshMsg(content, showContent) {
          // todo 计算size
          this.m_labelMsg.width = this.minMsgWidh;
          this.m_labelMsg.height = this.m_labelMsg.initHeight;
          this.m_labelMsg.text = '';
          this.m_labelMsg.ensureSizeCorrect();
          this.m_labelMsg.text = showContent; // 标记@单独颜色
          if (this.m_msg.msgWidth) {
            this.m_labelMsg.width = this.m_msg.msgWidth;
            this.m_labelMsg.height = this.m_msg.msgHeight;
          }
          var height = this.m_labelMsg.actualHeight;
          var width = this.m_labelMsg.width;
          while (height > 61 && width < this.m_labelMsg.maxWidth) {
            width += 40;
            if (width > this.m_labelMsg.maxWidth) {
              width = this.m_labelMsg.maxWidth;
            }
            this.m_labelMsg.width = width;
            this.m_labelMsg.text = showContent;
            this.m_labelMsg.ensureSizeCorrect();
            height = this.m_labelMsg.actualHeight;
          }
          this.m_layerBg.ensureSizeCorrect();
        };
        _proto.refreshTime = function refreshTime(time) {
          var date = new Date(time * 1000);
          // let month = (date.getMonth() + 1).toString().padStart(2, '0');
          // let day = date.getDate().toString().padStart(2, '0');
          var hours = date.getHours().toString().padStart(2, '0');
          var minutes = date.getMinutes().toString().padStart(2, '0');
          // let char1 = "/"
          var char2 = ':';
          this.m_labelTime.text = "" + hours + char2 + minutes;
          var maxX = 0;
          if (this.m_msg.type == 1) {
            maxX = this.m_layerBg.x + this.m_layerBg.width;
          } else {
            maxX = this.m_layerVoiceBg.x + this.m_layerVoiceBg.width;
          }
          var x = maxX - this.m_labelTime.width - this.marginRight;
          this.m_labelTime.setPosition(x, this.m_labelTime.y);
        };
        _proto.playVoice = function playVoice() {};
        _proto.playAnim = function playAnim() {
          var _this2 = this;
          this.m_animVoice.play(function () {
            if (_this2.m_playAnim) {
              _this2.playAnim();
            }
          });
        };
        _proto.onClock = function onClock() {
          if (this.clock.over) {
            this.m_playAnim = false;
            this.m_animVoice.stop();
            var voiceTimeNum = Math.ceil(this.m_msg.contentTb.time);
            this.m_labelDuration.text = Utils.formatStr('%d.%02d', Math.floor(voiceTimeNum / 60), voiceTimeNum % 60);
          } else {
            var _voiceTimeNum = Math.ceil(this.clock.leftTime);
            this.m_labelDuration.text = Utils.formatStr('%d.%02d', Math.floor(_voiceTimeNum / 60), _voiceTimeNum % 60);
          }
        };
        return TexasChatMstItemOther;
      }(UI_TexasChatMstItemOther)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasChatMstItemSelf.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasChatMstItemSelf.ts', './GameDecorators.ts', './CocosDevKit.ts', './RoleData.ts', './Clock.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, _assertThisInitialized, cclegacy, UI_TexasChatMstItemSelf, CustomFguiClass, RoleData, Clock, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasChatMstItemSelf = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      Clock = module.Clock;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "89cddkIYOZKS6aJ/Ow7/95E", "TexasChatMstItemSelf", undefined);
      var TexasChatMstItemSelf = exports('TexasChatMstItemSelf', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasChatMstItemS) {
        _inheritsLoose(TexasChatMstItemSelf, _UI_TexasChatMstItemS);
        function TexasChatMstItemSelf() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasChatMstItemS.call.apply(_UI_TexasChatMstItemS, [this].concat(args)) || this;
          _this.m_msg = void 0;
          _this.m_playAnim = void 0;
          _this.minMsgWidh = 304;
          _this.cellHeight = 258;
          _this.clock = new Clock(_assertThisInitialized(_this));
          return _this;
        }
        var _proto = TexasChatMstItemSelf.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasChatMstItemS.prototype.onConstruct.call(this);
          this.name = 'TexasChatMstItemSelf';
          this.m_labelMsg.maxWidth = 614;
          this.m_btnPlay.onClick(this.playVoice, this);
          this.clock.on(this.onClock, this);
        };
        _proto.reset = function reset() {
          this.m_playAnim = false;
          this.clock.stop();
        };
        _proto.setData = function setData(datas) {
          this.reset();
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(RoleData.inst.avatar);
          this.m_msg = datas;
          var cellHeight = this.cellHeight;
          if (datas.type == 1) {
            this.m_typCtrl.selectedIndex = 0;
            this.refreshMsg(datas.content, datas.showContent);
            datas.msgWidth = this.m_labelMsg.width;
            datas.msgHeight = this.m_labelMsg.height;
            cellHeight = this.m_labelMsg.height + 204;
          } else {
            this.m_typCtrl.selectedIndex = 1;
            var voiceTimeNum = Math.ceil(datas.contentTb.time);
            this.m_labelDuration.text = Utils.formatStr('%d.%02d', Math.floor(voiceTimeNum / 60), voiceTimeNum % 60);
          }
          this.refreshTime(datas.time);
          return cellHeight;
        };
        _proto.getData = function getData() {
          return this.m_msg;
        };
        _proto.refreshMsg = function refreshMsg(content, showContent) {
          // todo 计算size
          this.m_labelMsg.width = this.minMsgWidh;
          this.m_labelMsg.height = this.m_labelMsg.initHeight;
          this.m_labelMsg.text = '';
          this.m_labelMsg.ensureSizeCorrect();
          this.m_labelMsg.text = showContent; // 标记@单独颜色
          if (this.m_msg.msgWidth) {
            this.m_labelMsg.width = this.m_msg.msgWidth;
            this.m_labelMsg.height = this.m_msg.msgHeight;
          }
          var height = this.m_labelMsg.actualHeight;
          var width = this.m_labelMsg.actualWidth;
          while (height > 61 && width < this.m_labelMsg.maxWidth) {
            width += 40;
            if (width > this.m_labelMsg.maxWidth) {
              width = this.m_labelMsg.maxWidth;
            }
            this.m_labelMsg.width = width;
            this.m_labelMsg.text = showContent;
            this.m_labelMsg.ensureSizeCorrect();
            height = this.m_labelMsg.actualHeight;
          }
          this.m_layerBg.ensureSizeCorrect();
        };
        _proto.refreshTime = function refreshTime(time) {
          var date = new Date(time * 1000);
          // let month = (date.getMonth() + 1).toString().padStart(2, '0');
          // let day = date.getDate().toString().padStart(2, '0');
          var hours = date.getHours().toString().padStart(2, '0');
          var minutes = date.getMinutes().toString().padStart(2, '0');
          // let char1 = "/"
          var char2 = ':';
          this.m_labelTime.text = "" + hours + char2 + minutes;
        };
        _proto.playVoice = function playVoice() {};
        _proto.playAnim = function playAnim() {
          var _this2 = this;
          this.m_animVoice.play(function () {
            if (_this2.m_playAnim) {
              _this2.playAnim();
            }
          });
        };
        _proto.onClock = function onClock() {
          if (this.clock.over) {
            this.m_playAnim = false;
            this.m_animVoice.stop();
            var voiceTimeNum = Math.ceil(this.m_msg.contentTb.time);
            this.m_labelDuration.text = Utils.formatStr('%d.%02d', Math.floor(voiceTimeNum / 60), voiceTimeNum % 60);
          } else {
            var _voiceTimeNum = Math.ceil(this.clock.leftTime);
            this.m_labelDuration.text = Utils.formatStr('%d.%02d', Math.floor(_voiceTimeNum / 60), _voiceTimeNum % 60);
          }
        };
        return TexasChatMstItemSelf;
      }(UI_TexasChatMstItemSelf)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasChipActionLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './UI_TexasChipActionLayer.ts', './fairygui.mjs', './GameConst.ts', './GameDecorators.ts', './AudioManager.ts', './Utils.ts', './Logger.ts', './NodePoolExtention.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, tween, UI_TexasChipActionLayer, GLoader, GameConst, CustomFguiClass, AudioManager, Utils, Log, GObjectPoolEx;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
    }, null, function (module) {
      UI_TexasChipActionLayer = module.default;
    }, function (module) {
      GLoader = module.GLoader;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      GObjectPoolEx = module.GObjectPoolEx;
    }],
    execute: function () {
      var _class2;
      cclegacy._RF.push({}, "4e5ce7mHVNLYJS38vNRjCAG", "TexasChipActionLayer", undefined);
      var CHIP_SPEED = 1600;
      var ChipPool = /*#__PURE__*/function (_GObjectPoolEx) {
        _inheritsLoose(ChipPool, _GObjectPoolEx);
        function ChipPool() {
          return _GObjectPoolEx.apply(this, arguments) || this;
        }
        var _proto = ChipPool.prototype;
        _proto.getObj = function getObj(chipType) {
          var obj = _GObjectPoolEx.prototype.getObj.call(this);
          obj.url = 'ui://xddh4ifdmxc69y';
          obj.setPivot(0.5, 0.5, true);
          return obj;
        };
        _createClass(ChipPool, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new ChipPool(function () {
                var gloader = new GLoader();
                gloader.autoSize = true;
                return gloader;
              });
            }
            return this._instance;
          }
        }]);
        return ChipPool;
      }(GObjectPoolEx);
      ChipPool._instance = void 0;
      var TexasChipActionLayer = exports('TexasChipActionLayer', CustomFguiClass(_class2 = /*#__PURE__*/function (_UI_TexasChipActionLa) {
        _inheritsLoose(TexasChipActionLayer, _UI_TexasChipActionLa);
        function TexasChipActionLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasChipActionLa.call.apply(_UI_TexasChipActionLa, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          return _this;
        }
        var _proto2 = TexasChipActionLayer.prototype;
        _proto2.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
        };
        _proto2.reset = function reset() {
          for (var i = 0; i < this._children.length; i++) {
            var child = this._children[i];
            if (child instanceof GLoader) {
              ChipPool.Instance.putObj(child);
            }
          }
        };
        _proto2.chipFlySingle = function chipFlySingle(from, to, delay, finish) {
          var chip = ChipPool.Instance.getObj();
          var time = to.clone().subtract(from.clone()).length() / CHIP_SPEED;
          this.addChild(chip);
          tween(chip).set({
            x: from.x,
            y: from.y
          }).delay(delay).to(time, {
            x: to.x,
            y: to.y
          }, {
            easing: 'quadOut'
          }).call(function () {
            ChipPool.Instance.putObj(chip);
            finish();
          }).start();
        };
        _proto2.chipFlyMulti = function chipFlyMulti(from, to, count, finish) {
          if (count <= 0) {
            finish();
            return;
          }
          var counter = Utils.createCounterFunction(count, finish);
          for (var i = 0; i < count; i++) {
            this.chipFlySingle(from, to, i * 0.07, counter);
          }
        }

        /**
         * 下注飞筹码，从头像飞到桌面筹码上
         * @param betInfo
         * @param finish
         * @returns
         */;
        _proto2.playerBet = function playerBet(betInfo, finish) {
          if (betInfo.turnChip > 0) {
            var item = this.shareSpace.texasGamePage.playerLayer.getItemByPlayerID(betInfo.playerid);
            if (!item) {
              Log.game.error('TexasChipActionLayer', 'playerBet', '找不到玩家座位', betInfo.playerid);
              finish();
              return;
            }
            var fromGlobal = item.m_avt.localToGlobal(0, 0);
            var from = this.globalToLocal(fromGlobal.x, fromGlobal.y);
            var toGlobal = item.tableScore.m_iconChip.localToGlobal(0, 0);
            var to = this.globalToLocal(toGlobal.x, toGlobal.y);
            this.chipFlyMulti(from, to, 3, finish);
          } else {
            finish();
          }
        }

        /**
         * 弃牌飞筹码，从桌面筹码飞到主池
         * @param betInfo
         * @param finish
         * @returns
         */;
        _proto2.playeFold = function playeFold(betInfo, finish) {
          if (betInfo.actType != GameConst.TexasPlay.EActType.Fold) {
            finish();
            return;
          }
          var item = this.shareSpace.texasGamePage.playerLayer.getItemByPlayerID(betInfo.playerid);
          if (!item) {
            Log.game.error('TexasChipActionLayer', 'playerBet', '找不到玩家座位', betInfo.playerid);
            finish();
            return;
          }
          if (!item.tableScore.visible) {
            finish();
            return;
          }
          var mainPot = this.shareSpace.texasGamePage.tableLayer.m_mainPot;
          var fromGlobal = item.tableScore.m_iconChip.localToGlobal(0, 0);
          var from = this.globalToLocal(fromGlobal.x, fromGlobal.y);
          var toGlobal = mainPot.localToGlobal(0, 0);
          var to = this.globalToLocal(toGlobal.x, toGlobal.y);
          this.chipFlyMulti(from, to, 3, finish);
          AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_CHIP_TO_POT);
        }

        /**
         * 所有桌面筹码飞到主池
         * @param finish
         */;
        _proto2.tableChipToPot = function tableChipToPot(finish) {
          // 获取所有显示的桌面筹码对象
          var arr = [];
          this.shareSpace.texasGamePage.playerLayer.walkAllChair(function (item) {
            if (item.tableScore.visible) {
              arr.push(item.tableScore);
            }
            return true;
          });
          if (arr.length > 0) {
            var counter = Utils.createCounterFunction(arr.length, finish);
            var mainPot = this.shareSpace.texasGamePage.tableLayer.m_mainPot;
            for (var i = 0; i < arr.length; i++) {
              var item = arr[i];
              var fromGlobal = item.m_iconChip.localToGlobal(0, 0);
              var from = this.globalToLocal(fromGlobal.x, fromGlobal.y);
              var toGlobal = mainPot.localToGlobal(0, 0);
              var to = this.globalToLocal(toGlobal.x, toGlobal.y);
              this.chipFlyMulti(from, to, 3, counter);
              AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_CHIP_TO_POT);
            }
          } else {
            finish();
          }
        };
        _proto2.mainPotToPlayer = function mainPotToPlayer(playerID, finish) {
          var item = this.shareSpace.texasGamePage.playerLayer.getItemByPlayerID(playerID);
          if (!item) {
            Log.game.error('TexasChipActionLayer', 'mainPotToTableScore', '找不到玩家座位', playerID);
            finish();
            return;
          }
          var mainPot = this.shareSpace.texasGamePage.tableLayer.m_mainPot;
          var fromGlobal = mainPot.localToGlobal(0, 0);
          var from = this.globalToLocal(fromGlobal.x, fromGlobal.y);
          var toGlobal = item.m_avt.localToGlobal(0, 0);
          var to = this.globalToLocal(toGlobal.x, toGlobal.y);
          this.chipFlyMulti(from, to, 3, finish);
        }

        /**
         * 飞筹码
         * @param msg
         * @param finish
         */;
        _proto2.gameResultMoveChip = function gameResultMoveChip(msg, finish) {
          var players = [];
          for (var i = 0; i < msg.playerResults.length; i++) {
            var player = msg.playerResults[i];
            if (player.returnChip > 0) {
              players.push(player.playerid);
            }
          }
          if (players.length > 0) {
            var counter = Utils.createCounterFunction(players.length, finish);
            for (var _i = 0; _i < players.length; _i++) {
              var playerID = players[_i];
              this.mainPotToPlayer(playerID, counter);
              AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_CHIP_TO_POT);
            }
          } else {
            finish();
          }
        };
        _proto2.onDestroy = function onDestroy() {
          _UI_TexasChipActionLa.prototype.onDestroy.call(this);
          ChipPool.Instance.clear();
        };
        return TexasChipActionLayer;
      }(UI_TexasChipActionLayer)) || _class2);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasGameData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConst.ts', './CocosDevKit.ts', './RoleData.ts', './PokerParser.ts', './Logger.ts', './Utils.ts'], function (exports) {
  var _createClass, _createForOfIteratorHelperLoose, cclegacy, GameConst, RoleData, PokerParser, Log, Utils;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameConst = module.GameConst;
    }, null, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      PokerParser = module.PokerParser;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "228f4XqElVOorR9N9lm8euY", "TexasGameData", undefined);
      var TexasMttClientState = exports('TexasMttClientState', /*#__PURE__*/function (TexasMttClientState) {
        TexasMttClientState[TexasMttClientState["WAITING_EMPTY"] = -88] = "WAITING_EMPTY";
        TexasMttClientState[TexasMttClientState["WAITING_SIT_DOWN"] = 0] = "WAITING_SIT_DOWN";
        TexasMttClientState[TexasMttClientState["WAITING_SEND_CARD"] = 1] = "WAITING_SEND_CARD";
        TexasMttClientState[TexasMttClientState["REQUEST_REBUY"] = 4] = "REQUEST_REBUY";
        TexasMttClientState[TexasMttClientState["WAITING_START"] = 6] = "WAITING_START";
        TexasMttClientState[TexasMttClientState["WAITING_ADDON"] = 7] = "WAITING_ADDON";
        TexasMttClientState[TexasMttClientState["WAITING_BREAK"] = 8] = "WAITING_BREAK";
        TexasMttClientState[TexasMttClientState["FINISH"] = 99] = "FINISH";
        TexasMttClientState[TexasMttClientState["ADDON"] = 200] = "ADDON";
        TexasMttClientState[TexasMttClientState["BREAK"] = 201] = "BREAK";
        TexasMttClientState[TexasMttClientState["WAITING_FOR_TABLE_ASSIGNMENT"] = 202] = "WAITING_FOR_TABLE_ASSIGNMENT";
        return TexasMttClientState;
      }({}));
      var TestStateStr = function TestStateStr(state) {
        switch (state) {
          case TexasMttClientState.WAITING_EMPTY:
            return 'WAITING_EMPTY';
          case TexasMttClientState.WAITING_SIT_DOWN:
            return 'WAITING_SIT_DOWN';
          case TexasMttClientState.WAITING_SEND_CARD:
            return 'WAITING_SEND_CARD';
          case TexasMttClientState.REQUEST_REBUY:
            return 'REQUEST_REBUY';
          case TexasMttClientState.WAITING_START:
            return 'WAITING_START';
          case TexasMttClientState.WAITING_ADDON:
            return 'WAITING_ADDON';
          case TexasMttClientState.WAITING_BREAK:
            return 'WAITING_BREAK';
          case TexasMttClientState.FINISH:
            return 'FINISH';
          case TexasMttClientState.WAITING_FOR_TABLE_ASSIGNMENT:
            return 'WAITING_FOR_TABLE_ASSIGNMENT';
          default:
            return "" + state;
        }
      };

      /**
       * MTT状态
       */
      var MTTState = exports('MTTState', /*#__PURE__*/function () {
        function MTTState() {
          this._value = TexasMttClientState.WAITING_EMPTY;
          this._timeStamp = void 0;
          this.addonNum = 0;
          this._rebuyInfo = void 0;
          this._isFinalTable = false;
          this._nextHandAddon = false;
          this._nextHandBreak = false;
        }
        var _proto = MTTState.prototype;
        _proto.onMsgWaitCast = function onMsgWaitCast(msg) {
          this.value = msg.state;
          this._timeStamp = msg.value;
        };
        _proto.onMsgAddonOrBreakCast = function onMsgAddonOrBreakCast(msg) {
          if (msg.type == 1) {
            this.value = TexasMttClientState.ADDON;
            this._nextHandAddon = false;
            this.addonNum = msg.addOn;
          } else {
            this.value = TexasMttClientState.BREAK;
            this._nextHandBreak = false;
          }
          this._timeStamp = msg.time;
        };
        _proto.onMsgRebuyInfoCast = function onMsgRebuyInfoCast(msg) {
          this.value = TexasMttClientState.REQUEST_REBUY;
          this._timeStamp = msg.leftTime;
          this._rebuyInfo = msg;
        };
        _proto.setEmpty = function setEmpty() {
          this.value = TexasMttClientState.WAITING_EMPTY;
        };
        _proto.setWaitTable = function setWaitTable() {
          this.value = TexasMttClientState.WAITING_FOR_TABLE_ASSIGNMENT;
        };
        _proto.setFinish = function setFinish() {
          this.value = TexasMttClientState.FINISH;
        };
        _proto.setFinalTable = function setFinalTable() {
          this._isFinalTable = true;
        };
        _proto.reset = function reset() {
          this.value = TexasMttClientState.WAITING_FOR_TABLE_ASSIGNMENT;
          this._timeStamp = undefined;
          this._rebuyInfo = undefined;
          this._isFinalTable = false;
          this._nextHandAddon = false;
          this._nextHandBreak = false;
          this.addonNum = 0;
        };
        _createClass(MTTState, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            if (v != this._value) {
              Log.game.log('MTTState', "value change from " + TestStateStr(this._value) + " to " + TestStateStr(v), this);
              this._value = v;
            }
          }
        }, {
          key: "timeStamp",
          get: function get() {
            return this._timeStamp;
          }
        }, {
          key: "rebuyInfo",
          get: function get() {
            return this._rebuyInfo;
          }
        }, {
          key: "isFinalTable",
          get: function get() {
            return this._isFinalTable;
          }
        }, {
          key: "nextHandAddon",
          get: function get() {
            return this._nextHandAddon;
          },
          set: function set(v) {
            this._nextHandAddon = v;
          }
        }, {
          key: "nextHandBreak",
          get: function get() {
            return this._nextHandBreak;
          },
          set: function set(v) {
            this._nextHandBreak = v;
          }
        }]);
        return MTTState;
      }());

      /**
       * 当前牌局的客户端状态（区别于由服务器同步的状态，这里只维护客户端自己定义的状态）
       */
      var TexasClientState = exports('TexasClientState', /*#__PURE__*/function () {
        function TexasClientState() {
          /**
           * 当前玩家的组牌结果
           */
          this.curPlayerCardTypeParsed = void 0;
          /**
           * 这一局是否已经摊牌了（用于判断发公共牌的时候是不是已经摊牌的状态）
           */
          this.isCardOpened = false;
          /**
           * 这一局是否需要显示胜率
           */
          this.needShowWinRate = false;
          /**
           * 非mtt对局是否需要进行自动坐下
           */
          this.autoSitdown = true;
          /**
           * 用于限制 mtt addoncast 广播弹出addon框只弹出一次 (reset 不重置)
           */
          this.addonPopupFlag = false;
          /**
           * 记录盖牌的玩家
           */
          this.coverPlayers = new Set();
          /**
           * 记录 allin 后发公共牌后每个玩家的胜率
           */
          this.allinWinRate = new Map();
          /**
           * 记录 allin 后发公共牌后每个玩家的outs
           */
          this.allinOuts = new Map();
        }
        var _proto2 = TexasClientState.prototype;
        /**
         * 计算当前玩家的组牌结果
         */
        _proto2.parseCurPlayerCardType = function parseCurPlayerCardType(tableInfo, gameType) {
          this.curPlayerCardTypeParsed = undefined;
          if (!tableInfo || !tableInfo.handcards || tableInfo.handcards.length == 0) return;
          if (!tableInfo.publicCards || tableInfo.publicCards.length == 0) return;
          var _PokerParser$parseCar = PokerParser.parseCardType(tableInfo.handcards, tableInfo.publicCards, gameType),
            cardType = _PokerParser$parseCar[0],
            cardCodes = _PokerParser$parseCar[1];
          this.curPlayerCardTypeParsed = {
            cardType: cardType,
            selectCards: cardCodes
          };
        };
        _proto2.reset = function reset() {
          this.curPlayerCardTypeParsed = undefined;
          this.isCardOpened = false;
          this.needShowWinRate = false;
          this.autoSitdown = true;
          this.allinWinRate.clear();
          this.coverPlayers.clear();
          this.allinOuts.clear();
        };
        return TexasClientState;
      }());
      var TexasGameData = exports('TexasGameData', /*#__PURE__*/function () {
        function TexasGameData() {
          this.isRestore = true;
          this._isMatch = false;
          this._isLookOn = false;
          this._lookonPlayer = void 0;
          this._lookonRoom = void 0;
          this._isJoinWait = false;
          this._roomID = void 0;
          this._texasRule = void 0;
          /**
           * 这一局的结算数据
           */
          this.gameResult = void 0;
          this._roomInfo = void 0;
          this._tableInfo = void 0;
          this.texasClientState = new TexasClientState();
          this._mttInfo = void 0;
          this.mttState = new MTTState();
          this._chairPlayers = new Map();
          this._roomPlayers = new Map();
        }
        var _proto3 = TexasGameData.prototype;
        _proto3.init = function init(params) {
          this._isMatch = params.isMatch == true;
          this._isLookOn = params.isLookOn == true;
          this._isJoinWait = params.isJoinWait == true;
          if (this._isMatch) {
            if (this._isLookOn) {
              this._lookonRoom = params.lookonRoom;
              this._lookonPlayer = params.lookonPlayer;
            }
          } else {
            this._roomInfo = params.roomInfo;
            this._texasRule = params.roomInfo.rule;
            this._roomID = params.roomInfo.roomId;
          }
          this.mttInfo = params.mttInfo;
        };
        _proto3.reset = function reset(resetMttState) {
          if (resetMttState === void 0) {
            resetMttState = true;
          }
          // this.tableInfo = undefined;
          // this.gameResult = undefined;
          this.isRestore = true;
          if (resetMttState) {
            this.mttState.reset();
          }
          this._roomPlayers.clear();
          this._chairPlayers.clear();
          this.texasClientState.reset();
        };
        _proto3.setRoomID = function setRoomID(roomid) {
          this._roomID = roomid;
          if (this._roomInfo) {
            this._roomInfo.roomId = roomid;
          }
        };
        _proto3.setLookonState = function setLookonState(lookon, lookonRoom, lookonPlayer) {
          this._isLookOn = lookon == true;
          if (this._isLookOn) {
            if (lookonRoom) {
              this._lookonRoom = lookonRoom;
            }
            if (lookonPlayer) {
              this._lookonPlayer = lookonPlayer;
            }
          } else {
            this._lookonRoom = undefined;
            this._lookonPlayer = undefined;
          }
        };
        _proto3.onMsgSidePotsCast = function onMsgSidePotsCast(msg) {
          this.tableInfo.preOprType = GameConst.TexasPlay.EPreOperationType.Cancel;
          this.tableInfo.sidePot = msg.sidePot;
          this.tableInfo.pot = msg.sidePot.reduce(function (previousValue, currentValue) {
            return previousValue + currentValue;
          });
          this._chairPlayers.forEach(function (info) {
            info.tableChip = 0;
          });
        }

        /**
         * 房间内玩家的数量
         */;
        /**
         * 通过 playerID 获取所有在房间旁观的玩家和玩牌的玩家
         * @param playerID
         * @returns
         */
        _proto3.getRoomPlayerInfo = function getRoomPlayerInfo(playerID) {
          return this._roomPlayers.get(playerID);
        }

        /**
         * 通过 chairID 获取座位上的玩家的信息
         * @param chairID
         */;
        _proto3.getChairPlayerInfo = function getChairPlayerInfo(chairID) {
          return this._chairPlayers.get(chairID);
        }

        /**
         * 通过 playerID 获取 座位上的玩家的信息
         * @param playerID
         * @returns
         */;
        _proto3.getChairPlayerInfoByPlayerID = function getChairPlayerInfoByPlayerID(playerID) {
          for (var _iterator = _createForOfIteratorHelperLoose(this._chairPlayers.values()), _step; !(_step = _iterator()).done;) {
            var info = _step.value;
            if (info.playerid == playerID) {
              return info;
            }
          }
        }

        /**
         * 座位上是否是空的
         * @param chairID
         * @returns
         */;
        _proto3.isChairEmpty = function isChairEmpty(chairID) {
          if (chairID > 0) {
            return !this._chairPlayers.has(chairID);
          }
          return true;
        }
        /**
         * 获取当前玩家的游戏信息
         */;
        _proto3.getCurPlayerInfo = function getCurPlayerInfo() {
          return this.getChairPlayerInfoByPlayerID(RoleData.inst.playerID);
        }

        /**
         * 玩家进入房间
         * @param playerInfo
         */;
        _proto3.playerEnter = function playerEnter(playerInfo) {
          // Log.game.log('TexasGameData', 'playerEnter', playerInfo);
          this._roomPlayers.set(playerInfo.playerid, playerInfo);
        }
        /**
         * 玩家离开房间
         * @param playerID
         */;
        _proto3.playerLeave = function playerLeave(playerID) {
          // Log.game.log('TexasGameData', 'playerLeaveRoom', playerID);
          if (this._roomPlayers.has(playerID)) {
            this._roomPlayers["delete"](playerID);
            // let playerInfo = this._roomPlayers.get(playerID);
            // if (playerInfo.chairId > 0) {
            //     if (this._chairPlayers.has(playerInfo.chairId)) {
            //         this._chairPlayers.delete(playerInfo.chairId);
            //     }
            // }
          }
        }
        /**
         * 玩家坐下
         * @param playerID
         * @param chairID
         */;
        _proto3.playerSitdown = function playerSitdown(playerID, chairID) {
          // Log.game.log('TexasGameData', 'playerSeatdown', playerID, chairID);
          if (playerID > 0 && chairID > 0) {
            var playerInfo = this.getRoomPlayerInfo(playerID);
            if (playerInfo) {
              playerInfo.chairId = chairID;
              this._chairPlayers.set(chairID, playerInfo);
            } else {
              Log.game.error('TexasGameData', 'playerSeatdown', '玩家不在房间内', playerInfo.playerid, playerInfo.chairId);
            }
          } else {
            Log.game.error('TexasGameData', 'playerSeatdown', '无效参数');
          }
        }
        /**
         * 玩家起立
         * @param playerID
         * @param chairID
         */;
        _proto3.playerStandup = function playerStandup(playerID, chairID) {
          // Log.game.log('TexasGameData', 'playerLeaveChair', playerID, chairID);
          var playerInfo = this._roomPlayers.get(playerID);
          if (playerInfo) {
            playerInfo.actStatus = -1;
            playerInfo.tableChip = 0;
            if (this.costType == GameConst.EGameCostType.cash) {
              playerInfo.chip = 0;
            }
          }
          if (this._tableInfo && playerID == RoleData.inst.playerID) {
            if (this._tableInfo.handcards) {
              this._tableInfo.handcards.length = 0;
            }
          }
          if (this._chairPlayers.has(chairID)) {
            this._chairPlayers["delete"](chairID);
          }
        };
        _proto3.mttInfoFresh = function mttInfoFresh(msg) {
          if (!this.mttInfo) return;
          this.mttInfo.num = msg.num;
          this.mttInfo.rule.startTime = msg.startTime; //比赛开始时间
          this.mttInfo.buttonState = msg.buttonState; //button状态
          this.mttInfo.time = msg.time; //。。。没用
          this.mttInfo.isEntranceClose = msg.isEntranceClose; //是否关闭报名入口
          this.mttInfo.memberrank.isMoney = msg.isMoney; //是否进去钱圈
          this.mttInfo.waitBalanceStart = msg.waitBalanceStart;
        };
        _createClass(TexasGameData, [{
          key: "isMatch",
          get: function get() {
            return this._isMatch;
          }
        }, {
          key: "isLookOn",
          get: function get() {
            return this._isLookOn;
          }
        }, {
          key: "lookonPlayer",
          get: function get() {
            return this._lookonPlayer;
          }
        }, {
          key: "lookonRoom",
          get: function get() {
            return this._lookonRoom;
          }
        }, {
          key: "isJoinWait",
          get: function get() {
            return this._isJoinWait;
          }
        }, {
          key: "roomId",
          get: function get() {
            return this._roomID;
          }
        }, {
          key: "costType",
          get: function get() {
            if (this._isMatch) {
              return this.mttInfo.rule.buyCoinType;
            } else {
              return this._roomInfo.costType;
            }
          }
        }, {
          key: "mttId",
          get: function get() {
            var _this$_mttInfo;
            return (_this$_mttInfo = this._mttInfo) == null ? void 0 : _this$_mttInfo.mttid;
          }
        }, {
          key: "maxChair",
          get: function get() {
            if (this.isMatch) {
              return this._mttInfo.rule.chairNum;
            } else {
              var _this$_texasRule;
              return (_this$_texasRule = this._texasRule) == null ? void 0 : _this$_texasRule.maxChair;
            }
          }
        }, {
          key: "gameType",
          get: function get() {
            if (this.isMatch) {
              return this._mttInfo.rule.gameType;
            } else {
              return this._texasRule.gameType;
            }
          }
        }, {
          key: "tableIndex",
          get: function get() {
            var _this$_tableInfo;
            return (_this$_tableInfo = this._tableInfo) == null ? void 0 : _this$_tableInfo.tableIndex;
          }
        }, {
          key: "texasRule",
          get: function get() {
            return this._texasRule;
          }
        }, {
          key: "handPokerCount",
          get: function get() {
            switch (this.gameType) {
              case GameConst.TexasPlay.EGameType.PLO4:
                return 4;
              case GameConst.TexasPlay.EGameType.PLO5:
                return 5;
              case GameConst.TexasPlay.EGameType.PLO6:
                return 6;
              // case GameConst.EGameType.MTT: break; // rule 里面不会传 MTT 类型
              default:
                return 2;
            }
          }
        }, {
          key: "roomInfo",
          get: function get() {
            return this._roomInfo;
          }
        }, {
          key: "tableInfo",
          get: function get() {
            return this._tableInfo;
          },
          set: function set(v) {
            this._tableInfo = v;
            if (v && v.rule) {
              this._texasRule = v.rule;
              this.texasClientState.parseCurPlayerCardType(v, this.gameType);
            } else {
              this._texasRule = undefined;
            }
            this._roomPlayers.clear();
            this._chairPlayers.clear();
            if (v && v.players) {
              for (var i = 0; i < v.players.length; i++) {
                var player = v.players[i];
                this._roomPlayers.set(player.playerid, player);
                if (player.chairId > 0) {
                  this._chairPlayers.set(player.chairId, player);
                }
              }
            }
          }
        }, {
          key: "mttInfo",
          get: function get() {
            return this._mttInfo;
          },
          set: function set(v) {
            this._mttInfo = v;
          }
        }, {
          key: "mttRule",
          get: function get() {
            return this._mttInfo.rule;
          }
        }, {
          key: "isPloGame",
          get: function get() {
            return this.gameType >= GameConst.TexasPlay.EGameType.PLO4 && this.gameType <= GameConst.TexasPlay.EGameType.PLO6;
          }
        }, {
          key: "roomPlayerNum",
          get: function get() {
            return this._roomPlayers.size;
          }

          /**
           * 座位上玩家的数量
           */
        }, {
          key: "chairPlayerNum",
          get: function get() {
            return this._chairPlayers.size;
          }
        }, {
          key: "clubID",
          get: function get() {
            if (this.isMatch) {
              return this._mttInfo.clubid;
            } else {
              return this._roomInfo.clubid;
            }
          }
        }, {
          key: "isClubRoom",
          get: function get() {
            return this.clubID && this.clubID > 0;
          }
        }, {
          key: "isHallRoom",
          get: function get() {
            return !this.isClubRoom;
          }
        }, {
          key: "isKOBounty",
          get: function get() {
            return this.isMatch && this._mttInfo.rule.koBounty && this._mttInfo.rule.koBounty.isOpen;
          }
        }, {
          key: "koBountyType",
          get: function get() {
            if (this.isKOBounty) {
              return this._mttInfo.rule.koBounty.type;
            }
          }
        }, {
          key: "isFlash",
          get: function get() {
            return !this.isMatch && this._roomInfo.isFlash == 1;
          }
        }, {
          key: "clubExRate",
          get: function get() {
            if (this.isClubRoom && !this.isMatch) {
              // todo 获取俱乐部汇率并返回
              return 1;
            } else {
              return 1;
            }
          }
        }, {
          key: "sbNum",
          get: function get() {
            return this._texasRule.sbNum;
          },
          set: function set(v) {
            this._texasRule.sbNum = v;
          }
        }, {
          key: "bbNum",
          get: function get() {
            return this.sbNum * 2;
          }
        }, {
          key: "sbNumRated",
          get: function get() {
            return Utils.formatDoubleValue(this.sbNum * this.clubExRate);
          }
        }, {
          key: "bbNumRated",
          get: function get() {
            return Utils.formatDoubleValue(this.bbNum * this.clubExRate);
          }
        }, {
          key: "anteNum",
          get: function get() {
            return this._texasRule.ante;
          },
          set: function set(v) {
            this._texasRule.ante = v;
          }
        }, {
          key: "anteNumRated",
          get: function get() {
            return Utils.formatDoubleValue(this.anteNum * this.clubExRate);
          }
        }]);
        return TexasGameData;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasGamePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasGamePage.ts', './GameWindowBase.ts', './TexasPlayShareSpace.ts', './gameproto.mjs_cjs=&original=.js', './TexasGameData.ts', './GameTexasProxy.ts', './GameConfig.ts', './CocosDevKit.ts', './GameRoomProxy.ts', './RoleData.ts', './GameDecorators.ts', './PageEvent.ts', './LanguageManage.ts', './HallProxy.ts', './TexasChatData.ts', './GameChatProxy.ts', './GameMttProxy.ts', './UI_TexasGameContent.ts', './ConfirmBox.ts', './MttProxy.ts', './Logger.ts', './CDKDecorators.ts', './gameproto.js', './LocalStorageTool.ts', './Utils.ts', './NetTypes.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, sys, SpriteFrame, HorizontalTextAlignment, UI_TexasGamePage, EEnterType, GameWindowBase, ExecutionQueue, TexasPlayShareSpace, TexasGameData, TexasMttClientState, GameTexasProxy, GameConfig, GameRoomProxy, RoleData, MarkForPageEventListener, EPageEvent, LanguageManager, HallProxy, TexasChatData, GameChatProxy, GameMttProxy, UI_TexasGameContent, ConfirmBox, MttProxy, Log, SafeHandler, _cjsExports, LocalStorageTool, Utils, NetTypes;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      SpriteFrame = module.SpriteFrame;
      HorizontalTextAlignment = module.HorizontalTextAlignment;
    }, function (module) {
      UI_TexasGamePage = module.default;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      ExecutionQueue = module.ExecutionQueue;
      TexasPlayShareSpace = module.TexasPlayShareSpace;
    }, null, function (module) {
      TexasGameData = module.TexasGameData;
      TexasMttClientState = module.TexasMttClientState;
    }, function (module) {
      GameTexasProxy = module.GameTexasProxy;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, null, function (module) {
      GameRoomProxy = module.GameRoomProxy;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      MarkForPageEventListener = module.MarkForPageEventListener;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, function (module) {
      TexasChatData = module.TexasChatData;
    }, function (module) {
      GameChatProxy = module.GameChatProxy;
    }, function (module) {
      GameMttProxy = module.GameMttProxy;
    }, function (module) {
      UI_TexasGameContent = module.default;
    }, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      MttProxy = module.MttProxy;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      SafeHandler = module.SafeHandler;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      NetTypes = module.NetTypes;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "7a667V+hUhHCoRkJwPmyK8s", "TexasGamePage", undefined);
      var TexasGamePage = exports('TexasGamePage', (_dec = MarkForPageEventListener(EPageEvent.LOGIN_PROCESS_COMPLETED), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(TexasGamePage, _GameWindowBase);
        function TexasGamePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/GamePlay', 'FGUI/Poker'];
          _this.resources = ['CCRes/TexasGamePlay/TexasGameBg1/spriteFrame', 'CCRes/TexasGamePlay/Spine/YouWIn', 'CCRes/TexasGamePlay/Spine/ChairWin'];
          _this.paneClass = UI_TexasGamePage;
          _this.removeUnderlyingWindow = true;
          _this.gestureCloseWindow = false;
          _this.enterType = EEnterType.horizontal;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'TexasGamePage';
          _this._bShowHostReadPoint = true;
          _this.inputParams = void 0;
          _this.texasGameContent = void 0;
          _this.shareSpace = void 0;
          _this.initGamePlayProcessLoading = void 0;
          _this.exitConfirmBox = void 0;
          _this._showReadPoint = '0';
          _this.seatingRuleBox = void 0;
          return _this;
        }
        TexasGamePage.create = function create(from) {
          return new TexasGamePage(from);
        };
        var _proto = TexasGamePage.prototype;
        _proto.setInputParams = function setInputParams(params) {
          Log.debug.log('TexasGamePage', 'setInputParams', params);
          _GameWindowBase.prototype.setInputParams.call(this, params);
        };
        _proto.onInit = function onInit() {
          Log.game.log('TexasGamePage', 'onInit');
          this.setBg();
        };
        _proto.onShown = function onShown() {
          var _this2 = this;
          _GameWindowBase.prototype.onShown.call(this);
          setTimeout(function () {
            if (!sys.isNative && window.__removeCustomLoadingView) {
              window.__removeCustomLoadingView();
            }
          }, 100);
          this._partner.scheduleOnce(function () {
            // 创建 content
            var content = UI_TexasGameContent.createInstance();
            _this2.contentPane.addChild(content);
            content.setSize(_this2.contentPane.width, _this2.contentPane.height);
            _this2.texasGameContent = content;

            // 创建 shareSpace
            var gameLogicDrive = new ExecutionQueue();
            var shareSpace = new TexasPlayShareSpace(gameLogicDrive);
            shareSpace.texasGamePage = _this2;
            shareSpace.texasGameData = new TexasGameData();
            shareSpace.texasGameData.init(_this2.inputParams);
            shareSpace.texasChatData = new TexasChatData();
            shareSpace.texasChatData.init();
            shareSpace.texasProxy = new GameTexasProxy();
            shareSpace.texasProxy.init(shareSpace, gameLogicDrive);
            shareSpace.roomProxy = new GameRoomProxy();
            shareSpace.roomProxy.init(shareSpace, gameLogicDrive);
            shareSpace.chatProxy = new GameChatProxy();
            shareSpace.chatProxy.init(shareSpace, gameLogicDrive);
            shareSpace.mttProxy = new GameMttProxy();
            shareSpace.mttProxy.init(shareSpace, gameLogicDrive);
            _this2.shareSpace = shareSpace;

            // 初始化
            _this2.tableLayer.init(_this2.shareSpace);
            _this2.pokerLayer.init(_this2.shareSpace);
            _this2.playerLayer.init(_this2.shareSpace);
            _this2.operatorLayer.init(_this2.shareSpace);
            _this2.chipActionLayer.init(_this2.shareSpace);
            _this2.menuLayer.init(_this2.shareSpace);
            _this2.popupLayer.init(_this2.shareSpace);
            _this2.mttWaitTipLayer.init(_this2.shareSpace);
            _this2.tipLayer.init(_this2.shareSpace);
            if (!_this2.initGamePlayProcessLoading) {
              _this2.initGamePlayProcessLoading = _this2.createLoadingItem();
            }
            _this2.enterGame();
          }, 0.05);
        };
        _proto.reset = function reset() {
          if (this.seatingRuleBox && this.seatingRuleBox.node && this.seatingRuleBox.node.isValid) {
            this.seatingRuleBox.dispose();
          }
          this.seatingRuleBox = undefined;
          if (this.exitConfirmBox && this.exitConfirmBox.node && this.exitConfirmBox.node.isValid) {
            this.exitConfirmBox.dispose();
          }
          this.exitConfirmBox = undefined;
          this.tableLayer.reset();
          this.pokerLayer.reset();
          this.playerLayer.reset();
          this.chipActionLayer.reset();
          this.operatorLayer.reset();
          this.menuLayer.reset();
          this.popupLayer.reset();
          this.mttWaitTipLayer.reset();
          this.tipLayer.reset();
        };
        _proto.enterGame = function enterGame() {
          var _this3 = this;
          // this.initGamePlayProcessLoading.show();
          if (this.inputParams.isMatch) {
            // do something
            MttProxy.inst.getMttInfo(this.shareSpace.texasGameData.mttId, SafeHandler(function (netdata) {
              var msg = netdata.getData(_cjsExports.mtt.MsgGetMttInfoRsp); // 获取消息内容
              if (netdata.isRetSuccess() && msg.mttInfo) {
                _this3.shareSpace.texasGameData.mttInfo = msg.mttInfo;
                _this3.shareSpace.mttProxy.joinMTT();
              } else {
                _this3.showExitConfirmBox('Enter MTT Fail');
                _this3.shareSpace;
              }
            }, this));
          } else {
            this.shareSpace.texasProxy.enterRoom(true);
          }
        };
        _proto.showExitConfirmBox = function showExitConfirmBox(content) {
          var _this4 = this;
          if (this.exitConfirmBox && this.exitConfirmBox.node && this.exitConfirmBox.node.isValid) {
            this.exitConfirmBox.dispose();
          }
          this.exitConfirmBox = ConfirmBox.create(this, 1);
          this.exitConfirmBox.setInputParams({
            buttonNum: 1,
            clickOutsideClose: false,
            content: content,
            confirmText: LanguageManager.get('CCS_TXT_267')
          });
          this.exitConfirmBox.addHook({
            onConfirm: function onConfirm() {
              _this4.shareSpace.closeRoom();
            }
          });
          this.exitConfirmBox.showOn(this.grootInst);
        };
        _proto.switchTable = function switchTable(index) {
          var _this5 = this;
          if (this.shareSpace.texasGameData.isMatch) return;
          HallProxy.inst.getHallRoomId(this.shareSpace.texasGameData.roomInfo.gameid, SafeHandler(function (netdata) {
            if (netdata.isRetSuccess()) {
              var msg = netdata.getData(_cjsExports.hall.MsgGetHallRoomIdRsp);
              if (msg.roomId == 0) {
                Log.game.warn('TexasGamePage', 'switchTable', 'roomId:', msg.roomId);
                return;
              }
              if (msg.roomId == _this5.shareSpace.texasGameData.roomId) {
                Log.game.warn('TexasGamePage', 'switchTable', '取到了与目前相同的 roomid');
                return;
              }
              _this5.initGamePlayProcessLoading.show();
              _this5.shareSpace.texasProxy.leaveRoom(function () {
                Log.game.log('TexasGamePage', 'switchTable', 'leaveRoom resolved');
                _this5.shareSpace.reset();
                _this5.shareSpace.texasGameData.setRoomID(msg.roomId);
                _this5.shareSpace.texasGameData.texasClientState.autoSitdown = true;
                _this5.enterGame();
              });
            } else {
              var txt = LanguageManager.getErrorText(netdata.getRetCode());
              if (txt && txt.length > 0) {
                _this5.grootInst.showCenterTip(txt);
              }
            }
          }, this), index);
        };
        _proto.setBg = function setBg() {
          this.pane.m_bg.texture = GameConfig.bundle.get('CCRes/TexasGamePlay/TexasGameBg1/spriteFrame', SpriteFrame);
        };
        _proto.syncReadPoint = function syncReadPoint() {
          this.menuLayer.freshReadPoint();
        };
        _proto.onMatchJoin = function onMatchJoin(mttid) {
          var _this6 = this;
          this.initGamePlayProcessLoading.hide();
          var rule = LocalStorageTool.getString('show_host_rule_menu');
          if (rule && rule.length > 0) {
            this._showReadPoint = rule;
          }
          if (this._showReadPoint == '0') {
            LocalStorageTool.setString('show_host_rule_menu', '1');
            if (this.seatingRuleBox) return;
            var allInTime = this.shareSpace.texasGameData.mttRule.afkActTimesToAllin;
            if (allInTime > 0) {
              var titleText = LanguageManager.get('SEATING_RULE');
              var contentText = Utils.formatStr(LanguageManager.get('SEATING_RULE_DESC'), allInTime);
              var okButtonText = LanguageManager.get('CCS_TXT_427');
              this.seatingRuleBox = ConfirmBox.create(this, 1);
              this.seatingRuleBox.addHook({
                onPageDestroy: function onPageDestroy() {
                  _this6.seatingRuleBox = undefined;
                }
              });
              this.seatingRuleBox.setInputParams({
                buttonNum: 1,
                title: titleText,
                content: contentText,
                confirmText: okButtonText,
                align: HorizontalTextAlignment.LEFT
              });
              this.seatingRuleBox.showOn(this.grootInst);
            }
          }
        };
        _proto.onRoomEnter = function onRoomEnter(roomId) {
          Log.game.log('TexasGamePage', 'onRoomEnter', roomId);
          // do something
          this.initGamePlayProcessLoading.hide();
        };
        _proto.syncRoomStatu = function syncRoomStatu(msg) {
          Log.game.log('TexasGamePage', 'syncRoomStatu');
          this.tableLayer.reset();
          this.pokerLayer.reset();
          this.playerLayer.reset();
          this.chipActionLayer.reset();
          this.operatorLayer.reset();
          this.menuLayer.reset();
          this.playerLayer.createPlayerItems();
          this.tableLayer.updateTableState();
          this.tableLayer.updatePlaceD();
          this.playerLayer.updateChairStateAll();
          this.pokerLayer.updatePokerLayer();
          this.popupLayer.updateTexasPopup();
          this.menuLayer.updateGameMenuStatus();
          if (this.shareSpace.texasGameData.isMatch) {
            this.mttWaitTipLayer.updateLayer();
          }
          this.shareSpace.texasGamePage.operatorLayer.updateOperatorLayerStatus(undefined, true);
        };
        _proto.gameStart = function gameStart(msg) {
          var _this7 = this;
          Log.game.log('TexasGamePage', 'gameStart');
          if (this.shareSpace.texasGameData.isMatch) {
            this.mttWaitTipLayer.updateLayer();
          }
          this.playerLayer.createPlayerItems();
          this.shareSpace.pauseGameLogicDrive();
          this.shareSpace.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
            _this7.tableLayer.movePlaceD(function () {
              _this7.tableLayer.updateTableState();
              _this7.playerLayer.updateChairStateAll();
              _this7.pokerLayer.updatePokerLayer();
              _this7.popupLayer.updateTexasPopup();
              if (msg.info.gamePlayerids.includes(RoleData.inst.playerID)) {
                _this7.operatorLayer.immediatelyEnterState = false;
              }
              _this7.menuLayer.updateGameMenuStatus();
              _this7.shareSpace.resumeGameLogicDrive();
              _this7.tableLayer.updateTableState();
            });
          }, true);
        };
        _proto.playerEnter = function playerEnter(msg) {
          Log.game.log('TexasGamePage', 'playerEnter');
          var chairAction = false;
          if (msg.player.playerid == RoleData.inst.playerID) {
            if (msg.player.chairId > 0) {
              // 当前玩家坐下需要判断是不是要转椅子
              var item = this.playerLayer.getItemByChairID(msg.player.chairId);
              chairAction = item.chairIndex != 0; // 当前玩家不在 0 好索引的椅子上就得转椅子了
            }

            this.menuLayer.updateGameMenuStatus();
            this.shareSpace.texasGamePage.popupLayer.chatLayer.setChatEnable();
          }
          if (chairAction) {
            this.playerLayer.updateChairIndex();
            this.tableLayer.updatePlaceD();
          } else {
            this.playerLayer.updateChairStateAll();
          }
        };
        _proto.playerLeave = function playerLeave(msg) {
          Log.game.log('TexasGamePage', 'playerLeave');
          this.playerLayer.updateChairStateAll();
          this.pokerLayer.updatePokerLayer();
          this.tableLayer.updatePlaceD();
          // do something
        };

        _proto.playerSitdown = function playerSitdown(msg) {
          var _this8 = this;
          Log.game.log('TexasGamePage', 'playerSitdown');
          var chairAction = false;
          if (msg.playerid == RoleData.inst.playerID) {
            // 当前玩家坐下需要判断是不是要转椅子
            var item = this.playerLayer.getItemByChairID(msg.chairId);
            chairAction = item.chairIndex != 0; // 当前玩家不在 0 好索引的椅子上就得转椅子了
            this.operatorLayer.immediatelyEnterState = false;
            if (!chairAction) {
              this.menuLayer.updateGameMenuStatus();
            }
          }
          if (chairAction) {
            this.tableLayer.m_iconD.visible = false;
            this.shareSpace.pauseGameLogicDrive();
            this.shareSpace.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this8.playerLayer.rotateChair(function () {
                _this8.playerLayer.updateChairStateAll();
                _this8.tableLayer.updatePlaceD();
                _this8.menuLayer.updateGameMenuStatus();
                _this8.shareSpace.resumeGameLogicDrive();
                if (_this8.shareSpace.texasGameData.isMatch) {
                  _this8.mttWaitTipLayer.updateLayer();
                }
              });
            });
          } else {
            this.playerLayer.updateChairStateAll();
            this.shareSpace.pauseGameLogicDrive();
            this.tableLayer.updatePlaceD();
            this.shareSpace.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this8.shareSpace.resumeGameLogicDrive();
            }, true);
            if (this.shareSpace.texasGameData.isMatch) {
              this.mttWaitTipLayer.updateLayer();
            }
          }
        };
        _proto.playerStandup = function playerStandup(msg) {
          var _this9 = this;
          Log.game.log('TexasGamePage', 'playerStandup');
          this.playerLayer.updateChairStateAll();
          if (msg.playerid == RoleData.inst.playerID) {
            this.operatorLayer.immediatelyEnterState = false;
            this.shareSpace.pauseGameLogicDrive();
            this.shareSpace.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this9.shareSpace.resumeGameLogicDrive();
            }, true);
            this.pokerLayer.updatePokerLayer();
            this.popupLayer.updateTexasPopup();
            this.menuLayer.updateGameMenuStatus();
          }
          this.tableLayer.updatePlaceD();
          if (this.shareSpace.texasGameData.isMatch) {
            this.mttWaitTipLayer.updateLayer();
          }
        };
        _proto.gameResult = function gameResult(msg, finish) {
          var showWinScore = this.playerLayer.gameResultShowWinScore.bind(this.playerLayer, msg, finish);
          this.chipActionLayer.gameResultMoveChip(msg, showWinScore);
        };
        _proto.playerFold = function playerFold(betInfo, finish) {
          var item = this.playerLayer.getItemByPlayerID(betInfo.playerid);
          if (item) {
            var counter = Utils.createCounterFunction(2, finish);
            item.playFold(counter);
            this.chipActionLayer.playeFold(betInfo, counter);
          } else {
            this.chipActionLayer.playeFold(betInfo, finish);
          }
        };
        _proto.onNetStateChange = function onNetStateChange(state) {
          if (state == NetTypes.ENetNodeState.closed) {
            Log.game.log('TexasGamePage', 'onNetStateChange', 'close');
            if (!this.shareSpace) return;
            if (!this.shareSpace.texasGameData) return;
            if (this.shareSpace.texasGameData.isMatch) {
              if (this.shareSpace.texasGameData.mttState.value == TexasMttClientState.FINISH) {
                return;
              }
              if (this.shareSpace.texasGamePage.popupLayer.mttResultDialog.isOpen) {
                return;
              }
            }
            this.shareSpace.reset();
          }
        };
        _proto.onMsgRetFail = function onMsgRetFail(netdata) {
          if (!netdata.isRetSuccess()) {
            var retCode = netdata.getRetCode();
            var text = LanguageManager.getErrorText(retCode.toString());
            if (text && text.length > 0) {
              this.grootInst.showCenterTip(text);
            }
          }
        }

        /**
         * 重连登录成功
         */;
        _proto.onLoginSuccess = function onLoginSuccess() {
          if (this.shareSpace.texasGameData.isMatch) {
            if (this.shareSpace.texasGameData.mttState.value == TexasMttClientState.FINISH) {
              return;
            }
            if (this.shareSpace.texasGamePage.popupLayer.mttResultDialog.isOpen) {
              return;
            }
          }
          this.enterGame();
        };
        _proto.onDestroy = function onDestroy() {
          _GameWindowBase.prototype.onDestroy.call(this);
          this.shareSpace.destroy();
        };
        _createClass(TexasGamePage, [{
          key: "tableLayer",
          get: function get() {
            return this.texasGameContent.m_tableLayer;
          }
        }, {
          key: "playerLayer",
          get: function get() {
            return this.texasGameContent.m_playerLayer;
          }
        }, {
          key: "chipActionLayer",
          get: function get() {
            return this.texasGameContent.m_chipActionLayer;
          }
        }, {
          key: "pokerLayer",
          get: function get() {
            return this.texasGameContent.m_pokerLayer;
          }
        }, {
          key: "operatorLayer",
          get: function get() {
            return this.texasGameContent.m_operatorLayer;
          }
        }, {
          key: "menuLayer",
          get: function get() {
            return this.texasGameContent.m_roomMenu;
          }
        }, {
          key: "popupLayer",
          get: function get() {
            return this.texasGameContent.m_popLayer;
          }
        }, {
          key: "mttWaitTipLayer",
          get: function get() {
            return this.texasGameContent.m_mttWaitTipLayer;
          }
        }, {
          key: "tipLayer",
          get: function get() {
            return this.texasGameContent.m_tipLayer;
          }
        }, {
          key: "hostReadPoint",
          get: function get() {
            return this._bShowHostReadPoint;
          },
          set: function set(status) {
            this._bShowHostReadPoint = status;
          }
        }]);
        return TexasGamePage;
      }(GameWindowBase), _applyDecoratedDescriptor(_class.prototype, "onLoginSuccess", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onLoginSuccess"), _class.prototype), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttAddonDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './RoleData.ts', './GameDecorators.ts', './UI_TexasMttAddonDialog.ts', './BlindLevelInfo.ts', './GameConst.ts', './CDKDecorators.ts', './Clock.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, color, RoleData, CustomFguiClass, UI_TexasMttAddonDialog, BlindLevelInfo, GameConst, SafeTimeInterval, Clock, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, null, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasMttAddonDialog = module.default;
    }, function (module) {
      BlindLevelInfo = module.BlindLevelInfo;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Clock = module.Clock;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "924093GPZlGOJv53IEue3R6", "TexasMttAddonDialog", undefined);
      var TimeProgressColor = color('#06C166');
      var TexasMttAddonDialog = exports('TexasMttAddonDialog', (_dec = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasMttAddonDial) {
        _inheritsLoose(TexasMttAddonDialog, _UI_TexasMttAddonDial);
        function TexasMttAddonDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttAddonDial.call.apply(_UI_TexasMttAddonDial, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.clock = new Clock(_assertThisInitialized(_this));
          _this.endTime = void 0;
          return _this;
        }
        var _proto = TexasMttAddonDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttAddonDial.prototype.onConstruct.call(this);
          this.clock.on(this.onClock, this);
          var frame = this.m_frame;
          frame.m_btnConfirm.onClick(this.onBtnConfirmClick, this);
          frame.m_closeButton.onClick(this.onBtnCloseClick, this);
          this.timeProgress.m_content.color = TimeProgressColor.clone();
          this.timeProgress.pointVisible = false;
        };
        _proto.closeView = function closeView() {
          this.clock.stop();
          this.shareSpace.texasGamePage.popupLayer.m_mttAddonController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView(endTime) {
          this.shareSpace.texasGamePage.popupLayer.m_mttAddonController.selectedIndex = 1;
          this.endTime = endTime;
          this.updateDialog();
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.closeView();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasMttAddonDialog';
        };
        _proto.updateDialog = function updateDialog() {
          if (!this.isOpen) return;
          this.updateTimeProgress();
          var mttInfo = this.shareSpace.texasGameData.mttInfo;
          if (mttInfo) {
            // let chipCount = mttInfo.rule.initChip * BlindLevelInfo.Config[mttInfo.rule.blindType - 1][0].bigBlinds;
            var clubRate = this.shareSpace.texasGameData.clubExRate;
            this.m_itemChip.m_iconType.selectedIndex = 2;
            this.m_itemChip.m_value.text = Utils.toFormat(BlindLevelInfo.Config[mttInfo.rule.blindType - 1][0].bigBlinds * mttInfo.rule.initChip * mttInfo.rule.AddOnTimes / 10);
            if (mttInfo.rule.buyCoinType == GameConst.EGameCostType.gold) {
              this.m_itemBalance.m_value.text = Utils.toFormat(RoleData.inst.chip, 0);
              this.m_itemBalance.m_iconType.selectedIndex = 0;
              this.m_itemBuyin.m_value.text = Utils.toFormat(mttInfo.rule.addOn * clubRate);
              this.m_itemBuyin.m_iconType.selectedIndex = 0;
            } else {
              this.m_itemBalance.m_value.text = Utils.toFormat(RoleData.inst.cash, 2, true, false);
              this.m_itemBalance.m_iconType.selectedIndex = 1;
              this.m_itemBuyin.m_value.text = Utils.toFormat(mttInfo.rule.addOn, 2, true, false);
              this.m_itemBuyin.m_iconType.selectedIndex = 1;
            }

            // let curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
            // if (curPlayerInfo) {
            //     let cost = mttInfo.rule.addOn;
            //     let earn = Utils.toFormat(
            //         (BlindLevelInfo.Config[mttInfo.rule.blindType - 1][0].bigBlinds * mttInfo.rule.initChip * mttInfo.rule.AddOnTimes) / 10
            //     );
            //     let myChip = curPlayerInfo.chip ? curPlayerInfo.chip : 0;
            //     let clubRate = this.shareSpace.texasGameData.clubExRate;
            //     if (mttInfo.rule && mttInfo.rule.clubid) {
            //         this.m_textDesc.text = Utils.formatStr(
            //             LanguageManager.get('TXT_817'),
            //             myChip,
            //             earn,
            //             Utils.toFormat(clubRate * cost),
            //             ''
            //         );
            //     } else {
            //         let costStr = '';
            //         if (mttInfo.rule.coinType == GameConst.EGameCostType.cash) {
            //             costStr += `${Utils.toFormat(clubRate * cost)} USDT`;
            //         } else {
            //             costStr += `${Utils.toFormat(clubRate * cost)} TGP`;
            //         }
            //         this.m_textDesc.text = Utils.formatStr(LanguageManager.get('MTT_ADDONDETAIL'), myChip, earn, costStr, '');
            //     }
            // }
          }

          this.forceUpdateRecursion();
        };
        _proto.updateTimeProgress = function updateTimeProgress() {
          var totleTime = GameConst.MATCH.AddonTotalTime;
          var serverTime = Utils.curServerTimeSecondstamp;
          var leftTIme = Math.max(0, Math.min(this.endTime - serverTime, totleTime));
          this.timeProgress.progress = leftTIme / totleTime;
          this.m_textTimeLeft.text = Math.floor(leftTIme) + "s";
          var passedTime = Math.max(0, totleTime - leftTIme);
          this.clock.run(totleTime, passedTime);
        };
        _proto.onClock = function onClock() {
          if (this.clock.over) {
            this.closeView();
          } else {
            this.timeProgress.progress = this.clock.leftTime / this.clock.allTime;
            this.m_textTimeLeft.text = Math.floor(this.clock.leftTime) + "s";
          }
        };
        _proto.onBtnConfirmClick = function onBtnConfirmClick() {
          var _this2 = this;
          this.shareSpace.mttProxy.requestAddon(function (msg) {
            _this2.closeView();
            _this2.grootInst.showCenterTip('TXT_850');
          });
        };
        _proto.onBtnCloseClick = function onBtnCloseClick() {
          this.closeView();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onBtnCloseClick();
          }
        };
        _createClass(TexasMttAddonDialog, [{
          key: "timeProgress",
          get: function get() {
            return this.m_timeProgress.component;
          }
        }, {
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_mttAddonController.selectedIndex == 1;
          }
        }]);
        return TexasMttAddonDialog;
      }(UI_TexasMttAddonDialog), _applyDecoratedDescriptor(_class2.prototype, "onBtnCloseClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCloseClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttCountdown.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Clock.ts', './GameDecorators.ts', './CocosDevKit.ts', './UI_TexasMttCountdown.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Clock, CustomFguiClass, UI_TexasMttCountdown, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Clock = module.Clock;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      UI_TexasMttCountdown = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "0bde3FrgVtIt5Bg9vlyp51L", "TexasMttCountdown", undefined);
      var DisplayTimeLimit = 99 * 60 + 99;
      var TexasMttCountdown = exports('TexasMttCountdown', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttCountdown) {
        _inheritsLoose(TexasMttCountdown, _UI_TexasMttCountdown);
        function TexasMttCountdown() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttCountdown.call.apply(_UI_TexasMttCountdown, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.clock = void 0;
          return _this;
        }
        var _proto = TexasMttCountdown.prototype;
        _proto.reset = function reset() {
          this.clock.stop();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.clock = Clock.create(this);
          this.clock.on(this.onClock, this);
        }

        /**
         * 显示
         * @param type 显示类型 0: addon， 1: break
         * @param endTime
         */;
        _proto.show = function show(type, endTime) {
          var curTime = Utils.curServerTimeSecondstamp;
          if (curTime < endTime) {
            var totalTime = endTime - curTime;
            this.clock.run(totalTime, 0);
            this.m_waitType.selectedIndex = type;
            this.visible = true;
            this.forceUpdateRecursion();
          } else {
            this.hide();
          }
        };
        _proto.hide = function hide() {
          this.clock.stop();
          this.visible = false;
        };
        _proto.onClock = function onClock() {
          this.setLeftTime(this.clock.leftTime);
        };
        _proto.setLeftTime = function setLeftTime(leftTime) {
          if (leftTime >= DisplayTimeLimit) {
            this.m_textTimeChar0.text = '99';
            this.m_textTimeChar1.text = '99';
          } else {
            var mStr = Math.floor(leftTime / 60).toString().padStart(2, '0');
            this.m_textTimeChar0.text = mStr;
            var sStr = Math.floor(leftTime % 60).toString().padStart(2, '0');
            this.m_textTimeChar1.text = sStr;
          }
        };
        return TexasMttCountdown;
      }(UI_TexasMttCountdown)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoBlindsLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './GameDecorators.ts', './UI_TexasMttInfoBlindsLayer.ts', './BlindLevelInfo.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Utils, CustomFguiClass, UI_TexasMttInfoBlindsLayer, BlindLevelInfo;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasMttInfoBlindsLayer = module.default;
    }, function (module) {
      BlindLevelInfo = module.BlindLevelInfo;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "419d4JWx6tFLaobOAUw4JZU", "TexasMttInfoBlindsLayer", undefined);
      var TexasMttInfoBlindsLayer = exports('TexasMttInfoBlindsLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoBlind) {
        _inheritsLoose(TexasMttInfoBlindsLayer, _UI_TexasMttInfoBlind);
        function TexasMttInfoBlindsLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttInfoBlind.call.apply(_UI_TexasMttInfoBlind, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.infoList = [];
          _this.mttLiveInfo = void 0;
          _this.reBuyLevel = -1;
          _this.addOnLevel = -1;
          _this.curBLindLevel = -1;
          return _this;
        }
        var _proto = TexasMttInfoBlindsLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoBlind.prototype.onConstruct.call(this);
          this.m_list.setVirtual();
          this.m_list.itemRenderer = this.renderListItem.bind(this);
        };
        _proto.reset = function reset() {
          this.curBLindLevel = -1;
          this.reBuyLevel = -1;
          this.addOnLevel = -1;
        };
        _proto.setShow = function setShow(mttLiveInfo) {
          this.reset();
          this.mttLiveInfo = mttLiveInfo;
          this.curBLindLevel = -1;
          var startTime = this.mttLiveInfo.startTime;
          if (startTime <= Utils.curServerTimeSecondstamp) {
            var gameinfo = mttLiveInfo.gameinfo;
            this.curBLindLevel = gameinfo ? gameinfo.blindround : 0;
          }
          var rebuyNum = this.shareSpace.texasGameData.mttInfo.rule.reBuyNum;
          var addOnNum = this.shareSpace.texasGameData.mttInfo.rule.AddOnTimes;
          if (rebuyNum > 0) {
            this.reBuyLevel = this.shareSpace.texasGameData.mttInfo.rule.endJoinTime;
          }
          if (addOnNum > 0) {
            this.addOnLevel = this.shareSpace.texasGameData.mttInfo.rule.endJoinTime;
          }
          var blindType = this.shareSpace.texasGameData.mttInfo.rule.blindType;
          var index = blindType - 1;
          this.infoList = BlindLevelInfo.Config[index];
          this.m_list.numItems = this.infoList.length;
          this.m_list.refreshVirtualList();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasMttInfoBlindsLayer';
        };
        _proto.renderListItem = function renderListItem(index, item) {
          var msg = this.infoList[index];
          item.setData(msg, this.curBLindLevel, this.reBuyLevel, this.addOnLevel);
        };
        return TexasMttInfoBlindsLayer;
      }(UI_TexasMttInfoBlindsLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoBlindsLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasMttInfoBlindsLayerItem.ts', './GameDecorators.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasMttInfoBlindsLayerItem, CustomFguiClass, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasMttInfoBlindsLayerItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "e7c3beU1oVDZ4w/QTaNEfK0", "TexasMttInfoBlindsLayerItem", undefined);
      var TexasMttInfoBlindsLayerItem = exports('TexasMttInfoBlindsLayerItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoBlind) {
        _inheritsLoose(TexasMttInfoBlindsLayerItem, _UI_TexasMttInfoBlind);
        function TexasMttInfoBlindsLayerItem() {
          return _UI_TexasMttInfoBlind.apply(this, arguments) || this;
        }
        var _proto = TexasMttInfoBlindsLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoBlind.prototype.onConstruct.call(this);
          this.name = 'TexasMttInfoBlindsLayerItem';
        }
        // pot
        ;

        _proto.setData = function setData(data, curBLindLevel, reBuyLevel, addOnLevel) {
          this.m_selectedCtrl.selectedIndex = curBLindLevel == data.level ? 1 : 0;
          var isAddon = data.level == addOnLevel;
          var isRebuy = data.level <= reBuyLevel;
          this.m_labelA.visible = isAddon;
          this.m_labelR.visible = isRebuy;
          this.m_labelLevel.text = data.level + '';
          var ante = data.ante;
          var bigBlind = data.bigBlinds;
          this.m_labelAnte.text = this.m_labelBlind.text = Utils.toFormat(Utils.formatDoubleValue(ante));
          this.m_labelBlind.text = Utils.toFormat(Utils.formatDoubleValue(bigBlind * 0.5)) + '/' + Utils.toFormat(Utils.formatDoubleValue(bigBlind));
        };
        return TexasMttInfoBlindsLayerItem;
      }(UI_TexasMttInfoBlindsLayerItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UITools.ts', './Utils.ts', './GameDecorators.ts', './UI_TexasMttInfoLayer.ts', './LanguageManage.ts', './fairygui.mjs', './PopupLoadingManager.ts', './CDKDecorators.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, Node, Tween, director, UITools, Utils, CustomFguiClass, UI_TexasMttInfoLayer, LanguageManager, RelationType, Event, GearXY, PopupLoadingManager, SafeTimeInterval;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Tween = module.Tween;
      director = module.director;
    }, function (module) {
      UITools = module.UITools;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasMttInfoLayer = module.default;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      RelationType = module.RelationType;
      Event = module.Event;
      GearXY = module.GearXY;
    }, function (module) {
      PopupLoadingManager = module.PopupLoadingManager;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "d8cd2yeFhZBAYc77kuux92+", "TexasMttInfoLayer", undefined);
      var TexasMttInfoLayer = exports('TexasMttInfoLayer', (_dec = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasMttInfoLayer) {
        _inheritsLoose(TexasMttInfoLayer, _UI_TexasMttInfoLayer);
        function TexasMttInfoLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttInfoLayer.call.apply(_UI_TexasMttInfoLayer, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.mttLiveInfo = void 0;
          _this.riseBlindTs = -1;
          _this.matchBeginTs = -1;
          _this.delayReqStep = void 0;
          _this.canLoadData = false;
          _this.loadingManager = void 0;
          return _this;
        }
        var _proto = TexasMttInfoLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoLayer.prototype.onConstruct.call(this);
          this.m_bgMask.onClick(this.onBtnCloseClick, this);
          this.on(Node.EventType.NODE_DESTROYED, this.onNodeDestroy, this);
          this.m_listCtrl.onChanged(this.onIndexChanged.bind(this), this);
          UITools.optimizationScrollPane(this.m_pageList.scrollPane);
          this.m_labelRiseBlindMinT.text = LanguageManager.get('TXT_754');
          this.m_labelRiseBlindMinT.ensureSizeCorrect();
          this.m_blindUpBg.setSize(this.m_labelRiseBlindMinT.width + 40, this.m_blindUpBg.height);
          this.m_blindUpBg.setPosition(this.m_labelRiseBlindMinT.x - 20, this.m_blindUpBg.y);
          this.m_blindUpBg.addRelation(this.m_labelRiseBlindMinT, RelationType.Left_Left);
          this.m_blindUpBg.ensureSizeCorrect();
          this.m_emptyCtrl.selectedIndex = 1;
          this.loadingManager = new PopupLoadingManager(this.m_loadingLayer);
          this.resetLayer();
        };
        _proto.closeView = function closeView() {
          this.canLoadData = false;
          this.loadingManager.hide();
          this.shareSpace.texasGamePage.popupLayer.m_mttInfoLayerController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView() {
          this.shareSpace.texasGamePage.popupLayer.m_mttInfoLayerController.selectedIndex = 1;
          if (this.m_emptyCtrl.selectedIndex == 1) {
            this.loadingManager.show();
          }
          this.updateLayer(true);
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.resetLayer();
          this.closeView();
        };
        _proto.resetLayer = function resetLayer() {
          Tween.stopAllByTarget(this.node);
          this.stop();
          this.m_labelAddons.text = '--';
          this.m_labelRebuys.text = '--';
          this.m_labelAverage.text = '--';
          this.m_labelMaxStack.text = '--';
          this.m_labelMinStack.text = '--';
          this.m_labelRiseBlindLeftTime.text = '--:--';
          this.m_labelRiseBlindMin.text = '--';
          this.m_playStartTs.text = '--';
          this.m_labelMyRank.text = '--';
          this.m_labelBeakTime.text = '--';
          this.m_labelPlayerCount.text = '--';
          this.m_labelTotalBuyin.text = '--';
          this.m_labelPrizePool.text = '--';
          this.m_labelLateReg.text = '--';
          this.rankingLayer.reset();
          this.tablesLayer.reset();
          this.blindsLayer.reset();
          this.prizeLayer.reset();
          this.mttLiveInfo = null;
          this.m_emptyCtrl.selectedIndex = 1;
        };
        _proto.updateLayer = function updateLayer(showLoading) {
          if (!this.isOpen) return;
          if (this.shareSpace.texasGameData.mttInfo && this.shareSpace.texasGameData.mttInfo.mttid) {
            this.m_labelLateReg.text = this.shareSpace.texasGameData.mttInfo.rule.endJoinTime + '';
            this.reqestMttLiveInfo(showLoading);
          }
        };
        _proto.setClose = function setClose() {
          Tween.stopAllByTarget(this.node);
          this.stop();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasMttInfoLayer';
          this.blindsLayer.init(shareSpace);
          this.rankingLayer.init(shareSpace);
          this.tablesLayer.init(shareSpace);
          this.prizeLayer.init(shareSpace);
          this.shareSpace.texasGamePage.popupLayer.m_mttInfoLayerController.on(Event.GEAR_STOP, this.onGearStop, this);
          this.m_listCtrl.on(Event.GEAR_STOP, this.onTabbarGearStop, this);
        };
        _proto.onNodeDestroy = function onNodeDestroy(node) {
          this.setClose();
        };
        _proto.onIndexChanged = function onIndexChanged() {};
        _proto.onTabbarGearStop = function onTabbarGearStop(target, controller, gear) {
          if (controller == this.m_listCtrl && gear instanceof GearXY) {
            this.refreshSubList();
          }
        };
        _proto.onGearStop = function onGearStop(target, controller, gear) {
          if (target == this && controller == this.shareSpace.texasGamePage.popupLayer.m_mttInfoLayerController && gear instanceof GearXY) {
            if (controller.selectedIndex == 1) {
              this.canLoadData = true;
              this.refreshUI();
            }
          }
        };
        _proto.refreshSubList = function refreshSubList() {
          if (this.mttLiveInfo) {
            var index = this.m_listCtrl.selectedIndex;
            switch (index) {
              case 2:
                this.tablesLayer.setShow(this.mttLiveInfo);
                break;
              case 3:
                this.blindsLayer.setShow(this.mttLiveInfo);
                break;
              case 0:
                this.rankingLayer.setShow();
                break;
              case 1:
                this.prizeLayer.setShow();
                break;
            }
          }
        };
        _proto.refreshUI = function refreshUI() {
          if (!this.mttLiveInfo || !this.canLoadData) {
            return;
          }
          this.m_emptyCtrl.selectedIndex = 0;
          this.loadingManager.hide();
          this.riseBlindTs = -1;
          var startTime = this.mttLiveInfo.startTime;
          this.matchBeginTs = this.isMatchStart ? -1 : startTime;
          var memberrank = this.mttLiveInfo.memberrank;
          var rebuyNum = this.mttLiveInfo.rebuyNum ? this.mttLiveInfo.rebuyNum : 0;
          var addONNum = this.mttLiveInfo.addonNum ? this.mttLiveInfo.addonNum : 0;
          var isLookOn = this.shareSpace.texasGameData.isLookOn;
          if (this.isMatchStart) {
            var gameinfo = this.mttLiveInfo.gameinfo;
            var bigblind = gameinfo ? gameinfo.bigblind : 0; // 大盲
            var averagechip = gameinfo ? gameinfo.averagechip : 0; // 均筹
            var largestchip = gameinfo ? gameinfo.largestchip : 0; // 顶筹
            var smallestchip = gameinfo ? gameinfo.smallestchip : 0; // 底筹
            var riseblind = gameinfo ? gameinfo.riseblind : -1; // 涨盲时间 -1=下一局涨盲 正数为涨盲倒计时
            var blindround = gameinfo ? gameinfo.blindround : 0; // 当前盲注级别
            var front = gameinfo ? gameinfo.front : 0; // 当前盲注级别的前注
            var nextfront = gameinfo ? gameinfo.nextfront : 0; // 下一盲注级别的前注
            this.m_labelAverage.text = Utils.toFormat(Utils.formatDoubleValue(averagechip));
            this.m_labelAddons.text = addONNum + '';
            this.m_labelRebuys.text = rebuyNum + '';
            this.m_labelMaxStack.text = Utils.toFormat(Utils.formatDoubleValue(largestchip));
            this.m_labelMinStack.text = Utils.toFormat(Utils.formatDoubleValue(smallestchip));
            if (riseblind <= 0) {
              this.refreshBlindLeftTime(-1, 1);
            } else {
              this.riseBlindTs = riseblind + Utils.curServerTimeSecondstamp;
            }
            // 剩余未淘汰人数 / 总报名人数;
            var rankIdx = memberrank ? memberrank.rank : 0;
            var playerCount = memberrank ? memberrank.num : 0;
            if (isLookOn || rankIdx <= 0) {
              this.m_labelMyRank.text = '--';
              var totalnum = memberrank ? memberrank.totalnum : 0;
              this.m_labelPlayerCount.text = totalnum + '';
            } else {
              this.m_labelMyRank.text = rankIdx + '';
              this.m_labelPlayerCount.text = Utils.formatStr('%d/%d', playerCount, this.mttLiveInfo.num);
            }
            var raiseMinute = this.mttLiveInfo.raiseBlindTime / 60;
            this.m_labelRiseBlindMin.text = Utils.formatStr('%d min', raiseMinute);
          } else {
            this.m_labelAddons.text = '--';
            this.m_labelRebuys.text = '--';
            this.m_labelAverage.text = '--';
            this.m_labelMaxStack.text = '--';
            this.m_labelMinStack.text = '--';
            this.m_labelRiseBlindLeftTime.text = '--:--';
            this.m_labelRiseBlindMin.text = '--';
            this.m_playStartTs.text = '--';
            this.m_labelMyRank.text = '--';
            this.m_labelBeakTime.text = '--';
            var _totalnum = memberrank ? memberrank.totalnum : 0;
            this.m_labelPlayerCount.text = _totalnum + '';
          }
          var tRate = this.shareSpace.texasGameData.clubExRate;
          this.m_labelPrizePool.text = Utils.toFormat(Utils.formatDoubleValue(tRate * Math.max(this.mttLiveInfo.prizePool, this.shareSpace.texasGameData.mttInfo.rule.gtdPrizeSize)));
          this.m_labelTotalBuyin.text = Utils.formatStr('%d', this.mttLiveInfo.num + rebuyNum + addONNum);
          this.refreshBreakTime();
          this.refreshRunningTime();
          this.refreshSubList();
          this.startTick();
        };
        _proto.refreshBlindLeftTime = function refreshBlindLeftTime(leftTime, iType) {
          if (iType == 1) {
            if (leftTime < 0) {
              leftTime = 0;
            }
            this.m_labelRiseBlindLeftTime.text = Utils.formatStr('%02d[color=#9fa0a200][size=40]1[/size][/color][size=70]%s[/size][color=#9fa0a200][size=40]1[/size][/color]%02d', Math.floor(leftTime / 60), ':', leftTime % 60);
          } else if (iType == 2) {
            this.m_labelRiseBlindLeftTime.text = '--:--';
          }
        };
        _proto.refreshBreakTime = function refreshBreakTime() {
          if (this.isMatchStart && this.shareSpace.texasGameData.mttInfo.rule.hasBreak) {
            var breakTime = this.mttLiveInfo.restTime - Utils.curServerTimeSecondstamp;
            if (breakTime > 0) {
              var text = Utils.formatStr('%02d:%02d', Math.floor(breakTime / 60), breakTime % 60);
              this.m_labelBeakTime.text = text;
            } else {
              this.m_labelBeakTime.text = '--';
            }
          } else {
            this.m_labelBeakTime.text = '--';
          }
        };
        _proto.refreshRunningTime = function refreshRunningTime() {
          var startTime = this.mttLiveInfo.startTime;
          var playStartTs = this.isMatchStart ? startTime : -1;
          if (playStartTs > 0) {
            var passTime = Math.floor(Utils.curServerTimeSecondstamp - playStartTs);
            passTime = passTime < 0 ? 0 : passTime;
            var text = Utils.formatStr('%02d:%02d:%02d', Math.floor(passTime / 3600), Math.floor(passTime % 3600 / 60), passTime % 60);
            this.m_playStartTs.text = text;
          } //开赛计时
          else {
            this.m_playStartTs.text = '--';
          }
        };
        _proto.reqestMttLiveInfo = function reqestMttLiveInfo(showLoading) {
          var _this2 = this;
          this.shareSpace.mttProxy.getMttLiveInfo(function (mttLiveInfo) {
            if (mttLiveInfo) {
              _this2.mttLiveInfo = mttLiveInfo;
            }
            _this2.refreshUI();
          });
        };
        _proto.onBtnCloseClick = function onBtnCloseClick() {
          this.shareSpace.texasGamePage.popupLayer.m_mttInfoLayerController.selectedIndex = 0;
          this.setClose();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onBtnCloseClick();
          }
        };
        _proto.update = function update() {
          var _this3 = this;
          if (this.matchBeginTs > 0) {
            this.refreshBlindLeftTime(0, 2);
            if (this.matchBeginTs < Utils.curServerTimeSecondstamp) {
              this.matchBeginTs = -1;
              this.reqestMttLiveInfo();
            }
          } else {
            if (this.riseBlindTs > 0) {
              // 涨盲倒计时
              var leftTime = this.riseBlindTs - Utils.curServerTimeSecondstamp;
              this.refreshBlindLeftTime(leftTime, 1);
              if (leftTime < 0) {
                this.riseBlindTs = -1;
                this.reqestMttLiveInfo();
                this.delayReqStep = 1;
              }
            } else {
              if (this.delayReqStep && this.delayReqStep == 1) {
                Utils.delayCall(2, function () {
                  _this3.reqestMttLiveInfo();
                  _this3.delayReqStep = 2;
                }, this.node);
                this.delayReqStep = null;
              } else if (this.delayReqStep && this.delayReqStep == 2) {
                Utils.delayCall(5, function () {
                  _this3.reqestMttLiveInfo();
                }, this.node);
                this.delayReqStep = null;
              }
            }
          }
          this.refreshRunningTime();
          this.refreshBreakTime();
        };
        _proto.startTick = function startTick() {
          var scheduler = director.getScheduler();
          if (!scheduler.isScheduled(this.update, this)) {
            scheduler.scheduleUpdate(this, 0, false);
          }
        };
        _proto.stop = function stop() {
          director.getScheduler().unscheduleAllForTarget(this);
        };
        _proto.pause = function pause() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (!scheduler.isTargetPaused(this)) {
              scheduler.pauseTarget(this);
            }
          }
        };
        _proto.resume = function resume() {
          var scheduler = director.getScheduler();
          if (scheduler.isScheduled(this.update, this)) {
            if (scheduler.isTargetPaused(this)) {
              scheduler.resumeTarget(this);
            }
          }
        };
        _createClass(TexasMttInfoLayer, [{
          key: "blindsLayer",
          get:
          // private loading: Loading;

          function get() {
            return this.m_pageList.getChildAt(3);
          }
        }, {
          key: "rankingLayer",
          get: function get() {
            return this.m_pageList.getChildAt(0);
          }
        }, {
          key: "prizeLayer",
          get: function get() {
            return this.m_pageList.getChildAt(1);
          }
        }, {
          key: "tablesLayer",
          get: function get() {
            return this.m_pageList.getChildAt(2);
          }
        }, {
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_mttInfoLayerController.selectedIndex == 1;
          }
        }, {
          key: "isMatchStart",
          get: function get() {
            if (!this.mttLiveInfo) {
              return false;
            }
            var startTime = this.mttLiveInfo.startTime;
            return startTime <= Utils.curServerTimeSecondstamp;
          }
        }]);
        return TexasMttInfoLayer;
      }(UI_TexasMttInfoLayer), _applyDecoratedDescriptor(_class2.prototype, "onBtnCloseClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCloseClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoObserverItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasMttInfoObserverItem.ts', './GameDecorators.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasMttInfoObserverItem, CustomFguiClass, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasMttInfoObserverItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "48472suhBFHa7iL5Wbteubq", "TexasMttInfoObserverItem", undefined);
      var TexasMttInfoObserverItem = exports('TexasMttInfoObserverItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoObser) {
        _inheritsLoose(TexasMttInfoObserverItem, _UI_TexasMttInfoObser);
        function TexasMttInfoObserverItem() {
          return _UI_TexasMttInfoObser.apply(this, arguments) || this;
        }
        var _proto = TexasMttInfoObserverItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoObser.prototype.onConstruct.call(this);
          this.name = 'TexasMttInfoObserverItem';
        }
        // pot
        ;

        _proto.setData = function setData(data) {
          this.m_labelUserName.text = Utils.formatDisplayNickName(data.name, 9);
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(data.icon);
        };
        return TexasMttInfoObserverItem;
      }(UI_TexasMttInfoObserverItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoPrizesLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './GameDecorators.ts', './UI_TexasMttInfoPrizesLayer.ts', './GameConst.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Utils, CustomFguiClass, UI_TexasMttInfoPrizesLayer, GameConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasMttInfoPrizesLayer = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "b403539JbZFKq9qIr5cP87X", "TexasMttInfoPrizesLayer", undefined);
      var TexasMttInfoPrizesLayer = exports('TexasMttInfoPrizesLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoPrize) {
        _inheritsLoose(TexasMttInfoPrizesLayer, _UI_TexasMttInfoPrize);
        function TexasMttInfoPrizesLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttInfoPrize.call.apply(_UI_TexasMttInfoPrize, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.infoList = [];
          return _this;
        }
        var _proto = TexasMttInfoPrizesLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoPrize.prototype.onConstruct.call(this);
          this.m_list.setVirtual();
          this.m_list.itemRenderer = this.renderListItem.bind(this);
        };
        _proto.reset = function reset() {
          this.infoList = [];
          this.m_list.numItems = this.infoList.length;
          this.m_list.refreshVirtualList();
        };
        _proto.setShow = function setShow() {
          this.reqestMttPropRewardInfo();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasMttInfoPrizesLayer';
        };
        _proto.renderListItem = function renderListItem(index, item) {
          item.setData(this.infoList[index]);
        };
        _proto.reqestMttPropRewardInfo = function reqestMttPropRewardInfo() {
          var _this2 = this;
          // if (!this.shareSpace.texasGameData.mttId) {
          //     return;
          // }
          this.shareSpace.mttProxy.getMttPropRewardInfo(function (data) {
            if (data) {
              var list = data.rewardList ? data.rewardList : [];
              var mttInfo = _this2.shareSpace.texasGameData.mttInfo;
              _this2.infoList = [];
              if (mttInfo) {
                // let coinType = this.shareSpace.texasGameData.costType;
                var rewardType = _this2.shareSpace.texasGameData.mttInfo.rule.rewardMode || GameConst.EGameRewardMode.normal;
                var coinType = _this2.shareSpace.texasGameData.mttInfo.rule.coinType || GameConst.EGameCostType.gold;
                if (rewardType == GameConst.EGameRewardMode.normal || mttInfo.rule.mttType == GameConst.MATCH.EMttType.MTT_TYPE_SATELLITE) {
                  for (var index = 0; index < list.length; index++) {
                    var element = list[index];
                    _this2.infoList.push({
                      reward: element,
                      mttType: null,
                      ticket: null,
                      type: coinType,
                      rewardNum: null
                    });
                  }
                  var startTime = mttInfo.rule.startTime;
                  var curBlindLv = _this2.getBlindLvByMttInfo();
                  var rebuyFinishIdx = mttInfo.rule.endJoinTime ? mttInfo.rule.endJoinTime : 0;
                  if (rebuyFinishIdx == 0) {
                    if (list.length == 0) {
                      _this2.infoList.push({
                        reward: null,
                        mttType: mttInfo.rule.mttType,
                        ticket: mttInfo.rule.propTicket,
                        type: coinType,
                        rewardNum: null
                      });
                    }
                  } else {
                    if (rebuyFinishIdx >= curBlindLv) {
                      var endTime = startTime + rebuyFinishIdx * mttInfo.rule.raiseBlindTime;
                      var remainTime = endTime - Utils.curServerTimeSecondstamp;
                      if (remainTime >= 0) {
                        _this2.infoList.push({
                          reward: null,
                          mttType: mttInfo.rule.mttType,
                          ticket: mttInfo.rule.propTicket,
                          type: coinType,
                          rewardNum: null
                        });
                      }
                    }
                  }
                } else {
                  if (list.length > 0) {
                    var _element = list[0];
                    _this2.infoList.push({
                      reward: _element,
                      mttType: null,
                      ticket: null,
                      type: coinType,
                      rewardNum: _this2.shareSpace.texasGameData.mttInfo.rule.rewardPersonNum
                    });
                  }
                }

                // let curBlindLv = 3;
                // let rebuyFinishIdx = 6;
                // let goods = {
                //     name: 'haha',

                //     /** PropReward pic */
                //     pic: 'https://d2lx1qu2ovib6u.cloudfront.net/ph_back/shop/j6684f37d07d28610229049.png',

                //     /** PropReward value */
                //     value: 200,

                //     /** PropReward num */
                //     num: 1
                // };
                // if (rebuyFinishIdx == 0) {
                //     if (list.length == 0) {
                //         this.infoList.push({ reward: null, mttType: GameConst.MATCH.EMttType.MTT_TYPE_SATELLITE, ticket: goods });
                //     }
                // } else {
                //     if (rebuyFinishIdx >= curBlindLv) {
                //         let remainTime = 20;
                //         if (remainTime >= 0) {
                //             this.infoList.push({ reward: null, mttType: GameConst.MATCH.EMttType.MTT_TYPE_SATELLITE, ticket: goods });
                //         }
                //     }
                // }
              }

              _this2.m_list.numItems = _this2.infoList.length;
              _this2.m_list.refreshVirtualList();
            }
          });
        };
        _proto.getBlindLvByMttInfo = function getBlindLvByMttInfo() {
          var mttInfo = this.shareSpace.texasGameData.mttInfo;
          if (mttInfo) {
            var startTime = mttInfo.rule.startTime;
            var status = mttInfo.buttonState ? mttInfo.buttonState : null;
            var timeInfo = mttInfo.time ? mttInfo.time : null;
            var timeType = timeInfo ? timeInfo.type : null; // 1=截止报名 2=比赛开始 3=延迟状态 4=已经开赛 5=比赛关闭 6=比赛结束
            var blindInfo = mttInfo.gameinfo;
            var blindround = blindInfo ? blindInfo.blindround : 1; // 当前盲注级别
            if (startTime > Utils.curServerTimeSecondstamp) {
              blindround = 1;
            } else if (status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE || status == GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH || status > 0 && (GameConst.MATCH.ETimeType.MATCH_CLOSED == timeType || GameConst.MATCH.ETimeType.MATCH_FINISHED == timeType)) {
              blindround = 1;
            }
            return blindround;
          }
          return 1;
        };
        return TexasMttInfoPrizesLayer;
      }(UI_TexasMttInfoPrizesLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoPrizesLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasMttInfoPrizesLayerItem.ts', './GameDecorators.ts', './Utils.ts', './GameConst.ts', './LanguageManage.ts', './LobbyConst.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasMttInfoPrizesLayerItem, CustomFguiClass, Utils, GameConst, LanguageManager, LobbyConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasMttInfoPrizesLayerItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      LobbyConst = module.LobbyConst;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "9f0e2o5CNxOx4uQNPFP/QoH", "TexasMttInfoPrizesLayerItem", undefined);
      var TexasMttInfoPrizesLayerItem = exports('TexasMttInfoPrizesLayerItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoPrize) {
        _inheritsLoose(TexasMttInfoPrizesLayerItem, _UI_TexasMttInfoPrize);
        function TexasMttInfoPrizesLayerItem() {
          return _UI_TexasMttInfoPrize.apply(this, arguments) || this;
        }
        var _proto = TexasMttInfoPrizesLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoPrize.prototype.onConstruct.call(this);
          this.name = 'TexasMttInfoPrizesLayerItem';
        }
        // pot
        ;

        _proto.setData = function setData(data) {
          var rewardItem = data.reward;
          if (!rewardItem || !rewardItem.reward && !rewardItem.chips) {
            this.m_labelTip.visible = true;
            this.m_labelRank.visible = false;
            this.m_layerReward.visible = false;
            if (data.mttType && data.mttType == GameConst.MATCH.EMttType.MTT_TYPE_SATELLITE) {
              this.m_labelTip.text = Utils.formatStr(LanguageManager.get('UP_24'), Utils.toFormat(Utils.formatDoubleValue(data.ticket.value)));
            } else {
              this.m_labelTip.text = LanguageManager.get('TXT_800');
            }
          } else {
            if (data.type == GameConst.EGameCostType.gold) {
              this.m_iconChip.url = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY, LobbyConst.ENUMPOP_Money_Type.TAG_MONEY_36);
            } else {
              this.m_iconChip.url = LobbyConst.GetPropIconPath(LobbyConst.ENUMMoney_Type.TAG_MONEY_U, LobbyConst.ENUMPOP_U_Type.TAG_U_36);
            }
            this.m_labelTip.visible = false;
            this.m_labelRank.visible = true;
            this.m_layerReward.visible = true;
            if (rewardItem && rewardItem.reward && rewardItem.reward.num > 0) {
              this.m_layerItem.visible == true;
              this.m_labelItem.visible = true;
              if (rewardItem.reward.pic && rewardItem.reward.pic.length > 0) {
                this.m_iconItem.url = rewardItem.reward.pic;
                this.m_iconItem.visible = true;
              } else {
                this.m_iconItem.visible = false;
              }
              this.m_labelItem.text = Utils.formatStr('x%d', rewardItem.reward.num);
              if (rewardItem.chips && rewardItem.chips > 0) {
                this.m_layerChip.visible = true;
                this.m_labelChip.text = Utils.formatStr('%d', Utils.formatDoubleValue(rewardItem.chips));
              } else {
                this.m_layerChip.visible = false;
              }
            } else {
              this.m_layerItem.visible == false;
              this.m_labelItem.visible = false;
              this.m_iconItem.visible = false;
              if (rewardItem.chips && rewardItem.chips > 0) {
                this.m_layerChip.visible = true;
                this.m_labelChip.text = Utils.formatStr('%d', Utils.formatDoubleValue(rewardItem.chips));
              } else {
                this.m_layerChip.visible = false;
              }
            }
            if (data.rewardNum) {
              this.m_labelRank.text = '1-' + data.rewardNum;
            } else {
              this.m_labelRank.text = data.reward.rank + '';
            }
          }
          this.m_line.visible = !this.m_labelTip.visible;
        };
        return TexasMttInfoPrizesLayerItem;
      }(UI_TexasMttInfoPrizesLayerItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoRankingLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './LanguageManage.ts', './GameDecorators.ts', './RoleData.ts', './UI_TexasMttInfoRankingLayer.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Utils, LanguageManager, CustomFguiClass, RoleData, UI_TexasMttInfoRankingLayer;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      UI_TexasMttInfoRankingLayer = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "79a86oMdl9LrKun2x7We+ME", "TexasMttInfoRankingLayer", undefined);
      var TexasMttInfoRankingLayer = exports('TexasMttInfoRankingLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoRanki) {
        _inheritsLoose(TexasMttInfoRankingLayer, _UI_TexasMttInfoRanki);
        function TexasMttInfoRankingLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttInfoRanki.call.apply(_UI_TexasMttInfoRanki, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.userInfo = void 0;
          _this.isOver = false;
          _this.isLookOn = false;
          _this.infoList = [];
          return _this;
        }
        var _proto = TexasMttInfoRankingLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoRanki.prototype.onConstruct.call(this);
          var myRankView = this.m_myRankLayer;
          myRankView.visible = false;
          this.m_labelPlayers.text = Utils.formatStr(' %s(%s)', LanguageManager.get('CCS_TXT_236'), 0);
          this.m_list.setVirtual();
          this.m_list.itemProvider = this.getListItemResource.bind(this);
          this.m_list.itemRenderer = this.renderListItem.bind(this);
        };
        _proto.reset = function reset() {
          var myRankView = this.m_myRankLayer;
          myRankView.visible = false;
          this.m_labelPlayers.text = Utils.formatStr(' %s(%s)', LanguageManager.get('CCS_TXT_236'), 0);
          this.m_list.numItems = 0;
          this.m_list.refreshVirtualList();
          this.infoList = [];
        };
        _proto.setShow = function setShow() {
          this.reqestMttRankInfo();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasMttInfoRankingLayer';
        };
        _proto.getListItemResource = function getListItemResource(index) {
          return 'ui://GamePlay/TexasMttInfoRankingLayerItem';
        };
        _proto.renderListItem = function renderListItem(index, item) {
          item.setData(this.infoList[index], this.isOver, this.isLookOn);
        };
        _proto.reqestMttRankInfo = function reqestMttRankInfo() {
          var _this2 = this;
          if (!this.shareSpace.texasGameData.mttId) {
            return;
          }
          this.shareSpace.mttProxy.getMttRankInfo(null, function (data) {
            if (data) {
              _this2.infoList = [];
              var typed = data.type; // 1=比赛开始前 2=比赛进行中 3=比赛结束
              var rankList = data.rankList; // 排名列表
              _this2.isLookOn = 1 == data.obstate; // 1=可以旁观 2=不能旁观
              var isPlayMtt = !_this2.shareSpace.texasGameData.isLookOn; // 玩牌时无法旁观
              if (isPlayMtt) {
                _this2.isLookOn = false;
              }
              var count = _this2.shareSpace.texasGameData.mttInfo.num;
              _this2.m_labelPlayers.text = Utils.formatStr(' %s(%s)', LanguageManager.get('CCS_TXT_236'), count ? count : 0);
              var myRank;
              if (rankList) {
                //  比赛进行中或已结束，显示排名列表
                _this2.isOver = 3 == typed;
                for (var index = 0; index < rankList.length; index++) {
                  var element = rankList[index];
                  if (element.uid == RoleData.inst.playerID) {
                    myRank = element;
                    break;
                  }
                }
                rankList.sort(function (a, b) {
                  return a.rank - b.rank;
                });
                _this2.infoList = rankList;
              }
              var myRankView = _this2.m_myRankLayer;
              if (myRank) {
                myRankView.setData(myRank, _this2.isOver, _this2.isLookOn);
                myRankView.visible = true;
                _this2.infoList.push({
                  uid: -1
                });
              } else {
                myRankView.visible = false;
              }
              _this2.m_list.numItems = _this2.infoList.length;
              _this2.m_list.refreshVirtualList();
            }
          });
        };
        return TexasMttInfoRankingLayer;
      }(UI_TexasMttInfoRankingLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoRankingLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasMttInfoRankingLayerItem.ts', './GameDecorators.ts', './Utils.ts', './RoleData.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasMttInfoRankingLayerItem, CustomFguiClass, Utils, RoleData;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasMttInfoRankingLayerItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      RoleData = module.RoleData;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "166e44ljixF8p/0vSIXtTfb", "TexasMttInfoRankingLayerItem", undefined);
      var TexasMttInfoRankingLayerItem = exports('TexasMttInfoRankingLayerItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoRanki) {
        _inheritsLoose(TexasMttInfoRankingLayerItem, _UI_TexasMttInfoRanki);
        function TexasMttInfoRankingLayerItem() {
          return _UI_TexasMttInfoRanki.apply(this, arguments) || this;
        }
        var _proto = TexasMttInfoRankingLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoRanki.prototype.onConstruct.call(this);
          this.name = 'TexasMttInfoRankingLayerItem';
        }
        // pot
        ;

        _proto.setData = function setData(data, isOver, isLookOn) {
          if (data.uid == -1) {
            this.m_showCtrl.selectedIndex = 0;
            return;
          }
          this.m_showCtrl.selectedIndex = 1;
          this.m_selfCtrl.selectedIndex = data.uid == RoleData.inst.playerID ? 1 : 0;
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(data.avatar);
          this.m_labelUserName.text = Utils.formatDisplayNickName(data.name, 12);
          this.m_labelRank.text = data.rank + '';
          if (data.chips && data.chips > 0) {
            this.m_labelStack.text = Utils.toFormat(Utils.formatDoubleValue(data.chips));
          } else {
            this.m_labelStack.text = '--';
          }
          var rNum = data.rebuyNum;
          var aNum = data.addonNum;
          var str = '';
          if (rNum && rNum > 0) {
            str = str + Utils.formatStr('[color=#06c166]%dR[/color]', rNum);
            // if (rNum > 1) {
            //     str = str + Utils.formatStr('[color=#06c166]%dR[/color]', rNum);
            // } else {
            //     str = str + '[color=#06c166]R[/color]';
            // }
          }

          if (aNum && aNum > 0) {
            if (str.length > 0) {
              str = str + '[color=#9fa0a200]1[/color][color=#9fa0a2]+[/color][color=#9fa0a200]1[/color]';
            }
            str = str + '[color=#ff3d23]A[/color]';
          }
          if (str.length == 0) {
            str = '[color=#9fa0a2]0[/color]';
          }
          this.m_labelRA.text = str;
        };
        return TexasMttInfoRankingLayerItem;
      }(UI_TexasMttInfoRankingLayerItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoTablesLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './LanguageManage.ts', './GameDecorators.ts', './UI_TexasMttInfoTablesLayer.ts', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, Utils, LanguageManager, CustomFguiClass, UI_TexasMttInfoTablesLayer, Event;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasMttInfoTablesLayer = module.default;
    }, function (module) {
      Event = module.Event;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "e9a74I7PaFKwoRy77ShA2Tc", "TexasMttInfoTablesLayer", undefined);
      var TexasMttInfoTablesLayer = exports('TexasMttInfoTablesLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoTable) {
        _inheritsLoose(TexasMttInfoTablesLayer, _UI_TexasMttInfoTable);
        function TexasMttInfoTablesLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttInfoTable.call.apply(_UI_TexasMttInfoTable, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.userInfo = void 0;
          _this.infoList = [];
          _this.oberserList = [];
          _this.mttLiveInfo = void 0;
          _this.roomListInfo = void 0;
          _this.isLookOn = false;
          return _this;
        }
        var _proto = TexasMttInfoTablesLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoTable.prototype.onConstruct.call(this);
          this.m_list.setVirtual();
          this.m_list.itemRenderer = this.renderListItem.bind(this);
          this.m_list.on(Event.CLICK_ITEM, this.onItemClick, this);
          this.oberserList = [];
          this.m_oberserList.setVirtual();
          this.m_oberserList.itemRenderer = this.renderObserverListItem.bind(this);
          this.m_labelObserver.text = Utils.formatStr('%s(%s)', LanguageManager.get('TXT_1330'), this.oberserList.length);
        };
        _proto.reset = function reset() {
          this.roomListInfo = null;
          this.mttLiveInfo = null;
          this.oberserList = [];
          this.m_oberserList.numItems = this.oberserList.length;
          this.m_oberserList.refreshVirtualList();
          this.m_labelObserver.text = Utils.formatStr('%s(%s)', LanguageManager.get('TXT_1330'), this.oberserList.length);
          this.infoList = [];
          this.m_list.numItems = this.infoList.length;
          this.m_list.refreshVirtualList();
        };
        _proto.setShow = function setShow(mttLiveInfo) {
          this.mttLiveInfo = mttLiveInfo;
          this.reqestMttRoomList();
          this.reqestOnlookPlayer();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasMttInfoTablesLayer';
        };
        _proto.renderListItem = function renderListItem(index, item) {
          item.setData(this.infoList[index], this.shareSpace.texasGameData.roomId, index + 1);
        };
        _proto.renderObserverListItem = function renderObserverListItem(index, item) {
          item.setData(this.oberserList[index]);
        };
        _proto.onItemClick = function onItemClick(itemObject) {
          var _this2 = this;
          var info = itemObject.getData();
          if (this.roomListInfo.myRoomid && this.roomListInfo.myRoomid != info.roomId) {
            this.grootInst.showCenterTip(LanguageManager.get('TXT_833'));
            return;
          }
          if (this.shareSpace.texasGameData.roomId == info.roomId) {
            this.grootInst.showCenterTip(LanguageManager.get('TXT_327'));
            return;
          }
          if (this.isLookOn) {
            // 切换旁观房间
            this.shareSpace.texasProxy.leaveRoom(function () {
              _this2.shareSpace.texasGameData.setLookonState(true, info.roomId);
              _this2.shareSpace.mttProxy.joinMTT();
            });
          } else {
            this.grootInst.showCenterTip(LanguageManager.get('TXT_849'));
          }
        };
        _proto.refreshUI = function refreshUI() {
          if (!this.mttLiveInfo || !this.roomListInfo) {
            return;
          }
          var startTime = this.mttLiveInfo.startTime ? this.mttLiveInfo.startTime : 0;
          if (startTime <= Utils.curServerTimeSecondstamp) {
            this.isLookOn = this.roomListInfo.obstate == 1; // 1=可以旁观 2=不能旁观
            var isPlayMtt = !this.shareSpace.texasGameData.isLookOn; // 玩牌时无法旁观
            if (isPlayMtt) {
              this.isLookOn = false;
            }
            var mttroominfo = this.roomListInfo.mttroominfo;
            this.infoList = mttroominfo ? mttroominfo : [];
            this.m_list.numItems = this.infoList.length;
            this.m_list.refreshVirtualList();
          }
        };
        _proto.reqestMttRoomList = function reqestMttRoomList() {
          var _this3 = this;
          if (!this.shareSpace.texasGameData.mttId) {
            return;
          }
          this.shareSpace.mttProxy.getMttRoomList(function (data) {
            if (data) {
              _this3.roomListInfo = data;
              _this3.refreshUI();
            }
          });
        };
        _proto.reqestOnlookPlayer = function reqestOnlookPlayer() {
          var _this4 = this;
          if (!this.shareSpace.texasGameData.roomId) {
            return;
          }
          this.shareSpace.roomProxy.getOnlookPlayer(function (data) {
            if (data) {
              _this4.oberserList = data.onlookerPlayers ? data.onlookerPlayers : [];
              _this4.m_oberserList.numItems = _this4.oberserList.length;
              _this4.m_oberserList.refreshVirtualList();
              _this4.m_labelObserver.text = Utils.formatStr('%s(%s)', LanguageManager.get('TXT_1330'), _this4.oberserList.length);
            }
          });
        };
        return TexasMttInfoTablesLayer;
      }(UI_TexasMttInfoTablesLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttInfoTablesLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasMttInfoTablesLayerItem.ts', './GameDecorators.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasMttInfoTablesLayerItem, CustomFguiClass, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasMttInfoTablesLayerItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "08ee4vyX11F64gnqPR52Kr8", "TexasMttInfoTablesLayerItem", undefined);
      var TexasMttInfoTablesLayerItem = exports('TexasMttInfoTablesLayerItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttInfoTable) {
        _inheritsLoose(TexasMttInfoTablesLayerItem, _UI_TexasMttInfoTable);
        function TexasMttInfoTablesLayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttInfoTable.call.apply(_UI_TexasMttInfoTable, [this].concat(args)) || this;
          _this.roomInfo = void 0;
          return _this;
        }
        var _proto = TexasMttInfoTablesLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttInfoTable.prototype.onConstruct.call(this);
          this.name = 'TexasMttInfoTablesLayerItem';
        };
        _proto.setData = function setData(data, myRoomid, index) {
          this.roomInfo = data;
          this.m_selfCtrl.selectedIndex = myRoomid == data.roomId ? 1 : 0;
          this.m_labelNumber.text = 'No.' + index;
          this.m_labelPlayerCount.text = data.memberCount + '';
          this.m_labelStack.text = Utils.formatStr('%s/%s', Utils.toFormat(Utils.formatDoubleValue(data.chipMin)), Utils.toFormat(Utils.formatDoubleValue(data.chipMax)));
        };
        _proto.getData = function getData() {
          return this.roomInfo;
        };
        return TexasMttInfoTablesLayerItem;
      }(UI_TexasMttInfoTablesLayerItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttRebuyDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './GameDecorators.ts', './UI_TexasMttRebuyDialog.ts', './GameConst.ts', './BlindLevelInfo.ts', './LanguageManage.ts', './RoleData.ts', './CDKDecorators.ts', './Clock.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, color, CustomFguiClass, UI_TexasMttRebuyDialog, GameConst, BlindLevelInfo, LanguageManager, RoleData, SafeTimeInterval, Clock, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasMttRebuyDialog = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      BlindLevelInfo = module.BlindLevelInfo;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Clock = module.Clock;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "dc0c2xymh9LQ5zpPkegZgzO", "TexasMttRebuyDialog", undefined);
      var TimeProgressColor = color('#FFB406');
      var TexasMttRebuyDialog = exports('TexasMttRebuyDialog', (_dec = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasMttRebuyDial) {
        _inheritsLoose(TexasMttRebuyDialog, _UI_TexasMttRebuyDial);
        function TexasMttRebuyDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttRebuyDial.call.apply(_UI_TexasMttRebuyDial, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.clock = new Clock(_assertThisInitialized(_this));
          _this.endTime = void 0;
          _this.passiveRebuy = void 0;
          return _this;
        }
        var _proto = TexasMttRebuyDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttRebuyDial.prototype.onConstruct.call(this);
          this.clock.on(this.onClock, this);
          var frame = this.m_frame;
          frame.m_btnConfirm.onClick(this.onBtnConfirmClick, this);
          frame.m_closeButton.onClick(this.onBtnCloseClick, this);
          this.timeProgress.contentColor = TimeProgressColor;
          this.timeProgress.pointVisible = false;
        };
        _proto.closeView = function closeView() {
          this.clock.stop();
          this.shareSpace.texasGamePage.popupLayer.m_mttRebuyContoller.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView(passiveRebuy, endTime) {
          this.shareSpace.texasGamePage.popupLayer.m_mttRebuyContoller.selectedIndex = 1;
          this.passiveRebuy = passiveRebuy;
          if (passiveRebuy) {
            this.endTime = endTime;
          }
          this.updateDialog();
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.closeView();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasMttRebuyDialog';
        };
        _proto.updateDialog = function updateDialog() {
          if (!this.isOpen) return;
          this.m_initiativeRebuy.selectedIndex = this.passiveRebuy ? 1 : 0;
          if (this.passiveRebuy) {
            this.updateTimeProgress();
          } else {
            this.clock.stop();
          }
          var mttInfo = this.shareSpace.texasGameData.mttInfo;
          if (mttInfo) {
            // let chipCount = mttInfo.rule.initChip * BlindLevelInfo.Config[mttInfo.rule.blindType - 1][0].bigBlinds;

            var clubRate = this.shareSpace.texasGameData.clubExRate;
            this.m_itemChip.m_iconType.selectedIndex = 2;
            this.m_itemChip.m_value.text = Utils.toFormat(mttInfo.rule.initChip * BlindLevelInfo.Config[mttInfo.rule.blindType - 1][0].bigBlinds);
            if (mttInfo.rule.buyCoinType == GameConst.EGameCostType.gold) {
              this.m_itemBalance.m_value.text = Utils.toFormat(RoleData.inst.chip, 0);
              this.m_itemBalance.m_iconType.selectedIndex = 0;
              this.m_itemBuyin.m_value.text = Utils.toFormat(mttInfo.rule.rebuy * clubRate);
              this.m_itemBuyin.m_iconType.selectedIndex = 0;
            } else {
              this.m_itemBalance.m_value.text = Utils.toFormat(RoleData.inst.cash, 2, true, false);
              this.m_itemBalance.m_iconType.selectedIndex = 1;
              this.m_itemBuyin.m_value.text = Utils.toFormat(mttInfo.rule.rebuy, 2, true, false);
              this.m_itemBuyin.m_iconType.selectedIndex = 1;
            }

            // let chipCount = mttInfo.rule.initChip * BlindLevelInfo.Config[mttInfo.rule.blindType - 1][0].bigBlinds;
            // let cost = mttInfo.rule.rebuy;
            // let clubRate = this.shareSpace.texasGameData.clubExRate;
            // let costStr = '';
            // if (mttInfo.rule.clubid) {
            //     costStr += Utils.toFormat(clubRate * cost);
            //     this.m_textDesc.text = Utils.formatStr(LanguageManager.get('TXT_819'), costStr, chipCount, '');
            // } else {
            //     if (mttInfo.rule.coinType == GameConst.EGameCostType.cash) {
            //         costStr += `${Utils.toFormat(clubRate * cost)} USDT`;
            //     } else {
            //         costStr += `${Utils.toFormat(clubRate * cost)} TGP`;
            //     }
            //     this.m_textDesc.text = Utils.formatStr(LanguageManager.get('MTT_REBUYDETAIL'), costStr, chipCount, '');
            // }
          }

          this.forceUpdateRecursion();
        };
        _proto.updateTimeProgress = function updateTimeProgress() {
          var totleTime = GameConst.MATCH.RebuyTotalTime;
          var serverTime = Utils.curServerTimeSecondstamp;
          var leftTIme = Math.max(0, Math.min(this.endTime - serverTime, totleTime));
          this.timeProgress.progress = leftTIme / totleTime;
          this.m_textTimeLeft.text = Math.floor(leftTIme) + "s";
          var passedTime = Math.max(0, totleTime - leftTIme);
          this.clock.run(totleTime, passedTime);
        };
        _proto.onClock = function onClock() {
          if (this.clock.over) {
            this.onBtnCloseClick();
          } else {
            this.timeProgress.progress = this.clock.leftTime / this.clock.allTime;
            this.m_textTimeLeft.text = Math.floor(this.clock.leftTime) + "s";
          }
        };
        _proto.onBtnConfirmClick = function onBtnConfirmClick() {
          var _this2 = this;
          if (this.passiveRebuy) {
            this.shareSpace.mttProxy.requestRebuy(1, function (msg) {
              _this2.closeView();
              _this2.grootInst.showCenterTip(LanguageManager.get('TXT_494'));
              // do something
            });
          } else {
            this.shareSpace.mttProxy.requestRebuy(3, function (msg) {
              _this2.closeView();
              _this2.grootInst.showCenterTip(LanguageManager.get('TXT_494'));
              // do something
            });
          }
        };

        _proto.onBtnCloseClick = function onBtnCloseClick() {
          if (this.passiveRebuy) {
            var groot = this.grootInst;
            // 被动 rebuy 关闭弹窗需要告知服务端
            this.shareSpace.mttProxy.requestRebuy(2);
            setTimeout(function () {
              if (groot) {
                groot.showCenterTip(LanguageManager.get('TXT_1702'));
              }
            }, 700);
            this.shareSpace.closeRoom();
          } else {
            this.closeView();
          }
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onBtnCloseClick();
          }
        };
        _createClass(TexasMttRebuyDialog, [{
          key: "timeProgress",
          get: function get() {
            return this.m_timeProgress.component;
          }
        }, {
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_mttRebuyContoller.selectedIndex == 1;
          }
        }]);
        return TexasMttRebuyDialog;
      }(UI_TexasMttRebuyDialog), _applyDecoratedDescriptor(_class2.prototype, "onBtnCloseClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCloseClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttResultDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_TexasMttResultDialog.ts', './GameConst.ts', './RoleData.ts', './CocosDevKit.ts', './LanguageManage.ts', './CDKDecorators.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, color, CustomFguiClass, UI_TexasMttResultDialog, GameConst, RoleData, LanguageManager, SafeTimeInterval, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasMttResultDialog = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      RoleData = module.RoleData;
    }, null, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "8a1dfaLdMZEU5kTP0DzIlPa", "TexasMttResultDialog", undefined);
      var RANK_COLOR = [color(0xf4, 0xc8, 0x2d), color(0xb2, 0xc6, 0xf8), color(0xe3, 0x9c, 0x6f)];
      var TexasMttResultDialog = exports('TexasMttResultDialog', (_dec = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasMttResultDia) {
        _inheritsLoose(TexasMttResultDialog, _UI_TexasMttResultDia);
        function TexasMttResultDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttResultDia.call.apply(_UI_TexasMttResultDia, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          return _this;
        }
        var _proto = TexasMttResultDialog.prototype;
        // /**
        //  * 1: stay 2: share
        //  */
        // private confirmBtnType: 1 | 2 = 1;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttResultDia.prototype.onConstruct.call(this);
          this.m_bgMask.onClick(this.onBgMaskClick, this);
        };
        _proto.closeView = function closeView() {
          this.shareSpace.texasGamePage.popupLayer.m_mttResultDialogController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView(msg) {
          this.shareSpace.texasGamePage.popupLayer.m_mttResultDialogController.selectedIndex = 1;
          this.setMttRsult(msg);
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          // this.closeView();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasMttResultDialog';
        };
        _proto.setMttRsult = function setMttRsult(msg) {
          var weedCastValue;
          if (msg.value && msg.value.length > 0) {
            weedCastValue = GameConst.MATCH.decodeMsgWeedCastValue(msg.value);
          }
          var noRank = !weedCastValue || !weedCastValue.rank || weedCastValue.rank <= 0;
          if (noRank) {
            this.m_showRank.selectedIndex = 0;
            this.m_rewardItem.m_showReward.selectedIndex = 0;
            this.m_rank.selectedIndex = 0;
          } else {
            this.m_showRank.selectedIndex = 1;
            if (weedCastValue.rank < 4) {
              this.m_rank.selectedIndex = weedCastValue.rank;
            } else {
              this.m_rank.selectedIndex = 0;
              this.m_textRank.text = '' + weedCastValue.rank;
            }
            var showReward = weedCastValue.reward && weedCastValue.reward.chips && weedCastValue.reward.chips > 0;
            this.m_rewardItem.m_showReward.selectedIndex = showReward ? 1 : 0;
            if (showReward) {
              var exchangeRate = weedCastValue.exchange_rate ? weedCastValue.exchange_rate : 1;
              if (this.shareSpace.texasGameData.mttInfo.rule.coinType == GameConst.EGameCostType.gold) {
                this.m_rewardItem.m_chipType.selectedIndex = 0;
                this.m_rewardItem.m_textReward.text = Utils.toFormat(weedCastValue.reward.chips * exchangeRate);
              } else {
                this.m_rewardItem.m_chipType.selectedIndex = 1;
                this.m_rewardItem.m_textReward.text = Utils.toFormat(weedCastValue.reward.chips * exchangeRate, 2, true);
              }
            }
          }
          var avatar = this.m_rewardItem.m_avatarLoader.component;
          avatar.setContent(RoleData.inst.avatar);
          this.m_rewardItem.m_textUserName.text = Utils.formatDisplayNickName(RoleData.inst.nick, 12);
          this.m_textEntries.text = this.shareSpace.texasGameData.mttInfo.num + " " + LanguageManager.get('TXT_786');
          this.m_textMttName.text = this.shareSpace.texasGameData.mttInfo.rule.name;
          this.forceUpdateRecursion();
        };
        _proto.onBgMaskClick = function onBgMaskClick() {
          this.shareSpace.closeRoom();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onBgMaskClick();
          }
        }

        // private onBtnConfirmClick() {
        //     if (this.confirmBtnType == 1) {
        //         // stay
        //         MttProxy.inst.getMttInfo(this.shareSpace.texasGameData.mttId, this.onMttInfo.bind(this));
        //     } else {
        //         // share
        //     }
        // }

        // private onMttRoomList(msg: gameproto.mtt.MsgGetMttRoomListRsp) {
        //     if (!this.node || !this.node.isValid) return;
        //     if (msg.obstate == 1 && msg.mttroominfo && msg.mttroominfo.length > 0) {
        //         let count = 0;
        //         let itemInfo = msg.mttroominfo[0];
        //         for (let i = 0; i < msg.mttroominfo.length; i++) {
        //             const item = msg.mttroominfo[i];
        //             if (item.memberCount > count) {
        //                 count = item.memberCount;
        //                 itemInfo = item;
        //             }
        //         }
        //         this.shareSpace.texasGameData.setLookonState(true, itemInfo.roomId as number);
        //         this.shareSpace.mttProxy.joinMTT();
        //     }
        // }

        // private onMttInfo(netdata: NetData87) {
        //     if (!this.node || !this.node.isValid) return;
        //     if (netdata.isRetSuccess()) {
        //         // 基于返回码判断是否为成功
        //         let msg = netdata.getData(gameproto.mtt.MsgGetMttInfoRsp); // 获取消息内容
        //         let mttInfo = msg.mttInfo;
        //         if (mttInfo) {
        //             let status = mttInfo.buttonState;
        //             switch (status) {
        //                 case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_CLOSE:
        //                 case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_FINISH:
        //                 case GameConst.MATCH.EMttBtnStatus.MATCH_STATUS_NO_RANK:
        //                     // 不能进
        //                     this.grootInst.showCenterTip(LanguageManager.get('TXT_873'));
        //                     break;
        //                 default:
        //                     this.shareSpace.mttProxy.getMttRoomList(this.onMttRoomList.bind(this));
        //                     break;
        //             }
        //         }
        //     } else {
        //         this.shareSpace.texasGamePage.onMsgRetFail(netdata);
        //     }
        // }

        // private onBtnCancelClick() {
        //     this.shareSpace.closeRoom();
        // }

        // private onBtnCloseClick() {
        //     this.shareSpace.closeRoom();
        // }
        ;

        _createClass(TexasMttResultDialog, [{
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_mttResultDialogController.selectedIndex == 1;
          }
        }]);
        return TexasMttResultDialog;
      }(UI_TexasMttResultDialog), _applyDecoratedDescriptor(_class2.prototype, "onBgMaskClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBgMaskClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttWaitStartItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Clock.ts', './GameDecorators.ts', './CocosDevKit.ts', './UI_TexasMttWaitStartItem.ts', './MultiLanguageText.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Clock, CustomFguiClass, UI_TexasMttWaitStartItem, MultiLanguageText, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Clock = module.Clock;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, null, function (module) {
      UI_TexasMttWaitStartItem = module.default;
    }, function (module) {
      MultiLanguageText = module.MultiLanguageText;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "8843fJtvIdMPJPu8UHw0jIe", "TexasMttWaitStartItem", undefined);
      var TexasMttWaitStartItem = exports('TexasMttWaitStartItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttWaitStart) {
        _inheritsLoose(TexasMttWaitStartItem, _UI_TexasMttWaitStart);
        function TexasMttWaitStartItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttWaitStart.call.apply(_UI_TexasMttWaitStart, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.clock = void 0;
          _this.contentMultiLanguageText = void 0;
          return _this;
        }
        var _proto = TexasMttWaitStartItem.prototype;
        _proto.reset = function reset() {
          this.clock.stop();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.clock = Clock.create(this);
          this.clock.on(this.onClock, this);
          this.contentMultiLanguageText = this.m_textContent.node.getComponent(MultiLanguageText);
        }

        /**
         * 显示
         * @param type 显示类型 0: addon， 1: break
         * @param endTime
         */;
        _proto.show = function show(endTime) {
          var curTime = Utils.curServerTimeSecondstamp;
          if (curTime < endTime) {
            var totalTime = endTime - curTime;
            this.clock.run(totalTime, 0);
            this.visible = true;
          } else {
            this.hide();
          }
        };
        _proto.hide = function hide() {
          this.clock.stop();
          this.visible = false;
        };
        _proto.onClock = function onClock() {
          this.setLeftTime(this.clock.leftTime);
        };
        _proto.setLeftTime = function setLeftTime(leftTime) {
          if (!this.contentMultiLanguageText) return;
          this.contentMultiLanguageText.setFormatParams(" " + Math.floor(leftTime) + "s");
        };
        return TexasMttWaitStartItem;
      }(UI_TexasMttWaitStartItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasMttWaitTipLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageManage.ts', './TexasGameData.ts', './GameDecorators.ts', './UI_TexasMttWaitTipLayer.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, LanguageManager, TexasMttClientState, CustomFguiClass, UI_TexasMttWaitTipLayer;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      TexasMttClientState = module.TexasMttClientState;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasMttWaitTipLayer = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "dbfd2s/lZRHjKRvIu+Uq2jL", "TexasMttWaitTipLayer", undefined);
      var TexasMttWaitTipLayer = exports('TexasMttWaitTipLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasMttWaitTipLa) {
        _inheritsLoose(TexasMttWaitTipLayer, _UI_TexasMttWaitTipLa);
        function TexasMttWaitTipLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasMttWaitTipLa.call.apply(_UI_TexasMttWaitTipLa, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          return _this;
        }
        var _proto = TexasMttWaitTipLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasMttWaitTipLa.prototype.onConstruct.call(this);
          this.commonCountdown.visible = false;
          this.waitStartItem.visible = false;
          this.m_commonWait.visible = false;
        };
        _proto.reset = function reset() {
          this.commonCountdown.visible = false;
          this.commonCountdown.reset();
          this.waitStartItem.visible = false;
          this.waitStartItem.reset();
          this.m_commonWait.visible = false;
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.commonCountdown.init(shareSpace);
          this.waitStartItem.init(shareSpace);
        };
        _proto.updateLayer = function updateLayer() {
          if (!this.shareSpace.texasGameData.isMatch) return;
          var mttState = this.shareSpace.texasGameData.mttState;
          switch (mttState.value) {
            case TexasMttClientState.WAITING_BREAK:
            case TexasMttClientState.WAITING_ADDON:
              this.commonCountdown.hide();
              this.waitStartItem.hide();
              this.m_commonWait.visible = true;
              this.m_commonWait.m_textContent.text = LanguageManager.get('TXT_224');
              this.m_commonWait.forceUpdateRecursion();
              break;
            case TexasMttClientState.BREAK:
              this.waitStartItem.hide();
              this.m_commonWait.visible = false;
              this.commonCountdown.show(1, mttState.timeStamp);
              break;
            case TexasMttClientState.ADDON:
              this.waitStartItem.hide();
              this.m_commonWait.visible = false;
              this.commonCountdown.show(0, mttState.timeStamp);
              break;
            case TexasMttClientState.WAITING_START:
              this.commonCountdown.hide();
              this.m_commonWait.visible = false;
              this.waitStartItem.show(mttState.timeStamp);
              break;
            case TexasMttClientState.WAITING_FOR_TABLE_ASSIGNMENT:
              this.commonCountdown.hide();
              this.waitStartItem.hide();
              this.m_commonWait.visible = true;
              this.m_commonWait.m_textContent.text = LanguageManager.get('TXT_1649');
              this.m_commonWait.forceUpdateRecursion();
              break;
            case TexasMttClientState.WAITING_SEND_CARD:
              this.commonCountdown.hide();
              this.waitStartItem.hide();
              this.m_commonWait.visible = true;
              this.m_commonWait.m_textContent.text = LanguageManager.get('TXT_453');
              this.m_commonWait.forceUpdateRecursion();
              break;
            case TexasMttClientState.FINISH:
              this.commonCountdown.hide();
              this.waitStartItem.hide();
              this.m_commonWait.visible = false;
              break;
            default:
              if (!this.shareSpace) return;
              if (!this.shareSpace.texasGameData) return;
              if (!this.shareSpace.texasGameData.mttInfo) return;
              var showWaitTip = this.shareSpace.texasGameData.mttInfo.waitBalanceStart;
              showWaitTip = showWaitTip || this.shareSpace.texasGameData.chairPlayerNum <= 1 && !this.shareSpace.texasGameData.mttInfo.isEntranceClose;
              if (showWaitTip) {
                this.commonCountdown.hide();
                this.waitStartItem.hide();
                this.m_commonWait.visible = true;
                this.m_commonWait.m_textContent.text = LanguageManager.get('TXT_1649');
                this.m_commonWait.forceUpdateRecursion();
              } else {
                this.commonCountdown.hide();
                this.waitStartItem.hide();
                this.m_commonWait.visible = false;
              }
              break;
          }
        };
        _createClass(TexasMttWaitTipLayer, [{
          key: "commonCountdown",
          get: function get() {
            return this.m_commonCountdown;
          }
        }, {
          key: "waitStartItem",
          get: function get() {
            return this.m_waitStart;
          }
        }]);
        return TexasMttWaitTipLayer;
      }(UI_TexasMttWaitTipLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasOperatorLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_TexasOperatorLayer.ts', './RoleData.ts', './GameConst.ts', './MultiLanguageText.ts', './CocosDevKit.ts', './LanguageManage.ts', './GameDecorators.ts', './ConfirmBox.ts', './TexasGameData.ts', './NativeDeviceBridge.ts', './CDKDecorators.ts', './Logger.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, Tween, tween, Event, UI_TexasOperatorLayer, RoleData, GameConst, MultiLanguageText, LanguageManager, CustomFguiClass, ConfirmBox, TexasMttClientState, NativeDeviceBridge, SafeTimeInterval, Log, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      UI_TexasOperatorLayer = module.default;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      MultiLanguageText = module.MultiLanguageText;
    }, null, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      TexasMttClientState = module.TexasMttClientState;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2;
      cclegacy._RF.push({}, "f166dPARsVLM7H8AzFDk8B3", "TexasOperatorLayer", undefined);
      var TexasOperatorLayer = exports('TexasOperatorLayer', (_dec = SafeTimeInterval(500), _dec2 = SafeTimeInterval(500), _dec3 = SafeTimeInterval(500), _dec4 = SafeTimeInterval(), _dec5 = SafeTimeInterval(), _dec6 = SafeTimeInterval(500), _dec7 = SafeTimeInterval(500), _dec8 = SafeTimeInterval(500), _dec9 = SafeTimeInterval(500), _dec10 = SafeTimeInterval(500), _dec11 = SafeTimeInterval(500), _dec12 = SafeTimeInterval(500), _dec13 = SafeTimeInterval(500), _dec14 = SafeTimeInterval(500), _dec15 = SafeTimeInterval(500), _dec16 = SafeTimeInterval(500), _dec17 = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasOperatorLaye) {
        _inheritsLoose(TexasOperatorLayer, _UI_TexasOperatorLaye);
        function TexasOperatorLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasOperatorLaye.call.apply(_UI_TexasOperatorLaye, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.raiseChips = [];
          _this.chipMinPos = void 0;
          _this.chipMaxPos = void 0;
          _this.foldConfirmBox = void 0;
          /**
           * 当前是否是即刻入局的状态，站起坐下和开始新的一局后刷新此标记
           */
          _this.immediatelyEnterState = false;
          _this._raisePercent = 0;
          _this.minRaise = void 0;
          // 最小加注数
          _this.maxRaise = void 0;
          // 最大加注数
          _this.actionPosY = void 0;
          _this._sliderLastValue = undefined;
          return _this;
        }
        var _proto = TexasOperatorLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasOperatorLaye.prototype.onConstruct.call(this);
          for (var i = 0; i < 18; i++) {
            var chip = this.m_operatorContent["m_chip" + i];
            chip.visible = false;
            this.raiseChips.push(chip);
            if (i == 0) {
              var chipPosGlobal = chip.localToGlobal(0, chip.height);
              var chipPos = this.m_operatorContent.m_raiseSliderBg.globalToLocal(chipPosGlobal.x, chipPosGlobal.y);
              this.chipMaxPos = chipPos.y;
            } else if (i == 17) {
              var _chipPosGlobal = chip.localToGlobal(0, 0);
              var _chipPos = this.m_operatorContent.m_raiseSliderBg.globalToLocal(_chipPosGlobal.x, _chipPosGlobal.y);
              this.chipMinPos = _chipPos.y;
            }
          }
          this.m_operatorContent.m_raiseSliderBg.on(Event.TOUCH_BEGIN, this.onRaiseSliderBgTouch, this);
          this.m_operatorContent.m_raiseSliderBg.on(Event.TOUCH_MOVE, this.onRaiseSliderBgTouch, this);
          this.m_operatorContent.m_raiseSliderBg.on(Event.TOUCH_END, this.onRaiseSliderBgTouch, this);
          this.isCheckEnable = false;
          this.isJoinTheGame = false;
          this.roundStete = 'none';
          this.isRaiseMode = false;
          this.showCall = false;
          this.renameRaiseToBet = false;
          this.showRaise = false;
          this.showAllin = false;
          this.m_btnTimeBank.visible = false;
          this.minRaise = 0;
          this.maxRaise = 0;
          this.m_operatorContent.m_btnRaiseBB1.onClick(this.onBtnRaiseBB1Click, this);
          this.m_operatorContent.m_btnRaiseBB2.onClick(this.onBtnRaiseBB2Click, this);
          this.m_operatorContent.m_btnRaiseBB3.onClick(this.onBtnRaiseBB3Click, this);
          this.m_operatorContent.m_btnSelectAutoCheck.onClick(this.onBtnSelectAutoCheckClick, this);
          this.m_operatorContent.m_btnSelectCall.onClick(this.onBtnSelectCallClick, this);
          this.m_operatorContent.m_btnSelectCallAny.onClick(this.onBtnSelectCallAnyClick, this);
          this.m_operatorContent.m_btnSelectCheckOrFold.onClick(this.onBtnSelectCheckOrFoldClick, this);
          this.m_operatorContent.m_btnFold.onClick(this.onBtnFoldClick, this);
          this.m_operatorContent.m_btnCheck.onClick(this.onBtnCheckClick, this);
          this.m_operatorContent.m_btnCall.onClick(this.onBtnCallClick, this);
          this.m_operatorContent.m_btnAllin.onClick(this.onBtnAllinClick, this);
          this.m_operatorContent.m_btnRaiseConfirm.onClick(this.onBtnRaiseConfirmClick, this);
          this.m_operatorContent.m_btnBackTable.onClick(this.onBtnBackTableClick, this);
          this.m_operatorContent.m_btnForceBB.onClick(this.onBtnForceBBClick, this);
          this.m_btnTimeBank.onClick(this.onBtnTimeBankClick, this);
          this.m_operatorContent.m_raiseAdd.onClick(this.onRaiseAddClick, this); // 精细加注
          this.m_operatorContent.m_raiseSub.onClick(this.onRaiseSubClick, this); // 精细加注
          this.actionPosY = this.m_operatorContent.y;
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
        };
        _proto.reset = function reset() {
          Tween.stopAllByTarget(this.m_operatorContent);
          this.m_operatorContent.y = this.actionPosY;
          this.immediatelyEnterState = false;
          this.isCheckEnable = false;
          this.isJoinTheGame = false;
          this.roundStete = 'none';
          this.isRaiseMode = false;
          this.showCall = false;
          this.renameRaiseToBet = false;
          this.showRaise = false;
          this.showAllin = false;
          this.minRaise = 0;
          this.maxRaise = 0;
          for (var i = 0; i < this.raiseChips.length; i++) {
            var chip = this.raiseChips[i];
            chip.visible = i == 0;
          }
          this.raisePercent = 0;
          if (this.foldConfirmBox) {
            this.foldConfirmBox.hide();
          }
          this.foldConfirmBox = undefined;
        };
        _proto.onBtnRaiseBB1Click = function onBtnRaiseBB1Click() {
          var raiseValue = this.m_operatorContent.m_btnRaiseBB1.data;
          Log.game.log('TexasOperatorLayer', 'btnRaiseBB1Click', 'raiseValue:', raiseValue);
          this.raisePercent = (raiseValue - this.minRaise) / (this.maxRaise - this.minRaise);
        };
        _proto.onBtnRaiseBB2Click = function onBtnRaiseBB2Click() {
          var raiseValue = this.m_operatorContent.m_btnRaiseBB2.data;
          Log.game.log('TexasOperatorLayer', 'btnRaiseBB2Click', 'raiseValue:', raiseValue);
          this.raisePercent = (raiseValue - this.minRaise) / (this.maxRaise - this.minRaise);
        };
        _proto.onBtnRaiseBB3Click = function onBtnRaiseBB3Click() {
          var raiseValue = this.m_operatorContent.m_btnRaiseBB3.data;
          Log.game.log('TexasOperatorLayer', 'btnRaiseBB3Click', 'raiseValue:', raiseValue);
          this.raisePercent = (raiseValue - this.minRaise) / (this.maxRaise - this.minRaise);
        };
        _proto.onRaiseAddClick = function onRaiseAddClick() {
          // 震动
          NativeDeviceBridge.Instance.shortVibrate(2);
          var raiseValue = this.getRaiseValueByRaisePercent();
          var sbNum = this.shareSpace.texasGameData.sbNum;
          if (this.shareSpace.texasGameData.tableInfo.needTimes) {
            sbNum *= 100;
          }
          raiseValue += sbNum;
          raiseValue = Math.min(this.maxRaise, raiseValue);
          this.raisePercent = (raiseValue - this.minRaise) / (this.maxRaise - this.minRaise);
        };
        _proto.onRaiseSubClick = function onRaiseSubClick() {
          // 震动
          NativeDeviceBridge.Instance.shortVibrate(2);
          var raiseValue = this.getRaiseValueByRaisePercent();
          var sbNum = this.shareSpace.texasGameData.sbNum;
          if (this.shareSpace.texasGameData.tableInfo.needTimes) {
            sbNum *= 100;
          }
          raiseValue -= sbNum;
          raiseValue = Math.max(this.minRaise, raiseValue);
          this.raisePercent = (raiseValue - this.minRaise) / (this.maxRaise - this.minRaise);
        };
        _proto.onBtnSelectAutoCheckClick = function onBtnSelectAutoCheckClick() {
          if (this.m_operatorContent.m_btnSelectAutoCheck.m_select.selectedIndex == 1) {
            this.shareSpace.texasProxy.playerPreOpration(GameConst.TexasPlay.EPreOperationType.Cancel);
          } else {
            this.shareSpace.texasProxy.playerPreOpration(GameConst.TexasPlay.EPreOperationType.AutoCheck);
          }
        };
        _proto.onBtnSelectCallClick = function onBtnSelectCallClick() {
          if (this.m_operatorContent.m_btnSelectCall.m_select.selectedIndex == 1) {
            this.shareSpace.texasProxy.playerPreOpration(GameConst.TexasPlay.EPreOperationType.Cancel);
          } else {
            this.shareSpace.texasProxy.playerPreOpration(GameConst.TexasPlay.EPreOperationType.Call);
          }
        };
        _proto.onBtnSelectCallAnyClick = function onBtnSelectCallAnyClick() {
          if (this.m_operatorContent.m_btnSelectCallAny.m_select.selectedIndex == 1) {
            this.shareSpace.texasProxy.playerPreOpration(GameConst.TexasPlay.EPreOperationType.Cancel);
          } else {
            this.shareSpace.texasProxy.playerPreOpration(GameConst.TexasPlay.EPreOperationType.CallAny);
          }
        };
        _proto.onBtnSelectCheckOrFoldClick = function onBtnSelectCheckOrFoldClick() {
          if (this.m_operatorContent.m_btnSelectCheckOrFold.m_select.selectedIndex == 1) {
            this.shareSpace.texasProxy.playerPreOpration(GameConst.TexasPlay.EPreOperationType.Cancel);
          } else {
            this.shareSpace.texasProxy.playerPreOpration(GameConst.TexasPlay.EPreOperationType.CheckOrFold);
          }
        };
        _proto.onBtnFoldClick = function onBtnFoldClick() {
          var _this2 = this;
          if (this.isCheckEnable) {
            if (this.foldConfirmBox) return;
            // 可以看牌的时候如果点击弃牌弹出二次确认 TXT_133
            var box = ConfirmBox.create(this, 1);
            box.setInputParams({
              buttonNum: 2,
              clickOutsideClose: true,
              disableCloseCancel: true,
              cancelText: 'CCS_TXT_443',
              confirmText: 'TXT_1007',
              content: LanguageManager.get('TXT_133')
            });
            box.addHook({
              onCancel: function onCancel() {
                _this2.shareSpace.texasProxy.playerAction(GameConst.TexasPlay.EActType.Fold);
                _this2.hideOperator();
                _this2.foldConfirmBox = undefined;
              },
              onConfirm: function onConfirm() {
                _this2.shareSpace.texasProxy.playerAction(GameConst.TexasPlay.EActType.Check);
                _this2.hideOperator();
                _this2.foldConfirmBox = undefined;
              },
              onPageDestroy: function onPageDestroy() {
                _this2.foldConfirmBox = undefined;
              }
            });
            this.foldConfirmBox = box;
            box.showOn(this.grootInst);
          } else {
            this.shareSpace.texasProxy.playerAction(GameConst.TexasPlay.EActType.Fold);
            this.hideOperator();
          }
        };
        _proto.onBtnCheckClick = function onBtnCheckClick() {
          this.shareSpace.texasProxy.playerAction(GameConst.TexasPlay.EActType.Check);
          this.hideOperator();
        };
        _proto.onBtnCallClick = function onBtnCallClick() {
          this.shareSpace.texasProxy.playerAction(GameConst.TexasPlay.EActType.Call, this.shareSpace.texasGameData.tableInfo.curActionPlayer.followChip);
          this.hideOperator();
        };
        _proto.onBtnAllinClick = function onBtnAllinClick() {
          this.shareSpace.texasProxy.playerAction(GameConst.TexasPlay.EActType.AllIn, this.shareSpace.texasGameData.getCurPlayerInfo().chip);
          this.hideOperator();
        };
        _proto.onBtnRaiseConfirmClick = function onBtnRaiseConfirmClick() {
          var raiseValue = this.getRaiseValueByRaisePercent();
          if (raiseValue == this.shareSpace.texasGameData.getCurPlayerInfo().chip) {
            // allin
            this.shareSpace.texasProxy.playerAction(GameConst.TexasPlay.EActType.AllIn, raiseValue);
          } else {
            this.shareSpace.texasProxy.playerAction(GameConst.TexasPlay.EActType.Raise, raiseValue);
          }
          this.hideOperator();
        };
        _proto.onBtnBackTableClick = function onBtnBackTableClick() {
          this.shareSpace.roomProxy.cancelAFK();
        };
        _proto.onBtnForceBBClick = function onBtnForceBBClick() {
          this.shareSpace.roomProxy.postBigBlind();
        };
        _proto.onBtnTimeBankClick = function onBtnTimeBankClick() {
          this.shareSpace.roomProxy.applyDelayActionTime();
        };
        _proto.onRaiseSliderBgTouch = function onRaiseSliderBgTouch(event) {
          if (event.type == Event.TOUCH_BEGIN) {
            this.grootInst.inputProcessor.addTouchMonitor(event.touchId, this.m_operatorContent.m_raiseSliderBg);
          }
          var touchPos = this.m_operatorContent.m_raiseSliderBg.globalToLocal(event.pos.x, event.pos.y);
          var totalLength = Math.abs(this.chipMaxPos - this.chipMinPos);
          var percent = 0;
          if (touchPos.y <= this.chipMinPos) {
            percent = 1;
          } else if (touchPos.y > this.chipMinPos && touchPos.y < this.chipMaxPos) {
            percent = 1 - (touchPos.y - this.chipMinPos) / totalLength;
          }
          this.raisePercent = percent;
          if (this._sliderLastValue != this.m_operatorContent.m_raiseSliderText.text) {
            // 震动
            NativeDeviceBridge.Instance.shortVibrate(2);
            this._sliderLastValue = this.m_operatorContent.m_raiseSliderText.text;
          }
        };
        _proto.updateSliderChips = function updateSliderChips() {
          var totalLength = Math.abs(this.chipMaxPos - this.chipMinPos);
          var compareNum = this.chipMaxPos - totalLength * this.raisePercent;
          for (var i = 0; i < this.raiseChips.length; i++) {
            var chip = this.raiseChips[i];
            var chipPosGlobal = chip.localToGlobal(0, chip.height / 2);
            var chipPos = this.m_operatorContent.m_raiseSliderBg.globalToLocal(chipPosGlobal.x, chipPosGlobal.y);
            chip.visible = i == 0 || chipPos.y > compareNum;
          }
          var raiseValue = this.getRaiseValueByRaisePercent();
          if (raiseValue) {
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            // Log.game.log('TexasOperatorLayer', 'updateSliderChips', 'raiseValue:', raiseValue);
            if (tableInfo.needTimes) {
              raiseValue /= 100;
            }
            this.m_operatorContent.m_raiseSliderText.text = Utils.toFormat(raiseValue);
            this.m_operatorContent.m_raiseSliderText._label.updateRenderData();
          }
        };
        _proto.getRaiseValueByRaisePercent = function getRaiseValueByRaisePercent() {
          var texasGameData = this.shareSpace.texasGameData;
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (tableInfo) {
            var sbNum = texasGameData.sbNum;
            if (tableInfo.needTimes) {
              sbNum *= 100;
            }
            var value = (this.maxRaise - this.minRaise) * this.raisePercent + this.minRaise;
            value = Math.ceil(value / sbNum) * sbNum;
            return Math.min(Math.max(value, this.minRaise), this.maxRaise);
          }
        };
        _proto.closeFoldConfirmBox = function closeFoldConfirmBox() {
          if (this.foldConfirmBox) {
            this.foldConfirmBox.hide();
          }
          this.foldConfirmBox = undefined;
        };
        _proto.updateOperatorLayerStatus = function updateOperatorLayerStatus(callback, resetRaiseMode) {
          var _this3 = this;
          if (resetRaiseMode === void 0) {
            resetRaiseMode = false;
          }
          var texasGameData = this.shareSpace.texasGameData;
          var tableInfo = texasGameData.tableInfo;
          var curActionPlayer = tableInfo == null ? void 0 : tableInfo.curActionPlayer;
          var curPlayerInfo = texasGameData.getCurPlayerInfo();
          this.isJoinTheGame = tableInfo && tableInfo.gamePlayerids.includes(RoleData.inst.playerID) && curPlayerInfo && curPlayerInfo.actStatus != GameConst.TexasPlay.EActStatus.Fold && curPlayerInfo.actStatus != -1;
          var isLeftback = curPlayerInfo && curPlayerInfo.isLeftback;
          var isMyRound = this.isJoinTheGame && curActionPlayer.playerid == RoleData.inst.playerID;
          isMyRound = isMyRound && tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Result;
          var showForceBB = !texasGameData.isMatch && !tableInfo.gamePlayerids.includes(RoleData.inst.playerID) && curPlayerInfo && curPlayerInfo.chairId > 0 && curPlayerInfo.actStatus <= 0;
          showForceBB = showForceBB && tableInfo && tableInfo.roomStatus >= GameConst.TexasPlay.ERoomStatus.PreFlop && tableInfo.roomStatus <= GameConst.TexasPlay.ERoomStatus.Result;
          showForceBB = showForceBB && texasGameData.chairPlayerNum >= 2 && !this.immediatelyEnterState;
          showForceBB = showForceBB && !isLeftback && curPlayerInfo && curPlayerInfo.chip >= texasGameData.sbNum * 2 + texasGameData.anteNum;
          var roundStete;
          if (!tableInfo || texasGameData.isMatch && texasGameData.mttState.value == TexasMttClientState.FINISH) {
            roundStete = 'none';
          } else {
            if (showForceBB) {
              roundStete = 'forceBB';
            } else if (isLeftback) {
              roundStete = 'afk';
            } else if (isMyRound) {
              if (tableInfo.preOprType == GameConst.TexasPlay.EPreOperationType.Cancel) {
                roundStete = 'my';
              } else {
                roundStete = 'none';
              }
            } else if (this.isJoinTheGame && curActionPlayer && curActionPlayer.playerid > 0) {
              if (curPlayerInfo.actStatus == GameConst.TexasPlay.EActStatus.AllIn) {
                roundStete = 'none';
              } else {
                roundStete = 'other';
              }
            } else {
              roundStete = 'none';
            }
          }
          // roundStete != this.roundStete;
          var _updateState = function _updateState() {
            _this3.roundStete = roundStete;
            if (_this3.isJoinTheGame) {
              if (isMyRound) {
                // 时间银行按钮
                var timeBankCostNum = curActionPlayer.boughtLeftTimeNeedCash;
                var isTimeBankFree = timeBankCostNum == 0;
                _this3.m_btnTimeBank.m_freeCost.selectedIndex = isTimeBankFree ? 1 : 0;
                if (!isTimeBankFree) {
                  _this3.m_btnTimeBank.m_cost.text = "" + timeBankCostNum;
                  _this3.m_btnTimeBank.m_cost._label.updateRenderData();
                }
                // UITools.forceUpdateRecursion(this.m_btnTimeBank.node);
                var targetTime = (curActionPlayer.actionFinishTime - 2) * 1000;
                var curTime = Utils.curServerTimestamp;
                var showTimeBank = targetTime - curTime <= 5000;
                _this3.m_btnTimeBank.visible = showTimeBank;

                // console.log('FFFFF', '----------------')
                // console.log('FFFFF', 'canRaise:', curActionPlayer.canRaise)
                // console.log('FFFFF', 'canPass:', curActionPlayer.canPass)
                // console.log('FFFFF', 'followChip:', curActionPlayer.followChip)
                // console.log('FFFFF', 'minAddChip:', curActionPlayer.minAddChip)
                // console.log('FFFFF', 'minBet:', curActionPlayer.minBet)
                // console.log('FFFFF', 'maxBet:', curActionPlayer.maxBet)
                // console.log('FFFFF', 'chip:', curPlayerInfo.chip)
                // console.log('FFFFF', 'tableChip:', curPlayerInfo.tableChip)

                var showRaise = curActionPlayer.canRaise; // 显示加注按钮
                var showAllin = curActionPlayer.canAllin; // 显示 allin 按钮
                if (showRaise && showAllin) {
                  // 加注按钮和 allin 同时只能显示一个
                  if (curPlayerInfo.chip > 0 && curPlayerInfo.tableChip + curPlayerInfo.chip <= curActionPlayer.minAddChip || curPlayerInfo.chip <= curActionPlayer.minBet) {
                    showRaise = false;
                  } else {
                    showAllin = false;
                  }
                }
                var renameRaiseToBet = false; // 将加注显示为下注
                if (showRaise) {
                  if (tableInfo.roomStatus != GameConst.TexasPlay.ERoomStatus.PreFlop && curActionPlayer.canPass) {
                    renameRaiseToBet = true;
                  }
                }
                var showCall = curActionPlayer.followChip > 0 && curActionPlayer.followChip < curPlayerInfo.chip;
                _this3.isCheckEnable = !showCall && curActionPlayer.canPass;
                _this3.showCall = showCall;
                _this3.showRaise = showRaise;
                _this3.showAllin = showAllin;
                if (showAllin) {
                  var allinPlace = !curActionPlayer.canPass && !showCall;
                  _this3.m_operatorContent.m_allinPlace.selectedIndex = allinPlace ? 0 : 1;
                }
                _this3.renameRaiseToBet = renameRaiseToBet;

                // console.log('FFFFF', 'isCheckEnable:', this.isCheckEnable)
                // console.log('FFFFF', 'showCall:', this.showCall)
                // console.log('FFFFF', 'showRaise:', this.showRaise)
                // console.log('FFFFF', 'showAllin:', this.showAllin)
                // console.log('FFFFF', 'renameRaiseToBet:', this.renameRaiseToBet)

                if (_this3.showCall) {
                  var multiLanguageText = _this3.m_operatorContent.m_btnCall.getTextField().node.getComponent(MultiLanguageText);
                  var curFollowCount = curActionPlayer.followChip;
                  if (tableInfo.needTimes) {
                    curFollowCount /= 100;
                  }
                  var callStr = Utils.toFormat(curFollowCount);
                  multiLanguageText.setFormatFunction(function () {
                    return LanguageManager.get('TXT_70') + " " + callStr;
                  });
                }
                var minRaise = curActionPlayer.minAddChip - curPlayerInfo.tableChip;
                var maxRaise = curPlayerInfo.chip;
                if (_this3.shareSpace.texasGameData.isPloGame) {
                  maxRaise = Math.min(tableInfo.pot + curActionPlayer.followChip * 2, maxRaise);
                }
                if (maxRaise <= 0) {
                  maxRaise = _this3.shareSpace.texasGameData.bbNum;
                }
                _this3.minRaise = minRaise;
                _this3.maxRaise = maxRaise;
                if (resetRaiseMode) {
                  _this3.raisePercent = 0;
                  _this3.isRaiseMode = false;
                }

                // console.log('FFFFF', 'minRaise:', this.minRaise)
                // console.log('FFFFF', 'maxRaise:', this.maxRaise)

                if (_this3.showRaise) {
                  var pot = tableInfo.pot;
                  if (_this3.renameRaiseToBet) {
                    // '1/2底池' '2/3底池' '1底池'
                    // 1/2Pot = (要跟的注 + (要跟的注 + 底池) * (1 / 2))
                    // 2/3Pot = (要跟的注 + (要跟的注 + 底池) * (2 / 3))
                    // PotPot = (要跟的注 + (要跟的注 + 底池))
                    var pot1_2 = curActionPlayer.followChip + (curActionPlayer.followChip + pot) * 0.5;
                    var pot2_3 = curActionPlayer.followChip + (curActionPlayer.followChip + pot) * (2 / 3);
                    var pot1_1 = curActionPlayer.followChip + (curActionPlayer.followChip + pot);

                    // console.log('FFFFF', 'pot1_2:', pot1_2)
                    // console.log('FFFFF', 'pot2_3:', pot2_3)
                    // console.log('FFFFF', 'pot1_1:', pot1_1)

                    if (_this3.shareSpace.texasGameData.isMatch || !_this3.shareSpace.texasGameData.isClubRoom) {
                      pot1_2 = Math.floor(pot1_2);
                      pot2_3 = Math.floor(pot2_3);
                      pot1_1 = Math.floor(pot1_1);
                    }
                    _this3.m_operatorContent.m_btnRaiseBB1.data = pot1_2;
                    _this3.m_operatorContent.m_btnRaiseBB2.data = pot2_3;
                    _this3.m_operatorContent.m_btnRaiseBB3.data = pot1_1;
                    _this3.m_operatorContent.m_btnRaiseBB1.visible = maxRaise >= pot1_2;
                    _this3.m_operatorContent.m_btnRaiseBB2.visible = maxRaise >= pot2_3;
                    _this3.m_operatorContent.m_btnRaiseBB3.visible = maxRaise >= pot1_1;
                    _this3.m_operatorContent.m_btnRaiseBB1.title = 'TXT_1001';
                    _this3.m_operatorContent.m_btnRaiseBB2.title = 'TXT_1002';
                    _this3.m_operatorContent.m_btnRaiseBB3.title = 'TXT_1003';
                  } else {
                    var bbNum = _this3.shareSpace.texasGameData.bbNum;
                    if (tableInfo.needTimes) {
                      bbNum *= 100;
                    }
                    var bb2 = bbNum * 2 - curPlayerInfo.tableChip;
                    var bb3 = bbNum * 3 - curPlayerInfo.tableChip;
                    var bb4 = bbNum * 4 - curPlayerInfo.tableChip;
                    var callTo = curPlayerInfo.tableChip + curActionPlayer.followChip; // 跟注到
                    var call2 = callTo * 2 - curPlayerInfo.tableChip;
                    var call3 = callTo * 3 - curPlayerInfo.tableChip;
                    var call4 = callTo * 4 - curPlayerInfo.tableChip;

                    // console.log('FFFFF', 'bbNum:', bbNum)
                    // console.log('FFFFF', 'bb2:', bb2)
                    // console.log('FFFFF', 'bb3:', bb3)
                    // console.log('FFFFF', 'bb4:', bb4)
                    // console.log('FFFFF', 'call2:', call2)
                    // console.log('FFFFF', 'call3:', call3)
                    // console.log('FFFFF', 'call4:', call4)

                    if (_this3.shareSpace.texasGameData.isPloGame) {
                      _this3.m_operatorContent.m_btnRaiseBB3.visible = true;
                      _this3.m_operatorContent.m_btnRaiseBB3.data = maxRaise;
                      _this3.m_operatorContent.m_btnRaiseBB3.title = 'TXT_1003';
                      if (_this3.isCheckEnable) {
                        // '2BB' '3BB' 'Pot'
                        _this3.m_operatorContent.m_btnRaiseBB1.visible = maxRaise > bb2;
                        _this3.m_operatorContent.m_btnRaiseBB2.visible = maxRaise > bb3;
                        _this3.m_operatorContent.m_btnRaiseBB1.data = bb2;
                        _this3.m_operatorContent.m_btnRaiseBB2.data = bb3;
                        _this3.m_operatorContent.m_btnRaiseBB1.title = '2BB';
                        _this3.m_operatorContent.m_btnRaiseBB2.title = '3BB';
                      } else {
                        // '2x' '3x' 'Pot'
                        _this3.m_operatorContent.m_btnRaiseBB1.visible = maxRaise > call2;
                        _this3.m_operatorContent.m_btnRaiseBB2.visible = maxRaise > call3;
                        _this3.m_operatorContent.m_btnRaiseBB1.data = call2;
                        _this3.m_operatorContent.m_btnRaiseBB2.data = call3;
                        _this3.m_operatorContent.m_btnRaiseBB1.title = '2x';
                        _this3.m_operatorContent.m_btnRaiseBB2.title = '3x';
                      }
                    } else {
                      if (_this3.isCheckEnable) {
                        // '2BB' '3BB' '4BB'
                        _this3.m_operatorContent.m_btnRaiseBB1.visible = maxRaise > bb2;
                        _this3.m_operatorContent.m_btnRaiseBB2.visible = maxRaise > bb3;
                        _this3.m_operatorContent.m_btnRaiseBB3.visible = maxRaise > bb4;
                        _this3.m_operatorContent.m_btnRaiseBB1.data = bb2;
                        _this3.m_operatorContent.m_btnRaiseBB2.data = bb3;
                        _this3.m_operatorContent.m_btnRaiseBB3.data = bb4;
                        _this3.m_operatorContent.m_btnRaiseBB1.title = '2BB';
                        _this3.m_operatorContent.m_btnRaiseBB2.title = '3BB';
                        _this3.m_operatorContent.m_btnRaiseBB3.title = '4BB';
                      } else {
                        // '2x' '3x' '4x'
                        _this3.m_operatorContent.m_btnRaiseBB1.visible = maxRaise > call2;
                        _this3.m_operatorContent.m_btnRaiseBB2.visible = maxRaise > call3;
                        _this3.m_operatorContent.m_btnRaiseBB3.visible = maxRaise > call4;
                        _this3.m_operatorContent.m_btnRaiseBB1.data = call2;
                        _this3.m_operatorContent.m_btnRaiseBB2.data = call3;
                        _this3.m_operatorContent.m_btnRaiseBB3.data = call4;
                        _this3.m_operatorContent.m_btnRaiseBB1.title = '2x';
                        _this3.m_operatorContent.m_btnRaiseBB2.title = '3x';
                        _this3.m_operatorContent.m_btnRaiseBB3.title = '4x';
                      }
                    }
                  }
                } else {
                  _this3.m_operatorContent.m_btnRaiseBB1.data = undefined;
                  _this3.m_operatorContent.m_btnRaiseBB3.data = undefined;
                  _this3.m_operatorContent.m_btnRaiseBB2.data = undefined;
                }
              } else {
                switch (tableInfo.roomStatus) {
                  case GameConst.TexasPlay.ERoomStatus.NotStart:
                  case GameConst.TexasPlay.ERoomStatus.Result:
                  case GameConst.TexasPlay.ERoomStatus.Finish:
                    _this3.m_operatorContent.m_btnSelectAutoCheck.visible = false;
                    _this3.m_operatorContent.m_btnSelectCall.visible = false;
                    _this3.m_operatorContent.m_btnSelectCallAny.visible = false;
                    _this3.m_operatorContent.m_btnSelectCheckOrFold.visible = false;
                    break;
                  default:
                    var _curFollowCount = _this3.getCurFollowCount();
                    _this3.m_operatorContent.m_btnSelectAutoCheck.visible = _curFollowCount <= 0;
                    _this3.m_operatorContent.m_btnSelectCall.visible = _curFollowCount > 0;
                    _this3.m_operatorContent.m_btnSelectCallAny.visible = true;
                    _this3.m_operatorContent.m_btnSelectCheckOrFold.visible = true;
                    _this3.m_operatorContent.m_btnSelectAutoCheck.m_select.selectedIndex = tableInfo.preOprType == GameConst.TexasPlay.EPreOperationType.AutoCheck ? 1 : 0;
                    _this3.m_operatorContent.m_btnSelectCall.m_select.selectedIndex = tableInfo.preOprType == GameConst.TexasPlay.EPreOperationType.Call ? 1 : 0;
                    _this3.m_operatorContent.m_btnSelectCallAny.m_select.selectedIndex = tableInfo.preOprType == GameConst.TexasPlay.EPreOperationType.CallAny ? 1 : 0;
                    _this3.m_operatorContent.m_btnSelectCheckOrFold.m_select.selectedIndex = tableInfo.preOprType == GameConst.TexasPlay.EPreOperationType.CheckOrFold ? 1 : 0;
                    if (_this3.m_operatorContent.m_btnSelectCall.visible) {
                      var _multiLanguageText = _this3.m_operatorContent.m_btnSelectCall.getTextField().node.getComponent(MultiLanguageText);
                      if (tableInfo.needTimes) {
                        _curFollowCount /= 100;
                      }
                      var _callStr = Utils.toFormat(_curFollowCount);
                      _multiLanguageText.setFormatFunction(function () {
                        return LanguageManager.get('TXT_70') + " " + _callStr;
                      });
                    }
                    break;
                }
              }
            }
            // this.forceUpdateRecursion();
          };

          if (callback == undefined) {
            _updateState();
            return;
          }
          Tween.stopAllByTarget(this.m_operatorContent);
          if (roundStete != this.roundStete) {
            this._sliderLastValue = undefined;
            if (roundStete == 'none') {
              // hide
              var targetY = this.actionPosY + 150;
              var time = Math.abs(targetY - this.m_operatorContent.y) / 150 * 0.15;
              if (time > 0) {
                tween(this.m_operatorContent).set({
                  y: this.actionPosY
                }).to(time, {
                  y: targetY
                }).call(_updateState).set({
                  y: this.actionPosY
                }).call(callback).start();
              } else {
                _updateState();
                callback();
              }
            } else {
              // hide and show
              var _targetY = this.actionPosY + 150;
              var _time = Math.abs(_targetY - this.m_operatorContent.y) / 150 * 0.15;
              if (_time > 0) {
                tween(this.m_operatorContent).to(_time, {
                  y: _targetY
                }).call(_updateState).to(0.15, {
                  y: this.actionPosY
                }).call(callback).start();
              } else {
                tween(this.m_operatorContent).call(_updateState).to(0.15, {
                  y: this.actionPosY
                }).call(callback).start();
              }
            }
          } else {
            _updateState();
            callback();
          }
        };
        _proto.hideOperator = function hideOperator() {
          Tween.stopAllByTarget(this.m_operatorContent);
          this.roundStete = 'none';
          var targetY = this.actionPosY + 150;
          var time = Math.abs(targetY - this.m_operatorContent.y) / 150 * 0.15;
          if (time > 0) {
            tween(this.m_operatorContent).set({
              y: this.actionPosY
            }).to(time, {
              y: targetY
            }).set({
              y: this.actionPosY
            }).start();
          }
        };
        _proto.getCurFollowCount = function getCurFollowCount() {
          if (!this.isJoinTheGame) return 0;
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var max = 0;
          var curTableChip = 0;
          for (var i = 0; i < tableInfo.gamePlayerids.length; i++) {
            var playerid = tableInfo.gamePlayerids[i];
            var playerInfo = this.shareSpace.texasGameData.getChairPlayerInfoByPlayerID(playerid);
            if (playerInfo && playerInfo.tableChip > max) {
              max = playerInfo.tableChip;
            }
            if (playerid == RoleData.inst.playerID) {
              if (playerInfo) {
                curTableChip = playerInfo.tableChip;
              }
            }
          }
          var bbNum = this.shareSpace.texasGameData.bbNum;
          if (max > 0 && max < bbNum) {
            max = bbNum;
          }
          return max - curTableChip;
        };
        _createClass(TexasOperatorLayer, [{
          key: "raisePercent",
          get: function get() {
            return this._raisePercent;
          },
          set: function set(v) {
            this._raisePercent = v;
            this.updateSliderChips();
          }
        }, {
          key: "isCheckEnable",
          get: function get() {
            return this.m_operatorContent.m_isCheckEnable.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_operatorContent.m_isCheckEnable.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "showCall",
          get: function get() {
            return this.m_operatorContent.m_showCall.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_operatorContent.m_showCall.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "isJoinTheGame",
          get: function get() {
            return this.m_operatorContent.m_isJoinTheGame.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_operatorContent.m_isJoinTheGame.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "isRaiseMode",
          get: function get() {
            return this.m_operatorContent.m_isRaiseMode.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_operatorContent.m_isRaiseMode.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "renameRaiseToBet",
          get: function get() {
            return this.m_operatorContent.m_raiseBtnName.selectedIndex == 0;
          },
          set: function set(v) {
            this.m_operatorContent.m_raiseBtnName.selectedIndex = v ? 0 : 1;
          }
        }, {
          key: "showRaise",
          get: function get() {
            return this.m_operatorContent.m_showRaise.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_operatorContent.m_showRaise.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "showAllin",
          get: function get() {
            return this.m_operatorContent.m_showAllin.selectedIndex == 1;
          },
          set: function set(v) {
            this.m_operatorContent.m_showAllin.selectedIndex = v ? 1 : 0;
          }
        }, {
          key: "roundStete",
          get: function get() {
            return this.m_operatorContent.m_roundState.selectedPage;
          },
          set: function set(v) {
            this.m_roundState.selectedPage = v;
            this.m_operatorContent.m_roundState.selectedPage = v;
          }
        }]);
        return TexasOperatorLayer;
      }(UI_TexasOperatorLayer), (_applyDecoratedDescriptor(_class2.prototype, "onBtnRaiseBB1Click", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnRaiseBB1Click"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnRaiseBB2Click", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnRaiseBB2Click"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnRaiseBB3Click", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnRaiseBB3Click"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRaiseAddClick", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onRaiseAddClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRaiseSubClick", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onRaiseSubClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnSelectAutoCheckClick", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnSelectAutoCheckClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnSelectCallClick", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnSelectCallClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnSelectCallAnyClick", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnSelectCallAnyClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnSelectCheckOrFoldClick", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnSelectCheckOrFoldClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnFoldClick", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnFoldClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnCheckClick", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCheckClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnCallClick", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCallClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnAllinClick", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnAllinClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnRaiseConfirmClick", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnRaiseConfirmClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnBackTableClick", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnBackTableClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnForceBBClick", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnForceBBClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnTimeBankClick", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnTimeBankClick"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPlayerInfoLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './GameConst.ts', './GameDecorators.ts', './UI_TexasPlayerInfoLayer.ts', './RoleData.ts', './GameConfig.ts', './LanguageManage.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Utils, GameConst, CustomFguiClass, UI_TexasPlayerInfoLayer, RoleData, GameConfig, EnumDownLoadType, LanguageManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasPlayerInfoLayer = module.default;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      GameConfig = module.GameConfig;
      EnumDownLoadType = module.EnumDownLoadType;
    }, function (module) {
      LanguageManager = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "26ac2lqIEFEkoo4TsQ8CPyT", "TexasPlayerInfoLayer", undefined);
      var TexasPlayerInfoLayer = exports('TexasPlayerInfoLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasPlayerInfoLa) {
        _inheritsLoose(TexasPlayerInfoLayer, _UI_TexasPlayerInfoLa);
        function TexasPlayerInfoLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasPlayerInfoLa.call.apply(_UI_TexasPlayerInfoLa, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.userInfo = void 0;
          _this._init = false;
          return _this;
        }
        var _proto = TexasPlayerInfoLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasPlayerInfoLa.prototype.onConstruct.call(this);
          this.m_gameMenuMask.onClick(this.onBtnCloseClick, this);
        };
        _proto.onEnable = function onEnable() {
          _UI_TexasPlayerInfoLa.prototype.onEnable.call(this);
          if (this._init) return;
          this._init = true;
          for (var expressionID = 1; expressionID <= 15; expressionID++) {
            var place = this.m_gameEmoj["m_place" + (expressionID - 1)];
            place.onClick(this.onExpressionItemClick.bind(this, expressionID), this);
            var url = GameConfig.getOssImgUrl_1("icon_face_" + GameConst.ExpressionMap[expressionID] + ".png", EnumDownLoadType.DOWN_NOMALL);
            place.url = url;

            //LoadEncryImage.Instance.LoadRemoteDecryptImage(url, place);
            //this.LoadRemoteDecryptImage(url, place);
            //place.url = GameConfig.getOssImgUrl_1(`icon_face_${GameConst.ExpressionMap[expressionID]}.png`);
          }
          // let nowUrl = 'https://87poker-s3.s3.ap-southeast-1.amazonaws.com/ph_back/nomall/icon_face_wink.png.dat';
          // this.getRemoteDecryptImage(nowUrl, this.m_head_bg1);
        };

        _proto.closeView = function closeView() {
          this.shareSpace.texasGamePage.popupLayer.m_playerInfoController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView(money, userInfo) {
          this.shareSpace.texasGamePage.popupLayer.m_playerInfoController.selectedIndex = 1;
          this.setShow(money, userInfo);
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.m_UserName.text = '--';
          this.m_UserId.text = '--';
          var avatar = this.m_HeadGroup.component;
          avatar.setDefaultIcon();
          this.m_handsValue.text = '--';
          this.m_gamesValue.text = '--';
          this.m_vpipValue.text = '--';
          this.closeView();
        };
        _proto.setShow = function setShow(money, userInfo) {
          this.userInfo = userInfo;
          this.m_UserName.text = userInfo.name;
          this.m_UserId.text = 'ID:' + userInfo.playerid;
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(userInfo.icon);
          var isMatch = this.shareSpace.texasGameData.isMatch;
          if (isMatch) {
            var _userInfo$mttTitleNum, _userInfo$totalMttGam, _userInfo$mttItm;
            this.m_vpipTitle.text = LanguageManager.get('TXT_621'); //itm 获胜概率
            this.m_handsTitle.text = LanguageManager.get('TXT_1541'); // 冠军
            this.m_gamesTitle.text = LanguageManager.get('TXT_619'); //游戏总数

            var mttTitlenum = (_userInfo$mttTitleNum = userInfo.mttTitleNum) != null ? _userInfo$mttTitleNum : 0;
            var total_games = (_userInfo$totalMttGam = userInfo.totalMttGames) != null ? _userInfo$totalMttGam : 0;
            var mttItm = (_userInfo$mttItm = userInfo.mttItm) != null ? _userInfo$mttItm : 0;
            if (mttItm == 0) {
              this.m_vpipValue.text = '0%';
            } else {
              this.m_vpipValue.text = Utils.formatStr('%s%', Math.floor(Math.min(mttItm / total_games * 100, 100)));
            }
            this.m_handsValue.text = mttTitlenum + '';
            this.m_gamesValue.text = total_games + '';
          } else {
            var _userInfo$tableNum, _userInfo$totalGames;
            this.m_vpipTitle.text = LanguageManager.get('CCS_TXT_311');
            this.m_handsTitle.text = LanguageManager.get('TXT_618');
            this.m_gamesTitle.text = LanguageManager.get('TXT_619');
            var table_num = (_userInfo$tableNum = userInfo.tableNum) != null ? _userInfo$tableNum : 0;
            var _total_games = (_userInfo$totalGames = userInfo.totalGames) != null ? _userInfo$totalGames : 0;
            if (table_num == 0) {
              this.m_vpipValue.text = '0%';
            } else {
              var _userInfo$inPotNum;
              var in_pot_num = (_userInfo$inPotNum = userInfo.inPotNum) != null ? _userInfo$inPotNum : 0;
              this.m_vpipValue.text = Utils.formatStr('%s%', Math.floor(Math.min(in_pot_num / table_num * 100, 100)));
            }
            this.m_handsValue.text = table_num + '';
            this.m_gamesValue.text = _total_games + '';
          }
          this.m_isCurPlayer.selectedIndex = userInfo.playerid == RoleData.inst.playerID ? 1 : 0;

          //刷新bb数
          var nowMoney = money; // money/ 100;
          this.m_playerMoney.text = Utils.toFormat(nowMoney, 2, false, false);
          //Utils.getThousandShowNumber(nowMoney);

          var bbNum = this.shareSpace.texasGameData.bbNum;
          this.m_playerBB.text = Utils.formatStr('(%sBB)', Utils.toFormat(nowMoney / bbNum, 2, false, false));
          this.forceUpdateRecursion(); //Utils.toFormat('(%sBB)', nowMoney / bbNum);
        };

        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasPlayerInfoLayer';
        };
        _proto.onBtnCloseClick = function onBtnCloseClick() {
          this.closeView();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onBtnCloseClick();
          }
        };
        _proto.onExpressionItemClick = function onExpressionItemClick(expressionID) {
          this.closeView();
          this.shareSpace.chatProxy.sendExpression(expressionID);
        };
        _createClass(TexasPlayerInfoLayer, [{
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_playerInfoController.selectedIndex == 1;
          }
        }]);
        return TexasPlayerInfoLayer;
      }(UI_TexasPlayerInfoLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPlayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConst.ts', './UI_TexasPlayerItem.ts', './TexasPositionConst.ts', './CocosDevKit.ts', './RoleData.ts', './GameDecorators.ts', './LanguageManage.ts', './NativeDeviceBridge.ts', './TexasGameData.ts', './GameConfig.ts', './AudioManager.ts', './CDKDecorators.ts', './Clock.ts', './Logger.ts', './Utils.ts', './PokerParser.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, Tween, tween, Prefab, instantiate, sp, GameConst, UI_TexasPlayerItem, TexasPositionConst, RoleData, CustomFguiClass, LanguageManager, NativeDeviceBridge, TexasMttClientState, GameConfig, AudioManager, SafeTimeInterval, Clock, Log, Utils, PokerParser;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      tween = module.tween;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      sp = module.sp;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      UI_TexasPlayerItem = module.default;
    }, function (module) {
      TexasPositionConst = module.TexasPositionConst;
    }, null, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      TexasMttClientState = module.TexasMttClientState;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Clock = module.Clock;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      PokerParser = module.PokerParser;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "9ed6bZDJXpI169cv1Vl9t52", "TexasPlayerItem", undefined);

      // const ColorConfig: [Color, Color, number, number][] = [
      //     [color(41, 248, 116), color(210, 226, 43), 0.5, 0.5],
      //     [color(210, 226, 43), color(255, 113, 33), 0.25, 0.25],
      //     [color(255, 113, 33), color(255, 32, 32), 0.25, 0]
      // ];
      var OFFSETY = -10;
      var TexasPlayerItem = exports('TexasPlayerItem', (_dec = SafeTimeInterval(400), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasPlayerItem) {
        _inheritsLoose(TexasPlayerItem, _UI_TexasPlayerItem);
        function TexasPlayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasPlayerItem.call.apply(_UI_TexasPlayerItem, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.clock = new Clock(_assertThisInitialized(_this));
          _this.chairWinSkel = void 0;
          /**
           * 服务器的座位号，设定好了之后不会改变
           */
          _this._chairID = void 0;
          /**
           * 座位的索引，以底部的座位为0开始逆时针旋转自增
           */
          _this._chairIndex = void 0;
          return _this;
        }
        TexasPlayerItem.createInstance = function createInstance() {
          return UI_TexasPlayerItem.createInstance();
        };
        var _proto = TexasPlayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasPlayerItem.prototype.onConstruct.call(this);
          this.name = 'TexasPlayerItem';
          this.onClick(this.onItemClick, this);
          this.clock.on(this.onClock, this);
          this.openCardItem.scaleX = 1;
          this.openCardItem.scaleY = 1;
          this.openCardItem.alpha = 1;
          this.openCardItem.visible = false;
          this.m_chairState.selectedPage = 'empty';
          this.actionTag.visible = false;
          this.m_groupSittingOut.visible = false;
          this.m_timeCountdownProgress.visible = false;
          this.m_winScore.visible = false;
          this.m_allinAmin.visible = false;
          this.m_chairWin.visible = false;
          this.m_handCardTip.visible = false;
          this.m_chatBubble.visible = false;
          this.m_cardTypeGroup.visible = false;
          this.m_iconDisConnectProtect.visible = false;
          this.m_winRateItem.visible = false;
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.openCardItem.init(shareSpace);
        };
        _proto.reset = function reset() {
          this.clock.stop();
          AudioManager.inst.stopSound();
          Tween.stopAllByTarget(this.openCardItem);
          Tween.stopAllByTarget(this.m_winScore);
          Tween.stopAllByTarget(this.m_handCardTip);
          this.openCardItem.scaleX = 1;
          this.openCardItem.scaleY = 1;
          this.openCardItem.alpha = 1;
          this.openCardItem.reset();
          this.openCardItem.visible = false;
          this.m_cardTypeGroup.visible = false;
          this.m_chairState.selectedPage = 'empty';
          this.actionTag.visible = false;
          this.m_groupSittingOut.visible = false;
          this.m_timeCountdownProgress.visible = false;
          this.m_winScore.visible = false;
          this.m_allinAmin.visible = false;
          this.m_chairWin.visible = false;
          this.m_handCardTip.visible = false;
          this.m_iconDisConnectProtect.visible = false;
          this.m_winRateItem.visible = false;
          this.m_expressionPlace.node.destroyAllChildren();
          Tween.stopAllByTarget(this.m_chatBubble);
          this.m_chatBubble.visible = false;
        };
        _proto.setChairChairID = function setChairChairID(chairID) {
          this._chairID = chairID;
        };
        _proto.setChairPlace = function setChairPlace(chairIndex) {
          this._chairIndex = chairIndex;
          var place = this.chairPlace;
          this.x = place.x;
          this.y = place.y + OFFSETY;
          var num = this.parent.width / 2;
          if (place.x <= num) {
            this.m_winRatePlace.selectedIndex = 1;
          } else {
            this.m_winRatePlace.selectedIndex = 0;
          }
        };
        _proto.onItemClick = function onItemClick() {
          Log.game.log('TexasPlayerItem', 'onItemClick', 'chairID:', this.chairID, 'chairIndex:', this.chairIndex);
          // 震动
          NativeDeviceBridge.Instance.shortVibrate(2);
          if (this.m_chairState.selectedPage == 'sitdown') {
            if (this.shareSpace.texasGameData.isMatch) return;
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            if (!tableInfo) return;
            var chipMin = tableInfo.rule.chipMin;
            var roleChip;
            if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.gold) {
              roleChip = RoleData.inst.chip;
            } else if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.cash) {
              roleChip = RoleData.inst.cash;
            }
            // 判断是否满足最小买入
            if (roleChip < chipMin) {
              // 金币或现金不够最小买入了
              this.grootInst.showCenterTip(LanguageManager.get('TXT_1222'));
            } else {
              this.shareSpace.roomProxy.sitdown(this.chairID);
            }
          } else if (this.m_chairState.selectedPage == 'normal') {
            var chairPlayerInfo = this.chairPlayerInfo;
            if (!chairPlayerInfo) return;
            var playerid = chairPlayerInfo.playerid;
            if (this.isCurPlayerChair) {
              // todo 打开自己的玩家信息
              this.showPlayerInfo(playerid);
            } else {
              // todo 打开其他玩家的玩家信息
              this.showPlayerInfo(playerid);
            }
          }
        };
        _proto.showPlayerInfo = function showPlayerInfo(playerId) {
          var _this2 = this;
          this.shareSpace.roomProxy.getUserInfo(playerId, function (userInfo) {
            var iMoney = _this2.chairPlayerInfo.chip;
            var needTime = _this2.shareSpace.texasGameData.tableInfo.needTimes;
            if (needTime) {
              iMoney = iMoney / 100;
            }
            _this2.shareSpace.texasGamePage.popupLayer.showPlayerInfo(iMoney, userInfo);
          });
        };
        _proto.onClock = function onClock() {
          if (!this.m_timeCountdownProgress.visible) {
            AudioManager.inst.stopSoundByPath(GameConst.ESoundPath.SOUND_EFFECT_TIME_OUT);
            this.clock.stop();
            return;
          }
          if (this.clock.over) {
            this.m_timeCountdownProgress.visible = false;
            this.m_iconDisConnectProtect.visible = false;
            AudioManager.inst.stopSoundByPath(GameConst.ESoundPath.SOUND_EFFECT_TIME_OUT);
          } else {
            var timeProgress = this.m_timeCountdownProgress.component;
            var lastProgress = timeProgress.progress;
            var curProgress = 1 - this.clock.leftTime / this.clock.allTime;
            timeProgress.progress = curProgress;
            timeProgress.setTextTime('' + Math.floor(this.clock.leftTime));
            if (this.isCurPlayerChair) {
              var showTimeBank = this.clock.leftTime <= 5;
              this.shareSpace.texasGamePage.operatorLayer.m_btnTimeBank.visible = showTimeBank;
              if (lastProgress <= 0.666 && curProgress > 0.666) {
                NativeDeviceBridge.Instance.warnVibrate();
              }
              var showTickTime = this.clock.leftTime <= 7;
              if (showTickTime) {
                AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_TIME_OUT);
              }
            }
            // 3.8.3 版本的 creator 有设置颜色会产生闪烁的问题，这个问题将在 3.8.4 版本修复，升级引擎后可以打开下面代码的注释
            // for (let i = 0; i < ColorConfig.length; i++) {
            //     const element = ColorConfig[i];
            //     if (progress >= element[3]) {
            //         timeProgress.contentColor = element[0].lerp(element[1], (1 - progress) / element[2]);
            //         break;
            //     }
            // }
          }
        };

        _proto.updateActionTag = function updateActionTag() {
          // 同步玩家操作状态
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var chairPlayerInfo = this.chairPlayerInfo;
          var curActionPlayer = this.shareSpace.texasGameData.tableInfo.curActionPlayer;
          var isCover = chairPlayerInfo && this.shareSpace.texasGameData.texasClientState.coverPlayers.has(chairPlayerInfo.playerid);
          var showActionTag = tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && (tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Result || isCover);
          showActionTag = showActionTag && !this.isChairEmpty;
          showActionTag = showActionTag && this.isJoinTheGame;
          if (chairPlayerInfo && curActionPlayer && curActionPlayer.playerid == chairPlayerInfo.playerid) {
            // @ts-ignore
            var isDisConnectProtect = curActionPlayer.disConnectProtect;
            var delay = curActionPlayer.boughtLeftTimeTimes > 0 || isDisConnectProtect;
            showActionTag = showActionTag && delay;
          }
          this.actionTag.visible = showActionTag;
          this.m_allinAmin.visible = showActionTag && (this.chairPlayerInfo.actStatus == GameConst.TexasPlay.EActStatus.AllIn || this.chairPlayerInfo.chip == 0);
          if (showActionTag) {
            if (isCover) {
              this.actionTag.action = 'muck';
            } else if (curActionPlayer.playerid == chairPlayerInfo.playerid) {
              this.actionTag.action = 'delay';
            } else {
              this.chairPlayerInfo.status;
              switch (this.chairPlayerInfo.actStatus) {
                case GameConst.TexasPlay.EActStatus.Check:
                  this.actionTag.action = 'check';
                  break;
                case GameConst.TexasPlay.EActStatus.Fold:
                  this.actionTag.action = 'fold';
                  break;
                case GameConst.TexasPlay.EActStatus.Call:
                  this.actionTag.action = 'call';
                  break;
                case GameConst.TexasPlay.EActStatus.Raise:
                  this.actionTag.action = 'raise';
                  break;
                case GameConst.TexasPlay.EActStatus.AllIn:
                  this.actionTag.action = 'allin';
                  break;
                case GameConst.TexasPlay.EActStatus.FirstBet:
                  this.actionTag.action = 'bet';
                  break;
                default:
                  this.actionTag.visible = false;
                  break;
              }
            }
          }
          this.forceUpdateRecursion();
        };
        _proto.updateJoinState = function updateJoinState() {
          if (this.isChairEmpty) {
            this.avatar.m_contentItem.m_gray.selectedIndex = 0;
            return;
          }
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (tableInfo.roomStatus == GameConst.TexasPlay.ERoomStatus.NotStart || tableInfo.roomStatus == GameConst.TexasPlay.ERoomStatus.Finish) {
            this.avatar.m_contentItem.m_gray.selectedIndex = 0;
          } else {
            if (this.isJoinTheGame) {
              if (this.chairPlayerInfo.actStatus == GameConst.TexasPlay.EActStatus.Fold || this.chairPlayerInfo.actStatus == -1) {
                this.avatar.m_contentItem.m_gray.selectedIndex = 1;
              } else {
                this.avatar.m_contentItem.m_gray.selectedIndex = 0;
              }
            } else {
              this.avatar.m_contentItem.m_gray.selectedIndex = 1;
            }
          }
        };
        _proto.updateSittingoutState = function updateSittingoutState() {
          var showSittingout = !this.isChairEmpty;
          if (this.shareSpace.texasGameData.isMatch && this.shareSpace.texasGameData.mttState.value == TexasMttClientState.FINISH) {
            showSittingout = false;
          }
          var chairPlayerInfo = this.chairPlayerInfo;
          showSittingout = showSittingout && chairPlayerInfo.isLeftback;
          this.m_groupSittingOut.visible = showSittingout;
        };
        _proto.updatePlayerScore = function updatePlayerScore() {
          if (this.isChairEmpty) return;
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var score = this.chairPlayerInfo.chip;
          if (tableInfo.needTimes) {
            score /= 100;
          }
          this.m_score.text = Utils.toFormat(score);
          this.m_score._label.updateRenderData();
        };
        _proto.updateTableScore = function updateTableScore() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var chairPlayerInfo = this.chairPlayerInfo;
          // 同步玩家桌面筹码状态
          var showTableScore = tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Result;
          showTableScore = showTableScore && !this.isChairEmpty;
          showTableScore = showTableScore && this.isJoinTheGame;
          showTableScore = showTableScore && chairPlayerInfo.actStatus != 0 && chairPlayerInfo.actStatus != GameConst.TexasPlay.EActStatus.Fold && chairPlayerInfo.tableChip > 0;
          if (this.shareSpace.texasGameData.isMatch && this.shareSpace.texasGameData.mttState.value == TexasMttClientState.FINISH) {
            showTableScore = false;
          }
          if (showTableScore) {
            this.tableScore.visible = true;
            var score = chairPlayerInfo.tableChip;
            if (tableInfo.needTimes) {
              score = score / 100;
            }
            this.tableScore.m_score.text = Utils.toFormat(score);
            this.tableScore.m_score._label.updateRenderData();
            switch (chairPlayerInfo.actStatus) {
              case GameConst.TexasPlay.EActStatus.SB:
                this.tableScore.m_chipType.selectedPage = 'sb';
                break;
              case GameConst.TexasPlay.EActStatus.BB:
                this.tableScore.m_chipType.selectedPage = 'bb';
                break;
              default:
                this.tableScore.m_chipType.selectedPage = 'normal';
                break;
            }
            // this.tableScore.forceUpdateRecursion();
          } else {
            this.tableScore.visible = false;
          }
        };
        _proto.updateTimeProgress = function updateTimeProgress() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var rule = this.shareSpace.texasGameData.texasRule;
          var chairPlayerInfo = this.chairPlayerInfo;
          var curActionPlayer = this.shareSpace.texasGameData.tableInfo.curActionPlayer;
          var showTimeProgress = tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Result;
          showTimeProgress = showTimeProgress && !this.isChairEmpty;
          showTimeProgress = showTimeProgress && this.isJoinTheGame && curActionPlayer.playerid == chairPlayerInfo.playerid;
          // let targetTime = ((curActionPlayer.actionFinishTime as number) - 2) * 1000;
          var targetTime = (curActionPlayer.actionFinishTime - 1) * 1000;
          var curTime = Utils.curServerTimestamp;
          showTimeProgress = showTimeProgress && curTime < targetTime;
          this.m_timeCountdownProgress.visible = showTimeProgress;
          this.clock.stop();
          AudioManager.inst.stopSoundByPath(GameConst.ESoundPath.SOUND_EFFECT_TIME_OUT);
          var showIconDisConnectProtect = false;
          if (showTimeProgress) {
            var actionTime = rule.actionTime == 0 ? 15 : rule.actionTime;
            var totalTime = actionTime + curActionPlayer.boughtLeftTimeTimes * actionTime;
            // @ts-ignore
            if (curActionPlayer.disConnectProtect) {
              totalTime = totalTime + actionTime;
              showIconDisConnectProtect = true;
            }
            var diff = (targetTime - curTime) / 1000;
            totalTime = Math.max(totalTime, diff);
            var passedTime = totalTime - diff;
            this.clock.run(totalTime, passedTime);
            if (this.isCurPlayerChair) {
              AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_TURN);
            }
          }
          this.m_iconDisConnectProtect.visible = showIconDisConnectProtect;
        };
        _proto.updateOpenCard = function updateOpenCard() {
          var chairPlayerInfo = this.chairPlayerInfo;
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var gameResult = this.shareSpace.texasGameData.gameResult;
          var showOpenCard = !this.isChairEmpty && this.isJoinTheGame && !this.isCurPlayerChair;
          showOpenCard = showOpenCard && chairPlayerInfo.handcards && chairPlayerInfo.handcards.length > 0;
          var isCover = chairPlayerInfo && this.shareSpace.texasGameData.texasClientState.coverPlayers.has(chairPlayerInfo.playerid);
          showOpenCard = showOpenCard && !isCover;
          this.openCardItem.visible = showOpenCard;
          if (!showOpenCard) {
            this.m_cardTypeGroup.visible = false;
            this.m_winRateItem.visible = false;
            return;
          }
          // todo 更新胜率
          var hightLightCard;
          var parsedType;
          var isFold = chairPlayerInfo.actStatus == GameConst.TexasPlay.EActStatus.Fold;
          var isGameResult = tableInfo.roomStatus == GameConst.TexasPlay.ERoomStatus.Result;
          if (!isFold && isGameResult && gameResult && tableInfo.publicCards && tableInfo.publicCards.length == 5) {
            for (var i = 0; i < gameResult.playerResults.length; i++) {
              var r = gameResult.playerResults[i];
              if (r.result == 1 && r.playerid == this.chairPlayerInfo.playerid) {
                hightLightCard = r.hightlightCards;
                parsedType = PokerParser.CardTypeStrMap.get(r.pokerType);
                break;
              }
            }
          }
          this.openCardItem.scaleX = 1;
          this.openCardItem.scaleY = 1;
          this.openCardItem.alpha = 1;
          this.openCardItem.setOpenCard(chairPlayerInfo.handcards, hightLightCard);
          var showCardType = !!parsedType;
          this.m_cardTypeGroup.visible = showCardType;
          if (showCardType) {
            this.m_textCardType.text = parsedType;
          }
        };
        _proto.updateWinStatus = function updateWinStatus() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var showWinStatus = !this.isChairEmpty && this.isJoinTheGame;
          var gameResult = this.shareSpace.texasGameData.gameResult;
          showWinStatus = showWinStatus && tableInfo.roomStatus == GameConst.TexasPlay.ERoomStatus.Result && gameResult != undefined;
          if (showWinStatus) {
            var chairPlayerInfo = this.chairPlayerInfo;
            for (var i = 0; i < gameResult.playerResults.length; i++) {
              var playerResult = gameResult.playerResults[i];
              if (playerResult.playerid == chairPlayerInfo.playerid) {
                showWinStatus = !playerResult.isFold && playerResult.result == 1 && playerResult.chip > 0;
                if (showWinStatus) {
                  var score = playerResult.chip;
                  if (tableInfo.needTimes) {
                    score /= 100;
                  }
                  this.m_winScore.text = Utils.toFormat(score, 2, false, true);
                  this.m_winScore._label.updateRenderData();
                }
                break;
              }
            }
          }
          this.m_winScore.visible = showWinStatus;
          this.m_chairWin.visible = showWinStatus;
        };
        _proto.updateHandCardTip = function updateHandCardTip() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var chairPlayerInfo = this.chairPlayerInfo;
          var showHandCardTip = !this.isChairEmpty && this.isJoinTheGame && !this.isCurPlayerChair;
          showHandCardTip = showHandCardTip && tableInfo.roomStatus >= GameConst.TexasPlay.ERoomStatus.PreFlop && tableInfo.roomStatus <= GameConst.TexasPlay.ERoomStatus.River;
          var isCover = chairPlayerInfo && this.shareSpace.texasGameData.texasClientState.coverPlayers.has(chairPlayerInfo.playerid);
          showHandCardTip = showHandCardTip && (chairPlayerInfo.handcards.length == 0 || isCover);
          showHandCardTip = showHandCardTip && chairPlayerInfo.actStatus != GameConst.TexasPlay.EActStatus.Fold && chairPlayerInfo.actStatus != -1;
          this.m_handCardTip.visible = showHandCardTip;
          if (this.m_handCardTip.visible) {
            this.m_handCardTip.alpha = 1;
            this.m_handCardTip.scaleX = 1;
            this.m_handCardTip.scaleY = 1;
            this.m_handCardTip.m_count.selectedIndex = this.shareSpace.texasGameData.handPokerCount;

            // // 左右区分
            // if (this.x <= this.parent.width / 2) {
            //     this.m_handCardTip.x = 31;
            //     this.m_handCardTip.y = 121;
            // } else {
            //     this.m_handCardTip.x = 151;
            //     this.m_handCardTip.y = 121;
            // }
            // 固定右边
            this.m_handCardTip.x = 151;
            this.m_handCardTip.y = 121;
          }
        }

        /**
         * 摊牌动作
         * @param cover 是否盖牌
         * @param finish
         * @returns
         */;
        _proto.playOpenCard = function playOpenCard(cover, finish) {
          var chairPlayerInfo = this.chairPlayerInfo;
          var showOpenCard = !this.isChairEmpty && this.isJoinTheGame && !this.isCurPlayerChair;
          showOpenCard = showOpenCard && chairPlayerInfo.handcards && chairPlayerInfo.handcards.length > 0;
          showOpenCard = showOpenCard && !cover;
          this.openCardItem.visible = showOpenCard;
          if (!showOpenCard) {
            finish();
            return;
          }
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (tableInfo.publicCards && tableInfo.publicCards.length > 0) {
            var _PokerParser$parseCar = PokerParser.parseCardType(chairPlayerInfo.handcards, tableInfo.publicCards, this.shareSpace.texasGameData.gameType),
              cardType = _PokerParser$parseCar[0],
              cardCodes = _PokerParser$parseCar[1];
            PokerParser.CardTypeStrMap.get(cardType);
          }
          this.openCardItem.setOpenCard(chairPlayerInfo.handcards);
          this.m_handCardTip.visible = false;
          this.m_cardTypeGroup.visible = false;
          tween(this.openCardItem).set({
            alpha: 0,
            scaleX: 0,
            scaleY: 0
          }).to(0.5, {
            alpha: 1,
            scaleX: 1,
            scaleY: 1
          }, {
            easing: 'backOut'
          })
          // .call(() => {
          //     // 胜率 ？
          // })
          .call(finish).start();
        };
        _proto.playChairWin = function playChairWin(score) {
          var _this3 = this;
          var targetY = 32;
          Tween.stopAllByTarget(this.m_winScore);
          if (this.shareSpace.texasGameData.tableInfo.needTimes) {
            score /= 100;
          }
          this.m_winScore.text = Utils.toFormat(score, 2, false, true);
          this.m_winScore._label.updateRenderData();
          this.m_winScore.visible = true;
          tween(this.m_winScore).set({
            y: targetY + 150,
            alpha: 0,
            scaleX: 1,
            scaleY: 1
          }).to(0.3, {
            y: targetY,
            alpha: 1
          }, {
            easing: 'backOut'
          }).delay(1.5).to(0.3, {
            scaleX: 0.2,
            scaleY: 0.2,
            alpha: 0.2
          }, {
            easing: 'quadOut'
          }).set({
            visible: false
          }).start();
          this.m_chairWin.visible = true;
          if (this.chairWinSkel) {
            this.chairWinSkel.clearTracks();
            this.chairWinSkel.setAnimation(0, 'animation', true);
          } else {
            GameConfig.bundle.load('CCRes/TexasGamePlay/Spine/ChairWin', Prefab, function (err, prefab) {
              if (!_this3.m_chairWin.node || !_this3.m_chairWin.node.isValid) return;
              if (!err && prefab) {
                var animNode = instantiate(prefab);
                animNode.name = 'chair_win_spine';
                _this3.m_chairWin.node.addChild(animNode);
                _this3.chairWinSkel = animNode.getComponent(sp.Skeleton);
                _this3.chairWinSkel.clearTracks();
                if (_this3.chairWinSkel._skeleton) {
                  _this3.chairWinSkel.setAnimation(0, 'animation', true);
                }
              }
            });
          }
        };
        _proto.playFold = function playFold(finish) {
          var pokerLayer = this.shareSpace.texasGamePage.pokerLayer;
          var targetGllobal = pokerLayer.m_dealCardPlace.localToGlobal(0, 0);
          var target = this.m_handCardTip.parent.globalToLocal(targetGllobal.x, targetGllobal.y);
          target.x += this.width / 2;
          target.y += this.height / 2;
          if (this.x <= this.parent.width / 2) {
            this.m_handCardTip.x = 11;
            this.m_handCardTip.y = 130;
          } else {
            this.m_handCardTip.x = 171;
            this.m_handCardTip.y = 130;
          }
          tween(this.m_handCardTip).set({
            visible: true
          }).to(0.3, {
            alpha: 0,
            x: target.x,
            y: target.y
          }, {
            easing: 'quadOut'
          }).set({
            visible: false
          }).call(finish).start();
        };
        _proto.playExpression = function playExpression(expressionID) {
          var _this4 = this;
          var place = this.m_expressionPlace.node;
          place.destroyAllChildren();
          GameConfig.bundle.load("CCRes/TexasGamePlay/Spine/Expression/" + GameConst.ExpressionMap[expressionID], Prefab, function (err, prefab) {
            if (!_this4.node || !_this4.node.isValid) return;
            if (!err && prefab) {
              var animNode = instantiate(prefab);
              place.addChild(animNode);
              var spine = animNode.getComponent(sp.Skeleton);
              spine.clearTracks();
              spine.setAnimation(0, 'normal', false);
              spine.setCompleteListener(function () {
                place.destroyAllChildren();
              });
            }
          });
        };
        _proto.showChatMsg = function showChatMsg(content, atIDs) {
          var _this5 = this;
          if (!this.isChairEmpty && content && content.length > 0) {
            Tween.stopAllByTarget(this.m_chatBubble);
            tween(this.m_chatBubble).delay(2.5).call(function () {
              _this5.m_chatBubble.visible = false;
            }).start();
            this.m_chatBubble.visible = true;
            var placeId = this.placeIndex;
            var count = 7;
            if (placeId == 0 || placeId == 4 || placeId == 5 || placeId == 6) {
              count = 15;
            }
            var showContent = Utils.parseMsg(content, count, 2);
            if (showContent.includes('@') && atIDs && Object.keys(atIDs).length > 0) {
              showContent = Utils.changeAtStrColor(showContent, atIDs);
            }
            this.m_labelChatMsg.text = showContent;
            this.m_labelChatMsg.ensureSizeCorrect();
            var width = this.m_labelChatMsg.width + 30;
            var height = this.m_labelChatMsg.height + 15;
            width = width > 76 ? width : 76;
            this.m_chatBubbleBg.setSize(width, height);
            this.m_chatBubbleBg.ensureSizeCorrect();
          } else {
            Tween.stopAllByTarget(this.m_chatBubble);
            this.m_chatBubble.visible = false;
          }
        }

        /**
         * 刷新椅子的状态，恢复牌局状态，座位上玩家发生变化，转完椅子，游戏开局
         */;
        _proto.updateChairState = function updateChairState() {
          if (this.shareSpace.texasGameData.isMatch && this.shareSpace.texasGameData.mttState.value == TexasMttClientState.FINISH) {
            this.m_chairState.selectedPage = 'empty';
            Tween.stopAllByTarget(this.m_chatBubble);
            this.m_chatBubble.visible = false;
          } else if (this.isChairEmpty) {
            var curPlayer = this.shareSpace.texasGameData.getCurPlayerInfo();
            var isCurPlayerInChair = curPlayer && curPlayer.chairId > 0;
            if (isCurPlayerInChair) {
              this.m_chairState.selectedPage = 'empty';
            } else if (this.shareSpace.texasGameData.isMatch) {
              this.m_chairState.selectedPage = 'empty';
            } else {
              this.m_chairState.selectedPage = 'sitdown';
            }
            this.m_expressionPlace.node.destroyAllChildren();
            Tween.stopAllByTarget(this.m_chatBubble);
            this.m_chatBubble.visible = false;
          } else {
            this.m_chairState.selectedPage = 'normal';
            var chairPlayerInfo = this.chairPlayerInfo;
            this.avatar.setContent(chairPlayerInfo.icon);
            this.m_nick.text = Utils.formatDisplayNickName(chairPlayerInfo.name);
            this.m_nick._label.updateRenderData();
          }
          this.updateSittingoutState();
          this.updatePlayerScore();
          this.updateTableScore();
          this.updateJoinState();
          this.updateHandCardTip();
          this.updateTimeProgress();
          this.updateActionTag();
          this.updateOpenCard();
          this.updateWinStatus();
          // this.forceUpdateRecursion();
        };

        _createClass(TexasPlayerItem, [{
          key: "avatar",
          get: function get() {
            return this.m_avt.component;
          }
        }, {
          key: "openCardItem",
          get: function get() {
            return this.m_openCardItem;
          }
        }, {
          key: "tableScore",
          get: function get() {
            return this.shareSpace.texasGamePage.playerLayer.tableScoreMap.get(this.placeIndex);
          }
        }, {
          key: "actionTag",
          get: function get() {
            return this.m_actionTag;
          }
        }, {
          key: "chairID",
          get: function get() {
            return this._chairID;
          }
        }, {
          key: "chairIndex",
          get: function get() {
            return this._chairIndex;
          }

          /**
           * 位置编号，总共10个位置
           */
        }, {
          key: "placeIndex",
          get: function get() {
            return TexasPositionConst.PlayerPlace[this.shareSpace.texasGameData.maxChair][this._chairIndex];
          }
        }, {
          key: "chairPlace",
          get: function get() {
            return TexasPositionConst.ChairPlace[this.placeIndex];
          }

          /**
           * 是否是没有人座位
           */
        }, {
          key: "isChairEmpty",
          get: function get() {
            return this.shareSpace.texasGameData.isChairEmpty(this._chairID);
          }

          /**
           * 椅子上的用户的玩家信息
           */
        }, {
          key: "chairPlayerInfo",
          get: function get() {
            return this.shareSpace.texasGameData.getChairPlayerInfo(this._chairID);
          }

          /**
           * 座位上是否是当前用户
           */
        }, {
          key: "isCurPlayerChair",
          get: function get() {
            var chairPlayerInfo = this.chairPlayerInfo;
            if (!chairPlayerInfo) return false;
            return chairPlayerInfo.playerid == RoleData.inst.playerID;
          }

          /**
           * 玩家是否参与了当前正在进行的牌局
           */
        }, {
          key: "isJoinTheGame",
          get: function get() {
            return this.shareSpace.texasGameData.tableInfo.gamePlayerids.includes(this.chairPlayerInfo.playerid);
          }
        }]);
        return TexasPlayerItem;
      }(UI_TexasPlayerItem), _applyDecoratedDescriptor(_class2.prototype, "onItemClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onItemClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPlayerLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_TexasPlayerLayer.ts', './CocosDevKit.ts', './TexasPlayerItem.ts', './TexasPositionConst.ts', './UI_TableScoreLeft.ts', './UI_TableScoreCenter.ts', './UI_TableScoreRight.ts', './RoleData.ts', './GameDecorators.ts', './GameConst.ts', './GameConfig.ts', './AudioManager.ts', './Logger.ts', './Utils.ts', './NodePoolExtention.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, _createClass, cclegacy, Prefab, instantiate, UITransform, v3, sp, tween, GComponent, UI_TexasPlayerLayer, TexasPlayerItem, TexasPositionConst, UI_TableScoreLeft, UI_TableScoreCenter, UI_TableScoreRight, RoleData, CustomFguiClass, GameConst, GameConfig, AudioManager, Log, Utils, GObjectPoolEx;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      v3 = module.v3;
      sp = module.sp;
      tween = module.tween;
    }, function (module) {
      GComponent = module.GComponent;
    }, function (module) {
      UI_TexasPlayerLayer = module.default;
    }, null, function (module) {
      TexasPlayerItem = module.TexasPlayerItem;
    }, function (module) {
      TexasPositionConst = module.TexasPositionConst;
    }, function (module) {
      UI_TableScoreLeft = module.default;
    }, function (module) {
      UI_TableScoreCenter = module.default;
    }, function (module) {
      UI_TableScoreRight = module.default;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      GameConfig = module.GameConfig;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GObjectPoolEx = module.GObjectPoolEx;
    }],
    execute: function () {
      var _class2;
      cclegacy._RF.push({}, "fc28fAlSrRM7JIXl2JDquxg", "TexasPlayerLayer", undefined);
      var PlayerItemPool = /*#__PURE__*/function (_GObjectPoolEx) {
        _inheritsLoose(PlayerItemPool, _GObjectPoolEx);
        function PlayerItemPool() {
          return _GObjectPoolEx.apply(this, arguments) || this;
        }
        _createClass(PlayerItemPool, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new PlayerItemPool(function () {
                return TexasPlayerItem.createInstance();
              }, 9);
            }
            return this._instance;
          }
        }]);
        return PlayerItemPool;
      }(GObjectPoolEx);
      PlayerItemPool._instance = void 0;
      var TexasPlayerLayer = exports('TexasPlayerLayer', CustomFguiClass(_class2 = /*#__PURE__*/function (_UI_TexasPlayerLayer) {
        _inheritsLoose(TexasPlayerLayer, _UI_TexasPlayerLayer);
        function TexasPlayerLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasPlayerLayer.call.apply(_UI_TexasPlayerLayer, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.playerTableScoreLayer = void 0;
          _this.chairMap = new Map();
          _this.tableScoreMap = new Map();
          _this.youWinAnim = void 0;
          return _this;
        }
        var _proto = TexasPlayerLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasPlayerLayer.prototype.onConstruct.call(this);
          if (!this.playerTableScoreLayer) {
            this.playerTableScoreLayer = new GComponent();
            this.playerTableScoreLayer.name = 'playerTableScoreLayer';
            this.addChild(this.playerTableScoreLayer);
            this.playerTableScoreLayer.width = this.width;
            this.playerTableScoreLayer.height = this.height;
            this.playerTableScoreLayer.touchable = false;
            this.playerTableScoreLayer.x = 0;
            this.playerTableScoreLayer.y = 0;
            var tableScoreConfig = TexasPositionConst.TableScorePlace;
            for (var placeIndex = 0; placeIndex < tableScoreConfig.length; placeIndex++) {
              var configItem = tableScoreConfig[placeIndex];
              var _item = void 0;
              switch (configItem[0]) {
                case TexasPositionConst.ETSS.C:
                  _item = UI_TableScoreCenter.createInstance();
                  break;
                case TexasPositionConst.ETSS.L:
                  _item = UI_TableScoreLeft.createInstance();
                  break;
                case TexasPositionConst.ETSS.R:
                  _item = UI_TableScoreRight.createInstance();
                  break;
              }
              if (_item) {
                this.playerTableScoreLayer.addChild(_item);
                _item.x = configItem[1].x;
                _item.y = configItem[1].y;
                _item.visible = false;
              }
              this.tableScoreMap.set(placeIndex, _item);
            }
          }
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
        };
        _proto.reset = function reset() {
          if (this.youWinAnim) {
            this.youWinAnim.clearTracks();
            this.youWinAnim.node.active = false;
          }
          this.chairMap.forEach(function (item, chairID) {
            PlayerItemPool.Instance.putObj(item);
          });
          this.chairMap.clear();
          this.tableScoreMap.forEach(function (item) {
            item.visible = false;
          });
        };
        _proto.createPlayerItems = function createPlayerItems() {
          if (this.chairMap.size > 0) return;
          var maxChair = this.shareSpace.texasGameData.maxChair;
          for (var chairIndex = 0; chairIndex < maxChair; chairIndex++) {
            var chairID = chairIndex + 1;
            if (!this.chairMap.has(chairID)) {
              var _item2 = PlayerItemPool.Instance.getObj();
              this.addChild(_item2);
              _item2.init(this.shareSpace);
              _item2.setChairChairID(chairID);
              _item2.setChairPlace(chairIndex);
              this.chairMap.set(chairID, _item2);
            }
          }
        }

        /**
         * 遍历所有座位
         * @param callback callback 返回 false 时跳出循环
         */;
        _proto.walkAllChair = function walkAllChair(callback) {
          for (var _iterator = _createForOfIteratorHelperLoose(this.chairMap.values()), _step; !(_step = _iterator()).done;) {
            var _item3 = _step.value;
            if (!callback(_item3)) {
              break;
            }
          }
        }

        /**
         * 更新全部座位状态
         * @param playerID
         * @param chairID
         */;
        _proto.updateChairStateAll = function updateChairStateAll() {
          for (var _iterator2 = _createForOfIteratorHelperLoose(this.chairMap.values()), _step2; !(_step2 = _iterator2()).done;) {
            var _item4 = _step2.value;
            _item4.updateChairState();
          }
        }

        /**
         * 更新座位状态
         * @param playerID
         */;
        _proto.updateChairState = function updateChairState(playerID) {
          Log.game.log('TexasPlayerLayer', 'updateChairState');
          var item = this.getItemByPlayerID(playerID);
          item == null || item.updateChairState();
        };
        _proto.getItemByChairID = function getItemByChairID(chairID) {
          if (this.chairMap.has(chairID)) {
            return this.chairMap.get(chairID);
          } else {
            Log.game.error('TexasPlayerLayer', 'getItemByChairID', '找不到座位实例', 'chairID:', chairID);
          }
        };
        _proto.getItemByPlayerID = function getItemByPlayerID(playerID) {
          for (var _iterator3 = _createForOfIteratorHelperLoose(this.chairMap.values()), _step3; !(_step3 = _iterator3()).done;) {
            var _item5 = _step3.value;
            if (!_item5.isChairEmpty && _item5.chairPlayerInfo.playerid == playerID) {
              return _item5;
            }
          }
        }

        /**
         * 转椅子但不执行动作
         */;
        _proto.updateChairIndex = function updateChairIndex() {
          var chairID = 1;
          var curInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (curInfo && curInfo.chairId > 0) {
            chairID = curInfo.chairId;
          } else {
            return;
          }
          var targetItem = this.getItemByChairID(chairID);
          var maxChair = this.shareSpace.texasGameData.maxChair;
          var d = -1; // 索引移动的方向
          var c = targetItem.chairIndex; // 索引移动的距离
          if (targetItem.chairIndex > maxChair / 2) {
            d = 1;
            c = maxChair - targetItem.chairIndex;
          }
          this.tableScoreMap.forEach(function (item) {
            item.visible = false;
          });
          for (var _iterator4 = _createForOfIteratorHelperLoose(this.chairMap.values()), _step4; !(_step4 = _iterator4()).done;) {
            var _item6 = _step4.value;
            var idx = _item6.chairIndex;
            var step = c;
            while (step > 0) {
              var toIdx = idx + d;
              if (toIdx == -1) {
                toIdx = maxChair - 1;
              } else if (toIdx == maxChair) {
                toIdx = 0;
              }
              idx = toIdx;
              --step;
            }
            _item6.setChairPlace(idx);
            _item6.updateChairState();
          }
        }

        /**
         * 将当前玩家对应的椅子转到 0 号索引
         * @param chairID
         */;
        _proto.rotateChair = function rotateChair(finish) {
          var _this2 = this;
          var chairID = 1;
          var curInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (curInfo && curInfo.chairId > 0) {
            chairID = curInfo.chairId;
          } else {
            finish();
            return;
          }
          var targetItem = this.getItemByChairID(chairID);
          var maxChair = this.shareSpace.texasGameData.maxChair;
          var d = -1; // 索引移动的方向
          var c = targetItem.chairIndex; // 索引移动的距离
          if (targetItem.chairIndex > maxChair / 2) {
            d = 1;
            c = maxChair - targetItem.chairIndex;
          }
          this.tableScoreMap.forEach(function (item) {
            item.visible = false;
          });
          if (maxChair <= 0) {
            finish();
            return;
          }
          var countter = Utils.createCounterFunction(maxChair, finish);
          var _loop = function _loop() {
            var item = _step5.value;
            var idx = item.chairIndex;
            var step = c;
            var placeList = [];
            placeList.push(TexasPositionConst.ChairPlace[item.placeIndex]);
            while (step > 0) {
              var fromIdx = idx;
              var toIdx = idx + d;
              if (toIdx == -1) {
                toIdx = maxChair - 1;
              } else if (toIdx == maxChair) {
                toIdx = 0;
              }
              var fromPlaceIndex = TexasPositionConst.PlayerPlace[maxChair][fromIdx];
              var toPlaceIndex = TexasPositionConst.PlayerPlace[maxChair][toIdx];
              while (fromPlaceIndex != toPlaceIndex) {
                fromPlaceIndex = fromPlaceIndex + d;
                if (fromPlaceIndex == -1) {
                  fromPlaceIndex = TexasPositionConst.ChairPlace.length - 1;
                } else if (fromPlaceIndex == TexasPositionConst.ChairPlace.length) {
                  fromPlaceIndex = 0;
                }
                placeList.push(TexasPositionConst.ChairPlace[fromPlaceIndex]);
              }
              idx = toIdx;
              --step;
            }
            var totalTime = 0.25 * c;
            var length = 0;
            for (var i = 0; i < placeList.length - 1; i++) {
              var fromPlace = placeList[i].clone();
              var toPlace = placeList[i + 1].clone();
              length += toPlace.subtract(fromPlace).length();
            }
            var speed = length / totalTime;
            var itemTween = tween(item);
            for (var _i = 0; _i < placeList.length - 1; _i++) {
              var _fromPlace = placeList[_i];
              var _toPlace = placeList[_i + 1];
              var time = _toPlace.clone().subtract(_fromPlace.clone()).length() / speed;
              itemTween = itemTween.set({
                x: _fromPlace.x,
                y: _fromPlace.y
              }).to(time, {
                x: _toPlace.x,
                y: _toPlace.y
              });
            }
            itemTween.call(function () {
              if (_this2.node.isValid) {
                item.setChairPlace(idx);
                countter();
              }
            }).start();
          };
          for (var _iterator5 = _createForOfIteratorHelperLoose(this.chairMap.values()), _step5; !(_step5 = _iterator5()).done;) {
            _loop();
          }
        }

        /**
         * 亮牌
         * @param showHandCardInfo
         * @param finish
         */;
        _proto.openHandCard = function openHandCard(showHandCardInfo, finish) {
          var openItems = [];
          for (var i = 0; i < showHandCardInfo.length; i++) {
            var handCardInfoItem = showHandCardInfo[i];
            var playerID = handCardInfoItem.playerid;
            if (playerID == RoleData.inst.playerID) continue;
            var playerInfo = this.shareSpace.texasGameData.getChairPlayerInfoByPlayerID(playerID);
            if (!playerInfo) continue;
            if (playerInfo.handcards.length == 0) continue;
            var _item7 = this.getItemByPlayerID(playerID);
            if (!_item7) continue;
            openItems.push([_item7, handCardInfoItem.cover]);
          }
          if (openItems.length > 0) {
            var counter = Utils.createCounterFunction(openItems.length, finish);
            for (var _i2 = 0; _i2 < openItems.length; _i2++) {
              var _openItems$_i = openItems[_i2],
                _item8 = _openItems$_i[0],
                cover = _openItems$_i[1];
              _item8.playOpenCard(cover, counter);
            }
          } else {
            finish();
          }
        };
        _proto.showYouWin = function showYouWin() {
          var _this3 = this;
          if (this.youWinAnim) {
            this.youWinAnim.node.active = true;
            this.youWinAnim.clearTracks();
            this.youWinAnim.setAnimation(0, 'normal', false);
          } else {
            GameConfig.bundle.load('CCRes/TexasGamePlay/Spine/YouWIn', Prefab, function (err, youWinPrefab) {
              if (!_this3.node || !_this3.node.isValid) return;
              if (!err && youWinPrefab) {
                var node = instantiate(youWinPrefab);
                _this3.node.addChild(node);
                var globalPlace = _this3.m_youwinPlace.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 0));
                var localPlace = _this3.node.getComponent(UITransform).convertToNodeSpaceAR(globalPlace);
                node.setPosition(localPlace);
                _this3.youWinAnim = node.getComponent(sp.Skeleton);
                _this3.youWinAnim.node.active = true;
                _this3.youWinAnim.clearTracks();
                _this3.youWinAnim.setAnimation(0, 'normal', false);
              }
            });
          }
        };
        _proto.closeYouWin = function closeYouWin() {
          if (this.youWinAnim) {
            this.youWinAnim.clearTracks();
            this.youWinAnim.node.active = false;
          }
        }

        /**
         * 展示盈利数字
         * @param msg
         * @param finish
         */;
        _proto.gameResultShowWinScore = function gameResultShowWinScore(msg, finish) {
          var showYouWin = false;
          for (var i = 0; i < msg.playerResults.length; i++) {
            var playerResult = msg.playerResults[i];
            if (!playerResult.isFold && playerResult.result == 1) {
              if (playerResult.playerid == RoleData.inst.playerID) {
                showYouWin = true;
              }
              var _item9 = this.getItemByPlayerID(playerResult.playerid);
              if (_item9) {
                _item9.playChairWin(playerResult.chip);
              }
            }
          }
          if (showYouWin) {
            this.showYouWin();
          }
          AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_WIN);
          finish();
        };
        _proto.onDestroy = function onDestroy() {
          _UI_TexasPlayerLayer.prototype.onDestroy.call(this);
          PlayerItemPool.Instance.clear();
        };
        return TexasPlayerLayer;
      }(UI_TexasPlayerLayer)) || _class2);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPlayerOpenCardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasPlayerOpenCardItem.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasPlayerOpenCardItem, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasPlayerOpenCardItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "13fdcrtNfVAmZtzsg3I6fel", "TexasPlayerOpenCardItem", undefined);
      var TexasPlayerOpenCardItem = exports('TexasPlayerOpenCardItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasPlayerOpenCa) {
        _inheritsLoose(TexasPlayerOpenCardItem, _UI_TexasPlayerOpenCa);
        function TexasPlayerOpenCardItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasPlayerOpenCa.call.apply(_UI_TexasPlayerOpenCa, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.pokers = [];
          return _this;
        }
        var _proto = TexasPlayerOpenCardItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasPlayerOpenCa.prototype.onConstruct.call(this);
          this.pokers.push(this.m_poker0);
          this.pokers.push(this.m_poker1);
          this.pokers.push(this.m_poker2);
          this.pokers.push(this.m_poker3);
          this.pokers.push(this.m_poker4);
          this.pokers.push(this.m_poker5);
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
        };
        _proto.reset = function reset() {
          for (var i = 0; i < this.pokers.length; i++) {
            var pokerLoader = this.pokers[i];
            var pokerCmpt = pokerLoader.component;
            pokerCmpt.front = false;
            pokerCmpt.gray = false;
            pokerCmpt.hightLight = false;
            pokerCmpt.showEye = false;
          }
        };
        _proto.setOpenCard = function setOpenCard(handcards, hightLightCards) {
          if (handcards && handcards.length > 0) {
            var count = handcards.length;
            this.m_cardCount.selectedIndex = count;
            for (var i = 0; i < count; i++) {
              var pokerLoader = this.pokers[i];
              var pokerCode = handcards[i];
              var pokerCmpt = pokerLoader.component;
              pokerCmpt.showEye = false;
              if (pokerCode > 0) {
                pokerCmpt.front = true;
                if (hightLightCards) {
                  var hightLight = hightLightCards.includes(pokerCode);
                  pokerCmpt.hightLight = hightLight;
                  pokerCmpt.gray = !hightLight;
                } else {
                  pokerCmpt.hightLight = false;
                  pokerCmpt.gray = false;
                }
                pokerCmpt.code = pokerCode;
              } else {
                pokerCmpt.front = false;
                pokerCmpt.hightLight = false;
                pokerCmpt.gray = false;
              }
            }
          }
        };
        return TexasPlayerOpenCardItem;
      }(UI_TexasPlayerOpenCardItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPlayShareSpace.ts", ['cc', './gameproto.mjs_cjs=&original=.js', './CocosDevKit.ts', './TexasGameData.ts', './GameConst.ts', './RoleData.ts', './LobbyPage.ts', './LanguageManage.ts', './OnError.ts', './AudioManager.ts', './Logger.ts', './gameproto.js', './Utils.ts'], function (exports) {
  var cclegacy, TexasMttClientState, GameConst, RoleData, LobbyPage, LanguageManager, OnError, AudioManager, Log, _cjsExports, Utils;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      TexasMttClientState = module.TexasMttClientState;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      LobbyPage = module.LobbyPage;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      OnError = module.OnError;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c18e5ES0qdLWYoLtb2oUJF6", "TexasPlayShareSpace", undefined);

      /**
       * 执行队列，支持暂停和恢复
       */
      var ExecutionQueue = exports('ExecutionQueue', /*#__PURE__*/function () {
        function ExecutionQueue() {
          this.queue = [];
          this._pause = false;
        }
        var _proto = ExecutionQueue.prototype;
        _proto.isPause = function isPause() {
          return this._pause;
        };
        _proto.pause = function pause() {
          if (!this._pause) {
            this._pause = true;
            Log.game.log('ExecutionQueue', 'pause');
          }
        };
        _proto.resume = function resume() {
          if (this._pause) {
            this._pause = false;
            Log.game.log('ExecutionQueue', 'resume');
            this.executQueue();
          }
        };
        _proto.reset = function reset() {
          Log.game.log('ExecutionQueue', 'reset');
          this.queue.length = 0;
          this._pause = false;
        };
        _proto.destroy = function destroy() {
          Log.game.log('ExecutionQueue', 'destroy');
          this.queue.length = 0;
          this._pause = false;
        };
        _proto.push = function push(execution) {
          // Log.game.log('ExecutionQueue', 'push');
          this.queue.push(execution);
          this.executQueue();
        };
        _proto.executQueue = function executQueue() {
          while (!this._pause && this.queue.length > 0) {
            // Log.game.log('ExecutionQueue', 'executQueue');
            var execution = this.queue.shift();
            try {
              execution();
            } catch (error) {
              Log.game.error(error);
              OnError.cache(error);
            }
          }
        };
        return ExecutionQueue;
      }());
      var TexasPlayShareSpace = exports('TexasPlayShareSpace', /*#__PURE__*/function () {
        function TexasPlayShareSpace(gameLogicDrive) {
          /**
           * 游戏逻辑驱动器，网络消息触发的游戏逻辑 push 进来对游戏逻辑进行驱动，游戏逻辑在执行时可以对驱动器进行暂停和恢复
           */
          this.texasLogicDrive = void 0;
          this.texasGameData = void 0;
          this.texasChatData = void 0;
          this.texasProxy = void 0;
          this.roomProxy = void 0;
          this.chatProxy = void 0;
          this.mttProxy = void 0;
          this.texasGamePage = void 0;
          this.gameResultWaitTimeout = void 0;
          this.texasLogicDrive = gameLogicDrive;
        }
        var _proto2 = TexasPlayShareSpace.prototype;
        _proto2.pauseGameLogicDrive = function pauseGameLogicDrive() {
          this.texasLogicDrive.pause();
        };
        _proto2.resumeGameLogicDrive = function resumeGameLogicDrive() {
          this.texasLogicDrive.resume();
        };
        _proto2.reset = function reset(resetMttState) {
          if (resetMttState === void 0) {
            resetMttState = true;
          }
          Log.game.log('TexasPlayShareSpace', 'reset', 'resetMttState:', resetMttState);
          this.texasLogicDrive.reset();
          this.texasProxy.reset();
          this.roomProxy.reset();
          this.chatProxy.reset();
          this.mttProxy.reset();
          this.texasGameData.reset(resetMttState);
          this.texasChatData.reset();
          this.texasGamePage.reset();
          this.clearGameResultWaitTimer();
          // ConfirmBox.disposAll();
        };

        _proto2.destroy = function destroy() {
          Log.game.log('TexasPlayShareSpace', 'destroy');
          this.texasLogicDrive.destroy();
          this.texasProxy.destroy();
          this.roomProxy.destroy();
          this.chatProxy.destroy();
          this.mttProxy.destroy();
          this.clearGameResultWaitTimer();
        };
        _proto2.closeRoom = function closeRoom() {
          // todo 将来多桌需要判断是不是要切回大厅
          Log.game.log('TexasPlayShareSpace', 'closeRoom');
          this.reset();
          this.destroy();
          LobbyPage.create(this.texasGamePage).showOn(this.texasGamePage.grootInst);
        };
        _proto2.onMatchJoin = function onMatchJoin(netdata) {
          var msg = netdata.getData(_cjsExports.mtt.MsgJoinMttRsp);
          Log.game.log('TexasPlayShareSpace', 'onMatchJoin', msg.mttid);
          if (netdata.isRetSuccess()) {
            this.texasGamePage.onMatchJoin(msg.mttid);
          } else {
            this.reset();
            this.texasGamePage.showExitConfirmBox(LanguageManager.get('CCS_TXT_332'));
          }
        };
        _proto2.onRoomEnter = function onRoomEnter(netdata) {
          var msg = netdata.getData(_cjsExports.texas.MsgEnterRoomRsp);
          Log.game.log('TexasPlayShareSpace', 'onRoomEnter', msg);
          // do something
          if (netdata.isRetSuccess()) {
            this.texasGamePage.onRoomEnter(msg.roomId);
          } else {
            this.reset();
            this.texasGamePage.showExitConfirmBox(LanguageManager.get('TXT_1211'));
          }
        };
        _proto2.playerEnter = function playerEnter(msg) {
          Log.game.log('TexasPlayShareSpace', 'playerEnter', 'roomID:', msg.roomId, 'playerID:', msg.player.playerid);
          this.texasGameData.playerEnter(msg.player);
          this.texasGamePage.playerEnter(msg);
        };
        _proto2.playerLeave = function playerLeave(msg) {
          Log.game.log('TexasPlayShareSpace', 'playerLeave', 'roomID:', msg.roomId, 'playerID:', msg.playerid);
          this.texasGameData.playerLeave(msg.playerid);
          this.texasGamePage.playerLeave(msg);
        };
        _proto2.playerSitdown = function playerSitdown(msg) {
          Log.game.log('TexasPlayShareSpace', 'playerSitdown', 'roomID:', msg.roomId, 'playerid:', msg.playerid, 'chairID:', msg.chairId);
          this.texasGameData.playerSitdown(msg.playerid, msg.chairId);
          this.texasGamePage.playerSitdown(msg);
        };
        _proto2.playerStandup = function playerStandup(msg) {
          Log.game.log('TexasPlayShareSpace', 'playerStandup', 'roomID:', msg.roomId, 'playerID:', msg.playerid, 'chairID:', msg.chairId, 'reason:', msg.reason);
          this.texasGameData.playerStandup(msg.playerid, msg.chairId);
          this.texasGamePage.playerStandup(msg);
        };
        _proto2.onMsgJoinGameRsp = function onMsgJoinGameRsp(msg) {
          var _this = this;
          this.texasGamePage.operatorLayer.immediatelyEnterState = true;
          this.pauseGameLogicDrive();
          this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
            _this.resumeGameLogicDrive();
          });
          this.texasGamePage.grootInst.showCenterTip(LanguageManager.get('TXT_1914'));
        };
        _proto2.playerAfkState = function playerAfkState(msg) {
          var _this2 = this;
          Log.game.log('TexasPlayShareSpace', 'playerAfkState', msg);
          var playerInfo = this.texasGameData.getRoomPlayerInfo(msg.playerid); // 通知托管的不一定是在座位上的玩家
          if (playerInfo) {
            playerInfo.isLeftback = msg.afkState;
          }
          playerInfo = this.texasGameData.getChairPlayerInfoByPlayerID(msg.playerid);
          if (playerInfo) {
            playerInfo.isLeftback = msg.afkState;
          }
          this.texasGamePage.playerLayer.updateChairState(msg.playerid);
          if (msg.playerid == RoleData.inst.playerID) {
            this.pauseGameLogicDrive();
            this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this2.resumeGameLogicDrive();
            });
          }
        };
        _proto2.onMsgPreOprationRsp = function onMsgPreOprationRsp(msg) {
          var _this3 = this;
          if (this.texasGameData.tableInfo) {
            this.texasGameData.tableInfo.preOprType = msg.type;
            this.pauseGameLogicDrive();
            this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this3.resumeGameLogicDrive();
            });
          }
        };
        _proto2.onMsgActionRemainTimeCast = function onMsgActionRemainTimeCast(msg) {
          var _this4 = this;
          var curActionPlayer = this.texasGameData.tableInfo.curActionPlayer;
          if (curActionPlayer.playerid == msg.playerid) {
            curActionPlayer.boughtLeftTimeTimes++;
            curActionPlayer.actionFinishTime = msg.actionFinishTime;
            this.texasGamePage.playerLayer.updateChairState(msg.playerid);
            if (msg.playerid == RoleData.inst.playerID) {
              this.pauseGameLogicDrive();
              this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
                _this4.resumeGameLogicDrive();
              });
            }
          }
        };
        _proto2.onMsgActionTimeProtectCast = function onMsgActionTimeProtectCast(msg) {
          var curActionPlayer = this.texasGameData.tableInfo.curActionPlayer;
          if (curActionPlayer.playerid == msg.playerid) {
            curActionPlayer.actionFinishTime = msg.actionFinishTime;
            // @ts-ignore
            curActionPlayer.disConnectProtect = true;
            this.texasGamePage.playerLayer.updateChairState(curActionPlayer.playerid);
            if (curActionPlayer.playerid == RoleData.inst.playerID) {
              this.texasGamePage.tipLayer.showCommonTip(LanguageManager.get('TXT_1101'));
            }
          }
        };
        _proto2.onMsgOpenHandCardRsp = function onMsgOpenHandCardRsp(cardIndex, show) {
          var tableInfo = this.texasGameData.tableInfo;
          if (show) {
            if (!tableInfo.openCards.includes(cardIndex)) {
              tableInfo.openCards.push(cardIndex);
            }
          } else {
            if (tableInfo.openCards.includes(cardIndex)) {
              var idx = tableInfo.openCards.indexOf(cardIndex);
              tableInfo.openCards.splice(idx, 1);
            }
          }
          this.texasGamePage.pokerLayer.updatePokerLayer();
        };
        _proto2.onPlayerAddChip = function onPlayerAddChip(msg) {
          var _this5 = this;
          Log.game.log('TexasPlayShareSpace', 'onPlayerAddChip', msg);
          var playerInfo = this.texasGameData.getRoomPlayerInfo(msg.playerid);
          if (playerInfo) {
            playerInfo.chip = msg.chip;
          }
          playerInfo = this.texasGameData.getChairPlayerInfoByPlayerID(msg.playerid);
          if (playerInfo) {
            playerInfo.chip = msg.chip;
          }
          this.texasGamePage.playerLayer.updateChairState(msg.playerid);
          if (msg.playerid == RoleData.inst.playerID) {
            this.pauseGameLogicDrive();
            this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this5.resumeGameLogicDrive();
            });
            this.texasGamePage.popupLayer.updateTexasPopup();
          }
        }
        /**
         * 主池边池变化广播
         * @param msg
         */;
        _proto2.onMsgSidePotsCast = function onMsgSidePotsCast(msg) {
          var _this6 = this;
          Log.game.log('TexasPlayShareSpace', 'onMsgSidePotsCast', msg);
          // this.texasGameData
          this.texasGameData.onMsgSidePotsCast(msg);
          if (this.texasGameData.tableInfo.pot > 0) {
            this.pauseGameLogicDrive();
            this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this6.texasGamePage.chipActionLayer.tableChipToPot(function () {
                _this6.texasGamePage.tableLayer.updateMainPot();
                _this6.texasGamePage.tableLayer.updateSidePot();
                _this6.texasGamePage.playerLayer.updateChairStateAll();
                _this6.resumeGameLogicDrive();
              });
            });
          } else {
            this.texasGamePage.tableLayer.updateMainPot();
            this.texasGamePage.tableLayer.updateSidePot();
            this.texasGamePage.playerLayer.updateChairStateAll();
            this.pauseGameLogicDrive();
            this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this6.resumeGameLogicDrive();
            });
          }
          // todo 边池信息
        };

        _proto2.onMsgHandCardsCast = function onMsgHandCardsCast(msg) {
          var _this7 = this;
          Log.game.log('TexasPlayShareSpace', 'onMsgHandCardsCast', msg);
          this.texasGameData.tableInfo.handcards = msg.handcards;
          this.texasGameData.texasClientState.parseCurPlayerCardType(this.texasGameData.tableInfo, this.texasGameData.gameType);
          this.pauseGameLogicDrive();
          this.texasGamePage.pokerLayer.dealHandPoker(function () {
            _this7.texasGamePage.pokerLayer.updatePokerLayer();
            _this7.texasGamePage.popupLayer.updateTexasPopup();
            _this7.resumeGameLogicDrive();
          });
        }

        /**
         * 处理玩家下注后跟注值发生变化会使原来的预操作取消的情况
         * @param betInfo
         * @returns
         */;
        _proto2.handlerPreOperatorCancel = function handlerPreOperatorCancel(betInfo) {
          var tableInfo = this.texasGameData.tableInfo;
          if (!tableInfo.gamePlayerids.includes(RoleData.inst.playerID)) return;
          if (betInfo.playerid == RoleData.inst.playerID) {
            tableInfo.preOprType = GameConst.TexasPlay.EPreOperationType.Cancel;
            return;
          }
          if (tableInfo.preOprType == GameConst.TexasPlay.EPreOperationType.Call || tableInfo.preOprType == GameConst.TexasPlay.EPreOperationType.AutoCheck) {
            var max = 0;
            for (var i = 0; i < tableInfo.gamePlayerids.length; i++) {
              var playerid = tableInfo.gamePlayerids[i];
              var playerInfo = this.texasGameData.getChairPlayerInfoByPlayerID(playerid);
              if (playerInfo && playerInfo.tableChip > max) {
                max = playerInfo.tableChip;
              }
            }
            if (betInfo.tableChip > max) {
              tableInfo.preOprType = GameConst.TexasPlay.EPreOperationType.Cancel;
            }
          }
        }

        /**
         * 下前注
         * @param betInfo
         */;
        _proto2.onPlayerAnte = function onPlayerAnte(betInfo) {
          Log.game.log('TexasPlayShareSpace', 'onPlayerAnte', betInfo);
          var tableInfo = this.texasGameData.tableInfo;
          var playerInfo = this.texasGameData.getChairPlayerInfoByPlayerID(betInfo.playerid);
          if (playerInfo) {
            playerInfo.chip = betInfo.chip;
            playerInfo.tableChip = betInfo.tableChip;
            playerInfo.actStatus = betInfo.actStatus;
          }
          tableInfo.curActionPlayer.playerid = 0;
          tableInfo.pot = betInfo.pot;
          tableInfo.gameNum = betInfo.gameNum;
          this.texasGamePage.playerLayer.updateChairState(betInfo.playerid);
          this.texasGamePage.tableLayer.updateMainPot();
        }

        /**
         * 下盲注
         * @param betInfo
         */;
        _proto2.onPlayerBlind = function onPlayerBlind(betInfo) {
          var _this8 = this;
          Log.game.log('TexasPlayShareSpace', 'onPlayerBlind', betInfo);
          this.handlerPreOperatorCancel(betInfo);
          var tableInfo = this.texasGameData.tableInfo;
          var playerInfo = this.texasGameData.getChairPlayerInfoByPlayerID(betInfo.playerid);
          if (playerInfo) {
            playerInfo.chip = betInfo.chip;
            playerInfo.tableChip = betInfo.tableChip;
            if (playerInfo.chairId == tableInfo.sbChairId) {
              playerInfo.actStatus = GameConst.TexasPlay.EActStatus.SB;
            } else if (playerInfo.chairId == tableInfo.bbChairId) {
              playerInfo.actStatus = GameConst.TexasPlay.EActStatus.BB;
            }
          }
          tableInfo.curActionPlayer.playerid = 0;
          tableInfo.pot = betInfo.pot;
          tableInfo.gameNum = betInfo.gameNum;
          this.pauseGameLogicDrive();
          this.texasGamePage.chipActionLayer.playerBet(betInfo, function () {
            _this8.texasGamePage.playerLayer.updateChairState(betInfo.playerid);
            _this8.texasGamePage.tableLayer.updateMainPot();
            _this8.resumeGameLogicDrive();
          });
          AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_CHIP_TO_TABLE);
          // this.texasGamePage.operatorLayer.updateOperatorLayerStatus(() => {
          // });
        }

        /**
         * 玩家游戏中下注
         * @param betInfo
         */;
        _proto2.onPlayerBet = function onPlayerBet(betInfo) {
          var _this9 = this;
          Log.game.log('TexasPlayShareSpace', 'onPlayerBet', betInfo);
          this.handlerPreOperatorCancel(betInfo);
          var tableInfo = this.texasGameData.tableInfo;
          var playerInfo = this.texasGameData.getChairPlayerInfoByPlayerID(betInfo.playerid);
          if (!playerInfo) {
            return;
          }
          playerInfo.actStatus = betInfo.actStatus;
          playerInfo.tableChip = betInfo.tableChip;
          playerInfo.chip = betInfo.chip;
          if (betInfo.playerid == tableInfo.curActionPlayer.playerid) {
            tableInfo.curActionPlayer.playerid = 0;
          }
          tableInfo.pot = betInfo.pot;
          tableInfo.gameNum = betInfo.gameNum;
          if (playerInfo.playerid == RoleData.inst.playerID) {
            this.texasGamePage.operatorLayer.closeFoldConfirmBox();
          }
          switch (betInfo.actType) {
            case GameConst.TexasPlay.EActType.Fold:
              this.pauseGameLogicDrive();
              this.texasGamePage.playerFold(betInfo, function () {
                _this9.texasGamePage.playerLayer.updateChairState(betInfo.playerid);
                _this9.texasGamePage.pokerLayer.updatePokerLayer();
                _this9.texasGamePage.popupLayer.updateTexasPopup();
                _this9.texasGamePage.tableLayer.updateMainPot();
                _this9.resumeGameLogicDrive();
              });
              AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_FOLD);

              // this.texasGamePage.operatorLayer.updateOperatorLayerStatus(() => {
              // });
              break;
            case GameConst.TexasPlay.EActType.AllIn:
            case GameConst.TexasPlay.EActType.Call:
            case GameConst.TexasPlay.EActType.Raise:
              this.pauseGameLogicDrive();
              this.texasGamePage.chipActionLayer.playerBet(betInfo, function () {
                _this9.texasGamePage.playerLayer.updateChairState(betInfo.playerid);
                _this9.texasGamePage.tableLayer.updateMainPot();
                _this9.resumeGameLogicDrive();
              });
              AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_CHIP_TO_TABLE);
              // this.texasGamePage.operatorLayer.updateOperatorLayerStatus(() => {
              // });
              break;
            case GameConst.TexasPlay.EActType.Check:
              AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_CHEAK);
              break;
            default:
              this.texasGamePage.playerLayer.updateChairState(betInfo.playerid);
              this.texasGamePage.tableLayer.updateMainPot();
              // this.pauseGameLogicDrive();
              // this.texasGamePage.operatorLayer.updateOperatorLayerStatus(() => {
              //     this.resumeGameLogicDrive();
              // });
              break;
          }

          // do something
        };

        _proto2.startGameResultWaitTimer = function startGameResultWaitTimer(waitTime) {
          Log.game.log('TexasPlayShareSpace', 'startGameResultWaitTimer', waitTime);
          if (this.gameResultWaitTimeout) {
            this.gameResultWaitTimeout.stop();
          }
          this.gameResultWaitTimeout = this.texasGamePage.setTimeout(this.onGameResultWaitTimeout.bind(this), waitTime / 1000);
        };
        _proto2.clearGameResultWaitTimer = function clearGameResultWaitTimer() {
          if (this.gameResultWaitTimeout) {
            this.gameResultWaitTimeout.stop();
          }
          this.gameResultWaitTimeout = undefined;
        };
        _proto2.onGameResultWaitTimeout = function onGameResultWaitTimeout() {
          var _this10 = this;
          Log.game.log('TexasPlayShareSpace', 'onGameResultWaitTimeout');
          this.gameResultWaitTimeout = undefined;
          this.texasGameData.tableInfo.roomStatus = GameConst.TexasPlay.ERoomStatus.Finish;
          this.texasGamePage.pokerLayer.updatePokerLayer();
          this.texasGamePage.popupLayer.updateTexasPopup();
          this.texasGamePage.tableLayer.updateTableState();
          this.texasGamePage.playerLayer.updateChairStateAll();
          this.texasGamePage.playerLayer.closeYouWin();
          this.pauseGameLogicDrive();
          this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
            _this10.resumeGameLogicDrive();
          });
        }

        /**
         * 桌子信息广播
         * @param msg
         */;
        _proto2.onMsgTexasTableInfoCast = function onMsgTexasTableInfoCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMsgTexasTableInfoCast', msg);
          var texasGameData = this.texasGameData;
          var tableInfo = msg.info;
          texasGameData.texasClientState.isCardOpened = false;
          texasGameData.texasClientState.allinOuts.clear();
          texasGameData.texasClientState.allinWinRate.clear();
          texasGameData.texasClientState.coverPlayers.clear();
          texasGameData.tableInfo = tableInfo;
          this.clearGameResultWaitTimer();
          this.texasGamePage.playerLayer.closeYouWin();
          if (texasGameData.isRestore) {
            texasGameData.isRestore = false;
            // 如果是重置牌局状态就不必执行开局发手牌动作，直接同步所有状态
            this.texasGamePage.syncRoomStatu(msg);
            var curPlayerInfo = texasGameData.getCurPlayerInfo();
            var chipMin = tableInfo.rule.chipMin;
            var roleChip;
            if (texasGameData.costType == GameConst.EGameCostType.gold) {
              roleChip = RoleData.inst.chip;
            } else if (texasGameData.costType == GameConst.EGameCostType.cash) {
              roleChip = RoleData.inst.cash;
            }
            if (texasGameData.isMatch) ;else {
              if (curPlayerInfo) {
                var addChipEndTime = curPlayerInfo.addChipLeftTime;
                var addChipLeftTime = addChipEndTime - Utils.curServerTimeSecondstamp;
                if (addChipLeftTime > 0) {
                  if (curPlayerInfo.chip == 0 && roleChip < chipMin) {
                    // 金币或现金不够最小买入了
                    this.texasGamePage.grootInst.showCenterTip(LanguageManager.get('TXT_1222'));
                    this.roomProxy.standup();
                  } else {
                    this.texasGamePage.popupLayer.showBuyin(true, addChipEndTime);
                  }
                }
              } else {
                // 自动坐下
                var chairID = 0;
                for (var i = 1; i <= texasGameData.maxChair; i++) {
                  if (!texasGameData.getChairPlayerInfo(i)) {
                    chairID = i;
                    break;
                  }
                }
                if (chairID > 0) {
                  // 判断是否满足最小买入
                  if (roleChip < chipMin) {
                    // 金币或现金不够最小买入了
                    this.texasGamePage.grootInst.showCenterTip(LanguageManager.get('TXT_1222'));
                  } else {
                    if (this.texasGameData.texasClientState.autoSitdown) {
                      this.roomProxy.sitdown(chairID);
                    }
                  }
                }
              }
            }
            if (msg.info.roomStatus == GameConst.TexasPlay.ERoomStatus.Result) {
              var waitTime = msg.info.waitTime * 1000 - Utils.curServerTimestamp;
              if (waitTime > 0) {
                this.startGameResultWaitTimer(waitTime + 2000);
              }
            }
          } else if (msg.info.roomStatus == GameConst.TexasPlay.ERoomStatus.PreFlop) {
            // 正常开局在通知完主池边池信息和前注信息后会通知一个桌子信息，正常情况下牌局状态应该是 PreFlop
            if (this.texasGameData.isMatch) {
              this.texasGameData.mttState.setEmpty();
            }
            this.texasGamePage.gameStart(msg);
          } else {
            Log.game.error('TexasPlayShareSpace', 'onMsgTexasTableInfoCast', '既不是同步牌局状态的情况，牌局状态也不是 PreFlop，请检查一下是不是有什么问题');
          }
        };
        _proto2.onMsgNotifyPlayerAddChipCast = function onMsgNotifyPlayerAddChipCast(msg) {
          var tableInfo = this.texasGameData.tableInfo;
          if (!tableInfo) return;
          var curPlayerInfo = this.texasGameData.getCurPlayerInfo();
          if (!curPlayerInfo) return;
          var chipMax = tableInfo.rule.chipMax;
          var chipMin = tableInfo.rule.chipMin;
          var roleChip;
          if (this.texasGameData.costType == GameConst.EGameCostType.gold) {
            roleChip = RoleData.inst.chip;
            if (tableInfo.needTimes) {
              chipMax *= 100;
              chipMin *= 100;
              roleChip *= 100;
            }
          } else if (this.texasGameData.costType == GameConst.EGameCostType.cash) {
            roleChip = RoleData.inst.cash;
            if (tableInfo.needTimes) {
              chipMax *= 100;
              chipMin *= 100;
              roleChip *= 100;
            }
          }
          var maxApply = Math.min(chipMax - curPlayerInfo.chip, roleChip);
          var minApply = Math.max(chipMin - curPlayerInfo.chip, 0);
          if (roleChip < minApply) {
            // 金币或现金不够最小买入了
            this.texasGamePage.grootInst.showCenterTip(LanguageManager.get('TXT_1222'));
            return;
          }
          if (maxApply <= 0) {
            // 筹码已经多过最大买入，不能再加了
            this.texasGamePage.grootInst.showCenterTip(LanguageManager.get('TXT_937'));
            return;
          }
          var addChipEndTime = msg.leftTime;
          var addChipLeftTime = addChipEndTime - Utils.curServerTimeSecondstamp;
          if (addChipLeftTime > 0) {
            this.texasGamePage.popupLayer.showBuyin(true, addChipEndTime);
          }
        }

        /**
         * 指示下一个行动的玩家广播
         * @param msg
         */;
        _proto2.onMsgNextActionPlayerCast = function onMsgNextActionPlayerCast(msg) {
          var _this11 = this;
          Log.game.log('TexasPlayShareSpace', 'onMsgNextActionPlayerCast', msg);
          this.texasGameData.tableInfo.curActionPlayer = msg;
          // 设置玩家思考倒计时；
          this.texasGamePage.playerLayer.updateChairStateAll();
          this.pauseGameLogicDrive();
          this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
            _this11.resumeGameLogicDrive();
          }, msg.playerid == RoleData.inst.playerID);
        }

        /**
         * 发公共牌广播
         * @param msg
         */;
        _proto2.onMsgPublicCardsCast = function onMsgPublicCardsCast(msg) {
          var _this12 = this;
          Log.game.log('TexasPlayShareSpace', 'onMsgPublicCardsCast', msg.publicCards);
          this.texasGameData.tableInfo.publicCards = msg.publicCards;
          this.texasGameData.tableInfo.publicCards_2 = msg.publicCards_2;
          this.texasGameData.texasClientState.parseCurPlayerCardType(this.texasGameData.tableInfo, this.texasGameData.gameType);
          if (this.texasGameData.texasRule.multiTimes) ;else if (this.texasGameData.texasRule.doubleCards) ;else {
            if (msg.publicCards.length == 3) {
              this.texasGameData.tableInfo.roomStatus = GameConst.TexasPlay.ERoomStatus.Flop;
            } else if (msg.publicCards.length == 4) {
              this.texasGameData.tableInfo.roomStatus = GameConst.TexasPlay.ERoomStatus.Turn;
            } else {
              this.texasGameData.tableInfo.roomStatus = GameConst.TexasPlay.ERoomStatus.River;
            }
            this.pauseGameLogicDrive();
            this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
              _this12.texasGamePage.pokerLayer.dealPublicPoker(function () {
                _this12.texasGamePage.pokerLayer.updatePokerLayer();
                // 更新胜率
                _this12.texasGamePage.playerLayer.updateChairStateAll();
                _this12.texasGamePage.popupLayer.updateTexasPopup();
                _this12.resumeGameLogicDrive();
              });
            });
          }
        }

        /**
         * @param msg 使用了兔子相机
         */;
        _proto2.onMsgRabbitActionCast = function onMsgRabbitActionCast(msg) {
          var _this13 = this;
          Log.game.log('TexasPlayShareSpace', 'onMsgPublicCardsCast', msg.cards);
          var tableInfo = this.texasGameData.tableInfo;
          tableInfo.publicCards = tableInfo.publicCards.concat(msg.cards);
          tableInfo.publicCards_2 = tableInfo.publicCards_2.concat(msg.cards_2);
          this.texasGamePage.pokerLayer.updateRabbitCamera();
          var playerInfo = this.texasGameData.getRoomPlayerInfo(msg.playerid);
          if (msg.playerid != RoleData.inst.playerID && playerInfo) {
            this.texasGamePage.grootInst.showCenterTip(Utils.formatStr(LanguageManager.get('UP_3'), playerInfo.name));
          }
          this.pauseGameLogicDrive();
          this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
            _this13.texasGamePage.pokerLayer.dealPublicPoker(function () {
              _this13.texasGamePage.pokerLayer.updatePokerLayer();
              _this13.texasGamePage.popupLayer.updateTexasPopup();
              _this13.resumeGameLogicDrive();
            }, true);
          });
        }

        /**
         * 摊牌广播
         * @param msg
         */;
        _proto2.onMsgOpenHandCardCast = function onMsgOpenHandCardCast(msg) {
          var _this14 = this;
          Log.game.log('TexasPlayShareSpace', 'onMsgOpenHandCardCast', 'fffffffffff', msg);
          this.texasGameData.texasClientState.isCardOpened = true;
          for (var i = 0; i < msg.handCard.length; i++) {
            var player = msg.handCard[i];
            var playerInfo = this.texasGameData.getChairPlayerInfoByPlayerID(player.playerid);
            if (playerInfo) {
              playerInfo.handcards = player.handcards;
              if (player.cover) {
                this.texasGameData.texasClientState.coverPlayers.add(player.playerid);
                this.texasGamePage.playerLayer.updateChairState(player.playerid);
              }
            }
          }
          this.pauseGameLogicDrive();
          this.texasGamePage.playerLayer.openHandCard(msg.handCard, function () {
            _this14.resumeGameLogicDrive();
          });
        }

        /**
         * 亮牌广播
         * @param msg
         */;
        _proto2.onMsgShowHandCardCast = function onMsgShowHandCardCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMsgShowHandCardCast', msg);
          if (msg.handCard.playerid == RoleData.inst.playerID) return;
          var playerInfo = this.texasGameData.getChairPlayerInfoByPlayerID(msg.handCard.playerid);
          if (playerInfo) {
            playerInfo.handcards = playerInfo.handcards.concat(msg.handCard.handcards);
          }
          var playerItem = this.texasGamePage.playerLayer.getItemByPlayerID(msg.handCard.playerid);
          if (playerItem) {
            playerItem.updateChairState();
          }
        }

        /**
         * 结算广播
         * @param msg
         */;
        _proto2.onMsgGameResultCast = function onMsgGameResultCast(msg) {
          var _this15 = this;
          Log.game.log('TexasPlayShareSpace', 'onMsgGameResultCast', msg);
          for (var i = 0; i < msg.playerResults.length; i++) {
            var playerResult = msg.playerResults[i];
            var playerinfo = this.texasGameData.getChairPlayerInfoByPlayerID(playerResult.playerid);
            if (playerinfo) {
              playerinfo.tableChip = 0;
              playerinfo.chip = playerResult.leftchip;
            }
          }
          this.clearGameResultWaitTimer();
          this.texasGameData.gameResult = msg;
          this.texasGameData.tableInfo.pot = 0;
          this.texasGameData.tableInfo.sidePot = [];
          this.texasGameData.tableInfo.roomStatus = GameConst.TexasPlay.ERoomStatus.Result;
          this.pauseGameLogicDrive();
          this.texasGamePage.operatorLayer.updateOperatorLayerStatus(function () {
            _this15.texasGamePage.gameResult(msg, function () {
              // todo 结算的其他动作
              _this15.texasGamePage.playerLayer.updateChairStateAll();
              _this15.texasGamePage.tableLayer.updateTableState();
              _this15.texasGamePage.pokerLayer.updatePokerLayer();
              _this15.texasGamePage.popupLayer.updateTexasPopup();
              if (msg.wait) {
                var waitTime = msg.waitTime * 1000 - Utils.curServerTimestamp;
                if (waitTime > 0) {
                  _this15.startGameResultWaitTimer(waitTime + 2000);
                }
              }
              _this15.resumeGameLogicDrive();
            });
          });
        }

        /**
         * 桌子关闭
         * @param msg
         */;
        _proto2.onMsgTableCloseCast = function onMsgTableCloseCast(msg) {
          if (this.texasGameData.isMatch) return;
          Log.game.log('TexasPlayShareSpace', 'onMsgTableCloseCast', msg);
          this.reset();
          this.texasGamePage.showExitConfirmBox(LanguageManager.get('TXT_1211'));
        }

        /**
         *表情
         * @param msg
         */;
        _proto2.onChatExpression = function onChatExpression(msg) {
          var playerItem = this.texasGamePage.playerLayer.getItemByPlayerID(msg.userID);
          if (playerItem) {
            var expressionID = parseInt(msg.content);
            playerItem.playExpression(expressionID);
          }
        }

        // ************************ MTT ***************************
        ;

        _proto2.onMttGameRoomIdCast = function onMttGameRoomIdCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttGameRoomIdCast', msg);
          if (msg.roomId == this.texasGameData.mttId) {
            // 空桌
            this.reset(false);
            this.texasGameData.mttState.setWaitTable();
            this.texasGamePage.mttWaitTipLayer.updateLayer();
            // this.texasGamePage.mttTipLayer.showWaitTable();
          } else {
            this.texasGameData.setRoomID(msg.roomId);
            if (msg.state == 4) {
              this.texasGameData.setLookonState(false);
            } else if (msg.state == 8) {
              this.texasGameData.setLookonState(true);
            }
            this.reset(false);
            if (this.texasGameData.mttState.value == TexasMttClientState.WAITING_FOR_TABLE_ASSIGNMENT) {
              this.texasGameData.mttState.setEmpty();
            }
            this.texasProxy.enterRoom(true);
          }
        };
        _proto2.onMttWaitCast = function onMttWaitCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttWaitCast', msg);
          this.texasGameData.mttState.onMsgWaitCast(msg);
          this.texasGamePage.mttWaitTipLayer.updateLayer();
        };
        _proto2.onMttAddOnCast = function onMttAddOnCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttAddOnCast', msg);
          this.texasGameData.mttState.onMsgAddonOrBreakCast(msg);
          this.texasGamePage.menuLayer.updateGameMenuStatus();
          this.texasGamePage.mttWaitTipLayer.updateLayer();

          // 进房间之后只弹出一次 addon
          if (!this.texasGameData.texasClientState.addonPopupFlag) {
            this.texasGamePage.popupLayer.showAddOn();
            this.texasGameData.texasClientState.addonPopupFlag = true;
          }
          this.texasGamePage.tableLayer.updateTableState();
        };
        _proto2.onMttBreakCast = function onMttBreakCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttBreakCast', msg);
          this.texasGameData.mttState.onMsgAddonOrBreakCast(msg);
          this.texasGamePage.mttWaitTipLayer.updateLayer();
          this.texasGamePage.tableLayer.updateTableState();
        };
        _proto2.onMttRebuyInfoCast = function onMttRebuyInfoCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttRebuyInfoCast', msg);
          this.texasGameData.mttState.onMsgRebuyInfoCast(msg);
          this.reset(false);
          this.texasGamePage.popupLayer.showPassiveRebuy(msg.leftTime);
        };
        _proto2.onMttRoomInfoCast = function onMttRoomInfoCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttRoomInfoCast', msg);
          var showTip = msg.gameinfo.bigblind > 0;
          showTip = showTip && this.texasGameData.mttInfo.gameinfo.blindround < msg.gameinfo.blindround;
          showTip = showTip && (this.texasGameData.mttInfo.gameinfo.bigblind < msg.gameinfo.bigblind || this.texasGameData.mttInfo.gameinfo.front < msg.gameinfo.front);
          this.texasGameData.mttInfo.gameinfo = msg.gameinfo;
          this.texasGamePage.popupLayer.updateMttPopup();
          this.texasGamePage.tableLayer.updateTableState();
          this.texasGamePage.menuLayer.updateGameMenuStatus();
          if (showTip) {
            this.texasGamePage.tipLayer.showBlindsUpTip();
          }
        };
        _proto2.onMttWeedCast = function onMttWeedCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttWeedCast', msg);
          this.reset(false);
          this.texasGamePage.popupLayer.showMttResult(msg);
        };
        _proto2.onMttFinalTableCast = function onMttFinalTableCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttFinalTableCast', msg);
          this.texasGameData.mttState.setFinalTable();
        };
        _proto2.onMttNextHandAddonCast = function onMttNextHandAddonCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttNextHandAddonCast', msg);
          this.texasGameData.mttState.nextHandAddon = true;
          this.texasGamePage.tipLayer.showCommonTip(LanguageManager.get('TXT_855'));
        };
        _proto2.onMttNextHandBreakCast = function onMttNextHandBreakCast(msg) {
          Log.game.log('TexasPlayShareSpace', 'onMttNextHandBreakCast', msg);
          this.texasGameData.mttState.nextHandBreak = true;
          this.texasGamePage.tipLayer.showCommonTip(LanguageManager.get('TXT_856'));
        };
        _proto2.onMttClose = function onMttClose() {
          Log.game.log('TexasPlayShareSpace', 'onMttClose');
          this.texasGameData.mttState.setFinish();
          this.texasGamePage.playerLayer.updateChairStateAll();
          this.texasGamePage.mttWaitTipLayer.updateLayer();
          this.texasGamePage.operatorLayer.updateOperatorLayerStatus(undefined);
          if (this.texasGamePage.popupLayer.mttResultDialog.isOpen) {
            this.texasGamePage.tipLayer.showCommonTip(LanguageManager.get('TOAST_MTTFIN'));
          } else {
            this.texasGamePage.showExitConfirmBox(LanguageManager.get('CCS_TXT_332'));
          }
        };
        _proto2.onMsgPlayerRankCast = function onMsgPlayerRankCast(msg) {
          this.texasGameData.mttInfo.memberrank = msg.memberrank;
        };
        _proto2.onMsgMttMoneyRoundCast = function onMsgMttMoneyRoundCast(msg) {
          if (msg.moneyRound == 1) {
            this.texasGamePage.tipLayer.showMoneyTip();
          }
        }

        // ************************ MTT ***************************
        ;

        return TexasPlayShareSpace;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPokerLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './UI_TexasPokerLayer.ts', './GameConst.ts', './CocosDevKit.ts', './RoleData.ts', './GameDecorators.ts', './AudioManager.ts', './NativeDeviceBridge.ts', './CDKDecorators.ts', './Logger.ts', './PokerParser.ts', './Utils.ts', './NodePoolExtention.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, v2, Tween, tween, GLoader, LoaderFillType, UI_TexasPokerLayer, GameConst, RoleData, CustomFguiClass, AudioManager, NativeDeviceBridge, SafeTimeInterval, Log, PokerParser, Utils, GObjectPoolEx;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      GLoader = module.GLoader;
      LoaderFillType = module.LoaderFillType;
    }, function (module) {
      UI_TexasPokerLayer = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, null, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      PokerParser = module.PokerParser;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GObjectPoolEx = module.GObjectPoolEx;
    }],
    execute: function () {
      var _dec, _dec2, _class2, _class3;
      cclegacy._RF.push({}, "1a4abo7iglMu4mKYT7mTXA+", "TexasPokerLayer", undefined);

      /**
       * 用于发其他玩家手牌的牌背
       */
      var HandCardBackPool = /*#__PURE__*/function (_GObjectPoolEx) {
        _inheritsLoose(HandCardBackPool, _GObjectPoolEx);
        function HandCardBackPool() {
          return _GObjectPoolEx.apply(this, arguments) || this;
        }
        _createClass(HandCardBackPool, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new HandCardBackPool(function () {
                var card = new GLoader();
                card.name = 'handCardBack';
                card.url = 'ui://xddh4ifdtryjad';
                card.alpha = 1;
                card.fill = LoaderFillType.ScaleFree;
                card.touchable = false;
                card.setPivot(0.5, 0.5, true);
                return card;
              });
            }
            return this._instance;
          }
        }]);
        return HandCardBackPool;
      }(GObjectPoolEx);
      HandCardBackPool._instance = void 0;
      var TexasPokerLayer = exports('TexasPokerLayer', (_dec = SafeTimeInterval(400), _dec2 = SafeTimeInterval(), CustomFguiClass(_class2 = (_class3 = /*#__PURE__*/function (_UI_TexasPokerLayer) {
        _inheritsLoose(TexasPokerLayer, _UI_TexasPokerLayer);
        function TexasPokerLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasPokerLayer.call.apply(_UI_TexasPokerLayer, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this._publicPoker1 = [];
          _this._publicPokerPos1 = [];
          _this._curPlayerHandPoker = [];
          _this._curPlayerHandPokerPosition = [];
          return _this;
        }
        var _proto = TexasPokerLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasPokerLayer.prototype.onConstruct.call(this);
          this.m_btnRabbit.visible = false;
          this.m_groupPublicBg.visible = false;
          this.m_groupCardType.visible = false;
          this.m_groupCardTypePower.visible = false;
          this.m_layerCardTypePowerProgress.fillAmount = 0;
          this._publicPoker1.push(this.m_publicPoker1_0);
          this._publicPoker1.push(this.m_publicPoker1_1);
          this._publicPoker1.push(this.m_publicPoker1_2);
          this._publicPoker1.push(this.m_publicPoker1_3);
          this._publicPoker1.push(this.m_publicPoker1_4);
          this.m_groupPublicBg.visible = false;
          for (var i = 0; i < this._publicPoker1.length; i++) {
            var pokerLoader = this._publicPoker1[i];
            pokerLoader.visible = false;
            this._publicPokerPos1.push(v2(pokerLoader.x, pokerLoader.y));
          }
          this._curPlayerHandPoker.push(this.m_curPlayerHandPoker0);
          this._curPlayerHandPoker.push(this.m_curPlayerHandPoker1);
          this._curPlayerHandPoker.push(this.m_curPlayerHandPoker2);
          this._curPlayerHandPoker.push(this.m_curPlayerHandPoker3);
          this._curPlayerHandPoker.push(this.m_curPlayerHandPoker4);
          this._curPlayerHandPoker.push(this.m_curPlayerHandPoker5);
          for (var _i = 0; _i < this._curPlayerHandPoker.length; _i++) {
            var _pokerLoader = this._curPlayerHandPoker[_i];
            _pokerLoader.visible = false;
            _pokerLoader.onClick(this.onHandCardClick.bind(this, _i), this);
          }
          this.m_btnCardTypePower.onClick(this.onBtnCardTypePowerClick, this);
          this.m_btnCardType.onClick(this.onBtnCardTypePowerClick, this);
          this.m_btnRabbit.onClick(this.onBtnRabbitClick, this);
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
        };
        _proto.reset = function reset() {
          this.m_btnRabbit.visible = false;
          this.m_groupPublicBg.visible = false;
          this.m_groupCardType.visible = false;
          this.m_groupCardTypePower.visible = false;
          this.m_layerCardTypePowerProgress.fillAmount = 0;
          for (var i = 0; i < this._publicPoker1.length; i++) {
            var pokerLoader = this._publicPoker1[i];
            var pos = this._publicPokerPos1[i];
            Tween.stopAllByTarget(pokerLoader);
            pokerLoader.align = 1;
            pokerLoader.scaleX = 1;
            pokerLoader.scaleY = 1;
            pokerLoader.alpha = 1;
            pokerLoader.visible = false;
            pokerLoader.x = pos.x;
            pokerLoader.y = pos.y;
            var pokerCmpt = pokerLoader.component;
            pokerCmpt.showEye = false;
            pokerCmpt.gray = false;
            pokerCmpt.hightLight = false;
          }
          for (var _i2 = 0; _i2 < this._curPlayerHandPoker.length; _i2++) {
            var _pokerLoader2 = this._curPlayerHandPoker[_i2];
            Tween.stopAllByTarget(_pokerLoader2);
            _pokerLoader2.align = 1;
            _pokerLoader2.scaleX = 1;
            _pokerLoader2.scaleY = 1;
            _pokerLoader2.alpha = 1;
            _pokerLoader2.visible = false;
            var _pokerCmpt = _pokerLoader2.component;
            _pokerCmpt.showEye = false;
            _pokerCmpt.gray = false;
            _pokerCmpt.hightLight = false;
          }
          this._curPlayerHandPokerPosition.length = 0;
          if (this.shareSpace.texasGameData.texasRule) {
            var startPos = v2(695, 1545);
            var spacingConfig = [0, 0, 90, 0, 78, 55, 44];
            var handPokerCount = this.shareSpace.texasGameData.handPokerCount;
            var spacing = spacingConfig[handPokerCount];
            for (var _i3 = 0; _i3 < handPokerCount; _i3++) {
              var _pokerLoader3 = this._curPlayerHandPoker[_i3];
              _pokerLoader3.x = startPos.x + _i3 * spacing;
              _pokerLoader3.y = startPos.y;
              this._curPlayerHandPokerPosition.push(v2(_pokerLoader3.x, _pokerLoader3.y));
            }
          }
          for (var _i4 = 0; _i4 < this._children.length; _i4++) {
            var child = this._children[_i4];
            if (child.name == 'handCardBack' && child instanceof GLoader) {
              HandCardBackPool.Instance.putObj(child);
            }
          }
        };
        _proto.onDestroy = function onDestroy() {
          _UI_TexasPokerLayer.prototype.onDestroy.call(this);
          HandCardBackPool.Instance.clear();
        };
        _proto.onBtnCardTypePowerClick = function onBtnCardTypePowerClick(event) {
          this.shareSpace.texasGamePage.popupLayer.showCardTypePower();
        };
        _proto.onBtnRabbitClick = function onBtnRabbitClick() {
          Log.game.log('TexasPokerLayer', 'onBtnRabbitClick');
          this.shareSpace.roomProxy.getRabbitAction();
        };
        _proto.onHandCardClick = function onHandCardClick(idx) {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (!tableInfo) return;
          if (tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.PreFlop || tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.River) return;
          if (!tableInfo.gamePlayerids.includes(RoleData.inst.playerID)) return;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (!curPlayerInfo || curPlayerInfo.chairId == 0) return;
          // 震动
          NativeDeviceBridge.Instance.shortVibrate(2);
          var pokerLoader = this._curPlayerHandPoker[idx];
          var pokerCmpt = pokerLoader.component;
          var setShow = !pokerCmpt.showEye;
          this.shareSpace.texasProxy.openHandCard(idx, setShow);
        };
        _proto.updateCardTypePower = function updateCardTypePower() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var info = this.shareSpace.texasGameData.getCurPlayerInfo();
          var shwoCardTypePower = info && tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Finish;
          shwoCardTypePower = shwoCardTypePower && tableInfo.gamePlayerids.includes(info.playerid);
          shwoCardTypePower = shwoCardTypePower && tableInfo.handcards && tableInfo.handcards.length > 0;
          this.m_groupCardTypePower.visible = shwoCardTypePower;
          var cardTypeParsed = this.shareSpace.texasGameData.texasClientState.curPlayerCardTypeParsed;
          if (cardTypeParsed) {
            var progress = cardTypeParsed.cardType / 10.0;
            this.m_layerCardTypePowerProgress.fillAmount = progress;
          } else {
            this.m_layerCardTypePowerProgress.fillAmount = 0;
          }
          // this.shareSpace.texasGamePage.popupLayer.refreshTypePower();
        };

        _proto.updateCurPlayerHandPoker = function updateCurPlayerHandPoker() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var info = this.shareSpace.texasGameData.getCurPlayerInfo();
          var showHandPoker = info && tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Finish;
          showHandPoker = showHandPoker && tableInfo.gamePlayerids.includes(info.playerid);
          showHandPoker = showHandPoker && tableInfo.handcards && tableInfo.handcards.length > 0;
          var handPokerCount = this.shareSpace.texasGameData.handPokerCount;
          var isFold = showHandPoker && info.actStatus == GameConst.TexasPlay.EActStatus.Fold;
          var selectCards = undefined;
          var cardTypeParsed = this.shareSpace.texasGameData.texasClientState.curPlayerCardTypeParsed;
          var isGameResult = tableInfo.roomStatus == GameConst.TexasPlay.ERoomStatus.Result;
          if (showHandPoker && cardTypeParsed) {
            var gameResult = this.shareSpace.texasGameData.gameResult;
            if (isGameResult && gameResult && tableInfo.publicCards.length == 5) {
              for (var i = 0; i < gameResult.playerResults.length; i++) {
                var r = gameResult.playerResults[i];
                if (r.playerid == RoleData.inst.playerID) {
                  if (r.result == 1) {
                    cardTypeParsed.cardType = r.pokerType;
                    cardTypeParsed.selectCards = r.hightlightCards;
                    selectCards = cardTypeParsed.selectCards.concat();
                  }
                  break;
                }
              }
            }
            this.m_groupCardType.visible = true;
            this.m_cardType.text = PokerParser.CardTypeStrMap.get(cardTypeParsed.cardType);
            this.forceUpdateRecursion();
          } else {
            this.m_groupCardType.visible = false;
          }
          for (var _i5 = 0; _i5 < handPokerCount; _i5++) {
            var pokerLoader = this._curPlayerHandPoker[_i5];
            Tween.stopAllByTarget(pokerLoader);
            pokerLoader.visible = showHandPoker && _i5 < tableInfo.handcards.length;
            if (pokerLoader.visible) {
              var pokerCode = tableInfo.handcards[_i5];
              var showEye = tableInfo.openCards.includes(_i5);
              var pokerCmpt = pokerLoader.component;
              pokerCmpt.front = true;
              pokerCmpt.showEye = showEye;
              if (selectCards) {
                var isSelected = selectCards.includes(pokerCode);
                pokerCmpt.hightLight = isSelected;
                if (isGameResult) {
                  pokerCmpt.gray = isFold || !isSelected;
                } else {
                  pokerCmpt.gray = isFold;
                }
              } else {
                pokerCmpt.hightLight = false;
                pokerCmpt.gray = isFold;
              }
              pokerCmpt.code = pokerCode;
            }
          }
        };
        _proto.updatePublicPoker = function updatePublicPoker() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var gameResult = this.shareSpace.texasGameData.gameResult;
          var showPublicPoker = tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Finish;
          this.m_groupPublicBg.visible = showPublicPoker;
          showPublicPoker = showPublicPoker && tableInfo.publicCards.length > 0;
          var isGameResult = tableInfo.roomStatus == GameConst.TexasPlay.ERoomStatus.Result;
          var selectCards = undefined;
          if (isGameResult && gameResult && tableInfo.publicCards.length == 5) {
            for (var i = 0; i < gameResult.playerResults.length; i++) {
              var r = gameResult.playerResults[i];
              if (r.result == 1) {
                selectCards = r.hightlightCards;
                break;
              }
            }
          }
          for (var _i6 = 0; _i6 < this._publicPoker1.length; _i6++) {
            var pokerLoader = this._publicPoker1[_i6];
            var pos = this._publicPokerPos1[_i6];
            Tween.stopAllByTarget(pokerLoader);
            pokerLoader.align = 1;
            pokerLoader.scaleX = 1;
            pokerLoader.scaleY = 1;
            pokerLoader.alpha = 1;
            pokerLoader.visible = showPublicPoker;
            pokerLoader.x = pos.x;
            pokerLoader.y = pos.y;
            if (showPublicPoker) {
              var pokerCode = tableInfo.publicCards[_i6];
              if (pokerCode) {
                var pokerCmpt = pokerLoader.component;
                pokerCmpt.front = true;
                pokerCmpt.showEye = false;
                if (selectCards) {
                  var isSelected = selectCards.includes(pokerCode);
                  pokerCmpt.hightLight = isSelected;
                  if (isGameResult) {
                    pokerCmpt.gray = !isSelected;
                  } else {
                    pokerCmpt.gray = false;
                  }
                } else {
                  pokerCmpt.gray = false;
                  pokerCmpt.hightLight = false;
                }
                pokerCmpt.code = pokerCode;
              } else {
                pokerLoader.visible = false;
              }
            }
          }
        };
        _proto.updateRabbitCamera = function updateRabbitCamera() {
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var gameResult = this.shareSpace.texasGameData.gameResult;
          var showRabbitCamera = gameResult && curPlayerInfo && curPlayerInfo.chairId > 0;
          showRabbitCamera = showRabbitCamera && tableInfo.gamePlayerids.includes(curPlayerInfo.playerid);
          showRabbitCamera = showRabbitCamera && tableInfo.roomStatus == GameConst.TexasPlay.ERoomStatus.Result;
          showRabbitCamera = showRabbitCamera && tableInfo.publicCards.length < 5;
          this.m_btnRabbit.visible = showRabbitCamera;
          if (showRabbitCamera) {
            var flag = false;
            var rabbitCameraCost = 0;
            for (var i = 0; i < gameResult.playerResults.length; i++) {
              var playerResult = gameResult.playerResults[i];
              if (playerResult.playerid == curPlayerInfo.playerid) {
                flag = true;
                // if (TelegramDeviceBridge.Instance.isTMA) {
                //     rabbitCameraCost = playerResult.cashRabbitCast;
                // } else {
                //     rabbitCameraCost = playerResult.rabbitallDiamond;
                // }
                rabbitCameraCost = playerResult.cashRabbitCast;
              }
            }
            showRabbitCamera = flag;
            if (showRabbitCamera) {
              this.m_rabbitPlace.selectedIndex = tableInfo.publicCards.length;
              if (rabbitCameraCost > 0) {
                this.m_btnRabbit.m_groupRabbitCost.visible = true;
                this.m_btnRabbit.m_textRabbitFree.visible = false;
                this.m_btnRabbit.m_textRabbitCost.text = "" + rabbitCameraCost;
              } else {
                this.m_btnRabbit.m_groupRabbitCost.visible = false;
                this.m_btnRabbit.m_textRabbitFree.visible = true;
              }
            }
          }
        };
        _proto.updatePokerLayer = function updatePokerLayer() {
          this.updatePublicPoker();
          this.updateCurPlayerHandPoker();
          this.updateCardTypePower();
          this.updateRabbitCamera();
          this.forceUpdateRecursion();
        };
        _proto.dealOtherPlayerHandPoker = function dealOtherPlayerHandPoker(finish) {
          var _this2 = this;
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var handPokerCount = this.shareSpace.texasGameData.handPokerCount;
          var maxChair = this.shareSpace.texasGameData.maxChair;
          var chairID = tableInfo.sbChairId;
          var from = v2(this.m_dealCardPlace.x, this.m_dealCardPlace.y);
          var actionTargets = [];
          for (var i = 0; i < maxChair; i++) {
            var item = this.shareSpace.texasGamePage.playerLayer.getItemByChairID(chairID);
            if (!item.isChairEmpty && item.isJoinTheGame && !item.isCurPlayerChair) {
              var targetGlobal = item.m_avt.localToGlobal(0, 0);
              actionTargets.push(this.globalToLocal(targetGlobal.x, targetGlobal.y));
            }
            chairID++;
            if (chairID > maxChair) {
              chairID = 1;
            }
          }
          var num = handPokerCount * actionTargets.length;
          if (num <= 0) {
            finish();
            return;
          }
          var counter = Utils.createCounterFunction(num, finish);
          for (var _i7 = 0; _i7 < handPokerCount; _i7++) {
            var _loop = function _loop() {
              var target = actionTargets[j];
              var actionItem = HandCardBackPool.Instance.getObj();
              _this2.addChild(actionItem);
              tween(actionItem).set({
                width: 124,
                height: 178,
                alpha: 0.3,
                scaleX: 0.6,
                scaleY: 0.6,
                x: from.x,
                y: from.y
              }).delay((_i7 * actionTargets.length + j) * 0.03).to(0.3, {
                alpha: 1,
                scaleX: 0.2,
                scaleY: 0.2,
                x: target.x,
                y: target.y
              }, {
                easing: 'quadOut'
              }).call(function () {
                HandCardBackPool.Instance.putObj(actionItem);
                counter();
              }).start();
            };
            for (var j = 0; j < actionTargets.length; j++) {
              _loop();
            }
          }
        };
        _proto.dealCurPlayerHandPoker = function dealCurPlayerHandPoker(finish) {
          var _this3 = this;
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (tableInfo.roomStatus != GameConst.TexasPlay.ERoomStatus.PreFlop) {
            finish();
            Log.game.warn('TexasPokerLayer', 'dealCurPlayerHandPoker', '非翻牌前阶段怎么会发手牌呢，快检查一下代码吧');
            return;
          }
          var info = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (!info) {
            Log.game.warn('TexasPokerLayer', 'dealCurPlayerHandPoker', '找不到当前玩家游戏信息');
            finish();
            return;
          }
          if (!tableInfo.gamePlayerids.includes(info.playerid)) {
            Log.game.warn('TexasPokerLayer', 'dealCurPlayerHandPoker', '当前玩家没有参与游戏');
            finish();
            return;
          }
          if (!tableInfo.handcards || tableInfo.handcards.length == 0) {
            Log.game.warn('TexasPokerLayer', 'dealCurPlayerHandPoker', '当前玩家手牌时空的', info);
            finish();
            return;
          }
          var handPokerCount = this.shareSpace.texasGameData.handPokerCount;
          var playArr = [];
          for (var i = 0; i < handPokerCount; i++) {
            var pokerLoader = this._curPlayerHandPoker[i];
            Tween.stopAllByTarget(pokerLoader);
            pokerLoader.visible = i < tableInfo.handcards.length;
            if (pokerLoader.visible) {
              var pokerCode = tableInfo.handcards[i];
              var targetPos = this._curPlayerHandPokerPosition[i];
              playArr.push([pokerCode, targetPos, pokerLoader]);
            }
          }
          if (playArr.length > 0) {
            var counter = Utils.createCounterFunction(playArr.length, finish);
            var _loop2 = function _loop2() {
              var _playArr$_i = playArr[_i8],
                pokerCode = _playArr$_i[0],
                targetPos = _playArr$_i[1],
                pokerLoader = _playArr$_i[2];
              var pokerCmpt = pokerLoader.component;
              pokerCmpt.front = false;
              pokerCmpt.gray = false;
              pokerCmpt.hightLight = false;
              pokerCmpt.showEye = false;
              pokerCmpt.code = pokerCode;
              var fromPos = v2(_this3.m_dealCardPlace.x, _this3.m_dealCardPlace.y);
              tween(pokerLoader).set({
                x: fromPos.x,
                y: fromPos.y,
                scaleX: 0.5,
                scaleY: 0.5,
                alpha: 0.3
              }).delay(0.2 * _i8).to(0.3, {
                x: targetPos.x,
                y: targetPos.y,
                scaleX: 1,
                scaleY: 1,
                alpha: 1
              }, {
                easing: 'quadOut'
              })
              // .delay(0.2)
              .to(0.15, {
                scaleX: 0
              }, {
                easing: 'quadIn'
              }).call(function () {
                pokerCmpt.front = true;
              }).to(0.15, {
                scaleX: 1
              }, {
                easing: 'quadOut'
              }).call(counter).start();
            };
            for (var _i8 = 0; _i8 < playArr.length; _i8++) {
              _loop2();
            }
          } else {
            finish();
          }
        };
        _proto.dealHandPoker = function dealHandPoker(finish) {
          var counter = Utils.createCounterFunction(2, finish);
          this.dealCurPlayerHandPoker(counter);
          this.dealOtherPlayerHandPoker(counter);
        };
        _proto.dealPublicPoker = function dealPublicPoker(finish, fast) {
          var _this4 = this;
          if (fast === void 0) {
            fast = false;
          }
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var playPokerArr = [];
          for (var i = 0; i < this._publicPoker1.length; i++) {
            var pokerLoader = this._publicPoker1[i];
            var pos = this._publicPokerPos1[i];
            Tween.stopAllByTarget(pokerLoader);
            pokerLoader.align = 1;
            pokerLoader.scaleX = 1;
            pokerLoader.scaleY = 1;
            pokerLoader.alpha = 1;
            pokerLoader.x = pos.x;
            pokerLoader.y = pos.y;
            if (i < tableInfo.publicCards.length) {
              if (!pokerLoader.visible) {
                var pokerCode = tableInfo.publicCards[i];
                playPokerArr.push([pokerCode, pokerLoader, this._publicPokerPos1[i].x]);
              }
            } else {
              Tween.stopAllByTarget(pokerLoader);
              pokerLoader.align = 1;
              pokerLoader.scaleX = 1;
              pokerLoader.scaleY = 1;
              pokerLoader.alpha = 1;
              var pokerCmpt = pokerLoader.component;
              pokerCmpt.showEye = false;
              pokerCmpt.gray = false;
              pokerCmpt.hightLight = false;
              pokerLoader.visible = false;
            }
          }
          if (playPokerArr.length > 0) {
            var counter = Utils.createCounterFunction(playPokerArr.length, finish);
            if (!fast && playPokerArr.length == 3 && this.shareSpace.texasGameData.texasClientState.isCardOpened) {
              var speed = 570;
              var _loop3 = function _loop3() {
                var _playPokerArr$_i = playPokerArr[_i9],
                  pokerCode = _playPokerArr$_i[0],
                  pokerLoader = _playPokerArr$_i[1],
                  toX = _playPokerArr$_i[2];
                var fromX = _this4._publicPokerPos1[0].x;
                var actionTime1 = 0.1;
                var actionTime2 = 0.1;
                var distance = Math.abs(toX - fromX);
                var actionTime3 = distance / speed;
                var delayTime = Math.max(1 - actionTime1 * 2 - actionTime3, 0);
                var pokerCmpt = pokerLoader.component;
                pokerCmpt.code = pokerCode;
                pokerCmpt.front = false;
                pokerCmpt.gray = false;
                pokerCmpt.showEye = false;
                pokerCmpt.hightLight = false;
                AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_PKFLIP);
                tween(pokerLoader).set({
                  visible: true,
                  scaleX: 1,
                  x: fromX
                }).to(actionTime1, {
                  scaleX: 0
                }, {
                  easing: 'quadIn'
                }).call(function () {
                  pokerCmpt.front = true;
                }).to(actionTime1, {
                  scaleX: 1
                }, {
                  easing: 'quadOut'
                }).delay(actionTime2).to(actionTime3, {
                  x: toX
                }).delay(delayTime).call(counter).start();
              };
              for (var _i9 = 0; _i9 < playPokerArr.length; _i9++) {
                _loop3();
              }
            } else {
              var _loop4 = function _loop4() {
                var delayTime1 = _i10 * (fast ? 0.12 : 0.2);
                var actionTime = fast ? 0.06 : 0.1;
                var _playPokerArr$_i2 = playPokerArr[_i10],
                  pokerCode = _playPokerArr$_i2[0],
                  pokerLoader = _playPokerArr$_i2[1];
                var pokerCmpt = pokerLoader.component;
                pokerCmpt.code = pokerCode;
                pokerCmpt.front = false;
                pokerCmpt.gray = false;
                pokerCmpt.showEye = false;
                pokerCmpt.hightLight = false;
                var act = tween(pokerLoader).delay(delayTime1).call(function () {
                  AudioManager.inst.playSound(GameConst.ESoundPath.SOUND_EFFECT_PKFLIP);
                }).set({
                  visible: true,
                  scaleX: 1
                }).to(actionTime, {
                  scaleX: 0
                }, {
                  easing: 'quadIn'
                }).call(function () {
                  pokerCmpt.front = true;
                }).to(actionTime, {
                  scaleX: 1
                }, {
                  easing: 'quadOut'
                });
                if (!fast && _this4.shareSpace.texasGameData.texasClientState.isCardOpened) {
                  var delayTime2 = 1 - delayTime1 - actionTime * 2;
                  act = act.delay(delayTime2);
                }
                act.call(counter).start();
              };
              for (var _i10 = 0; _i10 < playPokerArr.length; _i10++) {
                _loop4();
              }
            }
          } else {
            finish();
          }
        };
        return TexasPokerLayer;
      }(UI_TexasPokerLayer), (_applyDecoratedDescriptor(_class3.prototype, "onBtnCardTypePowerClick", [_dec], Object.getOwnPropertyDescriptor(_class3.prototype, "onBtnCardTypePowerClick"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, "onBtnRabbitClick", [_dec2], Object.getOwnPropertyDescriptor(_class3.prototype, "onBtnRabbitClick"), _class3.prototype)), _class3)) || _class2));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPopMenuLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './GameConst.ts', './GameDecorators.ts', './RoleData.ts', './UI_TexasPopMenuLayer.ts', './CDKDecorators.ts', './LanguageManage.ts', './ConfirmBox.ts', './LocalStorageTool.ts', './NativeDeviceBridge.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, HorizontalTextAlignment, tween, Utils, GameConst, CustomFguiClass, MarkForDataBinder, RoleData, UI_TexasPopMenuLayer, SafeTimeInterval, LanguageManager, ConfirmBox, LocalStorageTool, NativeDeviceBridge;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      HorizontalTextAlignment = module.HorizontalTextAlignment;
      tween = module.tween;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
      MarkForDataBinder = module.MarkForDataBinder;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      UI_TexasPopMenuLayer = module.default;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2;
      cclegacy._RF.push({}, "d4457holfJPnoDZTqti81su", "TexasPopMenuLayer", undefined);
      var TexasPopMenuLayer = exports('TexasPopMenuLayer', (_dec = MarkForDataBinder(), _dec2 = SafeTimeInterval(400), _dec3 = SafeTimeInterval(), _dec4 = SafeTimeInterval(400), _dec5 = SafeTimeInterval(400), _dec6 = SafeTimeInterval(400), _dec7 = SafeTimeInterval(400), _dec8 = SafeTimeInterval(400), _dec9 = SafeTimeInterval(400), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasPopMenuLayer) {
        _inheritsLoose(TexasPopMenuLayer, _UI_TexasPopMenuLayer);
        function TexasPopMenuLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasPopMenuLayer.call.apply(_UI_TexasPopMenuLayer, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.menuActionTotalTime = 0.25;
          _this.menuActionTargetX = void 0;
          _this.menuActionSpeed = void 0;
          _this.tweenGameMenuMask = void 0;
          _this.tweenGroupGameMenu = void 0;
          _this.exitConfirmBox = void 0;
          _this.switchTableIndex = 1;
          return _this;
        }
        var _proto = TexasPopMenuLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasPopMenuLayer.prototype.onConstruct.call(this);
          this.m_groupGameMenu.visible = false;
          this.m_gameMenuMask.visible = false;
          this.menuActionTargetX = this.m_groupGameMenu.x;
          this.menuActionSpeed = (this.m_gameMenuMask.width + this.menuActionTargetX) / this.menuActionTotalTime;
          this.m_groupGameMenu.x = -this.m_groupGameMenu.width;
          this.m_money_bg.onClick(this.onBtnShopClick, this);
          this.m_gameMenuMask.onClick(this.onGameMenuMaskClick, this);
          this.m_btnExitGame.onClick(this.onBtnExitGameClick, this);
          this.m_btnStandUp.onClick(this.onBtnStandUpClick, this);
          this.m_btnStepAway.onClick(this.onBtnStepAwayClick, this);
          this.m_btnSwitchTable.onClick(this.onBtnSwitchTableClick, this);
          this.m_btnHandCardRanking.onClick(this.onBtnHandCardRankingClick, this);
          this.m_btnHost.onClick(this.onBtnHostClick, this);
        };
        _proto.closeView = function closeView() {
          this.shareSpace.texasGamePage.popupLayer.m_roomMenuController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView() {
          this.shareSpace.texasGamePage.popupLayer.m_roomMenuController.selectedIndex = 1;
          this.freshMenuInfo();
          this.showGameMenu();
          this.enableDeviceBackButtonHandler();
        };
        _proto.freshMenuInfo = function freshMenuInfo() {
          this.m_UserName.text = RoleData.inst.nick;
          this.m_UserId.text = Utils.formatStr('ID:%d', RoleData.inst.playerID);
          var avatar = this.m_HeadGroup.component;
          avatar.setContent(RoleData.inst.avatar);
          this.m_text_money.text = Utils.toFormat(RoleData.inst.cash, 2, true, false);
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasPopMenuLayer';
        };
        _proto.onGameMenuMaskClick = function onGameMenuMaskClick() {
          this.hideGameMenu();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onGameMenuMaskClick();
          }
        };
        _proto.onBtnShopClick = function onBtnShopClick() {
          var _this2 = this;
          // 震动
          NativeDeviceBridge.Instance.shortVibrate(2);
          //show钱包界面
          this.hideGameMenu(function () {
            _this2.shareSpace.texasGamePage.popupLayer.showShop();
          });
        };
        _proto.onBtnExitGameClick = function onBtnExitGameClick() {
          var _this3 = this;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (this.shareSpace.texasGameData.isClubRoom) ;else if (this.shareSpace.texasGameData.isMatch) {
            // todo 比赛的退出房间的逻辑
            this.shareSpace.mttProxy.exitMTT(function () {
              _this3.shareSpace.closeRoom();
            });
          } else {
            if (curPlayerInfo) {
              var tableInfo = this.shareSpace.texasGameData.tableInfo;
              if (tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Result) {
                if (tableInfo.gamePlayerids.includes(curPlayerInfo.playerid) && curPlayerInfo.actStatus != GameConst.TexasPlay.EActStatus.Fold && curPlayerInfo.actStatus != -1) {
                  this.showConfirmBox({
                    buttonNum: 2,
                    content: LanguageManager.get('TXT_616')
                  }, function () {
                    _this3.shareSpace.texasProxy.leaveRoom(function () {
                      _this3.shareSpace.closeRoom();
                    });
                  });
                  this.hideGameMenu();
                  return;
                }
              }
              this.showConfirmBox({
                buttonNum: 2,
                content: LanguageManager.get('TXT_603')
              }, function () {
                _this3.shareSpace.texasProxy.leaveRoom(function () {
                  _this3.shareSpace.closeRoom();
                });
              });
              this.hideGameMenu();
              return;
            }
            this.shareSpace.texasProxy.leaveRoom(function () {
              _this3.shareSpace.closeRoom();
            });
          }
          this.hideGameMenu();
        };
        _proto.showConfirmBox = function showConfirmBox(params, onConfirm) {
          if (this.exitConfirmBox) {
            this.exitConfirmBox.clearHooks();
            this.exitConfirmBox.dispose();
          }
          this.exitConfirmBox = ConfirmBox.create(this, 1);
          this.exitConfirmBox.setInputParams(params);
          this.exitConfirmBox.addHook({
            onPageDestroy: this.onExitConfirmBoxDestroy.bind(this),
            onConfirm: onConfirm
          });
          this.exitConfirmBox.showOn(this.grootInst);
        };
        _proto.onExitConfirmBoxDestroy = function onExitConfirmBoxDestroy() {
          this.exitConfirmBox = undefined;
        };
        _proto.onBtnStandUpClick = function onBtnStandUpClick() {
          var _this4 = this;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (!curPlayerInfo) {
            this.hideGameMenu();
            return;
          }
          if (this.shareSpace.texasGameData.isClubRoom) ;else {
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            if (tableInfo.roomStatus > GameConst.TexasPlay.ERoomStatus.NotStart && tableInfo.roomStatus < GameConst.TexasPlay.ERoomStatus.Result) {
              if (tableInfo.gamePlayerids.includes(curPlayerInfo.playerid) && curPlayerInfo.actStatus != GameConst.TexasPlay.EActStatus.Fold && curPlayerInfo.actStatus != -1) {
                this.showConfirmBox({
                  buttonNum: 2,
                  content: LanguageManager.get('TXT_1397')
                }, function () {
                  _this4.shareSpace.texasGameData.texasClientState.autoSitdown = false;
                  _this4.shareSpace.roomProxy.standup();
                });
                this.hideGameMenu();
                return;
              }
            }
          }
          this.shareSpace.texasGameData.texasClientState.autoSitdown = false;
          this.shareSpace.roomProxy.standup();
          this.hideGameMenu();
        };
        _proto.onBtnStepAwayClick = function onBtnStepAwayClick() {
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (curPlayerInfo && curPlayerInfo.chairId > 0) {
            this.shareSpace.roomProxy.setAFK();
          }
          this.hideGameMenu();
        };
        _proto.onBtnSwitchTableClick = function onBtnSwitchTableClick() {
          var _this5 = this;
          this.hideGameMenu(function () {
            _this5.switchTableIndex++;
            _this5.shareSpace.texasGamePage.switchTable(_this5.switchTableIndex);
          });
        };
        _proto.onBtnHandCardRankingClick = function onBtnHandCardRankingClick() {
          var _this6 = this;
          this.hideGameMenu(function () {
            _this6.shareSpace.texasGamePage.popupLayer.showCardType();
          });
        };
        _proto.onBtnHostClick = function onBtnHostClick() {
          var _this7 = this;
          //this.shareSpace.texasGamePage.hostReadPoint = false;
          LocalStorageTool.setString('show_host_rule', '1');
          this.freshReadPoint();
          this.shareSpace.texasGamePage.syncReadPoint();
          this.hideGameMenu(function () {
            var allInTime = _this7.shareSpace.texasGameData.mttRule.afkActTimesToAllin;
            var titleText = LanguageManager.get('SEATING_RULE');
            var contentText = Utils.formatStr(LanguageManager.get('SEATING_RULE_DESC'), allInTime);
            var okButtonText = LanguageManager.get('CCS_TXT_427');
            var confirmBox = ConfirmBox.create(_this7, 1);
            confirmBox.setInputParams({
              buttonNum: 1,
              title: titleText,
              content: contentText,
              confirmText: okButtonText,
              align: HorizontalTextAlignment.LEFT
            });
            confirmBox.showOn(_this7.grootInst);
          });
        };
        _proto.freshReadPoint = function freshReadPoint() {
          var hostReadPoint = '0';
          var rule = LocalStorageTool.getString('show_host_rule');
          if (rule && rule.length > 0) {
            hostReadPoint = rule;
          }
          var showReadPoint = false;
          var isMatch = this.shareSpace.texasGameData.isMatch;
          var allInTime = this.shareSpace.texasGameData.mttRule.afkActTimesToAllin;
          if (isMatch && hostReadPoint == '0' && this.shareSpace.texasGamePage.hostReadPoint && allInTime > 0) {
            showReadPoint = true;
          }
          this.m_btnHost.m_read_point.visible = showReadPoint;
        };
        _proto.updateGameMenuStatus = function updateGameMenuStatus() {
          // 设置各个按钮的可见性
          var isMatch = this.shareSpace.texasGameData.isMatch;
          var curPlayerInfo = this.shareSpace.texasGameData.getChairPlayerInfoByPlayerID(RoleData.inst.playerID);
          var curPlayerInChair = !!curPlayerInfo && curPlayerInfo.chairId > 0; //在座位上

          this.m_btnExitGame.visible = true;
          this.m_btnHandCardRanking.visible = true;
          this.m_btnSwitchTable.visible = false;
          this.m_btnStandUp.visible = false;
          this.m_btnStepAway.visible = false;
          this.m_btnHost.visible = false;
          if (isMatch) {
            var allInTime = this.shareSpace.texasGameData.mttRule.afkActTimesToAllin;
            this.m_btnHost.visible = allInTime > 0;
            this.freshReadPoint();
            if (curPlayerInChair) {
              this.m_btnStepAway.visible = true;
              //this.m_btnHost.visible = true;
            }
          } else {
            if (curPlayerInChair) {
              this.m_btnStandUp.visible = true;
              this.m_btnStepAway.visible = true;
              this.m_btnSwitchTable.visible = true;
            } else {
              this.m_btnSwitchTable.visible = true;
            }
          }
          this.forceUpdateRecursion();
        };
        _proto.showGameMenu = function showGameMenu() {
          var _this8 = this;
          this.updateGameMenuStatus();
          if (!this.tweenGameMenuMask && !this.tweenGroupGameMenu) {
            this.m_gameMenuMask.visible = true;
            this.m_groupGameMenu.visible = true;
            this.tweenGameMenuMask = tween(this.m_gameMenuMask).set({
              visible: true,
              alpha: 0
            }).to(this.menuActionTotalTime, {
              alpha: 0.6
            }, {
              easing: 'quadOut'
            }).call(function () {
              if (_this8.tweenGameMenuMask) {
                _this8.tweenGameMenuMask = undefined;
              }
            }).start();
            // let actTime = (this.menuActionTargetX - this.m_groupGameMenu.x) / this.menuActionSpeed
            this.tweenGroupGameMenu = tween(this.m_groupGameMenu).set({
              visible: true,
              x: -this.m_groupGameMenu.width
            }).to(this.menuActionTotalTime, {
              x: this.menuActionTargetX
            }, {
              easing: 'quadOut'
            }).call(function () {
              if (_this8.tweenGroupGameMenu) {
                _this8.tweenGroupGameMenu = undefined;
              }
            }).start();
          }
        };
        _proto.hideGameMenu = function hideGameMenu(finish) {
          var _this9 = this;
          if (this.tweenGameMenuMask) {
            this.tweenGameMenuMask.stop();
          }
          if (this.tweenGroupGameMenu) {
            this.tweenGroupGameMenu.stop();
          }
          this.m_gameMenuMask.visible = false;
          var actTime = Math.abs(-this.m_gameMenuMask.width - this.m_groupGameMenu.x) / this.menuActionSpeed;
          this.tweenGameMenuMask = tween(this.m_gameMenuMask).to(actTime, {
            alpha: 0
          }, {
            easing: 'quadIn'
          }).set({
            visible: false
          }).call(function () {
            if (_this9.tweenGameMenuMask) {
              _this9.tweenGameMenuMask = undefined;
            }
          }).start();
          this.tweenGroupGameMenu = tween(this.m_groupGameMenu).to(actTime, {
            x: -this.m_gameMenuMask.width
          }, {
            easing: 'quadIn'
          }).set({
            visible: false
          }).call(function () {
            if (_this9.tweenGroupGameMenu) {
              _this9.tweenGroupGameMenu = undefined;
            }
            _this9.closeView();
            if (finish) finish();
          }).start();
        };
        _proto.reset = function reset() {
          if (this.tweenGameMenuMask) {
            this.tweenGameMenuMask.stop();
            this.tweenGameMenuMask = undefined;
          }
          if (this.tweenGroupGameMenu) {
            this.tweenGroupGameMenu.stop();
            this.tweenGroupGameMenu = undefined;
          }
          if (this.exitConfirmBox) {
            this.exitConfirmBox.clearHooks();
            this.exitConfirmBox.dispose();
            this.exitConfirmBox = undefined;
          }
          // this.m_groupGameMenu.x = -this.m_gameMenuMask.width;
          // this.m_groupGameMenu.visible = false;
          // this.m_gameMenuMask.visible = false;
          this.closeView();
        };
        _createClass(TexasPopMenuLayer, [{
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_roomMenuController.selectedIndex == 1;
          }
        }]);
        return TexasPopMenuLayer;
      }(UI_TexasPopMenuLayer), (_applyDecoratedDescriptor(_class2.prototype, "freshMenuInfo", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "freshMenuInfo"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onGameMenuMaskClick", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onGameMenuMaskClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnShopClick", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnShopClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnExitGameClick", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnExitGameClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnStandUpClick", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnStandUpClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnStepAwayClick", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnStepAwayClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnSwitchTableClick", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnSwitchTableClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnHandCardRankingClick", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnHandCardRankingClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnHostClick", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnHostClick"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPopupLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasPopupLayer.ts', './CocosDevKit.ts', './GameDecorators.ts', './TexasGameData.ts', './WalletDepositPage.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, UI_TexasPopupLayer, CustomFguiClass, TexasMttClientState, WalletDepositPage, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasPopupLayer = module.default;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      TexasMttClientState = module.TexasMttClientState;
    }, function (module) {
      WalletDepositPage = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "c8392HaXdJFjYGXRgy/AMeR", "TexasPopupLayer", undefined);
      var TexasPopupLayer = exports('TexasPopupLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasPopupLayer) {
        _inheritsLoose(TexasPopupLayer, _UI_TexasPopupLayer);
        function TexasPopupLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasPopupLayer.call.apply(_UI_TexasPopupLayer, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          return _this;
        }
        var _proto = TexasPopupLayer.prototype;
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.cardTypePowerLayer.init(shareSpace);
          this.cardTypeLayer.init(shareSpace);
          this.buyinDialog.init(shareSpace);
          this.playerInfoLayer.init(shareSpace);
          this.expressionDialog.init(shareSpace);
          this.mttAddOnDialog.init(shareSpace);
          this.retrospectLayer.init(shareSpace);
          this.chatLayer.init(shareSpace);
          this.mttInfoLayer.init(shareSpace);
          this.mttRebuyDialog.init(shareSpace);
          this.mttResultDialog.init(shareSpace);
          this.menuLayer.init(shareSpace);
          this.tableInfoLayer.init(shareSpace);
        };
        _proto.reset = function reset() {
          this.cardTypePowerLayer.reset();
          this.cardTypeLayer.reset();
          this.buyinDialog.reset();
          this.playerInfoLayer.reset();
          this.mttAddOnDialog.reset();
          this.expressionDialog.reset();
          this.retrospectLayer.reset();
          this.mttInfoLayer.reset();
          this.mttRebuyDialog.reset();
          this.chatLayer.reset();
          this.mttResultDialog.reset();
          this.menuLayer.reset();
          this.tableInfoLayer.reset();
        };
        _proto.closeAll = function closeAll() {
          this.cardTypePowerLayer.closeView();
          this.cardTypeLayer.closeView();
          this.buyinDialog.closeView();
          this.playerInfoLayer.closeView();
          this.mttAddOnDialog.closeView();
          this.expressionDialog.closeView();
          this.retrospectLayer.closeView();
          this.mttInfoLayer.closeView();
          this.mttRebuyDialog.closeView();
          this.mttResultDialog.closeView();
          this.menuLayer.closeView();
          this.tableInfoLayer.closeView();
        }
        // 数据table看板
        ;

        _proto.showTableInfoLayer = function showTableInfoLayer() {
          this.tableInfoLayer.openView();
        }
        // 数据看板
        ;

        _proto.showRankLayer = function showRankLayer() {
          this.mttInfoLayer.openView();
        }
        // 显示聊天
        ;

        _proto.showChatLayer = function showChatLayer() {
          this.chatLayer.openView();
        }
        // 显示牌局记录
        ;

        _proto.showGameRetrospect = function showGameRetrospect() {
          this.retrospectLayer.openView();
        };
        _proto.showAddOn = function showAddOn() {
          if (!this.shareSpace.texasGameData.isMatch) return;
          if (this.shareSpace.texasGameData.isLookOn) return;
          var mttState = this.shareSpace.texasGameData.mttState;
          if (mttState.value != TexasMttClientState.ADDON) return;
          if (mttState.addonNum > 0) return;
          if (mttState.timeStamp > Utils.curServerTimeSecondstamp) {
            this.mttAddOnDialog.openView(mttState.timeStamp);
          }
        }

        /**
         * 打开被动 rebuy
         * @param endTime
         */;
        _proto.showPassiveRebuy = function showPassiveRebuy(endTime) {
          if (!this.shareSpace.texasGameData.isMatch) return;
          if (this.shareSpace.texasGameData.isLookOn) return;
          if (endTime > Utils.curServerTimeSecondstamp) {
            this.mttRebuyDialog.openView(true, endTime);
          }
        }

        /**
         * 打开主动 rebuy
         */;
        _proto.showRebuy = function showRebuy() {
          if (!this.shareSpace.texasGameData.isMatch) return;
          if (this.shareSpace.texasGameData.isLookOn) return;
          this.mttRebuyDialog.openView(false);
        }

        // 显示用户信息
        ;

        _proto.showPlayerInfo = function showPlayerInfo(money, userInfo) {
          this.playerInfoLayer.openView(money, userInfo);
        }

        // 显示牌力值
        ;

        _proto.showCardTypePower = function showCardTypePower() {
          this.cardTypePowerLayer.openView();
        }

        // 显示牌型
        ;

        _proto.showCardType = function showCardType() {
          this.cardTypeLayer.openView();
        }

        // 补充筹码
        ;

        _proto.showBuyin = function showBuyin(timeCountDown, endTime) {
          this.buyinDialog.openView(timeCountDown, endTime);
        }

        /**
         * 服务器通知的补充筹码
         */;
        _proto.showAddChip = function showAddChip(leftTime) {
          // this.addChipDialog.openView(leftTime);
        }

        /**
         * 表情
         */;
        _proto.showExpressionDialog = function showExpressionDialog() {
          this.expressionDialog.openView();
        }

        /**
         * mtt 结算
         */;
        _proto.showMttResult = function showMttResult(msg) {
          if (!this.mttResultDialog.isOpen) {
            this.closeAll();
          }
          this.mttResultDialog.openView(msg);
        }

        /**
         * 商城
         */;
        _proto.showShop = function showShop() {
          WalletDepositPage.create(this, false).showOn(this.grootInst);
        }

        /**
         * 菜单
         */;
        _proto.showRoomMenu = function showRoomMenu() {
          this.menuLayer.openView();
        };
        _proto.updateCardTypePower = function updateCardTypePower() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          var hideCardTypePower = !tableInfo || !curPlayerInfo || curPlayerInfo.chairId == 0;
          if (hideCardTypePower) {
            this.cardTypePowerLayer.closeView();
          }
          if (this.cardTypePowerLayer.isOpen) {
            this.cardTypePowerLayer.refreshTypePower();
          }
        };
        _proto.updateBuyinDialog = function updateBuyinDialog() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          var hideBuyin = !tableInfo || !curPlayerInfo || curPlayerInfo.chairId == 0;
          if (hideBuyin) {
            this.buyinDialog.closeView();
          }
          if (this.buyinDialog.isOpen) {
            this.buyinDialog.updateDialog();
          }
        };
        _proto.updateExpressionDialog = function updateExpressionDialog() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          var hideExpression = !tableInfo || !curPlayerInfo || curPlayerInfo.chairId == 0;
          if (hideExpression) {
            this.expressionDialog.closeView();
          }
        };
        _proto.updateTexasPopup = function updateTexasPopup() {
          this.updateCardTypePower();
          this.updateBuyinDialog();
          this.updateExpressionDialog();
          this.updateBounds;
          //this.updatePopMenu();
        };

        _proto.updateMttPopup = function updateMttPopup() {
          this.mttRebuyDialog.updateDialog();
          this.mttAddOnDialog.updateDialog();
          this.mttInfoLayer.updateLayer();
        };
        _proto.onDestroy = function onDestroy() {
          _UI_TexasPopupLayer.prototype.onDestroy.call(this);
        };
        _createClass(TexasPopupLayer, [{
          key: "cardTypePowerLayer",
          get: function get() {
            return this.m_cardTypePowerDialog;
          }
        }, {
          key: "cardTypeLayer",
          get: function get() {
            return this.m_cardTypeLayer;
          }
        }, {
          key: "buyinDialog",
          get: function get() {
            return this.m_buyinDialog;
          }
          // public get applyChipDialog() {
          //     return this.m_applyChipDialog as TexasApplyChipDialog;
          // }
        }, {
          key: "playerInfoLayer",
          get: function get() {
            return this.m_playerInfoLayer;
          }
        }, {
          key: "mttAddOnDialog",
          get: function get() {
            return this.m_mttAddOnDialog;
          }
        }, {
          key: "mttRebuyDialog",
          get: function get() {
            return this.m_mttRebuyDialog;
          }
        }, {
          key: "expressionDialog",
          get: function get() {
            return this.m_expressionDialog;
          }
        }, {
          key: "retrospectLayer",
          get: function get() {
            return this.m_retrospectLayer;
          }
        }, {
          key: "chatLayer",
          get: function get() {
            return this.m_chatLayer;
          }
        }, {
          key: "menuLayer",
          get: function get() {
            return this.m_menuPopLayer;
          }
          // public get addChipDialog(): TexasAddChipDialog {
          //     return this.m_addChipDialog as TexasAddChipDialog;
          // }
        }, {
          key: "mttInfoLayer",
          get: function get() {
            return this.m_mttInfoLayer;
          }
        }, {
          key: "mttResultDialog",
          get: function get() {
            return this.m_mttResultDialog;
          }
        }, {
          key: "tableInfoLayer",
          get: function get() {
            return this.m_tableInfoLayer;
          }
        }]);
        return TexasPopupLayer;
      }(UI_TexasPopupLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasPositionConst.ts", ['cc'], function (exports) {
  var cclegacy, v2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }],
    execute: function () {
      exports('TexasPositionConst', void 0);
      cclegacy._RF.push({}, "0b2374uMe9PCLtrXiMUyU84", "TexasPositionConst", undefined);
      var TexasPositionConst;
      (function (_TexasPositionConst) {
        var ETSS = /*#__PURE__*/function (ETSS) {
          ETSS[ETSS["L"] = 0] = "L";
          ETSS[ETSS["C"] = 1] = "C";
          ETSS[ETSS["R"] = 2] = "R";
          return ETSS;
        }({});
        _TexasPositionConst.ETSS = ETSS;
        var ChairPlace = _TexasPositionConst.ChairPlace = [v2(540, 1575), v2(130, 1303), v2(130, 986), v2(130, 663), v2(348, 382), v2(540, 315), v2(732, 382), v2(950, 663), v2(950, 986), v2(950, 1303)];
        var TableScorePlace = _TexasPositionConst.TableScorePlace = [[ETSS.L, v2(603, 1456)], [ETSS.L, v2(240, 1311)], [ETSS.L, v2(180, 819)], [ETSS.L, v2(240, 654)], [ETSS.C, v2(348, 515)], [ETSS.C, v2(540, 450)], [ETSS.C, v2(732, 515)], [ETSS.R, v2(840, 654)], [ETSS.R, v2(900, 819)], [ETSS.R, v2(854, 1311)]];
        var DPlace = _TexasPositionConst.DPlace = [v2(427, 1498), v2(246, 1367), v2(230, 996), v2(254, 704), v2(454, 396), v2(660, 407), v2(626, 396), v2(826, 704), v2(850, 996), v2(834, 1367)];
        var PlayerPlace = _TexasPositionConst.PlayerPlace = {
          9: [0, 1, 2, 3, 4, 6, 7, 8, 9],
          8: [0, 1, 2, 3, 5, 7, 8, 9],
          7: [0, 1, 3, 4, 6, 7, 9],
          6: [0, 1, 3, 5, 7, 9],
          5: [0, 2, 4, 6, 8],
          4: [0, 2, 5, 8],
          3: [0, 3, 7],
          2: [0, 5]
        };
      })(TexasPositionConst || (TexasPositionConst = exports('TexasPositionConst', {})));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './GameDecorators.ts', './GameNetProxyBase.ts', './gameproto.js'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, NetProxyClass, GameNetProxyBase, _cjsExports;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      NetProxyClass = module.NetProxyClass;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "4f5cdxMzSdImZHy87drjrwP", "TexasProxy", undefined);
      var TexasProxy = exports('TexasProxy', (_dec = NetProxyClass(), _dec(_class = (_class2 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(TexasProxy, _GameNetProxyBase);
        function TexasProxy() {
          return _GameNetProxyBase.apply(this, arguments) || this;
        }
        var _proto = TexasProxy.prototype;
        _proto.queryHallRoomInfo = function queryHallRoomInfo(roomID, onRsp) {
          var msg = _cjsExports.texas.MsgQueryRoomInfo.create();
          msg.roomId = roomID;
          this.send(_cjsExports.texas.MsgQueryRoomInfo.ProtocolID, _cjsExports.texas.MsgQueryRoomInfo.encode(msg).finish(), onRsp);
        };
        _createClass(TexasProxy, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return TexasProxy;
      }(GameNetProxyBase), _class2._inst = void 0, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectDetailInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasRetrospectDetailInfo.ts', './CocosDevKit.ts', './GameDecorators.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasRetrospectDetailInfo, CustomFguiClass, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasRetrospectDetailInfo = module.default;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "bbe6eFee8ZN17ikcSeuyrJO", "TexasRetrospectDetailInfo", undefined);
      var TexasRetrospectDetailInfo = exports('TexasRetrospectDetailInfo', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectDe) {
        _inheritsLoose(TexasRetrospectDetailInfo, _UI_TexasRetrospectDe);
        function TexasRetrospectDetailInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectDe.call.apply(_UI_TexasRetrospectDe, [this].concat(args)) || this;
          _this.infoList = [];
          _this.cardNum = 2;
          return _this;
        }
        var _proto = TexasRetrospectDetailInfo.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectDe.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectDetailInfo';
          this.m_list.setVirtual();
          this.m_list.itemProvider = this.getListItemResource.bind(this);
          this.m_list.itemRenderer = this.renderListItem.bind(this);
        };
        _proto.reset = function reset() {
          this.infoList.length = 0;
          this.m_list.numItems = this.infoList.length;
          this.m_list.refreshVirtualList();
        };
        _proto.setInfoList = function setInfoList(infoList, cardNum) {
          Log.debug.log('TexasRetrospectDetailInfo', 'setInfoList', infoList.length);
          this.cardNum = cardNum;
          this.infoList = infoList;
          this.m_list.numItems = infoList.length;
          this.m_list.refreshVirtualList();
        };
        _proto.getListItemResource = function getListItemResource(index) {
          var msg = this.infoList[index];
          if (msg.type == 1) {
            return 'ui://GamePlay/TexasRetrospectDetailTop';
          } else if (msg.type == 2 || msg.type == 3 || msg.type == 4) {
            return 'ui://GamePlay/TexasRetrospectDetailLevel';
          } else if (msg.type == 5) {
            return 'ui://GamePlay/TexasRetrospectDetailOp';
          } else if (msg.type == 6) {
            return 'ui://GamePlay/TexasRetrospectDetailShow';
          } else if (msg.type == 7) {
            return 'ui://GamePlay/TexasRetrospectDetailPlayer';
          } else if (msg.type == 0) {
            return 'ui://0fujvg4op7nj5g';
          } else {
            return 'ui://GamePlay/TexasRetrospectDetailPlayer';
          }
        };
        _proto.renderListItem = function renderListItem(index, item) {
          var msg = this.infoList[index];
          if (msg.type == 1) {
            var itemNode = item;
            itemNode.setData(msg.data);
          } else if (msg.type == 2 || msg.type == 3 || msg.type == 4) {
            var _itemNode = item;
            var height = _itemNode.setData(msg.data);
            _itemNode.setSize(864, height);
          } else if (msg.type == 5) {
            var _itemNode2 = item;
            _itemNode2.setData(msg.data);
          } else if (msg.type == 6) {
            var _itemNode3 = item;
            var _height = _itemNode3.setData(msg.data);
            _itemNode3.setSize(864, _height);
          } else if (msg.type == 7) {
            var _itemNode4 = item;
            _itemNode4.setData(msg.data, this.cardNum);
          }
        };
        return TexasRetrospectDetailInfo;
      }(UI_TexasRetrospectDetailInfo)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectDetailLevel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasRetrospectDetailLevel.ts', './GameDecorators.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, UI_TexasRetrospectDetailLevel, CustomFguiClass, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasRetrospectDetailLevel = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "48e9faBp1JEIZ64BN3MAQga", "TexasRetrospectDetailLevel", undefined);
      var TexasRetrospectDetailLevel = exports('TexasRetrospectDetailLevel', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectDe) {
        _inheritsLoose(TexasRetrospectDetailLevel, _UI_TexasRetrospectDe);
        function TexasRetrospectDetailLevel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectDe.call.apply(_UI_TexasRetrospectDe, [this].concat(args)) || this;
          _this._curPublicPoker = [];
          _this._curEmptyPoker = [];
          return _this;
        }
        var _proto = TexasRetrospectDetailLevel.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectDe.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectDetailLevel';
          this._curPublicPoker.push(this.m_publicCard1);
          this._curPublicPoker.push(this.m_publicCard2);
          this._curPublicPoker.push(this.m_publicCard3);
          this._curPublicPoker.push(this.m_publicCard4);
          this._curPublicPoker.push(this.m_publicCard5);
          this._curEmptyPoker.push(this.m_emptyCard1);
          this._curEmptyPoker.push(this.m_emptyCard2);
          this._curEmptyPoker.push(this.m_emptyCard3);
          this._curEmptyPoker.push(this.m_emptyCard4);
          this._curEmptyPoker.push(this.m_emptyCard5);
        }
        // pot: totalPots, cards: cards ,name, num, pots: pots, smallBlind
        ;

        _proto.setData = function setData(datas) {
          this.m_lableType.text = datas.name;
          this.m_lableChip.text = Utils.toFormat(Utils.formatDoubleValue(datas.pot)) + Utils.formatStr(' (%fBB)', Utils.formatBBNum(datas.pot, datas.smallBlind));
          var count = datas.num;
          var publicCardInfos = datas.cards ? datas.cards : [];
          for (var i = 0; i < 5; i++) {
            var pokerLoader = this._curPublicPoker[i];
            // const emptyCard = this._curEmptyPoker[i];
            if (publicCardInfos.length > i && count > i) {
              pokerLoader.visible = true;
              var pokerCode = publicCardInfos[i];
              var dark = false;
              var pokerCmpt = pokerLoader.component;
              pokerCmpt.gray = dark;
              pokerCmpt.front = true;
              pokerCmpt.hightLight = false;
              pokerCmpt.code = pokerCode;
              // emptyCard.visible = false;
            } else {
              pokerLoader.visible = false;
              // emptyCard.visible = true;
            }
          }
          // this.m_sidePotsCtrl.selectedIndex = 0;
          var height = 132;
          if (datas.pots && datas.pots.length > 1) {
            this.m_sidePotsCtrl.selectedIndex = 1;
            this.potsLayer.setData(datas.pots);
            height += this.potsLayer.height;
          } else {
            this.m_sidePotsCtrl.selectedIndex = 0;
          }
          return height;
        };
        _createClass(TexasRetrospectDetailLevel, [{
          key: "potsLayer",
          get: function get() {
            return this.m_layerPots;
          }
        }]);
        return TexasRetrospectDetailLevel;
      }(UI_TexasRetrospectDetailLevel)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectDetailOp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasRetrospectDetailOp.ts', './GameDecorators.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, Color, UI_TexasRetrospectDetailOp, CustomFguiClass, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      Color = module.Color;
    }, function (module) {
      UI_TexasRetrospectDetailOp = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "a1113oBj+ZPoLoLSDOvLEB3", "TexasRetrospectDetailOp", undefined);
      var ColorFEC348 = color(0xfe, 0xc3, 0x48);
      var TexasRetrospectDetailOp = exports('TexasRetrospectDetailOp', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectDe) {
        _inheritsLoose(TexasRetrospectDetailOp, _UI_TexasRetrospectDe);
        function TexasRetrospectDetailOp() {
          return _UI_TexasRetrospectDe.apply(this, arguments) || this;
        }
        var _proto = TexasRetrospectDetailOp.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectDe.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectDetailOp';
        }

        // name: name,
        // isSelf: isSelf,
        // posType: posType,
        // opType: opType,
        // opColor: opColor,
        // opBgColor: opBgColor,
        // chips: chips,
        // leftChips: leftChips,
        ;

        _proto.setData = function setData(datas) {
          var isSelf = datas.isSelf;
          this.m_labelName.text = Utils.formatDisplayNickName(datas.name, 14);
          this.m_labelName.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          this.m_lablePosition.text = datas.posType;
          this.m_lablePosition.ensureSizeCorrect();
          this.m_lablePosition.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          this.m_lableAction.text = datas.opType;
          this.m_lableAction.color = datas.opColor ? datas.opColor.clone() : Color.WHITE.clone();
          this.m_actionBg.color = datas.opBgColor ? datas.opBgColor.clone() : Color.GREEN.clone();
          this.m_lableChip.text = Utils.toFormat(Utils.formatDoubleValue(datas.leftChips));
          this.m_lableChip.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          this.m_lableActionChip.text = Utils.toFormat(Utils.formatDoubleValue(datas.chips)) + Utils.formatStr(' (%fBB)', Utils.formatBBNum(datas.chips, datas.smallBlind));
          this.m_lableActionChip.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
        };
        return TexasRetrospectDetailOp;
      }(UI_TexasRetrospectDetailOp)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectDetailPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './UI_TexasRetrospectDetailPlayer.ts', './GameDecorators.ts', './RoleData.ts', './Utils.ts', './PokerParser.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, Color, UI_TexasRetrospectDetailPlayer, CustomFguiClass, RoleData, Utils, PokerParser;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      Color = module.Color;
    }, null, function (module) {
      UI_TexasRetrospectDetailPlayer = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      PokerParser = module.PokerParser;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "3a82aod1mFFaowAYd/yqJjn", "TexasRetrospectDetailPlayer", undefined);
      var ColorFEC348 = color(0xfe, 0xc3, 0x48);
      var ColorFF3D23 = color(0xff, 0x3d, 0x23);
      var Color06C166 = color(0x06, 0xc1, 0x66);
      var TexasRetrospectDetailPlayer = exports('TexasRetrospectDetailPlayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectDe) {
        _inheritsLoose(TexasRetrospectDetailPlayer, _UI_TexasRetrospectDe);
        function TexasRetrospectDetailPlayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectDe.call.apply(_UI_TexasRetrospectDe, [this].concat(args)) || this;
          _this._curPlayerHandPoker = [];
          _this._curPublicPoker = [];
          _this.positionBgWidth = 0;
          return _this;
        }
        var _proto = TexasRetrospectDetailPlayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectDe.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectDetailPlayer';
          this._curPlayerHandPoker.push(this.m_card1);
          this._curPlayerHandPoker.push(this.m_card2);
          this._curPlayerHandPoker.push(this.m_card3);
          this._curPlayerHandPoker.push(this.m_card4);
          this._curPlayerHandPoker.push(this.m_card5);
          this._curPlayerHandPoker.push(this.m_card6);
          this._curPublicPoker.push(this.m_publicCard1);
          this._curPublicPoker.push(this.m_publicCard2);
          this._curPublicPoker.push(this.m_publicCard3);
          this._curPublicPoker.push(this.m_publicCard4);
          this._curPublicPoker.push(this.m_publicCard5);
          this.positionBgWidth = this.m_bg2.width;
        };
        _proto.getCardArr = function getCardArr(cardNum) {
          var result = [];
          var index = [];
          var positionX = 108;
          if (cardNum == 4) {
            index = [0, 1, 2, 3];
          } else if (cardNum == 5) {
            index = [0, 1, 2, 3, 4];
          } else if (cardNum == 6) {
            index = [0, 1, 2, 3, 4, 5];
            return this._curPlayerHandPoker;
          } else {
            index = [0, 2];
            positionX = 112;
          }
          var pokerNode = this._curPlayerHandPoker[2];
          pokerNode.setPosition(positionX, pokerNode.y);
          for (var i = 0; i < index.length; i++) {
            var pokerLoader = this._curPlayerHandPoker[index[i]];
            result.push(pokerLoader);
          }
          for (var _i = 0; _i < 6; _i++) {
            var _pokerLoader = this._curPlayerHandPoker[_i];
            if (index.includes(_i)) {
              _pokerLoader.visible = true;
            } else {
              _pokerLoader.visible = false;
            }
          }
          return result;
        }
        // game_type: roundInfo.gameType,     // 牌局类型(1=德州扑克，2=6+)
        // playerid: listItem.playerid,      // 玩家ID
        // name: listItem.name,          // 玩家昵称
        // icon: listItem.icon,          // 玩家头像
        // handcards: handcards,        // 私牌
        // show_handcards: show_handcards,   // 已亮的私牌
        // hightlight_cards: hightlight_cards, // 高亮的牌
        // result: listItem.result,        // 输赢结果类型  1: 胜局 2: 输局
        // is_fold: listItem.isFold,       // 是否弃牌
        // chip: chip,          // 如果是胜利 就是赢的筹码  如果是失败 就是输掉的筹码
        // poker_type: listItem.pokerType,    // 牌型(1=单牌，2=一对，3=两对，4=三条，5=顺子，6=同花，7=葫芦，8=四条，9=同花顺，10=皇家同花顺)
        // // big_poker_award  = listItem.big_poker_award, // 大牌奖励
        // // jackpot_fee      = listItem.jackpot_fee,   // Jackpot
        // // insurance        = listItem.insurance,     // 保险
        // publicCardInfos: publicCardInfos,  // 公牌
        // chair_id: listItem.chairId,      // 玩家位置
        // record: listItem.record, // 操作记录
        ;

        _proto.setData = function setData(datas, cardNum) {
          var userCards = datas.typeUseCards ? datas.typeUseCards : [];
          var isSelf = datas.playerid == RoleData.inst.playerID;
          this.m_labelName.text = Utils.formatDisplayNickName(datas.name, 15);
          this.m_labelName.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          this.m_lablePosition.text = datas.posType;
          this.m_lablePosition.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          if (this.m_lablePosition.width > this.positionBgWidth) {
            this.m_bg2.width = this.positionBgWidth + 20;
          } else {
            this.m_bg2.width = this.positionBgWidth;
          }
          this.m_bg2.ensureSizeCorrect();
          this.m_lableCardType.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          var chipCount = datas.chip;
          var clubRate = 1;
          this.m_lableWin.text = Utils.toFormat(Utils.formatDoubleValue(clubRate * chipCount), 2, false, true) + Utils.formatStr(' (%fBB)', Utils.formatBBNum(clubRate * chipCount, datas.smallBllind));
          this.m_lableWin.color = chipCount < 0 ? ColorFF3D23.clone() : Color06C166.clone();
          var isCompareCard = datas.hightlight_cards && datas.hightlight_cards.length > 0; // 是否参与了比牌
          var showCardType = isCompareCard && !datas.cover && !datas.is_fold;
          if (datas.cover) {
            this.m_status.selectedIndex = 2;
          } else if (datas.is_fold) {
            this.m_status.selectedIndex = 1;
          } else {
            this.m_status.selectedIndex = 0;
          }
          this.m_lableCardType.visible = showCardType;
          if (showCardType) {
            this.m_lableCardType.text = PokerParser.CardTypeStrMap.get(datas.poker_type);
          }
          var operateRecordCount = datas.record ? datas.record.length : 0;
          var hightlight_cards = datas.hightlight_cards ? datas.hightlight_cards : [];
          var privateCardInfos = isSelf ? datas.handcards : datas.show_handcards;
          var showPokers = this.getCardArr(cardNum);
          for (var i = 0; i < showPokers.length; i++) {
            var pokerLoader = showPokers[i];
            var pokerCmpt = pokerLoader.component;
            if (!datas.cover && pokerLoader.visible && privateCardInfos && privateCardInfos.length > i) {
              var pokerCode = privateCardInfos[i];
              var dark = userCards.includes(pokerCode);
              pokerCmpt.gray = !dark && isCompareCard;
              pokerCmpt.front = true;
              pokerCmpt.hightLight = false;
              pokerCmpt.code = pokerCode;
              pokerCmpt.showEye = !isCompareCard && !isSelf;
            } else {
              pokerCmpt.gray = false;
              pokerCmpt.front = false;
              pokerCmpt.hightLight = false;
              pokerCmpt.code = 0;
              pokerCmpt.showEye = false;
            }
          }
          var publicCardInfos = datas.publicCardInfos ? datas.publicCardInfos : [];
          for (var _i2 = 0; _i2 < 5; _i2++) {
            var _pokerLoader2 = this._curPublicPoker[_i2];
            if (publicCardInfos.length > _i2) {
              _pokerLoader2.visible = true;
              var _pokerCode = publicCardInfos[_i2];
              var _pokerCmpt = _pokerLoader2.component;
              var _dark = userCards.includes(_pokerCode);
              _pokerCmpt.gray = !_dark && isCompareCard;
              _pokerCmpt.front = true;
              _pokerCmpt.hightLight = false;
              _pokerCmpt.code = _pokerCode;
            } else {
              _pokerLoader2.visible = false;
            }
          }
        };
        return TexasRetrospectDetailPlayer;
      }(UI_TexasRetrospectDetailPlayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectDetailShow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasRetrospectDetailShow.ts', './GameDecorators.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, UI_TexasRetrospectDetailShow, CustomFguiClass, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasRetrospectDetailShow = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "bbda4Nm7CpD06opvlufS0rp", "TexasRetrospectDetailShow", undefined);
      var TexasRetrospectDetailShow = exports('TexasRetrospectDetailShow', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectDe) {
        _inheritsLoose(TexasRetrospectDetailShow, _UI_TexasRetrospectDe);
        function TexasRetrospectDetailShow() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectDe.call.apply(_UI_TexasRetrospectDe, [this].concat(args)) || this;
          _this._curPlayerHandPoker = [];
          return _this;
        }
        var _proto = TexasRetrospectDetailShow.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectDe.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectDetailShow';
        }
        // pot
        // pots
        ;

        _proto.setData = function setData(datas) {
          var height = 132;
          this.m_lableChip.text = Utils.toFormat(Utils.formatDoubleValue(datas.pot)) + Utils.formatStr(' (%fBB)', Utils.formatBBNum(datas.pot, datas.smallBlind));
          // this.m_sidePotsCtrl.selectedIndex = 0;
          if (datas.pots && datas.pots.length > 1) {
            this.m_sidePotsCtrl.selectedIndex = 1;
            this.potsLayer.setData(datas.pots);
            height += this.potsLayer.height;
          } else {
            this.m_sidePotsCtrl.selectedIndex = 0;
          }
          return height;
        };
        _createClass(TexasRetrospectDetailShow, [{
          key: "potsLayer",
          get: function get() {
            return this.m_layerPots;
          }
        }]);
        return TexasRetrospectDetailShow;
      }(UI_TexasRetrospectDetailShow)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectDetailTop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './UI_TexasRetrospectDetailTop.ts', './GameDecorators.ts', './LanguageManage.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasRetrospectDetailTop, CustomFguiClass, LanguageManager, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      UI_TexasRetrospectDetailTop = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "542a69g3edN6qDJy/DW+8Eg", "TexasRetrospectDetailTop", undefined);
      var TexasRetrospectDetailTop = exports('TexasRetrospectDetailTop', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectDe) {
        _inheritsLoose(TexasRetrospectDetailTop, _UI_TexasRetrospectDe);
        function TexasRetrospectDetailTop() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectDe.call.apply(_UI_TexasRetrospectDe, [this].concat(args)) || this;
          _this._curPlayerHandPoker = [];
          return _this;
        }
        var _proto = TexasRetrospectDetailTop.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectDe.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectDetailTop';
          this._curPlayerHandPoker.push(this.m_card1);
          this._curPlayerHandPoker.push(this.m_card2);
          this._curPlayerHandPoker.push(this.m_card3);
          this._curPlayerHandPoker.push(this.m_card4);
          this._curPlayerHandPoker.push(this.m_card5);
          this._curPlayerHandPoker.push(this.m_card6);
        }

        //  { cards: handcards, ante: ante ,cardNum}
        ;

        _proto.setData = function setData(datas) {
          var ante = datas.ante;
          if (ante && ante > 0) {
            this.m_lableChip.text = LanguageManager.get('TXT_1264') + ': ' + Utils.toFormat(Utils.formatDoubleValue(datas.ante)) + Utils.formatStr(' (%fBB)', Utils.formatBBNum(datas.ante, datas.smallBlind));
            this.m_lableChip.visible = true;
          } else {
            this.m_lableChip.visible = false;
          }
          var cardNum = datas.cardNum;
          var privateCardInfos = datas.handcards;
          for (var i = 0; i < cardNum; i++) {
            var pokerLoader = this._curPlayerHandPoker[i];
            pokerLoader.visible = true;
            var pokerCmpt = pokerLoader.component;
            if (pokerLoader.visible && privateCardInfos.length > i) {
              var pokerCode = privateCardInfos[i];
              var dark = false;
              pokerCmpt.gray = dark;
              pokerCmpt.front = true;
              pokerCmpt.hightLight = false;
              pokerCmpt.code = pokerCode;
            } else {
              pokerCmpt.gray = false;
              pokerCmpt.front = false;
              pokerCmpt.hightLight = false;
              pokerCmpt.code = 0;
            }
          }
          if (cardNum == 2) {
            this.m_numCtrl.selectedIndex = 0;
          } else if (cardNum == 4) {
            this.m_numCtrl.selectedIndex = 1;
          } else if (cardNum == 5) {
            this.m_numCtrl.selectedIndex = 2;
          } else if (cardNum == 6) {
            this.m_numCtrl.selectedIndex = 3;
          }
        };
        return TexasRetrospectDetailTop;
      }(UI_TexasRetrospectDetailTop)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasRetrospectInfo.ts', './CocosDevKit.ts', './GameDecorators.ts', './Logger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasRetrospectInfo, CustomFguiClass, Log;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasRetrospectInfo = module.default;
    }, null, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "fb786yTIjJLRLxFT1qZA3ua", "TexasRetrospectInfo", undefined);
      var TexasRetrospectInfo = exports('TexasRetrospectInfo', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectIn) {
        _inheritsLoose(TexasRetrospectInfo, _UI_TexasRetrospectIn);
        function TexasRetrospectInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectIn.call.apply(_UI_TexasRetrospectIn, [this].concat(args)) || this;
          _this.infoList = [];
          _this.cardNum = 2;
          return _this;
        }
        var _proto = TexasRetrospectInfo.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectIn.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectInfo';
          this.m_list.setVirtual();
          this.m_list.itemProvider = this.getListItemResource.bind(this);
          this.m_list.itemRenderer = this.renderListItem.bind(this);
        };
        _proto.reset = function reset() {
          this.infoList = [];
          this.m_list.numItems = this.infoList.length;
          this.m_list.refreshVirtualList();
        };
        _proto.setInfoList = function setInfoList(infoList, cardNum) {
          Log.debug.log('TexasRetrospectInfo', 'setInfoList', infoList.length);
          this.cardNum = cardNum;
          this.infoList = infoList;
          this.m_list.numItems = infoList.length;
          this.m_list.refreshVirtualList();
        };
        _proto.getListItemResource = function getListItemResource(index) {
          return 'ui://GamePlay/TexasRetrospectInfoItem';
        };
        _proto.renderListItem = function renderListItem(index, item) {
          item.setData(this.infoList[index], this.cardNum);
        };
        return TexasRetrospectInfo;
      }(UI_TexasRetrospectInfo)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectInfoItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CocosDevKit.ts', './UI_TexasRetrospectInfoItem.ts', './GameDecorators.ts', './RoleData.ts', './Utils.ts', './Logger.ts', './PokerParser.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, Color, UI_TexasRetrospectInfoItem, CustomFguiClass, RoleData, Utils, Log, PokerParser;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      Color = module.Color;
    }, null, function (module) {
      UI_TexasRetrospectInfoItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      PokerParser = module.PokerParser;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "35d6eOGQiFJko+iXDcFxHb5", "TexasRetrospectInfoItem", undefined);
      var ColorFEC348 = color(0xfe, 0xc3, 0x48);
      var ColorFF3D23 = color(0xff, 0x3d, 0x23);
      var Color06C166 = color(0x06, 0xc1, 0x66);
      var TexasRetrospectInfoItem = exports('TexasRetrospectInfoItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectIn) {
        _inheritsLoose(TexasRetrospectInfoItem, _UI_TexasRetrospectIn);
        function TexasRetrospectInfoItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectIn.call.apply(_UI_TexasRetrospectIn, [this].concat(args)) || this;
          _this._curPlayerHandPoker = [];
          _this._curPublicPoker = [];
          _this.positionBgWidth = 0;
          return _this;
        }
        var _proto = TexasRetrospectInfoItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectIn.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectInfoItem';
          this._curPlayerHandPoker.push(this.m_card1);
          this._curPlayerHandPoker.push(this.m_card2);
          this._curPlayerHandPoker.push(this.m_card3);
          this._curPlayerHandPoker.push(this.m_card4);
          this._curPlayerHandPoker.push(this.m_card5);
          this._curPlayerHandPoker.push(this.m_card6);
          this._curPublicPoker.push(this.m_publicCard1);
          this._curPublicPoker.push(this.m_publicCard2);
          this._curPublicPoker.push(this.m_publicCard3);
          this._curPublicPoker.push(this.m_publicCard4);
          this._curPublicPoker.push(this.m_publicCard5);
          this.positionBgWidth = this.m_bg2.width;
        };
        _proto.getCardArr = function getCardArr(cardNum) {
          var result = [];
          var index = [];
          var positionX = 108;
          if (cardNum == 4) {
            index = [0, 1, 2, 3];
          } else if (cardNum == 5) {
            index = [0, 1, 2, 3, 4];
          } else if (cardNum == 6) {
            index = [0, 1, 2, 3, 4, 5];
            return this._curPlayerHandPoker;
          } else {
            index = [0, 2];
            positionX = 112;
          }
          var pokerNode = this._curPlayerHandPoker[2];
          pokerNode.setPosition(positionX, pokerNode.y);
          for (var i = 0; i < index.length; i++) {
            var pokerLoader = this._curPlayerHandPoker[index[i]];
            result.push(pokerLoader);
          }
          for (var _i = 0; _i < 6; _i++) {
            var _pokerLoader = this._curPlayerHandPoker[_i];
            if (index.includes(_i)) {
              _pokerLoader.visible = true;
            } else {
              _pokerLoader.visible = false;
            }
          }
          return result;
        };
        _proto.setData = function setData(datas, cardNum) {
          Log.debug.log('TexasRetrospectInfoItem', 'setData');
          var userCards = datas.typeUseCards ? datas.typeUseCards : [];
          var isSelf = datas.playerid == RoleData.inst.playerID;
          this.m_labelName.text = Utils.formatDisplayNickName(datas.name, 15);
          this.m_labelName.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          this.m_lablePosition.text = datas.posType;
          this.m_lablePosition.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          if (this.m_lablePosition.width > this.positionBgWidth) {
            this.m_bg2.width = this.positionBgWidth + 20;
          } else {
            this.m_bg2.width = this.positionBgWidth;
          }
          this.m_bg2.ensureSizeCorrect();
          this.m_lableCardType.color = isSelf ? ColorFEC348.clone() : Color.WHITE.clone();
          var chipCount = datas.chip;
          var clubRate = 1;
          this.m_lableWin.text = Utils.toFormat(Utils.formatDoubleValue(clubRate * chipCount), 2, false, true) + Utils.formatStr(' (%fBB)', Utils.formatBBNum(clubRate * chipCount, datas.smallBllind));
          this.m_lableWin.color = chipCount < 0 ? ColorFF3D23.clone() : Color06C166.clone();
          var isCompareCard = datas.hightlight_cards && datas.hightlight_cards.length > 0; // 是否参与了比牌
          var showCardType = isCompareCard && !datas.cover && !datas.is_fold;
          if (datas.cover) {
            this.m_status.selectedIndex = 2;
          } else if (datas.is_fold) {
            this.m_status.selectedIndex = 1;
          } else {
            this.m_status.selectedIndex = 0;
          }
          this.m_lableCardType.visible = showCardType;
          if (showCardType) {
            this.m_lableCardType.text = PokerParser.CardTypeStrMap.get(datas.poker_type);
          }
          var operateRecordCount = datas.record ? datas.record.length : 0;
          var hightlight_cards = datas.hightlight_cards ? datas.hightlight_cards : [];
          var privateCardInfos = isSelf ? datas.handcards : datas.show_handcards;
          var showPokers = this.getCardArr(cardNum);
          for (var i = 0; i < showPokers.length; i++) {
            var pokerLoader = showPokers[i];
            var pokerCmpt = pokerLoader.component;
            if (!datas.cover && privateCardInfos && privateCardInfos.length > i) {
              var pokerCode = privateCardInfos[i];
              var dark = userCards.includes(pokerCode);
              pokerCmpt.gray = !dark && isCompareCard;
              pokerCmpt.front = true;
              pokerCmpt.hightLight = false;
              pokerCmpt.code = pokerCode;
              pokerCmpt.showEye = !isCompareCard && !isSelf;
            } else {
              pokerCmpt.gray = false;
              pokerCmpt.front = false;
              pokerCmpt.hightLight = false;
              pokerCmpt.code = 0;
              pokerCmpt.showEye = false;
            }
          }
          var publicCardInfos = datas.publicCardInfos ? datas.publicCardInfos : [];
          for (var _i2 = 0; _i2 < 5; _i2++) {
            var _pokerLoader2 = this._curPublicPoker[_i2];
            if (publicCardInfos.length > _i2) {
              _pokerLoader2.visible = true;
              var _pokerCode = publicCardInfos[_i2];
              var _dark = userCards.includes(_pokerCode);
              var _pokerCmpt = _pokerLoader2.component;
              _pokerCmpt.gray = !_dark && isCompareCard;
              _pokerCmpt.front = true;
              _pokerCmpt.hightLight = false;
              _pokerCmpt.code = _pokerCode;
            } else {
              _pokerLoader2.visible = false;
            }
          }
        };
        return TexasRetrospectInfoItem;
      }(UI_TexasRetrospectInfoItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './GameDecorators.ts', './RoleData.ts', './UI_TexasRetrospectLayer.ts', './CocosDevKit.ts', './GameConst.ts', './FSlider.ts', './LanguageManage.ts', './fairygui.mjs', './PopupLoadingManager.ts', './CDKDecorators.ts', './UITools.ts', './PokerParser.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, Tween, Utils, CustomFguiClass, RoleData, UI_TexasRetrospectLayer, GameConst, FSlider, LanguageManager, Event, GearXY, PopupLoadingManager, SafeTimeInterval, UITools, PokerParser;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      UI_TexasRetrospectLayer = module.default;
    }, null, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      FSlider = module.FSlider;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      Event = module.Event;
      GearXY = module.GearXY;
    }, function (module) {
      PopupLoadingManager = module.PopupLoadingManager;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      UITools = module.UITools;
    }, function (module) {
      PokerParser = module.PokerParser;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2;
      cclegacy._RF.push({}, "3e5a1Dr4FRF17QITkARaHe8", "TexasRetrospectLayer", undefined);
      var TexasRetrospectLayer = exports('TexasRetrospectLayer', (_dec = SafeTimeInterval(400), _dec2 = SafeTimeInterval(400), _dec3 = SafeTimeInterval(400), _dec4 = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasRetrospectLa) {
        _inheritsLoose(TexasRetrospectLayer, _UI_TexasRetrospectLa);
        function TexasRetrospectLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectLa.call.apply(_UI_TexasRetrospectLa, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.curHandData = void 0;
          _this.totalGameNum = 0;
          _this.focusIdx = 0;
          _this.gameNumList = [];
          _this.detailInfo = void 0;
          _this.isNeedSyncSlider = false;
          _this.operateData = void 0;
          _this.tRate = 1;
          _this.showdownPots = void 0;
          _this.starCount = 0;
          _this.canLoadData = false;
          _this.loadingManager = void 0;
          return _this;
        }
        var _proto = TexasRetrospectLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectLa.prototype.onConstruct.call(this);
          this.m_bgMask.onClick(this.onBtnCloseClick, this);
          this.m_emptyCtrl.selectedIndex = 1;
          this.m_btnStar.visible = false;
          this.m_labelStarInfo.visible = false;
          // this.onGameChanged();
          // this.m_indexControl.onChanged(this.onGameChanged.bind(this), this);
          this.slider.on(FSlider.EVENT_SLIDER_TOUCHED, this.onSliderPercentEnd, this);
          this.m_btnStar.onClick(this.onBtnStarClick, this);
          this.m_btnNext.onClick(this.onBtnNextClick, this);
          this.m_btnPre.onClick(this.onBtnPreClick, this);
          this.m_progressCtrl.onChanged(this.onProgressCtrlChanged, this);
          UITools.optimizationScrollPane(this.m_listContent.scrollPane);
          this.m_labelStarInfo.text = Utils.formatStr('%s/%s', 0, 0);
          this.m_emptyCtrl.selectedIndex = 2;
          this.loadingManager = new PopupLoadingManager(this.m_loadingLayer);
        };
        _proto.closeView = function closeView() {
          this.canLoadData = false;
          this.loadingManager.hide();
          this.shareSpace.texasGamePage.popupLayer.m_retrospectController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView() {
          this.shareSpace.texasGamePage.popupLayer.m_retrospectController.selectedIndex = 1;
          if (this.m_emptyCtrl.selectedIndex == 2) {
            this.loadingManager.show();
          }
          this.setShow();
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.resetView();
          this.closeView();
        };
        _proto.resetView = function resetView() {
          Tween.stopAllByTarget(this.node);
          this.m_emptyCtrl.selectedIndex = 2;
          this.m_starCtrl.selectedIndex = 0;
          this.m_progressCtrl.selectedIndex = 0;
          this.m_btnStar.visible = false;
          this.m_labelStarInfo.visible = false;
          this.curHandData = null;
          this.totalGameNum = 0;
          this.focusIdx = 0;
          this.gameNumList = [];
          this.detailInfo = null;
          this.isNeedSyncSlider = false;
          var view = this.m_listContent.getChildAt(0);
          view.reset();
          var viewDetail = this.m_listContent.getChildAt(1);
          viewDetail.reset();
          this.refresIndexNumber();
          this.m_btnPre.alpha = 0.3;
          this.m_btnNext.alpha = 0.3;
          this.m_labelStarInfo.text = Utils.formatStr('%s/%s', 0, 0);
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasRetrospectLayer';
          this.tRate = this.shareSpace.texasGameData.clubExRate;
          this.shareSpace.texasGamePage.popupLayer.m_retrospectController.on(Event.GEAR_STOP, this.onGearStop, this);
        };
        _proto.setShow = function setShow() {
          this.reqestRoundInfo(0);
          this.getLastRoundListInfo();
        };
        _proto.onGearStop = function onGearStop(target, controller, gear) {
          if (target == this && controller == this.shareSpace.texasGamePage.popupLayer.m_retrospectController && gear instanceof GearXY) {
            if (controller.selectedIndex == 1) {
              this.canLoadData = true;
              this.refreshTopInfo();
            }
          }
        };
        _proto.onBtnStarClick = function onBtnStarClick(event) {
          var _this2 = this;
          var info = this.detailInfo;
          if (info) {
            //  1 = 收藏 2 = 取消收藏
            this.shareSpace.roomProxy.collectRoundInfo(info.gameNum, info.isCollect ? 2 : 1, function (data) {
              if (data != null) {
                var handNum = data.index;
                var type = data.type;
                info.isCollect = type == 1;
                _this2.refreshCollectInfo();
                _this2.starCount += type == 1 ? 1 : -1;
                _this2.refreshStarInfo();
              }
            });
          }
        };
        _proto.onBtnPreClick = function onBtnPreClick(event) {
          if (this.focusIdx - 1 < 0) {
            return;
          }
          this.focusIdx = this.focusIdx - 1;
          this.isNeedSyncSlider = true;
          var gameNum = this.gameNumList ? this.gameNumList[this.focusIdx] : this.curHandData.gameNumList[this.focusIdx];
          this.reqestRoundInfo(gameNum);
        };
        _proto.onBtnNextClick = function onBtnNextClick(event) {
          if (this.focusIdx + 1 > this.totalGameNum - 1) {
            return;
          }
          this.focusIdx = this.focusIdx + 1;
          this.isNeedSyncSlider = true;
          var gameNum = this.gameNumList ? this.gameNumList[this.focusIdx] : this.curHandData.gameNumList[this.focusIdx];
          this.reqestRoundInfo(gameNum);
        };
        _proto.onSliderPercentChange = function onSliderPercentChange() {
          if (!this.gameNumList && !this.curHandData) {
            return;
          }
          var persent = this.slider.percent;
          this.refreshSelectValueBySliderPercent(persent, true);
        };
        _proto.onSliderPercentEnd = function onSliderPercentEnd() {
          if (!this.gameNumList && !this.curHandData) {
            return;
          }
          this.isNeedSyncSlider = true;
          var persent = this.slider.percent;
          this.refreshSelectValueBySliderPercent(persent, true);
          var gameNum = this.gameNumList ? this.gameNumList[this.focusIdx] : this.curHandData.gameNumList[this.focusIdx];
          this.reqestRoundInfo(gameNum);
        };
        _proto.onGameChanged = function onGameChanged() {
          var index = this.m_indexControl.selectedIndex;
          var title1 = LanguageManager.get('TXT_1260');
          var title2 = LanguageManager.get('TXT_1261');
          if (index == 0) {
            this.m_btnInfo.title = Utils.formatStr('[color=#1effb0]%s[/color]', title1);
            this.m_btnDetail.title = Utils.formatStr('[color=#636c76]%s[/color]', title2);
          } else {
            this.m_btnInfo.title = Utils.formatStr('[color=#1effb0]%s[/color]', title1);
            this.m_btnDetail.title = Utils.formatStr('[color=#636c76]%s[/color]', title2);
          }
        };
        _proto.getBBNum = function getBBNum(value) {
          return Utils.formatStr(' (%fBB)', Utils.formatBBNum(value, this.shareSpace.texasGameData.sbNum));
        };
        _proto.refresIndexNumber = function refresIndexNumber() {
          var index = this.focusIdx;
          if (this.totalGameNum == 0) {
            index = -1;
          }
          this.m_labelIndex.text = Utils.formatStr('[color=#1EFFB0]%s[/color]', index + 1) + Utils.formatStr('[color=#ffffff]/%s[/color]', this.totalGameNum);
        };
        _proto.refreshStarInfo = function refreshStarInfo() {
          if (this.detailInfo) {
            this.m_labelStarInfo.text = Utils.formatStr('%s/%s', this.starCount, this.totalGameNum);
          }
        };
        _proto.refreshTopInfo = function refreshTopInfo() {
          if (!this.canLoadData) {
            return;
          }
          this.loadingManager.hide();
          if (this.totalGameNum == 0 || !this.curHandData) {
            this.totalGameNum = 0;
            this.m_emptyCtrl.selectedIndex = 1;
            this.refresIndexNumber();
            return;
          }
          this.m_emptyCtrl.selectedIndex = 0;
          var detail = this.curHandData.roundDetail;
          if (!detail) {
            return;
          }
          this.refreshStarInfo();
          var gameTime = detail.time ? detail.time : 0;
          var gameId = detail.collectId + '';
          if (gameId.length > 10) {
            gameTime = parseInt(gameId.substring(0, 10));
            gameId = gameId.substring(10, gameId.length);
          }
          this.refreshTopTime(gameTime);
          this.m_labelGameId.text = 'ID: ' + gameId; //Utils.formatDisplayNickName(detail.collectId + '', 15);
          var sbNum = this.shareSpace.texasGameData.sbNum;
          var smallBlind = Utils.formatDoubleValue(sbNum);
          var anteNum = this.shareSpace.texasGameData.anteNum;
          anteNum = Utils.formatDoubleValue(anteNum);
          if (anteNum && anteNum > 0) {
            this.m_labelBlind.text = Utils.toFormat(smallBlind) + "/" + Utils.toFormat(smallBlind * 2) + ("(" + Utils.toFormat(anteNum) + ")") + ' ' + GameConst.getGameTypeDesc(this.shareSpace.texasGameData.gameType);
          } else {
            this.m_labelBlind.text = Utils.toFormat(smallBlind) + "/" + Utils.toFormat(smallBlind * 2) + ' ' + GameConst.getGameTypeDesc(this.shareSpace.texasGameData.gameType);
          }
          this.parseRoundInfo(detail);
          this.refresIndexNumber();
          var totaoPot = detail.pot ? detail.pot : 0;
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (tableInfo.needTimes) {
            totaoPot = totaoPot / 100;
          }
          this.m_labelTotalPot.text = Utils.toFormat(totaoPot) + this.getBBNum(totaoPot);
          this.m_btnPre.alpha = this.focusIdx > 0 ? 1 : 0.3;
          this.m_btnNext.alpha = this.focusIdx < this.totalGameNum - 1 ? 1 : 0.3;
          this.m_btnStar.visible = false;
          // 先隐藏
          // if (!this.shareSpace.texasGameData.isMatch) {
          //     for (let index = 0; index < this.detailInfo.playerInfos.length; index++) {
          //         const player = this.detailInfo.playerInfos[index];
          //         if (player.playerid == RoleData.inst.playerID) {
          //             this.m_btnStar.visible = true;
          //         }
          //     }
          // }
          this.m_labelStarInfo.visible = this.m_btnStar.visible;
          if (this.isNeedSyncSlider) {
            this.isNeedSyncSlider = false;
            this.setCurIdx(this.focusIdx);
          }
          var cardNum = this.shareSpace.texasGameData.handPokerCount;
          var view = this.m_listContent.getChildAt(0);
          view.setInfoList(this.detailInfo.playerInfos, cardNum);
          var viewDetail = this.m_listContent.getChildAt(1);
          var arr = [];
          if (this.operateData) {
            var itemPre = {
              type: 1,
              data: {}
            };
            itemPre.data = this.makePreflopDetail();
            itemPre.data.cardNum = cardNum;
            arr.push(itemPre);
            var preOp = this.makePreflopOp();
            for (var index = 0; index < preOp.length; index++) {
              var element = preOp[index];
              arr.push(element);
            }
            var flopDetail = this.makeFlopDetail();
            for (var _index = 0; _index < flopDetail.length; _index++) {
              var _element = flopDetail[_index];
              arr.push(_element);
            }
            var flopOp = this.makeflopOp();
            for (var _index2 = 0; _index2 < flopOp.length; _index2++) {
              var _element2 = flopOp[_index2];
              arr.push(_element2);
            }
            var turnDetail = this.makeTurnDetail();
            for (var _index3 = 0; _index3 < turnDetail.length; _index3++) {
              var _element3 = turnDetail[_index3];
              arr.push(_element3);
            }
            var turnOp = this.makeTurnOp();
            for (var _index4 = 0; _index4 < turnOp.length; _index4++) {
              var _element4 = turnOp[_index4];
              arr.push(_element4);
            }
            var riverDetail = this.makeRiverDetail();
            for (var _index5 = 0; _index5 < riverDetail.length; _index5++) {
              var _element5 = riverDetail[_index5];
              arr.push(_element5);
            }
            var riverOp = this.makeRiverOp();
            for (var _index6 = 0; _index6 < riverOp.length; _index6++) {
              var _element6 = riverOp[_index6];
              arr.push(_element6);
            }
            var showDown = this.makeShowDownInfo();
            for (var _index7 = 0; _index7 < showDown.length; _index7++) {
              var _element7 = showDown[_index7];
              arr.push(_element7);
            }
            var players = this.makePlayersInfo();
            for (var _index8 = 0; _index8 < players.length; _index8++) {
              var _element8 = players[_index8];
              arr.push(_element8);
            }
          }
          viewDetail.setInfoList(arr, cardNum);
          this.refreshCollectInfo();
        };
        _proto.makePreflopDetail = function makePreflopDetail() {
          var detail = this.curHandData.roundDetail;
          var handcards = [];
          var ante = 0;
          if (detail) {
            for (var index = 0; index < detail.list.length; index++) {
              var element = detail.list[index];
              if (element.playerid == RoleData.inst.playerID) {
                handcards = element.handcards;
                break;
              }
            }
            if (this.operateData) {
              var pre_flop = this.operateData.pre_flop;
              if (pre_flop && pre_flop.actions) {
                for (var _index9 = 0; _index9 < pre_flop.actions.length; _index9++) {
                  var info = pre_flop.actions[_index9];
                  if (info.type == GameConst.ETexasRetrospectAction.ACTION_ANTE) {
                    ante = ante + info.chips;
                  }
                }
              }
              if (pre_flop && pre_flop.pots && pre_flop.pots.length > 0) {
                this.showdownPots = this.operateData.pre_flop.pots;
              }
            }
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            if (tableInfo.needTimes) {
              ante = ante / 100;
            }
          }
          return {
            handcards: handcards,
            ante: ante,
            smallBlind: this.shareSpace.texasGameData.sbNum
          };
        };
        _proto.makeFlopDetail = function makeFlopDetail() {
          var detail = this.curHandData.roundDetail;
          var isFlop = false;
          var infos = [];
          if (detail && detail.publicCards && detail.publicCards.length >= 3) {
            isFlop = true;
          }
          if (this.operateData && isFlop) {
            var datas = this.operateData.flop;
            if (datas) {
              var tableInfo = this.shareSpace.texasGameData.tableInfo;
              var pots = datas.pots ? datas.pots : [];
              var sidePots = [];
              var totalPots = 0;
              for (var index = 0; index < pots.length; index++) {
                var element = pots[index];
                totalPots += element * this.tRate;
                if (element > 0) {
                  sidePots.push(element);
                }
              }
              if (tableInfo.needTimes) {
                totalPots = totalPots / 100;
              }
              var cards = detail.publicCards ? detail.publicCards : [];
              if (pots.length > 0) {
                this.showdownPots = pots;
              }
              var item1 = {
                type: 2,
                data: {
                  pot: totalPots,
                  cards: cards,
                  name: 'TXT_1257',
                  num: 3,
                  pots: sidePots,
                  smallBlind: this.shareSpace.texasGameData.sbNum
                }
              };
              infos.push(item1);
            }
          }
          return infos;
        };
        _proto.makeflopOp = function makeflopOp() {
          var infos = [];
          if (this.operateData) {
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            var datas = this.operateData.flop;
            if (datas && datas.actions) {
              for (var index = 0; index < datas.actions.length; index++) {
                var info = datas.actions[index];
                if (info.type != GameConst.ETexasRetrospectAction.ACTION_ANTE) {
                  var item = {
                    type: 5,
                    data: {}
                  };
                  var chireID = info.seatid + 1;
                  var name = this.getNameBySeatid(chireID);
                  var isSelf = this.getIsMySelfBySeatid(chireID);
                  var posType = this.getPosFlagByChairID(chireID);
                  var opType = GameConst.ACTION_TYPE_abbreviation[info.type];
                  var opColor = GameConst.getActionTypeColor(info.type);
                  var opBgColor = GameConst.ACTION_BG_COLOR[info.type];
                  var chips = info.chips * this.tRate;
                  var leftChips = info.hand_chips * this.tRate;
                  if (tableInfo.needTimes) {
                    chips = chips / 100;
                    leftChips = leftChips / 100;
                  }
                  item.data = {
                    name: name,
                    isSelf: isSelf,
                    posType: posType,
                    opType: opType,
                    opColor: opColor,
                    opBgColor: opBgColor,
                    chips: chips,
                    leftChips: leftChips,
                    smallBlind: this.shareSpace.texasGameData.sbNum
                  };
                  infos.push(item);
                }
              }
            }
          }
          if (infos.length > 0) {
            infos.push({
              type: 0,
              data: {}
            });
          }
          return infos;
        };
        _proto.makeTurnDetail = function makeTurnDetail() {
          var detail = this.curHandData.roundDetail;
          var isTurn = false;
          var infos = [];
          if (detail && detail.publicCards && detail.publicCards.length >= 4) {
            isTurn = true;
          }
          if (this.operateData && isTurn) {
            var datas = this.operateData.turn;
            if (datas) {
              var tableInfo = this.shareSpace.texasGameData.tableInfo;
              var pots = datas.pots ? datas.pots : [];
              var sidePots = [];
              var totalPots = 0;
              for (var index = 0; index < pots.length; index++) {
                var element = pots[index];
                totalPots += element * this.tRate;
                if (element > 0) {
                  sidePots.push(element);
                }
              }
              if (tableInfo.needTimes) {
                totalPots = totalPots / 100;
              }
              var cards = detail.publicCards ? detail.publicCards : [];
              if (pots.length > 0) {
                this.showdownPots = pots;
              }
              var item1 = {
                type: 3,
                data: {
                  pot: totalPots,
                  cards: cards,
                  name: 'TXT_1258',
                  num: 4,
                  pots: sidePots,
                  smallBlind: this.shareSpace.texasGameData.sbNum
                }
              };
              infos.push(item1);
            }
          }
          return infos;
        };
        _proto.makeTurnOp = function makeTurnOp() {
          var infos = [];
          if (this.operateData) {
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            var datas = this.operateData.turn;
            if (datas && datas.actions) {
              for (var index = 0; index < datas.actions.length; index++) {
                var info = datas.actions[index];
                if (info.type != GameConst.ETexasRetrospectAction.ACTION_ANTE) {
                  var item = {
                    type: 5,
                    data: {}
                  };
                  var chireID = info.seatid + 1;
                  var name = this.getNameBySeatid(chireID);
                  var isSelf = this.getIsMySelfBySeatid(chireID);
                  var posType = this.getPosFlagByChairID(chireID);
                  var opType = GameConst.ACTION_TYPE_abbreviation[info.type];
                  var opColor = GameConst.getActionTypeColor(info.type);
                  var opBgColor = GameConst.ACTION_BG_COLOR[info.type];
                  var chips = info.chips * this.tRate;
                  var leftChips = info.hand_chips * this.tRate;
                  if (tableInfo.needTimes) {
                    chips = chips / 100;
                    leftChips = leftChips / 100;
                  }
                  item.data = {
                    name: name,
                    isSelf: isSelf,
                    posType: posType,
                    opType: opType,
                    opColor: opColor,
                    opBgColor: opBgColor,
                    chips: chips,
                    leftChips: leftChips,
                    smallBlind: this.shareSpace.texasGameData.sbNum
                  };
                  infos.push(item);
                }
              }
            }
          }
          if (infos.length > 0) {
            infos.push({
              type: 0,
              data: {}
            });
          }
          return infos;
        };
        _proto.makeRiverDetail = function makeRiverDetail() {
          var detail = this.curHandData.roundDetail;
          var isRiver = false;
          var infos = [];
          if (detail && detail.publicCards && detail.publicCards.length >= 5) {
            isRiver = true;
          }
          if (this.operateData && isRiver) {
            var datas = this.operateData.river;
            if (datas) {
              var tableInfo = this.shareSpace.texasGameData.tableInfo;
              var pots = datas.pots ? datas.pots : [];
              var sidePots = [];
              var totalPots = 0;
              for (var index = 0; index < pots.length; index++) {
                var element = pots[index];
                totalPots += element * this.tRate;
                if (element > 0) {
                  sidePots.push(element);
                }
              }
              if (tableInfo.needTimes) {
                totalPots = totalPots / 100;
              }
              var cards = detail.publicCards ? detail.publicCards : [];
              if (pots.length > 0) {
                this.showdownPots = pots;
              }
              var item1 = {
                type: 4,
                data: {
                  pot: totalPots,
                  cards: cards,
                  name: 'TXT_1259',
                  num: 5,
                  pots: sidePots,
                  smallBlind: this.shareSpace.texasGameData.sbNum
                }
              };
              infos.push(item1);
            }
          }
          return infos;
        };
        _proto.makeRiverOp = function makeRiverOp() {
          var infos = [];
          if (this.operateData) {
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            var datas = this.operateData.river;
            if (datas && datas.actions) {
              for (var index = 0; index < datas.actions.length; index++) {
                var info = datas.actions[index];
                if (info.type != GameConst.ETexasRetrospectAction.ACTION_ANTE) {
                  var item = {
                    type: 5,
                    data: {}
                  };
                  var chireID = info.seatid + 1;
                  var name = this.getNameBySeatid(chireID);
                  var isSelf = this.getIsMySelfBySeatid(chireID);
                  var posType = this.getPosFlagByChairID(chireID);
                  var opType = GameConst.ACTION_TYPE_abbreviation[info.type];
                  var opColor = GameConst.getActionTypeColor(info.type);
                  var opBgColor = GameConst.ACTION_BG_COLOR[info.type];
                  var chips = info.chips * this.tRate;
                  var leftChips = info.hand_chips * this.tRate;
                  if (tableInfo.needTimes) {
                    chips = chips / 100;
                    leftChips = leftChips / 100;
                  }
                  item.data = {
                    name: name,
                    isSelf: isSelf,
                    posType: posType,
                    opType: opType,
                    opColor: opColor,
                    opBgColor: opBgColor,
                    chips: chips,
                    leftChips: leftChips,
                    smallBlind: this.shareSpace.texasGameData.sbNum
                  };
                  infos.push(item);
                }
              }
            }
          }
          if (infos.length > 0) {
            infos.push({
              type: 0,
              data: {}
            });
          }
          return infos;
        };
        _proto.getNameBySeatid = function getNameBySeatid(seatid) {
          var detail = this.curHandData.roundDetail;
          var name = '';
          if (detail) {
            for (var index = 0; index < detail.list.length; index++) {
              var element = detail.list[index];
              if (element.chairId == seatid) {
                name = element.name;
                break;
              }
            }
          }
          return name;
        };
        _proto.getIsMySelfBySeatid = function getIsMySelfBySeatid(seatid) {
          var detail = this.curHandData.roundDetail;
          var flag = false;
          if (detail) {
            for (var index = 0; index < detail.list.length; index++) {
              var element = detail.list[index];
              if (element.chairId == seatid && element.playerid == RoleData.inst.playerID) {
                flag = true;
                break;
              }
            }
          }
          return flag;
        };
        _proto.getPosFlagByChairID = function getPosFlagByChairID(seatid) {
          if (!this.detailInfo) {
            return '';
          }
          var name = '';
          for (var index = 0; index < this.detailInfo.playerInfos.length; index++) {
            var element = this.detailInfo.playerInfos[index];
            if (element.chair_id == seatid) {
              name = element.posType;
              break;
            }
          }
          return name;
        };
        _proto.makePreflopOp = function makePreflopOp() {
          var infos = [];
          if (this.operateData) {
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            var pre_flop = this.operateData.pre_flop;
            if (pre_flop && pre_flop.actions) {
              for (var index = 0; index < pre_flop.actions.length; index++) {
                var info = pre_flop.actions[index];
                if (info.type != GameConst.ETexasRetrospectAction.ACTION_ANTE) {
                  var item = {
                    type: 5,
                    data: {}
                  };
                  var chireID = info.seatid + 1;
                  var name = this.getNameBySeatid(chireID);
                  var isSelf = this.getIsMySelfBySeatid(chireID);
                  var posType = this.getPosFlagByChairID(chireID);
                  var opType = GameConst.ACTION_TYPE_abbreviation[info.type];
                  var opColor = GameConst.getActionTypeColor(info.type);
                  var opBgColor = GameConst.ACTION_BG_COLOR[info.type];
                  var chips = info.chips * this.tRate;
                  var leftChips = info.hand_chips * this.tRate;
                  if (tableInfo.needTimes) {
                    chips = chips / 100;
                    leftChips = leftChips / 100;
                  }
                  item.data = {
                    name: name,
                    isSelf: isSelf,
                    posType: posType,
                    opType: opType,
                    opColor: opColor,
                    opBgColor: opBgColor,
                    chips: chips,
                    leftChips: leftChips,
                    smallBlind: this.shareSpace.texasGameData.sbNum
                  };
                  infos.push(item);
                }
              }
            }
          }
          if (infos.length > 0) {
            infos.push({
              type: 0,
              data: {}
            });
          }
          return infos;
        };
        _proto.makeShowDownInfo = function makeShowDownInfo() {
          var infos = [];
          if (this.operateData) {
            var tableInfo = this.shareSpace.texasGameData.tableInfo;
            var showdownPots = this.showdownPots;
            var calc = this.operateData.calc;
            var pots = [];
            if (calc) {
              pots = calc.pots ? calc.pots : [];
            }
            if ((!(pots instanceof Array) || pots.length == 0) && showdownPots) {
              pots = showdownPots;
            }
            var totalPots = 0;
            var sidePots = [];
            for (var index = 0; index < pots.length; index++) {
              var element = pots[index];
              totalPots += element * this.tRate;
              if (element > 0) {
                sidePots.push(element);
              }
            }
            if (tableInfo.needTimes) {
              totalPots = totalPots / 100;
            }
            var item1 = {
              type: 6,
              data: {
                pot: totalPots,
                pots: sidePots,
                smallBlind: this.shareSpace.texasGameData.sbNum
              }
            };
            infos.push(item1);
          }
          return infos;
        };
        _proto.makePlayersInfo = function makePlayersInfo() {
          var infos = [];
          if (this.detailInfo && this.detailInfo.playerInfos) {
            if (this) {
              for (var index = 0; index < this.detailInfo.playerInfos.length; index++) {
                var element = this.detailInfo.playerInfos[index];
                var item = {
                  type: 7,
                  data: element
                };
                infos.push(item);
              }
            }
          }
          return infos;
        };
        _proto.onProgressCtrlChanged = function onProgressCtrlChanged() {
          if (this.m_progressCtrl.selectedIndex == 1) {
            this.setCurIdx(this.focusIdx);
            this.slider.on(FSlider.EVENT_SLIDER_PERCENT, this.onSliderPercentChange, this);
          } else {
            this.slider.off(FSlider.EVENT_SLIDER_PERCENT, this.onSliderPercentChange, this);
          }
        };
        _proto.setCurIdx = function setCurIdx(idx) {
          if (this.m_progressCtrl.selectedIndex == 0 || !this.slider.enabled) {
            return;
          }
          this.focusIdx = idx;
          var persent = 0;
          if (idx >= this.totalGameNum - 1) {
            persent = 1;
          } else {
            var count = this.totalGameNum > 0 ? this.totalGameNum : 1;
            persent = (idx + 0.5) / count;
          }
          persent = persent > 1 ? 1 : persent;
          this.slider.percent = persent;
          this.refreshSelectValueBySliderPercent(persent, false);
        };
        _proto.refreshSelectValueBySliderPercent = function refreshSelectValueBySliderPercent(percent, setIndex) {
          var values = this.totalGameNum;
          var count = values > 0 ? values : 0;
          if (count == 0) {
            return;
          }
          var persent = percent ? percent : this.slider.percent;
          var idx = Math.floor(count * persent + 0.01);
          if (idx >= count) {
            idx = count - 1;
          }
          if (setIndex) {
            this.focusIdx = idx;
          }
          this.refresIndexNumber();
        };
        _proto.refreshCollectInfo = function refreshCollectInfo() {
          if (this.detailInfo) {
            var detail = this.detailInfo;
            this.m_starCtrl.selectedIndex = detail.isCollect ? 1 : 0;
          } else {
            this.m_starCtrl.selectedIndex = 0;
          }
        };
        _proto.reqestRoundInfo = function reqestRoundInfo(gamenum) {
          var _this3 = this;
          this.shareSpace.roomProxy.getRoundInfo(gamenum, true, function (roundInfo) {
            if (roundInfo) {
              _this3.focusIdx = roundInfo.total;
              if (_this3.focusIdx > 0) {
                _this3.focusIdx = _this3.focusIdx - 1;
              }
              var list = roundInfo.gameNumList ? roundInfo.gameNumList : [];
              list = list.reverse();
              if (roundInfo.gameNum) {
                for (var index = 0; index < list.length; index++) {
                  var element = list[index];
                  if (element == roundInfo.gameNum) {
                    _this3.focusIdx = index;
                    break;
                  }
                }
              }
              _this3.curHandData = roundInfo;
              if (list) {
                _this3.gameNumList = list;
                roundInfo.gameNumList = _this3.gameNumList;
                _this3.curHandData.gameNumList = _this3.gameNumList;
              }
              var opData = roundInfo.roundDetail ? roundInfo.roundDetail.operate : null;
              if (opData) {
                _this3.operateData = JSON.parse(opData);
              }
              _this3.totalGameNum = roundInfo.total;
            }
            _this3.refreshTopInfo();
          });
        };
        _proto.getLastRoundListInfo = function getLastRoundListInfo() {
          var _this4 = this;
          this.shareSpace.roomProxy.getLastRoundListInfo(function (roundListInfo) {
            _this4.starCount = 0;
            if (roundListInfo) {
              var list = roundListInfo.list;
              if (list) {
                for (var index = 0; index < list.length; index++) {
                  var element = list[index];
                  if (element.isCollect) {
                    _this4.starCount += 1;
                  }
                }
              }
            }
            _this4.refreshStarInfo();
          });
        };
        _proto.refreshTopTime = function refreshTopTime(time) {
          var date = new Date(time * 1000);
          var month = (date.getMonth() + 1).toString().padStart(2, '0');
          var day = date.getDate().toString().padStart(2, '0');
          var hours = date.getHours().toString().padStart(2, '0');
          var minutes = date.getMinutes().toString().padStart(2, '0');
          var char1 = '/';
          var char2 = ':';
          this.m_labelTime.text = "" + month + char1 + day + " " + hours + char2 + minutes;
        };
        _proto.parseRoundInfo = function parseRoundInfo(roundInfo) {
          var info = {
            pot: roundInfo.pot,
            gameNum: roundInfo.gameNum,
            isCollect: roundInfo.isCollect,
            playerInfos: []
          };
          var publicCardInfos = [];
          for (var index = 0; index < roundInfo.publicCards.length; index++) {
            publicCardInfos.push(roundInfo.publicCards[index]);
          }
          var playerInfos = [];
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          for (var _index10 = 0; _index10 < roundInfo.list.length; _index10++) {
            var handcards = [];
            var listItem = roundInfo.list[_index10];
            for (var j = 0; j < listItem.handcards.length; j++) {
              var card = listItem.handcards[j];
              handcards.push(card);
            }
            var show_handcards = [];
            for (var _j = 0; _j < listItem.showHandcards.length; _j++) {
              var _card = listItem.showHandcards[_j];
              show_handcards.push(_card);
            }
            var hightlight_cards = [];
            for (var _j2 = 0; _j2 < listItem.hightlightCards.length; _j2++) {
              var _card2 = listItem.hightlightCards[_j2];
              hightlight_cards.push(_card2);
            }
            var chip = listItem.chip ? listItem.chip : 0;
            if (tableInfo.needTimes) {
              chip = chip / 100;
            }
            var handcardsTMp = listItem.playerid == RoleData.inst.playerID ? handcards : show_handcards;
            var userCards = [];
            if (roundInfo.gameType && handcardsTMp && publicCardInfos && handcardsTMp.length > 0 && publicCardInfos.length > 0) {
              var _PokerParser$parseCar = PokerParser.parseCardType(handcardsTMp, publicCardInfos, roundInfo.gameType),
                cardType = _PokerParser$parseCar[0],
                cardCodes = _PokerParser$parseCar[1];
              userCards = cardCodes;
            }
            var playInfo = {
              game_type: roundInfo.gameType ? roundInfo.gameType : 1,
              // 牌局类型(1=德州扑克，2=6+)
              playerid: listItem.playerid,
              // 玩家ID
              name: listItem.name ? listItem.name : '',
              // 玩家昵称
              icon: listItem.icon ? listItem.icon : '',
              // 玩家头像
              handcards: handcards,
              // 私牌
              show_handcards: show_handcards,
              // 已亮的私牌
              hightlight_cards: hightlight_cards,
              // 高亮的牌
              result: listItem.result ? listItem.result : 2,
              // 输赢结果类型  1: 胜局 2: 输局
              is_fold: listItem.isFold ? listItem.isFold : false,
              // 是否弃牌
              chip: chip,
              // 如果是胜利 就是赢的筹码  如果是失败 就是输掉的筹码
              poker_type: listItem.pokerType ? listItem.pokerType : 1,
              // 牌型(1=单牌，2=一对，3=两对，4=三条，5=顺子，6=同花，7=葫芦，8=四条，9=同花顺，10=皇家同花顺)
              // big_poker_award  = listItem.big_poker_award, // 大牌奖励
              // jackpot_fee      = listItem.jackpot_fee,   // Jackpot
              // insurance        = listItem.insurance,     // 保险
              publicCardInfos: publicCardInfos,
              // 公牌
              chair_id: listItem.chairId ? listItem.chairId : 0,
              // 玩家位置
              record: listItem.record ? listItem.record : [],
              // 操作记录
              typeUseCards: userCards,
              smallBllind: this.shareSpace.texasGameData.sbNum,
              cover: listItem.cover
            };
            playerInfos.push(playInfo);
          }
          info.playerInfos = this.sortPlayerInfoByBigBlindPos(playerInfos, roundInfo);
          this.detailInfo = info;
        };
        _proto.sortPlayerInfoByBigBlindPos = function sortPlayerInfoByBigBlindPos(playerInfos, roundInfo) {
          var bigBlindPos = roundInfo.bbChairId;
          var isEmptyBanker = true; // 是否是空庄,在list里面找btn_chair_id位置是否有人，没有人就是空庄
          var isEmptySB = true; // 是否是空小盲，在list里面找sb_chair_id位置是否有人，没有人就是空小盲
          for (var _index11 = 0; _index11 < roundInfo.list.length; _index11++) {
            var round = roundInfo.list[_index11];
            if (roundInfo.btnChairId == round.chairId) {
              isEmptyBanker = false;
            }
            if (roundInfo.sbChairId == round.chairId) {
              isEmptySB = false;
            }
            if (!isEmptyBanker && !isEmptySB) {
              break;
            }
          }
          playerInfos = playerInfos.sort(function (a, b) {
            return a.chair_id - b.chair_id;
          });
          var count = playerInfos.length;
          var posTypes;
          if (isEmptyBanker && isEmptySB) {
            posTypes = PokerParser.POS_TYPEs_EMPTYBTNANDSB[count];
          } else if (isEmptyBanker) {
            posTypes = PokerParser.POS_TYPEs_EMPTYBTN[count];
          } else if (isEmptySB) {
            posTypes = PokerParser.POS_TYPEs_EMPTYSB[count];
          } else {
            posTypes = PokerParser.POS_TYPEs[count];
          }
          var infos = [];
          var infos1 = [];
          var index = -1;
          for (var i = 0; i < playerInfos.length; i++) {
            var playerINfo = playerInfos[i];
            if (index >= 0 || playerINfo.chair_id == bigBlindPos) {
              if (index < 0) {
                index = i;
              }
              var sortIdx = infos.length;
              playerINfo.posType = posTypes[sortIdx];
              infos[sortIdx] = playerINfo;
            } else {
              infos1.push(playerINfo);
            }
          }
          if (infos1.length > 0) {
            for (var _i = 0; _i < infos1.length; _i++) {
              var _playerINfo = infos1[_i];
              var _sortIdx = infos.length;
              _playerINfo.posType = posTypes[_sortIdx];
              infos[_sortIdx] = _playerINfo;
            }
          }
          return infos;
        };
        _proto.onBtnCloseClick = function onBtnCloseClick() {
          this.closeView();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onBtnCloseClick();
          }
        };
        _createClass(TexasRetrospectLayer, [{
          key: "slider",
          get:
          // private loading: Loading;

          function get() {
            return this.m_slider;
          }
        }, {
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_retrospectController.selectedIndex == 1;
          }
        }]);
        return TexasRetrospectLayer;
      }(UI_TexasRetrospectLayer), (_applyDecoratedDescriptor(_class2.prototype, "onBtnStarClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnStarClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnPreClick", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnPreClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnNextClick", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnNextClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnCloseClick", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCloseClick"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRetrospectPotsItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasRetrospectPotsItem.ts', './GameDecorators.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UI_TexasRetrospectPotsItem, CustomFguiClass, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasRetrospectPotsItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "97707GLZiRFYLJMDoS3i6tx", "TexasRetrospectPotsItem", undefined);
      var TexasRetrospectPotsItem = exports('TexasRetrospectPotsItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasRetrospectPo) {
        _inheritsLoose(TexasRetrospectPotsItem, _UI_TexasRetrospectPo);
        function TexasRetrospectPotsItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRetrospectPo.call.apply(_UI_TexasRetrospectPo, [this].concat(args)) || this;
          _this._curPlayerHandPoker = [];
          return _this;
        }
        var _proto = TexasRetrospectPotsItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRetrospectPo.prototype.onConstruct.call(this);
          this.name = 'TexasRetrospectPotsItem';
        }
        // pot
        ;

        _proto.setData = function setData(pots) {
          var str = '';
          for (var index = 0; index < pots.length; index++) {
            var pot = pots[index];
            var potStr = Utils.toFormat(Utils.formatDoubleValue(pot));
            if (index == 0) {
              str = Utils.formatStr('Main(%s)', potStr);
            } else {
              str = str + Utils.formatStr(' Side(%s)', potStr);
            }
            if (index == 3) {
              str = str + '\n';
            }
          }
          this.m_lablePotDetail.text = str;
          this.height = this.m_lablePotDetail.height + 20;
        };
        return TexasRetrospectPotsItem;
      }(UI_TexasRetrospectPotsItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasRoomMenuLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasRoomMenuLayer.ts', './CDKDecorators.ts', './GameDecorators.ts', './RoleData.ts', './GameConst.ts', './LanguageManage.ts', './TexasGameData.ts', './LocalStorageTool.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, UI_TexasRoomMenuLayer, SafeTimeInterval, CustomFguiClass, RoleData, GameConst, LanguageManager, TexasMttClientState, LocalStorageTool;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_TexasRoomMenuLayer = module.default;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      TexasMttClientState = module.TexasMttClientState;
    }, function (module) {
      LocalStorageTool = module.LocalStorageTool;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2;
      cclegacy._RF.push({}, "b1816qawh5H5aBzPG0gqFsN", "TexasRoomMenuLayer", undefined);
      var TexasRoomMenuLayer = exports('TexasRoomMenuLayer', (_dec = SafeTimeInterval(400), _dec2 = SafeTimeInterval(), _dec3 = SafeTimeInterval(400), _dec4 = SafeTimeInterval(), _dec5 = SafeTimeInterval(), _dec6 = SafeTimeInterval(), _dec7 = SafeTimeInterval(), _dec8 = SafeTimeInterval(), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasRoomMenuLaye) {
        _inheritsLoose(TexasRoomMenuLayer, _UI_TexasRoomMenuLaye);
        function TexasRoomMenuLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasRoomMenuLaye.call.apply(_UI_TexasRoomMenuLaye, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          return _this;
        }
        var _proto = TexasRoomMenuLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasRoomMenuLaye.prototype.onConstruct.call(this);
          this.m_btnRebuy.visible = false;
          this.m_btnAddon.visible = false;
          this.m_btnChat.visible = false; // 聊天
          this.m_btnChip.visible = false; // 补充筹码
          this.m_btnRank.visible = false;
          this.m_btnRetrospect.visible = false;
          this.m_btnExpression.visible = false; // 表情
          this.m_btnMenu.onClick(this.onBtnMenuClick, this);
          this.m_btnChip.onClick(this.onBtnChipClick, this);
          this.m_btnExpression.onClick(this.onBtnExpressionClick, this);
          this.m_btnRetrospect.onClick(this.onBtnRetrospectClick, this);
          this.m_btnChat.onClick(this.onBtnChatClick, this);
          this.m_btnRank.onClick(this.onBtnRankClick, this);
          this.m_btnAddon.onClick(this.onAddonClick, this);
          this.m_btnRebuy.onClick(this.onRebuyClick, this);
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.enableDeviceBackButtonHandler();
        };
        _proto.reset = function reset() {
          this.m_btnRebuy.visible = false;
          this.m_btnAddon.visible = false;
          this.m_btnChat.visible = false;
          this.m_btnChip.visible = false;
          this.m_btnRank.visible = false;
          this.m_btnExpression.visible = false;
          this.m_btnRetrospect.visible = false;
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.shareSpace.texasGamePage.popupLayer.menuLayer.onBtnExitGameClick();
          }
        };
        _proto.freshReadPoint = function freshReadPoint() {
          var showReadPoint = '0';
          var rule = LocalStorageTool.getString('show_host_rule');
          if (rule && rule.length > 0) {
            showReadPoint = rule;
          }
          var gameData = this.shareSpace.texasGameData;
          if (gameData.isMatch) {
            var allInTime = this.shareSpace.texasGameData.mttRule.afkActTimesToAllin;
            var show = false;
            if (showReadPoint == '0' && this.shareSpace.texasGamePage.hostReadPoint && allInTime > 0) {
              show = true;
            }
            this.m_btnMenu.m_read_point.visible = show;
          }
        };
        _proto.updateGameMenuStatus = function updateGameMenuStatus() {
          // 设置各个按钮的可见性
          var gameData = this.shareSpace.texasGameData;
          var curPlayerInfo = gameData.getChairPlayerInfoByPlayerID(RoleData.inst.playerID);
          var curPlayerInChair = !!curPlayerInfo && curPlayerInfo.chairId > 0;
          this.m_btnChip.visible = !gameData.isMatch && !gameData.isClubRoom && curPlayerInChair;
          if (gameData.isMatch) {
            this.freshReadPoint();
            var addOnNum = this.shareSpace.texasGameData.mttInfo.rule.AddOnTimes;
            var blindround = this.shareSpace.texasGameData.mttInfo.gameinfo.blindround;
            var rebuyNum = this.shareSpace.texasGameData.mttInfo.rule.reBuyNum;
            if (rebuyNum > 0) {
              var reBuyLevel = this.shareSpace.texasGameData.mttInfo.rule.endJoinTime;
              var isAllowRebuy = blindround <= reBuyLevel;
              this.m_btnRebuy.visible = isAllowRebuy && !gameData.isLookOn && curPlayerInChair;
            } else {
              this.m_btnRebuy.visible = false;
            }
            if (addOnNum > 0) {
              var addOnLevel = this.shareSpace.texasGameData.mttInfo.rule.endJoinTime;
              var isAllowAddon = blindround == addOnLevel;
              this.m_btnAddon.visible = isAllowAddon && !gameData.isLookOn && gameData.mttState.value == TexasMttClientState.ADDON && gameData.mttState.addonNum == 0;
            } else {
              this.m_btnAddon.visible = false;
            }
          } else {
            this.m_btnMenu.m_read_point.visible = false;
            this.m_btnRebuy.visible = false;
            this.m_btnAddon.visible = false;
          }
          this.m_btnExpression.visible = curPlayerInfo && curPlayerInfo.chairId > 0;
          this.m_btnRetrospect.visible = gameData.tableInfo && gameData.tableInfo.isOpen && gameData.tableInfo.roomStatus && gameData.tableInfo.roomStatus > 0;
          if (this.shareSpace.texasGameData.isMatch && this.shareSpace.texasGameData.isLookOn || !this.shareSpace.texasGameData.roomId || this.shareSpace.texasGameData.roomId == undefined) {
            this.m_btnRetrospect.visible = false;
          }
          this.m_btnRank.visible = true;
          this.m_btnChat.visible = (!gameData.isMatch || gameData.isMatch && !gameData.mttInfo.rule.banChatting) && this.shareSpace.texasGameData.roomId && this.shareSpace.texasGameData.roomId > 0;
          this.forceUpdateRecursion();
        };
        _proto.onBtnExpressionClick = function onBtnExpressionClick() {
          this.shareSpace.texasGamePage.popupLayer.showExpressionDialog();
        };
        _proto.onBtnChipClick = function onBtnChipClick() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (!tableInfo) return;
          var curPlayerInfo = this.shareSpace.texasGameData.getCurPlayerInfo();
          if (!curPlayerInfo) return;
          var chipMax = tableInfo.rule.chipMax;
          var chipMin = tableInfo.rule.chipMin;
          var roleChip;
          if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.gold) {
            roleChip = RoleData.inst.chip;
            if (tableInfo.needTimes) {
              chipMax *= 100;
              chipMin *= 100;
              roleChip *= 100;
            }
          } else if (this.shareSpace.texasGameData.costType == GameConst.EGameCostType.cash) {
            roleChip = RoleData.inst.cash;
            if (tableInfo.needTimes) {
              chipMax *= 100;
              chipMin *= 100;
              roleChip *= 100;
            }
          }
          var maxApply = Math.min(chipMax - curPlayerInfo.chip, roleChip);
          var minApply = Math.max(chipMin - curPlayerInfo.chip, 0);
          if (roleChip < minApply) {
            // 金币或现金不够最小买入了
            this.grootInst.showCenterTip(LanguageManager.get('TXT_1222'));
            return;
          }
          if (maxApply <= 0) {
            // 筹码已经多过最大买入，不能再加了
            this.grootInst.showCenterTip(LanguageManager.get('TXT_937'));
            return;
          }
          this.shareSpace.texasGamePage.popupLayer.showBuyin(false);
        };
        _proto.onBtnMenuClick = function onBtnMenuClick() {
          this.shareSpace.texasGamePage.popupLayer.showRoomMenu();
        };
        _proto.onBtnRetrospectClick = function onBtnRetrospectClick() {
          this.shareSpace.texasGamePage.popupLayer.showGameRetrospect();
        };
        _proto.onBtnChatClick = function onBtnChatClick() {
          this.shareSpace.texasGamePage.popupLayer.showChatLayer();
        };
        _proto.onBtnRankClick = function onBtnRankClick() {
          if (this.shareSpace.texasGameData.isMatch) {
            this.shareSpace.texasGamePage.popupLayer.showRankLayer();
          } else {
            this.shareSpace.texasGamePage.popupLayer.showTableInfoLayer();
          }
        };
        _proto.onAddonClick = function onAddonClick() {
          this.shareSpace.texasGamePage.popupLayer.showAddOn();
        };
        _proto.onRebuyClick = function onRebuyClick() {
          // 主动 rebuy
          this.shareSpace.texasGamePage.popupLayer.showRebuy();
        };
        return TexasRoomMenuLayer;
      }(UI_TexasRoomMenuLayer), (_applyDecoratedDescriptor(_class2.prototype, "onBtnExpressionClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnExpressionClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnChipClick", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnChipClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnMenuClick", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnMenuClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnRetrospectClick", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnRetrospectClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnChatClick", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnChatClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBtnRankClick", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnRankClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAddonClick", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onAddonClick"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRebuyClick", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "onRebuyClick"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasTableInfoLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './GameDecorators.ts', './UI_TexasTableInfoLayer.ts', './fairygui.mjs', './LanguageManage.ts', './PopupLoadingManager.ts', './RoleData.ts', './CDKDecorators.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, Utils, CustomFguiClass, UI_TexasTableInfoLayer, Event, GearXY, LanguageManager, PopupLoadingManager, RoleData, SafeTimeInterval;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasTableInfoLayer = module.default;
    }, function (module) {
      Event = module.Event;
      GearXY = module.GearXY;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      PopupLoadingManager = module.PopupLoadingManager;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "06ecc60RNhCkreGqGko4A4v", "TexasTableInfoLayer", undefined);
      var TexasTableInfoLayer = exports('TexasTableInfoLayer', (_dec = SafeTimeInterval(500), CustomFguiClass(_class = (_class2 = /*#__PURE__*/function (_UI_TexasTableInfoLay) {
        _inheritsLoose(TexasTableInfoLayer, _UI_TexasTableInfoLay);
        function TexasTableInfoLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasTableInfoLay.call.apply(_UI_TexasTableInfoLay, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.infoList = void 0;
          _this.canLoadData = false;
          _this.playerCount = 0;
          _this.loadingManager = void 0;
          return _this;
        }
        var _proto = TexasTableInfoLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasTableInfoLay.prototype.onConstruct.call(this);
          this.m_list.setVirtual();
          this.m_list.itemRenderer = this.renderListItem.bind(this);
          this.m_bgMask.onClick(this.onBtnCloseClick, this);
          this.m_emptyCtrl.selectedIndex = 2;
          this.loadingManager = new PopupLoadingManager(this.m_loadingLayer);
        };
        _proto.reset = function reset() {
          this.m_emptyCtrl.selectedIndex = 2;
          this.infoList = null;
          this.m_list.numItems = 0;
          this.m_list.refreshVirtualList();
          this.playerCount = 0;
          this.m_labelBlind.text = '--';
          this.m_labelPlayerCount.text = '0';
        };
        _proto.closeView = function closeView() {
          this.canLoadData = false;
          this.loadingManager.hide();
          this.shareSpace.texasGamePage.popupLayer.m_tableInfoController.selectedIndex = 0;
          this.disenableDeviceBackButtonHandler();
        };
        _proto.openView = function openView() {
          this.shareSpace.texasGamePage.popupLayer.m_tableInfoController.selectedIndex = 1;
          this.setShow();
          this.enableDeviceBackButtonHandler();
        };
        _proto.setShow = function setShow() {
          if (this.m_emptyCtrl.selectedIndex == 2) {
            this.loadingManager.show();
          }
          this.getGameStatisticsInfo();
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
          this.name = 'TexasTableInfoLayer';
          this.shareSpace.texasGamePage.popupLayer.m_tableInfoController.on(Event.GEAR_STOP, this.onGearStop, this);
        };
        _proto.refreshUI = function refreshUI() {
          if (!this.canLoadData || !this.infoList) {
            return;
          }
          var smallBlind = this.shareSpace.texasGameData.sbNum;
          this.m_labelBlind.text = LanguageManager.get('CCS_TXT_485') + ": " + Utils.toFormat(Utils.formatDoubleValue(smallBlind)) + "/" + Utils.toFormat(Utils.formatDoubleValue(smallBlind * 2));
          this.m_labelPlayerCount.text = '' + this.playerCount;
          this.m_list.numItems = this.infoList.length;
          this.m_list.refreshVirtualList();
          this.m_emptyCtrl.selectedIndex = this.infoList.length > 0 ? 0 : 1;
          this.loadingManager.hide();
        };
        _proto.getGameStatisticsInfo = function getGameStatisticsInfo() {
          var _this2 = this;
          this.shareSpace.roomProxy.getGameStatisticsInfo(function (msgs) {
            _this2.infoList = [];
            if (msgs) {
              var list = msgs.playerStatistics;
              var players = msgs.gamePlayerids;
              list = list ? list : [];
              for (var index = 0; index < list.length; index++) {
                var element = list[index];
                if (players.includes(element.playerid)) {
                  _this2.infoList.push(element);
                } else {
                  var playerInfo = _this2.shareSpace.texasGameData.getChairPlayerInfoByPlayerID(element.playerid);
                  if (playerInfo) {
                    _this2.infoList.push(element);
                  }
                }
              }
            }
            _this2.infoList.sort(function (a, b) {
              if (a.playerid == RoleData.inst.playerID) {
                return -1;
              } else {
                return 0;
              }
            });
            _this2.playerCount = _this2.infoList.length;
            if (_this2.infoList.length > 0) {
              _this2.infoList.push({
                playerid: -1,
                bringInChip: 0,
                winChip: 0,
                bringInChipDouble: 0
              });
            }
            _this2.refreshUI();
          });
        };
        _proto.onBtnCloseClick = function onBtnCloseClick() {
          this.closeView();
        };
        _proto.onDeviceBackButtonClick = function onDeviceBackButtonClick() {
          if (this.node && this.node.isValid) {
            this.onBtnCloseClick();
          }
        };
        _proto.onGearStop = function onGearStop(target, controller, gear) {
          if (target == this && controller == this.shareSpace.texasGamePage.popupLayer.m_tableInfoController && gear instanceof GearXY) {
            if (controller.selectedIndex == 1) {
              this.canLoadData = true;
              this.refreshUI();
            }
          }
        };
        _proto.renderListItem = function renderListItem(index, item) {
          var msg = this.infoList[index];
          item.setData(msg, this.shareSpace.texasGameData.clubExRate);
        };
        _createClass(TexasTableInfoLayer, [{
          key: "isOpen",
          get: function get() {
            return this.shareSpace.texasGamePage.popupLayer.m_tableInfoController.selectedIndex == 1;
          }
        }]);
        return TexasTableInfoLayer;
      }(UI_TexasTableInfoLayer), _applyDecoratedDescriptor(_class2.prototype, "onBtnCloseClick", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, "onBtnCloseClick"), _class2.prototype), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasTableInfoLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TexasTableInfoLayerItem.ts', './GameDecorators.ts', './Utils.ts', './RoleData.ts'], function (exports) {
  var _inheritsLoose, cclegacy, color, Color, UI_TexasTableInfoLayerItem, CustomFguiClass, Utils, RoleData;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      Color = module.Color;
    }, function (module) {
      UI_TexasTableInfoLayerItem = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      RoleData = module.RoleData;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "bfb48l/GiVJeZ8y9tAE1bhH", "TexasTableInfoLayerItem", undefined);
      var ColorEDD9A4 = color('#EDD9A4');
      var TexasTableInfoLayerItem = exports('TexasTableInfoLayerItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasTableInfoLay) {
        _inheritsLoose(TexasTableInfoLayerItem, _UI_TexasTableInfoLay);
        function TexasTableInfoLayerItem() {
          return _UI_TexasTableInfoLay.apply(this, arguments) || this;
        }
        var _proto = TexasTableInfoLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasTableInfoLay.prototype.onConstruct.call(this);
          this.name = 'TexasTableInfoLayerItem';
        };
        _proto.setData = function setData(datas, tRate) {
          if (datas.playerid == -1) {
            this.m_emptyCtrl.selectedIndex = 1;
            return;
          } else {
            this.m_emptyCtrl.selectedIndex = 0;
          }
          this.m_labelName.text = Utils.formatDisplayNickName(datas.name, 15);
          this.m_labelBuyin.text = Utils.toFormat(Utils.formatDoubleValue(datas.bringInChipDouble * tRate));
          this.m_labelWin.text = Utils.toFormat(Utils.formatDoubleValue(datas.winChip * tRate), 2, false, true);
          var isSelf = datas.playerid == RoleData.inst.playerID;
          this.m_labelName.color = isSelf ? ColorEDD9A4.clone() : Color.WHITE.clone();
          this.m_labelBuyin.color = isSelf ? ColorEDD9A4.clone() : Color.WHITE.clone();
          if (isSelf) {
            this.m_labelWin.color = ColorEDD9A4.clone();
          } else {
            this.m_labelWin.color = Utils.winningColor(Utils.formatDoubleValue(datas.winChip));
          }
        };
        return TexasTableInfoLayerItem;
      }(UI_TexasTableInfoLayerItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasTableLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './LanguageManage.ts', './TexasGameData.ts', './GameConst.ts', './GameDecorators.ts', './UI_TexasTableLayer.ts', './TexasPositionConst.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Tween, tween, Utils, LanguageManager, TexasMttClientState, GameConst, CustomFguiClass, UI_TexasTableLayer, TexasPositionConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      TexasMttClientState = module.TexasMttClientState;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasTableLayer = module.default;
    }, function (module) {
      TexasPositionConst = module.TexasPositionConst;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "fd0feH/BVJCcZ6LuWdWwxBi", "TexasTableLayer", undefined);
      var TexasTableLayer = exports('TexasTableLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasTableLayer) {
        _inheritsLoose(TexasTableLayer, _UI_TexasTableLayer);
        function TexasTableLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasTableLayer.call.apply(_UI_TexasTableLayer, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          _this.sidePotItems = [];
          return _this;
        }
        var _proto = TexasTableLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasTableLayer.prototype.onConstruct.call(this);
          this.m_mainPot.visible = false;
          for (var i = 0; i < 8; i++) {
            this.sidePotItems.push(this["m_sidePot" + i]);
          }
          this.m_iconD.visible = false;
          this.m_groupSidePot0.visible = false;
          this.m_groupSidePot1.visible = false;
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
        };
        _proto.reset = function reset() {
          this.m_mainPot.visible = false;
          Tween.stopAllByTarget(this.m_iconD);
          this.m_iconD.visible = false;
          this.m_groupSidePot0.visible = false;
          this.m_groupSidePot1.visible = false;
        };
        _proto.updateMainPot = function updateMainPot() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (!tableInfo) return;
          var showMainPot = tableInfo.roomStatus >= GameConst.TexasPlay.ERoomStatus.PreFlop && tableInfo.roomStatus <= GameConst.TexasPlay.ERoomStatus.River;
          showMainPot = showMainPot && tableInfo.pot > 0;
          this.m_mainPot.visible = showMainPot;
          if (showMainPot) {
            var score = tableInfo.pot;
            if (tableInfo.needTimes) {
              score /= 100;
            }
            this.m_mainPot.m_score.text = Utils.toFormat(score);
            this.m_mainPot.m_score._label.updateRenderData();
            // if (forceUpdateRecursion) {
            //     this.m_mainPot.forceUpdateRecursion();
            // }
          }
        };

        _proto.updateSidePot = function updateSidePot() {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (!tableInfo) return;
          var showSidePot = tableInfo.roomStatus >= GameConst.TexasPlay.ERoomStatus.PreFlop && tableInfo.roomStatus <= GameConst.TexasPlay.ERoomStatus.River;
          showSidePot = showSidePot && tableInfo.pot > 0 && tableInfo.sidePot && tableInfo.sidePot.length > 0 && tableInfo.sidePot[0] > 0;
          var sidePot = tableInfo.sidePot;
          this.m_groupSidePot0.visible = showSidePot;
          this.m_groupSidePot1.visible = showSidePot;
          if (showSidePot) {
            for (var i = 0; i < this.sidePotItems.length; i++) {
              var sidePotItem = this.sidePotItems[i];
              var potValue = i < sidePot.length ? sidePot[i] : 0;
              sidePotItem.visible = potValue > 0;
              if (tableInfo.needTimes) {
                potValue /= 100;
              }
              sidePotItem.m_score.text = Utils.toFormat(potValue);
              sidePotItem.m_score._label.updateRenderData();
            }
            // if (forceUpdateRecursion) {
            //     this.forceUpdateRecursion();
            // }
          }
        };

        _proto.setTableName = function setTableName() {
          var gamedata = this.shareSpace.texasGameData;
          var prefix;
          if (gamedata.isMatch) {
            prefix = 'MTT';
          } else if (gamedata.costType == GameConst.EGameCostType.cash) {
            prefix = '$USDT';
          } else {
            prefix = '$TGP';
          }
          var typeStr = GameConst.getGameTypeDesc(gamedata.gameType);
          if (gamedata.isKOBounty) {
            if (gamedata.koBountyType == GameConst.MATCH.EKOBountyType.PKO) {
              typeStr += '-PKO';
            } else {
              typeStr += '-KO';
            }
          } else if (gamedata.isFlash) {
            typeStr = GameConst.getFlashGameTypeDesc(gamedata.gameType);
          }
          this.m_tableName.text = prefix + "-" + typeStr;
          this.m_tableName._label.updateRenderData();
        };
        _proto.setBlindsInfo = function setBlindsInfo() {
          var gamedata = this.shareSpace.texasGameData;
          if (!gamedata.tableInfo) return;
          this.m_blinds.visible = gamedata.sbNumRated > 0;
          if (this.m_blinds.visible) {
            var blindDesc = LanguageManager.get('CCS_TXT_485') + ": " + Utils.toFormat(gamedata.sbNumRated) + "/" + Utils.toFormat(gamedata.bbNumRated);
            if (gamedata.anteNumRated > 0) {
              blindDesc = blindDesc + " (" + Utils.toFormat(gamedata.anteNumRated) + ")";
            }
            var otherStr = '';
            if (gamedata.texasRule.isOpenGps) {
              otherStr = 'GPS';
            }
            if (gamedata.texasRule.isOpenIp) {
              if (otherStr.length > 0) {
                otherStr = otherStr + "&IP";
              } else {
                otherStr = 'IP';
              }
            }
            if (otherStr.length > 0) {
              blindDesc = blindDesc + " " + otherStr;
            }
            this.m_blinds.text = blindDesc;
            this.m_blinds._label.updateRenderData();
          }
        };
        _proto.setBaseTableInfo = function setBaseTableInfo() {
          var gamedata = this.shareSpace.texasGameData;
          if (!gamedata.tableInfo) return;
          if (gamedata.isFlash) {
            this.m_tableID.text = "ID: " + gamedata.roomId + "-" + gamedata.tableInfo.tableIndex;
          } else {
            this.m_tableID.text = "ID: " + gamedata.roomId;
          }
          this.m_tableID._label.updateRenderData();
          this.m_mttName.visible = gamedata.isMatch;
          this.m_mttName.text = gamedata.isMatch && gamedata.mttInfo.rule.name;
        };
        _proto.updatePlaceD = function updatePlaceD() {
          var texasGameData = this.shareSpace.texasGameData;
          var tableInfo = texasGameData.tableInfo;
          var showIconD = tableInfo.roomStatus != GameConst.TexasPlay.ERoomStatus.NotStart;
          showIconD = showIconD && texasGameData.chairPlayerNum > 1;
          if (this.shareSpace.texasGameData.isMatch) {
            showIconD = showIconD && this.shareSpace.texasGameData.mttState.value == TexasMttClientState.WAITING_EMPTY;
          }
          if (showIconD) {
            var item = this.shareSpace.texasGamePage.playerLayer.getItemByChairID(tableInfo.btnChairId);
            var place = TexasPositionConst.DPlace[item.placeIndex];
            this.m_iconD.visible = true;
            this.m_iconD.x = place.x;
            this.m_iconD.y = place.y;
          } else {
            this.m_iconD.visible = false;
          }
        };
        _proto.movePlaceD = function movePlaceD(finish) {
          var tableInfo = this.shareSpace.texasGameData.tableInfo;
          if (tableInfo.roomStatus == GameConst.TexasPlay.ERoomStatus.PreFlop) {
            var item = this.shareSpace.texasGamePage.playerLayer.getItemByChairID(tableInfo.btnChairId);
            var place = TexasPositionConst.DPlace[item.placeIndex];
            this.m_iconD.visible = true;
            tween(this.m_iconD).to(0.2, {
              x: place.x,
              y: place.y
            }, {
              easing: 'quadOut'
            }).call(finish).start();
          } else if (tableInfo.roomStatus != GameConst.TexasPlay.ERoomStatus.NotStart) {
            this.m_iconD.visible = true;
            finish();
          } else {
            this.m_iconD.visible = false;
            finish();
          }
        };
        _proto.updateTableState = function updateTableState() {
          this.setTableName();
          this.setBlindsInfo();
          this.setBaseTableInfo();
          this.updateMainPot();
          this.updateSidePot();
          // this.forceUpdateRecursion();
        };

        _proto.onLanguageChange = function onLanguageChange() {
          this.setBlindsInfo();
          this.setBaseTableInfo();
          // this.forceUpdateRecursion();
        };

        return TexasTableLayer;
      }(UI_TexasTableLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TexasTipLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_TexasTipLayer.ts', './CocosDevKit.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Tween, tween, CustomFguiClass, UI_TexasTipLayer, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      tween = module.tween;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      UI_TexasTipLayer = module.default;
    }, null, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "0c20bs9D2NFwLrRbYwXMo0J", "TexasTipLayer", undefined);
      var TexasTipLayer = exports('TexasTipLayer', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TexasTipLayer) {
        _inheritsLoose(TexasTipLayer, _UI_TexasTipLayer);
        function TexasTipLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TexasTipLayer.call.apply(_UI_TexasTipLayer, [this].concat(args)) || this;
          _this.shareSpace = void 0;
          return _this;
        }
        var _proto = TexasTipLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TexasTipLayer.prototype.onConstruct.call(this);
          this.m_blindsTip.visible = false;
          this.m_moneyTip.visible = false;
          this.m_commonTip.visible = false;
        };
        _proto.reset = function reset() {
          Tween.stopAllByTarget(this.m_blindsTip);
          this.m_blindsTip.visible = false;
          Tween.stopAllByTarget(this.m_moneyTip);
          this.m_moneyTip.visible = false;
          Tween.stopAllByTarget(this.m_commonTip);
          this.m_commonTip.visible = false;
        };
        _proto.init = function init(shareSpace) {
          this.shareSpace = shareSpace;
        }

        /**
         * 进入钱圈 tip
         */;
        _proto.showMoneyTip = function showMoneyTip() {
          Tween.stopAllByTarget(this.m_moneyTip);
          tween(this.m_moneyTip).set({
            alpha: 0,
            scaleX: 0.5,
            scaleY: 0.5,
            visible: true
          }).to(0.2, {
            alpha: 1,
            scaleX: 1,
            scaleY: 1
          }).delay(2).to(0.2, {
            alpha: 0,
            scaleX: 0.5,
            scaleY: 0.5
          }).set({
            visible: false
          }).start();
        }

        /**
         * 涨盲 tip
         */;
        _proto.showBlindsUpTip = function showBlindsUpTip() {
          Tween.stopAllByTarget(this.m_blindsTip);
          var gameinfo = this.shareSpace.texasGameData.mttInfo.gameinfo;
          var str = Utils.toFormat(gameinfo.bigblind * 0.5) + "/" + Utils.toFormat(gameinfo.bigblind);
          if (gameinfo.front > 0) {
            str = str + " (" + gameinfo.front + ")";
          }
          this.m_blindsTip.m_textContent.text = str;
          this.m_blindsTip.forceUpdateRecursion();
          tween(this.m_blindsTip).set({
            alpha: 0,
            scaleX: 0.5,
            scaleY: 0.5,
            visible: true
          }).to(0.2, {
            alpha: 1,
            scaleX: 1,
            scaleY: 1
          }).delay(2).to(0.2, {
            alpha: 0,
            scaleX: 0.5,
            scaleY: 0.5
          }).set({
            visible: false
          }).start();
        }

        /**
         * 通用 tip
         */;
        _proto.showCommonTip = function showCommonTip(content) {
          Tween.stopAllByTarget(this.m_commonTip);
          this.m_commonTip.m_textContent.text = content;
          this.m_commonTip.forceUpdateRecursion();
          tween(this.m_commonTip).set({
            alpha: 0,
            scaleX: 0.5,
            scaleY: 0.5,
            visible: true
          }).to(0.2, {
            alpha: 1,
            scaleX: 1,
            scaleY: 1
          }).delay(2).to(0.2, {
            alpha: 0,
            scaleX: 0.5,
            scaleY: 0.5
          }).set({
            visible: false
          }).start();
        };
        return TexasTipLayer;
      }(UI_TexasTipLayer)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TGPFreeGoldView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './UI_TGPFreeGoldView.ts', './RoleData.ts', './Utils.ts', './HallProxy.ts', './CocosDevKit.ts', './TGPLevelDialog.ts', './HallData.ts', './EventReporter.ts', './LobbyPage.ts', './PageEvent.ts', './fairygui.mjs', './GameStorage.ts', './NodePoolExtention.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, Node, Tween, tween, instantiate, UITransform, v3, color, CustomFguiClass, MarkForDataBinder, UI_TGPFreeGoldView, RoleData, Utils, HallProxy, TGPLevelDialog, HallData, EventReporter, ELobbyPage, EPageEvent, GLoader, LoaderFillType, GameStorage, GObjectPoolEx;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Tween = module.Tween;
      tween = module.tween;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      v3 = module.v3;
      color = module.color;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
      MarkForDataBinder = module.MarkForDataBinder;
    }, function (module) {
      UI_TGPFreeGoldView = module.default;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      HallProxy = module.HallProxy;
    }, null, function (module) {
      TGPLevelDialog = module.TGPLevelDialog;
    }, function (module) {
      HallData = module.HallData;
    }, function (module) {
      EventReporter = module.EventReporter;
    }, function (module) {
      ELobbyPage = module.ELobbyPage;
    }, function (module) {
      EPageEvent = module.EPageEvent;
    }, function (module) {
      GLoader = module.GLoader;
      LoaderFillType = module.LoaderFillType;
    }, function (module) {
      GameStorage = module.GameStorage;
    }, function (module) {
      GObjectPoolEx = module.GObjectPoolEx;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class2, _class3;
      cclegacy._RF.push({}, "6dbdddoMjREsbIVEX5VkpQv", "TGPFreeGoldView", undefined);
      var GLoaderMaskPool = /*#__PURE__*/function (_GObjectPoolEx) {
        _inheritsLoose(GLoaderMaskPool, _GObjectPoolEx);
        function GLoaderMaskPool() {
          return _GObjectPoolEx.apply(this, arguments) || this;
        }
        _createClass(GLoaderMaskPool, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new GLoaderMaskPool(function () {
                var mask = new GLoader();
                mask.name = 'GLoaderMaskPool_tgp';
                mask.url = 'ui://vjmmgvukyjaohk';
                mask.setSize(650, 650);
                mask.alpha = 0.8;
                mask.setPivot(0.5, 0.5, true);
                mask.color = color('#f9a400');
                mask.fill = LoaderFillType.ScaleFree;
                mask.touchable = false;
                return mask;
              }, 2);
            }
            return this._instance;
          }
        }]);
        return GLoaderMaskPool;
      }(GObjectPoolEx);
      GLoaderMaskPool._instance = void 0;
      var TGPFreeGoldView = exports('TGPFreeGoldView', (_dec = MarkForDataBinder(), _dec2 = MarkForDataBinder(), _dec3 = MarkForDataBinder(), _dec4 = MarkForDataBinder(), _dec5 = MarkForDataBinder(), CustomFguiClass(_class2 = (_class3 = /*#__PURE__*/function (_UI_TGPFreeGoldView) {
        _inheritsLoose(TGPFreeGoldView, _UI_TGPFreeGoldView);
        function TGPFreeGoldView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TGPFreeGoldView.call.apply(_UI_TGPFreeGoldView, [this].concat(args)) || this;
          _this._touchPosition = null;
          _this._tickClock = null;
          _this._tickCount = 0;
          _this._tgpHeartBetTime = 0;
          _this._bTgpTouch = true;
          _this._homeDelegate = null;
          _this.action1 = null;
          return _this;
        }
        var _proto = TGPFreeGoldView.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TGPFreeGoldView.prototype.onConstruct.call(this);
          this.name = 'TGPFreeGoldView';
          this._tickCount = 0;
          this.m_BtnTask.onClick(this.scroll2Task.bind(this), this);
          this.m_BtnInvite.onClick(this.onBtnInvite.bind(this), this);
          this.m_BtnTGP.on(Node.EventType.TOUCH_START, this.onBtnStartTGP, this);
          // this.m_BtnTGP.onClick(this.onBtnStartTGP.bind(this), this); // 会出现点击不触发的问题
          // this.m_BtnTGP.node.on(Node.EventType.TOUCH_START, this.onBtnStartTGP, this);
          this.m_btnLevelDesc.onClick(this.showTGPLevelDialog.bind(this), this);
          this.node.on(Node.EventType.TOUCH_START, this.onTouchEnd, this);
          HallData.inst.updataVitalityCur_client();
        };
        _proto.showTGPLevelDialog = function showTGPLevelDialog() {
          TGPLevelDialog.create(this).showOn(this.grootInst);
        };
        _proto.initView = function initView() {
          this.setTGPCur();
          // if (this._tickClock) clearInterval(this._tickClock);
          // this._tickClock = setInterval(this.energyTick.bind(this), 1000) as any as number;
        };

        _proto.onEnable = function onEnable() {
          _UI_TGPFreeGoldView.prototype.onEnable.call(this);
          if (this._tickClock) clearInterval(this._tickClock);
          this.energyTick();
          this._tickClock = setInterval(this.energyTick.bind(this), 1000);
        };
        _proto.energyTick = function energyTick() {
          HallData.inst.setVitalityAddFunc();
          if (GameStorage.fristTgpTouch) return;
          if (this._tgpHeartBetTime == 1) {
            this.playTgpHeardBetAnim();
            this._tgpHeartBetTime = 0;
            return;
          }
          this._tgpHeartBetTime++;
        };
        _proto.onDisable = function onDisable() {
          if (this._tickClock) clearInterval(this._tickClock);
          _UI_TGPFreeGoldView.prototype.onDisable.call(this);
        };
        _proto.onDestroy = function onDestroy() {
          if (this._tickCount > 0) {
            EventReporter.emit(EventReporter.Event.mixpanel.TGP_CLICK, {
              Count: this._tickCount
            });
          }
          _UI_TGPFreeGoldView.prototype.onDestroy.call(this);
          GLoaderMaskPool.Instance.clear();
        };
        _proto.setHomeDelegate = function setHomeDelegate(delegate) {
          this._homeDelegate = delegate;
        };
        _proto.scroll2Task = function scroll2Task() {
          this._homeDelegate && this._homeDelegate.scroll2Task && this._homeDelegate.scroll2Task();
          var iRedPoint = HallData.inst.GetAwardTaskStatus ? 1 : 2;
          EventReporter.emit(EventReporter.Event.mixpanel.TASK_ENTER_BTN_CLICK, {
            BtnState: iRedPoint.toString()
          });
        };
        _proto.onBtnInvite = function onBtnInvite() {
          this.emitPageEvent(EPageEvent.JUMP_TO_LOBBY_PAGE, {
            pid: ELobbyPage.invite
          });
          //LobbyInviteFriendLayer.create(this).showOn(this.grootInst);
        };

        _proto.playTgpHeardBetAnim = function playTgpHeardBetAnim() {
          this.playLightAnim(0, 0.5);
          this.playLightAnim(0.5, 0.5);
        };
        _proto.onBtnStartTGP = function onBtnStartTGP(event) {
          Tween.stopAllByTarget(this.m_BtnTGP.m_tgpicon);
          tween(this.m_BtnTGP.m_tgpicon).set({
            scaleX: 1,
            scaleY: 1
          }).to(0.1, {
            scaleX: 1.1,
            scaleY: 1.1
          }).to(0.1, {
            scaleX: 1,
            scaleY: 1
          }).start();
          if (HallData.inst.vitalityCur_client <= 0) {
            return;
          }
          HallProxy.inst.getTGP(this.getTgpCallBack.bind(this));
        };
        _proto.getTgpCallBack = function getTgpCallBack(info) {
          GameStorage.fristTgpTouch = true;
          this._tickCount++;
          if (!this._touchPosition) return;
          var rewardcnt = parseFloat((info.rewardCount / 100).toFixed(2));
          var textNum = instantiate(this.m_NodeNum);
          textNum.text = "+" + rewardcnt;
          textNum.visible = true;
          this.node.addChild(textNum.node);
          var randomx = Math.random() * 50;
          var x = randomx % 2 == 0 ? randomx : -randomx;
          textNum.x = this._touchPosition.x + x;
          textNum.y = -(this._touchPosition.y + 20 + Math.random() * 100);
          var t1 = tween(textNum).by(0.7, {
            y: -450
          });
          var t2 = tween(textNum).delay(0.3).by(0.4, {
            alpha: -1
          }, {
            easing: 'sineOut'
          });
          tween(textNum).parallel(t1, t2).removeSelf().start();
          this.playLightAnim();
        };
        _proto.playLightAnim = function playLightAnim(delaytime, speed) {
          if (delaytime === void 0) {
            delaytime = 0;
          }
          if (speed === void 0) {
            speed = 1;
          }
          var objlight = GLoaderMaskPool.Instance.getObj();
          this.m_BtnTGP.addChildAt(objlight, 0);
          objlight.x = this.m_BtnTGP.m_tgpicon.x;
          objlight.y = this.m_BtnTGP.m_tgpicon.y;
          var ptime = 0.42;
          var op = 0.8;
          tween(objlight).set({
            scaleX: 1,
            scaleY: 1,
            alpha: op
          }).delay(delaytime).to(ptime * (1 / speed), {
            scaleX: 1.4,
            scaleY: 1.4,
            alpha: 0
          }).call(function () {
            GLoaderMaskPool.Instance.putObj(objlight);
          }).start();
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          var pos = event.getUILocation();
          var localPoscmpt = this.node.getComponent(UITransform);
          this._touchPosition = localPoscmpt.convertToNodeSpaceAR(v3(pos.x, pos.y, 0));
        };
        _proto.setTGPCnt = function setTGPCnt() {
          this.m_TextTGPCnt.text = Utils.toFormat(RoleData.inst.chip, 0);
          this.m_TextTGPCnt._label.updateRenderData();
          // this.forceUpdateRecursion();
        };

        _proto.setTGPLevel = function setTGPLevel() {
          this.m_TextLevel.text = 'LV ' + RoleData.inst.level;
        };
        _proto.setTGPCur = function setTGPCur() {
          this.m_TextTGPCur.text = HallData.inst.vitalityCur_client + '';
          // this.setProgress(HallData.inst.vitalityCur_client, HallData.inst.vitalityCurConfig.energyLimit);
        };

        _proto.setTGPTotal = function setTGPTotal() {
          this.m_TextTGPMax.text = '/' + HallData.inst.vitalityCurConfig.energyLimit;
          // this.setProgress(HallData.inst.vitalityCur_client, HallData.inst.vitalityCurConfig.energyLimit);
        }

        // private setProgress(cur: number, total: number) {
        //     this.m_ProgressTGP.max = total;
        //     this.m_ProgressTGP.value = cur;
        // }
        ;

        _proto.setTGPTaskReadPoint = function setTGPTaskReadPoint() {
          this.m_task_read_point.visible = HallData.inst.GetAwardTaskStatus;
        };
        return TGPFreeGoldView;
      }(UI_TGPFreeGoldView), (_applyDecoratedDescriptor(_class3.prototype, "setTGPCnt", [_dec], Object.getOwnPropertyDescriptor(_class3.prototype, "setTGPCnt"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, "setTGPLevel", [_dec2], Object.getOwnPropertyDescriptor(_class3.prototype, "setTGPLevel"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, "setTGPCur", [_dec3], Object.getOwnPropertyDescriptor(_class3.prototype, "setTGPCur"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, "setTGPTotal", [_dec4], Object.getOwnPropertyDescriptor(_class3.prototype, "setTGPTotal"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, "setTGPTaskReadPoint", [_dec5], Object.getOwnPropertyDescriptor(_class3.prototype, "setTGPTaskReadPoint"), _class3.prototype)), _class3)) || _class2));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TGPLevelDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_TGPLevelDialog.ts', './HallData.ts', './RoleData.ts', './LanguageManage.ts', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, EEnterType, GameWindowBase, UI_TGPLevelDialog, HallData, RoleData, LanguageManager, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_TGPLevelDialog = module.default;
    }, function (module) {
      HallData = module.HallData;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "77ef5EwhtpGF5LbLLr4AkgN", "TGPLevelDialog", undefined);
      var TGPLevelDialog = exports('TGPLevelDialog', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(TGPLevelDialog, _GameWindowBase);
        function TGPLevelDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Lobby'];
          _this.paneClass = UI_TGPLevelDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'TGPLevelDialog';
          return _this;
        }
        TGPLevelDialog.create = function create(from) {
          return new TGPLevelDialog(from);
        };
        var _proto = TGPLevelDialog.prototype;
        _proto.onInit = function onInit() {
          var lv = RoleData.inst.level;
          this.pane.m_CurLevel.text = 'LV' + lv;
          var nextlv = Math.min(HallData.inst.vitalityConfig.length, lv + 1);
          this.pane.m_NextLevel.text = 'LV' + nextlv;
          var nextconfig = HallData.inst.updataCurTGPConfigByLevel(nextlv);
          if (nextconfig) {
            this.pane.m_CurExp.text = "[color=#1EFFB0]" + RoleData.inst.exp + "[/color][color=#8D9098]/" + nextconfig.exp + "[/color]";
          }
          this.pane.m_LevelProgress.value = RoleData.inst.exp;
          this.pane.m_LevelProgress.max = nextconfig.exp;
          this.initLevelTable();
        };
        _proto.initLevelTable = function initLevelTable() {
          var infos = HallData.inst.vitalityConfig;
          if (!infos || infos.length <= 0) {
            return;
          }
          for (var idx = 0; idx < infos.length; idx++) {
            var info = infos[idx];
            var item = this.pane.m_list.getChildAt(idx);
            item.m_title.text = info.level + '';
            item.m_table1.text = info.exp + '';
            item.m_table2.text = '$TGP +' + info.perAdd;
            item.m_table3.text = info.energyLimit + '';
            item.m_table4.text = info.energyRecover + '';
            item.m_table5.text = info.halfNode + '';
            item.m_CurLevelControl.selectedIndex = info.level == RoleData.inst.level ? 0 : 1;
          }
          this.pane.m_CurLevel0.text = Utils.formatStr(LanguageManager.get('LV_DETAILS1'), Utils.toFormat(1 / HallData.inst.cashExpRatio), 1);
          this.pane.m_CurLevel1.text = Utils.formatStr(LanguageManager.get('LV_DETAILS2'), Utils.toFormat(1 / HallData.inst.normalExpRatio), 1);
        };
        return TGPLevelDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchCmpt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UI_TouchCmpt.ts', './GameDecorators.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Node, view, game, isValid, tween, UI_TouchCmpt, CustomFguiClass;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      view = module.view;
      game = module.game;
      isValid = module.isValid;
      tween = module.tween;
    }, function (module) {
      UI_TouchCmpt = module.default;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "67506Re755Cu4WRcE6mpMx1", "TouchCmpt", undefined);
      var TouchCmpt = exports('TouchCmpt', CustomFguiClass(_class = /*#__PURE__*/function (_UI_TouchCmpt) {
        _inheritsLoose(TouchCmpt, _UI_TouchCmpt);
        function TouchCmpt() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_TouchCmpt.call.apply(_UI_TouchCmpt, [this].concat(args)) || this;
          _this._scrollPanel = null;
          _this._lastMoveTime = 0;
          _this._bTouchBegin = false;
          _this._bTouchMove = false;
          _this._top_y = 0;
          _this._bottom_y = 0;
          _this._owner = void 0;
          _this.list = void 0;
          return _this;
        }
        var _proto = TouchCmpt.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_TouchCmpt.prototype.onConstruct.call(this);
          this.node.on(Node.EventType.TOUCH_START, this.onTouchBegin.bind(this), this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove.bind(this), this);
          this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd.bind(this), this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd.bind(this), this);

          // const o = (this._owner = <fgui.GComponent>fgui.GObject.cast(this.node));
          // o.on(fgui.Event.TOUCH_BEGIN, this.onTouchBegin, this);
          // o.on(fgui.Event.TOUCH_MOVE, this.onTouchMove, this);
          // o.on(fgui.Event.TOUCH_END, this.onTouchEnd, this);
        };

        _proto.setScrollPanel = function setScrollPanel(panel) {
          this._scrollPanel = panel;
          //计算区域的上下触碰坐标点
          this.opaque = false;
          this._bottom_y = this._scrollPanel.y;
          this._top_y = view.getDesignResolutionSize().height - this._scrollPanel.height;
        }

        // onTouchBegin(evt: FUIEvent): void {
        //     console.error('---onTouchBegin--');
        // }

        // onTouchMove(evt: FUIEvent): void {
        //     console.error('---onTouchMove--');
        // }

        // onTouchEnd(evt: FUIEvent): void {
        //     console.error('---onTouchEnd--');
        // }
        ;

        _proto.setList = function setList(list) {
          this.list = list;
        };
        _proto.getCurList = function getCurList() {
          var child = this.list.getChildAt(this.list.scrollPane.currentPageX);
          if (child && child['m_list']) {
            return child['m_list'];
          }
        };
        _proto.onTouchBegin = function onTouchBegin(event) {
          this._bTouchBegin = true;
          this._lastMoveTime = game.totalTime / 1000;
        };
        _proto.onTouchMove = function onTouchMove(event) {
          if (!isValid(this._scrollPanel.node)) return;
          if (!this._bTouchBegin) return;
          this._bTouchMove = true;
          var offsizey = event.getDeltaY();
          if (offsizey > 0) {
            this._scrollPanel.y -= offsizey;
            if (this._scrollPanel.y <= this._top_y) {
              this._scrollPanel.y = this._top_y;
            }
            if (this._scrollPanel.y >= this._bottom_y) {
              this._scrollPanel.y = this._bottom_y;
            }
            //向上滑动
            event.propagationStopped = this._scrollPanel.y > this._top_y;
            event.propagationImmediateStopped = this._scrollPanel.y > this._top_y;
            if (this._scrollPanel.y > this._top_y) {
              this._scrollPanel.y -= offsizey;
              if (this._scrollPanel.y <= this._top_y) {
                this._scrollPanel.y = this._top_y;
              }
            }
          } else if (offsizey < 0) {
            //向下滑动
            var list = this.getCurList();
            if (list.scrollPane.percY <= 0) {
              this._scrollPanel.y -= offsizey;
              if (this._scrollPanel.y <= this._top_y) {
                this._scrollPanel.y = this._top_y;
              }
              if (this._scrollPanel.y >= this._bottom_y) {
                this._scrollPanel.y = this._bottom_y;
              }
            }
            event.propagationStopped = false;
            event.propagationImmediateStopped = false;
          }
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          if (!this._bTouchBegin) return;
          if (!this._bTouchMove) {
            event.bubbles = true;
          }
          this._bTouchBegin = false;
          this._bTouchMove = false;
          var top = Math.abs(this._scrollPanel.y - this._bottom_y);
          var bottom = Math.abs(this._scrollPanel.y - this._top_y);
          var toy = top > bottom ? this._top_y : this._bottom_y;
          //吸附效果
          tween(this._scrollPanel).to(0.2, {
            y: toy
          }, {
            easing: 'sineOut'
          }).start();
        };
        return TouchCmpt;
      }(UI_TouchCmpt)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TradeData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts'], function (exports) {
  var _createClass, cclegacy, GameDataClass;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameDataClass = module.GameDataClass;
    }],
    execute: function () {
      var _OrderStausString, _class, _class2;
      cclegacy._RF.push({}, "30b4eRdA0BPHb9uEbA91F7k", "TradeData", undefined);

      // 0:可购买（卖单） 1: 可出售（买单）
      var ETradeBookType = exports('ETradeBookType', /*#__PURE__*/function (ETradeBookType) {
        ETradeBookType[ETradeBookType["buy"] = 0] = "buy";
        ETradeBookType[ETradeBookType["sell"] = 1] = "sell";
        return ETradeBookType;
      }({}));

      // 排序方式 0:单价正序 1:总价正序 2:数量优先
      var ETradeBookSort = exports('ETradeBookSort', /*#__PURE__*/function (ETradeBookSort) {
        ETradeBookSort[ETradeBookSort["price"] = 0] = "price";
        ETradeBookSort[ETradeBookSort["total"] = 1] = "total";
        ETradeBookSort[ETradeBookSort["quantity"] = 2] = "quantity";
        ETradeBookSort[ETradeBookSort["nosort"] = 3] = "nosort";
        return ETradeBookSort;
      }({}));

      // 订单状态 1 挂单 2 成交 3 撤销
      var EOrderStatus = exports('EOrderStatus', /*#__PURE__*/function (EOrderStatus) {
        EOrderStatus[EOrderStatus["hang"] = 1] = "hang";
        EOrderStatus[EOrderStatus["deal"] = 2] = "deal";
        EOrderStatus[EOrderStatus["revoke"] = 3] = "revoke";
        return EOrderStatus;
      }({}));
      var OrderStausString = exports('OrderStausString', (_OrderStausString = {}, _OrderStausString[EOrderStatus.hang] = 'MARKET_PLACED', _OrderStausString[EOrderStatus.deal] = 'MARKET_COMPLETE', _OrderStausString[EOrderStatus.revoke] = 'MARKET_DELISTED', _OrderStausString));
      var TradeData = exports('TradeData', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function TradeData() {
          this._buyOrder = new Map();
          this._sellOrder = new Map();
          this._myOrder = [];
          //费率
          this._rate = 0;
        } // makeAutoObservable(this);
        var _proto = TradeData.prototype;
        _proto.setTradeBook = function setTradeBook(type, sort, orders) {
          if (type == ETradeBookType.buy) {
            this._buyOrder.set(sort, [].concat(orders));
          } else if (type == ETradeBookType.sell) {
            this._sellOrder.set(sort, [].concat(orders));
          }
        }

        //不改变以前的数据 只对新的数据添加
        ;

        _proto.insertTradeBook = function insertTradeBook(type, sort, orders) {
          var _this = this;
          if (type == ETradeBookType.buy) {
            if (this._buyOrder.has(sort)) {
              var _loop = function _loop() {
                var order = orders[index];
                var orderlist = _this._buyOrder.get(sort);
                if (!orderlist.some(function (item) {
                  return item.id == order.id;
                })) {
                  orderlist.push(order);
                }
              };
              for (var index = 0; index < orders.length; index++) {
                _loop();
              }
            } else {
              this._buyOrder.set(sort, [].concat(orders));
            }
          } else if (type == ETradeBookType.sell) {
            if (this._sellOrder.has(sort)) {
              var _loop2 = function _loop2() {
                var order = orders[_index];
                var orderlist = _this._sellOrder.get(sort);
                if (!orderlist.some(function (item) {
                  return item.id == order.id;
                })) {
                  orderlist.push(order);
                }
              };
              for (var _index = 0; _index < orders.length; _index++) {
                _loop2();
              }
            } else {
              this._sellOrder.set(sort, [].concat(orders));
            }
          }
        };
        _proto.getLastOrderId = function getLastOrderId(type, sort) {
          if (type == ETradeBookType.buy) {
            var list = this._buyOrder.get(sort);
            if (list && list.length > 0) {
              return list[list.length - 1].id || '0';
            }
          } else if (type == ETradeBookType.sell) {
            var _list = this._sellOrder.get(sort);
            if (_list && _list.length > 0) {
              return _list[_list.length - 1].id || '0';
            }
          }
          return '';
        };
        _proto.getBuyOrder = function getBuyOrder(sort) {
          return this._buyOrder.get(sort);
        };
        _proto.getSellOrder = function getSellOrder(sort) {
          return this._sellOrder.get(sort);
        };
        _createClass(TradeData, [{
          key: "MyOrders",
          get: function get() {
            return this._myOrder;
          },
          set: function set(order) {
            this._myOrder = order;
          }
        }, {
          key: "rate",
          get: function get() {
            return this._rate;
          },
          set: function set(rate) {
            this._rate = rate;
          }
        }], [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return TradeData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TradeProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameproto.mjs_cjs=&original=.js', './TradeData.ts', './GameDecorators.ts', './GameNetProxyBase.ts', './CocosDevKit.ts', './gameproto.js', './Utils.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, TradeData, NetProxyClass, GameNetProxyBase, _cjsExports, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      TradeData = module.TradeData;
    }, function (module) {
      NetProxyClass = module.NetProxyClass;
    }, function (module) {
      GameNetProxyBase = module.GameNetProxyBase;
    }, null, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "66050hdgjpI9649Ek0vnpcT", "TradeProxy", undefined);
      var TradeProxy = exports('TradeProxy', (_dec = NetProxyClass(), _dec(_class = (_class2 = /*#__PURE__*/function (_GameNetProxyBase) {
        _inheritsLoose(TradeProxy, _GameNetProxyBase);
        function TradeProxy() {
          return _GameNetProxyBase.apply(this, arguments) || this;
        }
        var _proto = TradeProxy.prototype;
        //获取市场数据
        _proto.getMarketInfo = function getMarketInfo(type, sort, pid, cb) {
          var info = _cjsExports.trade.MsgTradeBook.create();
          info.side = type;
          info.sort = sort;
          info.fromId = pid;
          this.send(_cjsExports.trade.MsgTradeBook.ProtocolID, _cjsExports.trade.MsgTradeBook.encode(info).finish(), function (netdata) {
            if (netdata.isRetSuccess()) {
              var _info = netdata.getData(_cjsExports.trade.MsgTradeBookRsp);
              var page = _info.fromId;
              if (pid == '0' || pid == '') {
                TradeData.inst.setTradeBook(_info.side, _info.sort, _info.ordersList);
              } else {
                TradeData.inst.insertTradeBook(_info.side, _info.sort, _info.ordersList);
              }
              cb && cb(netdata);
            }
          });
        }

        //获取我的订单
        ;

        _proto.getMyOrders = function getMyOrders(cb) {
          var info = _cjsExports.trade.MsgTradeUserOrders.create();
          this.send(_cjsExports.trade.MsgTradeUserOrders.ProtocolID, _cjsExports.trade.MsgTradeUserOrders.encode(info).finish(), function (netdata) {
            if (netdata.isRetSuccess()) {
              var _info2 = netdata.getData(_cjsExports.trade.MsgTradeUserOrdersRsp);
              TradeData.inst.MyOrders = _info2.ordersList;
              TradeData.inst.rate = _info2.feeRate;
              cb && cb(netdata);
            }
          });
        }

        //创建订单
        ;

        _proto.createOrder = function createOrder(side, price, quantity, cb) {
          var info = _cjsExports.trade.MsgTradeCreateOrder.create();
          var stuprice = _cjsExports.trade.TradePrice.create();
          var strprice = Utils.toNonExponential(price);
          stuprice.scale = Math.pow(10, Utils.getDecimalPlaces(strprice));
          stuprice.value = Number.parseInt((price * stuprice.scale).toFixed(0));
          info.price = stuprice;
          info.side = side;
          info.quantity = quantity;
          this.send(_cjsExports.trade.MsgTradeCreateOrder.ProtocolID, _cjsExports.trade.MsgTradeCreateOrder.encode(info).finish(), function (netdata) {
            var info = netdata.getData(_cjsExports.trade.MsgTradeCreateOrderRsp);
            cb && cb(netdata);
          });
        }

        //取消订单
        ;

        _proto.cancelOrder = function cancelOrder(orderid, cb) {
          var info = _cjsExports.trade.MsgTradeCancelOrder.create();
          info.orderId = orderid;
          this.send(_cjsExports.trade.MsgTradeCancelOrder.ProtocolID, _cjsExports.trade.MsgTradeCancelOrder.encode(info).finish(), function (netdata) {
            // if (netdata.isRetSuccess()) {
            // let info = netdata.getData(gameproto.trade.MsgTradeCancelOrderRsp);
            cb && cb(netdata);
            // }
          });
        }

        //买入
        ;

        _proto.buy = function buy(orderid, cb) {
          var info = _cjsExports.trade.MsgTradeBuy.create();
          info.orderId = orderid;
          this.send(_cjsExports.trade.MsgTradeBuy.ProtocolID, _cjsExports.trade.MsgTradeBuy.encode(info).finish(), function (netdata) {
            // if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.trade.MsgTradeBuyRsp);
            cb && cb(netdata);
            // }
          });
        }

        //卖出
        ;

        _proto.sell = function sell(orderid, cb) {
          var info = _cjsExports.trade.MsgTradeSell.create();
          info.orderId = orderid;
          this.send(_cjsExports.trade.MsgTradeSell.ProtocolID, _cjsExports.trade.MsgTradeSell.encode(info).finish(), function (netdata) {
            // if (netdata.isRetSuccess()) {
            var info = netdata.getData(_cjsExports.trade.MsgTradeSellRsp);
            cb && cb(netdata);
            // }
          });
        };

        _createClass(TradeProxy, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return TradeProxy;
      }(GameNetProxyBase), _class2._inst = void 0, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_AccountListItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "28900qOiRlHw7XnF5sFXXSE", "UI_AccountListItem", undefined);
      var UI_AccountListItem = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_AccountListItem, _fgui$GLabel);
        function UI_AccountListItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_itemSelected = void 0;
          _this.m_btnDelete = void 0;
          return _this;
        }
        UI_AccountListItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Debug", "AccountListItem");
          obj.name = 'UI_AccountListItem';
          return obj;
        };
        var _proto = UI_AccountListItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_itemSelected = this.getController("itemSelected");
          this.m_btnDelete = this.getChild("btnDelete");
        };
        return UI_AccountListItem;
      }(GLabel));
      UI_AccountListItem.URL = "ui://thlralyuktyrq";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Avatar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e7650X/iIJIApG1om8HDFfE", "UI_Avatar", undefined);
      var UI_Avatar = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Avatar, _FGUIComponentBase);
        function UI_Avatar() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_contentItem = void 0;
          return _this;
        }
        UI_Avatar.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "Avatar");
          obj.name = 'UI_Avatar';
          return obj;
        };
        var _proto = UI_Avatar.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_contentItem = this.getChild("contentItem");
        };
        return UI_Avatar;
      }(FGUIComponentBase));
      UI_Avatar.URL = "ui://xddh4ifdho3d1d";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_AvatarContent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5b5e9K1ekdKo4FuvHsjNEcu", "UI_AvatarContent", undefined);
      var UI_AvatarContent = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_AvatarContent, _FGUIComponentBase);
        function UI_AvatarContent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_gray = void 0;
          _this.m_content = void 0;
          return _this;
        }
        UI_AvatarContent.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "AvatarContent");
          obj.name = 'UI_AvatarContent';
          return obj;
        };
        var _proto = UI_AvatarContent.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_gray = this.getController("gray");
          this.m_content = this.getChild("content");
        };
        return UI_AvatarContent;
      }(FGUIComponentBase));
      UI_AvatarContent.URL = "ui://xddh4ifdi6g8gz";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_BannerButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f833bZB0clHFJGhcKvz5IGY", "UI_BannerButton", undefined);
      var UI_BannerButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_BannerButton, _fgui$GButton);
        function UI_BannerButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_cmpt = void 0;
          return _this;
        }
        UI_BannerButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "BannerButton");
          obj.name = 'UI_BannerButton';
          return obj;
        };
        var _proto = UI_BannerButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_cmpt = this.getChild("cmpt");
        };
        return UI_BannerButton;
      }(GButton));
      UI_BannerButton.URL = "ui://vjmmgvukouoc4w";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_BannerButtonCmpt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8b8deGbNi5ONJNMrZ5ufLIb", "UI_BannerButtonCmpt", undefined);
      var UI_BannerButtonCmpt = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_BannerButtonCmpt, _fgui$GLabel);
        function UI_BannerButtonCmpt() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_clip = void 0;
          return _this;
        }
        UI_BannerButtonCmpt.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "BannerButtonCmpt");
          obj.name = 'UI_BannerButtonCmpt';
          return obj;
        };
        var _proto = UI_BannerButtonCmpt.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_clip = this.getChild("clip");
        };
        return UI_BannerButtonCmpt;
      }(GLabel));
      UI_BannerButtonCmpt.URL = "ui://vjmmgvuky3y2gt";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_button_Invite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "de42dt5q79B4Y2aejMaclhQ", "UI_button_Invite", undefined);
      var UI_button_Invite = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_button_Invite, _fgui$GButton);
        function UI_button_Invite() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_fly_icon = void 0;
          return _this;
        }
        UI_button_Invite.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "button_Invite");
          obj.name = 'UI_button_Invite';
          return obj;
        };
        var _proto = UI_button_Invite.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_fly_icon = this.getChild("fly_icon");
        };
        return UI_button_Invite;
      }(GButton));
      UI_button_Invite.URL = "ui://vjmmgvukqs1wdn";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Button1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "858b2h+7nZP1ZHTFZzR+MY+", "UI_Button1", undefined);
      var UI_Button1 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_Button1, _fgui$GButton);
        function UI_Button1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bg = void 0;
          return _this;
        }
        UI_Button1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "Button1");
          obj.name = 'UI_Button1';
          return obj;
        };
        var _proto = UI_Button1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
        };
        return UI_Button1;
      }(GButton));
      UI_Button1.URL = "ui://0fujvg4ohc9253";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Button1Component.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "868e5NvpdNJK41sSHtHp4UV", "UI_Button1Component", undefined);
      var UI_Button1Component = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_Button1Component, _fgui$GButton);
        function UI_Button1Component() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_inside = void 0;
          _this.m_outside = void 0;
          return _this;
        }
        UI_Button1Component.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "Button1Component");
          obj.name = 'UI_Button1Component';
          return obj;
        };
        var _proto = UI_Button1Component.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_inside = this.getChild("inside");
          this.m_outside = this.getChild("outside");
        };
        return UI_Button1Component;
      }(GButton));
      UI_Button1Component.URL = "ui://xddh4ifdtryja8";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Button4.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7a4231sMgNF0ons3gE2J0/o", "UI_Button4", undefined);
      var UI_Button4 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_Button4, _fgui$GButton);
        function UI_Button4() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_SwitchControl = void 0;
          return _this;
        }
        UI_Button4.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Button4");
          obj.name = 'UI_Button4';
          return obj;
        };
        var _proto = UI_Button4.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_SwitchControl = this.getController("SwitchControl");
        };
        return UI_Button4;
      }(GButton));
      UI_Button4.URL = "ui://vjmmgvukqffk4a";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ButtonTGP.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7c7aaHzuYlAK69fMRYLY5cc", "UI_ButtonTGP", undefined);
      var UI_ButtonTGP = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_ButtonTGP, _fgui$GButton);
        function UI_ButtonTGP() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_tgpicon = void 0;
          return _this;
        }
        UI_ButtonTGP.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "ButtonTGP");
          obj.name = 'UI_ButtonTGP';
          return obj;
        };
        var _proto = UI_ButtonTGP.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_tgpicon = this.getChild("tgpicon");
        };
        return UI_ButtonTGP;
      }(GButton));
      UI_ButtonTGP.URL = "ui://vjmmgvukuwmwdg";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ButtonWithBg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c72924GHlhH4Za4umNOm09y", "UI_ButtonWithBg", undefined);
      var UI_ButtonWithBg = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_ButtonWithBg, _fgui$GButton);
        function UI_ButtonWithBg() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_colorCtrl = void 0;
          return _this;
        }
        UI_ButtonWithBg.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "ButtonWithBg");
          obj.name = 'UI_ButtonWithBg';
          return obj;
        };
        var _proto = UI_ButtonWithBg.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_colorCtrl = this.getController("colorCtrl");
        };
        return UI_ButtonWithBg;
      }(GButton));
      UI_ButtonWithBg.URL = "ui://0fujvg4oiwed56";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CalendarDayItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "af9f1VpGHZIeafH/c/r/jIT", "UI_CalendarDayItem", undefined);
      var UI_CalendarDayItem = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_CalendarDayItem, _fgui$GLabel);
        function UI_CalendarDayItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_itemStatu = void 0;
          return _this;
        }
        UI_CalendarDayItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CalendarDayItem");
          obj.name = 'UI_CalendarDayItem';
          return obj;
        };
        var _proto = UI_CalendarDayItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_itemStatu = this.getController("itemStatu");
        };
        return UI_CalendarDayItem;
      }(GLabel));
      UI_CalendarDayItem.URL = "ui://xddh4ifddsj16s";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CalendarMonthItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "840b5wAnXFLZ6pKYRrPTzvd", "UI_CalendarMonthItem", undefined);
      var UI_CalendarMonthItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_CalendarMonthItem, _FGUIComponentBase);
        function UI_CalendarMonthItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_item0 = void 0;
          _this.m_item1 = void 0;
          _this.m_item2 = void 0;
          _this.m_item3 = void 0;
          _this.m_item4 = void 0;
          _this.m_item5 = void 0;
          _this.m_item6 = void 0;
          _this.m_group0 = void 0;
          _this.m_item7 = void 0;
          _this.m_item8 = void 0;
          _this.m_item9 = void 0;
          _this.m_item10 = void 0;
          _this.m_item11 = void 0;
          _this.m_item12 = void 0;
          _this.m_item13 = void 0;
          _this.m_group1 = void 0;
          _this.m_item14 = void 0;
          _this.m_item15 = void 0;
          _this.m_item16 = void 0;
          _this.m_item17 = void 0;
          _this.m_item18 = void 0;
          _this.m_item19 = void 0;
          _this.m_item20 = void 0;
          _this.m_group2 = void 0;
          _this.m_item21 = void 0;
          _this.m_item22 = void 0;
          _this.m_item23 = void 0;
          _this.m_item24 = void 0;
          _this.m_item25 = void 0;
          _this.m_item26 = void 0;
          _this.m_item27 = void 0;
          _this.m_group3 = void 0;
          _this.m_item28 = void 0;
          _this.m_item29 = void 0;
          _this.m_item30 = void 0;
          _this.m_item31 = void 0;
          _this.m_item32 = void 0;
          _this.m_item33 = void 0;
          _this.m_item34 = void 0;
          _this.m_group4 = void 0;
          return _this;
        }
        UI_CalendarMonthItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CalendarMonthItem");
          obj.name = 'UI_CalendarMonthItem';
          return obj;
        };
        var _proto = UI_CalendarMonthItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_item0 = this.getChild("item0");
          this.m_item1 = this.getChild("item1");
          this.m_item2 = this.getChild("item2");
          this.m_item3 = this.getChild("item3");
          this.m_item4 = this.getChild("item4");
          this.m_item5 = this.getChild("item5");
          this.m_item6 = this.getChild("item6");
          this.m_group0 = this.getChild("group0");
          this.m_item7 = this.getChild("item7");
          this.m_item8 = this.getChild("item8");
          this.m_item9 = this.getChild("item9");
          this.m_item10 = this.getChild("item10");
          this.m_item11 = this.getChild("item11");
          this.m_item12 = this.getChild("item12");
          this.m_item13 = this.getChild("item13");
          this.m_group1 = this.getChild("group1");
          this.m_item14 = this.getChild("item14");
          this.m_item15 = this.getChild("item15");
          this.m_item16 = this.getChild("item16");
          this.m_item17 = this.getChild("item17");
          this.m_item18 = this.getChild("item18");
          this.m_item19 = this.getChild("item19");
          this.m_item20 = this.getChild("item20");
          this.m_group2 = this.getChild("group2");
          this.m_item21 = this.getChild("item21");
          this.m_item22 = this.getChild("item22");
          this.m_item23 = this.getChild("item23");
          this.m_item24 = this.getChild("item24");
          this.m_item25 = this.getChild("item25");
          this.m_item26 = this.getChild("item26");
          this.m_item27 = this.getChild("item27");
          this.m_group3 = this.getChild("group3");
          this.m_item28 = this.getChild("item28");
          this.m_item29 = this.getChild("item29");
          this.m_item30 = this.getChild("item30");
          this.m_item31 = this.getChild("item31");
          this.m_item32 = this.getChild("item32");
          this.m_item33 = this.getChild("item33");
          this.m_item34 = this.getChild("item34");
          this.m_group4 = this.getChild("group4");
        };
        return UI_CalendarMonthItem;
      }(FGUIComponentBase));
      UI_CalendarMonthItem.URL = "ui://xddh4ifddsj19b";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CalendarPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c4b53+ku2xA7Lk3N0Qi8+JQ", "UI_CalendarPage", undefined);
      var UI_CalendarPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_CalendarPage, _FGUIComponentBase);
        function UI_CalendarPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_textDateRange = void 0;
          _this.m_textYearMonth = void 0;
          _this.m_week0 = void 0;
          _this.m_week1 = void 0;
          _this.m_week2 = void 0;
          _this.m_week3 = void 0;
          _this.m_week4 = void 0;
          _this.m_week5 = void 0;
          _this.m_week6 = void 0;
          _this.m_monthList = void 0;
          return _this;
        }
        UI_CalendarPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CalendarPage");
          obj.name = 'UI_CalendarPage';
          return obj;
        };
        var _proto = UI_CalendarPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_textDateRange = this.getChild("textDateRange");
          this.m_textYearMonth = this.getChild("textYearMonth");
          this.m_week0 = this.getChild("week0");
          this.m_week1 = this.getChild("week1");
          this.m_week2 = this.getChild("week2");
          this.m_week3 = this.getChild("week3");
          this.m_week4 = this.getChild("week4");
          this.m_week5 = this.getChild("week5");
          this.m_week6 = this.getChild("week6");
          this.m_monthList = this.getChild("monthList");
        };
        return UI_CalendarPage;
      }(FGUIComponentBase));
      UI_CalendarPage.URL = "ui://xddh4ifddsj11r";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CardTypePowerDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e37f2t/oA5MD4BrWfwJ192j", "UI_CardTypePowerDialog", undefined);
      var UI_CardTypePowerDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_CardTypePowerDialog, _FGUIComponentBase);
        function UI_CardTypePowerDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_layerBg = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_CardTypePowerDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "CardTypePowerDialog");
          obj.name = 'UI_CardTypePowerDialog';
          return obj;
        };
        var _proto = UI_CardTypePowerDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_layerBg = this.getChild("layerBg");
          this.m_list = this.getChild("list");
        };
        return UI_CardTypePowerDialog;
      }(FGUIComponentBase));
      UI_CardTypePowerDialog.URL = "ui://0fujvg4oiigr10";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CardTypePowerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ad9b3hZIPtEy6WU+pmZgwlI", "UI_CardTypePowerItem", undefined);
      var UI_CardTypePowerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_CardTypePowerItem, _FGUIComponentBase);
        function UI_CardTypePowerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_layerSelected = void 0;
          _this.m_card1 = void 0;
          _this.m_card2 = void 0;
          _this.m_card3 = void 0;
          _this.m_card4 = void 0;
          _this.m_card5 = void 0;
          _this.m_lbType = void 0;
          return _this;
        }
        UI_CardTypePowerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "CardTypePowerItem");
          obj.name = 'UI_CardTypePowerItem';
          return obj;
        };
        var _proto = UI_CardTypePowerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_layerSelected = this.getChild("layerSelected");
          this.m_card1 = this.getChild("card1");
          this.m_card2 = this.getChild("card2");
          this.m_card3 = this.getChild("card3");
          this.m_card4 = this.getChild("card4");
          this.m_card5 = this.getChild("card5");
          this.m_lbType = this.getChild("lbType");
        };
        return UI_CardTypePowerItem;
      }(FGUIComponentBase));
      UI_CardTypePowerItem.URL = "ui://0fujvg4oiigr11";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CenterTipItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3d0ffj7uHlMx48KA1+mUhnq", "UI_CenterTipItem", undefined);
      var UI_CenterTipItem = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_CenterTipItem, _fgui$GLabel);
        function UI_CenterTipItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_TipsTypeControl = void 0;
          _this.m_bg = void 0;
          _this.m_tipIcon = void 0;
          return _this;
        }
        UI_CenterTipItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CenterTipItem");
          obj.name = 'UI_CenterTipItem';
          return obj;
        };
        var _proto = UI_CenterTipItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_TipsTypeControl = this.getController("TipsTypeControl");
          this.m_bg = this.getChild("bg");
          this.m_tipIcon = this.getChild("tipIcon");
        };
        return UI_CenterTipItem;
      }(GLabel));
      UI_CenterTipItem.URL = "ui://xddh4ifdtzsm19";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CenterTipLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "eb01ec3tzdI6Y6gw/ZJXNWn", "UI_CenterTipLayer", undefined);
      var UI_CenterTipLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_CenterTipLayer, _FGUIComponentBase);
        function UI_CenterTipLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_mask = void 0;
          _this.m_item = void 0;
          _this.m_show = void 0;
          _this.m_hide = void 0;
          return _this;
        }
        UI_CenterTipLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CenterTipLayer");
          obj.name = 'UI_CenterTipLayer';
          return obj;
        };
        var _proto = UI_CenterTipLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_mask = this.getChild("mask");
          this.m_item = this.getChild("item");
          this.m_show = this.getTransition("show");
          this.m_hide = this.getTransition("hide");
        };
        return UI_CenterTipLayer;
      }(FGUIComponentBase));
      UI_CenterTipLayer.URL = "ui://xddh4ifdtzsm1b";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ChangeNickDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fe0afzqLMRCiJiirWASpao8", "UI_ChangeNickDialog", undefined);
      var UI_ChangeNickDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_ChangeNickDialog, _FGUIComponentBase);
        function UI_ChangeNickDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_HeadNode = void 0;
          _this.m_TextModifyDesc = void 0;
          _this.m_InputNick = void 0;
          return _this;
        }
        UI_ChangeNickDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "ChangeNickDialog");
          obj.name = 'UI_ChangeNickDialog';
          return obj;
        };
        var _proto = UI_ChangeNickDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_HeadNode = this.getChild("HeadNode");
          this.m_TextModifyDesc = this.getChild("TextModifyDesc");
          this.m_InputNick = this.getChild("InputNick");
        };
        return UI_ChangeNickDialog;
      }(FGUIComponentBase));
      UI_ChangeNickDialog.URL = "ui://vjmmgvukpvsscn";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CircularProgress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d04c2I8vjxIfKmkB7alVM+E", "UI_CircularProgress", undefined);
      var UI_CircularProgress = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_CircularProgress, _FGUIComponentBase);
        function UI_CircularProgress() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_content = void 0;
          _this.m_point = void 0;
          return _this;
        }
        UI_CircularProgress.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CircularProgress");
          obj.name = 'UI_CircularProgress';
          return obj;
        };
        var _proto = UI_CircularProgress.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_content = this.getChild("content");
          this.m_point = this.getChild("point");
        };
        return UI_CircularProgress;
      }(FGUIComponentBase));
      UI_CircularProgress.URL = "ui://xddh4ifddusaz";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CoinGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "109f1mdcztN/qI5lgniBq4R", "UI_CoinGroup", undefined);
      var UI_CoinGroup = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_CoinGroup, _FGUIComponentBase);
        function UI_CoinGroup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_BtnAdd = void 0;
          _this.m_CoinValue = void 0;
          return _this;
        }
        UI_CoinGroup.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "CoinGroup");
          obj.name = 'UI_CoinGroup';
          return obj;
        };
        var _proto = UI_CoinGroup.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_BtnAdd = this.getChild("BtnAdd");
          this.m_CoinValue = this.getChild("CoinValue");
        };
        return UI_CoinGroup;
      }(FGUIComponentBase));
      UI_CoinGroup.URL = "ui://vjmmgvuksgfy19";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ComboBox1_popup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "50da5h0EahEAIMIKh8B3O8/", "UI_ComboBox1_popup", undefined);
      var UI_ComboBox1_popup = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_ComboBox1_popup, _FGUIComponentBase);
        function UI_ComboBox1_popup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_list = void 0;
          return _this;
        }
        UI_ComboBox1_popup.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Debug", "ComboBox1_popup");
          obj.name = 'UI_ComboBox1_popup';
          return obj;
        };
        var _proto = UI_ComboBox1_popup.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_list = this.getChild("list");
        };
        return UI_ComboBox1_popup;
      }(FGUIComponentBase));
      UI_ComboBox1_popup.URL = "ui://thlralyudz9xk";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CommonButton1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5ee182OdWxGO7WzMywkSKBG", "UI_CommonButton1", undefined);
      var UI_CommonButton1 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_CommonButton1, _fgui$GButton);
        function UI_CommonButton1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bgColor = void 0;
          _this.m_bg = void 0;
          return _this;
        }
        UI_CommonButton1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CommonButton1");
          obj.name = 'UI_CommonButton1';
          return obj;
        };
        var _proto = UI_CommonButton1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bgColor = this.getController("bgColor");
          this.m_bg = this.getChild("bg");
        };
        return UI_CommonButton1;
      }(GButton));
      UI_CommonButton1.URL = "ui://xddh4ifde7mqi";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CommonButton2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "349efGL4KpBqrkWqSMQQiXr", "UI_CommonButton2", undefined);
      var UI_CommonButton2 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_CommonButton2, _fgui$GButton);
        function UI_CommonButton2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bgColor = void 0;
          _this.m_bg = void 0;
          return _this;
        }
        UI_CommonButton2.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CommonButton2");
          obj.name = 'UI_CommonButton2';
          return obj;
        };
        var _proto = UI_CommonButton2.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bgColor = this.getController("bgColor");
          this.m_bg = this.getChild("bg");
        };
        return UI_CommonButton2;
      }(GButton));
      UI_CommonButton2.URL = "ui://xddh4ifdidv610";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CommonButton4.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2656cH2ktNBO4V76znHIB2x", "UI_CommonButton4", undefined);
      var UI_CommonButton4 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_CommonButton4, _fgui$GButton);
        function UI_CommonButton4() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bg = void 0;
          return _this;
        }
        UI_CommonButton4.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CommonButton4");
          obj.name = 'UI_CommonButton4';
          return obj;
        };
        var _proto = UI_CommonButton4.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
        };
        return UI_CommonButton4;
      }(GButton));
      UI_CommonButton4.URL = "ui://xddh4ifdo1ymex";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CommonButtonGreen1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1d707T4n3FA96NDcJCZ+JfJ", "UI_CommonButtonGreen1", undefined);
      var UI_CommonButtonGreen1 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_CommonButtonGreen1, _fgui$GButton);
        function UI_CommonButtonGreen1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bg = void 0;
          return _this;
        }
        UI_CommonButtonGreen1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CommonButtonGreen1");
          obj.name = 'UI_CommonButtonGreen1';
          return obj;
        };
        var _proto = UI_CommonButtonGreen1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
        };
        return UI_CommonButtonGreen1;
      }(GButton));
      UI_CommonButtonGreen1.URL = "ui://xddh4ifducdl16";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CommonButtonGreen2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bcaf7gJRM1KL4ZUYyuVItZl", "UI_CommonButtonGreen2", undefined);
      var UI_CommonButtonGreen2 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_CommonButtonGreen2, _fgui$GButton);
        function UI_CommonButtonGreen2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bg = void 0;
          return _this;
        }
        UI_CommonButtonGreen2.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "CommonButtonGreen2");
          obj.name = 'UI_CommonButtonGreen2';
          return obj;
        };
        var _proto = UI_CommonButtonGreen2.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
        };
        return UI_CommonButtonGreen2;
      }(GButton));
      UI_CommonButtonGreen2.URL = "ui://xddh4ifdhc92f5";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ConfirmBoxStyle1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "efea5szwYFLaKPIE+Xd+mzo", "UI_ConfirmBoxStyle1", undefined);
      var UI_ConfirmBoxStyle1 = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_ConfirmBoxStyle1, _FGUIComponentBase);
        function UI_ConfirmBoxStyle1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_content = void 0;
          return _this;
        }
        UI_ConfirmBoxStyle1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "ConfirmBoxStyle1");
          obj.name = 'UI_ConfirmBoxStyle1';
          return obj;
        };
        var _proto = UI_ConfirmBoxStyle1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_content = this.getChild("content");
        };
        return UI_ConfirmBoxStyle1;
      }(FGUIComponentBase));
      UI_ConfirmBoxStyle1.URL = "ui://xddh4ifdidv6x";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ConfirmBoxStyle2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "19e40dUYoNEZa87px1+ADp4", "UI_ConfirmBoxStyle2", undefined);
      var UI_ConfirmBoxStyle2 = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_ConfirmBoxStyle2, _FGUIComponentBase);
        function UI_ConfirmBoxStyle2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_content = void 0;
          return _this;
        }
        UI_ConfirmBoxStyle2.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "ConfirmBoxStyle2");
          obj.name = 'UI_ConfirmBoxStyle2';
          return obj;
        };
        var _proto = UI_ConfirmBoxStyle2.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_content = this.getChild("content");
        };
        return UI_ConfirmBoxStyle2;
      }(FGUIComponentBase));
      UI_ConfirmBoxStyle2.URL = "ui://xddh4ifd9ez0h1";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_CurrencySelectItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06ea1SKcxFA8ri2LVEBrfAK", "UI_CurrencySelectItem", undefined);
      var UI_CurrencySelectItem = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_CurrencySelectItem, _fgui$GButton);
        function UI_CurrencySelectItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_selectFlag = void 0;
          _this.m_line = void 0;
          return _this;
        }
        UI_CurrencySelectItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "CurrencySelectItem");
          obj.name = 'UI_CurrencySelectItem';
          return obj;
        };
        var _proto = UI_CurrencySelectItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_selectFlag = this.getChild("selectFlag");
          this.m_line = this.getChild("line");
        };
        return UI_CurrencySelectItem;
      }(GButton));
      UI_CurrencySelectItem.URL = "ui://pfvxbnsikd15h";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_DayLoginBItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d208ahs+kBITpTy5EdWjNRh", "UI_DayLoginBItem", undefined);
      var UI_DayLoginBItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_DayLoginBItem, _FGUIComponentBase);
        function UI_DayLoginBItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_day_bg_gray = void 0;
          _this.m_day_bg_light = void 0;
          _this.m_day_title = void 0;
          _this.m_award_icon = void 0;
          _this.m_day_award = void 0;
          _this.m_had_award_icon = void 0;
          return _this;
        }
        UI_DayLoginBItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "DayLoginBItem");
          obj.name = 'UI_DayLoginBItem';
          return obj;
        };
        var _proto = UI_DayLoginBItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_day_bg_gray = this.getChild("day_bg_gray");
          this.m_day_bg_light = this.getChild("day_bg_light");
          this.m_day_title = this.getChild("day_title");
          this.m_award_icon = this.getChild("award_icon");
          this.m_day_award = this.getChild("day_award");
          this.m_had_award_icon = this.getChild("had_award_icon");
        };
        return UI_DayLoginBItem;
      }(FGUIComponentBase));
      UI_DayLoginBItem.URL = "ui://vjmmgvuke8fmek";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_DebugPage1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4222cZi945AnLTZE56GHqdc", "UI_DebugPage1", undefined);
      var UI_DebugPage1 = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_DebugPage1, _FGUIComponentBase);
        function UI_DebugPage1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_comboBoxLan = void 0;
          _this.m_comboBoxNetConfig = void 0;
          _this.m_assetsTitle = void 0;
          _this.m_comboBoxAssets = void 0;
          _this.m_btnBanAll = void 0;
          _this.m_btnHotUpdate = void 0;
          _this.m_btnNet = void 0;
          _this.m_btnHttp = void 0;
          _this.m_btTask = void 0;
          _this.m_btnInfo = void 0;
          _this.m_btnGame = void 0;
          _this.m_btnDebug = void 0;
          _this.m_btnFPS = void 0;
          _this.m_btnRestart = void 0;
          _this.m_btnBackLogin = void 0;
          _this.m_btTest = void 0;
          _this.m_btnClearHotUpdate = void 0;
          _this.m_btnClearDownload = void 0;
          _this.m_btnClearLocalStorage = void 0;
          _this.m_btnCloseWebSocket = void 0;
          _this.m_textInfo = void 0;
          _this.m_btnCopyInfo = void 0;
          return _this;
        }
        UI_DebugPage1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Debug", "DebugPage1");
          obj.name = 'UI_DebugPage1';
          return obj;
        };
        var _proto = UI_DebugPage1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_comboBoxLan = this.getChild("comboBoxLan");
          this.m_comboBoxNetConfig = this.getChild("comboBoxNetConfig");
          this.m_assetsTitle = this.getChild("assetsTitle");
          this.m_comboBoxAssets = this.getChild("comboBoxAssets");
          this.m_btnBanAll = this.getChild("btnBanAll");
          this.m_btnHotUpdate = this.getChild("btnHotUpdate");
          this.m_btnNet = this.getChild("btnNet");
          this.m_btnHttp = this.getChild("btnHttp");
          this.m_btTask = this.getChild("btTask");
          this.m_btnInfo = this.getChild("btnInfo");
          this.m_btnGame = this.getChild("btnGame");
          this.m_btnDebug = this.getChild("btnDebug");
          this.m_btnFPS = this.getChild("btnFPS");
          this.m_btnRestart = this.getChild("btnRestart");
          this.m_btnBackLogin = this.getChild("btnBackLogin");
          this.m_btTest = this.getChild("btTest");
          this.m_btnClearHotUpdate = this.getChild("btnClearHotUpdate");
          this.m_btnClearDownload = this.getChild("btnClearDownload");
          this.m_btnClearLocalStorage = this.getChild("btnClearLocalStorage");
          this.m_btnCloseWebSocket = this.getChild("btnCloseWebSocket");
          this.m_textInfo = this.getChild("textInfo");
          this.m_btnCopyInfo = this.getChild("btnCopyInfo");
        };
        return UI_DebugPage1;
      }(FGUIComponentBase));
      UI_DebugPage1.URL = "ui://thlralyudz9xi";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_DebugPage2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b6a9OkdbNCxoJN7xm67n2U", "UI_DebugPage2", undefined);
      var UI_DebugPage2 = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_DebugPage2, _FGUIComponentBase);
        function UI_DebugPage2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_accountList = void 0;
          _this.m_inputAccount = void 0;
          _this.m_btnLogin = void 0;
          return _this;
        }
        UI_DebugPage2.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Debug", "DebugPage2");
          obj.name = 'UI_DebugPage2';
          return obj;
        };
        var _proto = UI_DebugPage2.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_accountList = this.getChild("accountList");
          this.m_inputAccount = this.getChild("inputAccount");
          this.m_btnLogin = this.getChild("btnLogin");
        };
        return UI_DebugPage2;
      }(FGUIComponentBase));
      UI_DebugPage2.URL = "ui://thlralyuktyrp";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_DebugPage3.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ca85fNsOpdJhKS5vt3pBmnU", "UI_DebugPage3", undefined);
      var UI_DebugPage3 = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_DebugPage3, _FGUIComponentBase);
        function UI_DebugPage3() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_content = void 0;
          _this.m_errorList = void 0;
          _this.m_btnUpdate = void 0;
          return _this;
        }
        UI_DebugPage3.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Debug", "DebugPage3");
          obj.name = 'UI_DebugPage3';
          return obj;
        };
        var _proto = UI_DebugPage3.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_content = this.getChild("content");
          this.m_errorList = this.getChild("errorList");
          this.m_btnUpdate = this.getChild("btnUpdate");
        };
        return UI_DebugPage3;
      }(FGUIComponentBase));
      UI_DebugPage3.URL = "ui://thlralyuisqgr";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_DebugView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "38ea9TG56tB1JI762QwEF5i", "UI_DebugView", undefined);
      var UI_DebugView = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_DebugView, _FGUIComponentBase);
        function UI_DebugView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_pageControl = void 0;
          _this.m_frame = void 0;
          _this.m_contentList = void 0;
          return _this;
        }
        UI_DebugView.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Debug", "DebugView");
          obj.name = 'UI_DebugView';
          return obj;
        };
        var _proto = UI_DebugView.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_pageControl = this.getController("pageControl");
          this.m_frame = this.getChild("frame");
          this.m_contentList = this.getChild("contentList");
        };
        return UI_DebugView;
      }(FGUIComponentBase));
      UI_DebugView.URL = "ui://thlralyup6qk3";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_DialogFrame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a2a85Z3zDNDQJgYveQkFS75", "UI_DialogFrame", undefined);
      var UI_DialogFrame = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_DialogFrame, _fgui$GLabel);
        function UI_DialogFrame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_buttonNum = void 0;
          _this.m_closeButtonActive = void 0;
          _this.m_swapBtnPos = void 0;
          _this.m_bg = void 0;
          _this.m_closeButton = void 0;
          _this.m_btnCancel = void 0;
          _this.m_btnConfirm = void 0;
          return _this;
        }
        UI_DialogFrame.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "DialogFrame");
          obj.name = 'UI_DialogFrame';
          return obj;
        };
        var _proto = UI_DialogFrame.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_buttonNum = this.getController("buttonNum");
          this.m_closeButtonActive = this.getController("closeButtonActive");
          this.m_swapBtnPos = this.getController("swapBtnPos");
          this.m_bg = this.getChild("bg");
          this.m_closeButton = this.getChild("closeButton");
          this.m_btnCancel = this.getChild("btnCancel");
          this.m_btnConfirm = this.getChild("btnConfirm");
        };
        return UI_DialogFrame;
      }(GLabel));
      UI_DialogFrame.URL = "ui://xddh4ifdidv6r";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_DialogFrame2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a34cadx36lEwqG3e9VP7//q", "UI_DialogFrame2", undefined);
      var UI_DialogFrame2 = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_DialogFrame2, _fgui$GLabel);
        function UI_DialogFrame2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_buttonNum = void 0;
          _this.m_swapBtnPos = void 0;
          _this.m_closeButton = void 0;
          _this.m_bg = void 0;
          _this.m_top = void 0;
          _this.m_btnCancel = void 0;
          _this.m_btnConfirm = void 0;
          return _this;
        }
        UI_DialogFrame2.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "DialogFrame2");
          obj.name = 'UI_DialogFrame2';
          return obj;
        };
        var _proto = UI_DialogFrame2.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_buttonNum = this.getController("buttonNum");
          this.m_swapBtnPos = this.getController("swapBtnPos");
          this.m_closeButton = this.getChild("closeButton");
          this.m_bg = this.getChild("bg");
          this.m_top = this.getChild("top");
          this.m_btnCancel = this.getChild("btnCancel");
          this.m_btnConfirm = this.getChild("btnConfirm");
        };
        return UI_DialogFrame2;
      }(GLabel));
      UI_DialogFrame2.URL = "ui://xddh4ifdmgcnez";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_DialogFrame3.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f4b5ch/ocRBEaaQHD2bf0Ox", "UI_DialogFrame3", undefined);
      var UI_DialogFrame3 = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_DialogFrame3, _fgui$GLabel);
        function UI_DialogFrame3() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_buttonNum = void 0;
          _this.m_swapBtnPos = void 0;
          _this.m_showDrag = void 0;
          _this.m_closeButton = void 0;
          _this.m_bg = void 0;
          _this.m_top = void 0;
          _this.m_dragIcon = void 0;
          _this.m_dragNode = void 0;
          _this.m_btnCancel = void 0;
          _this.m_btnConfirm = void 0;
          return _this;
        }
        UI_DialogFrame3.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "DialogFrame3");
          obj.name = 'UI_DialogFrame3';
          return obj;
        };
        var _proto = UI_DialogFrame3.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_buttonNum = this.getController("buttonNum");
          this.m_swapBtnPos = this.getController("swapBtnPos");
          this.m_showDrag = this.getController("showDrag");
          this.m_closeButton = this.getChild("closeButton");
          this.m_bg = this.getChild("bg");
          this.m_top = this.getChild("top");
          this.m_dragIcon = this.getChild("dragIcon");
          this.m_dragNode = this.getChild("dragNode");
          this.m_btnCancel = this.getChild("btnCancel");
          this.m_btnConfirm = this.getChild("btnConfirm");
        };
        return UI_DialogFrame3;
      }(GLabel));
      UI_DialogFrame3.URL = "ui://xddh4ifd9ez0h0";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ErrorListItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d51467lz/BIkrkuHW4Hwy5V", "UI_ErrorListItem", undefined);
      var UI_ErrorListItem = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_ErrorListItem, _fgui$GLabel);
        function UI_ErrorListItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_itemSelected = void 0;
          return _this;
        }
        UI_ErrorListItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Debug", "ErrorListItem");
          obj.name = 'UI_ErrorListItem';
          return obj;
        };
        var _proto = UI_ErrorListItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_itemSelected = this.getController("itemSelected");
        };
        return UI_ErrorListItem;
      }(GLabel));
      UI_ErrorListItem.URL = "ui://thlralyuisqgs";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_FSlider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2acbaA0DCJNGa7YPPJenuAK", "UI_FSlider", undefined);
      var UI_FSlider = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_FSlider, _FGUIComponentBase);
        function UI_FSlider() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_bar = void 0;
          _this.m_sliderHandler = void 0;
          return _this;
        }
        UI_FSlider.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "FSlider");
          obj.name = 'UI_FSlider';
          return obj;
        };
        var _proto = UI_FSlider.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_bar = this.getChild("bar");
          this.m_sliderHandler = this.getChild("sliderHandler");
        };
        return UI_FSlider;
      }(FGUIComponentBase));
      UI_FSlider.URL = "ui://xddh4ifdquskbo";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "954d5sONxRCaYWIV8JAvk/x", "UI_GameButton", undefined);
      var UI_GameButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_GameButton, _fgui$GButton);
        function UI_GameButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_RedHotControl = void 0;
          _this.m_selecton = void 0;
          _this.m_mygameRedHot = void 0;
          return _this;
        }
        UI_GameButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "GameButton");
          obj.name = 'UI_GameButton';
          return obj;
        };
        var _proto = UI_GameButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_RedHotControl = this.getController("RedHotControl");
          this.m_selecton = this.getChild("selecton");
          this.m_mygameRedHot = this.getChild("mygameRedHot");
        };
        return UI_GameButton;
      }(GButton));
      UI_GameButton.URL = "ui://vjmmgvukouoc4x";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameButton2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fd1e34wcJJBxpNWsMFX58DB", "UI_GameButton", undefined);
      var UI_GameButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_GameButton, _fgui$GButton);
        function UI_GameButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_effect = void 0;
          _this.m_title1 = void 0;
          return _this;
        }
        UI_GameButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "GameButton");
          obj.name = 'UI_GameButton';
          return obj;
        };
        var _proto = UI_GameButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_effect = this.getChild("effect");
          this.m_title1 = this.getChild("title1");
        };
        return UI_GameButton;
      }(GButton));
      UI_GameButton.URL = "ui://0fujvg4or9lg2l";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameButtonCircle1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d5b0eYBmWFK87kdQ/uphQzV", "UI_GameButtonCircle1", undefined);
      var UI_GameButtonCircle1 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_GameButtonCircle1, _fgui$GButton);
        function UI_GameButtonCircle1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_read_point = void 0;
          return _this;
        }
        UI_GameButtonCircle1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "GameButtonCircle1");
          obj.name = 'UI_GameButtonCircle1';
          return obj;
        };
        var _proto = UI_GameButtonCircle1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_read_point = this.getChild("read_point");
        };
        return UI_GameButtonCircle1;
      }(GButton));
      UI_GameButtonCircle1.URL = "ui://0fujvg4oeyob1u";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameButtonRabbitCamera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "89157fB6u1F9IZjrfLuB5fm", "UI_GameButtonRabbitCamera", undefined);
      var UI_GameButtonRabbitCamera = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_GameButtonRabbitCamera, _fgui$GButton);
        function UI_GameButtonRabbitCamera() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_iconRabbitCost = void 0;
          _this.m_textRabbitCost = void 0;
          _this.m_groupRabbitCost = void 0;
          _this.m_bgRabbit = void 0;
          _this.m_textRabbitFree = void 0;
          _this.m_t0 = void 0;
          return _this;
        }
        UI_GameButtonRabbitCamera.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "GameButtonRabbitCamera");
          obj.name = 'UI_GameButtonRabbitCamera';
          return obj;
        };
        var _proto = UI_GameButtonRabbitCamera.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_iconRabbitCost = this.getChild("iconRabbitCost");
          this.m_textRabbitCost = this.getChild("textRabbitCost");
          this.m_groupRabbitCost = this.getChild("groupRabbitCost");
          this.m_bgRabbit = this.getChild("bgRabbit");
          this.m_textRabbitFree = this.getChild("textRabbitFree");
          this.m_t0 = this.getTransition("t0");
        };
        return UI_GameButtonRabbitCamera;
      }(GButton));
      UI_GameButtonRabbitCamera.URL = "ui://0fujvg4oyjbk2c";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameButtonTimeBank.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bd5fdOeSh5MGYv6/AptB4Uq", "UI_GameButtonTimeBank", undefined);
      var UI_GameButtonTimeBank = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_GameButtonTimeBank, _fgui$GButton);
        function UI_GameButtonTimeBank() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_freeCost = void 0;
          _this.m_costIcon = void 0;
          _this.m_cost = void 0;
          return _this;
        }
        UI_GameButtonTimeBank.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "GameButtonTimeBank");
          obj.name = 'UI_GameButtonTimeBank';
          return obj;
        };
        var _proto = UI_GameButtonTimeBank.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_freeCost = this.getController("freeCost");
          this.m_costIcon = this.getChild("costIcon");
          this.m_cost = this.getChild("cost");
        };
        return UI_GameButtonTimeBank;
      }(GButton));
      UI_GameButtonTimeBank.URL = "ui://0fujvg4oyjbk29";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_gameExpression.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a64bc8loH9M3aj5UCC+UrBR", "UI_gameExpression", undefined);
      var UI_gameExpression = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_gameExpression, _FGUIComponentBase);
        function UI_gameExpression() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_place0 = void 0;
          _this.m_place1 = void 0;
          _this.m_place2 = void 0;
          _this.m_place3 = void 0;
          _this.m_place4 = void 0;
          _this.m_place5 = void 0;
          _this.m_place6 = void 0;
          _this.m_place7 = void 0;
          _this.m_place8 = void 0;
          _this.m_place9 = void 0;
          _this.m_place10 = void 0;
          _this.m_place11 = void 0;
          _this.m_place12 = void 0;
          _this.m_place13 = void 0;
          _this.m_place14 = void 0;
          return _this;
        }
        UI_gameExpression.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "gameExpression");
          obj.name = 'UI_gameExpression';
          return obj;
        };
        var _proto = UI_gameExpression.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_place0 = this.getChild("place0");
          this.m_place1 = this.getChild("place1");
          this.m_place2 = this.getChild("place2");
          this.m_place3 = this.getChild("place3");
          this.m_place4 = this.getChild("place4");
          this.m_place5 = this.getChild("place5");
          this.m_place6 = this.getChild("place6");
          this.m_place7 = this.getChild("place7");
          this.m_place8 = this.getChild("place8");
          this.m_place9 = this.getChild("place9");
          this.m_place10 = this.getChild("place10");
          this.m_place11 = this.getChild("place11");
          this.m_place12 = this.getChild("place12");
          this.m_place13 = this.getChild("place13");
          this.m_place14 = this.getChild("place14");
        };
        return UI_gameExpression;
      }(FGUIComponentBase));
      UI_gameExpression.URL = "ui://0fujvg4oo1ym59";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameExpressionDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "20d13ASE/VJBYchb2LgYwiB", "UI_GameExpressionDialog", undefined);
      var UI_GameExpressionDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_GameExpressionDialog, _FGUIComponentBase);
        function UI_GameExpressionDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bgMask = void 0;
          _this.m_frame = void 0;
          _this.m_gameEmoj = void 0;
          return _this;
        }
        UI_GameExpressionDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "GameExpressionDialog");
          obj.name = 'UI_GameExpressionDialog';
          return obj;
        };
        var _proto = UI_GameExpressionDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bgMask = this.getChild("bgMask");
          this.m_frame = this.getChild("frame");
          this.m_gameEmoj = this.getChild("gameEmoj");
        };
        return UI_GameExpressionDialog;
      }(FGUIComponentBase));
      UI_GameExpressionDialog.URL = "ui://0fujvg4ohour2h";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameMenuItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "21ddfP8gQ9JC4NkPeqL/Clb", "UI_GameMenuItem", undefined);
      var UI_GameMenuItem = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_GameMenuItem, _fgui$GButton);
        function UI_GameMenuItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_read_point = void 0;
          return _this;
        }
        UI_GameMenuItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "GameMenuItem");
          obj.name = 'UI_GameMenuItem';
          return obj;
        };
        var _proto = UI_GameMenuItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_read_point = this.getChild("read_point");
        };
        return UI_GameMenuItem;
      }(GButton));
      UI_GameMenuItem.URL = "ui://0fujvg4oeyob22";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameOperatorButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1054dMDtPpKV77ynjmWytvF", "UI_GameOperatorButton", undefined);
      var UI_GameOperatorButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_GameOperatorButton, _fgui$GButton);
        function UI_GameOperatorButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bgColor = void 0;
          _this.m_bg = void 0;
          return _this;
        }
        UI_GameOperatorButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "GameOperatorButton");
          obj.name = 'UI_GameOperatorButton';
          return obj;
        };
        var _proto = UI_GameOperatorButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bgColor = this.getController("bgColor");
          this.m_bg = this.getChild("bg");
        };
        return UI_GameOperatorButton;
      }(GButton));
      UI_GameOperatorButton.URL = "ui://0fujvg4ohc9259";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GamePreOperatorButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5dad3svO/hJNoPWZ1TiSw9H", "UI_GamePreOperatorButton", undefined);
      var UI_GamePreOperatorButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_GamePreOperatorButton, _fgui$GButton);
        function UI_GamePreOperatorButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_select = void 0;
          _this.m_bg = void 0;
          _this.m_stork = void 0;
          return _this;
        }
        UI_GamePreOperatorButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "GamePreOperatorButton");
          obj.name = 'UI_GamePreOperatorButton';
          return obj;
        };
        var _proto = UI_GamePreOperatorButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_select = this.getController("select");
          this.m_bg = this.getChild("bg");
          this.m_stork = this.getChild("stork");
        };
        return UI_GamePreOperatorButton;
      }(GButton));
      UI_GamePreOperatorButton.URL = "ui://0fujvg4ot9151n";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GameRoomPageItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1d3fb7yD+pD0ZXyyCQucWFW", "UI_GameRoomPageItem", undefined);
      var UI_GameRoomPageItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_GameRoomPageItem, _FGUIComponentBase);
        function UI_GameRoomPageItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_NodeNone = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_GameRoomPageItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "GameRoomPageItem");
          obj.name = 'UI_GameRoomPageItem';
          return obj;
        };
        var _proto = UI_GameRoomPageItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_NodeNone = this.getChild("NodeNone");
          this.m_list = this.getChild("list");
        };
        return UI_GameRoomPageItem;
      }(FGUIComponentBase));
      UI_GameRoomPageItem.URL = "ui://vjmmgvukouoc56";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GetRewardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "59f5bJiMsFJdaMyF2lJx1RP", "UI_GetRewardItem", undefined);
      var UI_GetRewardItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_GetRewardItem, _FGUIComponentBase);
        function UI_GetRewardItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_icon = void 0;
          _this.m_title = void 0;
          _this.m_run = void 0;
          return _this;
        }
        UI_GetRewardItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "GetRewardItem");
          obj.name = 'UI_GetRewardItem';
          return obj;
        };
        var _proto = UI_GetRewardItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_icon = this.getChild("icon");
          this.m_title = this.getChild("title");
          this.m_run = this.getTransition("run");
        };
        return UI_GetRewardItem;
      }(FGUIComponentBase));
      UI_GetRewardItem.URL = "ui://xddh4ifduwmwbq";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GetRewardPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "053e7I21d5Ln5sHFUntR97d", "UI_GetRewardPage", undefined);
      var UI_GetRewardPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_GetRewardPage, _FGUIComponentBase);
        function UI_GetRewardPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_title = void 0;
          _this.m_RewardList = void 0;
          return _this;
        }
        UI_GetRewardPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "GetRewardPage");
          obj.name = 'UI_GetRewardPage';
          return obj;
        };
        var _proto = UI_GetRewardPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_title = this.getChild("title");
          this.m_RewardList = this.getChild("RewardList");
        };
        return UI_GetRewardPage;
      }(FGUIComponentBase));
      UI_GetRewardPage.URL = "ui://xddh4ifdt3g3bm";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_GoldComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0b5d4vMTXBMIKikCCLqQSrM", "UI_GoldComponent", undefined);
      var UI_GoldComponent = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_GoldComponent, _FGUIComponentBase);
        function UI_GoldComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_icon = void 0;
          return _this;
        }
        UI_GoldComponent.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "GoldComponent");
          obj.name = 'UI_GoldComponent';
          return obj;
        };
        var _proto = UI_GoldComponent.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_icon = this.getChild("icon");
        };
        return UI_GoldComponent;
      }(FGUIComponentBase));
      UI_GoldComponent.URL = "ui://xddh4ifdqffk9t";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_HandCardDayItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a310dnjUYtGbIuFLKH3ncUS", "UI_HandCardDayItem", undefined);
      var UI_HandCardDayItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_HandCardDayItem, _FGUIComponentBase);
        function UI_HandCardDayItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_title = void 0;
          return _this;
        }
        UI_HandCardDayItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "HandCardDayItem");
          obj.name = 'UI_HandCardDayItem';
          return obj;
        };
        var _proto = UI_HandCardDayItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_title = this.getChild("title");
        };
        return UI_HandCardDayItem;
      }(FGUIComponentBase));
      UI_HandCardDayItem.URL = "ui://vjmmgvuktryj4o";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_HandCardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c4446URwt5FgZpWMD/CHqnQ", "UI_HandCardItem", undefined);
      var UI_HandCardItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_HandCardItem, _FGUIComponentBase);
        function UI_HandCardItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_CardNumControl = void 0;
          _this.m_CollectControl = void 0;
          _this.m_TextGameType = void 0;
          _this.m_TextBS = void 0;
          _this.m_cardNode0 = void 0;
          _this.m_cardNode1 = void 0;
          _this.m_cardNode2 = void 0;
          _this.m_cardNode3 = void 0;
          _this.m_cardNode4 = void 0;
          _this.m_cardNode5 = void 0;
          _this.m_BtnReView = void 0;
          _this.m_TextTime = void 0;
          _this.m_TextResult = void 0;
          _this.m_BtnShare = void 0;
          _this.m_BtnDelete = void 0;
          _this.m_BtnCollect = void 0;
          _this.m_BtnCollectSelect = void 0;
          return _this;
        }
        UI_HandCardItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "HandCardItem");
          obj.name = 'UI_HandCardItem';
          return obj;
        };
        var _proto = UI_HandCardItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_CardNumControl = this.getController("CardNumControl");
          this.m_CollectControl = this.getController("CollectControl");
          this.m_TextGameType = this.getChild("TextGameType");
          this.m_TextBS = this.getChild("TextBS");
          this.m_cardNode0 = this.getChild("cardNode0");
          this.m_cardNode1 = this.getChild("cardNode1");
          this.m_cardNode2 = this.getChild("cardNode2");
          this.m_cardNode3 = this.getChild("cardNode3");
          this.m_cardNode4 = this.getChild("cardNode4");
          this.m_cardNode5 = this.getChild("cardNode5");
          this.m_BtnReView = this.getChild("BtnReView");
          this.m_TextTime = this.getChild("TextTime");
          this.m_TextResult = this.getChild("TextResult");
          this.m_BtnShare = this.getChild("BtnShare");
          this.m_BtnDelete = this.getChild("BtnDelete");
          this.m_BtnCollect = this.getChild("BtnCollect");
          this.m_BtnCollectSelect = this.getChild("BtnCollectSelect");
        };
        return UI_HandCardItem;
      }(FGUIComponentBase));
      UI_HandCardItem.URL = "ui://vjmmgvuktryj4f";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_HandCardReviewItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "571fa65TAdJlqCYYo2BLw6s", "UI_HandCardReviewItem", undefined);
      var UI_HandCardReviewItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_HandCardReviewItem, _FGUIComponentBase);
        function UI_HandCardReviewItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_noneCmpt = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_HandCardReviewItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "HandCardReviewItem");
          obj.name = 'UI_HandCardReviewItem';
          return obj;
        };
        var _proto = UI_HandCardReviewItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_noneCmpt = this.getChild("noneCmpt");
          this.m_list = this.getChild("list");
        };
        return UI_HandCardReviewItem;
      }(FGUIComponentBase));
      UI_HandCardReviewItem.URL = "ui://vjmmgvuker1f21";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_HandCardReviewPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "23d261JuA1J0obxoX7vJ0+W", "UI_HandCardReviewPage", undefined);
      var UI_HandCardReviewPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_HandCardReviewPage, _FGUIComponentBase);
        function UI_HandCardReviewPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_PageControl = void 0;
          _this.m_frame = void 0;
          _this.m_BtnMyHands = void 0;
          _this.m_BtnCollection = void 0;
          _this.m_ListContent = void 0;
          return _this;
        }
        UI_HandCardReviewPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "HandCardReviewPage");
          obj.name = 'UI_HandCardReviewPage';
          return obj;
        };
        var _proto = UI_HandCardReviewPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_PageControl = this.getController("PageControl");
          this.m_frame = this.getChild("frame");
          this.m_BtnMyHands = this.getChild("BtnMyHands");
          this.m_BtnCollection = this.getChild("BtnCollection");
          this.m_ListContent = this.getChild("ListContent");
        };
        return UI_HandCardReviewPage;
      }(FGUIComponentBase));
      UI_HandCardReviewPage.URL = "ui://vjmmgvukfhxe1w";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_HeadItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c27cfoi7TdDd7W9bczFWTXk", "UI_HeadItem", undefined);
      var UI_HeadItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_HeadItem, _FGUIComponentBase);
        function UI_HeadItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_HeadNode = void 0;
          _this.m_frame = void 0;
          return _this;
        }
        UI_HeadItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "HeadItem");
          obj.name = 'UI_HeadItem';
          return obj;
        };
        var _proto = UI_HeadItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_HeadNode = this.getChild("HeadNode");
          this.m_frame = this.getChild("frame");
        };
        return UI_HeadItem;
      }(FGUIComponentBase));
      UI_HeadItem.URL = "ui://vjmmgvukjca32p";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_InviteContent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6e8e6Qs10xA0adApuM5zXyq", "UI_InviteContent", undefined);
      var UI_InviteContent = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_InviteContent, _FGUIComponentBase);
        function UI_InviteContent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_title = void 0;
          _this.m_label_reward = void 0;
          _this.m_label_reward_friend = void 0;
          _this.m_label_2 = void 0;
          _this.m_friend_icon = void 0;
          _this.m_label_mony_1 = void 0;
          _this.m_invite_friend = void 0;
          _this.m_label_game_2 = void 0;
          _this.m_label_game_1 = void 0;
          _this.m_game_icon = void 0;
          _this.m_label_game_money = void 0;
          _this.m_invite_friend_game = void 0;
          _this.m_label_award_2 = void 0;
          _this.m_label_award_1 = void 0;
          _this.m_award_icon_1 = void 0;
          _this.m_invite_award = void 0;
          _this.m_label_reward_record = void 0;
          _this.m_tableview = void 0;
          _this.m_no_record_com = void 0;
          return _this;
        }
        UI_InviteContent.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "InviteContent");
          obj.name = 'UI_InviteContent';
          return obj;
        };
        var _proto = UI_InviteContent.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_title = this.getChild("title");
          this.m_label_reward = this.getChild("label_reward");
          this.m_label_reward_friend = this.getChild("label_reward_friend");
          this.m_label_2 = this.getChild("label_2");
          this.m_friend_icon = this.getChild("friend_icon");
          this.m_label_mony_1 = this.getChild("label_mony_1");
          this.m_invite_friend = this.getChild("invite_friend");
          this.m_label_game_2 = this.getChild("label_game_2");
          this.m_label_game_1 = this.getChild("label_game_1");
          this.m_game_icon = this.getChild("game_icon");
          this.m_label_game_money = this.getChild("label_game_money");
          this.m_invite_friend_game = this.getChild("invite_friend_game");
          this.m_label_award_2 = this.getChild("label_award_2");
          this.m_label_award_1 = this.getChild("label_award_1");
          this.m_award_icon_1 = this.getChild("award_icon_1");
          this.m_invite_award = this.getChild("invite_award");
          this.m_label_reward_record = this.getChild("label_reward_record");
          this.m_tableview = this.getChild("tableview");
          this.m_no_record_com = this.getChild("no_record_com");
        };
        return UI_InviteContent;
      }(FGUIComponentBase));
      UI_InviteContent.URL = "ui://vjmmgvukiwf5hk";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ListNoneComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed237bTtPpA4pMoMUQPMjU7", "UI_ListNoneComponent", undefined);
      var UI_ListNoneComponent = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_ListNoneComponent, _FGUIComponentBase);
        function UI_ListNoneComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_icon = void 0;
          _this.m_title = void 0;
          return _this;
        }
        UI_ListNoneComponent.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "ListNoneComponent");
          obj.name = 'UI_ListNoneComponent';
          return obj;
        };
        var _proto = UI_ListNoneComponent.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_icon = this.getChild("icon");
          this.m_title = this.getChild("title");
        };
        return UI_ListNoneComponent;
      }(FGUIComponentBase));
      UI_ListNoneComponent.URL = "ui://xddh4ifduyjxbh";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LoadingItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e388e8A83hCwI5Vu/yuTxVB", "UI_LoadingItem", undefined);
      var UI_LoadingItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LoadingItem, _FGUIComponentBase);
        function UI_LoadingItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_mask = void 0;
          _this.m_bg = void 0;
          _this.m_spinner = void 0;
          _this.m_color = void 0;
          _this.m_color2 = void 0;
          _this.m_tans0 = void 0;
          _this.m_tans1 = void 0;
          return _this;
        }
        UI_LoadingItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "LoadingItem");
          obj.name = 'UI_LoadingItem';
          return obj;
        };
        var _proto = UI_LoadingItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_mask = this.getChild("mask");
          this.m_bg = this.getChild("bg");
          this.m_spinner = this.getChild("spinner");
          this.m_color = this.getChild("color");
          this.m_color2 = this.getChild("color2");
          this.m_tans0 = this.getTransition("tans0");
          this.m_tans1 = this.getTransition("tans1");
        };
        return UI_LoadingItem;
      }(FGUIComponentBase));
      UI_LoadingItem.URL = "ui://xddh4ifddz9xl";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LoadingLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f99e5D0lFxAm5jFWaaMNJ3c", "UI_LoadingLayer", undefined);
      var UI_LoadingLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LoadingLayer, _FGUIComponentBase);
        function UI_LoadingLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_spinner = void 0;
          _this.m_color = void 0;
          _this.m_color2 = void 0;
          _this.m_tans0 = void 0;
          _this.m_tans1 = void 0;
          return _this;
        }
        UI_LoadingLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "LoadingLayer");
          obj.name = 'UI_LoadingLayer';
          return obj;
        };
        var _proto = UI_LoadingLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_spinner = this.getChild("spinner");
          this.m_color = this.getChild("color");
          this.m_color2 = this.getChild("color2");
          this.m_tans0 = this.getTransition("tans0");
          this.m_tans1 = this.getTransition("tans1");
        };
        return UI_LoadingLayer;
      }(FGUIComponentBase));
      UI_LoadingLayer.URL = "ui://0fujvg4ojdek68";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Board_BlindDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8a173pr9qNNm7bb6TARXh38", "UI_Lobby_Board_BlindDialog", undefined);
      var UI_Lobby_Board_BlindDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Board_BlindDialog, _FGUIComponentBase);
        function UI_Lobby_Board_BlindDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_labelTitle1 = void 0;
          _this.m_labelTitle2 = void 0;
          _this.m_labelTitle3 = void 0;
          _this.m_tableview = void 0;
          return _this;
        }
        UI_Lobby_Board_BlindDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Board_BlindDialog");
          obj.name = 'UI_Lobby_Board_BlindDialog';
          return obj;
        };
        var _proto = UI_Lobby_Board_BlindDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_labelTitle1 = this.getChild("labelTitle1");
          this.m_labelTitle2 = this.getChild("labelTitle2");
          this.m_labelTitle3 = this.getChild("labelTitle3");
          this.m_tableview = this.getChild("tableview");
        };
        return UI_Lobby_Board_BlindDialog;
      }(FGUIComponentBase));
      UI_Lobby_Board_BlindDialog.URL = "ui://vjmmgvukeso0co";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Board_BlindItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c099dwyzuVNFqQOPnerVg8r", "UI_Lobby_Board_BlindItem", undefined);
      var UI_Lobby_Board_BlindItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Board_BlindItem, _FGUIComponentBase);
        function UI_Lobby_Board_BlindItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_line = void 0;
          _this.m_labelRebuy = void 0;
          _this.m_labelAddon = void 0;
          _this.m_addOnCom = void 0;
          _this.m_labelBlind = void 0;
          _this.m_labelIndex = void 0;
          _this.m_labelAnte = void 0;
          return _this;
        }
        UI_Lobby_Board_BlindItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Board_BlindItem");
          obj.name = 'UI_Lobby_Board_BlindItem';
          return obj;
        };
        var _proto = UI_Lobby_Board_BlindItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_line = this.getChild("line");
          this.m_labelRebuy = this.getChild("labelRebuy");
          this.m_labelAddon = this.getChild("labelAddon");
          this.m_addOnCom = this.getChild("addOnCom");
          this.m_labelBlind = this.getChild("labelBlind");
          this.m_labelIndex = this.getChild("labelIndex");
          this.m_labelAnte = this.getChild("labelAnte");
        };
        return UI_Lobby_Board_BlindItem;
      }(FGUIComponentBase));
      UI_Lobby_Board_BlindItem.URL = "ui://vjmmgvukeso0cp";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Board_Layer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e6656ASAHxM4YomzE+EmFYj", "UI_Lobby_Board_Layer", undefined);
      var UI_Lobby_Board_Layer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Board_Layer, _FGUIComponentBase);
        function UI_Lobby_Board_Layer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_top_btn_group = void 0;
          _this.m_frame = void 0;
          _this.m_btn_bg_1 = void 0;
          _this.m_btn_bg_2 = void 0;
          _this.m_btn_bg_3 = void 0;
          _this.m_btn_bg_4 = void 0;
          _this.m_light_icon = void 0;
          _this.m_btn_detail = void 0;
          _this.m_btn_enter = void 0;
          _this.m_btn_table = void 0;
          _this.m_btn_prize = void 0;
          _this.m_tabelview = void 0;
          _this.m_boardCommonBtn = void 0;
          return _this;
        }
        UI_Lobby_Board_Layer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Board_Layer");
          obj.name = 'UI_Lobby_Board_Layer';
          return obj;
        };
        var _proto = UI_Lobby_Board_Layer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_top_btn_group = this.getController("top_btn_group");
          this.m_frame = this.getChild("frame");
          this.m_btn_bg_1 = this.getChild("btn_bg_1");
          this.m_btn_bg_2 = this.getChild("btn_bg_2");
          this.m_btn_bg_3 = this.getChild("btn_bg_3");
          this.m_btn_bg_4 = this.getChild("btn_bg_4");
          this.m_light_icon = this.getChild("light_icon");
          this.m_btn_detail = this.getChild("btn_detail");
          this.m_btn_enter = this.getChild("btn_enter");
          this.m_btn_table = this.getChild("btn_table");
          this.m_btn_prize = this.getChild("btn_prize");
          this.m_tabelview = this.getChild("tabelview");
          this.m_boardCommonBtn = this.getChild("boardCommonBtn");
        };
        return UI_Lobby_Board_Layer;
      }(FGUIComponentBase));
      UI_Lobby_Board_Layer.URL = "ui://vjmmgvukmnw65k";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_board_page_item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9f2dcbGCbFEKJDp5ClIsHIb", "UI_Lobby_board_page_item", undefined);
      var UI_Lobby_board_page_item = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_board_page_item, _FGUIComponentBase);
        function UI_Lobby_board_page_item() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_icon1 = void 0;
          _this.m_icon2 = void 0;
          _this.m_icon3 = void 0;
          return _this;
        }
        UI_Lobby_board_page_item.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_board_page_item");
          obj.name = 'UI_Lobby_board_page_item';
          return obj;
        };
        var _proto = UI_Lobby_board_page_item.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_icon1 = this.getChild("icon1");
          this.m_icon2 = this.getChild("icon2");
          this.m_icon3 = this.getChild("icon3");
        };
        return UI_Lobby_board_page_item;
      }(FGUIComponentBase));
      UI_Lobby_board_page_item.URL = "ui://vjmmgvukeso0d4";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_board_payout_structure.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6c3c1YVm15K0ImQybaOKz5H", "UI_Lobby_board_payout_structure", undefined);
      var UI_Lobby_board_payout_structure = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_board_payout_structure, _FGUIComponentBase);
        function UI_Lobby_board_payout_structure() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_tableview = void 0;
          return _this;
        }
        UI_Lobby_board_payout_structure.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_board_payout_structure");
          obj.name = 'UI_Lobby_board_payout_structure';
          return obj;
        };
        var _proto = UI_Lobby_board_payout_structure.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_tableview = this.getChild("tableview");
        };
        return UI_Lobby_board_payout_structure;
      }(FGUIComponentBase));
      UI_Lobby_board_payout_structure.URL = "ui://vjmmgvukeso0cu";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Detail_info_panal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cd029Elvs1Hm70RWGMJkjV0", "UI_Lobby_Detail_info_panal", undefined);
      var UI_Lobby_Detail_info_panal = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Detail_info_panal, _FGUIComponentBase);
        function UI_Lobby_Detail_info_panal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_image_ko = void 0;
          _this.m_image_pko = void 0;
          _this.m_image_mtt = void 0;
          _this.m_labelPrizePoolTitle = void 0;
          _this.m_prizeIcon = void 0;
          _this.m_labelPrizePool = void 0;
          _this.m_title_curret_level = void 0;
          _this.m_labelLateRegLv = void 0;
          _this.m_labelLevel = void 0;
          _this.m_labelBlindLevell = void 0;
          _this.m_detail_bg_2 = void 0;
          _this.m_labelBuyinTitle = void 0;
          _this.m_buyinIcon = void 0;
          _this.m_labelBuyinPre = void 0;
          _this.m_Text_3_0_0_0 = void 0;
          _this.m_labelRebuy = void 0;
          _this.m_Image_rebuyicon = void 0;
          _this.m_labelValue_icon = void 0;
          _this.m_Text_3_0_0_0_0 = void 0;
          _this.m_labelAddon = void 0;
          _this.m_Image_addon_icon = void 0;
          _this.m_labelAddonValue = void 0;
          _this.m_Text_start_chips = void 0;
          _this.m_Text_start_chips_num = void 0;
          _this.m_Text_avg_chips = void 0;
          _this.m_labelAvgStack = void 0;
          _this.m_Text1 = void 0;
          _this.m_labelEntryRange = void 0;
          _this.m_btnBlindStruct = void 0;
          _this.m_labelBindType = void 0;
          _this.m_btnBlindTimeTip = void 0;
          _this.m_test_up_blind = void 0;
          _this.m_labelBlindTime = void 0;
          _this.m_btnBlindTip_spr = void 0;
          _this.m_labelProgressiveBounty = void 0;
          _this.m_labelPBValue = void 0;
          _this.m_pko_comb = void 0;
          _this.m_labelEntryTitle = void 0;
          _this.m_labelEntry = void 0;
          _this.m_nodeBreakText = void 0;
          _this.m_labelBreak = void 0;
          _this.m_nodeBreak = void 0;
          _this.m_labe_1 = void 0;
          _this.m_labe_2 = void 0;
          _this.m_labe_3 = void 0;
          _this.m_labe_4 = void 0;
          _this.m_labe_5 = void 0;
          _this.m_labe_6 = void 0;
          _this.m_labelgameStatus = void 0;
          _this.m_split_line = void 0;
          _this.m_labelStartTime = void 0;
          return _this;
        }
        UI_Lobby_Detail_info_panal.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Detail_info_panal");
          obj.name = 'UI_Lobby_Detail_info_panal';
          return obj;
        };
        var _proto = UI_Lobby_Detail_info_panal.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_image_ko = this.getChild("image_ko");
          this.m_image_pko = this.getChild("image_pko");
          this.m_image_mtt = this.getChild("image_mtt");
          this.m_labelPrizePoolTitle = this.getChild("labelPrizePoolTitle");
          this.m_prizeIcon = this.getChild("prizeIcon");
          this.m_labelPrizePool = this.getChild("labelPrizePool");
          this.m_title_curret_level = this.getChild("title_curret_level");
          this.m_labelLateRegLv = this.getChild("labelLateRegLv");
          this.m_labelLevel = this.getChild("labelLevel");
          this.m_labelBlindLevell = this.getChild("labelBlindLevell");
          this.m_detail_bg_2 = this.getChild("detail_bg_2");
          this.m_labelBuyinTitle = this.getChild("labelBuyinTitle");
          this.m_buyinIcon = this.getChild("buyinIcon");
          this.m_labelBuyinPre = this.getChild("labelBuyinPre");
          this.m_Text_3_0_0_0 = this.getChild("Text_3_0_0_0");
          this.m_labelRebuy = this.getChild("labelRebuy");
          this.m_Image_rebuyicon = this.getChild("Image_rebuyicon");
          this.m_labelValue_icon = this.getChild("labelValue_icon");
          this.m_Text_3_0_0_0_0 = this.getChild("Text_3_0_0_0_0");
          this.m_labelAddon = this.getChild("labelAddon");
          this.m_Image_addon_icon = this.getChild("Image_addon_icon");
          this.m_labelAddonValue = this.getChild("labelAddonValue");
          this.m_Text_start_chips = this.getChild("Text_start_chips");
          this.m_Text_start_chips_num = this.getChild("Text_start_chips_num");
          this.m_Text_avg_chips = this.getChild("Text_avg_chips");
          this.m_labelAvgStack = this.getChild("labelAvgStack");
          this.m_Text1 = this.getChild("Text1");
          this.m_labelEntryRange = this.getChild("labelEntryRange");
          this.m_btnBlindStruct = this.getChild("btnBlindStruct");
          this.m_labelBindType = this.getChild("labelBindType");
          this.m_btnBlindTimeTip = this.getChild("btnBlindTimeTip");
          this.m_test_up_blind = this.getChild("test_up_blind");
          this.m_labelBlindTime = this.getChild("labelBlindTime");
          this.m_btnBlindTip_spr = this.getChild("btnBlindTip_spr");
          this.m_labelProgressiveBounty = this.getChild("labelProgressiveBounty");
          this.m_labelPBValue = this.getChild("labelPBValue");
          this.m_pko_comb = this.getChild("pko_comb");
          this.m_labelEntryTitle = this.getChild("labelEntryTitle");
          this.m_labelEntry = this.getChild("labelEntry");
          this.m_nodeBreakText = this.getChild("nodeBreakText");
          this.m_labelBreak = this.getChild("labelBreak");
          this.m_nodeBreak = this.getChild("nodeBreak");
          this.m_labe_1 = this.getChild("labe_1");
          this.m_labe_2 = this.getChild("labe_2");
          this.m_labe_3 = this.getChild("labe_3");
          this.m_labe_4 = this.getChild("labe_4");
          this.m_labe_5 = this.getChild("labe_5");
          this.m_labe_6 = this.getChild("labe_6");
          this.m_labelgameStatus = this.getChild("labelgameStatus");
          this.m_split_line = this.getChild("split_line");
          this.m_labelStartTime = this.getChild("labelStartTime");
        };
        return UI_Lobby_Detail_info_panal;
      }(FGUIComponentBase));
      UI_Lobby_Detail_info_panal.URL = "ui://vjmmgvukmnw65l";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Enter_Item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b83f1RvKWtMFZHkINhDuEcu", "UI_Lobby_Enter_Item", undefined);
      var UI_Lobby_Enter_Item = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Enter_Item, _FGUIComponentBase);
        function UI_Lobby_Enter_Item() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_lable_name = void 0;
          _this.m_lable_id = void 0;
          _this.m_line = void 0;
          _this.m_headNode = void 0;
          return _this;
        }
        UI_Lobby_Enter_Item.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Enter_Item");
          obj.name = 'UI_Lobby_Enter_Item';
          return obj;
        };
        var _proto = UI_Lobby_Enter_Item.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_lable_name = this.getChild("lable_name");
          this.m_lable_id = this.getChild("lable_id");
          this.m_line = this.getChild("line");
          this.m_headNode = this.getChild("headNode");
        };
        return UI_Lobby_Enter_Item;
      }(FGUIComponentBase));
      UI_Lobby_Enter_Item.URL = "ui://vjmmgvukmnw65n";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Enter_Rank_Item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b45b6kf+WFPl5ibTjHZ3F9V", "UI_Lobby_Enter_Rank_Item", undefined);
      var UI_Lobby_Enter_Rank_Item = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Enter_Rank_Item, _FGUIComponentBase);
        function UI_Lobby_Enter_Rank_Item() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_labelRank = void 0;
          _this.m_labelName = void 0;
          _this.m_labelStack = void 0;
          _this.m_labelRA = void 0;
          _this.m_line = void 0;
          _this.m_headNode = void 0;
          return _this;
        }
        UI_Lobby_Enter_Rank_Item.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Enter_Rank_Item");
          obj.name = 'UI_Lobby_Enter_Rank_Item';
          return obj;
        };
        var _proto = UI_Lobby_Enter_Rank_Item.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_labelRank = this.getChild("labelRank");
          this.m_labelName = this.getChild("labelName");
          this.m_labelStack = this.getChild("labelStack");
          this.m_labelRA = this.getChild("labelRA");
          this.m_line = this.getChild("line");
          this.m_headNode = this.getChild("headNode");
        };
        return UI_Lobby_Enter_Rank_Item;
      }(FGUIComponentBase));
      UI_Lobby_Enter_Rank_Item.URL = "ui://vjmmgvukmnw65o";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Enter_Rank_Ko_Item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f62ac8F/iJPp7w+y+a9hrNV", "UI_Lobby_Enter_Rank_Ko_Item", undefined);
      var UI_Lobby_Enter_Rank_Ko_Item = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Enter_Rank_Ko_Item, _FGUIComponentBase);
        function UI_Lobby_Enter_Rank_Ko_Item() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_labelRank = void 0;
          _this.m_labelName = void 0;
          _this.m_labelStack = void 0;
          _this.m_labelRA = void 0;
          _this.m_labelKO = void 0;
          _this.m_line = void 0;
          return _this;
        }
        UI_Lobby_Enter_Rank_Ko_Item.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Enter_Rank_Ko_Item");
          obj.name = 'UI_Lobby_Enter_Rank_Ko_Item';
          return obj;
        };
        var _proto = UI_Lobby_Enter_Rank_Ko_Item.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_labelRank = this.getChild("labelRank");
          this.m_labelName = this.getChild("labelName");
          this.m_labelStack = this.getChild("labelStack");
          this.m_labelRA = this.getChild("labelRA");
          this.m_labelKO = this.getChild("labelKO");
          this.m_line = this.getChild("line");
        };
        return UI_Lobby_Enter_Rank_Ko_Item;
      }(FGUIComponentBase));
      UI_Lobby_Enter_Rank_Ko_Item.URL = "ui://vjmmgvukmnw65e";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Entry_Panal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b770eOM03FIDoVmu4EQ+P3G", "UI_Lobby_Entry_Panal", undefined);
      var UI_Lobby_Entry_Panal = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Entry_Panal, _FGUIComponentBase);
        function UI_Lobby_Entry_Panal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_view_bg = void 0;
          _this.m_tableViewRankKo = void 0;
          _this.m_layerRankTopKo = void 0;
          _this.m_lable_ko_1 = void 0;
          _this.m_lable_ko_2 = void 0;
          _this.m_lable_ko_3 = void 0;
          _this.m_lable_ko_4 = void 0;
          _this.m_lable_ko_5 = void 0;
          _this.m_enter_player_rank_ko_info = void 0;
          _this.m_tableViewRank = void 0;
          _this.m_layerRankTop = void 0;
          _this.m_labelTitle1 = void 0;
          _this.m_labelTitle2 = void 0;
          _this.m_labelTitle3 = void 0;
          _this.m_labelTitle4 = void 0;
          _this.m_rank_top_info = void 0;
          _this.m_enter_player_rank_info = void 0;
          _this.m_layerTop = void 0;
          _this.m_label_enter_1 = void 0;
          _this.m_label_enter_2 = void 0;
          _this.m_tableView = void 0;
          _this.m_enter_player_info = void 0;
          _this.m_bottomTip = void 0;
          return _this;
        }
        UI_Lobby_Entry_Panal.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Entry_Panal");
          obj.name = 'UI_Lobby_Entry_Panal';
          return obj;
        };
        var _proto = UI_Lobby_Entry_Panal.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_view_bg = this.getChild("view_bg");
          this.m_tableViewRankKo = this.getChild("tableViewRankKo");
          this.m_layerRankTopKo = this.getChild("layerRankTopKo");
          this.m_lable_ko_1 = this.getChild("lable_ko_1");
          this.m_lable_ko_2 = this.getChild("lable_ko_2");
          this.m_lable_ko_3 = this.getChild("lable_ko_3");
          this.m_lable_ko_4 = this.getChild("lable_ko_4");
          this.m_lable_ko_5 = this.getChild("lable_ko_5");
          this.m_enter_player_rank_ko_info = this.getChild("enter_player_rank_ko_info");
          this.m_tableViewRank = this.getChild("tableViewRank");
          this.m_layerRankTop = this.getChild("layerRankTop");
          this.m_labelTitle1 = this.getChild("labelTitle1");
          this.m_labelTitle2 = this.getChild("labelTitle2");
          this.m_labelTitle3 = this.getChild("labelTitle3");
          this.m_labelTitle4 = this.getChild("labelTitle4");
          this.m_rank_top_info = this.getChild("rank_top_info");
          this.m_enter_player_rank_info = this.getChild("enter_player_rank_info");
          this.m_layerTop = this.getChild("layerTop");
          this.m_label_enter_1 = this.getChild("label_enter_1");
          this.m_label_enter_2 = this.getChild("label_enter_2");
          this.m_tableView = this.getChild("tableView");
          this.m_enter_player_info = this.getChild("enter_player_info");
          this.m_bottomTip = this.getChild("bottomTip");
        };
        return UI_Lobby_Entry_Panal;
      }(FGUIComponentBase));
      UI_Lobby_Entry_Panal.URL = "ui://vjmmgvukmnw65f";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Invite_Friend_Item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c5a46w5nWZHtYP3KCcy7XCD", "UI_Lobby_Invite_Friend_Item", undefined);
      var UI_Lobby_Invite_Friend_Item = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Invite_Friend_Item, _FGUIComponentBase);
        function UI_Lobby_Invite_Friend_Item() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_label_name = void 0;
          _this.m_label_time = void 0;
          _this.m_label_invate_info = void 0;
          _this.m_money_icon = void 0;
          _this.m_label_invate_award_money = void 0;
          _this.m_com_bg = void 0;
          return _this;
        }
        UI_Lobby_Invite_Friend_Item.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Invite_Friend_Item");
          obj.name = 'UI_Lobby_Invite_Friend_Item';
          return obj;
        };
        var _proto = UI_Lobby_Invite_Friend_Item.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_label_name = this.getChild("label_name");
          this.m_label_time = this.getChild("label_time");
          this.m_label_invate_info = this.getChild("label_invate_info");
          this.m_money_icon = this.getChild("money_icon");
          this.m_label_invate_award_money = this.getChild("label_invate_award_money");
          this.m_com_bg = this.getChild("com_bg");
        };
        return UI_Lobby_Invite_Friend_Item;
      }(FGUIComponentBase));
      UI_Lobby_Invite_Friend_Item.URL = "ui://vjmmgvukqs1wdi";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Invite_Friend_layer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c47204/OIBFg5/1yZ2Hlowq", "UI_Lobby_Invite_Friend_layer", undefined);
      var UI_Lobby_Invite_Friend_layer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Invite_Friend_layer, _FGUIComponentBase);
        function UI_Lobby_Invite_Friend_layer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_content = void 0;
          _this.m_btn_invite_friend = void 0;
          _this.m_btn_copy = void 0;
          return _this;
        }
        UI_Lobby_Invite_Friend_layer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Invite_Friend_layer");
          obj.name = 'UI_Lobby_Invite_Friend_layer';
          return obj;
        };
        var _proto = UI_Lobby_Invite_Friend_layer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_content = this.getChild("content");
          this.m_btn_invite_friend = this.getChild("btn_invite_friend");
          this.m_btn_copy = this.getChild("btn_copy");
        };
        return UI_Lobby_Invite_Friend_layer;
      }(FGUIComponentBase));
      UI_Lobby_Invite_Friend_layer.URL = "ui://vjmmgvukqs1wd6";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Prize_Item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8148aU2ZFtNZon66T2PRI4O", "UI_Lobby_Prize_Item", undefined);
      var UI_Lobby_Prize_Item = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Prize_Item, _FGUIComponentBase);
        function UI_Lobby_Prize_Item() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_line = void 0;
          _this.m_labelRank = void 0;
          _this.m_NetImage1 = void 0;
          _this.m_hallLabelReward1 = void 0;
          _this.m_prop_1 = void 0;
          _this.m_NetImage2 = void 0;
          _this.m_hallLabelReward2 = void 0;
          _this.m_prop_2 = void 0;
          _this.m_all_prop = void 0;
          _this.m_labelTip = void 0;
          return _this;
        }
        UI_Lobby_Prize_Item.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Prize_Item");
          obj.name = 'UI_Lobby_Prize_Item';
          return obj;
        };
        var _proto = UI_Lobby_Prize_Item.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_line = this.getChild("line");
          this.m_labelRank = this.getChild("labelRank");
          this.m_NetImage1 = this.getChild("NetImage1");
          this.m_hallLabelReward1 = this.getChild("hallLabelReward1");
          this.m_prop_1 = this.getChild("prop_1");
          this.m_NetImage2 = this.getChild("NetImage2");
          this.m_hallLabelReward2 = this.getChild("hallLabelReward2");
          this.m_prop_2 = this.getChild("prop_2");
          this.m_all_prop = this.getChild("all_prop");
          this.m_labelTip = this.getChild("labelTip");
        };
        return UI_Lobby_Prize_Item;
      }(FGUIComponentBase));
      UI_Lobby_Prize_Item.URL = "ui://vjmmgvukmnw65g";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Prize_Panal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3902cntg5JCBK/zPhQho0GI", "UI_Lobby_Prize_Panal", undefined);
      var UI_Lobby_Prize_Panal = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Prize_Panal, _FGUIComponentBase);
        function UI_Lobby_Prize_Panal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_layerTop = void 0;
          _this.m_labelTitle = void 0;
          _this.m_labelTitle2 = void 0;
          _this.m_btn_prize_info = void 0;
          _this.m_prize_tableview = void 0;
          return _this;
        }
        UI_Lobby_Prize_Panal.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Prize_Panal");
          obj.name = 'UI_Lobby_Prize_Panal';
          return obj;
        };
        var _proto = UI_Lobby_Prize_Panal.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_layerTop = this.getChild("layerTop");
          this.m_labelTitle = this.getChild("labelTitle");
          this.m_labelTitle2 = this.getChild("labelTitle2");
          this.m_btn_prize_info = this.getChild("btn_prize_info");
          this.m_prize_tableview = this.getChild("prize_tableview");
        };
        return UI_Lobby_Prize_Panal;
      }(FGUIComponentBase));
      UI_Lobby_Prize_Panal.URL = "ui://vjmmgvukmnw65h";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Table_Item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f09242NEbdNUbfAolaF98c/", "UI_Lobby_Table_Item", undefined);
      var UI_Lobby_Table_Item = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Table_Item, _FGUIComponentBase);
        function UI_Lobby_Table_Item() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_table_bg = void 0;
          _this.m_labelIndex = void 0;
          _this.m_labelPlayerNum = void 0;
          _this.m_chipIcon = void 0;
          _this.m_labelChip = void 0;
          _this.m_line = void 0;
          _this.m_btnEnterRoom = void 0;
          return _this;
        }
        UI_Lobby_Table_Item.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Table_Item");
          obj.name = 'UI_Lobby_Table_Item';
          return obj;
        };
        var _proto = UI_Lobby_Table_Item.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_table_bg = this.getChild("table_bg");
          this.m_labelIndex = this.getChild("labelIndex");
          this.m_labelPlayerNum = this.getChild("labelPlayerNum");
          this.m_chipIcon = this.getChild("chipIcon");
          this.m_labelChip = this.getChild("labelChip");
          this.m_line = this.getChild("line");
          this.m_btnEnterRoom = this.getChild("btnEnterRoom");
        };
        return UI_Lobby_Table_Item;
      }(FGUIComponentBase));
      UI_Lobby_Table_Item.URL = "ui://vjmmgvukmnw65i";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_Lobby_Table_Panal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6e7bdo91WxIIb5JcA4zdWnF", "UI_Lobby_Table_Panal", undefined);
      var UI_Lobby_Table_Panal = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_Lobby_Table_Panal, _FGUIComponentBase);
        function UI_Lobby_Table_Panal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_layerTop = void 0;
          _this.m_labelTitle = void 0;
          _this.m_labelNum = void 0;
          _this.m_table_tableview = void 0;
          return _this;
        }
        UI_Lobby_Table_Panal.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "Lobby_Table_Panal");
          obj.name = 'UI_Lobby_Table_Panal';
          return obj;
        };
        var _proto = UI_Lobby_Table_Panal.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_layerTop = this.getChild("layerTop");
          this.m_labelTitle = this.getChild("labelTitle");
          this.m_labelNum = this.getChild("labelNum");
          this.m_table_tableview = this.getChild("table_tableview");
        };
        return UI_Lobby_Table_Panal;
      }(FGUIComponentBase));
      UI_Lobby_Table_Panal.URL = "ui://vjmmgvukmnw65j";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyDayLogin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "63b74PHzmpK+LkCJgXk7m3q", "UI_LobbyDayLogin", undefined);
      var UI_LobbyDayLogin = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyDayLogin, _FGUIComponentBase);
        function UI_LobbyDayLogin() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_day_login_1 = void 0;
          _this.m_day_login_2 = void 0;
          _this.m_day_login_3 = void 0;
          _this.m_day_login_4 = void 0;
          _this.m_day_login_5 = void 0;
          _this.m_day_login_6 = void 0;
          _this.m_day_login_7 = void 0;
          return _this;
        }
        UI_LobbyDayLogin.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyDayLogin");
          obj.name = 'UI_LobbyDayLogin';
          return obj;
        };
        var _proto = UI_LobbyDayLogin.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_day_login_1 = this.getChild("day_login_1");
          this.m_day_login_2 = this.getChild("day_login_2");
          this.m_day_login_3 = this.getChild("day_login_3");
          this.m_day_login_4 = this.getChild("day_login_4");
          this.m_day_login_5 = this.getChild("day_login_5");
          this.m_day_login_6 = this.getChild("day_login_6");
          this.m_day_login_7 = this.getChild("day_login_7");
        };
        return UI_LobbyDayLogin;
      }(FGUIComponentBase));
      UI_LobbyDayLogin.URL = "ui://vjmmgvuke8fmeg";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyHeadGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6fdc449KQdNKqmjG5YLZB2a", "UI_LobbyHeadGroup", undefined);
      var UI_LobbyHeadGroup = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyHeadGroup, _FGUIComponentBase);
        function UI_LobbyHeadGroup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_NoticeRedControl = void 0;
          _this.m_TgpControl = void 0;
          _this.m_headNode = void 0;
          _this.m_pid = void 0;
          _this.m_WalletValue = void 0;
          _this.m_name = void 0;
          _this.m_BtnProfile = void 0;
          _this.m_walletAdd = void 0;
          _this.m_BtnAdd = void 0;
          _this.m_headGroup = void 0;
          _this.m_btnMsgBox = void 0;
          _this.m_TopRightNode = void 0;
          _this.m_tgpiconbg = void 0;
          _this.m_tgpicon = void 0;
          _this.m_TgpValue = void 0;
          _this.m_TgpCoin = void 0;
          return _this;
        }
        UI_LobbyHeadGroup.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyHeadGroup");
          obj.name = 'UI_LobbyHeadGroup';
          return obj;
        };
        var _proto = UI_LobbyHeadGroup.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_NoticeRedControl = this.getController("NoticeRedControl");
          this.m_TgpControl = this.getController("TgpControl");
          this.m_headNode = this.getChild("headNode");
          this.m_pid = this.getChild("pid");
          this.m_WalletValue = this.getChild("WalletValue");
          this.m_name = this.getChild("name");
          this.m_BtnProfile = this.getChild("BtnProfile");
          this.m_walletAdd = this.getChild("walletAdd");
          this.m_BtnAdd = this.getChild("BtnAdd");
          this.m_headGroup = this.getChild("headGroup");
          this.m_btnMsgBox = this.getChild("btnMsgBox");
          this.m_TopRightNode = this.getChild("TopRightNode");
          this.m_tgpiconbg = this.getChild("tgpiconbg");
          this.m_tgpicon = this.getChild("tgpicon");
          this.m_TgpValue = this.getChild("TgpValue");
          this.m_TgpCoin = this.getChild("TgpCoin");
        };
        return UI_LobbyHeadGroup;
      }(FGUIComponentBase));
      UI_LobbyHeadGroup.URL = "ui://vjmmgvukslhk2h";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyHomeGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a0516k+4e9FeLqvW3C3JsIn", "UI_LobbyHomeGame", undefined);
      var UI_LobbyHomeGame = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyHomeGame, _FGUIComponentBase);
        function UI_LobbyHomeGame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_BtnMore = void 0;
          _this.m_HotGameList = void 0;
          return _this;
        }
        UI_LobbyHomeGame.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyHomeGame");
          obj.name = 'UI_LobbyHomeGame';
          return obj;
        };
        var _proto = UI_LobbyHomeGame.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_BtnMore = this.getChild("BtnMore");
          this.m_HotGameList = this.getChild("HotGameList");
        };
        return UI_LobbyHomeGame;
      }(FGUIComponentBase));
      UI_LobbyHomeGame.URL = "ui://vjmmgvukuwmwdl";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyHomeTask.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2b5f9wrNz5BKqEWmgKOC/i3", "UI_LobbyHomeTask", undefined);
      var UI_LobbyHomeTask = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyHomeTask, _FGUIComponentBase);
        function UI_LobbyHomeTask() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_task_info_text1 = void 0;
          _this.m_task_day = void 0;
          _this.m_TaskList = void 0;
          _this.m_task_info_text2 = void 0;
          _this.m_task_challeng = void 0;
          _this.m_TaskListChallenge = void 0;
          return _this;
        }
        UI_LobbyHomeTask.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyHomeTask");
          obj.name = 'UI_LobbyHomeTask';
          return obj;
        };
        var _proto = UI_LobbyHomeTask.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_task_info_text1 = this.getChild("task_info_text1");
          this.m_task_day = this.getChild("task_day");
          this.m_TaskList = this.getChild("TaskList");
          this.m_task_info_text2 = this.getChild("task_info_text2");
          this.m_task_challeng = this.getChild("task_challeng");
          this.m_TaskListChallenge = this.getChild("TaskListChallenge");
        };
        return UI_LobbyHomeTask;
      }(FGUIComponentBase));
      UI_LobbyHomeTask.URL = "ui://vjmmgvukuwmwdo";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyHomeTaskItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "96a90xjxJBLvoHuHLfulwbp", "UI_LobbyHomeTaskItem", undefined);
      var UI_LobbyHomeTaskItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyHomeTaskItem, _FGUIComponentBase);
        function UI_LobbyHomeTaskItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_icon = void 0;
          _this.m_task_status = void 0;
          _this.m_title = void 0;
          _this.m_titlemsg = void 0;
          _this.m_award_icon = void 0;
          _this.m_award_label = void 0;
          _this.m_award_1 = void 0;
          _this.m_award_icon_2 = void 0;
          _this.m_award_label_2 = void 0;
          _this.m_award_2 = void 0;
          _this.m_awardInfo = void 0;
          return _this;
        }
        UI_LobbyHomeTaskItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyHomeTaskItem");
          obj.name = 'UI_LobbyHomeTaskItem';
          return obj;
        };
        var _proto = UI_LobbyHomeTaskItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_icon = this.getChild("icon");
          this.m_task_status = this.getChild("task_status");
          this.m_title = this.getChild("title");
          this.m_titlemsg = this.getChild("titlemsg");
          this.m_award_icon = this.getChild("award_icon");
          this.m_award_label = this.getChild("award_label");
          this.m_award_1 = this.getChild("award_1");
          this.m_award_icon_2 = this.getChild("award_icon_2");
          this.m_award_label_2 = this.getChild("award_label_2");
          this.m_award_2 = this.getChild("award_2");
          this.m_awardInfo = this.getChild("awardInfo");
        };
        return UI_LobbyHomeTaskItem;
      }(FGUIComponentBase));
      UI_LobbyHomeTaskItem.URL = "ui://vjmmgvukcf5ldq";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyItemGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4c62frfEPdHULSYNW95QspT", "UI_LobbyItemGame", undefined);
      var UI_LobbyItemGame = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyItemGame, _FGUIComponentBase);
        function UI_LobbyItemGame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_GameControl = void 0;
          _this.m_bg = void 0;
          _this.m_HeadGroup = void 0;
          _this.m_BannerList = void 0;
          _this.m_Roombg = void 0;
          _this.m_GameButtonList = void 0;
          _this.m_split = void 0;
          _this.m_RoomList = void 0;
          _this.m_RoomTouch = void 0;
          _this.m_RoomRoot = void 0;
          return _this;
        }
        UI_LobbyItemGame.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyItemGame");
          obj.name = 'UI_LobbyItemGame';
          return obj;
        };
        var _proto = UI_LobbyItemGame.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_GameControl = this.getController("GameControl");
          this.m_bg = this.getChild("bg");
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_BannerList = this.getChild("BannerList");
          this.m_Roombg = this.getChild("Roombg");
          this.m_GameButtonList = this.getChild("GameButtonList");
          this.m_split = this.getChild("split");
          this.m_RoomList = this.getChild("RoomList");
          this.m_RoomTouch = this.getChild("RoomTouch");
          this.m_RoomRoot = this.getChild("RoomRoot");
        };
        return UI_LobbyItemGame;
      }(FGUIComponentBase));
      UI_LobbyItemGame.URL = "ui://vjmmgvuksgfy1h";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyItemHome.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b95beJBvFVF7IOTpc8xcqsv", "UI_LobbyItemHome", undefined);
      var UI_LobbyItemHome = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyItemHome, _FGUIComponentBase);
        function UI_LobbyItemHome() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_HeadGroup = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_LobbyItemHome.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyItemHome");
          obj.name = 'UI_LobbyItemHome';
          return obj;
        };
        var _proto = UI_LobbyItemHome.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_list = this.getChild("list");
        };
        return UI_LobbyItemHome;
      }(FGUIComponentBase));
      UI_LobbyItemHome.URL = "ui://vjmmgvukt3g3bo";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyItemMarket.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a2cd6Ey/eNBnKH4jAPOb44X", "UI_LobbyItemMarket", undefined);
      var UI_LobbyItemMarket = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyItemMarket, _FGUIComponentBase);
        function UI_LobbyItemMarket() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_pageControl = void 0;
          _this.m_HeadGroup = void 0;
          _this.m_BtnBuy = void 0;
          _this.m_BtnSell = void 0;
          _this.m_BtnMyOrder = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_LobbyItemMarket.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyItemMarket");
          obj.name = 'UI_LobbyItemMarket';
          return obj;
        };
        var _proto = UI_LobbyItemMarket.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_pageControl = this.getController("pageControl");
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_BtnBuy = this.getChild("BtnBuy");
          this.m_BtnSell = this.getChild("BtnSell");
          this.m_BtnMyOrder = this.getChild("BtnMyOrder");
          this.m_list = this.getChild("list");
        };
        return UI_LobbyItemMarket;
      }(FGUIComponentBase));
      UI_LobbyItemMarket.URL = "ui://vjmmgvukpflmet";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyItemProfile.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4e410kIrJtFrbfU5FdYK1VA", "UI_LobbyItemProfile", undefined);
      var UI_LobbyItemProfile = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyItemProfile, _FGUIComponentBase);
        function UI_LobbyItemProfile() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_TextWallet = void 0;
          _this.m_BtnDeposit = void 0;
          _this.m_BtnWithDraw = void 0;
          _this.m_BtnHistory = void 0;
          _this.m_SettingItems = void 0;
          _this.m_debugArea = void 0;
          return _this;
        }
        UI_LobbyItemProfile.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyItemProfile");
          obj.name = 'UI_LobbyItemProfile';
          return obj;
        };
        var _proto = UI_LobbyItemProfile.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_TextWallet = this.getChild("TextWallet");
          this.m_BtnDeposit = this.getChild("BtnDeposit");
          this.m_BtnWithDraw = this.getChild("BtnWithDraw");
          this.m_BtnHistory = this.getChild("BtnHistory");
          this.m_SettingItems = this.getChild("SettingItems");
          this.m_debugArea = this.getChild("debugArea");
        };
        return UI_LobbyItemProfile;
      }(FGUIComponentBase));
      UI_LobbyItemProfile.URL = "ui://vjmmgvuksgfy1j";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyMarketBuy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f1973m9HBhEh5f+eon5fP3F", "UI_LobbyMarketBuy", undefined);
      var UI_LobbyMarketBuy = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyMarketBuy, _FGUIComponentBase);
        function UI_LobbyMarketBuy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_SortControl = void 0;
          _this.m_BtnQuantity = void 0;
          _this.m_BtnPriceTxt = void 0;
          _this.m_BtnPrice = void 0;
          _this.m_BtnTotalTxt = void 0;
          _this.m_BtnTotal = void 0;
          _this.m_NoneGroup = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_LobbyMarketBuy.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyMarketBuy");
          obj.name = 'UI_LobbyMarketBuy';
          return obj;
        };
        var _proto = UI_LobbyMarketBuy.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_SortControl = this.getController("SortControl");
          this.m_BtnQuantity = this.getChild("BtnQuantity");
          this.m_BtnPriceTxt = this.getChild("BtnPriceTxt");
          this.m_BtnPrice = this.getChild("BtnPrice");
          this.m_BtnTotalTxt = this.getChild("BtnTotalTxt");
          this.m_BtnTotal = this.getChild("BtnTotal");
          this.m_NoneGroup = this.getChild("NoneGroup");
          this.m_list = this.getChild("list");
        };
        return UI_LobbyMarketBuy;
      }(FGUIComponentBase));
      UI_LobbyMarketBuy.URL = "ui://vjmmgvukpflmf5";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyMarketMyOrder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "73fa9ORLu5Cir/n4REgZw+w", "UI_LobbyMarketMyOrder", undefined);
      var UI_LobbyMarketMyOrder = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyMarketMyOrder, _FGUIComponentBase);
        function UI_LobbyMarketMyOrder() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_SortControl = void 0;
          _this.m_BtnQuantity = void 0;
          _this.m_BtnPriceTxt = void 0;
          _this.m_BtnPrice = void 0;
          _this.m_BtnTotalTxt = void 0;
          _this.m_BtnTotal = void 0;
          _this.m_list = void 0;
          _this.m_NoneGroup = void 0;
          _this.m_BtnCreateOrder = void 0;
          return _this;
        }
        UI_LobbyMarketMyOrder.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyMarketMyOrder");
          obj.name = 'UI_LobbyMarketMyOrder';
          return obj;
        };
        var _proto = UI_LobbyMarketMyOrder.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_SortControl = this.getController("SortControl");
          this.m_BtnQuantity = this.getChild("BtnQuantity");
          this.m_BtnPriceTxt = this.getChild("BtnPriceTxt");
          this.m_BtnPrice = this.getChild("BtnPrice");
          this.m_BtnTotalTxt = this.getChild("BtnTotalTxt");
          this.m_BtnTotal = this.getChild("BtnTotal");
          this.m_list = this.getChild("list");
          this.m_NoneGroup = this.getChild("NoneGroup");
          this.m_BtnCreateOrder = this.getChild("BtnCreateOrder");
        };
        return UI_LobbyMarketMyOrder;
      }(FGUIComponentBase));
      UI_LobbyMarketMyOrder.URL = "ui://vjmmgvukpflmf6";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyMarketSell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "46b18WfzJhHl7mw05Z68cAo", "UI_LobbyMarketSell", undefined);
      var UI_LobbyMarketSell = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyMarketSell, _FGUIComponentBase);
        function UI_LobbyMarketSell() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_SortControl = void 0;
          _this.m_BtnQuantity = void 0;
          _this.m_BtnPriceTxt = void 0;
          _this.m_BtnPrice = void 0;
          _this.m_BtnTotalTxt = void 0;
          _this.m_BtnTotal = void 0;
          _this.m_NoneGroup = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_LobbyMarketSell.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyMarketSell");
          obj.name = 'UI_LobbyMarketSell';
          return obj;
        };
        var _proto = UI_LobbyMarketSell.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_SortControl = this.getController("SortControl");
          this.m_BtnQuantity = this.getChild("BtnQuantity");
          this.m_BtnPriceTxt = this.getChild("BtnPriceTxt");
          this.m_BtnPrice = this.getChild("BtnPrice");
          this.m_BtnTotalTxt = this.getChild("BtnTotalTxt");
          this.m_BtnTotal = this.getChild("BtnTotal");
          this.m_NoneGroup = this.getChild("NoneGroup");
          this.m_list = this.getChild("list");
        };
        return UI_LobbyMarketSell;
      }(FGUIComponentBase));
      UI_LobbyMarketSell.URL = "ui://vjmmgvukpflmf4";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_LobbyPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ccf9fILeh5BaKthVpxsS3+A", "UI_LobbyPage", undefined);
      var UI_LobbyPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_LobbyPage, _FGUIComponentBase);
        function UI_LobbyPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_LobbyPageControl = void 0;
          _this.m_LobbyItem0 = void 0;
          _this.m_LobbyItem1 = void 0;
          _this.m_LobbyItem2 = void 0;
          _this.m_LobbyItem3 = void 0;
          _this.m_BtnHome = void 0;
          _this.m_BtnGame = void 0;
          _this.m_BtnInvitePage = void 0;
          _this.m_BtnMarket = void 0;
          return _this;
        }
        UI_LobbyPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "LobbyPage");
          obj.name = 'UI_LobbyPage';
          return obj;
        };
        var _proto = UI_LobbyPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_LobbyPageControl = this.getController("LobbyPageControl");
          this.m_LobbyItem0 = this.getChild("LobbyItem0");
          this.m_LobbyItem1 = this.getChild("LobbyItem1");
          this.m_LobbyItem2 = this.getChild("LobbyItem2");
          this.m_LobbyItem3 = this.getChild("LobbyItem3");
          this.m_BtnHome = this.getChild("BtnHome");
          this.m_BtnGame = this.getChild("BtnGame");
          this.m_BtnInvitePage = this.getChild("BtnInvitePage");
          this.m_BtnMarket = this.getChild("BtnMarket");
        };
        return UI_LobbyPage;
      }(FGUIComponentBase));
      UI_LobbyPage.URL = "ui://vjmmgvuksgfy0";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketButton1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f8649bz1fhExb6jN7tc4cqS", "UI_MarketButton1", undefined);
      var UI_MarketButton1 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_MarketButton1, _fgui$GButton);
        function UI_MarketButton1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_DirControl = void 0;
          _this.m_iconbg = void 0;
          return _this;
        }
        UI_MarketButton1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketButton1");
          obj.name = 'UI_MarketButton1';
          return obj;
        };
        var _proto = UI_MarketButton1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_DirControl = this.getController("DirControl");
          this.m_iconbg = this.getChild("iconbg");
        };
        return UI_MarketButton1;
      }(GButton));
      UI_MarketButton1.URL = "ui://vjmmgvukhwjofg";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketButton2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6f49bp/e/FFHoe59kfqiUy5", "UI_MarketButton2", undefined);
      var UI_MarketButton2 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_MarketButton2, _fgui$GButton);
        function UI_MarketButton2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_iconbg = void 0;
          return _this;
        }
        UI_MarketButton2.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketButton2");
          obj.name = 'UI_MarketButton2';
          return obj;
        };
        var _proto = UI_MarketButton2.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_iconbg = this.getChild("iconbg");
        };
        return UI_MarketButton2;
      }(GButton));
      UI_MarketButton2.URL = "ui://vjmmgvukahb7fn";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketButton3.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0425bUUtydHMKwPx2aXBvmM", "UI_MarketButton3", undefined);
      var UI_MarketButton3 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_MarketButton3, _fgui$GButton);
        function UI_MarketButton3() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_DirControl = void 0;
          _this.m_iconbg = void 0;
          return _this;
        }
        UI_MarketButton3.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketButton3");
          obj.name = 'UI_MarketButton3';
          return obj;
        };
        var _proto = UI_MarketButton3.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_DirControl = this.getController("DirControl");
          this.m_iconbg = this.getChild("iconbg");
        };
        return UI_MarketButton3;
      }(GButton));
      UI_MarketButton3.URL = "ui://vjmmgvukd7wchj";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketBuyDetailDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8c418K3gQFOG6GX6VB96ai+", "UI_MarketBuyDetailDialog", undefined);
      var UI_MarketBuyDetailDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_MarketBuyDetailDialog, _FGUIComponentBase);
        function UI_MarketBuyDetailDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_TypeValue = void 0;
          _this.m_TGPQuantity = void 0;
          _this.m_PriceText = void 0;
          _this.m_TotalText = void 0;
          _this.m_StatusTitle = void 0;
          _this.m_StatusText = void 0;
          return _this;
        }
        UI_MarketBuyDetailDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketBuyDetailDialog");
          obj.name = 'UI_MarketBuyDetailDialog';
          return obj;
        };
        var _proto = UI_MarketBuyDetailDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_TypeValue = this.getChild("TypeValue");
          this.m_TGPQuantity = this.getChild("TGPQuantity");
          this.m_PriceText = this.getChild("PriceText");
          this.m_TotalText = this.getChild("TotalText");
          this.m_StatusTitle = this.getChild("StatusTitle");
          this.m_StatusText = this.getChild("StatusText");
        };
        return UI_MarketBuyDetailDialog;
      }(FGUIComponentBase));
      UI_MarketBuyDetailDialog.URL = "ui://vjmmgvukbhlofj";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketBuyDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "64d11V0UkZE+rYi9SQz1VFl", "UI_MarketBuyDialog", undefined);
      var UI_MarketBuyDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_MarketBuyDialog, _FGUIComponentBase);
        function UI_MarketBuyDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_TotalPriceText = void 0;
          _this.m_QuantityText = void 0;
          _this.m_PriceText = void 0;
          return _this;
        }
        UI_MarketBuyDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketBuyDialog");
          obj.name = 'UI_MarketBuyDialog';
          return obj;
        };
        var _proto = UI_MarketBuyDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_TotalPriceText = this.getChild("TotalPriceText");
          this.m_QuantityText = this.getChild("QuantityText");
          this.m_PriceText = this.getChild("PriceText");
        };
        return UI_MarketBuyDialog;
      }(FGUIComponentBase));
      UI_MarketBuyDialog.URL = "ui://vjmmgvukcskvfc";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketBuyItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1375dYBA8JOxKuo4z99KdhU", "UI_MarketBuyItem", undefined);
      var UI_MarketBuyItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_MarketBuyItem, _FGUIComponentBase);
        function UI_MarketBuyItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_border = void 0;
          _this.m_TgpIcon = void 0;
          _this.m_TgpValue = void 0;
          _this.m_PriceValue = void 0;
          _this.m_TotalValue = void 0;
          return _this;
        }
        UI_MarketBuyItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketBuyItem");
          obj.name = 'UI_MarketBuyItem';
          return obj;
        };
        var _proto = UI_MarketBuyItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_border = this.getChild("border");
          this.m_TgpIcon = this.getChild("TgpIcon");
          this.m_TgpValue = this.getChild("TgpValue");
          this.m_PriceValue = this.getChild("PriceValue");
          this.m_TotalValue = this.getChild("TotalValue");
        };
        return UI_MarketBuyItem;
      }(FGUIComponentBase));
      UI_MarketBuyItem.URL = "ui://vjmmgvukpflmf0";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketCreateOrderDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b88247iqhhCw6UbEB6xMeMW", "UI_MarketCreateOrderDialog", undefined);
      var UI_MarketCreateOrderDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_MarketCreateOrderDialog, _FGUIComponentBase);
        function UI_MarketCreateOrderDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_OrderControl = void 0;
          _this.m_frame = void 0;
          _this.m_BtnBuy = void 0;
          _this.m_BtnSell = void 0;
          _this.m_BuyInputPrice = void 0;
          _this.m_BuyInputQuantity = void 0;
          _this.m_BuyTotal = void 0;
          _this.m_BuyAvaliableText = void 0;
          _this.m_BuyErrTips = void 0;
          _this.m_BuyNode = void 0;
          _this.m_SellInputPrice = void 0;
          _this.m_SellInputQuantity = void 0;
          _this.m_SellTotalText = void 0;
          _this.m_SellAvaliableText = void 0;
          _this.m_SellAvaliableErrTips = void 0;
          _this.m_FeeText = void 0;
          _this.m_FeeErrTps = void 0;
          _this.m_SellNode = void 0;
          _this.m_BtnConfirm = void 0;
          return _this;
        }
        UI_MarketCreateOrderDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketCreateOrderDialog");
          obj.name = 'UI_MarketCreateOrderDialog';
          return obj;
        };
        var _proto = UI_MarketCreateOrderDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_OrderControl = this.getController("OrderControl");
          this.m_frame = this.getChild("frame");
          this.m_BtnBuy = this.getChild("BtnBuy");
          this.m_BtnSell = this.getChild("BtnSell");
          this.m_BuyInputPrice = this.getChild("BuyInputPrice");
          this.m_BuyInputQuantity = this.getChild("BuyInputQuantity");
          this.m_BuyTotal = this.getChild("BuyTotal");
          this.m_BuyAvaliableText = this.getChild("BuyAvaliableText");
          this.m_BuyErrTips = this.getChild("BuyErrTips");
          this.m_BuyNode = this.getChild("BuyNode");
          this.m_SellInputPrice = this.getChild("SellInputPrice");
          this.m_SellInputQuantity = this.getChild("SellInputQuantity");
          this.m_SellTotalText = this.getChild("SellTotalText");
          this.m_SellAvaliableText = this.getChild("SellAvaliableText");
          this.m_SellAvaliableErrTips = this.getChild("SellAvaliableErrTips");
          this.m_FeeText = this.getChild("FeeText");
          this.m_FeeErrTps = this.getChild("FeeErrTps");
          this.m_SellNode = this.getChild("SellNode");
          this.m_BtnConfirm = this.getChild("BtnConfirm");
        };
        return UI_MarketCreateOrderDialog;
      }(FGUIComponentBase));
      UI_MarketCreateOrderDialog.URL = "ui://vjmmgvukcskvfe";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketOrderItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d6c60YRLq1KhZKW63cbNf4o", "UI_MarketOrderItem", undefined);
      var UI_MarketOrderItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_MarketOrderItem, _FGUIComponentBase);
        function UI_MarketOrderItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_TgpIcon = void 0;
          _this.m_TgpValue = void 0;
          _this.m_PriceValue = void 0;
          _this.m_TotalValue = void 0;
          _this.m_OperateText = void 0;
          _this.m_OrderPlaced = void 0;
          return _this;
        }
        UI_MarketOrderItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketOrderItem");
          obj.name = 'UI_MarketOrderItem';
          return obj;
        };
        var _proto = UI_MarketOrderItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_TgpIcon = this.getChild("TgpIcon");
          this.m_TgpValue = this.getChild("TgpValue");
          this.m_PriceValue = this.getChild("PriceValue");
          this.m_TotalValue = this.getChild("TotalValue");
          this.m_OperateText = this.getChild("OperateText");
          this.m_OrderPlaced = this.getChild("OrderPlaced");
        };
        return UI_MarketOrderItem;
      }(FGUIComponentBase));
      UI_MarketOrderItem.URL = "ui://vjmmgvukpflmf7";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketSellDetailDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "91bd3XEI3JDn4jaTUjw+Y1B", "UI_MarketSellDetailDialog", undefined);
      var UI_MarketSellDetailDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_MarketSellDetailDialog, _FGUIComponentBase);
        function UI_MarketSellDetailDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_TypeVaule = void 0;
          _this.m_TGPQuantity = void 0;
          _this.m_PriceText = void 0;
          _this.m_TotalText = void 0;
          _this.m_FeeText = void 0;
          _this.m_FeeTitle = void 0;
          _this.m_AmountText = void 0;
          _this.m_StatusText = void 0;
          _this.m_Statustitle = void 0;
          return _this;
        }
        UI_MarketSellDetailDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketSellDetailDialog");
          obj.name = 'UI_MarketSellDetailDialog';
          return obj;
        };
        var _proto = UI_MarketSellDetailDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_TypeVaule = this.getChild("TypeVaule");
          this.m_TGPQuantity = this.getChild("TGPQuantity");
          this.m_PriceText = this.getChild("PriceText");
          this.m_TotalText = this.getChild("TotalText");
          this.m_FeeText = this.getChild("FeeText");
          this.m_FeeTitle = this.getChild("FeeTitle");
          this.m_AmountText = this.getChild("AmountText");
          this.m_StatusText = this.getChild("StatusText");
          this.m_Statustitle = this.getChild("Statustitle");
        };
        return UI_MarketSellDetailDialog;
      }(FGUIComponentBase));
      UI_MarketSellDetailDialog.URL = "ui://vjmmgvukbhlofk";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketSellDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ce5a0kTgzBK3rm+fhmPkhMY", "UI_MarketSellDialog", undefined);
      var UI_MarketSellDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_MarketSellDialog, _FGUIComponentBase);
        function UI_MarketSellDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_AmountText = void 0;
          _this.m_TotalTitle = void 0;
          _this.m_TotalVaule = void 0;
          _this.m_FeeTitle = void 0;
          _this.m_FeeValue = void 0;
          _this.m_QuantityText = void 0;
          _this.m_PriceText = void 0;
          return _this;
        }
        UI_MarketSellDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketSellDialog");
          obj.name = 'UI_MarketSellDialog';
          return obj;
        };
        var _proto = UI_MarketSellDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_AmountText = this.getChild("AmountText");
          this.m_TotalTitle = this.getChild("TotalTitle");
          this.m_TotalVaule = this.getChild("TotalVaule");
          this.m_FeeTitle = this.getChild("FeeTitle");
          this.m_FeeValue = this.getChild("FeeValue");
          this.m_QuantityText = this.getChild("QuantityText");
          this.m_PriceText = this.getChild("PriceText");
        };
        return UI_MarketSellDialog;
      }(FGUIComponentBase));
      UI_MarketSellDialog.URL = "ui://vjmmgvukpflmf9";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MarketSellItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f9462FbRJpAjbmuQCd6a6By", "UI_MarketSellItem", undefined);
      var UI_MarketSellItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_MarketSellItem, _FGUIComponentBase);
        function UI_MarketSellItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_border = void 0;
          _this.m_TgpIcon = void 0;
          _this.m_TgpValue = void 0;
          _this.m_PriceValue = void 0;
          _this.m_TotalValue = void 0;
          return _this;
        }
        UI_MarketSellItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "MarketSellItem");
          obj.name = 'UI_MarketSellItem';
          return obj;
        };
        var _proto = UI_MarketSellItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_border = this.getChild("border");
          this.m_TgpIcon = this.getChild("TgpIcon");
          this.m_TgpValue = this.getChild("TgpValue");
          this.m_PriceValue = this.getChild("PriceValue");
          this.m_TotalValue = this.getChild("TotalValue");
        };
        return UI_MarketSellItem;
      }(FGUIComponentBase));
      UI_MarketSellItem.URL = "ui://vjmmgvukpflmew";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_MttDialogValueItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f7fc3D+uIdL8pGX6tWC2Oma", "UI_MttDialogValueItem", undefined);
      var UI_MttDialogValueItem = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_MttDialogValueItem, _fgui$GLabel);
        function UI_MttDialogValueItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_iconType = void 0;
          _this.m_valueIcon = void 0;
          _this.m_value = void 0;
          return _this;
        }
        UI_MttDialogValueItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "MttDialogValueItem");
          obj.name = 'UI_MttDialogValueItem';
          return obj;
        };
        var _proto = UI_MttDialogValueItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_iconType = this.getController("iconType");
          this.m_valueIcon = this.getChild("valueIcon");
          this.m_value = this.getChild("value");
        };
        return UI_MttDialogValueItem;
      }(GLabel));
      UI_MttDialogValueItem.URL = "ui://0fujvg4ohc9256";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_NetImage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b7ac9dM9p5FZrYY3J3L+IFF", "UI_NetImage", undefined);
      var UI_NetImage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_NetImage, _FGUIComponentBase);
        function UI_NetImage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_content = void 0;
          return _this;
        }
        UI_NetImage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "NetImage");
          obj.name = 'UI_NetImage';
          return obj;
        };
        var _proto = UI_NetImage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_content = this.getChild("content");
        };
        return UI_NetImage;
      }(FGUIComponentBase));
      UI_NetImage.URL = "ui://xddh4ifdsti19j";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_NetworkSelectItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2c70bFV3rtGV72X5bsYrW6d", "UI_NetworkSelectItem", undefined);
      var UI_NetworkSelectItem = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_NetworkSelectItem, _fgui$GButton);
        function UI_NetworkSelectItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_selectFlag = void 0;
          _this.m_line = void 0;
          return _this;
        }
        UI_NetworkSelectItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "NetworkSelectItem");
          obj.name = 'UI_NetworkSelectItem';
          return obj;
        };
        var _proto = UI_NetworkSelectItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_selectFlag = this.getChild("selectFlag");
          this.m_line = this.getChild("line");
        };
        return UI_NetworkSelectItem;
      }(GButton));
      UI_NetworkSelectItem.URL = "ui://pfvxbnsikd15j";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_NoticeDetailPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "31d4akVDv1LdITj7p1wsoYw", "UI_NoticeDetailPage", undefined);
      var UI_NoticeDetailPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_NoticeDetailPage, _FGUIComponentBase);
        function UI_NoticeDetailPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_MsgTitle = void 0;
          _this.m_MsgData = void 0;
          _this.m_MsgTime = void 0;
          _this.m_MsgContent = void 0;
          return _this;
        }
        UI_NoticeDetailPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "NoticeDetailPage");
          obj.name = 'UI_NoticeDetailPage';
          return obj;
        };
        var _proto = UI_NoticeDetailPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_MsgTitle = this.getChild("MsgTitle");
          this.m_MsgData = this.getChild("MsgData");
          this.m_MsgTime = this.getChild("MsgTime");
          this.m_MsgContent = this.getChild("MsgContent");
        };
        return UI_NoticeDetailPage;
      }(FGUIComponentBase));
      UI_NoticeDetailPage.URL = "ui://vjmmgvukouoc4p";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_NoticeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "89971YS6+RFQKNR37z+2dml", "UI_NoticeItem", undefined);
      var UI_NoticeItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_NoticeItem, _FGUIComponentBase);
        function UI_NoticeItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_ReadControl = void 0;
          _this.m_TextData = void 0;
          _this.m_TextTime = void 0;
          _this.m_MsgDesc = void 0;
          return _this;
        }
        UI_NoticeItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "NoticeItem");
          obj.name = 'UI_NoticeItem';
          return obj;
        };
        var _proto = UI_NoticeItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_ReadControl = this.getController("ReadControl");
          this.m_TextData = this.getChild("TextData");
          this.m_TextTime = this.getChild("TextTime");
          this.m_MsgDesc = this.getChild("MsgDesc");
        };
        return UI_NoticeItem;
      }(FGUIComponentBase));
      UI_NoticeItem.URL = "ui://vjmmgvukslhk2g";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_NoticePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1962fAiy9JOTZ6mC/JaLeIf", "UI_NoticePage", undefined);
      var UI_NoticePage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_NoticePage, _FGUIComponentBase);
        function UI_NoticePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_grayDelControl = void 0;
          _this.m_frame = void 0;
          _this.m_MsgTip = void 0;
          _this.m_MsgNone = void 0;
          _this.m_BtnDelete = void 0;
          _this.m_MsgList = void 0;
          return _this;
        }
        UI_NoticePage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "NoticePage");
          obj.name = 'UI_NoticePage';
          return obj;
        };
        var _proto = UI_NoticePage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_grayDelControl = this.getController("grayDelControl");
          this.m_frame = this.getChild("frame");
          this.m_MsgTip = this.getChild("MsgTip");
          this.m_MsgNone = this.getChild("MsgNone");
          this.m_BtnDelete = this.getChild("BtnDelete");
          this.m_MsgList = this.getChild("MsgList");
        };
        return UI_NoticePage;
      }(FGUIComponentBase));
      UI_NoticePage.URL = "ui://vjmmgvukslhk2f";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_PageFrame1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GLabel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GLabel = module.GLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b44a7xpdQtGbJ08fqgS9sPj", "UI_PageFrame1", undefined);
      var UI_PageFrame1 = exports('default', /*#__PURE__*/function (_fgui$GLabel) {
        _inheritsLoose(UI_PageFrame1, _fgui$GLabel);
        function UI_PageFrame1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GLabel.call.apply(_fgui$GLabel, [this].concat(args)) || this;
          _this.m_bgColor = void 0;
          _this.m_bg = void 0;
          _this.m_closeButton = void 0;
          return _this;
        }
        UI_PageFrame1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "PageFrame1");
          obj.name = 'UI_PageFrame1';
          return obj;
        };
        var _proto = UI_PageFrame1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bgColor = this.getController("bgColor");
          this.m_bg = this.getChild("bg");
          this.m_closeButton = this.getChild("closeButton");
        };
        return UI_PageFrame1;
      }(GLabel));
      UI_PageFrame1.URL = "ui://xddh4ifde7mqh";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_PokerCmpt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0e22fBKm6RE5aI3POEzxqX4", "UI_PokerCmpt", undefined);
      var UI_PokerCmpt = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_PokerCmpt, _FGUIComponentBase);
        function UI_PokerCmpt() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_BgControl = void 0;
          _this.m_style = void 0;
          _this.m_light = void 0;
          _this.m_gray = void 0;
          _this.m_showEye = void 0;
          _this.m_pokerFont = void 0;
          _this.m_pokerBack = void 0;
          _this.m_grayMask = void 0;
          _this.m_hightLight = void 0;
          _this.m_icon_eye = void 0;
          return _this;
        }
        UI_PokerCmpt.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Poker", "PokerCmpt");
          obj.name = 'UI_PokerCmpt';
          return obj;
        };
        var _proto = UI_PokerCmpt.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_BgControl = this.getController("BgControl");
          this.m_style = this.getController("style");
          this.m_light = this.getController("light");
          this.m_gray = this.getController("gray");
          this.m_showEye = this.getController("showEye");
          this.m_pokerFont = this.getChild("pokerFont");
          this.m_pokerBack = this.getChild("pokerBack");
          this.m_grayMask = this.getChild("grayMask");
          this.m_hightLight = this.getChild("hightLight");
          this.m_icon_eye = this.getChild("icon_eye");
        };
        return UI_PokerCmpt;
      }(FGUIComponentBase));
      UI_PokerCmpt.URL = "ui://pmyq1mmstryja9";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ProfileHeadGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c09cd1HHYhP07VdcdXd5yqr", "UI_ProfileHeadGroup", undefined);
      var UI_ProfileHeadGroup = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_ProfileHeadGroup, _FGUIComponentBase);
        function UI_ProfileHeadGroup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_HeadGroup = void 0;
          _this.m_UserName = void 0;
          _this.m_UserId = void 0;
          _this.m_BtnCopy = void 0;
          return _this;
        }
        UI_ProfileHeadGroup.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "ProfileHeadGroup");
          obj.name = 'UI_ProfileHeadGroup';
          return obj;
        };
        var _proto = UI_ProfileHeadGroup.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_UserName = this.getChild("UserName");
          this.m_UserId = this.getChild("UserId");
          this.m_BtnCopy = this.getChild("BtnCopy");
        };
        return UI_ProfileHeadGroup;
      }(FGUIComponentBase));
      UI_ProfileHeadGroup.URL = "ui://vjmmgvukqffk3m";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ProfileLanguagePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "136b9ONZrNKy72ENGkHNupS", "UI_ProfileLanguagePage", undefined);
      var UI_ProfileLanguagePage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_ProfileLanguagePage, _FGUIComponentBase);
        function UI_ProfileLanguagePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_ExchangeControl = void 0;
          _this.m_frame = void 0;
          _this.m_BtnEnglish = void 0;
          _this.m_BtnSC = void 0;
          _this.m_BtnTC = void 0;
          _this.m_BtnRu = void 0;
          return _this;
        }
        UI_ProfileLanguagePage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "ProfileLanguagePage");
          obj.name = 'UI_ProfileLanguagePage';
          return obj;
        };
        var _proto = UI_ProfileLanguagePage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_ExchangeControl = this.getController("ExchangeControl");
          this.m_frame = this.getChild("frame");
          this.m_BtnEnglish = this.getChild("BtnEnglish");
          this.m_BtnSC = this.getChild("BtnSC");
          this.m_BtnTC = this.getChild("BtnTC");
          this.m_BtnRu = this.getChild("BtnRu");
        };
        return UI_ProfileLanguagePage;
      }(FGUIComponentBase));
      UI_ProfileLanguagePage.URL = "ui://vjmmgvukqffk45";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_PublicLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8fc334KY8VPWZodjINiJSyz", "UI_PublicLayer", undefined);
      var UI_PublicLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_PublicLayer, _FGUIComponentBase);
        function UI_PublicLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_centerTipLayer = void 0;
          _this.m_loadingItem = void 0;
          return _this;
        }
        UI_PublicLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "PublicLayer");
          obj.name = 'UI_PublicLayer';
          return obj;
        };
        var _proto = UI_PublicLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_centerTipLayer = this.getChild("centerTipLayer");
          this.m_loadingItem = this.getChild("loadingItem");
        };
        return UI_PublicLayer;
      }(FGUIComponentBase));
      UI_PublicLayer.URL = "ui://xddh4ifdtzsm1c";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_RoomButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "55d94L2+85EQIITq0RUQDrA", "UI_RoomButton", undefined);
      var UI_RoomButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_RoomButton, _fgui$GButton);
        function UI_RoomButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_iconbg = void 0;
          return _this;
        }
        UI_RoomButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "RoomButton");
          obj.name = 'UI_RoomButton';
          return obj;
        };
        var _proto = UI_RoomButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_iconbg = this.getChild("iconbg");
        };
        return UI_RoomButton;
      }(GButton));
      UI_RoomButton.URL = "ui://vjmmgvukt3g3bp";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_RoomItemMTT.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6b828qj+cRJpaFz9t2gtLWN", "UI_RoomItemMTT", undefined);
      var UI_RoomItemMTT = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_RoomItemMTT, _FGUIComponentBase);
        function UI_RoomItemMTT() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_CoinTypeControl = void 0;
          _this.m_ImgDeskBg = void 0;
          _this.m_TextGameType = void 0;
          _this.m_ImgKo = void 0;
          _this.m_TextBet = void 0;
          _this.m_TextBetArea = void 0;
          _this.m_TextBetAreaImg = void 0;
          _this.m_TextPlayerCnt = void 0;
          _this.m_playerTag = void 0;
          _this.m_RTag = void 0;
          _this.m_ATag = void 0;
          _this.m_STag = void 0;
          _this.m_rasTag = void 0;
          _this.m_feeTag = void 0;
          _this.m_ImgRegesit = void 0;
          _this.m_TextRegesit = void 0;
          _this.m_layerTimeBg = void 0;
          _this.m_TextStartTime = void 0;
          _this.m_reportTag = void 0;
          _this.m_BtnAction = void 0;
          return _this;
        }
        UI_RoomItemMTT.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "RoomItemMTT");
          obj.name = 'UI_RoomItemMTT';
          return obj;
        };
        var _proto = UI_RoomItemMTT.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_CoinTypeControl = this.getController("CoinTypeControl");
          this.m_ImgDeskBg = this.getChild("ImgDeskBg");
          this.m_TextGameType = this.getChild("TextGameType");
          this.m_ImgKo = this.getChild("ImgKo");
          this.m_TextBet = this.getChild("TextBet");
          this.m_TextBetArea = this.getChild("TextBetArea");
          this.m_TextBetAreaImg = this.getChild("TextBetAreaImg");
          this.m_TextPlayerCnt = this.getChild("TextPlayerCnt");
          this.m_playerTag = this.getChild("playerTag");
          this.m_RTag = this.getChild("RTag");
          this.m_ATag = this.getChild("ATag");
          this.m_STag = this.getChild("STag");
          this.m_rasTag = this.getChild("rasTag");
          this.m_feeTag = this.getChild("feeTag");
          this.m_ImgRegesit = this.getChild("ImgRegesit");
          this.m_TextRegesit = this.getChild("TextRegesit");
          this.m_layerTimeBg = this.getChild("layerTimeBg");
          this.m_TextStartTime = this.getChild("TextStartTime");
          this.m_reportTag = this.getChild("reportTag");
          this.m_BtnAction = this.getChild("BtnAction");
        };
        return UI_RoomItemMTT;
      }(FGUIComponentBase));
      UI_RoomItemMTT.URL = "ui://vjmmgvukwysegk";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_RoomItemNLH.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "36ef4e2iu5KeYT0Pdi8ukrA", "UI_RoomItemNLH", undefined);
      var UI_RoomItemNLH = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_RoomItemNLH, _FGUIComponentBase);
        function UI_RoomItemNLH() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_GameTypeControl = void 0;
          _this.m_CoinTypeControl = void 0;
          _this.m_ImgDeskBg = void 0;
          _this.m_TextBetAreaTitle = void 0;
          _this.m_TextBetArea = void 0;
          _this.m_TextGameType = void 0;
          _this.m_TextBetTitle = void 0;
          _this.m_TextBet = void 0;
          _this.m_TextPlayerCnt = void 0;
          _this.m_RTag = void 0;
          _this.m_ATag = void 0;
          _this.m_STag = void 0;
          _this.m_TextStartTime = void 0;
          _this.m_layerTimeBg = void 0;
          _this.m_BtnAction = void 0;
          return _this;
        }
        UI_RoomItemNLH.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "RoomItemNLH");
          obj.name = 'UI_RoomItemNLH';
          return obj;
        };
        var _proto = UI_RoomItemNLH.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_GameTypeControl = this.getController("GameTypeControl");
          this.m_CoinTypeControl = this.getController("CoinTypeControl");
          this.m_ImgDeskBg = this.getChild("ImgDeskBg");
          this.m_TextBetAreaTitle = this.getChild("TextBetAreaTitle");
          this.m_TextBetArea = this.getChild("TextBetArea");
          this.m_TextGameType = this.getChild("TextGameType");
          this.m_TextBetTitle = this.getChild("TextBetTitle");
          this.m_TextBet = this.getChild("TextBet");
          this.m_TextPlayerCnt = this.getChild("TextPlayerCnt");
          this.m_RTag = this.getChild("RTag");
          this.m_ATag = this.getChild("ATag");
          this.m_STag = this.getChild("STag");
          this.m_TextStartTime = this.getChild("TextStartTime");
          this.m_layerTimeBg = this.getChild("layerTimeBg");
          this.m_BtnAction = this.getChild("BtnAction");
        };
        return UI_RoomItemNLH;
      }(FGUIComponentBase));
      UI_RoomItemNLH.URL = "ui://vjmmgvuko8dn2q";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_RoomItemPlus.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "59e7fNggXVJYrlwx2FuEGoD", "UI_RoomItemPlus", undefined);
      var UI_RoomItemPlus = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_RoomItemPlus, _FGUIComponentBase);
        function UI_RoomItemPlus() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_GameTypeControl = void 0;
          _this.m_CoinTypeControl = void 0;
          _this.m_TextMTTName = void 0;
          _this.m_TextBetTitle = void 0;
          _this.m_TextBet = void 0;
          _this.m_TextGameTypeBg = void 0;
          _this.m_TextGameType = void 0;
          _this.m_ImgKo = void 0;
          _this.m_TextBetAreaTitle = void 0;
          _this.m_TextBetArea = void 0;
          _this.m_TextPlayerCnt = void 0;
          _this.m_RTag = void 0;
          _this.m_ATag = void 0;
          _this.m_STag = void 0;
          _this.m_TextStartTime = void 0;
          _this.m_layerTimeBg = void 0;
          _this.m_BtnAction = void 0;
          return _this;
        }
        UI_RoomItemPlus.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "RoomItemPlus");
          obj.name = 'UI_RoomItemPlus';
          return obj;
        };
        var _proto = UI_RoomItemPlus.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_GameTypeControl = this.getController("GameTypeControl");
          this.m_CoinTypeControl = this.getController("CoinTypeControl");
          this.m_TextMTTName = this.getChild("TextMTTName");
          this.m_TextBetTitle = this.getChild("TextBetTitle");
          this.m_TextBet = this.getChild("TextBet");
          this.m_TextGameTypeBg = this.getChild("TextGameTypeBg");
          this.m_TextGameType = this.getChild("TextGameType");
          this.m_ImgKo = this.getChild("ImgKo");
          this.m_TextBetAreaTitle = this.getChild("TextBetAreaTitle");
          this.m_TextBetArea = this.getChild("TextBetArea");
          this.m_TextPlayerCnt = this.getChild("TextPlayerCnt");
          this.m_RTag = this.getChild("RTag");
          this.m_ATag = this.getChild("ATag");
          this.m_STag = this.getChild("STag");
          this.m_TextStartTime = this.getChild("TextStartTime");
          this.m_layerTimeBg = this.getChild("layerTimeBg");
          this.m_BtnAction = this.getChild("BtnAction");
        };
        return UI_RoomItemPlus;
      }(FGUIComponentBase));
      UI_RoomItemPlus.URL = "ui://vjmmgvukwyseg3";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_SelectDefaultAvatarDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "88dadvYdBpCM5GaMvcv/psf", "UI_SelectDefaultAvatarDialog", undefined);
      var UI_SelectDefaultAvatarDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_SelectDefaultAvatarDialog, _FGUIComponentBase);
        function UI_SelectDefaultAvatarDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_TableList = void 0;
          return _this;
        }
        UI_SelectDefaultAvatarDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "SelectDefaultAvatarDialog");
          obj.name = 'UI_SelectDefaultAvatarDialog';
          return obj;
        };
        var _proto = UI_SelectDefaultAvatarDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_TableList = this.getChild("TableList");
        };
        return UI_SelectDefaultAvatarDialog;
      }(FGUIComponentBase));
      UI_SelectDefaultAvatarDialog.URL = "ui://vjmmgvukjca32n";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_ServerMaintenanceDialoa.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6aa7aEPnPxFBp2DWmNI3jyi", "UI_ServerMaintenanceDialoa", undefined);
      var UI_ServerMaintenanceDialoa = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_ServerMaintenanceDialoa, _FGUIComponentBase);
        function UI_ServerMaintenanceDialoa() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_TextStart = void 0;
          _this.m_TextEnd = void 0;
          _this.m_TextContent = void 0;
          return _this;
        }
        UI_ServerMaintenanceDialoa.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "ServerMaintenanceDialoa");
          obj.name = 'UI_ServerMaintenanceDialoa';
          return obj;
        };
        var _proto = UI_ServerMaintenanceDialoa.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_TextStart = this.getChild("TextStart");
          this.m_TextEnd = this.getChild("TextEnd");
          this.m_TextContent = this.getChild("TextContent");
        };
        return UI_ServerMaintenanceDialoa;
      }(FGUIComponentBase));
      UI_ServerMaintenanceDialoa.URL = "ui://xddh4ifduyjx1j";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TabbarButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e18belL4s9E4JFVWSp2Hhqk", "UI_TabbarButton", undefined);
      var UI_TabbarButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_TabbarButton, _fgui$GButton);
        function UI_TabbarButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bgCtrl = void 0;
          return _this;
        }
        UI_TabbarButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TabbarButton");
          obj.name = 'UI_TabbarButton';
          return obj;
        };
        var _proto = UI_TabbarButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bgCtrl = this.getController("bgCtrl");
        };
        return UI_TabbarButton;
      }(GButton));
      UI_TabbarButton.URL = "ui://0fujvg4o91g049";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TablePlayerTimeCountdown.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0cd1dsm+NhOJINCGYKFJuEq", "UI_TablePlayerTimeCountdown", undefined);
      var UI_TablePlayerTimeCountdown = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TablePlayerTimeCountdown, _FGUIComponentBase);
        function UI_TablePlayerTimeCountdown() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_content = void 0;
          _this.m_point = void 0;
          _this.m_textTime = void 0;
          return _this;
        }
        UI_TablePlayerTimeCountdown.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TablePlayerTimeCountdown");
          obj.name = 'UI_TablePlayerTimeCountdown';
          return obj;
        };
        var _proto = UI_TablePlayerTimeCountdown.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_content = this.getChild("content");
          this.m_point = this.getChild("point");
          this.m_textTime = this.getChild("textTime");
        };
        return UI_TablePlayerTimeCountdown;
      }(FGUIComponentBase));
      UI_TablePlayerTimeCountdown.URL = "ui://0fujvg4ohc925d";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TableScoreCenter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d9205wvxL9F44zIoZrpGFeF", "UI_TableScoreCenter", undefined);
      var UI_TableScoreCenter = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TableScoreCenter, _FGUIComponentBase);
        function UI_TableScoreCenter() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_chipType = void 0;
          _this.m_iconChip = void 0;
          _this.m_score = void 0;
          return _this;
        }
        UI_TableScoreCenter.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TableScoreCenter");
          obj.name = 'UI_TableScoreCenter';
          return obj;
        };
        var _proto = UI_TableScoreCenter.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_chipType = this.getController("chipType");
          this.m_iconChip = this.getChild("iconChip");
          this.m_score = this.getChild("score");
        };
        return UI_TableScoreCenter;
      }(FGUIComponentBase));
      UI_TableScoreCenter.URL = "ui://0fujvg4omxc6t";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TableScoreLeft.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0a820eS03hDzJU+FFIscSn/", "UI_TableScoreLeft", undefined);
      var UI_TableScoreLeft = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TableScoreLeft, _FGUIComponentBase);
        function UI_TableScoreLeft() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_chipType = void 0;
          _this.m_iconChip = void 0;
          _this.m_score = void 0;
          return _this;
        }
        UI_TableScoreLeft.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TableScoreLeft");
          obj.name = 'UI_TableScoreLeft';
          return obj;
        };
        var _proto = UI_TableScoreLeft.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_chipType = this.getController("chipType");
          this.m_iconChip = this.getChild("iconChip");
          this.m_score = this.getChild("score");
        };
        return UI_TableScoreLeft;
      }(FGUIComponentBase));
      UI_TableScoreLeft.URL = "ui://0fujvg4omxc6q";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TableScoreRight.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bd8f8MHGhpPyKgfoHkCVbHs", "UI_TableScoreRight", undefined);
      var UI_TableScoreRight = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TableScoreRight, _FGUIComponentBase);
        function UI_TableScoreRight() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_chipType = void 0;
          _this.m_iconChip = void 0;
          _this.m_score = void 0;
          return _this;
        }
        UI_TableScoreRight.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TableScoreRight");
          obj.name = 'UI_TableScoreRight';
          return obj;
        };
        var _proto = UI_TableScoreRight.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_chipType = this.getController("chipType");
          this.m_iconChip = this.getChild("iconChip");
          this.m_score = this.getChild("score");
        };
        return UI_TableScoreRight;
      }(FGUIComponentBase));
      UI_TableScoreRight.URL = "ui://0fujvg4omxc6r";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasActionTag.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1dfedBDk3hKErf2jDCd8fsF", "UI_TexasActionTag", undefined);
      var UI_TexasActionTag = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasActionTag, _FGUIComponentBase);
        function UI_TexasActionTag() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_action = void 0;
          _this.m_bg = void 0;
          _this.m_stork = void 0;
          _this.m_textContent = void 0;
          return _this;
        }
        UI_TexasActionTag.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasActionTag");
          obj.name = 'UI_TexasActionTag';
          return obj;
        };
        var _proto = UI_TexasActionTag.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_action = this.getController("action");
          this.m_bg = this.getChild("bg");
          this.m_stork = this.getChild("stork");
          this.m_textContent = this.getChild("textContent");
        };
        return UI_TexasActionTag;
      }(FGUIComponentBase));
      UI_TexasActionTag.URL = "ui://0fujvg4omxc6p";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasBuyinDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "26e76I/UmRJZLST6bKr5p+k", "UI_TexasBuyinDialog", undefined);
      var UI_TexasBuyinDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasBuyinDialog, _FGUIComponentBase);
        function UI_TexasBuyinDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bgMask = void 0;
          _this.m_frame = void 0;
          _this.m_line = void 0;
          _this.m_titleBalances = void 0;
          _this.m_totalScore = void 0;
          _this.m_slider = void 0;
          _this.m_timeProgress = void 0;
          _this.m_titleTopupTo = void 0;
          _this.m_score = void 0;
          _this.m_btn1 = void 0;
          _this.m_btn2 = void 0;
          _this.m_btn3 = void 0;
          _this.m_textProgress = void 0;
          _this.m_btnBuyin = void 0;
          return _this;
        }
        UI_TexasBuyinDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasBuyinDialog");
          obj.name = 'UI_TexasBuyinDialog';
          return obj;
        };
        var _proto = UI_TexasBuyinDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bgMask = this.getChild("bgMask");
          this.m_frame = this.getChild("frame");
          this.m_line = this.getChild("line");
          this.m_titleBalances = this.getChild("titleBalances");
          this.m_totalScore = this.getChild("totalScore");
          this.m_slider = this.getChild("slider");
          this.m_timeProgress = this.getChild("timeProgress");
          this.m_titleTopupTo = this.getChild("titleTopupTo");
          this.m_score = this.getChild("score");
          this.m_btn1 = this.getChild("btn1");
          this.m_btn2 = this.getChild("btn2");
          this.m_btn3 = this.getChild("btn3");
          this.m_textProgress = this.getChild("textProgress");
          this.m_btnBuyin = this.getChild("btnBuyin");
        };
        return UI_TexasBuyinDialog;
      }(FGUIComponentBase));
      UI_TexasBuyinDialog.URL = "ui://0fujvg4omgcn52";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasCardTypeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7efa21c5MRBfZjpkZR2iUtS", "UI_TexasCardTypeItem", undefined);
      var UI_TexasCardTypeItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasCardTypeItem, _FGUIComponentBase);
        function UI_TexasCardTypeItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_card1 = void 0;
          _this.m_card2 = void 0;
          _this.m_card3 = void 0;
          _this.m_card4 = void 0;
          _this.m_card5 = void 0;
          _this.m_lbType = void 0;
          return _this;
        }
        UI_TexasCardTypeItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasCardTypeItem");
          obj.name = 'UI_TexasCardTypeItem';
          return obj;
        };
        var _proto = UI_TexasCardTypeItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_card1 = this.getChild("card1");
          this.m_card2 = this.getChild("card2");
          this.m_card3 = this.getChild("card3");
          this.m_card4 = this.getChild("card4");
          this.m_card5 = this.getChild("card5");
          this.m_lbType = this.getChild("lbType");
        };
        return UI_TexasCardTypeItem;
      }(FGUIComponentBase));
      UI_TexasCardTypeItem.URL = "ui://0fujvg4oktzh1w";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasCardTypeLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f0f65zlyZJLHrDGpSMnIA5A", "UI_TexasCardTypeLayer", undefined);
      var UI_TexasCardTypeLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasCardTypeLayer, _FGUIComponentBase);
        function UI_TexasCardTypeLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_layerBg = void 0;
          _this.m_list = void 0;
          _this.m_lbType = void 0;
          return _this;
        }
        UI_TexasCardTypeLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasCardTypeLayer");
          obj.name = 'UI_TexasCardTypeLayer';
          return obj;
        };
        var _proto = UI_TexasCardTypeLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_layerBg = this.getChild("layerBg");
          this.m_list = this.getChild("list");
          this.m_lbType = this.getChild("lbType");
        };
        return UI_TexasCardTypeLayer;
      }(FGUIComponentBase));
      UI_TexasCardTypeLayer.URL = "ui://0fujvg4oktzh1v";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasChatAtPlayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d1cdeyn/nNIFJxWLCO78Qbl", "UI_TexasChatAtPlayerItem", undefined);
      var UI_TexasChatAtPlayerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasChatAtPlayerItem, _FGUIComponentBase);
        function UI_TexasChatAtPlayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_HeadGroup = void 0;
          _this.m_UserName = void 0;
          _this.m_line = void 0;
          return _this;
        }
        UI_TexasChatAtPlayerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasChatAtPlayerItem");
          obj.name = 'UI_TexasChatAtPlayerItem';
          return obj;
        };
        var _proto = UI_TexasChatAtPlayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_UserName = this.getChild("UserName");
          this.m_line = this.getChild("line");
        };
        return UI_TexasChatAtPlayerItem;
      }(FGUIComponentBase));
      UI_TexasChatAtPlayerItem.URL = "ui://0fujvg4oqk033t";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasChatBlockPlayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d8faeBmT6RIG4BCyDwf6KCO", "UI_TexasChatBlockPlayerItem", undefined);
      var UI_TexasChatBlockPlayerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasChatBlockPlayerItem, _FGUIComponentBase);
        function UI_TexasChatBlockPlayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_blockCtrl = void 0;
          _this.m_HeadGroup = void 0;
          _this.m_UserName = void 0;
          _this.m_UserId = void 0;
          _this.m_btnBlock = void 0;
          return _this;
        }
        UI_TexasChatBlockPlayerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasChatBlockPlayerItem");
          obj.name = 'UI_TexasChatBlockPlayerItem';
          return obj;
        };
        var _proto = UI_TexasChatBlockPlayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_blockCtrl = this.getController("blockCtrl");
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_UserName = this.getChild("UserName");
          this.m_UserId = this.getChild("UserId");
          this.m_btnBlock = this.getChild("btnBlock");
        };
        return UI_TexasChatBlockPlayerItem;
      }(FGUIComponentBase));
      UI_TexasChatBlockPlayerItem.URL = "ui://0fujvg4or3q63s";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasChatLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "25235xocyNPj4eJtzSyEvOZ", "UI_TexasChatLayer", undefined);
      var UI_TexasChatLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasChatLayer, _FGUIComponentBase);
        function UI_TexasChatLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_sendTextCtrl = void 0;
          _this.m_shortCutCtrl = void 0;
          _this.m_blockPlayerCtrl = void 0;
          _this.m_atPlayerCtrl = void 0;
          _this.m_msgMaskCtrl = void 0;
          _this.m_emptyCtrl = void 0;
          _this.m_bgMask = void 0;
          _this.m_layerBg = void 0;
          _this.m_bg0 = void 0;
          _this.m_labelTime = void 0;
          _this.m_layerTop = void 0;
          _this.m_list = void 0;
          _this.m_title = void 0;
          _this.m_icon = void 0;
          _this.m_layerEmpty = void 0;
          _this.m_loadingLayer = void 0;
          _this.m_msgMask = void 0;
          _this.m_shortListBg = void 0;
          _this.m_shotList = void 0;
          _this.m_groupShortMsg = void 0;
          _this.m_playerListBg = void 0;
          _this.m_playerList = void 0;
          _this.m_groupBlock = void 0;
          _this.m_atTipBg = void 0;
          _this.m_labelAtTip = void 0;
          _this.m_btnAtTipClose = void 0;
          _this.m_groupAtTips = void 0;
          _this.m_blockTipBg = void 0;
          _this.m_labelBlickTip = void 0;
          _this.m_groupBlockTip = void 0;
          _this.m_btnToVoice = void 0;
          _this.m_btnShortMsg = void 0;
          _this.m_btnBlockPlayer = void 0;
          _this.m_btnAt = void 0;
          _this.m_btnSend = void 0;
          _this.m_inputMsg = void 0;
          _this.m_atPlayerListBg = void 0;
          _this.m_atPlayerList = void 0;
          _this.m_btnCancelAt = void 0;
          _this.m_GroupAt = void 0;
          return _this;
        }
        UI_TexasChatLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasChatLayer");
          obj.name = 'UI_TexasChatLayer';
          return obj;
        };
        var _proto = UI_TexasChatLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_sendTextCtrl = this.getController("sendTextCtrl");
          this.m_shortCutCtrl = this.getController("shortCutCtrl");
          this.m_blockPlayerCtrl = this.getController("blockPlayerCtrl");
          this.m_atPlayerCtrl = this.getController("atPlayerCtrl");
          this.m_msgMaskCtrl = this.getController("msgMaskCtrl");
          this.m_emptyCtrl = this.getController("emptyCtrl");
          this.m_bgMask = this.getChild("bgMask");
          this.m_layerBg = this.getChild("layerBg");
          this.m_bg0 = this.getChild("bg0");
          this.m_labelTime = this.getChild("labelTime");
          this.m_layerTop = this.getChild("layerTop");
          this.m_list = this.getChild("list");
          this.m_title = this.getChild("title");
          this.m_icon = this.getChild("icon");
          this.m_layerEmpty = this.getChild("layerEmpty");
          this.m_loadingLayer = this.getChild("loadingLayer");
          this.m_msgMask = this.getChild("msgMask");
          this.m_shortListBg = this.getChild("shortListBg");
          this.m_shotList = this.getChild("shotList");
          this.m_groupShortMsg = this.getChild("groupShortMsg");
          this.m_playerListBg = this.getChild("playerListBg");
          this.m_playerList = this.getChild("playerList");
          this.m_groupBlock = this.getChild("groupBlock");
          this.m_atTipBg = this.getChild("atTipBg");
          this.m_labelAtTip = this.getChild("labelAtTip");
          this.m_btnAtTipClose = this.getChild("btnAtTipClose");
          this.m_groupAtTips = this.getChild("groupAtTips");
          this.m_blockTipBg = this.getChild("blockTipBg");
          this.m_labelBlickTip = this.getChild("labelBlickTip");
          this.m_groupBlockTip = this.getChild("groupBlockTip");
          this.m_btnToVoice = this.getChild("btnToVoice");
          this.m_btnShortMsg = this.getChild("btnShortMsg");
          this.m_btnBlockPlayer = this.getChild("btnBlockPlayer");
          this.m_btnAt = this.getChild("btnAt");
          this.m_btnSend = this.getChild("btnSend");
          this.m_inputMsg = this.getChild("inputMsg");
          this.m_atPlayerListBg = this.getChild("atPlayerListBg");
          this.m_atPlayerList = this.getChild("atPlayerList");
          this.m_btnCancelAt = this.getChild("btnCancelAt");
          this.m_GroupAt = this.getChild("GroupAt");
        };
        return UI_TexasChatLayer;
      }(FGUIComponentBase));
      UI_TexasChatLayer.URL = "ui://0fujvg4ovl7430";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasChatMsgShortItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a1258+yqwBGPq0rW//mWopi", "UI_TexasChatMsgShortItem", undefined);
      var UI_TexasChatMsgShortItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasChatMsgShortItem, _FGUIComponentBase);
        function UI_TexasChatMsgShortItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_labelMsg = void 0;
          _this.m_line = void 0;
          return _this;
        }
        UI_TexasChatMsgShortItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasChatMsgShortItem");
          obj.name = 'UI_TexasChatMsgShortItem';
          return obj;
        };
        var _proto = UI_TexasChatMsgShortItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_labelMsg = this.getChild("labelMsg");
          this.m_line = this.getChild("line");
        };
        return UI_TexasChatMsgShortItem;
      }(FGUIComponentBase));
      UI_TexasChatMsgShortItem.URL = "ui://0fujvg4owtvo3r";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasChatMstItemOther.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e3e1eiauetJrqACLKdJcwBn", "UI_TexasChatMstItemOther", undefined);
      var UI_TexasChatMstItemOther = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasChatMstItemOther, _FGUIComponentBase);
        function UI_TexasChatMstItemOther() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_typeCtrl = void 0;
          _this.m_layerBg = void 0;
          _this.m_labelMsg = void 0;
          _this.m_groupText = void 0;
          _this.m_layerVoiceBg = void 0;
          _this.m_labelDuration = void 0;
          _this.m_btnPlay = void 0;
          _this.m_groupVoice = void 0;
          _this.m_groupBg = void 0;
          _this.m_labelTime = void 0;
          _this.m_UserName = void 0;
          _this.m_HeadGroup = void 0;
          _this.m_animVoice = void 0;
          return _this;
        }
        UI_TexasChatMstItemOther.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasChatMstItemOther");
          obj.name = 'UI_TexasChatMstItemOther';
          return obj;
        };
        var _proto = UI_TexasChatMstItemOther.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_typeCtrl = this.getController("typeCtrl");
          this.m_layerBg = this.getChild("layerBg");
          this.m_labelMsg = this.getChild("labelMsg");
          this.m_groupText = this.getChild("groupText");
          this.m_layerVoiceBg = this.getChild("layerVoiceBg");
          this.m_labelDuration = this.getChild("labelDuration");
          this.m_btnPlay = this.getChild("btnPlay");
          this.m_groupVoice = this.getChild("groupVoice");
          this.m_groupBg = this.getChild("groupBg");
          this.m_labelTime = this.getChild("labelTime");
          this.m_UserName = this.getChild("UserName");
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_animVoice = this.getTransition("animVoice");
        };
        return UI_TexasChatMstItemOther;
      }(FGUIComponentBase));
      UI_TexasChatMstItemOther.URL = "ui://0fujvg4ovl743o";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasChatMstItemSelf.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "75c06a/h8xI84s/ijItf7NK", "UI_TexasChatMstItemSelf", undefined);
      var UI_TexasChatMstItemSelf = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasChatMstItemSelf, _FGUIComponentBase);
        function UI_TexasChatMstItemSelf() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_typCtrl = void 0;
          _this.m_layerBg = void 0;
          _this.m_UserName = void 0;
          _this.m_labelMsg = void 0;
          _this.m_groupText = void 0;
          _this.m_layerVoiceBg = void 0;
          _this.m_labelDuration = void 0;
          _this.m_btnPlay = void 0;
          _this.m_groupVoice = void 0;
          _this.m_labelTime = void 0;
          _this.m_HeadGroup = void 0;
          _this.m_animVoice = void 0;
          return _this;
        }
        UI_TexasChatMstItemSelf.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasChatMstItemSelf");
          obj.name = 'UI_TexasChatMstItemSelf';
          return obj;
        };
        var _proto = UI_TexasChatMstItemSelf.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_typCtrl = this.getController("typCtrl");
          this.m_layerBg = this.getChild("layerBg");
          this.m_UserName = this.getChild("UserName");
          this.m_labelMsg = this.getChild("labelMsg");
          this.m_groupText = this.getChild("groupText");
          this.m_layerVoiceBg = this.getChild("layerVoiceBg");
          this.m_labelDuration = this.getChild("labelDuration");
          this.m_btnPlay = this.getChild("btnPlay");
          this.m_groupVoice = this.getChild("groupVoice");
          this.m_labelTime = this.getChild("labelTime");
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_animVoice = this.getTransition("animVoice");
        };
        return UI_TexasChatMstItemSelf;
      }(FGUIComponentBase));
      UI_TexasChatMstItemSelf.URL = "ui://0fujvg4ovl743n";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasChipActionLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bfa1dpZpelDB4nj+mBK4d1M", "UI_TexasChipActionLayer", undefined);
      var UI_TexasChipActionLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasChipActionLayer, _FGUIComponentBase);
        function UI_TexasChipActionLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_placeholder = void 0;
          return _this;
        }
        UI_TexasChipActionLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasChipActionLayer");
          obj.name = 'UI_TexasChipActionLayer';
          return obj;
        };
        var _proto = UI_TexasChipActionLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_placeholder = this.getChild("placeholder");
        };
        return UI_TexasChipActionLayer;
      }(FGUIComponentBase));
      UI_TexasChipActionLayer.URL = "ui://0fujvg4odusaw";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasGameContent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "987bbbolVhHZ7tiP64LBy3H", "UI_TexasGameContent", undefined);
      var UI_TexasGameContent = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasGameContent, _FGUIComponentBase);
        function UI_TexasGameContent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_tableLayer = void 0;
          _this.m_pokerLayer = void 0;
          _this.m_playerLayer = void 0;
          _this.m_chipActionLayer = void 0;
          _this.m_roomMenu = void 0;
          _this.m_operatorLayer = void 0;
          _this.m_mttWaitTipLayer = void 0;
          _this.m_tipLayer = void 0;
          _this.m_popLayer = void 0;
          return _this;
        }
        UI_TexasGameContent.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasGameContent");
          obj.name = 'UI_TexasGameContent';
          return obj;
        };
        var _proto = UI_TexasGameContent.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_tableLayer = this.getChild("tableLayer");
          this.m_pokerLayer = this.getChild("pokerLayer");
          this.m_playerLayer = this.getChild("playerLayer");
          this.m_chipActionLayer = this.getChild("chipActionLayer");
          this.m_roomMenu = this.getChild("roomMenu");
          this.m_operatorLayer = this.getChild("operatorLayer");
          this.m_mttWaitTipLayer = this.getChild("mttWaitTipLayer");
          this.m_tipLayer = this.getChild("tipLayer");
          this.m_popLayer = this.getChild("popLayer");
        };
        return UI_TexasGameContent;
      }(FGUIComponentBase));
      UI_TexasGameContent.URL = "ui://0fujvg4oy7zs40";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasGamePage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f8fc8XvkM9KxI/5oHc6UQNs", "UI_TexasGamePage", undefined);
      var UI_TexasGamePage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasGamePage, _FGUIComponentBase);
        function UI_TexasGamePage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_tableLoader = void 0;
          return _this;
        }
        UI_TexasGamePage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasGamePage");
          obj.name = 'UI_TexasGamePage';
          return obj;
        };
        var _proto = UI_TexasGamePage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_tableLoader = this.getChild("tableLoader");
        };
        return UI_TexasGamePage;
      }(FGUIComponentBase));
      UI_TexasGamePage.URL = "ui://0fujvg4oo8dn0";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasHandCardTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d06d4tqJnlD3qyWSIgyHpqh", "UI_TexasHandCardTip", undefined);
      var UI_TexasHandCardTip = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasHandCardTip, _FGUIComponentBase);
        function UI_TexasHandCardTip() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_count = void 0;
          return _this;
        }
        UI_TexasHandCardTip.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasHandCardTip");
          obj.name = 'UI_TexasHandCardTip';
          return obj;
        };
        var _proto = UI_TexasHandCardTip.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_count = this.getController("count");
        };
        return UI_TexasHandCardTip;
      }(FGUIComponentBase));
      UI_TexasHandCardTip.URL = "ui://0fujvg4oom4w2e";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttAddonDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "95bb3cMsEBJjZ1uSbc+xHT7", "UI_TexasMttAddonDialog", undefined);
      var UI_TexasMttAddonDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttAddonDialog, _FGUIComponentBase);
        function UI_TexasMttAddonDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_initiativeRebuy = void 0;
          _this.m_bgMask = void 0;
          _this.m_frame = void 0;
          _this.m_line = void 0;
          _this.m_itemBuyin = void 0;
          _this.m_itemBalance = void 0;
          _this.m_itemChip = void 0;
          _this.m_textDesc = void 0;
          _this.m_timeProgress = void 0;
          _this.m_textTimeLeft = void 0;
          return _this;
        }
        UI_TexasMttAddonDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttAddonDialog");
          obj.name = 'UI_TexasMttAddonDialog';
          return obj;
        };
        var _proto = UI_TexasMttAddonDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_initiativeRebuy = this.getController("initiativeRebuy");
          this.m_bgMask = this.getChild("bgMask");
          this.m_frame = this.getChild("frame");
          this.m_line = this.getChild("line");
          this.m_itemBuyin = this.getChild("itemBuyin");
          this.m_itemBalance = this.getChild("itemBalance");
          this.m_itemChip = this.getChild("itemChip");
          this.m_textDesc = this.getChild("textDesc");
          this.m_timeProgress = this.getChild("timeProgress");
          this.m_textTimeLeft = this.getChild("textTimeLeft");
        };
        return UI_TexasMttAddonDialog;
      }(FGUIComponentBase));
      UI_TexasMttAddonDialog.URL = "ui://0fujvg4ohc9257";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttCountdown.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f74ecs2QFpO8pn5cOIxUki5", "UI_TexasMttCountdown", undefined);
      var UI_TexasMttCountdown = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttCountdown, _FGUIComponentBase);
        function UI_TexasMttCountdown() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_waitType = void 0;
          _this.m_textTip = void 0;
          _this.m_textTimeChar0 = void 0;
          _this.m_textTimeChar1 = void 0;
          return _this;
        }
        UI_TexasMttCountdown.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttCountdown");
          obj.name = 'UI_TexasMttCountdown';
          return obj;
        };
        var _proto = UI_TexasMttCountdown.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_waitType = this.getController("waitType");
          this.m_textTip = this.getChild("textTip");
          this.m_textTimeChar0 = this.getChild("textTimeChar0");
          this.m_textTimeChar1 = this.getChild("textTimeChar1");
        };
        return UI_TexasMttCountdown;
      }(FGUIComponentBase));
      UI_TexasMttCountdown.URL = "ui://0fujvg4ook264v";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoBlindsLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "db65cl58KZOLolhScM8+eln", "UI_TexasMttInfoBlindsLayer", undefined);
      var UI_TexasMttInfoBlindsLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoBlindsLayer, _FGUIComponentBase);
        function UI_TexasMttInfoBlindsLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg0 = void 0;
          _this.m_labelLevel = void 0;
          _this.m_labelBlind = void 0;
          _this.m_labelAnte = void 0;
          _this.m_layerTop = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_TexasMttInfoBlindsLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoBlindsLayer");
          obj.name = 'UI_TexasMttInfoBlindsLayer';
          return obj;
        };
        var _proto = UI_TexasMttInfoBlindsLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg0 = this.getChild("bg0");
          this.m_labelLevel = this.getChild("labelLevel");
          this.m_labelBlind = this.getChild("labelBlind");
          this.m_labelAnte = this.getChild("labelAnte");
          this.m_layerTop = this.getChild("layerTop");
          this.m_list = this.getChild("list");
        };
        return UI_TexasMttInfoBlindsLayer;
      }(FGUIComponentBase));
      UI_TexasMttInfoBlindsLayer.URL = "ui://0fujvg4o11q704k";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoBlindsLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ea41aFJn9pMIY2H8YxdV5JN", "UI_TexasMttInfoBlindsLayerItem", undefined);
      var UI_TexasMttInfoBlindsLayerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoBlindsLayerItem, _FGUIComponentBase);
        function UI_TexasMttInfoBlindsLayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_selectedCtrl = void 0;
          _this.m_bg0 = void 0;
          _this.m_line = void 0;
          _this.m_labelLevel = void 0;
          _this.m_labelR = void 0;
          _this.m_labelA = void 0;
          _this.m_labelBlind = void 0;
          _this.m_labelAnte = void 0;
          return _this;
        }
        UI_TexasMttInfoBlindsLayerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoBlindsLayerItem");
          obj.name = 'UI_TexasMttInfoBlindsLayerItem';
          return obj;
        };
        var _proto = UI_TexasMttInfoBlindsLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_selectedCtrl = this.getController("selectedCtrl");
          this.m_bg0 = this.getChild("bg0");
          this.m_line = this.getChild("line");
          this.m_labelLevel = this.getChild("labelLevel");
          this.m_labelR = this.getChild("labelR");
          this.m_labelA = this.getChild("labelA");
          this.m_labelBlind = this.getChild("labelBlind");
          this.m_labelAnte = this.getChild("labelAnte");
        };
        return UI_TexasMttInfoBlindsLayerItem;
      }(FGUIComponentBase));
      UI_TexasMttInfoBlindsLayerItem.URL = "ui://0fujvg4ojhuo4a";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "00794N2KDRPz4dwh57CKZ3X", "UI_TexasMttInfoLayer", undefined);
      var UI_TexasMttInfoLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoLayer, _FGUIComponentBase);
        function UI_TexasMttInfoLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_listCtrl = void 0;
          _this.m_emptyCtrl = void 0;
          _this.m_bgMask = void 0;
          _this.m_layerBg = void 0;
          _this.m_bg0 = void 0;
          _this.m_labelTime = void 0;
          _this.m_layerTop = void 0;
          _this.m_bg1 = void 0;
          _this.m_labelMyRankT = void 0;
          _this.m_labelMyRank = void 0;
          _this.m_labelPlayerCountT = void 0;
          _this.m_labelPlayerCount = void 0;
          _this.m_labelPrizePoolT = void 0;
          _this.m_labelPrizePool = void 0;
          _this.m_labelLateRegT = void 0;
          _this.m_labelLateReg = void 0;
          _this.m_labelBeakTimeT = void 0;
          _this.m_labelBeakTime = void 0;
          _this.m_playStartTsT = void 0;
          _this.m_playStartTs = void 0;
          _this.m_labelRiseBlindLeftTime = void 0;
          _this.m_iconClick = void 0;
          _this.m_labelRiseBlindMin = void 0;
          _this.m_blindUpBg = void 0;
          _this.m_labelRiseBlindMinT = void 0;
          _this.m_layerInfo1 = void 0;
          _this.m_bg2 = void 0;
          _this.m_labelAverageT = void 0;
          _this.m_labelAverage = void 0;
          _this.m_labelTotalBuyinT = void 0;
          _this.m_labelTotalBuyin = void 0;
          _this.m_labelMinStackT = void 0;
          _this.m_labelMinStack = void 0;
          _this.m_labelRebuysT = void 0;
          _this.m_labelRebuys = void 0;
          _this.m_labelAddonsT = void 0;
          _this.m_labelAddons = void 0;
          _this.m_labelMaxStackT = void 0;
          _this.m_labelMaxStack = void 0;
          _this.m_layerInfo2 = void 0;
          _this.m_pageList = void 0;
          _this.m_loadingLayer = void 0;
          return _this;
        }
        UI_TexasMttInfoLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoLayer");
          obj.name = 'UI_TexasMttInfoLayer';
          return obj;
        };
        var _proto = UI_TexasMttInfoLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_listCtrl = this.getController("listCtrl");
          this.m_emptyCtrl = this.getController("emptyCtrl");
          this.m_bgMask = this.getChild("bgMask");
          this.m_layerBg = this.getChild("layerBg");
          this.m_bg0 = this.getChild("bg0");
          this.m_labelTime = this.getChild("labelTime");
          this.m_layerTop = this.getChild("layerTop");
          this.m_bg1 = this.getChild("bg1");
          this.m_labelMyRankT = this.getChild("labelMyRankT");
          this.m_labelMyRank = this.getChild("labelMyRank");
          this.m_labelPlayerCountT = this.getChild("labelPlayerCountT");
          this.m_labelPlayerCount = this.getChild("labelPlayerCount");
          this.m_labelPrizePoolT = this.getChild("labelPrizePoolT");
          this.m_labelPrizePool = this.getChild("labelPrizePool");
          this.m_labelLateRegT = this.getChild("labelLateRegT");
          this.m_labelLateReg = this.getChild("labelLateReg");
          this.m_labelBeakTimeT = this.getChild("labelBeakTimeT");
          this.m_labelBeakTime = this.getChild("labelBeakTime");
          this.m_playStartTsT = this.getChild("playStartTsT");
          this.m_playStartTs = this.getChild("playStartTs");
          this.m_labelRiseBlindLeftTime = this.getChild("labelRiseBlindLeftTime");
          this.m_iconClick = this.getChild("iconClick");
          this.m_labelRiseBlindMin = this.getChild("labelRiseBlindMin");
          this.m_blindUpBg = this.getChild("blindUpBg");
          this.m_labelRiseBlindMinT = this.getChild("labelRiseBlindMinT");
          this.m_layerInfo1 = this.getChild("layerInfo1");
          this.m_bg2 = this.getChild("bg2");
          this.m_labelAverageT = this.getChild("labelAverageT");
          this.m_labelAverage = this.getChild("labelAverage");
          this.m_labelTotalBuyinT = this.getChild("labelTotalBuyinT");
          this.m_labelTotalBuyin = this.getChild("labelTotalBuyin");
          this.m_labelMinStackT = this.getChild("labelMinStackT");
          this.m_labelMinStack = this.getChild("labelMinStack");
          this.m_labelRebuysT = this.getChild("labelRebuysT");
          this.m_labelRebuys = this.getChild("labelRebuys");
          this.m_labelAddonsT = this.getChild("labelAddonsT");
          this.m_labelAddons = this.getChild("labelAddons");
          this.m_labelMaxStackT = this.getChild("labelMaxStackT");
          this.m_labelMaxStack = this.getChild("labelMaxStack");
          this.m_layerInfo2 = this.getChild("layerInfo2");
          this.m_pageList = this.getChild("pageList");
          this.m_loadingLayer = this.getChild("loadingLayer");
        };
        return UI_TexasMttInfoLayer;
      }(FGUIComponentBase));
      UI_TexasMttInfoLayer.URL = "ui://0fujvg4o91g044";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoObserverItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9fb45R9WLxGCb5WAeZARWLx", "UI_TexasMttInfoObserverItem", undefined);
      var UI_TexasMttInfoObserverItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoObserverItem, _FGUIComponentBase);
        function UI_TexasMttInfoObserverItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_HeadGroup = void 0;
          _this.m_labelUserName = void 0;
          return _this;
        }
        UI_TexasMttInfoObserverItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoObserverItem");
          obj.name = 'UI_TexasMttInfoObserverItem';
          return obj;
        };
        var _proto = UI_TexasMttInfoObserverItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_labelUserName = this.getChild("labelUserName");
        };
        return UI_TexasMttInfoObserverItem;
      }(FGUIComponentBase));
      UI_TexasMttInfoObserverItem.URL = "ui://0fujvg4osy7u4h";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoPrizesLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d9d53T1MgxA8b97jb3lc7Ck", "UI_TexasMttInfoPrizesLayer", undefined);
      var UI_TexasMttInfoPrizesLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoPrizesLayer, _FGUIComponentBase);
        function UI_TexasMttInfoPrizesLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg0 = void 0;
          _this.m_labelRank = void 0;
          _this.m_labelPrize = void 0;
          _this.m_layerTop = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_TexasMttInfoPrizesLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoPrizesLayer");
          obj.name = 'UI_TexasMttInfoPrizesLayer';
          return obj;
        };
        var _proto = UI_TexasMttInfoPrizesLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg0 = this.getChild("bg0");
          this.m_labelRank = this.getChild("labelRank");
          this.m_labelPrize = this.getChild("labelPrize");
          this.m_layerTop = this.getChild("layerTop");
          this.m_list = this.getChild("list");
        };
        return UI_TexasMttInfoPrizesLayer;
      }(FGUIComponentBase));
      UI_TexasMttInfoPrizesLayer.URL = "ui://0fujvg4ol6by4m";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoPrizesLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7333eYxHxhKbaTbcbJJfflH", "UI_TexasMttInfoPrizesLayerItem", undefined);
      var UI_TexasMttInfoPrizesLayerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoPrizesLayerItem, _FGUIComponentBase);
        function UI_TexasMttInfoPrizesLayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_line = void 0;
          _this.m_labelRank = void 0;
          _this.m_labelTip = void 0;
          _this.m_iconItem = void 0;
          _this.m_labelItem = void 0;
          _this.m_layerItem = void 0;
          _this.m_iconChip = void 0;
          _this.m_labelChip = void 0;
          _this.m_layerChip = void 0;
          _this.m_layerReward = void 0;
          return _this;
        }
        UI_TexasMttInfoPrizesLayerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoPrizesLayerItem");
          obj.name = 'UI_TexasMttInfoPrizesLayerItem';
          return obj;
        };
        var _proto = UI_TexasMttInfoPrizesLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_line = this.getChild("line");
          this.m_labelRank = this.getChild("labelRank");
          this.m_labelTip = this.getChild("labelTip");
          this.m_iconItem = this.getChild("iconItem");
          this.m_labelItem = this.getChild("labelItem");
          this.m_layerItem = this.getChild("layerItem");
          this.m_iconChip = this.getChild("iconChip");
          this.m_labelChip = this.getChild("labelChip");
          this.m_layerChip = this.getChild("layerChip");
          this.m_layerReward = this.getChild("layerReward");
        };
        return UI_TexasMttInfoPrizesLayerItem;
      }(FGUIComponentBase));
      UI_TexasMttInfoPrizesLayerItem.URL = "ui://0fujvg4ol6by4n";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoRankingLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c7b3bkYksZOpZVSW3wK2RuW", "UI_TexasMttInfoRankingLayer", undefined);
      var UI_TexasMttInfoRankingLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoRankingLayer, _FGUIComponentBase);
        function UI_TexasMttInfoRankingLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg0 = void 0;
          _this.m_labelRank = void 0;
          _this.m_labelPlayers = void 0;
          _this.m_labelStack = void 0;
          _this.m_labelRA = void 0;
          _this.m_layerTop = void 0;
          _this.m_list = void 0;
          _this.m_myRankLayer = void 0;
          return _this;
        }
        UI_TexasMttInfoRankingLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoRankingLayer");
          obj.name = 'UI_TexasMttInfoRankingLayer';
          return obj;
        };
        var _proto = UI_TexasMttInfoRankingLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg0 = this.getChild("bg0");
          this.m_labelRank = this.getChild("labelRank");
          this.m_labelPlayers = this.getChild("labelPlayers");
          this.m_labelStack = this.getChild("labelStack");
          this.m_labelRA = this.getChild("labelRA");
          this.m_layerTop = this.getChild("layerTop");
          this.m_list = this.getChild("list");
          this.m_myRankLayer = this.getChild("myRankLayer");
        };
        return UI_TexasMttInfoRankingLayer;
      }(FGUIComponentBase));
      UI_TexasMttInfoRankingLayer.URL = "ui://0fujvg4o91g048";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoRankingLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "22a714k9ZlOCavYrwQUCheM", "UI_TexasMttInfoRankingLayerItem", undefined);
      var UI_TexasMttInfoRankingLayerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoRankingLayerItem, _FGUIComponentBase);
        function UI_TexasMttInfoRankingLayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_selfCtrl = void 0;
          _this.m_showCtrl = void 0;
          _this.m_bg0 = void 0;
          _this.m_line = void 0;
          _this.m_labelRank = void 0;
          _this.m_labelRA = void 0;
          _this.m_HeadGroup = void 0;
          _this.m_labelUserName = void 0;
          _this.m_labelStack = void 0;
          return _this;
        }
        UI_TexasMttInfoRankingLayerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoRankingLayerItem");
          obj.name = 'UI_TexasMttInfoRankingLayerItem';
          return obj;
        };
        var _proto = UI_TexasMttInfoRankingLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_selfCtrl = this.getController("selfCtrl");
          this.m_showCtrl = this.getController("showCtrl");
          this.m_bg0 = this.getChild("bg0");
          this.m_line = this.getChild("line");
          this.m_labelRank = this.getChild("labelRank");
          this.m_labelRA = this.getChild("labelRA");
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_labelUserName = this.getChild("labelUserName");
          this.m_labelStack = this.getChild("labelStack");
        };
        return UI_TexasMttInfoRankingLayerItem;
      }(FGUIComponentBase));
      UI_TexasMttInfoRankingLayerItem.URL = "ui://0fujvg4o11q704l";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoTablesLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e8268nyfPRKSKdnj8NYkLxv", "UI_TexasMttInfoTablesLayer", undefined);
      var UI_TexasMttInfoTablesLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoTablesLayer, _FGUIComponentBase);
        function UI_TexasMttInfoTablesLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_list = void 0;
          _this.m_bg0 = void 0;
          _this.m_labelObserver = void 0;
          _this.m_layerBottom = void 0;
          _this.m_oberserList = void 0;
          return _this;
        }
        UI_TexasMttInfoTablesLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoTablesLayer");
          obj.name = 'UI_TexasMttInfoTablesLayer';
          return obj;
        };
        var _proto = UI_TexasMttInfoTablesLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_list = this.getChild("list");
          this.m_bg0 = this.getChild("bg0");
          this.m_labelObserver = this.getChild("labelObserver");
          this.m_layerBottom = this.getChild("layerBottom");
          this.m_oberserList = this.getChild("oberserList");
        };
        return UI_TexasMttInfoTablesLayer;
      }(FGUIComponentBase));
      UI_TexasMttInfoTablesLayer.URL = "ui://0fujvg4okrls4b";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttInfoTablesLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f9175Yz+EpMU6fwE289HA1X", "UI_TexasMttInfoTablesLayerItem", undefined);
      var UI_TexasMttInfoTablesLayerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttInfoTablesLayerItem, _FGUIComponentBase);
        function UI_TexasMttInfoTablesLayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_selfCtrl = void 0;
          _this.m_bg0 = void 0;
          _this.m_line = void 0;
          _this.m_iconArrow = void 0;
          _this.m_labelPlayerCount = void 0;
          _this.m_labelStack = void 0;
          _this.m_iconStack = void 0;
          _this.m_iconPlayer = void 0;
          _this.m_iconNumberBg = void 0;
          _this.m_labelNumber = void 0;
          return _this;
        }
        UI_TexasMttInfoTablesLayerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttInfoTablesLayerItem");
          obj.name = 'UI_TexasMttInfoTablesLayerItem';
          return obj;
        };
        var _proto = UI_TexasMttInfoTablesLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_selfCtrl = this.getController("selfCtrl");
          this.m_bg0 = this.getChild("bg0");
          this.m_line = this.getChild("line");
          this.m_iconArrow = this.getChild("iconArrow");
          this.m_labelPlayerCount = this.getChild("labelPlayerCount");
          this.m_labelStack = this.getChild("labelStack");
          this.m_iconStack = this.getChild("iconStack");
          this.m_iconPlayer = this.getChild("iconPlayer");
          this.m_iconNumberBg = this.getChild("iconNumberBg");
          this.m_labelNumber = this.getChild("labelNumber");
        };
        return UI_TexasMttInfoTablesLayerItem;
      }(FGUIComponentBase));
      UI_TexasMttInfoTablesLayerItem.URL = "ui://0fujvg4okrls4c";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttRebuyDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "acb281lXfxB56w+aaSn3aV8", "UI_TexasMttRebuyDialog", undefined);
      var UI_TexasMttRebuyDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttRebuyDialog, _FGUIComponentBase);
        function UI_TexasMttRebuyDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_initiativeRebuy = void 0;
          _this.m_bgMask = void 0;
          _this.m_frame = void 0;
          _this.m_line = void 0;
          _this.m_itemBuyin = void 0;
          _this.m_itemBalance = void 0;
          _this.m_itemChip = void 0;
          _this.m_textDesc = void 0;
          _this.m_timeProgress = void 0;
          _this.m_textTimeLeft = void 0;
          return _this;
        }
        UI_TexasMttRebuyDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttRebuyDialog");
          obj.name = 'UI_TexasMttRebuyDialog';
          return obj;
        };
        var _proto = UI_TexasMttRebuyDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_initiativeRebuy = this.getController("initiativeRebuy");
          this.m_bgMask = this.getChild("bgMask");
          this.m_frame = this.getChild("frame");
          this.m_line = this.getChild("line");
          this.m_itemBuyin = this.getChild("itemBuyin");
          this.m_itemBalance = this.getChild("itemBalance");
          this.m_itemChip = this.getChild("itemChip");
          this.m_textDesc = this.getChild("textDesc");
          this.m_timeProgress = this.getChild("timeProgress");
          this.m_textTimeLeft = this.getChild("textTimeLeft");
        };
        return UI_TexasMttRebuyDialog;
      }(FGUIComponentBase));
      UI_TexasMttRebuyDialog.URL = "ui://0fujvg4ook264t";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttResultDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e0000LLPitOaZNOP1wur4k3", "UI_TexasMttResultDialog", undefined);
      var UI_TexasMttResultDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttResultDialog, _FGUIComponentBase);
        function UI_TexasMttResultDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_rank = void 0;
          _this.m_showRank = void 0;
          _this.m_bgMask = void 0;
          _this.m_rankIcon = void 0;
          _this.m_bg = void 0;
          _this.m_rewardItem = void 0;
          _this.m_decorate1 = void 0;
          _this.m_decorate2 = void 0;
          _this.m_decorate3 = void 0;
          _this.m_decorate4 = void 0;
          _this.m_textRank = void 0;
          _this.m_youWon = void 0;
          _this.m_title = void 0;
          _this.m_textMttName = void 0;
          _this.m_textEntries = void 0;
          return _this;
        }
        UI_TexasMttResultDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttResultDialog");
          obj.name = 'UI_TexasMttResultDialog';
          return obj;
        };
        var _proto = UI_TexasMttResultDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_rank = this.getController("rank");
          this.m_showRank = this.getController("showRank");
          this.m_bgMask = this.getChild("bgMask");
          this.m_rankIcon = this.getChild("rankIcon");
          this.m_bg = this.getChild("bg");
          this.m_rewardItem = this.getChild("rewardItem");
          this.m_decorate1 = this.getChild("decorate1");
          this.m_decorate2 = this.getChild("decorate2");
          this.m_decorate3 = this.getChild("decorate3");
          this.m_decorate4 = this.getChild("decorate4");
          this.m_textRank = this.getChild("textRank");
          this.m_youWon = this.getChild("youWon");
          this.m_title = this.getChild("title");
          this.m_textMttName = this.getChild("textMttName");
          this.m_textEntries = this.getChild("textEntries");
        };
        return UI_TexasMttResultDialog;
      }(FGUIComponentBase));
      UI_TexasMttResultDialog.URL = "ui://0fujvg4ook264w";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttResultRewardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a921fhzxsxMqISRG4+BpD/K", "UI_TexasMttResultRewardItem", undefined);
      var UI_TexasMttResultRewardItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttResultRewardItem, _FGUIComponentBase);
        function UI_TexasMttResultRewardItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_showReward = void 0;
          _this.m_chipType = void 0;
          _this.m_rewardBg = void 0;
          _this.m_avatarLoader = void 0;
          _this.m_textUserName = void 0;
          _this.m_iconReward = void 0;
          _this.m_textReward = void 0;
          return _this;
        }
        UI_TexasMttResultRewardItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttResultRewardItem");
          obj.name = 'UI_TexasMttResultRewardItem';
          return obj;
        };
        var _proto = UI_TexasMttResultRewardItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_showReward = this.getController("showReward");
          this.m_chipType = this.getController("chipType");
          this.m_rewardBg = this.getChild("rewardBg");
          this.m_avatarLoader = this.getChild("avatarLoader");
          this.m_textUserName = this.getChild("textUserName");
          this.m_iconReward = this.getChild("iconReward");
          this.m_textReward = this.getChild("textReward");
        };
        return UI_TexasMttResultRewardItem;
      }(FGUIComponentBase));
      UI_TexasMttResultRewardItem.URL = "ui://0fujvg4ohc925s";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttTipBlindsUP.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "45b75s1nRdD9pqcDA0zW0m8", "UI_TexasMttTipBlindsUP", undefined);
      var UI_TexasMttTipBlindsUP = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttTipBlindsUP, _FGUIComponentBase);
        function UI_TexasMttTipBlindsUP() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_waitType = void 0;
          _this.m_bg = void 0;
          _this.m_textContent = void 0;
          return _this;
        }
        UI_TexasMttTipBlindsUP.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttTipBlindsUP");
          obj.name = 'UI_TexasMttTipBlindsUP';
          return obj;
        };
        var _proto = UI_TexasMttTipBlindsUP.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_waitType = this.getController("waitType");
          this.m_bg = this.getChild("bg");
          this.m_textContent = this.getChild("textContent");
        };
        return UI_TexasMttTipBlindsUP;
      }(FGUIComponentBase));
      UI_TexasMttTipBlindsUP.URL = "ui://0fujvg4ohc925j";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttTipCommon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ea54dTo66xFYL/VlQ3G+GaC", "UI_TexasMttTipCommon", undefined);
      var UI_TexasMttTipCommon = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttTipCommon, _FGUIComponentBase);
        function UI_TexasMttTipCommon() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_waitType = void 0;
          _this.m_bg = void 0;
          _this.m_textContent = void 0;
          return _this;
        }
        UI_TexasMttTipCommon.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttTipCommon");
          obj.name = 'UI_TexasMttTipCommon';
          return obj;
        };
        var _proto = UI_TexasMttTipCommon.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_waitType = this.getController("waitType");
          this.m_bg = this.getChild("bg");
          this.m_textContent = this.getChild("textContent");
        };
        return UI_TexasMttTipCommon;
      }(FGUIComponentBase));
      UI_TexasMttTipCommon.URL = "ui://0fujvg4ohc925l";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttTipMoney.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "87701z/uAVEYYAV2a5qFpU2", "UI_TexasMttTipMoney", undefined);
      var UI_TexasMttTipMoney = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttTipMoney, _FGUIComponentBase);
        function UI_TexasMttTipMoney() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_waitType = void 0;
          _this.m_bg = void 0;
          _this.m_textContent = void 0;
          return _this;
        }
        UI_TexasMttTipMoney.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttTipMoney");
          obj.name = 'UI_TexasMttTipMoney';
          return obj;
        };
        var _proto = UI_TexasMttTipMoney.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_waitType = this.getController("waitType");
          this.m_bg = this.getChild("bg");
          this.m_textContent = this.getChild("textContent");
        };
        return UI_TexasMttTipMoney;
      }(FGUIComponentBase));
      UI_TexasMttTipMoney.URL = "ui://0fujvg4ohc925g";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttWaitStartItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ea9c2bWwJdKKrOx0lhLyHtV", "UI_TexasMttWaitStartItem", undefined);
      var UI_TexasMttWaitStartItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttWaitStartItem, _FGUIComponentBase);
        function UI_TexasMttWaitStartItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_textContent = void 0;
          return _this;
        }
        UI_TexasMttWaitStartItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttWaitStartItem");
          obj.name = 'UI_TexasMttWaitStartItem';
          return obj;
        };
        var _proto = UI_TexasMttWaitStartItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_textContent = this.getChild("textContent");
        };
        return UI_TexasMttWaitStartItem;
      }(FGUIComponentBase));
      UI_TexasMttWaitStartItem.URL = "ui://0fujvg4ohc925w";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasMttWaitTipLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "24d8bEkCWJKa766xcLiDhqW", "UI_TexasMttWaitTipLayer", undefined);
      var UI_TexasMttWaitTipLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasMttWaitTipLayer, _FGUIComponentBase);
        function UI_TexasMttWaitTipLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_commonCountdown = void 0;
          _this.m_waitStart = void 0;
          _this.m_commonWait = void 0;
          return _this;
        }
        UI_TexasMttWaitTipLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasMttWaitTipLayer");
          obj.name = 'UI_TexasMttWaitTipLayer';
          return obj;
        };
        var _proto = UI_TexasMttWaitTipLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_commonCountdown = this.getChild("commonCountdown");
          this.m_waitStart = this.getChild("waitStart");
          this.m_commonWait = this.getChild("commonWait");
        };
        return UI_TexasMttWaitTipLayer;
      }(FGUIComponentBase));
      UI_TexasMttWaitTipLayer.URL = "ui://0fujvg4ook264u";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasOperatorContent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06662RbN4BCebXuc5It/sv3", "UI_TexasOperatorContent", undefined);
      var UI_TexasOperatorContent = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasOperatorContent, _FGUIComponentBase);
        function UI_TexasOperatorContent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_roundState = void 0;
          _this.m_isJoinTheGame = void 0;
          _this.m_isCheckEnable = void 0;
          _this.m_isRaiseMode = void 0;
          _this.m_raiseBtnName = void 0;
          _this.m_showAllin = void 0;
          _this.m_showRaise = void 0;
          _this.m_showCall = void 0;
          _this.m_allinPlace = void 0;
          _this.m_btnSelectCheckOrFold = void 0;
          _this.m_btnSelectCall = void 0;
          _this.m_btnSelectAutoCheck = void 0;
          _this.m_btnSelectCallAny = void 0;
          _this.m_preOperator = void 0;
          _this.m_btnFold = void 0;
          _this.m_btnCheck = void 0;
          _this.m_btnCall = void 0;
          _this.m_btnRaise = void 0;
          _this.m_btnAllin = void 0;
          _this.m_btnMask = void 0;
          _this.m_btnRaiseBB1 = void 0;
          _this.m_btnRaiseBB2 = void 0;
          _this.m_btnRaiseBB3 = void 0;
          _this.m_btnRaiseConfirm = void 0;
          _this.m_raiseAdd = void 0;
          _this.m_line = void 0;
          _this.m_raiseSub = void 0;
          _this.m_raiseSliderBg = void 0;
          _this.m_decorate = void 0;
          _this.m_chip0 = void 0;
          _this.m_chip1 = void 0;
          _this.m_chip2 = void 0;
          _this.m_chip3 = void 0;
          _this.m_chip4 = void 0;
          _this.m_chip5 = void 0;
          _this.m_chip6 = void 0;
          _this.m_chip7 = void 0;
          _this.m_chip8 = void 0;
          _this.m_chip9 = void 0;
          _this.m_chip10 = void 0;
          _this.m_chip11 = void 0;
          _this.m_chip12 = void 0;
          _this.m_chip13 = void 0;
          _this.m_chip14 = void 0;
          _this.m_chip15 = void 0;
          _this.m_chip16 = void 0;
          _this.m_chip17 = void 0;
          _this.m_chips = void 0;
          _this.m_raiseSliderText = void 0;
          _this.m_raiseMode = void 0;
          _this.m_operator = void 0;
          _this.m_btnBackTable = void 0;
          _this.m_btnForceBB = void 0;
          return _this;
        }
        UI_TexasOperatorContent.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasOperatorContent");
          obj.name = 'UI_TexasOperatorContent';
          return obj;
        };
        var _proto = UI_TexasOperatorContent.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_roundState = this.getController("roundState");
          this.m_isJoinTheGame = this.getController("isJoinTheGame");
          this.m_isCheckEnable = this.getController("isCheckEnable");
          this.m_isRaiseMode = this.getController("isRaiseMode");
          this.m_raiseBtnName = this.getController("raiseBtnName");
          this.m_showAllin = this.getController("showAllin");
          this.m_showRaise = this.getController("showRaise");
          this.m_showCall = this.getController("showCall");
          this.m_allinPlace = this.getController("allinPlace");
          this.m_btnSelectCheckOrFold = this.getChild("btnSelectCheckOrFold");
          this.m_btnSelectCall = this.getChild("btnSelectCall");
          this.m_btnSelectAutoCheck = this.getChild("btnSelectAutoCheck");
          this.m_btnSelectCallAny = this.getChild("btnSelectCallAny");
          this.m_preOperator = this.getChild("preOperator");
          this.m_btnFold = this.getChild("btnFold");
          this.m_btnCheck = this.getChild("btnCheck");
          this.m_btnCall = this.getChild("btnCall");
          this.m_btnRaise = this.getChild("btnRaise");
          this.m_btnAllin = this.getChild("btnAllin");
          this.m_btnMask = this.getChild("btnMask");
          this.m_btnRaiseBB1 = this.getChild("btnRaiseBB1");
          this.m_btnRaiseBB2 = this.getChild("btnRaiseBB2");
          this.m_btnRaiseBB3 = this.getChild("btnRaiseBB3");
          this.m_btnRaiseConfirm = this.getChild("btnRaiseConfirm");
          this.m_raiseAdd = this.getChild("raiseAdd");
          this.m_line = this.getChild("line");
          this.m_raiseSub = this.getChild("raiseSub");
          this.m_raiseSliderBg = this.getChild("raiseSliderBg");
          this.m_decorate = this.getChild("decorate");
          this.m_chip0 = this.getChild("chip0");
          this.m_chip1 = this.getChild("chip1");
          this.m_chip2 = this.getChild("chip2");
          this.m_chip3 = this.getChild("chip3");
          this.m_chip4 = this.getChild("chip4");
          this.m_chip5 = this.getChild("chip5");
          this.m_chip6 = this.getChild("chip6");
          this.m_chip7 = this.getChild("chip7");
          this.m_chip8 = this.getChild("chip8");
          this.m_chip9 = this.getChild("chip9");
          this.m_chip10 = this.getChild("chip10");
          this.m_chip11 = this.getChild("chip11");
          this.m_chip12 = this.getChild("chip12");
          this.m_chip13 = this.getChild("chip13");
          this.m_chip14 = this.getChild("chip14");
          this.m_chip15 = this.getChild("chip15");
          this.m_chip16 = this.getChild("chip16");
          this.m_chip17 = this.getChild("chip17");
          this.m_chips = this.getChild("chips");
          this.m_raiseSliderText = this.getChild("raiseSliderText");
          this.m_raiseMode = this.getChild("raiseMode");
          this.m_operator = this.getChild("operator");
          this.m_btnBackTable = this.getChild("btnBackTable");
          this.m_btnForceBB = this.getChild("btnForceBB");
        };
        return UI_TexasOperatorContent;
      }(FGUIComponentBase));
      UI_TexasOperatorContent.URL = "ui://0fujvg4ohc9258";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasOperatorLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3feffUPtm5PJY0OuzPOWNRg", "UI_TexasOperatorLayer", undefined);
      var UI_TexasOperatorLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasOperatorLayer, _FGUIComponentBase);
        function UI_TexasOperatorLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_roundState = void 0;
          _this.m_operatorContent = void 0;
          _this.m_btnTimeBank = void 0;
          return _this;
        }
        UI_TexasOperatorLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasOperatorLayer");
          obj.name = 'UI_TexasOperatorLayer';
          return obj;
        };
        var _proto = UI_TexasOperatorLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_roundState = this.getController("roundState");
          this.m_operatorContent = this.getChild("operatorContent");
          this.m_btnTimeBank = this.getChild("btnTimeBank");
        };
        return UI_TexasOperatorLayer;
      }(FGUIComponentBase));
      UI_TexasOperatorLayer.URL = "ui://0fujvg4oo8dn4";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasPlayerInfoLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "76870eylvlPSqZwv1edhEqj", "UI_TexasPlayerInfoLayer", undefined);
      var UI_TexasPlayerInfoLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasPlayerInfoLayer, _FGUIComponentBase);
        function UI_TexasPlayerInfoLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_isCurPlayer = void 0;
          _this.m_gameMenuMask = void 0;
          _this.m_bg_size = void 0;
          _this.m_vpipTitle = void 0;
          _this.m_vpipValue = void 0;
          _this.m_handsTitle = void 0;
          _this.m_handsValue = void 0;
          _this.m_gamesTitle = void 0;
          _this.m_gamesValue = void 0;
          _this.m_HeadGroup = void 0;
          _this.m_UserName = void 0;
          _this.m_UserId = void 0;
          _this.m_money_icon = void 0;
          _this.m_playerMoney = void 0;
          _this.m_playerBB = void 0;
          _this.m_gameEmoj = void 0;
          return _this;
        }
        UI_TexasPlayerInfoLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasPlayerInfoLayer");
          obj.name = 'UI_TexasPlayerInfoLayer';
          return obj;
        };
        var _proto = UI_TexasPlayerInfoLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_isCurPlayer = this.getController("isCurPlayer");
          this.m_gameMenuMask = this.getChild("gameMenuMask");
          this.m_bg_size = this.getChild("bg_size");
          this.m_vpipTitle = this.getChild("vpipTitle");
          this.m_vpipValue = this.getChild("vpipValue");
          this.m_handsTitle = this.getChild("handsTitle");
          this.m_handsValue = this.getChild("handsValue");
          this.m_gamesTitle = this.getChild("gamesTitle");
          this.m_gamesValue = this.getChild("gamesValue");
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_UserName = this.getChild("UserName");
          this.m_UserId = this.getChild("UserId");
          this.m_money_icon = this.getChild("money_icon");
          this.m_playerMoney = this.getChild("playerMoney");
          this.m_playerBB = this.getChild("playerBB");
          this.m_gameEmoj = this.getChild("gameEmoj");
        };
        return UI_TexasPlayerInfoLayer;
      }(FGUIComponentBase));
      UI_TexasPlayerInfoLayer.URL = "ui://0fujvg4okmtc29";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasPlayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "74dfdAvqThAp4Efeb640QJg", "UI_TexasPlayerItem", undefined);
      var UI_TexasPlayerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasPlayerItem, _FGUIComponentBase);
        function UI_TexasPlayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_chairState = void 0;
          _this.m_winRatePlace = void 0;
          _this.m_allinAmin = void 0;
          _this.m_chairWin = void 0;
          _this.m_avt = void 0;
          _this.m_groupSittingOut = void 0;
          _this.m_iconDisConnectProtect = void 0;
          _this.m_timeCountdownProgress = void 0;
          _this.m_actionTag = void 0;
          _this.m_line = void 0;
          _this.m_nick = void 0;
          _this.m_score = void 0;
          _this.m_groupNick = void 0;
          _this.m_emptyBg = void 0;
          _this.m_emptyText = void 0;
          _this.m_sitText = void 0;
          _this.m_handCardTip = void 0;
          _this.m_expressionPlace = void 0;
          _this.m_openCardItem = void 0;
          _this.m_winScore = void 0;
          _this.m_chatBubbleBg = void 0;
          _this.m_labelChatMsg = void 0;
          _this.m_chatBubbleDown = void 0;
          _this.m_chatBubble = void 0;
          _this.m_textCardType = void 0;
          _this.m_cardTypeGroup = void 0;
          _this.m_winRateItem = void 0;
          return _this;
        }
        UI_TexasPlayerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasPlayerItem");
          obj.name = 'UI_TexasPlayerItem';
          return obj;
        };
        var _proto = UI_TexasPlayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_chairState = this.getController("chairState");
          this.m_winRatePlace = this.getController("winRatePlace");
          this.m_allinAmin = this.getChild("allinAmin");
          this.m_chairWin = this.getChild("chairWin");
          this.m_avt = this.getChild("avt");
          this.m_groupSittingOut = this.getChild("groupSittingOut");
          this.m_iconDisConnectProtect = this.getChild("iconDisConnectProtect");
          this.m_timeCountdownProgress = this.getChild("timeCountdownProgress");
          this.m_actionTag = this.getChild("actionTag");
          this.m_line = this.getChild("line");
          this.m_nick = this.getChild("nick");
          this.m_score = this.getChild("score");
          this.m_groupNick = this.getChild("groupNick");
          this.m_emptyBg = this.getChild("emptyBg");
          this.m_emptyText = this.getChild("emptyText");
          this.m_sitText = this.getChild("sitText");
          this.m_handCardTip = this.getChild("handCardTip");
          this.m_expressionPlace = this.getChild("expressionPlace");
          this.m_openCardItem = this.getChild("openCardItem");
          this.m_winScore = this.getChild("winScore");
          this.m_chatBubbleBg = this.getChild("chatBubbleBg");
          this.m_labelChatMsg = this.getChild("labelChatMsg");
          this.m_chatBubbleDown = this.getChild("chatBubbleDown");
          this.m_chatBubble = this.getChild("chatBubble");
          this.m_textCardType = this.getChild("textCardType");
          this.m_cardTypeGroup = this.getChild("cardTypeGroup");
          this.m_winRateItem = this.getChild("winRateItem");
        };
        return UI_TexasPlayerItem;
      }(FGUIComponentBase));
      UI_TexasPlayerItem.URL = "ui://0fujvg4omxc6o";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasPlayerLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ff91cnHYxpBjbTAW9ZAc7h7", "UI_TexasPlayerLayer", undefined);
      var UI_TexasPlayerLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasPlayerLayer, _FGUIComponentBase);
        function UI_TexasPlayerLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_youwinPlace = void 0;
          return _this;
        }
        UI_TexasPlayerLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasPlayerLayer");
          obj.name = 'UI_TexasPlayerLayer';
          return obj;
        };
        var _proto = UI_TexasPlayerLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_youwinPlace = this.getChild("youwinPlace");
        };
        return UI_TexasPlayerLayer;
      }(FGUIComponentBase));
      UI_TexasPlayerLayer.URL = "ui://0fujvg4oo8dn3";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasPlayerOpenCardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0055c+GyEdDuLXhmljWqhYa", "UI_TexasPlayerOpenCardItem", undefined);
      var UI_TexasPlayerOpenCardItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasPlayerOpenCardItem, _FGUIComponentBase);
        function UI_TexasPlayerOpenCardItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_cardCount = void 0;
          _this.m_poker0 = void 0;
          _this.m_poker1 = void 0;
          _this.m_poker2 = void 0;
          _this.m_poker3 = void 0;
          _this.m_poker4 = void 0;
          _this.m_poker5 = void 0;
          return _this;
        }
        UI_TexasPlayerOpenCardItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasPlayerOpenCardItem");
          obj.name = 'UI_TexasPlayerOpenCardItem';
          return obj;
        };
        var _proto = UI_TexasPlayerOpenCardItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_cardCount = this.getController("cardCount");
          this.m_poker0 = this.getChild("poker0");
          this.m_poker1 = this.getChild("poker1");
          this.m_poker2 = this.getChild("poker2");
          this.m_poker3 = this.getChild("poker3");
          this.m_poker4 = this.getChild("poker4");
          this.m_poker5 = this.getChild("poker5");
        };
        return UI_TexasPlayerOpenCardItem;
      }(FGUIComponentBase));
      UI_TexasPlayerOpenCardItem.URL = "ui://0fujvg4oii1zz";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasPlayerWinRateItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b30aasnqrFNhaKO7OOy4MiF", "UI_TexasPlayerWinRateItem", undefined);
      var UI_TexasPlayerWinRateItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasPlayerWinRateItem, _FGUIComponentBase);
        function UI_TexasPlayerWinRateItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_showRate = void 0;
          _this.m_showOuts = void 0;
          _this.m_showSkull = void 0;
          _this.m_rateState = void 0;
          _this.m_textWinRate = void 0;
          _this.m_textOuts = void 0;
          return _this;
        }
        UI_TexasPlayerWinRateItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasPlayerWinRateItem");
          obj.name = 'UI_TexasPlayerWinRateItem';
          return obj;
        };
        var _proto = UI_TexasPlayerWinRateItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_showRate = this.getController("showRate");
          this.m_showOuts = this.getController("showOuts");
          this.m_showSkull = this.getController("showSkull");
          this.m_rateState = this.getController("rateState");
          this.m_textWinRate = this.getChild("textWinRate");
          this.m_textOuts = this.getChild("textOuts");
        };
        return UI_TexasPlayerWinRateItem;
      }(FGUIComponentBase));
      UI_TexasPlayerWinRateItem.URL = "ui://0fujvg4or02v6a";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasPokerLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "df3dbUAI91NRrsrlhnZWQ14", "UI_TexasPokerLayer", undefined);
      var UI_TexasPokerLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasPokerLayer, _FGUIComponentBase);
        function UI_TexasPokerLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_rabbitPlace = void 0;
          _this.m_dealCardPlace = void 0;
          _this.m_groupPublicBg = void 0;
          _this.m_publicPoker1_0 = void 0;
          _this.m_publicPoker1_1 = void 0;
          _this.m_publicPoker1_2 = void 0;
          _this.m_publicPoker1_3 = void 0;
          _this.m_publicPoker1_4 = void 0;
          _this.m_curPlayerHandPoker0 = void 0;
          _this.m_curPlayerHandPoker1 = void 0;
          _this.m_curPlayerHandPoker2 = void 0;
          _this.m_curPlayerHandPoker3 = void 0;
          _this.m_curPlayerHandPoker4 = void 0;
          _this.m_curPlayerHandPoker5 = void 0;
          _this.m_cardType = void 0;
          _this.m_btnCardType = void 0;
          _this.m_groupCardType = void 0;
          _this.m_layerCardTypePowerProgress = void 0;
          _this.m_btnCardTypePower = void 0;
          _this.m_groupCardTypePower = void 0;
          _this.m_btnRabbit = void 0;
          return _this;
        }
        UI_TexasPokerLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasPokerLayer");
          obj.name = 'UI_TexasPokerLayer';
          return obj;
        };
        var _proto = UI_TexasPokerLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_rabbitPlace = this.getController("rabbitPlace");
          this.m_dealCardPlace = this.getChild("dealCardPlace");
          this.m_groupPublicBg = this.getChild("groupPublicBg");
          this.m_publicPoker1_0 = this.getChild("publicPoker1_0");
          this.m_publicPoker1_1 = this.getChild("publicPoker1_1");
          this.m_publicPoker1_2 = this.getChild("publicPoker1_2");
          this.m_publicPoker1_3 = this.getChild("publicPoker1_3");
          this.m_publicPoker1_4 = this.getChild("publicPoker1_4");
          this.m_curPlayerHandPoker0 = this.getChild("curPlayerHandPoker0");
          this.m_curPlayerHandPoker1 = this.getChild("curPlayerHandPoker1");
          this.m_curPlayerHandPoker2 = this.getChild("curPlayerHandPoker2");
          this.m_curPlayerHandPoker3 = this.getChild("curPlayerHandPoker3");
          this.m_curPlayerHandPoker4 = this.getChild("curPlayerHandPoker4");
          this.m_curPlayerHandPoker5 = this.getChild("curPlayerHandPoker5");
          this.m_cardType = this.getChild("cardType");
          this.m_btnCardType = this.getChild("btnCardType");
          this.m_groupCardType = this.getChild("groupCardType");
          this.m_layerCardTypePowerProgress = this.getChild("layerCardTypePowerProgress");
          this.m_btnCardTypePower = this.getChild("btnCardTypePower");
          this.m_groupCardTypePower = this.getChild("groupCardTypePower");
          this.m_btnRabbit = this.getChild("btnRabbit");
        };
        return UI_TexasPokerLayer;
      }(FGUIComponentBase));
      UI_TexasPokerLayer.URL = "ui://0fujvg4oqsvkx";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasPopMenuLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8732eHa97RABqhmV28zDrn/", "UI_TexasPopMenuLayer", undefined);
      var UI_TexasPopMenuLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasPopMenuLayer, _FGUIComponentBase);
        function UI_TexasPopMenuLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_gameMenuMask = void 0;
          _this.m_menuListBg = void 0;
          _this.m_line_3 = void 0;
          _this.m_HeadGroup = void 0;
          _this.m_UserName = void 0;
          _this.m_UserId = void 0;
          _this.m_btnStandUp = void 0;
          _this.m_btnStepAway = void 0;
          _this.m_btnSwitchTable = void 0;
          _this.m_btnHandCardRanking = void 0;
          _this.m_btnHost = void 0;
          _this.m_groupMenuList = void 0;
          _this.m_line_1 = void 0;
          _this.m_btnExitGame = void 0;
          _this.m_line_2 = void 0;
          _this.m_money_bg = void 0;
          _this.m_add_money = void 0;
          _this.m_text_money = void 0;
          _this.m_groupGameMenu = void 0;
          return _this;
        }
        UI_TexasPopMenuLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasPopMenuLayer");
          obj.name = 'UI_TexasPopMenuLayer';
          return obj;
        };
        var _proto = UI_TexasPopMenuLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_gameMenuMask = this.getChild("gameMenuMask");
          this.m_menuListBg = this.getChild("menuListBg");
          this.m_line_3 = this.getChild("line_3");
          this.m_HeadGroup = this.getChild("HeadGroup");
          this.m_UserName = this.getChild("UserName");
          this.m_UserId = this.getChild("UserId");
          this.m_btnStandUp = this.getChild("btnStandUp");
          this.m_btnStepAway = this.getChild("btnStepAway");
          this.m_btnSwitchTable = this.getChild("btnSwitchTable");
          this.m_btnHandCardRanking = this.getChild("btnHandCardRanking");
          this.m_btnHost = this.getChild("btnHost");
          this.m_groupMenuList = this.getChild("groupMenuList");
          this.m_line_1 = this.getChild("line_1");
          this.m_btnExitGame = this.getChild("btnExitGame");
          this.m_line_2 = this.getChild("line_2");
          this.m_money_bg = this.getChild("money_bg");
          this.m_add_money = this.getChild("add_money");
          this.m_text_money = this.getChild("text_money");
          this.m_groupGameMenu = this.getChild("groupGameMenu");
        };
        return UI_TexasPopMenuLayer;
      }(FGUIComponentBase));
      UI_TexasPopMenuLayer.URL = "ui://0fujvg4oo1ym5b";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasPopupLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cc83eVNL0dOMa6T0WYQg5yZ", "UI_TexasPopupLayer", undefined);
      var UI_TexasPopupLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasPopupLayer, _FGUIComponentBase);
        function UI_TexasPopupLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_cardTypePowerController = void 0;
          _this.m_cardTypeController = void 0;
          _this.m_playerInfoController = void 0;
          _this.m_expressionControler = void 0;
          _this.m_mttAddonController = void 0;
          _this.m_retrospectController = void 0;
          _this.m_msgDialogController = void 0;
          _this.m_mttInfoLayerController = void 0;
          _this.m_mttRebuyContoller = void 0;
          _this.m_mttResultDialogController = void 0;
          _this.m_buyinControler = void 0;
          _this.m_roomMenuController = void 0;
          _this.m_tableInfoController = void 0;
          _this.m_cardTypePowerDialog = void 0;
          _this.m_cardTypeLayer = void 0;
          _this.m_buyinDialog = void 0;
          _this.m_playerInfoLayer = void 0;
          _this.m_expressionDialog = void 0;
          _this.m_retrospectLayer = void 0;
          _this.m_chatLayer = void 0;
          _this.m_mttInfoLayer = void 0;
          _this.m_mttAddOnDialog = void 0;
          _this.m_mttRebuyDialog = void 0;
          _this.m_mttResultDialog = void 0;
          _this.m_menuPopLayer = void 0;
          _this.m_tableInfoLayer = void 0;
          return _this;
        }
        UI_TexasPopupLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasPopupLayer");
          obj.name = 'UI_TexasPopupLayer';
          return obj;
        };
        var _proto = UI_TexasPopupLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_cardTypePowerController = this.getController("cardTypePowerController");
          this.m_cardTypeController = this.getController("cardTypeController");
          this.m_playerInfoController = this.getController("playerInfoController");
          this.m_expressionControler = this.getController("expressionControler");
          this.m_mttAddonController = this.getController("mttAddonController");
          this.m_retrospectController = this.getController("retrospectController");
          this.m_msgDialogController = this.getController("msgDialogController");
          this.m_mttInfoLayerController = this.getController("mttInfoLayerController");
          this.m_mttRebuyContoller = this.getController("mttRebuyContoller");
          this.m_mttResultDialogController = this.getController("mttResultDialogController");
          this.m_buyinControler = this.getController("buyinControler");
          this.m_roomMenuController = this.getController("roomMenuController");
          this.m_tableInfoController = this.getController("tableInfoController");
          this.m_cardTypePowerDialog = this.getChild("cardTypePowerDialog");
          this.m_cardTypeLayer = this.getChild("cardTypeLayer");
          this.m_buyinDialog = this.getChild("buyinDialog");
          this.m_playerInfoLayer = this.getChild("playerInfoLayer");
          this.m_expressionDialog = this.getChild("expressionDialog");
          this.m_retrospectLayer = this.getChild("retrospectLayer");
          this.m_chatLayer = this.getChild("chatLayer");
          this.m_mttInfoLayer = this.getChild("mttInfoLayer");
          this.m_mttAddOnDialog = this.getChild("mttAddOnDialog");
          this.m_mttRebuyDialog = this.getChild("mttRebuyDialog");
          this.m_mttResultDialog = this.getChild("mttResultDialog");
          this.m_menuPopLayer = this.getChild("menuPopLayer");
          this.m_tableInfoLayer = this.getChild("tableInfoLayer");
        };
        return UI_TexasPopupLayer;
      }(FGUIComponentBase));
      UI_TexasPopupLayer.URL = "ui://0fujvg4oihnp1u";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectBlankItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "39325zLVgtPQJ2bI3oEmEUA", "UI_TexasRetrospectBlankItem", undefined);
      var UI_TexasRetrospectBlankItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectBlankItem, _FGUIComponentBase);
        function UI_TexasRetrospectBlankItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg1 = void 0;
          _this.m_lableWin = void 0;
          return _this;
        }
        UI_TexasRetrospectBlankItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectBlankItem");
          obj.name = 'UI_TexasRetrospectBlankItem';
          return obj;
        };
        var _proto = UI_TexasRetrospectBlankItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg1 = this.getChild("bg1");
          this.m_lableWin = this.getChild("lableWin");
        };
        return UI_TexasRetrospectBlankItem;
      }(FGUIComponentBase));
      UI_TexasRetrospectBlankItem.URL = "ui://0fujvg4op7nj5g";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectDetailInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b6d32iD84JD0o6Kwf1ybeEg", "UI_TexasRetrospectDetailInfo", undefined);
      var UI_TexasRetrospectDetailInfo = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectDetailInfo, _FGUIComponentBase);
        function UI_TexasRetrospectDetailInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_list = void 0;
          return _this;
        }
        UI_TexasRetrospectDetailInfo.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectDetailInfo");
          obj.name = 'UI_TexasRetrospectDetailInfo';
          return obj;
        };
        var _proto = UI_TexasRetrospectDetailInfo.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_list = this.getChild("list");
        };
        return UI_TexasRetrospectDetailInfo;
      }(FGUIComponentBase));
      UI_TexasRetrospectDetailInfo.URL = "ui://0fujvg4oimsd2u";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectDetailLevel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "867219n/wFPm6g1dAz0jhce", "UI_TexasRetrospectDetailLevel", undefined);
      var UI_TexasRetrospectDetailLevel = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectDetailLevel, _FGUIComponentBase);
        function UI_TexasRetrospectDetailLevel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_sidePotsCtrl = void 0;
          _this.m_bg = void 0;
          _this.m_bg1 = void 0;
          _this.m_emptyCard1 = void 0;
          _this.m_emptyCard2 = void 0;
          _this.m_emptyCard3 = void 0;
          _this.m_emptyCard4 = void 0;
          _this.m_emptyCard5 = void 0;
          _this.m_publicCard1 = void 0;
          _this.m_publicCard2 = void 0;
          _this.m_publicCard3 = void 0;
          _this.m_publicCard4 = void 0;
          _this.m_publicCard5 = void 0;
          _this.m_lableChip = void 0;
          _this.m_lableType = void 0;
          _this.m_layerPots = void 0;
          _this.m_groupList = void 0;
          _this.m_line1 = void 0;
          return _this;
        }
        UI_TexasRetrospectDetailLevel.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectDetailLevel");
          obj.name = 'UI_TexasRetrospectDetailLevel';
          return obj;
        };
        var _proto = UI_TexasRetrospectDetailLevel.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_sidePotsCtrl = this.getController("sidePotsCtrl");
          this.m_bg = this.getChild("bg");
          this.m_bg1 = this.getChild("bg1");
          this.m_emptyCard1 = this.getChild("emptyCard1");
          this.m_emptyCard2 = this.getChild("emptyCard2");
          this.m_emptyCard3 = this.getChild("emptyCard3");
          this.m_emptyCard4 = this.getChild("emptyCard4");
          this.m_emptyCard5 = this.getChild("emptyCard5");
          this.m_publicCard1 = this.getChild("publicCard1");
          this.m_publicCard2 = this.getChild("publicCard2");
          this.m_publicCard3 = this.getChild("publicCard3");
          this.m_publicCard4 = this.getChild("publicCard4");
          this.m_publicCard5 = this.getChild("publicCard5");
          this.m_lableChip = this.getChild("lableChip");
          this.m_lableType = this.getChild("lableType");
          this.m_layerPots = this.getChild("layerPots");
          this.m_groupList = this.getChild("groupList");
          this.m_line1 = this.getChild("line1");
        };
        return UI_TexasRetrospectDetailLevel;
      }(FGUIComponentBase));
      UI_TexasRetrospectDetailLevel.URL = "ui://0fujvg4oimsd2x";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectDetailOp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3154fh9pH5I3a2HfeOmPwK4", "UI_TexasRetrospectDetailOp", undefined);
      var UI_TexasRetrospectDetailOp = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectDetailOp, _FGUIComponentBase);
        function UI_TexasRetrospectDetailOp() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_labelName = void 0;
          _this.m_bg1 = void 0;
          _this.m_lablePosition = void 0;
          _this.m_actionBg = void 0;
          _this.m_lableAction = void 0;
          _this.m_lableChip = void 0;
          _this.m_lableActionChip = void 0;
          return _this;
        }
        UI_TexasRetrospectDetailOp.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectDetailOp");
          obj.name = 'UI_TexasRetrospectDetailOp';
          return obj;
        };
        var _proto = UI_TexasRetrospectDetailOp.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_labelName = this.getChild("labelName");
          this.m_bg1 = this.getChild("bg1");
          this.m_lablePosition = this.getChild("lablePosition");
          this.m_actionBg = this.getChild("actionBg");
          this.m_lableAction = this.getChild("lableAction");
          this.m_lableChip = this.getChild("lableChip");
          this.m_lableActionChip = this.getChild("lableActionChip");
        };
        return UI_TexasRetrospectDetailOp;
      }(FGUIComponentBase));
      UI_TexasRetrospectDetailOp.URL = "ui://0fujvg4oimsd2w";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectDetailPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "96a06PeFsVA26MfC4EtiQhg", "UI_TexasRetrospectDetailPlayer", undefined);
      var UI_TexasRetrospectDetailPlayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectDetailPlayer, _FGUIComponentBase);
        function UI_TexasRetrospectDetailPlayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_status = void 0;
          _this.m_bg2 = void 0;
          _this.m_lablePosition = void 0;
          _this.m_card1 = void 0;
          _this.m_card2 = void 0;
          _this.m_card3 = void 0;
          _this.m_card4 = void 0;
          _this.m_card5 = void 0;
          _this.m_card6 = void 0;
          _this.m_labelName = void 0;
          _this.m_lableCardType = void 0;
          _this.m_lableWin = void 0;
          _this.m_line1 = void 0;
          _this.m_publicCard1 = void 0;
          _this.m_publicCard2 = void 0;
          _this.m_publicCard3 = void 0;
          _this.m_publicCard4 = void 0;
          _this.m_publicCard5 = void 0;
          _this.m_bg3 = void 0;
          _this.m_lableStatus = void 0;
          _this.m_groupStatus = void 0;
          return _this;
        }
        UI_TexasRetrospectDetailPlayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectDetailPlayer");
          obj.name = 'UI_TexasRetrospectDetailPlayer';
          return obj;
        };
        var _proto = UI_TexasRetrospectDetailPlayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_status = this.getController("status");
          this.m_bg2 = this.getChild("bg2");
          this.m_lablePosition = this.getChild("lablePosition");
          this.m_card1 = this.getChild("card1");
          this.m_card2 = this.getChild("card2");
          this.m_card3 = this.getChild("card3");
          this.m_card4 = this.getChild("card4");
          this.m_card5 = this.getChild("card5");
          this.m_card6 = this.getChild("card6");
          this.m_labelName = this.getChild("labelName");
          this.m_lableCardType = this.getChild("lableCardType");
          this.m_lableWin = this.getChild("lableWin");
          this.m_line1 = this.getChild("line1");
          this.m_publicCard1 = this.getChild("publicCard1");
          this.m_publicCard2 = this.getChild("publicCard2");
          this.m_publicCard3 = this.getChild("publicCard3");
          this.m_publicCard4 = this.getChild("publicCard4");
          this.m_publicCard5 = this.getChild("publicCard5");
          this.m_bg3 = this.getChild("bg3");
          this.m_lableStatus = this.getChild("lableStatus");
          this.m_groupStatus = this.getChild("groupStatus");
        };
        return UI_TexasRetrospectDetailPlayer;
      }(FGUIComponentBase));
      UI_TexasRetrospectDetailPlayer.URL = "ui://0fujvg4oimsd2z";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectDetailShow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "df8f4P3CN5FQqYVO4SJdatq", "UI_TexasRetrospectDetailShow", undefined);
      var UI_TexasRetrospectDetailShow = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectDetailShow, _FGUIComponentBase);
        function UI_TexasRetrospectDetailShow() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_sidePotsCtrl = void 0;
          _this.m_bg = void 0;
          _this.m_bg1 = void 0;
          _this.m_lableChip = void 0;
          _this.m_lableCardType = void 0;
          _this.m_layerPots = void 0;
          _this.m_groupList = void 0;
          _this.m_line1 = void 0;
          return _this;
        }
        UI_TexasRetrospectDetailShow.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectDetailShow");
          obj.name = 'UI_TexasRetrospectDetailShow';
          return obj;
        };
        var _proto = UI_TexasRetrospectDetailShow.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_sidePotsCtrl = this.getController("sidePotsCtrl");
          this.m_bg = this.getChild("bg");
          this.m_bg1 = this.getChild("bg1");
          this.m_lableChip = this.getChild("lableChip");
          this.m_lableCardType = this.getChild("lableCardType");
          this.m_layerPots = this.getChild("layerPots");
          this.m_groupList = this.getChild("groupList");
          this.m_line1 = this.getChild("line1");
        };
        return UI_TexasRetrospectDetailShow;
      }(FGUIComponentBase));
      UI_TexasRetrospectDetailShow.URL = "ui://0fujvg4oimsd2y";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectDetailTop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d7000Vj21tFV7RvFOI626E1", "UI_TexasRetrospectDetailTop", undefined);
      var UI_TexasRetrospectDetailTop = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectDetailTop, _FGUIComponentBase);
        function UI_TexasRetrospectDetailTop() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_numCtrl = void 0;
          _this.m_bg1 = void 0;
          _this.m_card1 = void 0;
          _this.m_card2 = void 0;
          _this.m_card3 = void 0;
          _this.m_card4 = void 0;
          _this.m_card5 = void 0;
          _this.m_card6 = void 0;
          _this.m_lableChip = void 0;
          _this.m_lableType = void 0;
          _this.m_line1 = void 0;
          return _this;
        }
        UI_TexasRetrospectDetailTop.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectDetailTop");
          obj.name = 'UI_TexasRetrospectDetailTop';
          return obj;
        };
        var _proto = UI_TexasRetrospectDetailTop.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_numCtrl = this.getController("numCtrl");
          this.m_bg1 = this.getChild("bg1");
          this.m_card1 = this.getChild("card1");
          this.m_card2 = this.getChild("card2");
          this.m_card3 = this.getChild("card3");
          this.m_card4 = this.getChild("card4");
          this.m_card5 = this.getChild("card5");
          this.m_card6 = this.getChild("card6");
          this.m_lableChip = this.getChild("lableChip");
          this.m_lableType = this.getChild("lableType");
          this.m_line1 = this.getChild("line1");
        };
        return UI_TexasRetrospectDetailTop;
      }(FGUIComponentBase));
      UI_TexasRetrospectDetailTop.URL = "ui://0fujvg4oimsd2v";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e57a8S5XGVNDYwSrz1/2nyO", "UI_TexasRetrospectInfo", undefined);
      var UI_TexasRetrospectInfo = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectInfo, _FGUIComponentBase);
        function UI_TexasRetrospectInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_list = void 0;
          return _this;
        }
        UI_TexasRetrospectInfo.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectInfo");
          obj.name = 'UI_TexasRetrospectInfo';
          return obj;
        };
        var _proto = UI_TexasRetrospectInfo.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_list = this.getChild("list");
        };
        return UI_TexasRetrospectInfo;
      }(FGUIComponentBase));
      UI_TexasRetrospectInfo.URL = "ui://0fujvg4or9lg2j";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectInfoItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "87267hNyYlCkKRwazZVCVB6", "UI_TexasRetrospectInfoItem", undefined);
      var UI_TexasRetrospectInfoItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectInfoItem, _FGUIComponentBase);
        function UI_TexasRetrospectInfoItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_status = void 0;
          _this.m_bg2 = void 0;
          _this.m_lablePosition = void 0;
          _this.m_card1 = void 0;
          _this.m_card2 = void 0;
          _this.m_card3 = void 0;
          _this.m_card4 = void 0;
          _this.m_card5 = void 0;
          _this.m_card6 = void 0;
          _this.m_labelName = void 0;
          _this.m_lableCardType = void 0;
          _this.m_lableWin = void 0;
          _this.m_line1 = void 0;
          _this.m_publicCard1 = void 0;
          _this.m_publicCard2 = void 0;
          _this.m_publicCard3 = void 0;
          _this.m_publicCard4 = void 0;
          _this.m_publicCard5 = void 0;
          _this.m_bg3 = void 0;
          _this.m_lableStatus = void 0;
          _this.m_groupStatus = void 0;
          return _this;
        }
        UI_TexasRetrospectInfoItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectInfoItem");
          obj.name = 'UI_TexasRetrospectInfoItem';
          return obj;
        };
        var _proto = UI_TexasRetrospectInfoItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_status = this.getController("status");
          this.m_bg2 = this.getChild("bg2");
          this.m_lablePosition = this.getChild("lablePosition");
          this.m_card1 = this.getChild("card1");
          this.m_card2 = this.getChild("card2");
          this.m_card3 = this.getChild("card3");
          this.m_card4 = this.getChild("card4");
          this.m_card5 = this.getChild("card5");
          this.m_card6 = this.getChild("card6");
          this.m_labelName = this.getChild("labelName");
          this.m_lableCardType = this.getChild("lableCardType");
          this.m_lableWin = this.getChild("lableWin");
          this.m_line1 = this.getChild("line1");
          this.m_publicCard1 = this.getChild("publicCard1");
          this.m_publicCard2 = this.getChild("publicCard2");
          this.m_publicCard3 = this.getChild("publicCard3");
          this.m_publicCard4 = this.getChild("publicCard4");
          this.m_publicCard5 = this.getChild("publicCard5");
          this.m_bg3 = this.getChild("bg3");
          this.m_lableStatus = this.getChild("lableStatus");
          this.m_groupStatus = this.getChild("groupStatus");
        };
        return UI_TexasRetrospectInfoItem;
      }(FGUIComponentBase));
      UI_TexasRetrospectInfoItem.URL = "ui://0fujvg4or9lg2k";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9cbf2bIZLFMZZGpV5VSxW3g", "UI_TexasRetrospectLayer", undefined);
      var UI_TexasRetrospectLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectLayer, _FGUIComponentBase);
        function UI_TexasRetrospectLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_emptyCtrl = void 0;
          _this.m_indexControl = void 0;
          _this.m_starCtrl = void 0;
          _this.m_progressCtrl = void 0;
          _this.m_bgMask = void 0;
          _this.m_layerBg = void 0;
          _this.m_bg1 = void 0;
          _this.m_labelTitle = void 0;
          _this.m_labelTime = void 0;
          _this.m_labelGameId = void 0;
          _this.m_btnStar = void 0;
          _this.m_labelStarInfo = void 0;
          _this.m_labelStakes = void 0;
          _this.m_labelBlind = void 0;
          _this.m_line1 = void 0;
          _this.m_iconChip = void 0;
          _this.m_labelTotalPotT = void 0;
          _this.m_labelTotalPot = void 0;
          _this.m_layerTop = void 0;
          _this.m_listContent = void 0;
          _this.m_btnInfo = void 0;
          _this.m_btnDetail = void 0;
          _this.m_line2 = void 0;
          _this.m_btnPre = void 0;
          _this.m_btnNext = void 0;
          _this.m_btnShowProgress1 = void 0;
          _this.m_btnShowProgress2 = void 0;
          _this.m_labelIndex = void 0;
          _this.m_slider = void 0;
          _this.m_groupSlider = void 0;
          _this.m_loadingLayer = void 0;
          return _this;
        }
        UI_TexasRetrospectLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectLayer");
          obj.name = 'UI_TexasRetrospectLayer';
          return obj;
        };
        var _proto = UI_TexasRetrospectLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_emptyCtrl = this.getController("emptyCtrl");
          this.m_indexControl = this.getController("indexControl");
          this.m_starCtrl = this.getController("starCtrl");
          this.m_progressCtrl = this.getController("progressCtrl");
          this.m_bgMask = this.getChild("bgMask");
          this.m_layerBg = this.getChild("layerBg");
          this.m_bg1 = this.getChild("bg1");
          this.m_labelTitle = this.getChild("labelTitle");
          this.m_labelTime = this.getChild("labelTime");
          this.m_labelGameId = this.getChild("labelGameId");
          this.m_btnStar = this.getChild("btnStar");
          this.m_labelStarInfo = this.getChild("labelStarInfo");
          this.m_labelStakes = this.getChild("labelStakes");
          this.m_labelBlind = this.getChild("labelBlind");
          this.m_line1 = this.getChild("line1");
          this.m_iconChip = this.getChild("iconChip");
          this.m_labelTotalPotT = this.getChild("labelTotalPotT");
          this.m_labelTotalPot = this.getChild("labelTotalPot");
          this.m_layerTop = this.getChild("layerTop");
          this.m_listContent = this.getChild("listContent");
          this.m_btnInfo = this.getChild("btnInfo");
          this.m_btnDetail = this.getChild("btnDetail");
          this.m_line2 = this.getChild("line2");
          this.m_btnPre = this.getChild("btnPre");
          this.m_btnNext = this.getChild("btnNext");
          this.m_btnShowProgress1 = this.getChild("btnShowProgress1");
          this.m_btnShowProgress2 = this.getChild("btnShowProgress2");
          this.m_labelIndex = this.getChild("labelIndex");
          this.m_slider = this.getChild("slider");
          this.m_groupSlider = this.getChild("groupSlider");
          this.m_loadingLayer = this.getChild("loadingLayer");
        };
        return UI_TexasRetrospectLayer;
      }(FGUIComponentBase));
      UI_TexasRetrospectLayer.URL = "ui://0fujvg4or9lg2h";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRetrospectPotsItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1d29dnj3C9AKacPVB8pI9p7", "UI_TexasRetrospectPotsItem", undefined);
      var UI_TexasRetrospectPotsItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRetrospectPotsItem, _FGUIComponentBase);
        function UI_TexasRetrospectPotsItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_lablePot = void 0;
          _this.m_lablePotDetail = void 0;
          _this.m_layerPots = void 0;
          return _this;
        }
        UI_TexasRetrospectPotsItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRetrospectPotsItem");
          obj.name = 'UI_TexasRetrospectPotsItem';
          return obj;
        };
        var _proto = UI_TexasRetrospectPotsItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_lablePot = this.getChild("lablePot");
          this.m_lablePotDetail = this.getChild("lablePotDetail");
          this.m_layerPots = this.getChild("layerPots");
        };
        return UI_TexasRetrospectPotsItem;
      }(FGUIComponentBase));
      UI_TexasRetrospectPotsItem.URL = "ui://0fujvg4oudh23v";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasRoomMenuLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c9f65jnvENJAa+LzH4tBozL", "UI_TexasRoomMenuLayer", undefined);
      var UI_TexasRoomMenuLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasRoomMenuLayer, _FGUIComponentBase);
        function UI_TexasRoomMenuLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_btnMenu = void 0;
          _this.m_btnAddon = void 0;
          _this.m_groupTopLeft = void 0;
          _this.m_btnRank = void 0;
          _this.m_btnRebuy = void 0;
          _this.m_groupTopRight = void 0;
          _this.m_btnRetrospect = void 0;
          _this.m_btnExpression = void 0;
          _this.m_groupBottomLeft = void 0;
          _this.m_btnChat = void 0;
          _this.m_groupBottomRight = void 0;
          _this.m_btnChip = void 0;
          return _this;
        }
        UI_TexasRoomMenuLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasRoomMenuLayer");
          obj.name = 'UI_TexasRoomMenuLayer';
          return obj;
        };
        var _proto = UI_TexasRoomMenuLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_btnMenu = this.getChild("btnMenu");
          this.m_btnAddon = this.getChild("btnAddon");
          this.m_groupTopLeft = this.getChild("groupTopLeft");
          this.m_btnRank = this.getChild("btnRank");
          this.m_btnRebuy = this.getChild("btnRebuy");
          this.m_groupTopRight = this.getChild("groupTopRight");
          this.m_btnRetrospect = this.getChild("btnRetrospect");
          this.m_btnExpression = this.getChild("btnExpression");
          this.m_groupBottomLeft = this.getChild("groupBottomLeft");
          this.m_btnChat = this.getChild("btnChat");
          this.m_groupBottomRight = this.getChild("groupBottomRight");
          this.m_btnChip = this.getChild("btnChip");
        };
        return UI_TexasRoomMenuLayer;
      }(FGUIComponentBase));
      UI_TexasRoomMenuLayer.URL = "ui://0fujvg4oo8dn1";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasTableInfoLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c35eaMcVL5Io6XRRJfPOU6J", "UI_TexasTableInfoLayer", undefined);
      var UI_TexasTableInfoLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasTableInfoLayer, _FGUIComponentBase);
        function UI_TexasTableInfoLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_emptyCtrl = void 0;
          _this.m_bgMask = void 0;
          _this.m_layerBg = void 0;
          _this.m_bg0 = void 0;
          _this.m_labelBlind = void 0;
          _this.m_labelPlayerCount = void 0;
          _this.m_iconPlayer = void 0;
          _this.m_layerTop = void 0;
          _this.m_bg1 = void 0;
          _this.m_labelPlayer = void 0;
          _this.m_labelBuyin = void 0;
          _this.m_labelWin = void 0;
          _this.m_layerTitle = void 0;
          _this.m_list = void 0;
          _this.m_loadingLayer = void 0;
          return _this;
        }
        UI_TexasTableInfoLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasTableInfoLayer");
          obj.name = 'UI_TexasTableInfoLayer';
          return obj;
        };
        var _proto = UI_TexasTableInfoLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_emptyCtrl = this.getController("emptyCtrl");
          this.m_bgMask = this.getChild("bgMask");
          this.m_layerBg = this.getChild("layerBg");
          this.m_bg0 = this.getChild("bg0");
          this.m_labelBlind = this.getChild("labelBlind");
          this.m_labelPlayerCount = this.getChild("labelPlayerCount");
          this.m_iconPlayer = this.getChild("iconPlayer");
          this.m_layerTop = this.getChild("layerTop");
          this.m_bg1 = this.getChild("bg1");
          this.m_labelPlayer = this.getChild("labelPlayer");
          this.m_labelBuyin = this.getChild("labelBuyin");
          this.m_labelWin = this.getChild("labelWin");
          this.m_layerTitle = this.getChild("layerTitle");
          this.m_list = this.getChild("list");
          this.m_loadingLayer = this.getChild("loadingLayer");
        };
        return UI_TexasTableInfoLayer;
      }(FGUIComponentBase));
      UI_TexasTableInfoLayer.URL = "ui://0fujvg4oga0y62";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasTableInfoLayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "053cdO4SSFA/7GriSWSNpAG", "UI_TexasTableInfoLayerItem", undefined);
      var UI_TexasTableInfoLayerItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasTableInfoLayerItem, _FGUIComponentBase);
        function UI_TexasTableInfoLayerItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_emptyCtrl = void 0;
          _this.m_bg0 = void 0;
          _this.m_line = void 0;
          _this.m_labelName = void 0;
          _this.m_labelBuyin = void 0;
          _this.m_labelWin = void 0;
          _this.m_labelTip = void 0;
          return _this;
        }
        UI_TexasTableInfoLayerItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasTableInfoLayerItem");
          obj.name = 'UI_TexasTableInfoLayerItem';
          return obj;
        };
        var _proto = UI_TexasTableInfoLayerItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_emptyCtrl = this.getController("emptyCtrl");
          this.m_bg0 = this.getChild("bg0");
          this.m_line = this.getChild("line");
          this.m_labelName = this.getChild("labelName");
          this.m_labelBuyin = this.getChild("labelBuyin");
          this.m_labelWin = this.getChild("labelWin");
          this.m_labelTip = this.getChild("labelTip");
        };
        return UI_TexasTableInfoLayerItem;
      }(FGUIComponentBase));
      UI_TexasTableInfoLayerItem.URL = "ui://0fujvg4oga0y63";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasTableLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4efc0eiujtC1q3vz/ekML/y", "UI_TexasTableLayer", undefined);
      var UI_TexasTableLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasTableLayer, _FGUIComponentBase);
        function UI_TexasTableLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_tableLoader = void 0;
          _this.m_tableLogo = void 0;
          _this.m_tableName = void 0;
          _this.m_mttName = void 0;
          _this.m_blinds = void 0;
          _this.m_tableID = void 0;
          _this.m_mainPot = void 0;
          _this.m_iconD = void 0;
          _this.m_sidePot0 = void 0;
          _this.m_sidePot1 = void 0;
          _this.m_sidePot2 = void 0;
          _this.m_sidePot3 = void 0;
          _this.m_groupSidePot0 = void 0;
          _this.m_sidePot4 = void 0;
          _this.m_sidePot5 = void 0;
          _this.m_sidePot6 = void 0;
          _this.m_sidePot7 = void 0;
          _this.m_groupSidePot1 = void 0;
          return _this;
        }
        UI_TexasTableLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasTableLayer");
          obj.name = 'UI_TexasTableLayer';
          return obj;
        };
        var _proto = UI_TexasTableLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_tableLoader = this.getChild("tableLoader");
          this.m_tableLogo = this.getChild("tableLogo");
          this.m_tableName = this.getChild("tableName");
          this.m_mttName = this.getChild("mttName");
          this.m_blinds = this.getChild("blinds");
          this.m_tableID = this.getChild("tableID");
          this.m_mainPot = this.getChild("mainPot");
          this.m_iconD = this.getChild("iconD");
          this.m_sidePot0 = this.getChild("sidePot0");
          this.m_sidePot1 = this.getChild("sidePot1");
          this.m_sidePot2 = this.getChild("sidePot2");
          this.m_sidePot3 = this.getChild("sidePot3");
          this.m_groupSidePot0 = this.getChild("groupSidePot0");
          this.m_sidePot4 = this.getChild("sidePot4");
          this.m_sidePot5 = this.getChild("sidePot5");
          this.m_sidePot6 = this.getChild("sidePot6");
          this.m_sidePot7 = this.getChild("sidePot7");
          this.m_groupSidePot1 = this.getChild("groupSidePot1");
        };
        return UI_TexasTableLayer;
      }(FGUIComponentBase));
      UI_TexasTableLayer.URL = "ui://0fujvg4oo8dn2";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasTableMainPot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4fbf6JGL5RBLpXhD6gwAZ4a", "UI_TexasTableMainPot", undefined);
      var UI_TexasTableMainPot = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasTableMainPot, _FGUIComponentBase);
        function UI_TexasTableMainPot() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_score = void 0;
          return _this;
        }
        UI_TexasTableMainPot.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasTableMainPot");
          obj.name = 'UI_TexasTableMainPot';
          return obj;
        };
        var _proto = UI_TexasTableMainPot.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_score = this.getChild("score");
        };
        return UI_TexasTableMainPot;
      }(FGUIComponentBase));
      UI_TexasTableMainPot.URL = "ui://0fujvg4odusav";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasTableSidePot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "835femIQqRA6Lw2m/uB9a5z", "UI_TexasTableSidePot", undefined);
      var UI_TexasTableSidePot = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasTableSidePot, _FGUIComponentBase);
        function UI_TexasTableSidePot() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_score = void 0;
          return _this;
        }
        UI_TexasTableSidePot.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasTableSidePot");
          obj.name = 'UI_TexasTableSidePot';
          return obj;
        };
        var _proto = UI_TexasTableSidePot.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_score = this.getChild("score");
        };
        return UI_TexasTableSidePot;
      }(FGUIComponentBase));
      UI_TexasTableSidePot.URL = "ui://0fujvg4oeyob27";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TexasTipLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d0df1hktQdHsoM66yGXADDU", "UI_TexasTipLayer", undefined);
      var UI_TexasTipLayer = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TexasTipLayer, _FGUIComponentBase);
        function UI_TexasTipLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_blindsTip = void 0;
          _this.m_moneyTip = void 0;
          _this.m_commonTip = void 0;
          return _this;
        }
        UI_TexasTipLayer.createInstance = function createInstance() {
          var obj = UIPackage.createObject("GamePlay", "TexasTipLayer");
          obj.name = 'UI_TexasTipLayer';
          return obj;
        };
        var _proto = UI_TexasTipLayer.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_blindsTip = this.getChild("blindsTip");
          this.m_moneyTip = this.getChild("moneyTip");
          this.m_commonTip = this.getChild("commonTip");
        };
        return UI_TexasTipLayer;
      }(FGUIComponentBase));
      UI_TexasTipLayer.URL = "ui://0fujvg4ohc925m";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TGPFreeGoldView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "93248RUoz5DJ7Mc1kPVueQI", "UI_TGPFreeGoldView", undefined);
      var UI_TGPFreeGoldView = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TGPFreeGoldView, _FGUIComponentBase);
        function UI_TGPFreeGoldView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_ImgLevel = void 0;
          _this.m_TextLevel = void 0;
          _this.m_btnLevelDesc = void 0;
          _this.m_TextTGPCnt = void 0;
          _this.m_BtnTGP = void 0;
          _this.m_BtnTask = void 0;
          _this.m_task_read_point = void 0;
          _this.m_BtnInvite = void 0;
          _this.m_TextTGPCur = void 0;
          _this.m_TextTGPMax = void 0;
          _this.m_NodeNum = void 0;
          return _this;
        }
        UI_TGPFreeGoldView.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "TGPFreeGoldView");
          obj.name = 'UI_TGPFreeGoldView';
          return obj;
        };
        var _proto = UI_TGPFreeGoldView.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_ImgLevel = this.getChild("ImgLevel");
          this.m_TextLevel = this.getChild("TextLevel");
          this.m_btnLevelDesc = this.getChild("btnLevelDesc");
          this.m_TextTGPCnt = this.getChild("TextTGPCnt");
          this.m_BtnTGP = this.getChild("BtnTGP");
          this.m_BtnTask = this.getChild("BtnTask");
          this.m_task_read_point = this.getChild("task_read_point");
          this.m_BtnInvite = this.getChild("BtnInvite");
          this.m_TextTGPCur = this.getChild("TextTGPCur");
          this.m_TextTGPMax = this.getChild("TextTGPMax");
          this.m_NodeNum = this.getChild("NodeNum");
        };
        return UI_TGPFreeGoldView;
      }(FGUIComponentBase));
      UI_TGPFreeGoldView.URL = "ui://vjmmgvukuwmwdb";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TGPLevelDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e3f89TWgJ1JqqOt/pc3Yqsq", "UI_TGPLevelDialog", undefined);
      var UI_TGPLevelDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TGPLevelDialog, _FGUIComponentBase);
        function UI_TGPLevelDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_LevelProgress = void 0;
          _this.m_CurLevel = void 0;
          _this.m_CurExp = void 0;
          _this.m_NextLevel = void 0;
          _this.m_table0 = void 0;
          _this.m_table1 = void 0;
          _this.m_table2 = void 0;
          _this.m_table3 = void 0;
          _this.m_table4 = void 0;
          _this.m_table5 = void 0;
          _this.m_list = void 0;
          _this.m_CurLevel0 = void 0;
          _this.m_CurLevel1 = void 0;
          _this.m_CurLevel2 = void 0;
          return _this;
        }
        UI_TGPLevelDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "TGPLevelDialog");
          obj.name = 'UI_TGPLevelDialog';
          return obj;
        };
        var _proto = UI_TGPLevelDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_LevelProgress = this.getChild("LevelProgress");
          this.m_CurLevel = this.getChild("CurLevel");
          this.m_CurExp = this.getChild("CurExp");
          this.m_NextLevel = this.getChild("NextLevel");
          this.m_table0 = this.getChild("table0");
          this.m_table1 = this.getChild("table1");
          this.m_table2 = this.getChild("table2");
          this.m_table3 = this.getChild("table3");
          this.m_table4 = this.getChild("table4");
          this.m_table5 = this.getChild("table5");
          this.m_list = this.getChild("list");
          this.m_CurLevel0 = this.getChild("CurLevel0");
          this.m_CurLevel1 = this.getChild("CurLevel1");
          this.m_CurLevel2 = this.getChild("CurLevel2");
        };
        return UI_TGPLevelDialog;
      }(FGUIComponentBase));
      UI_TGPLevelDialog.URL = "ui://vjmmgvuknayfeb";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TGPLevelItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2a7acQO921E54s4xOON9gHN", "UI_TGPLevelItem", undefined);
      var UI_TGPLevelItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TGPLevelItem, _FGUIComponentBase);
        function UI_TGPLevelItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_CurLevelControl = void 0;
          _this.m_title = void 0;
          _this.m_table1 = void 0;
          _this.m_table2 = void 0;
          _this.m_table3 = void 0;
          _this.m_table4 = void 0;
          _this.m_table5 = void 0;
          _this.m_ImgSelect = void 0;
          return _this;
        }
        UI_TGPLevelItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "TGPLevelItem");
          obj.name = 'UI_TGPLevelItem';
          return obj;
        };
        var _proto = UI_TGPLevelItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_CurLevelControl = this.getController("CurLevelControl");
          this.m_title = this.getChild("title");
          this.m_table1 = this.getChild("table1");
          this.m_table2 = this.getChild("table2");
          this.m_table3 = this.getChild("table3");
          this.m_table4 = this.getChild("table4");
          this.m_table5 = this.getChild("table5");
          this.m_ImgSelect = this.getChild("ImgSelect");
        };
        return UI_TGPLevelItem;
      }(FGUIComponentBase));
      UI_TGPLevelItem.URL = "ui://vjmmgvuknayfef";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_TouchCmpt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d89f2HrWJpNn4KG/TJUfgMM", "UI_TouchCmpt", undefined);
      var UI_TouchCmpt = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_TouchCmpt, _FGUIComponentBase);
        function UI_TouchCmpt() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bgimg = void 0;
          return _this;
        }
        UI_TouchCmpt.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "TouchCmpt");
          obj.name = 'UI_TouchCmpt';
          return obj;
        };
        var _proto = UI_TouchCmpt.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bgimg = this.getChild("bgimg");
        };
        return UI_TouchCmpt;
      }(FGUIComponentBase));
      UI_TouchCmpt.URL = "ui://vjmmgvuky3y2h0";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_UILaunch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ba944hBCepDlJrzWgQUw4/J", "UI_UILaunch", undefined);
      var UI_UILaunch = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_UILaunch, _FGUIComponentBase);
        function UI_UILaunch() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_text_loading = void 0;
          _this.m_text_progress = void 0;
          _this.m_text_version = void 0;
          _this.m_textLaunchErr = void 0;
          _this.m_groupLaunchErr = void 0;
          _this.m_progressBar = void 0;
          _this.m_loading = void 0;
          return _this;
        }
        UI_UILaunch.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Launch", "UILaunch");
          obj.name = 'UI_UILaunch';
          return obj;
        };
        var _proto = UI_UILaunch.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_text_loading = this.getChild("text_loading");
          this.m_text_progress = this.getChild("text_progress");
          this.m_text_version = this.getChild("text_version");
          this.m_textLaunchErr = this.getChild("textLaunchErr");
          this.m_groupLaunchErr = this.getChild("groupLaunchErr");
          this.m_progressBar = this.getChild("progressBar");
          this.m_loading = this.getTransition("loading");
        };
        return UI_UILaunch;
      }(FGUIComponentBase));
      UI_UILaunch.URL = "ui://xp19wm01p6qk0";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletBlueButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "982bdey+QNN6odzLZRaRvnY", "UI_WalletBlueButton", undefined);
      var UI_WalletBlueButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_WalletBlueButton, _fgui$GButton);
        function UI_WalletBlueButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bg = void 0;
          return _this;
        }
        UI_WalletBlueButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletBlueButton");
          obj.name = 'UI_WalletBlueButton';
          return obj;
        };
        var _proto = UI_WalletBlueButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
        };
        return UI_WalletBlueButton;
      }(GButton));
      UI_WalletBlueButton.URL = "ui://pfvxbnsikd15t";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c6cddeq7V9FRprNIHUykWfr", "UI_WalletComponent", undefined);
      var UI_WalletComponent = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletComponent, _FGUIComponentBase);
        function UI_WalletComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_icon = void 0;
          return _this;
        }
        UI_WalletComponent.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Public", "WalletComponent");
          obj.name = 'UI_WalletComponent';
          return obj;
        };
        var _proto = UI_WalletComponent.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_icon = this.getChild("icon");
        };
        return UI_WalletComponent;
      }(FGUIComponentBase));
      UI_WalletComponent.URL = "ui://xddh4ifdgb1abj";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletCopyButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "76ed23QkNVHB7gNSVnS8Qll", "UI_WalletCopyButton", undefined);
      var UI_WalletCopyButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_WalletCopyButton, _fgui$GButton);
        function UI_WalletCopyButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_isSelected = void 0;
          _this.m_bg = void 0;
          return _this;
        }
        UI_WalletCopyButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletCopyButton");
          obj.name = 'UI_WalletCopyButton';
          return obj;
        };
        var _proto = UI_WalletCopyButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_isSelected = this.getController("isSelected");
          this.m_bg = this.getChild("bg");
        };
        return UI_WalletCopyButton;
      }(GButton));
      UI_WalletCopyButton.URL = "ui://pfvxbnsikd15a";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletDepositPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "74407Hh6NJB755KEstdHI3F", "UI_WalletDepositPage", undefined);
      var UI_WalletDepositPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletDepositPage, _FGUIComponentBase);
        function UI_WalletDepositPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_topBg = void 0;
          _this.m_midBg = void 0;
          _this.m_addressBg = void 0;
          _this.m_qrcodeBg = void 0;
          _this.m_qrcodeBgStroke = void 0;
          _this.m_line1 = void 0;
          _this.m_shortcutUSDT = void 0;
          _this.m_shortcutUSDC = void 0;
          _this.m_btnSelect1 = void 0;
          _this.m_btnSelect2 = void 0;
          _this.m_qrCodeNode = void 0;
          _this.m_addressTitle = void 0;
          _this.m_addressValue = void 0;
          _this.m_btnCopy = void 0;
          _this.m_warnBg = void 0;
          return _this;
        }
        UI_WalletDepositPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletDepositPage");
          obj.name = 'UI_WalletDepositPage';
          return obj;
        };
        var _proto = UI_WalletDepositPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_topBg = this.getChild("topBg");
          this.m_midBg = this.getChild("midBg");
          this.m_addressBg = this.getChild("addressBg");
          this.m_qrcodeBg = this.getChild("qrcodeBg");
          this.m_qrcodeBgStroke = this.getChild("qrcodeBgStroke");
          this.m_line1 = this.getChild("line1");
          this.m_shortcutUSDT = this.getChild("shortcutUSDT");
          this.m_shortcutUSDC = this.getChild("shortcutUSDC");
          this.m_btnSelect1 = this.getChild("btnSelect1");
          this.m_btnSelect2 = this.getChild("btnSelect2");
          this.m_qrCodeNode = this.getChild("qrCodeNode");
          this.m_addressTitle = this.getChild("addressTitle");
          this.m_addressValue = this.getChild("addressValue");
          this.m_btnCopy = this.getChild("btnCopy");
          this.m_warnBg = this.getChild("warnBg");
        };
        return UI_WalletDepositPage;
      }(FGUIComponentBase));
      UI_WalletDepositPage.URL = "ui://pfvxbnsikd150";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletDetailsPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4615dbvd49LKJi1wf3mSbiH", "UI_WalletDetailsPage", undefined);
      var UI_WalletDetailsPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletDetailsPage, _FGUIComponentBase);
        function UI_WalletDetailsPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_amountState = void 0;
          _this.m_stateTipControl = void 0;
          _this.m_type = void 0;
          _this.m_frame = void 0;
          _this.m_time = void 0;
          _this.m_address = void 0;
          _this.m_amount = void 0;
          return _this;
        }
        UI_WalletDetailsPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletDetailsPage");
          obj.name = 'UI_WalletDetailsPage';
          return obj;
        };
        var _proto = UI_WalletDetailsPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_amountState = this.getController("amountState");
          this.m_stateTipControl = this.getController("stateTipControl");
          this.m_type = this.getController("type");
          this.m_frame = this.getChild("frame");
          this.m_time = this.getChild("time");
          this.m_address = this.getChild("address");
          this.m_amount = this.getChild("amount");
        };
        return UI_WalletDetailsPage;
      }(FGUIComponentBase));
      UI_WalletDetailsPage.URL = "ui://pfvxbnsikd15m";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletGroup.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "93c3dAIhxdP/phUvHDnZP8r", "UI_WalletGroup", undefined);
      var UI_WalletGroup = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletGroup, _FGUIComponentBase);
        function UI_WalletGroup() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_BtnAdd = void 0;
          _this.m_WalletValue = void 0;
          return _this;
        }
        UI_WalletGroup.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Lobby", "WalletGroup");
          obj.name = 'UI_WalletGroup';
          return obj;
        };
        var _proto = UI_WalletGroup.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_BtnAdd = this.getChild("BtnAdd");
          this.m_WalletValue = this.getChild("WalletValue");
        };
        return UI_WalletGroup;
      }(FGUIComponentBase));
      UI_WalletGroup.URL = "ui://vjmmgvukgb1a5q";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletHistoryItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4a9161qmpFPIo3X5z3l2sQD", "UI_WalletHistoryItem", undefined);
      var UI_WalletHistoryItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletHistoryItem, _FGUIComponentBase);
        function UI_WalletHistoryItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_amountState = void 0;
          _this.m_type = void 0;
          _this.m_stateTipControl = void 0;
          _this.m_line = void 0;
          _this.m_title = void 0;
          _this.m_time = void 0;
          _this.m_stateTip = void 0;
          _this.m_amount = void 0;
          return _this;
        }
        UI_WalletHistoryItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletHistoryItem");
          obj.name = 'UI_WalletHistoryItem';
          return obj;
        };
        var _proto = UI_WalletHistoryItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_amountState = this.getController("amountState");
          this.m_type = this.getController("type");
          this.m_stateTipControl = this.getController("stateTipControl");
          this.m_line = this.getChild("line");
          this.m_title = this.getChild("title");
          this.m_time = this.getChild("time");
          this.m_stateTip = this.getChild("stateTip");
          this.m_amount = this.getChild("amount");
        };
        return UI_WalletHistoryItem;
      }(FGUIComponentBase));
      UI_WalletHistoryItem.URL = "ui://pfvxbnsikd15n";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletHistoryPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "58e9fhW0RxKsLej0KPcN54/", "UI_WalletHistoryPage", undefined);
      var UI_WalletHistoryPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletHistoryPage, _FGUIComponentBase);
        function UI_WalletHistoryPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_isEmpty = void 0;
          _this.m_frame = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_WalletHistoryPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletHistoryPage");
          obj.name = 'UI_WalletHistoryPage';
          return obj;
        };
        var _proto = UI_WalletHistoryPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_isEmpty = this.getController("isEmpty");
          this.m_frame = this.getChild("frame");
          this.m_list = this.getChild("list");
        };
        return UI_WalletHistoryPage;
      }(FGUIComponentBase));
      UI_WalletHistoryPage.URL = "ui://pfvxbnsikd15o";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletSelectButton1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1d887Nv1uNDJ6Ff2w/b4GZl", "UI_WalletSelectButton1", undefined);
      var UI_WalletSelectButton1 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_WalletSelectButton1, _fgui$GButton);
        function UI_WalletSelectButton1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_showArrow = void 0;
          _this.m_type = void 0;
          _this.m_bg = void 0;
          _this.m_name = void 0;
          return _this;
        }
        UI_WalletSelectButton1.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletSelectButton1");
          obj.name = 'UI_WalletSelectButton1';
          return obj;
        };
        var _proto = UI_WalletSelectButton1.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_showArrow = this.getController("showArrow");
          this.m_type = this.getController("type");
          this.m_bg = this.getChild("bg");
          this.m_name = this.getChild("name");
        };
        return UI_WalletSelectButton1;
      }(GButton));
      UI_WalletSelectButton1.URL = "ui://pfvxbnsikd155";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletSelectButton2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "90881D0TQ9G15nyDvcRsJVD", "UI_WalletSelectButton2", undefined);
      var UI_WalletSelectButton2 = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_WalletSelectButton2, _fgui$GButton);
        function UI_WalletSelectButton2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_showArrow = void 0;
          _this.m_bg = void 0;
          _this.m_name = void 0;
          return _this;
        }
        UI_WalletSelectButton2.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletSelectButton2");
          obj.name = 'UI_WalletSelectButton2';
          return obj;
        };
        var _proto = UI_WalletSelectButton2.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_showArrow = this.getController("showArrow");
          this.m_bg = this.getChild("bg");
          this.m_name = this.getChild("name");
        };
        return UI_WalletSelectButton2;
      }(GButton));
      UI_WalletSelectButton2.URL = "ui://pfvxbnsikd159";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletSelectCurrencyDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fb02fsmrJVNm61srg9CGG9/", "UI_WalletSelectCurrencyDialog", undefined);
      var UI_WalletSelectCurrencyDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletSelectCurrencyDialog, _FGUIComponentBase);
        function UI_WalletSelectCurrencyDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_WalletSelectCurrencyDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletSelectCurrencyDialog");
          obj.name = 'UI_WalletSelectCurrencyDialog';
          return obj;
        };
        var _proto = UI_WalletSelectCurrencyDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_list = this.getChild("list");
        };
        return UI_WalletSelectCurrencyDialog;
      }(FGUIComponentBase));
      UI_WalletSelectCurrencyDialog.URL = "ui://pfvxbnsikd15f";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletSelectNetworkDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6580ebI+SRBo60oqsC2VAZY", "UI_WalletSelectNetworkDialog", undefined);
      var UI_WalletSelectNetworkDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletSelectNetworkDialog, _FGUIComponentBase);
        function UI_WalletSelectNetworkDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_list = void 0;
          return _this;
        }
        UI_WalletSelectNetworkDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletSelectNetworkDialog");
          obj.name = 'UI_WalletSelectNetworkDialog';
          return obj;
        };
        var _proto = UI_WalletSelectNetworkDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_list = this.getChild("list");
        };
        return UI_WalletSelectNetworkDialog;
      }(FGUIComponentBase));
      UI_WalletSelectNetworkDialog.URL = "ui://pfvxbnsikd15i";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletShortcutButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, GButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
      GButton = module.GButton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d0a14+rlsZPYbZ68k7HyF1+", "UI_WalletShortcutButton", undefined);
      var UI_WalletShortcutButton = exports('default', /*#__PURE__*/function (_fgui$GButton) {
        _inheritsLoose(UI_WalletShortcutButton, _fgui$GButton);
        function UI_WalletShortcutButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _fgui$GButton.call.apply(_fgui$GButton, [this].concat(args)) || this;
          _this.m_bg = void 0;
          return _this;
        }
        UI_WalletShortcutButton.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletShortcutButton");
          obj.name = 'UI_WalletShortcutButton';
          return obj;
        };
        var _proto = UI_WalletShortcutButton.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
        };
        return UI_WalletShortcutButton;
      }(GButton));
      UI_WalletShortcutButton.URL = "ui://pfvxbnsikd153";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletWarnItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "329cbN1sMhG4qT54EiMiyqC", "UI_WalletWarnItem", undefined);
      var UI_WalletWarnItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletWarnItem, _FGUIComponentBase);
        function UI_WalletWarnItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_bg = void 0;
          _this.m_icon = void 0;
          _this.m_title = void 0;
          return _this;
        }
        UI_WalletWarnItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletWarnItem");
          obj.name = 'UI_WalletWarnItem';
          return obj;
        };
        var _proto = UI_WalletWarnItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_bg = this.getChild("bg");
          this.m_icon = this.getChild("icon");
          this.m_title = this.getChild("title");
        };
        return UI_WalletWarnItem;
      }(FGUIComponentBase));
      UI_WalletWarnItem.URL = "ui://pfvxbnsikd15d";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletWithdrawConfirmDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "843d96t5IRBeq0+rZbUph8Z", "UI_WalletWithdrawConfirmDialog", undefined);
      var UI_WalletWithdrawConfirmDialog = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletWithdrawConfirmDialog, _FGUIComponentBase);
        function UI_WalletWithdrawConfirmDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_amount = void 0;
          _this.m_titleNetwork = void 0;
          _this.m_network = void 0;
          _this.m_titleWithdrawAmount = void 0;
          _this.m_withdrawAmount = void 0;
          _this.m_titleFee = void 0;
          _this.m_fee = void 0;
          _this.m_withdrawAddress = void 0;
          return _this;
        }
        UI_WalletWithdrawConfirmDialog.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletWithdrawConfirmDialog");
          obj.name = 'UI_WalletWithdrawConfirmDialog';
          return obj;
        };
        var _proto = UI_WalletWithdrawConfirmDialog.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_amount = this.getChild("amount");
          this.m_titleNetwork = this.getChild("titleNetwork");
          this.m_network = this.getChild("network");
          this.m_titleWithdrawAmount = this.getChild("titleWithdrawAmount");
          this.m_withdrawAmount = this.getChild("withdrawAmount");
          this.m_titleFee = this.getChild("titleFee");
          this.m_fee = this.getChild("fee");
          this.m_withdrawAddress = this.getChild("withdrawAddress");
        };
        return UI_WalletWithdrawConfirmDialog;
      }(FGUIComponentBase));
      UI_WalletWithdrawConfirmDialog.URL = "ui://pfvxbnsikd15p";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletWithdrawItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "aac6cH8uWtDnYo5DXy76s03", "UI_WalletWithdrawItem", undefined);
      var UI_WalletWithdrawItem = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletWithdrawItem, _FGUIComponentBase);
        function UI_WalletWithdrawItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_isAddressErr = void 0;
          _this.m_isAmountErr = void 0;
          _this.m_inputAddress = void 0;
          _this.m_addressTip = void 0;
          _this.m_inputAmount = void 0;
          _this.m_amountTip = void 0;
          _this.m_avaliableAmout = void 0;
          _this.m_textCreditedAmount = void 0;
          _this.m_textFee = void 0;
          _this.m_btnConfirm = void 0;
          return _this;
        }
        UI_WalletWithdrawItem.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletWithdrawItem");
          obj.name = 'UI_WalletWithdrawItem';
          return obj;
        };
        var _proto = UI_WalletWithdrawItem.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_isAddressErr = this.getController("isAddressErr");
          this.m_isAmountErr = this.getController("isAmountErr");
          this.m_inputAddress = this.getChild("inputAddress");
          this.m_addressTip = this.getChild("addressTip");
          this.m_inputAmount = this.getChild("inputAmount");
          this.m_amountTip = this.getChild("amountTip");
          this.m_avaliableAmout = this.getChild("avaliableAmout");
          this.m_textCreditedAmount = this.getChild("textCreditedAmount");
          this.m_textFee = this.getChild("textFee");
          this.m_btnConfirm = this.getChild("btnConfirm");
        };
        return UI_WalletWithdrawItem;
      }(FGUIComponentBase));
      UI_WalletWithdrawItem.URL = "ui://pfvxbnsikd15s";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletWithdrawPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c9212v/gcdIqY2bRYLkpphd", "UI_WalletWithdrawPage", undefined);
      var UI_WalletWithdrawPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletWithdrawPage, _FGUIComponentBase);
        function UI_WalletWithdrawPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_midBg = void 0;
          _this.m_btnSelect1 = void 0;
          _this.m_btnSelect2 = void 0;
          _this.m_withdrawGroup = void 0;
          return _this;
        }
        UI_WalletWithdrawPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletWithdrawPage");
          obj.name = 'UI_WalletWithdrawPage';
          return obj;
        };
        var _proto = UI_WalletWithdrawPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_midBg = this.getChild("midBg");
          this.m_btnSelect1 = this.getChild("btnSelect1");
          this.m_btnSelect2 = this.getChild("btnSelect2");
          this.m_withdrawGroup = this.getChild("withdrawGroup");
        };
        return UI_WalletWithdrawPage;
      }(FGUIComponentBase));
      UI_WalletWithdrawPage.URL = "ui://pfvxbnsikd15r";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UI_WalletWithdrawSuccessPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './FGUIComponentBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, UIPackage, FGUIComponentBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      FGUIComponentBase = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "07ca8f60X9NRYZfaogSHBqJ", "UI_WalletWithdrawSuccessPage", undefined);
      var UI_WalletWithdrawSuccessPage = exports('default', /*#__PURE__*/function (_FGUIComponentBase) {
        _inheritsLoose(UI_WalletWithdrawSuccessPage, _FGUIComponentBase);
        function UI_WalletWithdrawSuccessPage() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _FGUIComponentBase.call.apply(_FGUIComponentBase, [this].concat(args)) || this;
          _this.m_frame = void 0;
          _this.m_btnDetails = void 0;
          return _this;
        }
        UI_WalletWithdrawSuccessPage.createInstance = function createInstance() {
          var obj = UIPackage.createObject("Wallet", "WalletWithdrawSuccessPage");
          obj.name = 'UI_WalletWithdrawSuccessPage';
          return obj;
        };
        var _proto = UI_WalletWithdrawSuccessPage.prototype;
        _proto.onConstruct = function onConstruct() {
          this.m_frame = this.getChild("frame");
          this.m_btnDetails = this.getChild("btnDetails");
        };
        return UI_WalletWithdrawSuccessPage;
      }(FGUIComponentBase));
      UI_WalletWithdrawSuccessPage.URL = "ui://pfvxbnsikd15q";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UITools.ts", ['cc', './fairygui.mjs'], function (exports) {
  var cclegacy, Node, isValid, Tween, Label, Widget, director, UITransform, UIOpacity, Layers, ScrollType, GList, GObject, GTween, GComponent, GRoot, RelationType;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      isValid = module.isValid;
      Tween = module.Tween;
      Label = module.Label;
      Widget = module.Widget;
      director = module.director;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      Layers = module.Layers;
    }, function (module) {
      ScrollType = module.ScrollType;
      GList = module.GList;
      GObject = module.GObject;
      GTween = module.GTween;
      GComponent = module.GComponent;
      GRoot = module.GRoot;
      RelationType = module.RelationType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d335bvmJBhBqah/j+3DJbZ2", "UITools", undefined);
      var UITools = exports('UITools', /*#__PURE__*/function () {
        function UITools() {}
        /**
         * scrollPane 优化，针对横向的页面模式，实时隐藏显示区域之外的页面
         * 虚拟列表和循环列表不适用这个优化
         * @param scrollPane
         * @returns
         */
        UITools.optimizationScrollPane = function optimizationScrollPane(scrollPane) {
          var pane = scrollPane;
          if (pane._optimization_ed) return;
          var flag = pane._pageMode && pane._scrollType == ScrollType.Horizontal;
          if (!flag) return; // 优化仅针对横向的页面模式
          var owner = pane._owner;
          if (owner instanceof GList && (owner._virtual || owner._loop)) return; // 虚拟列表和循环列表不适用这个优化
          var container = pane._container;
          var func = function func(type) {
            if (type & Node.TransformBit.POSITION) {
              var num = (0 - container.position.x) / owner.width;
              var atvIdxs = [Math.floor(num), Math.ceil(num)];
              for (var i = 0; i < owner._children.length; i++) {
                var item = owner._children[i];
                var visible = atvIdxs.includes(i);
                if (item.visible != visible) {
                  item.visible = visible;
                }
              }
            }
          };
          func(1);
          container.on(Node.EventType.TRANSFORM_CHANGED, func, this);
          pane._optimization_ed = true;
        };
        UITools.stopActionsRecursion = function stopActionsRecursion(obj) {
          if (obj instanceof Node) {
            if (!isValid(obj, true)) return;
            for (var i = 0, len = obj.children.length; i < len; i++) {
              var child = obj.children[i];
              Tween.stopAllByTarget(child);
              this.stopActionsRecursion(child);
            }
          } else if (obj instanceof GObject) {
            if (obj) {
              GTween.kill(obj);
              Tween.stopAllByTarget(obj);
              if (isValid(obj.node)) {
                Tween.stopAllByTarget(obj.node);
              }
              if (obj instanceof GComponent) {
                var cnt = obj._children.length;
                for (var _i = cnt - 1; _i >= 0; --_i) {
                  var _child = obj._children[_i];
                  if (_child instanceof GComponent) {
                    this.stopActionsRecursion(_child);
                  } else {
                    GTween.kill(_child);
                  }
                  Tween.stopAllByTarget(_child);
                  if (isValid(_child.node)) {
                    Tween.stopAllByTarget(_child.node);
                  }
                }
              }
            }
          }
        };
        UITools.forceUpdateRecursion = function forceUpdateRecursion(node) {
          if (!isValid(node, true)) return;
          if (node.children && node.children.length > 0) {
            for (var i = 0, len = node.children.length; i < len; i++) {
              var child = node.children[i];
              this.forceUpdateRecursion(child);
            }
          }
          var label = node.getComponent(Label);
          if (label) {
            label.updateRenderData(true);
          }
          // let layout = node.getComponent(Layout);
          // if (layout) {
          //     layout.updateLayout();
          // }
          // let widget = node.getComponent(Widget);
          // if (widget) {
          //     widget.updateAlignment();
          // }
          // let gobj = node['$gobj'];
          // if (gobj) {
          //     if (gobj instanceof fgui.GGroup) {
          //         gobj.ensureSizeCorrect();
          //         gobj.ensureBoundsCorrect();
          //         if (gobj.relations) {
          //             gobj.relations.ensureRelationsSizeCorrect();
          //         }
          //     } else if (gobj instanceof fgui.GObject) {
          //         gobj.ensureSizeCorrect();
          //         if (gobj.relations) {
          //             gobj.relations.ensureRelationsSizeCorrect();
          //         }
          //         if (gobj.group) {
          //             gobj.group.ensureSizeCorrect();
          //             gobj.group.ensureBoundsCorrect();
          //             if (gobj.group.relations) {
          //                 gobj.group.relations.ensureRelationsSizeCorrect();
          //             }
          //         }
          //     }
          // }
        }

        /**
         * 屏幕适配
         * @param obj 需要适配的节点
         * @param hasNotch 是否刘海屏
         * @param notchHeight 刘海高度
         * @param fixType 适配类型，1：顶部，2：左边，3：右边
         * @returns
         */;
        UITools.screenFix = function screenFix(obj, hasNotch, notchHeight, fixType) {
          if (obj instanceof Node) {
            if (!isValid(obj, true)) return;
            var widget = obj.getComponent(Widget);
            if (!widget) {
              widget = obj.addComponent(Widget);
            }
            var scene = director.getScene();
            widget.target = scene.getChildByName('Canvas');
            if (hasNotch) {
              switch (fixType) {
                case 1:
                  {
                    widget.top = notchHeight;
                    widget.left = 0;
                    widget.right = 0;
                    widget.bottom = 0;
                  }
                  break;
                case 2:
                  {
                    widget.top = 0;
                    widget.left = notchHeight;
                    widget.right = 0;
                    widget.bottom = 0;
                  }
                  break;
                case 3:
                  {
                    widget.top = 0;
                    widget.left = 0;
                    widget.right = notchHeight;
                    widget.bottom = 0;
                  }
                  break;
              }
            }
            widget.horizontalCenter = 0;
            this.forceUpdateRecursion(obj);
          } else {
            var r;
            var groot = GRoot.getInstance(obj);
            if (obj._parent) {
              r = obj.parent;
            } else {
              r = groot;
            }
            if (hasNotch) {
              switch (fixType) {
                case 1:
                  {
                    var height = groot.height - notchHeight;
                    obj.setSize(groot.width, height);
                    obj.setPosition((r.width - obj._width) / 2, r.height - height);
                    obj.addRelation(r, RelationType.Center_Center);
                    obj.addRelation(r, RelationType.Top_Top);
                    obj.addRelation(r, RelationType.Bottom_Bottom);
                  }
                  break;
                case 2:
                  {
                    var width = groot.width - notchHeight;
                    obj.setSize(width, groot.height);
                    obj.setPosition(r.width - width, (r.height - obj._height) / 2);
                    obj.addRelation(r, RelationType.Center_Center);
                    obj.addRelation(r, RelationType.Left_Left);
                    obj.addRelation(r, RelationType.Right_Right);
                  }
                  break;
                case 3:
                  {
                    var _width = groot.width - notchHeight;
                    obj.setSize(_width, groot.height);
                    obj.setPosition(0, (r.height - obj._height) / 2);
                    obj.addRelation(r, RelationType.Center_Center);
                    obj.addRelation(r, RelationType.Left_Left);
                    obj.addRelation(r, RelationType.Right_Right);
                  }
                  break;
              }
            } else {
              obj.setSize(groot.width, groot.height);
              obj.setPosition((r.width - obj._width) / 2, (r.height - obj._height) / 2);
              obj.addRelation(r, RelationType.Center_Center);
              obj.addRelation(r, RelationType.Middle_Middle);
            }
          }
        };
        UITools.getUITransform = function getUITransform(node) {
          return node == null ? void 0 : node.getComponent(UITransform);
        };
        UITools.convertToWorldSpaceAR = function convertToWorldSpaceAR(node, pos) {
          var _this$getUITransform;
          return (_this$getUITransform = this.getUITransform(node)) == null ? void 0 : _this$getUITransform.convertToWorldSpaceAR(pos);
        };
        UITools.convertToNodeSpaceAR = function convertToNodeSpaceAR(node, pos) {
          var _this$getUITransform2;
          return (_this$getUITransform2 = this.getUITransform(node)) == null ? void 0 : _this$getUITransform2.convertToNodeSpaceAR(pos);
        };
        UITools.convertToOtherNodeSpaceAR = function convertToOtherNodeSpaceAR(nodeSrc, nodeDst, pos) {
          var wPos = this.convertToWorldSpaceAR(nodeSrc, pos);
          if (wPos) {
            return this.convertToNodeSpaceAR(nodeDst, wPos);
          }
        };
        UITools.getContentSize = function getContentSize(node) {
          var _this$getUITransform3;
          return (_this$getUITransform3 = this.getUITransform(node)) == null ? void 0 : _this$getUITransform3.contentSize;
        };
        UITools.setContentSize = function setContentSize(node, contentSize) {
          var _this$getUITransform4;
          return (_this$getUITransform4 = this.getUITransform(node)) == null ? void 0 : _this$getUITransform4.setContentSize(contentSize);
        };
        UITools.geAnchorPoint = function geAnchorPoint(node) {
          var _this$getUITransform5;
          return (_this$getUITransform5 = this.getUITransform(node)) == null ? void 0 : _this$getUITransform5.anchorPoint;
        };
        UITools.setAnchorPoint = function setAnchorPoint(node, x, y) {
          var component = this.getUITransform(node);
          if (component) {
            if (!!x || x == 0) {
              component.anchorX = x;
            }
            if (!!y || y == 0) {
              component.anchorX = y;
            }
          }
        };
        UITools.getUIOpacity = function getUIOpacity(node) {
          return node == null ? void 0 : node.getComponent(UIOpacity);
        };
        UITools.getOpacity = function getOpacity(node) {
          var _this$getUIOpacity;
          return (_this$getUIOpacity = this.getUIOpacity(node)) == null ? void 0 : _this$getUIOpacity.opacity;
        };
        UITools.setOpacity = function setOpacity(node, opacity) {
          var component = this.getUIOpacity(node);
          if (component) {
            component.opacity = opacity;
          }
        };
        UITools.addChildAt = function addChildAt(parent, child, siblingIndex) {
          if (siblingIndex === void 0) {
            siblingIndex = undefined;
          }
          child.parent = parent;
          if (siblingIndex != undefined) {
            child.setSiblingIndex(siblingIndex);
          }
        };
        UITools.setNodeLayerRecursion = function setNodeLayerRecursion(node, layerName) {
          var rootNode;
          if (node instanceof GObject) {
            if (node.node) {
              rootNode = node.node;
            }
          } else {
            rootNode = node;
          }
          if (!rootNode) return;
          var targetLayerIndex = Layers.nameToLayer(layerName);
          if (targetLayerIndex == undefined || targetLayerIndex == null) return;
          if (targetLayerIndex < 0) return;
          if (rootNode.children.length > 0) {
            for (var i = 0; i < rootNode.children.length; i++) {
              var child = rootNode.children[i];
              this.setNodeLayerRecursion(child, layerName);
            }
          }
          rootNode.layer = targetLayerIndex;
        };
        return UITools;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './LanguageManage.ts', './GameConst.ts', './GameConfig.ts'], function (exports) {
  var _createClass, cclegacy, tween, sys, Node, bezier, UIPackage, LanguageManager, GameConst, GameConfig;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      sys = module.sys;
      Node = module.Node;
      bezier = module.bezier;
    }, function (module) {
      UIPackage = module.UIPackage;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      GameConfig = module.GameConfig;
    }],
    execute: function () {
      cclegacy._RF.push({}, "16527S8DSVADImuTcHzJC2S", "Utils", undefined);
      function fill(z, w, s) {
        w = parseInt(w || 0);
        s = String(s);
        z = String(z);
        var c = w - s.length;
        while (c > 0 && z.length) {
          s = String(z) + s;
          c--;
        }
        return s;
      }
      var Utils = exports('Utils', /*#__PURE__*/function () {
        function Utils() {}
        Utils.delayCall = function delayCall(time, callback, target) {
          if (target.isValid) {
            tween(target).delay(time).call(callback).start();
          }
        };
        Utils.createUUID = function createUUID() {
          var timestamp = sys.now();
          var perforNow = typeof performance !== 'undefined' && performance.now && performance.now() * 1000 || 0;
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var random = Math.random() * 16;
            if (timestamp > 0) {
              random = (timestamp + random) % 16 | 0;
              timestamp = Math.floor(timestamp / 16);
            } else {
              random = (perforNow + random) % 16 | 0;
              perforNow = Math.floor(perforNow / 16);
            }
            return (c === 'x' ? random : random & 0x3 | 0x8).toString(16);
          });
        };
        Utils.objectClone = function objectClone(obj) {
          if (obj === null) return null;
          if (typeof obj !== 'object') return obj;
          // if (obj.constructor === Date) return new Date(obj);
          var newObj = new obj.constructor(); // 保持继承链，pb传过来的数据，克隆时需要保持继承链，因为如果默认值有效的话其实是在原型链中取的
          for (var _key in obj) {
            // if (obj.hasOwnProperty(key)) {   //不遍历其原型链上的属性
            //     let val = obj[key];
            // }
            newObj[_key] = this.objectClone(obj[_key]); // 使用arguments.callee解除与函数名的耦合
          }

          return newObj;
        };
        Utils.formatStr = function formatStr(fmt) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          return fmt.replace(/%(0{0,1})(\d*)(\.{0,1})(\d*)([sdfj])/g, function (match) {
            for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
              args2[_key3 - 1] = arguments[_key3];
            }
            //
            var z = args2[0],
              w = args2[1],
              d = args2[2],
              p = args2[3],
              s = args2[4];
            switch (s) {
              case 's':
                {
                  var v = String(args.shift());
                  v = fill(z || ' ', w || 0, v);
                  return v;
                }
              case 'd':
                {
                  var _v = Number(args.shift());
                  _v = fill(z || ' ', w, _v);
                  return _v;
                }
              case 'f':
                {
                  var _v2 = Number(args.shift());
                  if (p) {
                    _v2 = _v2.toFixed(p);
                  }
                  _v2 = String(_v2);
                  if (w) {
                    var i = _v2.indexOf('.');
                    if (i >= 0) {
                      // 有小数
                      _v2 = fill(z || ' ', w, _v2.substr(0, i)) + _v2.substr(i);
                    } else {
                      _v2 = fill(z || ' ', w, _v2);
                    }
                  }
                  return _v2;
                }
              case 'j':
                {
                  var _v3 = JSON.stringify(args.shift());
                  return _v3;
                }
              default:
                return match;
            }
          });
        };
        Utils.formatBBNum = function formatBBNum(value, smallBlind) {
          var number = Math.abs(value * 0.5 / smallBlind);
          return this.formatDoubleValue(number);
        };
        Utils.isPositiveInteger = function isPositiveInteger(str, strlen) {
          if (!str || str.length == 0) {
            return false;
          }
          if (!this.regPositiveInteger.test(str)) {
            return false;
          }
          if (arguments.length == 2) {
            if (str.length != strlen) {
              return false;
            }
          }
          return true;
        }

        /**
         * 由数字、英文字母字符串，且必须包含数字和字母，长度在 6 到 16 位之间
         * @param str
         * @returns
         */;
        Utils.isPassWordEnable = function isPassWordEnable(str) {
          return str && str.length >= 6 && str.length <= 16 && this.regPasseord.test(str);
        };
        Utils.isPhoneNumberEnable = function isPhoneNumberEnable(str) {
          return this.regPhoneNumber.test(str) || this.spPhoneNumber.test(str);
        };
        Utils.isEmailEnable = function isEmailEnable(str) {
          return str && this.regEmail.test(str);
        };
        /**
         * @description 是否频繁点击
         * @tag 判断重点的一个id，用于区分不同时机
         * @duration 少于该时长即认为发生了快速点击（毫秒）
         * @return 快速点击的次数
         **/
        Utils.getQuickClick = function getQuickClick(tag, duration) {
          if (tag === void 0) {
            tag = 'default';
          }
          if (duration === void 0) {
            duration = 500;
          }
          if (!this.clickTime) this.clickTime = {};
          if (this.clickTime[tag] == undefined) this.clickTime[tag] = {
            time: 0,
            count: 0
          };
          var item = this.clickTime[tag];
          var now = sys.now();
          var gapTime = now - item.time;
          if (gapTime < duration) {
            item.count++;
          } else {
            item.count = 0;
          }
          item.time = now;
          return item.count;
        }

        /**
         * 打乱数组的顺序
         * @param arr
         * @returns
         */;
        Utils.shuffleArray = function shuffleArray(arr) {
          var array = arr.concat();
          var m = array.length;
          var t;
          var i;
          while (m) {
            i = Math.floor(Math.random() * m--);
            t = array[m];
            array[m] = array[i];
            array[i] = t;
          }
          return array;
        }

        /**
         * 概率执行 做或者不做
         * @param ratio 执行概率0~1
         */;
        Utils.toBeOrNotToBe = function toBeOrNotToBe(ratio) {
          return Math.random() < ratio;
        }

        /**
         * 当前本地时间戳
         */;
        Utils.setServerTimestamp = function setServerTimestamp(timestamp) {
          this.serverTimeDiff = timestamp * 1000 - this.curLocalTimestamp;
        }

        /**
         * 当前服务器时间戳
         */;
        /**
         * 将玩家昵称转换为显示格式
         * @param str
         * @param charNum 总长度
         * @param pending 尾部拼接的字符
         * @returns
         */
        Utils.formatDisplayNickName = function formatDisplayNickName(str, charNum, pending) {
          if (charNum === void 0) {
            charNum = 13;
          }
          if (pending === void 0) {
            pending = '...';
          }
          if (str && str.length > charNum) {
            return "" + str.substring(0, charNum - pending.length) + pending;
          } else {
            return str;
          }
        }

        /**
         * @description 格式化成K,M,B,T计数单位
         * @param data 传入数值，支持科学计数法
         * @param point 精确小数点位数 默认为2位
         * @param bUSA 是否使用 $ 前缀
         * @param sign 是否使用正负号
         */;
        Utils.toFormat = function toFormat(data, point, bUSA, sign) {
          if (point === void 0) {
            point = 2;
          }
          if (bUSA === void 0) {
            bUSA = false;
          }
          if (sign === void 0) {
            sign = false;
          }
          var formatDateZero = function formatDateZero(d, m, p) {
            if (p == 0) {
              d = Math.floor(d); //禁止值四舍五入
            }

            var dd = d.toFixed(d % m == 0 ? 0 : p);
            return Utils.toNonExponential(parseFloat(dd)).toString();
          };
          var K = 1000;
          var scales = {
            K: {
              min: K * 100,
              unit: K
            },
            M: {
              min: K * K,
              unit: K * K
            },
            B: {
              min: K * K * K,
              unit: K * K * K
            },
            T: {
              min: K * K * K * K,
              unit: K * K * K
            }
          };
          var units = ['K', 'M', 'B', 'T'];
          var unit = '';
          var numberString = '';
          var tempValue = 0;
          var flag = data < 0 ? '-' : sign ? '+' : '';
          if (data == 0) flag = '';
          data = Math.abs(data);
          if (data < scales['K'].min) {
            numberString = formatDateZero(data, 1, point);
          } else {
            for (var i = units.length - 1; i >= 0; i--) {
              var scale = scales[units[i]];
              tempValue = data / scale.unit;
              if (tempValue >= 1) {
                numberString = formatDateZero(tempValue, scale.unit, point);
                unit = units[i];
                break;
              }
            }
          }
          numberString = this.getThousandShow(numberString);
          var usaflag = bUSA ? '$' : '';
          return "" + flag + usaflag + numberString + unit;
        };
        Utils.getDisplayNumber = function getDisplayNumber(num, sign, bTenK) {
          if (sign === void 0) {
            sign = false;
          }
          if (bTenK === void 0) {
            bTenK = true;
          }
          if (!num) return '0';
          return this.getDisplayNumber0(num, sign, bTenK);
        };
        Utils.getThousandShow = function getThousandShow(num) {
          var formatted;
          if (typeof num == 'number') {
            formatted = Math.floor(num).toString();
          } else {
            formatted = num;
          }
          var reg = /^(-?\d+)(\d{3})/g;
          while (formatted.match(reg)) {
            formatted = formatted.replace(reg, '$1,$2');
          }
          return formatted;
        };
        Utils.getDisplayNumber0 = function getDisplayNumber0(num, sign, bTenK) {
          var flag = num < 0; //负号标识
          num = Math.abs(num);
          var str = '';
          if (num >= 1000000000) {
            var quotient = num / 1000000000;
            var remainder = num % 1000000000;
            if (remainder == 0) {
              str = quotient.toFixed(0) + 'B';
            } else {
              str = quotient.toFixed(2) + 'B';
            }
          } else if (num >= 1000000) {
            var _quotient = num / 1000000;
            var _remainder = num % 1000000;
            if (_remainder == 0) {
              str = _quotient.toFixed(0) + 'M';
            } else {
              str = _quotient.toFixed(2) + 'M';
            }
          } else if (num >= 100000) {
            if (Math.floor(num) == num) {
              var _quotient2 = num / 1000;
              var _remainder2 = num % 1000;
              if (_remainder2 == 0) {
                str = _quotient2.toFixed(0) + 'K';
              } else {
                _remainder2 = num % 100;
                if (_remainder2 == 0) {
                  str = _quotient2.toFixed(1) + 'K';
                } else {
                  str = this.getThousandShow(num);
                }
              }
            } else {
              str = this.getThousandShow(num + 0.5);
            }
          } else {
            if (bTenK && num >= 10000) {
              var _quotient3 = num / 1000;
              var _remainder3 = num % 1000;
              if (_remainder3 == 0) {
                str = _quotient3.toFixed(0) + 'K';
              } else {
                str = _quotient3.toFixed(2) + 'K';
              }
            } else {
              var _remainder4 = num % 1;
              if (_remainder4 == 0) {
                str = num.toFixed(0);
              } else {
                str = num.toFixed(2);
              }
              str = this.getThousandShow(str);
            }
          }
          if (flag) {
            str = '-' + str;
          } else if (num > 0 && sign) {
            str = '+' + str;
          }
          return str;
        }

        /**
         * 解析时间差得到时间
         * @param during 秒
         */;
        Utils.setDuringTime = function setDuringTime(during) {
          var duringTime = '';
          var day = Math.floor(during / 86400);
          var hour = Math.floor((during - day * 86400) / 3600);
          var min = Math.floor((during - day * 86400 - hour * 3600) / 60);
          if (day != 0) {
            duringTime = day + '天';
          }
          if (hour != 0) {
            duringTime = duringTime + hour + '小时';
          }
          if (min != 0) {
            duringTime = duringTime + min + '分钟';
          }
          return duringTime;
        };
        Utils.getFormatMonthDateByStamp = function getFormatMonthDateByStamp(time) {
          return;
        };
        Utils.getFormatMonthDateByStamp2 = function getFormatMonthDateByStamp2(stamp, includeSecond) {
          if (includeSecond === void 0) {
            includeSecond = false;
          }
          var date = new Date(stamp * 1000); //时间搓转为 毫秒

          var month = (date.getMonth() + 1).toString().padStart(2, '0');
          var day = date.getDate().toString().padStart(2, '0');
          var hours = date.getHours().toString().padStart(2, '0');
          var minutes = date.getMinutes().toString().padStart(2, '0');
          if (includeSecond) {
            var seconds = date.getSeconds().toString().padStart(2, '0');
            return month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;
          } else {
            return month + "/" + day + " " + hours + ":" + minutes;
          }
        };
        Utils.formatDate = function formatDate(time, _char) {
          if (_char === void 0) {
            _char = '.';
          }
          var date;
          if (time instanceof Date) {
            date = time;
          } else {
            date = new Date(time);
          }
          var month = (date.getMonth() + 1).toString().padStart(2, '0');
          var day = date.getDate().toString().padStart(2, '0');
          return "" + date.getFullYear() + _char + month + _char + day;
        };
        Utils.formatDateWithTime = function formatDateWithTime(time, includeSecond, char1, char2) {
          if (includeSecond === void 0) {
            includeSecond = true;
          }
          if (char1 === void 0) {
            char1 = '.';
          }
          if (char2 === void 0) {
            char2 = ':';
          }
          var date;
          if (time instanceof Date) {
            date = time;
          } else {
            date = new Date(time);
          }
          var month = (date.getMonth() + 1).toString().padStart(2, '0');
          var day = date.getDate().toString().padStart(2, '0');
          var hours = date.getHours().toString().padStart(2, '0');
          var minutes = date.getMinutes().toString().padStart(2, '0');
          if (includeSecond) {
            var seconds = date.getSeconds().toString().padStart(2, '0');
            return "" + date.getFullYear() + char1 + month + char1 + day + " " + hours + char2 + minutes + char2 + seconds;
          } else {
            return "" + date.getFullYear() + char1 + month + char1 + day + " " + hours + char2 + minutes;
          }
        };
        Utils.formatTime = function formatTime(time, includeSecond, _char2) {
          if (includeSecond === void 0) {
            includeSecond = true;
          }
          if (_char2 === void 0) {
            _char2 = ':';
          }
          var date;
          if (time instanceof Date) {
            date = time;
          } else {
            date = new Date(time);
          }
          var hours = date.getHours().toString().padStart(2, '0');
          var minutes = date.getMinutes().toString().padStart(2, '0');
          if (includeSecond) {
            var seconds = date.getSeconds().toString().padStart(2, '0');
            return "" + hours + _char2 + minutes + _char2 + seconds;
          } else {
            return "" + hours + _char2 + minutes;
          }
        };
        Utils.formatTimeTick = function formatTimeTick(secondsTime, includeSecond, _char3) {
          if (includeSecond === void 0) {
            includeSecond = true;
          }
          if (_char3 === void 0) {
            _char3 = ':';
          }
          var hours = (secondsTime / 3600 | 0).toString().padStart(2, '0');
          var minutes = (secondsTime % 3600 / 60 | 0).toString().padStart(2, '0');
          if (includeSecond) {
            var seconds = (secondsTime % 3600 % 60 | 0).toString().padStart(2, '0');
            return "" + hours + _char3 + minutes + _char3 + seconds;
          } else {
            return "" + hours + _char3 + minutes;
          }
        }

        /**
         * 从 str 中提取玩家ID
         * @param str
         */;
        Utils.extractUserID = function extractUserID(str) {
          var _this = this;
          var arr = str.match(this.regUserID.match);
          if (arr) {
            arr.sort(function (l, r) {
              var _l = _this.regUserID.sort.test(l);
              var _r = _this.regUserID.sort.test(r);
              if (_l == _r) {
                return 0;
              } else if (_l == true) {
                return -1;
              } else {
                return 1;
              }
            });
            for (var i = 0, len = arr.length; i < len; i++) {
              arr[i] = arr[i].match(this.regUserID.extract)[0];
            }
          }
          return arr;
        };
        Utils.getThousandShowNumber = function getThousandShowNumber(num) {
          return num.toLocaleString('en-US', {
            useGrouping: true,
            maximumFractionDigits: 2
          });
        }

        /**
         * 格式成为英文的 K、M、B 单位(千进制)
         * @param number -> 待格式化的数值
         * @param maxDecimalPlaceNum -> 最多保留的小数位数
         * @param formatFunc -> 格式化函数(如: Math.floor or Math.ceil 等)
         */;
        Utils.formatNumberEnglish = function formatNumberEnglish(number, maxDecimalPlaceNum, formatFunc) {
          var suffix = '';
          var value = number;
          if (number < 1000) ;else if (number < 1000000) {
            value = number / 1000;
            suffix = 'K';
          } else if (number < 1000000000) {
            value = number / 1000000;
            suffix = 'M';
          } else {
            value = number / 1000000000;
            suffix = 'B';
          }
          if (formatFunc) {
            value = formatFunc(value);
          } else if (maxDecimalPlaceNum && maxDecimalPlaceNum > 0) {
            value = this.keepNumberDecimal(value, maxDecimalPlaceNum, false);
          }
          return value + suffix;
        }

        /**
         * 保留小数后的placeNum位
         * @param number -> 待格式化的数值
         * @param maxDecimalPlaceNum -> 最多保留的小数位数
         * @param isRound -> 是否四舍五入
         */;
        Utils.keepNumberDecimal = function keepNumberDecimal(number, maxDecimalPlaceNum, isRound) {
          var N = Math.pow(10, maxDecimalPlaceNum);
          var value = N * number;
          if (isRound) {
            return Math.floor(value + 0.5) / N;
          }
          return Math.floor(value) / N;
        };
        Utils.fguiLoadPackage = function fguiLoadPackage(pkgPath, onProgress) {
          if (onProgress === void 0) {
            onProgress = function onProgress() {};
          }
          if (!pkgPath || pkgPath.length == 0) {
            return Promise.resolve();
          }
          var promiseArr = [];
          var finished = 0;
          var _loop = function _loop() {
            var item = pkgPath[i];
            promiseArr.push(new Promise(function (resolve, reject) {
              UIPackage.loadPackage(item, function (err, pkg) {
                if (err) {
                  reject(err);
                  return;
                }
                finished++;
                onProgress(finished, pkgPath.length);
                resolve(pkg);
              });
            }));
          };
          for (var i = 0; i < pkgPath.length; i++) {
            _loop();
          }
          return Promise.all(promiseArr);
        };
        Utils.ccLoadResourcesDir = function ccLoadResourcesDir(dirPath, onProgress) {
          if (onProgress === void 0) {
            onProgress = function onProgress() {};
          }
          if (!dirPath || dirPath.length == 0) {
            return Promise.resolve();
          }
          var promiseArr = [];
          var arr = [];
          var _loop2 = function _loop2(i) {
            var dir = dirPath[i];
            arr[i] = {};
            promiseArr.push(new Promise(function (resolve, reject) {
              GameConfig.bundle.loadDir(dir, function (finished, total) {
                arr[i].finished = finished;
                arr[i].total = total;
                var t = 0;
                var f = 0;
                for (var j = 0; j < arr.length; j++) {
                  var element = arr[j];
                  t += element.total;
                  f += element.finished;
                }
                onProgress(f, t);
              }, function (err, data) {
                if (err) {
                  reject(err);
                  return;
                }
                resolve(data);
              });
            }));
          };
          for (var i = 0; i < dirPath.length; i++) {
            _loop2(i);
          }
          return Promise.all(promiseArr);
        };
        Utils.ccLoadResources = function ccLoadResources(p, onProgress) {
          if (onProgress === void 0) {
            onProgress = function onProgress() {};
          }
          return new Promise(function (resolve, reject) {
            GameConfig.bundle.load(p, onProgress, function (err, data) {
              if (err) {
                reject(err);
                return;
              }
              resolve(data);
            });
          });
        };
        Utils.bezierTween = function bezierTween(target, duration, from, to, c1, c2, _onUpdate) {
          var subV = to.clone().subtract(from);
          var subVN = subV.clone().normalize();
          var length = subV.length();
          c1 = c1 ? c1 : from.clone().add(subV.clone().multiplyScalar(0.25)).add(subVN.clone().rotate(Math.PI / 2).multiplyScalar(length / 1.5));
          c2 = c2 ? c2 : from.clone().add(subV.clone().multiplyScalar(0.75)).add(subVN.clone().rotate(-Math.PI / 2).multiplyScalar(length / 1.5));
          if (target instanceof Node) {
            var startPos = target.position;
            return tween(startPos).set({
              x: from.x,
              y: from.y
            }).parallel(tween().to(duration, {
              x: to.x
            }, {
              easing: 'smooth',
              progress: function progress(start, end, current, ratio) {
                current = bezier(start, c1.x, c2.x, end, ratio);
                return current;
              },
              onUpdate: function onUpdate() {
                target.setPosition(startPos);
              }
            }), tween().to(duration, {
              y: to.y
            }, {
              easing: 'smooth',
              progress: function progress(start, end, current, ratio) {
                current = bezier(start, c1.y, c2.y, end, ratio);
                return current;
              },
              onUpdate: function onUpdate(target_, ratio_) {
                target.setPosition(startPos);
                if (_onUpdate instanceof Function) {
                  _onUpdate(target_, ratio_);
                }
              }
            }));
          } else {
            return tween(target).set({
              x: from.x,
              y: from.y
            }).parallel(tween().to(duration, {
              x: to.x
            }, {
              easing: 'smooth',
              progress: function progress(start, end, current, ratio) {
                current = bezier(start, c1.x, c2.x, end, ratio);
                return current;
              }
            }), tween().to(duration, {
              y: to.y
            }, {
              easing: 'smooth',
              progress: function progress(start, end, current, ratio) {
                current = bezier(start, c1.y, c2.y, end, ratio);
                return current;
              },
              onUpdate: function onUpdate(target_, ratio_) {
                if (_onUpdate instanceof Function) {
                  _onUpdate(target_, ratio_);
                }
              }
            }));
          }
        };
        Utils.formatDoubleValue = function formatDoubleValue(value) {
          // let gap = value - Math.floor(value);
          // if (gap > 0) {
          //     return Math.floor(value) + Math.floor(gap * 100 + 0.5) / 100;
          // }
          return Math.round(value * 100) / 100;
        }

        /**
         * 创建计数回调，调用次数达到 target 时触发 callback，
         * @param target 目标值
         * @param callback
         * @param start 起始值
         * @param step 步长
         * @returns
         */;
        Utils.createCounterFunction = function createCounterFunction(target, callback, start, step) {
          if (start === void 0) {
            start = 0;
          }
          if (step === void 0) {
            step = 1;
          }
          if (start == target) {
            callback();
            return;
          }
          var count = start;
          return function () {
            count += step;
            if (target == count) {
              callback();
            }
          };
        }

        // -- 获取牌局类型展示字符串
        ;

        Utils.getRoomTypeStr = function getRoomTypeStr(isLobby, gameType, isflash) {
          var roomStr = isLobby ? LanguageManager.get('TXT_1196') : LanguageManager.get('TXT_1195');
          var roomtype = isflash ? GameConst.getFlashGameTypeDesc(gameType) : GameConst.getGameTypeDesc(gameType);
          return roomStr + "/" + roomtype;
        }

        // -- 房间消息长度控制 字母占0.5 中文占1 位置
        ;

        Utils.getMsgMyLength = function getMsgMyLength(txt, length) {
          if (!txt) {
            return '';
          }
          var num = 0;
          var result = '';
          for (var index = 0; index < txt.length; index++) {
            var element = txt[index];
            if (/[\u3400-\u4DBF\u4E00-\u9FFF]/.test(element)) {
              num += 1;
            } else if (/^[\u4e00-\u9fa5]+$/.test(element)) {
              num += 1;
            } else {
              num += 0.5;
            }
            if (num <= length) {
              result = result + element;
            }
          }
          return result;
        }

        // 获取消息长度 字母占0.5 中文占1
        ;

        Utils.getMsgLength = function getMsgLength(txt) {
          if (!txt) {
            return 0;
          }
          var num = 0;
          for (var index = 0; index < txt.length; index++) {
            var element = txt[index];
            num += this.getSingleCharLength(element);
          }
          return num;
        }

        // 获取字符长度 字母占0.5 中文占1
        ;

        Utils.getSingleCharLength = function getSingleCharLength(txt) {
          if (!txt) {
            return 0;
          }
          var num = 0;
          if (/[\u3400-\u4DBF\u4E00-\u9FFF]/.test(txt)) {
            num += 1;
          } else if (/^[\u4e00-\u9fa5]+$/.test(txt)) {
            num += 1;
          } else if (txt == 'W' || txt == 'M') {
            num += 1;
          } else if (txt == 'w' || txt == 'm') {
            num += 0.7;
          } else if (txt == 'l' || txt == 'i' || txt == 'j' || txt == 'I') {
            num += 0.2;
          } else if (txt == '1') {
            num += 0.5;
          } else if (/^[A-Z]$/.test(txt)) {
            num += 0.7;
          } else if (/[0-9]/.test(txt)) {
            num += 0.55;
          } else {
            num += 0.5;
          }
          return num;
        }

        /**
         * 根据想要获取的字符串位置 得到应该设置的位置
         * @param txt
         * @param strIndex
         * @returns
         */;
        Utils.getMsgIndexByStringIndex = function getMsgIndexByStringIndex(txt, strIndex) {
          if (strIndex > txt.length) {
            return txt.length;
          }
          if (strIndex <= 0) {
            return 0;
          }
          var num = 0;
          var result = 0;
          for (var index = 0; index < txt.length; index++) {
            var element = txt[index];
            num += this.getSingleCharLength(element);
            if (num >= strIndex) {
              result = index + 1;
              break;
            } else if (index == txt.length - 1) {
              result = index + 1;
            }
          }
          return result <= txt.length ? result : txt.length;
        }

        // 更加每行的长度，把字符串切割成多行
        ;

        Utils.parseMsg = function parseMsg(content, lineNumber, maxRow) {
          if (lineNumber < 1) {
            lineNumber = 1;
          }
          if (Utils.getMsgLength(content) > lineNumber) {
            var result = '';
            var arrysTMp = content.split(' ');
            var arrys = [];
            for (var index = 0; index < arrysTMp.length; index++) {
              var element = arrysTMp[index];
              var strTmp = '';
              var firstPush = true;
              for (var i = 0; i < element.length; i++) {
                var str = element[i];
                if (/^\d+$/.test(str) || /[\u3400-\u4DBF\u4E00-\u9FFF]/.test(str) || /^[\u4e00-\u9fa5]+$/.test(str)) {
                  if (strTmp.length > 0) {
                    if (firstPush && arrys.length > 0 && index > 0) {
                      strTmp = ' ' + strTmp;
                      firstPush = false;
                    }
                    arrys.push(strTmp);
                  }
                  if (firstPush && arrys.length > 0 && index > 0) {
                    str = ' ' + str;
                    firstPush = false;
                  }
                  arrys.push(str);
                  strTmp = '';
                } else {
                  strTmp = strTmp + str;
                }
              }
              if (strTmp.length > 0) {
                if (firstPush && arrys.length > 0 && index > 0) {
                  strTmp = ' ' + strTmp;
                  firstPush = false;
                }
                arrys.push(strTmp);
              }
            }
            if (arrys.length <= 1) {
              var middleIndex = this.getMsgIndexByStringIndex(content, lineNumber);
              var str1 = content.substring(0, middleIndex);
              var str2 = '';
              if (middleIndex < content.length) {
                str2 = this.parseMsg(content.substring(middleIndex), lineNumber);
              }
              result = str1;
              if (str2.length > 0) {
                result = result + '\n' + str2;
              }
              var resultStr = result.split('\n');
              if (maxRow && resultStr.length > maxRow) {
                result = '';
                var resultStrNew = [];
                var strNewTmp = '';
                for (var idx = 0; idx < resultStr.length; idx++) {
                  var str3 = resultStr[idx];
                  if (idx < maxRow - 1) {
                    strNewTmp = str3;
                    resultStrNew.push(strNewTmp);
                    strNewTmp = '';
                  } else {
                    strNewTmp = strNewTmp + str3;
                    if (idx == resultStr.length - 1) {
                      resultStrNew.push(strNewTmp);
                      strNewTmp = '';
                    }
                  }
                }
                for (var _idx = 0; _idx < resultStrNew.length; _idx++) {
                  if (result.length > 0) {
                    result = result + '\n';
                  }
                  var _str = resultStrNew[_idx];
                  if (_idx == resultStrNew.length - 1) {
                    var str3Tmp = _str;
                    var strLength = Utils.getMsgLength(str3Tmp);
                    while (strLength > lineNumber - 1.5) {
                      str3Tmp = str3Tmp.substring(0, str3Tmp.length - 1);
                      strLength = Utils.getMsgLength(str3Tmp);
                    }
                    result = result + str3Tmp + '...';
                  } else {
                    result = result + _str;
                  }
                }
              }
            } else {
              var strs = [];
              var tmpStr = '';
              for (var _index = 0; _index < arrys.length; _index++) {
                var _element = arrys[_index];
                if (maxRow && maxRow == strs.length + 1) {
                  // 最后一行
                  tmpStr = tmpStr + _element;
                  if (_index == arrys.length - 1) {
                    strs.push(tmpStr);
                  }
                  continue;
                }
                if (Utils.getMsgLength(_element) > lineNumber) {
                  var cutIndex = this.getMsgIndexByStringIndex(_element, lineNumber);
                  var _str2 = _element.substring(0, cutIndex);
                  var _str3 = '';
                  if (cutIndex < _element.length) {
                    _str3 = _element.substring(cutIndex);
                  }
                  if (tmpStr.length > 0) {
                    strs.push(tmpStr);
                    tmpStr = '';
                  }
                  strs.push(_str2);
                  tmpStr = _str3;
                } else {
                  var tmpStrTmp = '';
                  if (tmpStr.length > 0) {
                    tmpStrTmp = tmpStr + _element;
                  } else {
                    tmpStrTmp = _element;
                  }
                  if (Utils.getMsgLength(tmpStrTmp) <= lineNumber) {
                    tmpStr = tmpStrTmp;
                    if (_index == arrys.length - 1) {
                      strs.push(tmpStr);
                    }
                  } else {
                    strs.push(tmpStr);
                    tmpStr = _element;
                    if (_index == arrys.length - 1) {
                      strs.push(_element);
                    }
                  }
                }
              }
              var rowCount = strs.length;
              var addTaile = false;
              if (maxRow && maxRow <= rowCount) {
                rowCount = maxRow;
                addTaile = true;
              }
              for (var k = 0; k < rowCount; k++) {
                var _str4 = strs[k];
                if (result.length > 0) {
                  result = result + '\n';
                }
                var _strLength = Utils.getMsgLength(_str4);
                if (addTaile && k == rowCount - 1 && _strLength > lineNumber) {
                  while (_strLength > lineNumber - 1.5) {
                    _str4 = _str4.substring(0, _str4.length - 1);
                    _strLength = Utils.getMsgLength(_str4);
                  }
                  result = result + _str4 + '...';
                } else {
                  result = result + _str4;
                }
              }
            }
            return result;
          } else {
            return content;
          }
        };
        Utils.changeAtStrColor = function changeAtStrColor(content, atIDs) {
          var showContent = '';
          var arrysTMp = content.split(' ');
          // 处理名字带空格情况
          if (content.includes('@')) {
            var arry = [];
            var beginIndex = 0;
            var contentTmp = content;
            var atIndex = contentTmp.indexOf('@');
            var str1 = contentTmp.substring(beginIndex, atIndex);
            var str2 = contentTmp.substring(atIndex, contentTmp.length);
            while (atIndex >= 0) {
              var findName = false;
              for (var _key4 in atIDs) {
                var value = atIDs[_key4].trim();
                if (value && value.length > 0 && str2.includes(value)) {
                  var indexValue = str2.indexOf(value);
                  if (indexValue == 0) {
                    if (str1.length > 0) {
                      arry = arry.concat(str1.split(' '));
                    }
                    arry.push(value);
                    contentTmp = contentTmp.substring(atIndex + value.length, contentTmp.length);
                    findName = true;
                    break;
                  }
                } else if (value && value.length > 0) {
                  var valueTmp = str2;
                  var tailIndex = str2.indexOf('...');
                  if (tailIndex >= 0 && tailIndex + 3 == str2.length) {
                    valueTmp = str2.substring(0, tailIndex);
                    if (value.includes(valueTmp)) {
                      var _indexValue = str2.indexOf(valueTmp);
                      if (_indexValue == 0) {
                        if (str1.length > 0) {
                          arry = arry.concat(str1.split(' '));
                        }
                        arry.push(str2);
                        contentTmp = '';
                        findName = true;
                        break;
                      }
                    }
                  }
                }
              }
              if (!findName) {
                var str1Tmp = contentTmp.substring(0, atIndex + 1);
                contentTmp = contentTmp.substring(atIndex + 1, contentTmp.length);
                atIndex = contentTmp.indexOf('@');
                if (atIndex >= 0) {
                  str1 = str1Tmp + contentTmp.substring(0, atIndex);
                  arry = arry.concat(str1.split(' '));
                  str2 = contentTmp.substring(atIndex, contentTmp.length);
                } else {
                  contentTmp = str1 + str2;
                }
              } else {
                atIndex = contentTmp.indexOf('@');
                if (atIndex >= 0) {
                  str1 = contentTmp.substring(0, atIndex);
                  str2 = contentTmp.substring(atIndex, contentTmp.length);
                }
              }
            }
            if (contentTmp.length > 0) {
              arry = arry.concat(contentTmp.split(' '));
            }
            arrysTMp = [];
            for (var index = 0; index < arry.length; index++) {
              var element = arry[index];
              if (element.length > 0) {
                if (element == '\n' && index < arry.length - 1) {
                  element += arry[index + 1];
                  index++;
                }
                arrysTMp.push(element);
              }
            }
          }
          for (var _index2 = 0; _index2 < arrysTMp.length; _index2++) {
            var strTmp = arrysTMp[_index2];
            var strTmps = [];
            if (strTmp.includes('\n')) {
              strTmps = strTmp.split('\n');
              strTmp = '';
              for (var strTmpsI = 0; strTmpsI < strTmps.length; strTmpsI++) {
                var strTmpsStr = strTmps[strTmpsI];
                strTmp += strTmpsStr;
              }
            }
            if (showContent.length > 0) {
              showContent = showContent + ' ';
            }
            var arrys = strTmp.split('@');
            if (arrys.length > 2) {
              var headStr = '';
              for (var i = 1; i < arrys.length - 1; i++) {
                var str = arrys[i];
                headStr = headStr + str;
              }
              var atStr = '@' + arrys[arrys.length - 1];
              for (var _key5 in atIDs) {
                var _value = atIDs[_key5].trim();
                if (_value.includes(atStr) || atStr.includes(_value)) {
                  if (strTmps.length > 0) {
                    atStr = '';
                    for (var _strTmpsI = 0; _strTmpsI < strTmps.length; _strTmpsI++) {
                      var _strTmpsStr = strTmps[_strTmpsI];
                      if (atStr.length > 0) {
                        atStr += '\n';
                      } else {
                        var adIndex = _strTmpsStr.indexOf('@');
                        showContent = showContent + _strTmpsStr.substring(0, adIndex);
                        _strTmpsStr = _strTmpsStr.substring(adIndex, _strTmpsStr.length);
                      }
                      atStr += Utils.formatStr('[color=#e8a804]%s[/color]', _strTmpsStr);
                    }
                  } else {
                    atStr = Utils.formatStr('[color=#e8a804]%s[/color]', atStr);
                  }
                  break;
                }
              }
              showContent = showContent + headStr + atStr;
              strTmps = [];
            } else if (arrys.length == 2) {
              var _atStr = '@' + arrys[1];
              var atStrCheck = _atStr;
              for (var _key6 in atIDs) {
                var indluceCheck = false;
                var _value2 = atIDs[_key6].trim();
                if (_atStr.includes('...')) {
                  var dotIndex = _atStr.indexOf('...');
                  if (dotIndex == _atStr.length - 3) {
                    atStrCheck = _atStr.substring(0, dotIndex);
                    indluceCheck = true;
                  }
                }
                if (indluceCheck && _value2.includes(atStrCheck) || atStrCheck.includes(_value2)) {
                  if (strTmps.length > 0) {
                    _atStr = '';
                    for (var _strTmpsI2 = 0; _strTmpsI2 < strTmps.length; _strTmpsI2++) {
                      var _strTmpsStr2 = strTmps[_strTmpsI2];
                      if (_atStr.length > 0) {
                        _atStr += '\n';
                      }
                      var _adIndex = _strTmpsStr2.indexOf('@');
                      if (_adIndex > 0) {
                        showContent = showContent + _strTmpsStr2.substring(0, _adIndex);
                      } else {
                        _adIndex = 0;
                      }
                      _strTmpsStr2 = _strTmpsStr2.substring(_adIndex, _strTmpsStr2.length);
                      _atStr += Utils.formatStr('[color=#e8a804]%s[/color]', _strTmpsStr2);
                    }
                  } else {
                    _atStr = Utils.formatStr('[color=#e8a804]%s[/color]', _atStr);
                  }
                  break;
                } else if (!indluceCheck && _value2.includes(atStrCheck)) {
                  var atStrCheckTmp = atStrCheck;
                  var addedStr = '';
                  var beforeAddedStr = '';
                  var afterAddedStr = '';
                  var strTmpsTmp = [];
                  var indexTmp = _index2 + 1;
                  while (_value2.includes(atStrCheckTmp) && indexTmp <= arrysTMp.length - 1) {
                    atStrCheckTmp += ' ';
                    addedStr += ' ';
                    var strTmpTmp = arrysTMp[indexTmp];
                    if (strTmpTmp.includes('\n')) {
                      strTmpsTmp = strTmpTmp.split('\n');
                      strTmpTmp = '';
                      for (var _strTmpsI3 = 0; _strTmpsI3 < strTmpsTmp.length; _strTmpsI3++) {
                        var _strTmpsStr3 = strTmpsTmp[_strTmpsI3];
                        strTmpTmp += _strTmpsStr3;
                      }
                    }
                    atStrCheckTmp += strTmpTmp;
                    addedStr += strTmpTmp;
                    if (strTmpsTmp.length > 0) {
                      afterAddedStr += ' ';
                      afterAddedStr += strTmpTmp;
                    }
                    if (strTmpsTmp.length == 0) {
                      beforeAddedStr += ' ';
                      beforeAddedStr += strTmpTmp;
                    }
                    if (atStrCheckTmp.includes(_value2)) {
                      _index2 = indexTmp;
                      if (strTmps.length > 0) {
                        _atStr = '';
                        for (var _strTmpsI4 = 0; _strTmpsI4 < strTmps.length; _strTmpsI4++) {
                          var _strTmpsStr4 = strTmps[_strTmpsI4];
                          if (_atStr.length > 0) {
                            _atStr += '\n';
                          }
                          var _adIndex2 = _strTmpsStr4.indexOf('@');
                          if (_adIndex2 > 0) {
                            showContent = showContent + _strTmpsStr4.substring(0, _adIndex2);
                          } else {
                            _adIndex2 = 0;
                          }
                          _strTmpsStr4 = _strTmpsStr4.substring(_adIndex2, _strTmpsStr4.length);
                          _atStr += Utils.formatStr('[color=#e8a804]%s[/color]', _strTmpsStr4);
                        }
                        _atStr += Utils.formatStr('[color=#e8a804]%s[/color]', addedStr);
                      } else if (strTmpsTmp.length > 0) {
                        _atStr = Utils.formatStr('[color=#e8a804]%s[/color]', _atStr);
                        _atStr += Utils.formatStr('[color=#e8a804]%s[/color]', beforeAddedStr);
                        for (var _strTmpsI5 = 0; _strTmpsI5 < strTmpsTmp.length; _strTmpsI5++) {
                          var _strTmpsStr5 = strTmpsTmp[_strTmpsI5];
                          _atStr += Utils.formatStr('[color=#e8a804]%s[/color]', _strTmpsStr5);
                          if (_strTmpsI5 > 0) {
                            _atStr += '\n';
                          }
                        }
                        _atStr += Utils.formatStr('[color=#e8a804]%s[/color]', afterAddedStr);
                      } else {
                        _atStr = Utils.formatStr('[color=#e8a804]%s[/color]', atStrCheckTmp);
                      }
                      break;
                    }
                    indexTmp += 1;
                  }
                }
              }
              showContent = showContent + _atStr;
              strTmps = [];
            } else {
              if (strTmps.length > 0) {
                var _atStr2 = '';
                for (var _strTmpsI6 = 0; _strTmpsI6 < strTmps.length; _strTmpsI6++) {
                  var _strTmpsStr6 = strTmps[_strTmpsI6];
                  if (_strTmpsI6 > 0) {
                    _atStr2 += '\n';
                  }
                  _atStr2 += _strTmpsStr6;
                }
                showContent = showContent + _atStr2;
              } else {
                showContent = showContent + strTmp;
              }
              strTmps = [];
            }
          }
          return showContent;
        }
        //真金场盲注倍数转换
        ;

        Utils.cashBlindExchange = function cashBlindExchange(num, bcash) {
          return bcash ? Utils.toFormat(num / 100) : Utils.toFormat(num);
        };
        Utils.getDecimalPlaces = function getDecimalPlaces(numStr) {
          var decimalIndex = numStr.indexOf('.');
          if (decimalIndex === -1) {
            return 0;
          }
          return numStr.length - decimalIndex - 1;
        };
        Utils.toNonExponential = function toNonExponential(num) {
          var m = num.toExponential().match(/\d(?:\.(\d*))?e([+-]\d+)/);
          return num.toFixed(Math.max(0, (m[1] || '').length - Number(m[2] || 0)));
        };
        Utils.winningColor = function winningColor(chip) {
          if (chip < 0) {
            return GameConst.WINNING_COLOR[0];
          } else {
            return GameConst.WINNING_COLOR[1];
          }
        };
        _createClass(Utils, null, [{
          key: "curLocalTimestamp",
          get: function get() {
            return sys.now();
          }
        }, {
          key: "curServerTimestamp",
          get: function get() {
            return this.curLocalTimestamp + this.serverTimeDiff;
          }

          /**
           * 获取当前服务器时间戳
           */
        }, {
          key: "curServerTimeSecondstamp",
          get: function get() {
            return Math.floor((this.curLocalTimestamp + this.serverTimeDiff) / 1000);
          }
        }]);
        return Utils;
      }());
      Utils.regEmail = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      Utils.regPhoneNumber = /^1(3[0-9]|4[01456879]|5[0-35-9]|6[2567]|7[0-8]|8[0-9]|9[0-35-9])\d{8}$/;
      Utils.spPhoneNumber = /^123([0-9]{8})/;
      Utils.regPositiveInteger = /^\d+$/;
      // 正整数（包括0）
      Utils.regInteger = /^[0-9]+$/;
      // 正整数（包括0）组成的字符串
      Utils.regPasseord = /^(?=.*[a-zA-Z])(?=.*\d).+$/;
      // 由数字、英文字母字符串，且必须包含数字和字母
      Utils.UuidRegex = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/;
      Utils.serverTimeDiff = 0;
      Utils.regUserID = {
        match: /(ID)?(:*)(\s*)([0-9]{5,9})/g,
        sort: /ID/g,
        extract: /([0-9]{5,9})/g
      };
      Utils.clickTime = {};
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletBinder.ts", ['cc', './UI_WalletDepositPage.ts', './UI_WalletShortcutButton.ts', './UI_WalletSelectButton1.ts', './UI_WalletSelectButton2.ts', './UI_WalletCopyButton.ts', './UI_WalletWarnItem.ts', './UI_WalletSelectCurrencyDialog.ts', './UI_CurrencySelectItem.ts', './UI_WalletSelectNetworkDialog.ts', './UI_NetworkSelectItem.ts', './UI_WalletDetailsPage.ts', './UI_WalletHistoryItem.ts', './UI_WalletHistoryPage.ts', './UI_WalletWithdrawConfirmDialog.ts', './UI_WalletWithdrawSuccessPage.ts', './UI_WalletWithdrawPage.ts', './UI_WalletWithdrawItem.ts', './UI_WalletBlueButton.ts', './fairygui.mjs'], function (exports) {
  var cclegacy, UI_WalletDepositPage, UI_WalletShortcutButton, UI_WalletSelectButton1, UI_WalletSelectButton2, UI_WalletCopyButton, UI_WalletWarnItem, UI_WalletSelectCurrencyDialog, UI_CurrencySelectItem, UI_WalletSelectNetworkDialog, UI_NetworkSelectItem, UI_WalletDetailsPage, UI_WalletHistoryItem, UI_WalletHistoryPage, UI_WalletWithdrawConfirmDialog, UI_WalletWithdrawSuccessPage, UI_WalletWithdrawPage, UI_WalletWithdrawItem, UI_WalletBlueButton, UIObjectFactory;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      UI_WalletDepositPage = module.default;
    }, function (module) {
      UI_WalletShortcutButton = module.default;
    }, function (module) {
      UI_WalletSelectButton1 = module.default;
    }, function (module) {
      UI_WalletSelectButton2 = module.default;
    }, function (module) {
      UI_WalletCopyButton = module.default;
    }, function (module) {
      UI_WalletWarnItem = module.default;
    }, function (module) {
      UI_WalletSelectCurrencyDialog = module.default;
    }, function (module) {
      UI_CurrencySelectItem = module.default;
    }, function (module) {
      UI_WalletSelectNetworkDialog = module.default;
    }, function (module) {
      UI_NetworkSelectItem = module.default;
    }, function (module) {
      UI_WalletDetailsPage = module.default;
    }, function (module) {
      UI_WalletHistoryItem = module.default;
    }, function (module) {
      UI_WalletHistoryPage = module.default;
    }, function (module) {
      UI_WalletWithdrawConfirmDialog = module.default;
    }, function (module) {
      UI_WalletWithdrawSuccessPage = module.default;
    }, function (module) {
      UI_WalletWithdrawPage = module.default;
    }, function (module) {
      UI_WalletWithdrawItem = module.default;
    }, function (module) {
      UI_WalletBlueButton = module.default;
    }, function (module) {
      UIObjectFactory = module.UIObjectFactory;
    }],
    execute: function () {
      cclegacy._RF.push({}, "dd41f/ypt5F0ZhV+/zYrA9F", "WalletBinder", undefined);
      var WalletBinder = exports('default', /*#__PURE__*/function () {
        function WalletBinder() {}
        WalletBinder.bindAll = function bindAll() {
          UIObjectFactory.setExtension(UI_WalletDepositPage.URL, UI_WalletDepositPage);
          UIObjectFactory.setExtension(UI_WalletShortcutButton.URL, UI_WalletShortcutButton);
          UIObjectFactory.setExtension(UI_WalletSelectButton1.URL, UI_WalletSelectButton1);
          UIObjectFactory.setExtension(UI_WalletSelectButton2.URL, UI_WalletSelectButton2);
          UIObjectFactory.setExtension(UI_WalletCopyButton.URL, UI_WalletCopyButton);
          UIObjectFactory.setExtension(UI_WalletWarnItem.URL, UI_WalletWarnItem);
          UIObjectFactory.setExtension(UI_WalletSelectCurrencyDialog.URL, UI_WalletSelectCurrencyDialog);
          UIObjectFactory.setExtension(UI_CurrencySelectItem.URL, UI_CurrencySelectItem);
          UIObjectFactory.setExtension(UI_WalletSelectNetworkDialog.URL, UI_WalletSelectNetworkDialog);
          UIObjectFactory.setExtension(UI_NetworkSelectItem.URL, UI_NetworkSelectItem);
          UIObjectFactory.setExtension(UI_WalletDetailsPage.URL, UI_WalletDetailsPage);
          UIObjectFactory.setExtension(UI_WalletHistoryItem.URL, UI_WalletHistoryItem);
          UIObjectFactory.setExtension(UI_WalletHistoryPage.URL, UI_WalletHistoryPage);
          UIObjectFactory.setExtension(UI_WalletWithdrawConfirmDialog.URL, UI_WalletWithdrawConfirmDialog);
          UIObjectFactory.setExtension(UI_WalletWithdrawSuccessPage.URL, UI_WalletWithdrawSuccessPage);
          UIObjectFactory.setExtension(UI_WalletWithdrawPage.URL, UI_WalletWithdrawPage);
          UIObjectFactory.setExtension(UI_WalletWithdrawItem.URL, UI_WalletWithdrawItem);
          UIObjectFactory.setExtension(UI_WalletBlueButton.URL, UI_WalletBlueButton);
        };
        return WalletBinder;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts'], function (exports) {
  var _createClass, cclegacy, GameDataClass;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameDataClass = module.GameDataClass;
    }],
    execute: function () {
      var _class, _class2;
      cclegacy._RF.push({}, "75309cPRMJML6+q7LhQE1r7", "WalletData", undefined);
      var WalletData = exports('WalletData', GameDataClass(_class = (_class2 = /*#__PURE__*/function () {
        function WalletData() {
          /**
           * 网络链列表
           */
          this.chainList = [];
          /**
           * 货币
           */
          this.currency = 'USDT';
          /**
           * 网络 Key
           */
          this.chainKey = void 0;
          /**
           * 支付网络地址
           */
          this.chainAddress = new Map();
        }
        _createClass(WalletData, null, [{
          key: "inst",
          get: function get() {
            return this._inst;
          }
        }]);
        return WalletData;
      }(), _class2._inst = void 0, _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletDepositPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GameWindowBase.ts', './UI_WalletDepositPage.ts', './HttpPayment.ts', './GameDecorators.ts', './CocosDevKit.ts', './WalletData.ts', './QRCodeGenerator.ts', './QRCode.ts', './RoleData.ts', './WalletSelectCurrencyDialog.ts', './WalletSelectNetworkDialog.ts', './NativeDeviceBridge.ts', './WalletHistoryPage.ts', './LanguageManage.ts', './CDKDecorators.ts', './Logger.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, Node, Label, getFontByName, EEnterType, GameWindowBase, UI_WalletDepositPage, HttpPayment, ExceptionCapture, WalletData, QRCodeGenerator, QRErrorCorrectLevel, RoleData, WalletSelectCurrencyDialog, WalletSelectNetworkDialog, NativeDeviceBridge, WalletHistoryPage, LanguageManager, SafeTimeInterval, Log, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      getFontByName = module.getFontByName;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_WalletDepositPage = module.default;
    }, function (module) {
      HttpPayment = module.HttpPayment;
    }, function (module) {
      ExceptionCapture = module.ExceptionCapture;
    }, null, function (module) {
      WalletData = module.WalletData;
    }, function (module) {
      QRCodeGenerator = module.QRCodeGenerator;
    }, function (module) {
      QRErrorCorrectLevel = module.QRErrorCorrectLevel;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      WalletSelectCurrencyDialog = module.default;
    }, function (module) {
      WalletSelectNetworkDialog = module.default;
    }, function (module) {
      NativeDeviceBridge = module.NativeDeviceBridge;
    }, function (module) {
      WalletHistoryPage = module.default;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      Utils = module.Utils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class;
      cclegacy._RF.push({}, "784f1QSlqtJyJOsmJLF66by", "WalletDepositPage", undefined);
      var WalletDepositPage = exports('default', (_dec = SafeTimeInterval(), _dec2 = ExceptionCapture(), _dec3 = ExceptionCapture(), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(WalletDepositPage, _GameWindowBase);
        WalletDepositPage.create = function create(from, coverUnderlyingWindow) {
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          return new WalletDepositPage(from, coverUnderlyingWindow);
        };
        function WalletDepositPage(from, coverUnderlyingWindow) {
          var _this;
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          _this = _GameWindowBase.call(this, from) || this;
          _this["package"] = ['FGUI/Wallet'];
          _this.paneClass = UI_WalletDepositPage;
          _this.coverUnderlyingWindow = true;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.enterType = EEnterType.horizontal;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'WalletDepositPage';
          _this.isPageInited = false;
          _this.isPageShowen = false;
          _this.coverUnderlyingWindow = coverUnderlyingWindow;
          return _this;
        }
        var _proto = WalletDepositPage.prototype;
        _proto.onShown = function onShown() {
          _GameWindowBase.prototype.onShown.call(this);
          this.pane.m_shortcutUSDT.onClick(this.onShortcutUSDTClick, this);
          this.pane.m_shortcutUSDC.onClick(this.onShortcutUSDCClick, this);
          this.pane.m_btnSelect1.onClick(this.onBtnSelect1Click, this);
          this.pane.m_btnSelect2.onClick(this.onBtnSelect2Click, this);
          this.pane.m_btnCopy.onClick(this.onBtnCopyClick, this);
          this.isPageShowen = true;
          if (this.isPageInited) {
            this._setAddress();
          }
        };
        _proto.onInit = /*#__PURE__*/function () {
          var _onInit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(WalletData.inst.chainList.length <= 0)) {
                    _context.next = 3;
                    break;
                  }
                  _context.next = 3;
                  return this.getChainList();
                case 3:
                  if (!WalletData.inst.chainKey) {
                    WalletData.inst.chainKey = HttpPayment.EChainKey.TRX;
                  }
                  this.pane.m_warnBg.m_title.text = LanguageManager.get('WALLET_MINDEP') + ": 5.00 USDT";
                  this.setCurrency();
                  this.setNetwork();
                  this.isPageInited = true;
                  if (this.isPageShowen) {
                    this._setAddress();
                  }
                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onInit() {
            return _onInit.apply(this, arguments);
          }
          return onInit;
        }();
        _proto.onShortcutUSDTClick = function onShortcutUSDTClick() {
          WalletData.inst.currency = 'USDT';
          this.setCurrency();
          this.showNetworkSelect();
        };
        _proto.onShortcutUSDCClick = function onShortcutUSDCClick() {
          WalletData.inst.currency = 'USDC';
          this.setCurrency();
          this.showNetworkSelect();
        };
        _proto.onBtnSelect1Click = function onBtnSelect1Click() {
          this.showCurrencySelect();
        };
        _proto.onBtnSelect2Click = function onBtnSelect2Click() {
          this.showNetworkSelect();
        };
        _proto.onBtnCopyClick = function onBtnCopyClick() {
          var _this2 = this;
          var address = WalletData.inst.chainAddress.get(WalletData.inst.chainKey);
          if (address) {
            NativeDeviceBridge.Instance.copyTextToClipboard(address).then(function (success) {
              if (success) {
                _this2.grootInst.showCenterTip('TXT_140');
                _this2.pane.m_btnCopy.m_isSelected.selectedIndex = 1;
                _this2.pane.forceUpdateRecursion();
              }
            });
          }
        };
        _proto.onIconRecordClick = function onIconRecordClick() {
          WalletHistoryPage.create(this, this.coverUnderlyingWindow).showOn(this.grootInst);
        };
        _proto.showCurrencySelect = function showCurrencySelect() {
          var _this3 = this;
          var currencyDialog = WalletSelectCurrencyDialog.create(this);
          currencyDialog.addHook({
            onPageDestroy: function onPageDestroy() {
              _this3.setCurrency();
              _this3.showNetworkSelect();
            }
          });
          currencyDialog.showOn(this.grootInst);
        };
        _proto.showNetworkSelect = function showNetworkSelect() {
          var _this4 = this;
          var networkDialog = WalletSelectNetworkDialog.create(this);
          networkDialog.addHook({
            onPageDestroy: function onPageDestroy() {
              _this4.setNetwork();
              var address = WalletData.inst.chainAddress.get(WalletData.inst.chainKey);
              if (address) {
                _this4.setAddress();
              } else {
                _this4.obtainPaymentAddress();
              }
            }
          });
          networkDialog.showOn(this.grootInst);
        }

        /** 获取链列表 */;
        _proto.getChainList = /*#__PURE__*/
        function () {
          var _getChainList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var param, res;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  param = {
                    time: Utils.curServerTimeSecondstamp
                  };
                  _context2.next = 3;
                  return HttpPayment.getChainListRequest.create(param).post();
                case 3:
                  res = _context2.sent;
                  if (!(res.code === 200)) {
                    _context2.next = 7;
                    break;
                  }
                  WalletData.inst.chainList = res.data;
                  return _context2.abrupt("return", Promise.resolve(true));
                case 7:
                  return _context2.abrupt("return", Promise.resolve(false));
                case 8:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function getChainList() {
            return _getChainList.apply(this, arguments);
          }
          return getChainList;
        }() /** 获取付款地址 */;
        _proto.obtainPaymentAddress = /*#__PURE__*/
        function () {
          var _obtainPaymentAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this5 = this;
            var chain, param;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  chain = WalletData.inst.chainKey;
                  param = {
                    playerid: RoleData.inst.playerID,
                    chain: chain
                  };
                  HttpPayment.PayAddrRequest.create(param).post().then(function (res) {
                    if (res.code === 200) {
                      if (res.data && res.data.address) {
                        WalletData.inst.chainAddress.set(chain, res.data.address);
                        if (WalletData.inst.chainKey == chain) {
                          _this5.setAddress();
                        }
                      } else {
                        Log.debug.error('PayAddrRequest 返回地址为空', res);
                      }
                    }
                  });
                case 3:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function obtainPaymentAddress() {
            return _obtainPaymentAddress.apply(this, arguments);
          }
          return obtainPaymentAddress;
        }();
        _proto._setAddress = function _setAddress() {
          var address = WalletData.inst.chainAddress.get(WalletData.inst.chainKey);
          if (address) {
            this.setAddress();
          } else {
            this.obtainPaymentAddress();
          }
        };
        _proto.setCurrency = function setCurrency() {
          if (!WalletData.inst.currency) return;
          this.pane.m_btnSelect1.m_type.selectedPage = WalletData.inst.currency;
        };
        _proto.setNetwork = function setNetwork() {
          if (!WalletData.inst.chainKey) return;
          this.pane.m_btnSelect2.m_name.text = WalletData.inst.chainKey;
        };
        _proto.setAddress = function setAddress() {
          var address = WalletData.inst.chainAddress.get(WalletData.inst.chainKey);
          if (address && this.pane.m_addressValue.text != address) {
            var idx1 = Math.min(8, address.length);
            var idx2 = Math.max(0, address.length - 8);
            if (idx2 < idx1) {
              idx1 = idx2;
            }
            var fontstr = '';
            var idx = 0;
            var str2 = address;
            for (; idx < str2.length; idx++) {
              var element = str2[idx];
              fontstr += element;
              var node = new Node();
              var lablecmpt = node.addComponent(Label);
              lablecmpt.useSystemFont = false;
              lablecmpt.font = getFontByName('HelveticaNeue-01');
              lablecmpt.fontSize = this.pane.m_addressValue.fontSize;
              node.active = true;
              lablecmpt.string = fontstr;
              lablecmpt.updateRenderData(true);
              var w = lablecmpt.node._uiProps.uiTransformComp.contentSize;
              if (w.width > this.pane.m_addressValue.initWidth) {
                break;
              }
            }
            var exstr = address.substring(idx1, idx);
            var leavestr = str2.substring(idx, idx2);
            this.pane.m_addressValue.text = "<color=#2A67CA>" + address.slice(0, idx1) + "</color><color=#68758C>" + exstr + "</color><color=#68758C>" + leavestr + "</color><color=#2A67CA>" + address.slice(idx2, address.length);
            var view = this.pane.m_qrCodeNode;
            var size = view.width;
            QRCodeGenerator.create(view, size, QRErrorCorrectLevel.H).generateQRCode(address);
          }
        };
        return WalletDepositPage;
      }(GameWindowBase), (_applyDecoratedDescriptor(_class.prototype, "onBtnCopyClick", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onBtnCopyClick"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "getChainList", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "getChainList"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "obtainPaymentAddress", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "obtainPaymentAddress"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletDetailsPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './Utils.ts', './WalletHistoryPage.ts', './UI_WalletDetailsPage.ts'], function (exports) {
  var _inheritsLoose, cclegacy, EEnterType, GameWindowBase, Utils, EAMountState, EStateControl, UI_WalletDetailsPage;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      EAMountState = module.EAMountState;
      EStateControl = module.EStateControl;
    }, function (module) {
      UI_WalletDetailsPage = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4c72eW+zRtLxZO6dzkM2CH1", "WalletDetailsPage", undefined);
      var WalletDetailsPage = exports('default', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(WalletDetailsPage, _GameWindowBase);
        WalletDetailsPage.create = function create(from, coverUnderlyingWindow) {
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          return new WalletDetailsPage(from, coverUnderlyingWindow);
        };
        function WalletDetailsPage(from, coverUnderlyingWindow) {
          var _this;
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          _this = _GameWindowBase.call(this, from) || this;
          _this["package"] = ['FGUI/Wallet'];
          _this.paneClass = UI_WalletDetailsPage;
          _this.coverUnderlyingWindow = true;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.horizontal;
          _this.reportOpenPage = true;
          _this.pageName = 'WalletDetailsPage';
          _this.recordItem = void 0;
          _this.coverUnderlyingWindow = coverUnderlyingWindow;
          return _this;
        }
        var _proto = WalletDetailsPage.prototype;
        _proto.onInit = function onInit() {
          this.pane.m_type.selectedIndex = this.recordItem.type - 1;
          this.pane.m_time.text = Utils.formatDateWithTime(this.recordItem.create_time * 1000);
          this.pane.m_amount.text = Utils.toFormat(this.recordItem.amount, 2, true);
          this.pane.m_address.text = this.recordItem.address;
          switch (this.recordItem.status) {
            case 0:
            case 1:
              this.pane.m_amountState.selectedIndex = EAMountState["default"];
              this.pane.m_stateTipControl.selectedIndex = EStateControl.pending;
              break;
            case 2:
              if (this.recordItem.type == 1) {
                this.pane.m_amountState.selectedIndex = EAMountState.gress;
              } else {
                this.pane.m_amountState.selectedIndex = EAMountState.red;
              }
              this.pane.m_stateTipControl.selectedIndex = EStateControl.success;
              break;
            case 3:
              this.pane.m_amountState.selectedIndex = EAMountState["default"];
              this.pane.m_stateTipControl.selectedIndex = EStateControl.failure;
              break;
          }
        };
        _proto.setDetailsItem = function setDetailsItem(item) {
          this.recordItem = item;
        };
        return WalletDetailsPage;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletHistoryItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameDecorators.ts', './Utils.ts', './WalletDetailsPage.ts', './WalletHistoryPage.ts', './UI_WalletHistoryItem.ts'], function (exports) {
  var _inheritsLoose, cclegacy, CustomFguiClass, Utils, WalletDetailsPage, EAMountState, EStateControl, UI_WalletHistoryItem;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CustomFguiClass = module.CustomFguiClass;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      WalletDetailsPage = module.default;
    }, function (module) {
      EAMountState = module.EAMountState;
      EStateControl = module.EStateControl;
    }, function (module) {
      UI_WalletHistoryItem = module.default;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "85b1b2u25NGf7+NX8Vh0kAk", "WalletHistoryItem", undefined);
      var WalletHistoryItem = exports('WalletHistoryItem', CustomFguiClass(_class = /*#__PURE__*/function (_UI_WalletHistoryItem) {
        _inheritsLoose(WalletHistoryItem, _UI_WalletHistoryItem);
        function WalletHistoryItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _UI_WalletHistoryItem.call.apply(_UI_WalletHistoryItem, [this].concat(args)) || this;
          _this.parentPage = void 0;
          _this.recordItem = void 0;
          return _this;
        }
        var _proto = WalletHistoryItem.prototype;
        _proto.onConstruct = function onConstruct() {
          _UI_WalletHistoryItem.prototype.onConstruct.call(this);
          this.name = 'WalletHistoryItem';
        };
        _proto.setItem = function setItem(index, item, parentPage) {
          this.parentPage = parentPage;
          this.recordItem = item;
          this.m_type.selectedIndex = item.type - 1;
          this.m_time.text = Utils.formatDateWithTime(item.create_time * 1000);
          this.m_amount.text = Utils.toFormat(item.amount, 2, true);
          switch (this.recordItem.status) {
            case 0:
            case 1:
              this.m_amountState.selectedIndex = EAMountState["default"];
              this.m_stateTipControl.selectedIndex = EStateControl.pending;
              break;
            case 2:
              if (this.recordItem.type == 1) {
                this.m_amountState.selectedIndex = EAMountState.gress;
              } else {
                this.m_amountState.selectedIndex = EAMountState.red;
              }
              this.m_stateTipControl.selectedIndex = EStateControl.success;
              break;
            case 3:
              this.m_amountState.selectedIndex = EAMountState["default"];
              this.m_stateTipControl.selectedIndex = EStateControl.failure;
              break;
          }
        };
        _proto.onItemClick = function onItemClick() {
          // @ts-ignore
          var view = WalletDetailsPage.create(this, this.parentPage.coverUnderlyingWindow);
          view.setDetailsItem(this.recordItem);
          view.showOn(this.grootInst);
        };
        return WalletHistoryItem;
      }(UI_WalletHistoryItem)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletHistoryPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GameWindowBase.ts', './HttpPayment.ts', './RoleData.ts', './Logger.ts', './GameDecorators.ts', './UI_WalletHistoryPage.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, Event, EEnterType, GameWindowBase, HttpPayment, RoleData, Log, AutoLoadingProcess, UI_WalletHistoryPage;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      HttpPayment = module.HttpPayment;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      AutoLoadingProcess = module.AutoLoadingProcess;
    }, function (module) {
      UI_WalletHistoryPage = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "becd1azQa1DBYxYwVBAPaOE", "WalletHistoryPage", undefined);
      var EAMountState = exports('EAMountState', /*#__PURE__*/function (EAMountState) {
        EAMountState[EAMountState["gress"] = 0] = "gress";
        EAMountState[EAMountState["red"] = 1] = "red";
        EAMountState[EAMountState["default"] = 2] = "default";
        return EAMountState;
      }({}));
      var EStateControl = exports('EStateControl', /*#__PURE__*/function (EStateControl) {
        EStateControl[EStateControl["success"] = 0] = "success";
        EStateControl[EStateControl["failure"] = 1] = "failure";
        EStateControl[EStateControl["pending"] = 2] = "pending";
        return EStateControl;
      }({}));
      var WalletHistoryPage = exports('default', (_dec = AutoLoadingProcess(), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(WalletHistoryPage, _GameWindowBase);
        WalletHistoryPage.create = function create(from, coverUnderlyingWindow) {
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          return new WalletHistoryPage(from, coverUnderlyingWindow);
        };
        function WalletHistoryPage(from, coverUnderlyingWindow) {
          var _this;
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          _this = _GameWindowBase.call(this, from) || this;
          _this["package"] = ['FGUI/Wallet'];
          _this.paneClass = UI_WalletHistoryPage;
          _this.coverUnderlyingWindow = true;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.horizontal;
          _this.reportOpenPage = true;
          _this.pageName = 'WalletHistoryPage';
          _this.recordList = [];
          _this.coverUnderlyingWindow = coverUnderlyingWindow;
          return _this;
        }
        var _proto = WalletHistoryPage.prototype;
        _proto.onInit = function onInit() {
          Log.debug.log('WalletHistoryPage', 'onInit');
          this.pane.m_list.on(Event.CLICK_ITEM, this.onTransactionHistoryItem, this);
          this.pane.m_list.itemRenderer = this.renderListItem.bind(this);
          this.pane.m_list.setVirtual();
          this.getUserPaymentRecord();
        };
        _proto.renderListItem = function renderListItem(index, item) {
          item.setItem(index, this.recordList[index], this);
        };
        _proto.onTransactionHistoryItem = function onTransactionHistoryItem(item) {
          item.onItemClick();
        };
        _proto.getUserPaymentRecord = /*#__PURE__*/function () {
          var _getUserPaymentRecord = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var param, res;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  param = {
                    playerid: RoleData.inst.playerID
                  };
                  _context.next = 4;
                  return HttpPayment.payRecordRequest.create(param).post();
                case 4:
                  res = _context.sent;
                  if (res.code === 200) {
                    this.recordList = res.data;
                    this.pane.m_list.numItems = this.recordList.length;
                    this.pane.m_isEmpty.selectedPage = this.recordList.length > 0 ? 'false' : 'true';
                  }
                  _context.next = 11;
                  break;
                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](0);
                  Log.game.error('Error fetching user payment record:', _context.t0);
                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, this, [[0, 8]]);
          }));
          function getUserPaymentRecord() {
            return _getUserPaymentRecord.apply(this, arguments);
          }
          return getUserPaymentRecord;
        }();
        return WalletHistoryPage;
      }(GameWindowBase), _applyDecoratedDescriptor(_class.prototype, "getUserPaymentRecord", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "getUserPaymentRecord"), _class.prototype), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletSelectCurrencyDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GameWindowBase.ts', './UI_WalletSelectCurrencyDialog.ts', './WalletData.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Event, GameWindowBase, EEnterType, UI_WalletSelectCurrencyDialog, WalletData;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      GameWindowBase = module.GameWindowBase;
      EEnterType = module.EEnterType;
    }, function (module) {
      UI_WalletSelectCurrencyDialog = module.default;
    }, function (module) {
      WalletData = module.WalletData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1dfb1unyINBCrE9kcn8jQRj", "WalletSelectCurrencyDialog", undefined);
      var WalletSelectCurrencyDialog = exports('default', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(WalletSelectCurrencyDialog, _GameWindowBase);
        function WalletSelectCurrencyDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Wallet'];
          _this.paneClass = UI_WalletSelectCurrencyDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.showBlackMask = true;
          _this.pageName = 'WalletSelectCurrencyDialog';
          return _this;
        }
        WalletSelectCurrencyDialog.create = function create(from) {
          return new WalletSelectCurrencyDialog(from);
        };
        var _proto = WalletSelectCurrencyDialog.prototype;
        _proto.onInit = function onInit() {
          _GameWindowBase.prototype.onInit.call(this);
          if (WalletData.inst.currency == 'USDT') {
            this.pane.m_list.selectedIndex = 0;
          } else {
            this.pane.m_list.selectedIndex = 1;
          }
        };
        _proto.onShown = function onShown() {
          _GameWindowBase.prototype.onShown.call(this);
          this.pane.m_list.on(Event.CLICK_ITEM, this.onListItemClick, this);
        };
        _proto.onListItemClick = function onListItemClick(item) {
          var idx = this.pane.m_list.getChildIndex(item);
          if (idx == 0) {
            WalletData.inst.currency = 'USDT';
          } else {
            WalletData.inst.currency = 'USDC';
          }
          this.hide();
        };
        return WalletSelectCurrencyDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletSelectNetworkDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fairygui.mjs', './GameWindowBase.ts', './UI_WalletSelectNetworkDialog.ts', './WalletData.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Event, GameWindowBase, EEnterType, UI_WalletSelectNetworkDialog, WalletData;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Event = module.Event;
    }, function (module) {
      GameWindowBase = module.GameWindowBase;
      EEnterType = module.EEnterType;
    }, function (module) {
      UI_WalletSelectNetworkDialog = module.default;
    }, function (module) {
      WalletData = module.WalletData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c66f4QUS2VB9KZIhk6lRx7C", "WalletSelectNetworkDialog", undefined);
      var WalletSelectNetworkDialog = exports('default', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(WalletSelectNetworkDialog, _GameWindowBase);
        function WalletSelectNetworkDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Wallet'];
          _this.paneClass = UI_WalletSelectNetworkDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.enterType = EEnterType.vertical;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.showBlackMask = true;
          _this.pageName = 'WalletSelectNetworkDialog';
          _this.listData = void 0;
          return _this;
        }
        WalletSelectNetworkDialog.create = function create(from) {
          return new WalletSelectNetworkDialog(from);
        };
        var _proto = WalletSelectNetworkDialog.prototype;
        _proto.onInit = function onInit() {
          _GameWindowBase.prototype.onInit.call(this);
          this.listData = WalletData.inst.chainList.map(function (item) {
            return [item.key, item.name];
          });
          this.pane.m_list.itemRenderer = this.itemRenderer.bind(this);
          this.pane.m_list.numItems = this.listData.length;
          for (var i = 0; i < this.listData.length; i++) {
            if (this.listData[i][0] == WalletData.inst.chainKey) {
              this.pane.m_list.selectedIndex = i;
              break;
            }
          }
          this.pane.m_list.ensureBoundsCorrect();
          this.pane.m_list.resizeToFit();
        };
        _proto.onShown = function onShown() {
          _GameWindowBase.prototype.onShown.call(this);
          this.pane.m_list.on(Event.CLICK_ITEM, this.onListItemClick, this);
        };
        _proto.itemRenderer = function itemRenderer(index, item) {
          item.title = this.listData[index][1];
        };
        _proto.onListItemClick = function onListItemClick(item) {
          var idx = this.pane.m_list.getChildIndex(item);
          var key = this.listData[idx][0];
          WalletData.inst.chainKey = key;
          this.hide();
        };
        return WalletSelectNetworkDialog;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletWithdrawConfirmDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './CDKDecorators.ts', './HttpPayment.ts', './Utils.ts', './WalletWithdrawSuccessPage.ts', './CocosDevKit.ts', './ConfirmBox.ts', './LanguageManage.ts', './GameDecorators.ts', './WalletWithdrawPage.ts', './UI_WalletWithdrawConfirmDialog.ts', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, cclegacy, HorizontalTextAlignment, sys, EEnterType, GameWindowBase, SafeTimeInterval, HttpPayment, Utils, WalletWithdrawSuccessPage, ConfirmBox, LanguageManager, AutoLoadingProcess, setPayChannelStr, FEE, UI_WalletWithdrawConfirmDialog, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      HorizontalTextAlignment = module.HorizontalTextAlignment;
      sys = module.sys;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      HttpPayment = module.HttpPayment;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      WalletWithdrawSuccessPage = module.default;
    }, null, function (module) {
      ConfirmBox = module.ConfirmBox;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      AutoLoadingProcess = module.AutoLoadingProcess;
    }, function (module) {
      setPayChannelStr = module.setPayChannelStr;
      FEE = module.FEE;
    }, function (module) {
      UI_WalletWithdrawConfirmDialog = module.default;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "e0a79859TRH35UiQ0Oj+l0U", "WalletWithdrawConfirmDialog", undefined);
      var WalletWithdrawConfirmDialog = exports('default', (_dec = SafeTimeInterval(), _dec2 = AutoLoadingProcess(), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(WalletWithdrawConfirmDialog, _GameWindowBase);
        function WalletWithdrawConfirmDialog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameWindowBase.call.apply(_GameWindowBase, [this].concat(args)) || this;
          _this["package"] = ['FGUI/Wallet'];
          _this.paneClass = UI_WalletWithdrawConfirmDialog;
          _this.coverUnderlyingWindow = false;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = false;
          _this.clickOutsideHide = true;
          _this.showBlackMask = true;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.vertical;
          _this.reportOpenPage = true;
          _this.pageName = 'WalletConfirmDialog';
          _this.withdrawInfo = void 0;
          _this.chainName = void 0;
          return _this;
        }
        WalletWithdrawConfirmDialog.create = function create(from) {
          return new WalletWithdrawConfirmDialog(from);
        };
        var _proto = WalletWithdrawConfirmDialog.prototype;
        _proto.onInit = function onInit() {
          var frame = this.pane.m_frame;
          frame.m_btnConfirm.onClick(this.onBtnConfirmClick, this);
          this.setViewInfo();
        };
        _proto.onShown = function onShown() {
          _GameWindowBase.prototype.onShown.call(this);
        };
        _proto.setWithdrawInfo = function setWithdrawInfo(withdrawInfo, chainName) {
          this.withdrawInfo = withdrawInfo;
          this.chainName = chainName;
        };
        _proto.setViewInfo = function setViewInfo() {
          this.pane.m_amount.text = setPayChannelStr(Utils.toFormat(this.withdrawInfo.amount - FEE, 2, true));
          this.pane.m_fee.text = setPayChannelStr(FEE);
          this.pane.m_network.text = this.chainName;
          this.pane.m_withdrawAddress.text = this.withdrawInfo.address;
          this.pane.m_withdrawAmount.text = setPayChannelStr(Utils.toFormat(this.withdrawInfo.amount, 2, true));
          this.forceUpdateRecursion();
        };
        _proto.onBtnConfirmClick = function onBtnConfirmClick() {
          this.handleWithdrawal();
        };
        _proto.handleWithdrawal = function handleWithdrawal() {
          var _this2 = this;
          Log.game.log(this.name, 'handleWithdrawal', this.withdrawInfo);
          return new Promise(function (resolve) {
            HttpPayment.WithDrawalRequest.create(_this2.withdrawInfo).post().then(function (res) {
              if (res.code == 200) {
                var view = WalletWithdrawSuccessPage.create(_this2, _this2.coverUnderlyingWindow);
                view.setWithdrawInfo(res.data);
                view.showOn(_this2.grootInst);
              } else {
                var box = ConfirmBox.create(_this2);
                box.setInputParams({
                  title: LanguageManager.get('TOAST_INFO'),
                  content: LanguageManager.get('TXT_138') + '：' + LanguageManager.get('UP_1'),
                  clickOutsideClose: true,
                  buttonNum: 1,
                  align: HorizontalTextAlignment.CENTER,
                  enableContentClick: true
                });
                box.addHook({
                  onContent: function onContent() {
                    sys.openURL('https://linktr.ee/87pokercs');
                  }
                });
                box.onClick(function () {
                  box.hide();
                }, _this2);
                box.showOn(_this2.grootInst);
              }
              _this2.hide();
            })["finally"](function () {
              return resolve(true);
            });
          });
        };
        return WalletWithdrawConfirmDialog;
      }(GameWindowBase), (_applyDecoratedDescriptor(_class.prototype, "onBtnConfirmClick", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onBtnConfirmClick"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleWithdrawal", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "handleWithdrawal"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletWithdrawPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './UI_WalletWithdrawPage.ts', './HttpPayment.ts', './GameDecorators.ts', './CocosDevKit.ts', './WalletData.ts', './RoleData.ts', './WalletSelectNetworkDialog.ts', './LanguageManage.ts', './WalletWithdrawConfirmDialog.ts', './CDKDecorators.ts', './Utils.ts', './Logger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, VerticalTextAlignment, EditBox, EEnterType, GameWindowBase, UI_WalletWithdrawPage, HttpPayment, ExceptionCapture, WalletData, RoleData, WalletSelectNetworkDialog, LanguageManager, WalletWithdrawConfirmDialog, SafeTimeInterval, Utils, Log;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      VerticalTextAlignment = module.VerticalTextAlignment;
      EditBox = module.EditBox;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      UI_WalletWithdrawPage = module.default;
    }, function (module) {
      HttpPayment = module.HttpPayment;
    }, function (module) {
      ExceptionCapture = module.ExceptionCapture;
    }, null, function (module) {
      WalletData = module.WalletData;
    }, function (module) {
      RoleData = module.RoleData;
    }, function (module) {
      WalletSelectNetworkDialog = module.default;
    }, function (module) {
      LanguageManager = module.default;
    }, function (module) {
      WalletWithdrawConfirmDialog = module.default;
    }, function (module) {
      SafeTimeInterval = module.SafeTimeInterval;
    }, function (module) {
      Utils = module.Utils;
    }, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      exports('setPayChannelStr', setPayChannelStr);
      var _dec, _dec2, _dec3, _class;
      cclegacy._RF.push({}, "02acdrLt4FOtYlakEzjPWfx", "WalletWithdrawPage", undefined);
      var PAY_CHANNEL = exports('PAY_CHANNEL', 'USDT');
      var FEE = exports('FEE', 1.5);
      var MIN_AMOUNT = exports('MIN_AMOUNT', 20);
      var MIN_DEPOSIT = exports('MIN_DEPOSIT', 5);
      function setPayChannelStr(value) {
        return value + ' ' + PAY_CHANNEL;
      }
      var WalletWithdrawPage = exports('default', (_dec = SafeTimeInterval(), _dec2 = ExceptionCapture(), _dec3 = ExceptionCapture(), (_class = /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(WalletWithdrawPage, _GameWindowBase);
        WalletWithdrawPage.create = function create(from, coverUnderlyingWindow) {
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          return new WalletWithdrawPage(from, coverUnderlyingWindow);
        };
        function WalletWithdrawPage(from, coverUnderlyingWindow) {
          var _this;
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          _this = _GameWindowBase.call(this, from) || this;
          _this["package"] = ['FGUI/Wallet'];
          _this.paneClass = UI_WalletWithdrawPage;
          _this.coverUnderlyingWindow = true;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.enterType = EEnterType.horizontal;
          _this.showEnterLoading = false;
          _this.reportOpenPage = true;
          _this.pageName = 'WalletWithdrawPage';
          _this.coverUnderlyingWindow = coverUnderlyingWindow;
          return _this;
        }
        var _proto = WalletWithdrawPage.prototype;
        _proto.onInit = /*#__PURE__*/function () {
          var _onInit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(WalletData.inst.chainList.length <= 0)) {
                    _context.next = 3;
                    break;
                  }
                  _context.next = 3;
                  return this.getChainList();
                case 3:
                  if (!WalletData.inst.chainKey) {
                    WalletData.inst.chainKey = HttpPayment.EChainKey.TRX;
                  }
                  this.setCurrency();
                  this.setNetwork();
                  this.pane.m_withdrawGroup.m_textCreditedAmount.text = setPayChannelStr(0);
                  this.pane.m_withdrawGroup.m_textFee.text = setPayChannelStr(FEE);
                  this.pane.m_withdrawGroup.m_avaliableAmout.text = setPayChannelStr(RoleData.inst.cash);
                  this.pane.m_withdrawGroup.m_inputAmount.promptText = "[color=#959595]" + (LanguageManager.get('WALLET_MINIMUM') + '：' + MIN_AMOUNT) + "[/color]";
                  this.pane.m_btnSelect2.onClick(this.onBtnSelect2Click, this);
                  this.pane.m_withdrawGroup.m_btnConfirm.onClick(this.onBtnConfirmClick, this);
                  this.pane.m_withdrawGroup.m_inputAddress.on(EditBox.EventType.EDITING_DID_ENDED, this.validateAddress, this);
                  this.pane.m_withdrawGroup.m_inputAmount.on(EditBox.EventType.EDITING_DID_ENDED, this.validateAmount, this);
                case 14:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onInit() {
            return _onInit.apply(this, arguments);
          }
          return onInit;
        }();
        _proto.onBtnSelect2Click = function onBtnSelect2Click() {
          this.showNetworkSelect();
        };
        _proto.onBtnConfirmClick = function onBtnConfirmClick() {
          if (!this.validateAddress() || !this.validateAmount()) {
            return;
          }
          var withdrawInfo = {
            playerid: RoleData.inst.playerID,
            chain: WalletData.inst.chainKey,
            address: this.pane.m_withdrawGroup.m_inputAddress.text,
            amount: parseFloat(this.pane.m_withdrawGroup.m_inputAmount.text)
          };
          var view = WalletWithdrawConfirmDialog.create(this);
          view.setWithdrawInfo(withdrawInfo, this.pane.m_btnSelect2.m_name.text);
          view.showOn(this.grootInst);
        };
        _proto.validateAddress = function validateAddress() {
          var _this$pane$m_withdraw = this.pane.m_withdrawGroup,
            m_inputAddress = _this$pane$m_withdraw.m_inputAddress,
            m_isAddressErr = _this$pane$m_withdraw.m_isAddressErr;
          m_inputAddress._editBox.textLabel.verticalAlign = VerticalTextAlignment.CENTER;
          var address = m_inputAddress.text.trim();
          m_isAddressErr.selectedIndex = 0;
          if (!address) {
            m_isAddressErr.selectedIndex = 1;
            this.setAddressTip('WALLET_ADRESSEMPTY');
            return false;
          }
          var depositAddress = WalletData.inst.chainAddress.get(WalletData.inst.chainKey);
          if (address === depositAddress) {
            m_isAddressErr.selectedIndex = 1;
            this.setAddressTip('WALLET_ERROTIPS1');
            return false;
          }
          return true;
        };
        _proto.validateAmount = function validateAmount() {
          var _this$pane$m_withdraw2 = this.pane.m_withdrawGroup,
            m_inputAmount = _this$pane$m_withdraw2.m_inputAmount,
            m_isAmountErr = _this$pane$m_withdraw2.m_isAmountErr,
            m_textCreditedAmount = _this$pane$m_withdraw2.m_textCreditedAmount;
          var amountText = m_inputAmount.text.trim();
          var amount = parseFloat(amountText);
          if (isNaN(amount)) {
            this.pane.m_withdrawGroup.m_isAmountErr.selectedIndex = 1;
            this.setAmountTip('WALLET_AMOUNTEMPTY');
            m_inputAmount.text = '';
            return false;
          }
          amount = parseFloat(amount.toFixed(2));
          m_inputAmount.text = amount.toFixed(2);
          if (amount > RoleData.inst.cash) {
            amount = RoleData.inst.cash;
            m_inputAmount.text = amount.toFixed(2);
          }
          if (amount < MIN_AMOUNT) {
            this.pane.m_withdrawGroup.m_isAmountErr.selectedIndex = 1;
            this.setAmountTip(LanguageManager.get('WALLET_ERROTIPS4').replace('%d', MIN_AMOUNT.toString()));
            return false;
          }
          m_isAmountErr.selectedIndex = 0;
          var creditedAmount = Utils.toFormat(amount - FEE, 2, true);
          m_textCreditedAmount.text = setPayChannelStr(creditedAmount);
          return true;
        };
        _proto.setAddressTip = function setAddressTip(text) {
          this.pane.m_withdrawGroup.m_addressTip.text = text;
        };
        _proto.setAmountTip = function setAmountTip(text) {
          this.pane.m_withdrawGroup.m_amountTip.text = text;
        };
        _proto.showNetworkSelect = function showNetworkSelect() {
          var _this2 = this;
          var networkDialog = WalletSelectNetworkDialog.create(this);
          networkDialog.addHook({
            onPageDestroy: function onPageDestroy() {
              _this2.setNetwork();
              var address = WalletData.inst.chainAddress.get(WalletData.inst.chainKey);
              if (address) {
                var text = _this2.pane.m_withdrawGroup.m_inputAddress.text;
                if (text) {
                  text = text.trim();
                  if (text.length > 0) {
                    _this2.validateAddress();
                  }
                }
              } else {
                _this2.obtainPaymentAddress();
              }
            }
          });
          networkDialog.showOn(this.grootInst);
        }

        /** 获取链列表 */;
        _proto.getChainList = /*#__PURE__*/
        function () {
          var _getChainList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var param, res;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  param = {
                    time: Utils.curServerTimeSecondstamp
                  };
                  _context2.next = 3;
                  return HttpPayment.getChainListRequest.create(param).post();
                case 3:
                  res = _context2.sent;
                  if (!(res.code === 200)) {
                    _context2.next = 7;
                    break;
                  }
                  WalletData.inst.chainList = res.data;
                  return _context2.abrupt("return", Promise.resolve(true));
                case 7:
                  return _context2.abrupt("return", Promise.resolve(false));
                case 8:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function getChainList() {
            return _getChainList.apply(this, arguments);
          }
          return getChainList;
        }() /** 获取付款地址 */;
        _proto.obtainPaymentAddress = /*#__PURE__*/
        function () {
          var _obtainPaymentAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this3 = this;
            var chain, param;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  chain = WalletData.inst.chainKey;
                  param = {
                    playerid: RoleData.inst.playerID,
                    chain: chain
                  };
                  HttpPayment.PayAddrRequest.create(param).post().then(function (res) {
                    if (res.code === 200) {
                      if (res.data && res.data.address) {
                        WalletData.inst.chainAddress.set(chain, res.data.address);
                        if (WalletData.inst.chainKey == chain) {
                          var text = _this3.pane.m_withdrawGroup.m_inputAddress.text;
                          if (text) {
                            text = text.trim();
                            if (text.length > 0) {
                              _this3.validateAddress();
                            }
                          }
                        }
                      } else {
                        Log.debug.error('PayAddrRequest 返回地址为空', res);
                      }
                    }
                  });
                case 3:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function obtainPaymentAddress() {
            return _obtainPaymentAddress.apply(this, arguments);
          }
          return obtainPaymentAddress;
        }();
        _proto.setCurrency = function setCurrency() {
          if (!WalletData.inst.currency) return;
          this.pane.m_btnSelect1.m_type.selectedPage = WalletData.inst.currency;
        };
        _proto.setNetwork = function setNetwork() {
          if (!WalletData.inst.chainKey) return;
          this.pane.m_btnSelect2.m_name.text = WalletData.inst.chainKey;
        };
        return WalletWithdrawPage;
      }(GameWindowBase), (_applyDecoratedDescriptor(_class.prototype, "onBtnConfirmClick", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "onBtnConfirmClick"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "getChainList", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "getChainList"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "obtainPaymentAddress", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "obtainPaymentAddress"), _class.prototype)), _class)));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletWithdrawSuccessPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameWindowBase.ts', './Logger.ts', './WalletDetailsPage.ts', './UI_WalletWithdrawSuccessPage.ts'], function (exports) {
  var _inheritsLoose, cclegacy, EEnterType, GameWindowBase, Log, WalletDetailsPage, UI_WalletWithdrawSuccessPage;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EEnterType = module.EEnterType;
      GameWindowBase = module.GameWindowBase;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      WalletDetailsPage = module.default;
    }, function (module) {
      UI_WalletWithdrawSuccessPage = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c9133bcS0ZCaZf6aSVNZJDe", "WalletWithdrawSuccessPage", undefined);
      var WalletWithdrawSuccessPage = exports('default', /*#__PURE__*/function (_GameWindowBase) {
        _inheritsLoose(WalletWithdrawSuccessPage, _GameWindowBase);
        WalletWithdrawSuccessPage.create = function create(from, coverUnderlyingWindow) {
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          return new WalletWithdrawSuccessPage(from, coverUnderlyingWindow);
        };
        function WalletWithdrawSuccessPage(from, coverUnderlyingWindow) {
          var _this;
          if (coverUnderlyingWindow === void 0) {
            coverUnderlyingWindow = true;
          }
          _this = _GameWindowBase.call(this, from) || this;
          _this.withdrawInfo = void 0;
          _this["package"] = ['FGUI/Wallet'];
          _this.paneClass = UI_WalletWithdrawSuccessPage;
          _this.coverUnderlyingWindow = true;
          _this.removeUnderlyingWindow = false;
          _this.gestureCloseWindow = true;
          _this.showEnterLoading = false;
          _this.enterType = EEnterType.none;
          _this.reportOpenPage = true;
          _this.pageName = 'WalletWithdrawSuccessPage';
          _this.coverUnderlyingWindow = coverUnderlyingWindow;
          return _this;
        }
        var _proto = WalletWithdrawSuccessPage.prototype;
        _proto.onInit = function onInit() {
          Log.debug.log('WalletWithdrawSuccessPage', 'onInit');
          this.pane.m_btnDetails.onClick(this.onBtnDetails, this);
        };
        _proto.setWithdrawInfo = function setWithdrawInfo(withdrawInfo) {
          this.withdrawInfo = withdrawInfo;
        };
        _proto.onBtnDetails = function onBtnDetails() {
          var view = WalletDetailsPage.create(this, this.coverUnderlyingWindow);
          view.setDetailsItem(this.withdrawInfo);
          view.showOn(this.grootInst);
        };
        return WalletWithdrawSuccessPage;
      }(GameWindowBase));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XXTEA2.ts", ['cc', './CocosDevKit.ts', './Logger.ts'], function (exports) {
  var cclegacy, Log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      Log = module.Log;
    }],
    execute: function () {
      exports('XXTEA2', void 0);
      cclegacy._RF.push({}, "c719dYpkPhACbQBE8W1fvpQ", "XXTEA2", undefined);
      var XXTEA2;
      (function (_XXTEA) {
        var delta = 0x9e3779b9;
        function longArrayToString(data, includeLength) {
          var length = data.length,
            n = length - 1 << 2;
          if (includeLength) {
            var m = data[length - 1];
            if (m < n - 3 || m > n) return null;
            n = m;
          }
          for (var i = 0; i < length; ++i) {
            data[i] = String.fromCharCode(data[i] & 0xff, data[i] >>> 8 & 0xff, data[i] >>> 16 & 0xff, data[i] >>> 24 & 0xff);
          }
          if (includeLength) {
            return data.join('').substring(0, n);
          } else {
            return data.join('');
          }
        }
        function stringToLongArray(string, includeLength) {
          var length = string.length;
          var result = [];
          for (var i = 0; i < length; i += 4) {
            result[i >> 2] = string.charCodeAt(i) | string.charCodeAt(i + 1) << 8 | string.charCodeAt(i + 2) << 16 | string.charCodeAt(i + 3) << 24;
          }
          if (includeLength) {
            result[result.length] = length;
          }
          return result;
        }
        function encrypt(string, key) {
          if (string === '') {
            return '';
          }
          // cryptoes.default.
          // string = new Buffer.from(string).toString('base64');
          var v = stringToLongArray(string, true),
            k = stringToLongArray(key, false),
            n = v.length - 1,
            z = v[n],
            y = v[0],
            mx,
            e,
            p,
            q = Math.floor(6 + 52 / (n + 1)),
            sum = 0;
          if (k.length < 4) {
            k.length = 4;
          }
          while (0 <= --q) {
            sum = sum + delta & 0xffffffff;
            e = sum >>> 2 & 3;
            for (p = 0; p < n; ++p) {
              y = v[p + 1];
              mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
              z = v[p] = v[p] + mx & 0xffffffff;
            }
            y = v[0];
            mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
            z = v[n] = v[n] + mx & 0xffffffff;
          }
          return longArrayToString(v, false);
        }
        _XXTEA.encrypt = encrypt;
        function encryptToBase64(data, key) {
          try {
            return globalThis.btoa(encrypt(data, key));
          } catch (error) {
            Log.debug.error('XXTEA2 encryptToBase64 error', error);
            throw error;
          }
        }
        _XXTEA.encryptToBase64 = encryptToBase64;
        function decrypt(string, key) {
          if (string === '') {
            return '';
          }
          var v = stringToLongArray(string, false);
          var k = stringToLongArray(key, false);
          if (k.length < 4) {
            k.length = 4;
          }
          var n = v.length - 1;
          var z = v[n - 1],
            y = v[0];
          var mx,
            e,
            p,
            q = Math.floor(6 + 52 / (n + 1)),
            sum = q * delta & 0xffffffff;
          while (sum !== 0) {
            e = sum >>> 2 & 3;
            for (p = n; p > 0; --p) {
              z = v[p - 1];
              mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
              y = v[p] = v[p] - mx & 0xffffffff;
            }
            z = v[n];
            mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
            y = v[0] = v[0] - mx & 0xffffffff;
            sum = sum - delta & 0xffffffff;
          }
          // return new Buffer.from(longArrayToString(v, true), 'base64').toString();
          return longArrayToString(v, true);
        }
        _XXTEA.decrypt = decrypt;
        function decryptFromBase64(data, key) {
          try {
            if (data === undefined || data === null || data.length === 0) {
              return data;
            }
            return decrypt(globalThis.atob(data), key);
          } catch (error) {
            Log.debug.error('XXTEA2 decryptFromBase64 error', error);
            throw error;
          }
        }
        _XXTEA.decryptFromBase64 = decryptFromBase64;
      })(XXTEA2 || (XXTEA2 = exports('XXTEA2', {})));
      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=index.js.map